#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABPP_P000

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "KawaiiPhysics_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABPP_P000.ABPP_P000_C
// 0x1F60 (0x21D0 - 0x0270)
class UABPP_P000_C final : public UAnimInstance
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0278(0x0030)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_SubInput;                            // 0x02A8(0x0078)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0320(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0340(0x0020)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_12;                    // 0x0360(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_11;                    // 0x05B0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_10;                    // 0x0800(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_9;                     // 0x0A50(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_8;                     // 0x0CA0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_7;                     // 0x0EF0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_6;                     // 0x1140(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_5;                     // 0x1390(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_4;                     // 0x15E0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_3;                     // 0x1830(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_2;                     // 0x1A80(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_1;                     // 0x1CD0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics;                       // 0x1F20(0x0250)()
	struct FKawaiiPhysicsSettings                 PhSettings_Skirt;                                  // 0x2170(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         DummyBoneLength;                                   // 0x2188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportDistanceThreshold;                         // 0x218C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportRotationThreshold;                         // 0x2190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableWind;                                        // 0x2194(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2195[0x3];                                     // 0x2195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKawaiiPhysicsSettings                 PhSettings_Hair;                                   // 0x2198(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKawaiiPhysicsSettings                 PhSettings_Ribbon;                                 // 0x21B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_ABPP_P000(int32 EntryPoint);
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABPP_P000_C">();
	}
	static class UABPP_P000_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABPP_P000_C>();
	}
};
static_assert(alignof(UABPP_P000_C) == 0x000010, "Wrong alignment on UABPP_P000_C");
static_assert(sizeof(UABPP_P000_C) == 0x0021D0, "Wrong size on UABPP_P000_C");
static_assert(offsetof(UABPP_P000_C, UberGraphFrame) == 0x000270, "Member 'UABPP_P000_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_Root) == 0x000278, "Member 'UABPP_P000_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_SubInput) == 0x0002A8, "Member 'UABPP_P000_C::AnimGraphNode_SubInput' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_LocalToComponentSpace) == 0x000320, "Member 'UABPP_P000_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_ComponentToLocalSpace) == 0x000340, "Member 'UABPP_P000_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_12) == 0x000360, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_12' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_11) == 0x0005B0, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_11' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_10) == 0x000800, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_10' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_9) == 0x000A50, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_9' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_8) == 0x000CA0, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_8' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_7) == 0x000EF0, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_7' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_6) == 0x001140, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_6' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_5) == 0x001390, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_5' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_4) == 0x0015E0, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_4' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_3) == 0x001830, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_3' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_2) == 0x001A80, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_2' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics_1) == 0x001CD0, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics_1' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, AnimGraphNode_KawaiiPhysics) == 0x001F20, "Member 'UABPP_P000_C::AnimGraphNode_KawaiiPhysics' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, PhSettings_Skirt) == 0x002170, "Member 'UABPP_P000_C::PhSettings_Skirt' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, DummyBoneLength) == 0x002188, "Member 'UABPP_P000_C::DummyBoneLength' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, TeleportDistanceThreshold) == 0x00218C, "Member 'UABPP_P000_C::TeleportDistanceThreshold' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, TeleportRotationThreshold) == 0x002190, "Member 'UABPP_P000_C::TeleportRotationThreshold' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, EnableWind) == 0x002194, "Member 'UABPP_P000_C::EnableWind' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, PhSettings_Hair) == 0x002198, "Member 'UABPP_P000_C::PhSettings_Hair' has a wrong offset!");
static_assert(offsetof(UABPP_P000_C, PhSettings_Ribbon) == 0x0021B0, "Member 'UABPP_P000_C::PhSettings_Ribbon' has a wrong offset!");

}

