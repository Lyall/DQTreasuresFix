#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PiratesCage_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PiratesCage_01.BP_PiratesCage_01_C
// 0x0088 (0x0338 - 0x02B0)
class ABP_PiratesCage_01_C final : public AFieldObjectBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_e_ob_birdcage_swing_01_o_sd_C*      BP_e_ob_birdcage_swing_01_o_sd;                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAimTargetComponent*                    AimTarget;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToggleVisibilityComponent*             ToggleVisibility;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 N000_00;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 N001_00;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EventSender_C*                      BP_EventSender;                                    // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DBG_Start;                                         // 0x02F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DBG_End;                                           // 0x02FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCount;                                          // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EventID;                                           // 0x030C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 HitEffectDefines;                                  // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AEffectBase*>                    EffectBuffer;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PiratesCage_01(int32 EntryPoint);
	void HandleShakeEvent(const struct FVector& HitLocation);
	void DoEventStartSubBP(const class FName& ID);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PlayHitSound(const struct FHitResult& HitResult);
	void SetOptionVisible(bool IsVisible);
	void PutHitEffect(const struct FVector& HitLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PiratesCage_01_C">();
	}
	static class ABP_PiratesCage_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PiratesCage_01_C>();
	}
};
static_assert(alignof(ABP_PiratesCage_01_C) == 0x000008, "Wrong alignment on ABP_PiratesCage_01_C");
static_assert(sizeof(ABP_PiratesCage_01_C) == 0x000338, "Wrong size on ABP_PiratesCage_01_C");
static_assert(offsetof(ABP_PiratesCage_01_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_PiratesCage_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, BP_e_ob_birdcage_swing_01_o_sd) == 0x0002B8, "Member 'ABP_PiratesCage_01_C::BP_e_ob_birdcage_swing_01_o_sd' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, AimTarget) == 0x0002C0, "Member 'ABP_PiratesCage_01_C::AimTarget' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, ToggleVisibility) == 0x0002C8, "Member 'ABP_PiratesCage_01_C::ToggleVisibility' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, N000_00) == 0x0002D0, "Member 'ABP_PiratesCage_01_C::N000_00' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, N001_00) == 0x0002D8, "Member 'ABP_PiratesCage_01_C::N001_00' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, StaticMesh) == 0x0002E0, "Member 'ABP_PiratesCage_01_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, BP_EventSender) == 0x0002E8, "Member 'ABP_PiratesCage_01_C::BP_EventSender' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, DBG_Start) == 0x0002F0, "Member 'ABP_PiratesCage_01_C::DBG_Start' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, DBG_End) == 0x0002FC, "Member 'ABP_PiratesCage_01_C::DBG_End' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, HitCount) == 0x000308, "Member 'ABP_PiratesCage_01_C::HitCount' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, EventID) == 0x00030C, "Member 'ABP_PiratesCage_01_C::EventID' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, HitEffectDefines) == 0x000318, "Member 'ABP_PiratesCage_01_C::HitEffectDefines' has a wrong offset!");
static_assert(offsetof(ABP_PiratesCage_01_C, EffectBuffer) == 0x000328, "Member 'ABP_PiratesCage_01_C::EffectBuffer' has a wrong offset!");

}

