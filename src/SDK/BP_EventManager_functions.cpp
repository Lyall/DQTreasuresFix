#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventManager

#include "Basic.hpp"

#include "BP_EventManager_classes.hpp"
#include "BP_EventManager_parameters.hpp"


namespace SDK
{

// Function BP_EventManager.BP_EventManager_C.ExecuteUbergraph_BP_EventManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::ExecuteUbergraph_BP_EventManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ExecuteUbergraph_BP_EventManager");

	Params::BP_EventManager_C_ExecuteUbergraph_BP_EventManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayEventImpl
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EQuestState                             QuestState_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::PlayEventImpl(class FName EventID_0, EQuestState QuestState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayEventImpl");

	Params::BP_EventManager_C_PlayEventImpl Parms{};

	Parms.EventID_0 = EventID_0;
	Parms.QuestState_0 = QuestState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayEventOfItemFirstAdd
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             ItemFirstAdd                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::PlayEventOfItemFirstAdd(const class FName& ItemFirstAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayEventOfItemFirstAdd");

	Params::BP_EventManager_C_PlayEventOfItemFirstAdd Parms{};

	Parms.ItemFirstAdd = ItemFirstAdd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.PlayEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             EventID_0                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EQuestState                             QuestState_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::PlayEvent(const class FName& EventID_0, EQuestState QuestState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayEvent");

	Params::BP_EventManager_C_PlayEvent Parms{};

	Parms.EventID_0 = EventID_0;
	Parms.QuestState_0 = QuestState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.UpdateQuestTargetEnemyUI
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   KindId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::UpdateQuestTargetEnemyUI(int32 KindId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "UpdateQuestTargetEnemyUI");

	Params::BP_EventManager_C_UpdateQuestTargetEnemyUI Parms{};

	Parms.KindId = KindId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SetEventSendNpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_NPC_C*                        SendActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::SetEventSendNpc(class ABP_NPC_C* SendActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventSendNpc");

	Params::BP_EventManager_C_SetEventSendNpc Parms{};

	Parms.SendActor = SendActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CallPlayEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EEventType                              EventType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             QuestID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EQuestState                             QuestState_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_EventTalktBranchData         TextBranchData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<struct FST_TextGoto>             TextGotoData                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class AActor*                           Sender_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::CallPlayEvent(const class FString& EventID_0, EEventType EventType, class FName QuestID_0, EQuestState QuestState_0, const struct FST_EventTalktBranchData& TextBranchData, const TArray<struct FST_TextGoto>& TextGotoData, class AActor* Sender_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CallPlayEvent");

	Params::BP_EventManager_C_CallPlayEvent Parms{};

	Parms.EventID_0 = std::move(EventID_0);
	Parms.EventType = EventType;
	Parms.QuestID_0 = QuestID_0;
	Parms.QuestState_0 = QuestState_0;
	Parms.TextBranchData = std::move(TextBranchData);
	Parms.TextGotoData = std::move(TextGotoData);
	Parms.Sender_0 = Sender_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndPlayEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEventCancel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventManager_C::EndPlayEvent(bool IsEventCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndPlayEvent");

	Params::BP_EventManager_C_EndPlayEvent Parms{};

	Parms.IsEventCancel = IsEventCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SendEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  Sender_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DebugMode                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventManager_C::SendEvent(class FName EventID_0, class UActorComponent* Sender_0, bool DebugMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SendEvent");

	Params::BP_EventManager_C_SendEvent Parms{};

	Parms.EventID_0 = EventID_0;
	Parms.Sender_0 = Sender_0;
	Parms.DebugMode = DebugMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.SendLiftEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EventSender_C*                EventSender_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LiftId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StarScarId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::SendLiftEvent(class UBP_EventSender_C* EventSender_0, int32 LiftId, class FName StarScarId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SendLiftEvent");

	Params::BP_EventManager_C_SendLiftEvent Parms{};

	Parms.EventSender_0 = EventSender_0;
	Parms.LiftId = LiftId;
	Parms.StarScarId = StarScarId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CancelQuestCheck                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSelectCancel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSkipEvent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventManager_C::EndEvent(bool CancelQuestCheck, bool IsSelectCancel, bool IsSkipEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndEvent");

	Params::BP_EventManager_C_EndEvent Parms{};

	Parms.CancelQuestCheck = CancelQuestCheck;
	Parms.IsSelectCancel = IsSelectCancel;
	Parms.IsSkipEvent = IsSkipEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.EndOverlapEventTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::EndOverlapEventTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EndOverlapEventTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PlayQuestClearEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::PlayQuestClearEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PlayQuestClearEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EventFin
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::EventFin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventFin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.Init
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EventExecter_C*               BP_EventExector                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::Init(class UBP_EventExecter_C* BP_EventExector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "Init");

	Params::BP_EventManager_C_Init Parms{};

	Parms.BP_EventExector = BP_EventExector;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ClearEvent
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ClearEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ClearEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EventInput
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DelataTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    GamePaused                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FKeyInput                        KeyInput                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FKeyInput                        OutKeyInput                                            (Parm, OutParm)
// struct FEventReply                      Reply                                                  (Parm, OutParm)

void UBP_EventManager_C::EventInput(float DelataTime, bool GamePaused, const struct FKeyInput& KeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Reply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventInput");

	Params::BP_EventManager_C_EventInput Parms{};

	Parms.DelataTime = DelataTime;
	Parms.GamePaused = GamePaused;
	Parms.KeyInput = std::move(KeyInput);

	UObject::ProcessEvent(Func, &Parms);

	if (OutKeyInput != nullptr)
		*OutKeyInput = std::move(Parms.OutKeyInput);

	if (Reply != nullptr)
		*Reply = std::move(Parms.Reply);
}


// Function BP_EventManager.BP_EventManager_C.EventDisableInput
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::EventDisableInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventDisableInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.EventEnableInput
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::EventEnableInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "EventEnableInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ChangeInput
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ChangeInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ChangeInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GrantEXP
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::GrantEXP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GrantEXP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.GrantReward
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::GrantReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GrantReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetEventFlag
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::SetEventFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetEventClearData
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::SetEventClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetEventData
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FST_EventData                    EventData                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_EventManager_C::SetEventData(const struct FST_EventData& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetEventData");

	Params::BP_EventManager_C_SetEventData Parms{};

	Parms.EventData = std::move(EventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.CheckEventData
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::CheckEventData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "CheckEventData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.AdjustIEMessageTime
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::AdjustIEMessageTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "AdjustIEMessageTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.SetSender
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEventSender*                     Sender_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventManager_C::SetSender(class UEventSender* Sender_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetSender");

	Params::BP_EventManager_C_SetSender Parms{};

	Parms.Sender_0 = Sender_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventManager.BP_EventManager_C.ChangeStateEventStart
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ChangeStateEventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ChangeStateEventStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ChangeStateEventEnd
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ChangeStateEventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ChangeStateEventEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.HideAllEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::HideAllEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "HideAllEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ShowAllEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ShowAllEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ShowAllEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PauseAllEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::PauseAllEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PauseAllEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ResumeAllEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ResumeAllEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResumeAllEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.HideAllPartyMonster
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::HideAllPartyMonster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "HideAllPartyMonster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ShowAllPartyMonster
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ShowAllPartyMonster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ShowAllPartyMonster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.ResumeAllPartyMonster
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::ResumeAllPartyMonster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "ResumeAllPartyMonster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.PauseAllPartyMonster
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventManager_C::PauseAllPartyMonster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "PauseAllPartyMonster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventManager.BP_EventManager_C.IsPlayingEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_EventManager_C::IsPlayingEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "IsPlayingEvent");

	Params::BP_EventManager_C_IsPlayingEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.GetEventActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UBP_EventManager_C::GetEventActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "GetEventActor");

	Params::BP_EventManager_C_GetEventActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_EventManager.BP_EventManager_C.SetSpawnEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSpawn                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventManager_C::SetSpawnEnemy(const bool IsSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventManager_C", "SetSpawnEnemy");

	Params::BP_EventManager_C_SetSpawnEnemy Parms{};

	Parms.IsSpawn = IsSpawn;

	UObject::ProcessEvent(Func, &Parms);
}

}

