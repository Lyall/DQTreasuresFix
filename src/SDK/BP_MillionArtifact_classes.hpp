#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MillionArtifact

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MillionArtifact.BP_MillionArtifact_C
// 0x0028 (0x0370 - 0x0348)
class ABP_MillionArtifact_C final : public AArtifactObjectBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundPatternControlComponent*          SoundPatternControl;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UObjectReactionDefaultComponent*        ObjectReactionDefault;                             // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_e_artifact_01_o_sd_C*               BP_e_artifact_01_o_sd;                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_MillionArtifact(int32 EntryPoint);

	class UPrimitiveComponent* GetWaterOverlapCollision() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MillionArtifact_C">();
	}
	static class ABP_MillionArtifact_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MillionArtifact_C>();
	}
};
static_assert(alignof(ABP_MillionArtifact_C) == 0x000008, "Wrong alignment on ABP_MillionArtifact_C");
static_assert(sizeof(ABP_MillionArtifact_C) == 0x000370, "Wrong size on ABP_MillionArtifact_C");
static_assert(offsetof(ABP_MillionArtifact_C, UberGraphFrame) == 0x000348, "Member 'ABP_MillionArtifact_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MillionArtifact_C, Sphere) == 0x000350, "Member 'ABP_MillionArtifact_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_MillionArtifact_C, SoundPatternControl) == 0x000358, "Member 'ABP_MillionArtifact_C::SoundPatternControl' has a wrong offset!");
static_assert(offsetof(ABP_MillionArtifact_C, ObjectReactionDefault) == 0x000360, "Member 'ABP_MillionArtifact_C::ObjectReactionDefault' has a wrong offset!");
static_assert(offsetof(ABP_MillionArtifact_C, BP_e_artifact_01_o_sd) == 0x000368, "Member 'ABP_MillionArtifact_C::BP_e_artifact_01_o_sd' has a wrong offset!");

}

