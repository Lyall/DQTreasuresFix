#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerCamera.BP_PlayerCamera_C
// 0x0090 (0x0418 - 0x0388)
class ABP_PlayerCamera_C final : public ADarwinCamera
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                m____Rotation_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD;    // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                m____Offset_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD;      // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         m____BoomLength_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD;  // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            m_____Direction_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD;  // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     m___________;                                      // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              MoveEvent;                                         // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              RotateEvent;                                       // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Coefficient_Yaw_Normal;                            // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Coefficient_Pitch_Normal;                          // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Coefficient_Yaw_SlingShot;                         // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Coefficient_Pitch_SlingShot;                       // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          Character;                                         // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_CameraInfo_C*                        CameraInfo;                                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CurrentState;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BaseRotation;                                      // 0x0400(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                BaseLocation;                                      // 0x040C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerCamera(int32 EntryPoint);
	void ShowCameraInfo(bool bEnd);
	void MoveWhileDebug();
	void Rotate(const struct FVector& Input);
	void ReceiveBeginPlay();
	void InitializePos();
	void ChangeCamera(float BlendTime, EViewTargetBlendFunction BlendFunc);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveDestroyed();
	void DirectionMode(bool bEnd, ECameraDirectionType Type);
	void UpdateCameraInfo();
	void m_____________UpdateFunc();
	void m_____________FinishedFunc();
	void LoadData();
	void GetOwnerID(class FName* ID);
	class UCameraComponent* GetCamera();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerCamera_C">();
	}
	static class ABP_PlayerCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerCamera_C>();
	}
};
static_assert(alignof(ABP_PlayerCamera_C) == 0x000008, "Wrong alignment on ABP_PlayerCamera_C");
static_assert(sizeof(ABP_PlayerCamera_C) == 0x000418, "Wrong size on ABP_PlayerCamera_C");
static_assert(offsetof(ABP_PlayerCamera_C, UberGraphFrame) == 0x000388, "Member 'ABP_PlayerCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, m____Rotation_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD) == 0x000390, "Member 'ABP_PlayerCamera_C::m____Rotation_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, m____Offset_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD) == 0x00039C, "Member 'ABP_PlayerCamera_C::m____Offset_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, m____BoomLength_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD) == 0x0003A8, "Member 'ABP_PlayerCamera_C::m____BoomLength_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, m_____Direction_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD) == 0x0003AC, "Member 'ABP_PlayerCamera_C::m_____Direction_0A40CEB6463AD3D2E8DD5EA7C4A9E0CD' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, m___________) == 0x0003B0, "Member 'ABP_PlayerCamera_C::m___________' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, MoveEvent) == 0x0003B8, "Member 'ABP_PlayerCamera_C::MoveEvent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, RotateEvent) == 0x0003C8, "Member 'ABP_PlayerCamera_C::RotateEvent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, Coefficient_Yaw_Normal) == 0x0003D8, "Member 'ABP_PlayerCamera_C::Coefficient_Yaw_Normal' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, Coefficient_Pitch_Normal) == 0x0003DC, "Member 'ABP_PlayerCamera_C::Coefficient_Pitch_Normal' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, Coefficient_Yaw_SlingShot) == 0x0003E0, "Member 'ABP_PlayerCamera_C::Coefficient_Yaw_SlingShot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, Coefficient_Pitch_SlingShot) == 0x0003E4, "Member 'ABP_PlayerCamera_C::Coefficient_Pitch_SlingShot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, Character) == 0x0003E8, "Member 'ABP_PlayerCamera_C::Character' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, CameraInfo) == 0x0003F0, "Member 'ABP_PlayerCamera_C::CameraInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, CurrentState) == 0x0003F8, "Member 'ABP_PlayerCamera_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, BaseRotation) == 0x000400, "Member 'ABP_PlayerCamera_C::BaseRotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCamera_C, BaseLocation) == 0x00040C, "Member 'ABP_PlayerCamera_C::BaseLocation' has a wrong offset!");

}

