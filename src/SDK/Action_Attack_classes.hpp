#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Action_Attack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Action_Attack.Action_Attack_C
// 0x0060 (0x0190 - 0x0130)
class UAction_Attack_C final : public UActionStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0130(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bEnableCombo;                                      // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableRotation;                                   // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableDodge;                                      // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13B[0x1];                                      // 0x013B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Combo;                                             // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BattleTimer;                                       // 0x0140(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            RigidTimeEffctHandle;                              // 0x0148(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RigidTimer;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AttackExecuted;                                    // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DodgeExecuted;                                     // 0x0159(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            BattleModeEffectHandle;                            // 0x015C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         AirCombo;                                          // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableAirAttack;                                   // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AirAttackExecuted;                                 // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AirMaxCombo;                                       // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TargetWasAbove;                                    // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ChainTime;                                         // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasPressed;                                        // 0x0172(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Canceled;                                          // 0x0173(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector2D                              DistanceToTarget;                                  // 0x0174(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DirectionToTarget;                                 // 0x017C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AirAttackDisablingTimer;                           // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AirAttackDisablingTimeLimit;                       // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Button_A(bool bRelease);
	void ExecuteUbergraph_Action_Attack(int32 EntryPoint);
	void UpdateDisablingAirAttackTimer(float DeltaTime);
	void ToEnableAirAttack();
	void DestroyAttachedEffect();
	bool IsTargetInAirRange(class FName OverviewID);
	void CalculateTargetDistanceAndHeight(bool* Result, float* Distance, float* Height, struct FVector* Direction);
	void SeAirAttackData();
	void SeGroundAttackData();
	bool IsTargetBelow();
	bool GetGroundAttackData();
	void GetAirAttackData(bool* Found);
	void Enter_Ground();
	void Exit();
	void Enter_Air();
	void Update(float DeltaTime);
	void RotateToTarget_XY();
	void RotateToTarget();
	void ResetRotation();
	void Cancel();
	void OnLand();
	void Enter();
	void StartChainTime(bool End);
	void ComboInputEnable(bool End, float TotalDuration);
	void Button_X(bool bRelease);
	void Button_Y(bool bRelease);
	void Button_B(bool bRelease);
	void DoAttack(bool Air);
	void Button_L(bool bRelease);
	void Button_R(bool bRelease);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Action_Attack_C">();
	}
	static class UAction_Attack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAction_Attack_C>();
	}
};
static_assert(alignof(UAction_Attack_C) == 0x000008, "Wrong alignment on UAction_Attack_C");
static_assert(sizeof(UAction_Attack_C) == 0x000190, "Wrong size on UAction_Attack_C");
static_assert(offsetof(UAction_Attack_C, UberGraphFrame) == 0x000130, "Member 'UAction_Attack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, bEnableCombo) == 0x000138, "Member 'UAction_Attack_C::bEnableCombo' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, bEnableRotation) == 0x000139, "Member 'UAction_Attack_C::bEnableRotation' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, bEnableDodge) == 0x00013A, "Member 'UAction_Attack_C::bEnableDodge' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, Combo) == 0x00013C, "Member 'UAction_Attack_C::Combo' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, BattleTimer) == 0x000140, "Member 'UAction_Attack_C::BattleTimer' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, RigidTimeEffctHandle) == 0x000148, "Member 'UAction_Attack_C::RigidTimeEffctHandle' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, RigidTimer) == 0x000150, "Member 'UAction_Attack_C::RigidTimer' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, AttackExecuted) == 0x000158, "Member 'UAction_Attack_C::AttackExecuted' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, DodgeExecuted) == 0x000159, "Member 'UAction_Attack_C::DodgeExecuted' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, BattleModeEffectHandle) == 0x00015C, "Member 'UAction_Attack_C::BattleModeEffectHandle' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, AirCombo) == 0x000164, "Member 'UAction_Attack_C::AirCombo' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, EnableAirAttack) == 0x000168, "Member 'UAction_Attack_C::EnableAirAttack' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, AirAttackExecuted) == 0x000169, "Member 'UAction_Attack_C::AirAttackExecuted' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, AirMaxCombo) == 0x00016C, "Member 'UAction_Attack_C::AirMaxCombo' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, TargetWasAbove) == 0x000170, "Member 'UAction_Attack_C::TargetWasAbove' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, ChainTime) == 0x000171, "Member 'UAction_Attack_C::ChainTime' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, WasPressed) == 0x000172, "Member 'UAction_Attack_C::WasPressed' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, Canceled) == 0x000173, "Member 'UAction_Attack_C::Canceled' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, DistanceToTarget) == 0x000174, "Member 'UAction_Attack_C::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, DirectionToTarget) == 0x00017C, "Member 'UAction_Attack_C::DirectionToTarget' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, AirAttackDisablingTimer) == 0x000188, "Member 'UAction_Attack_C::AirAttackDisablingTimer' has a wrong offset!");
static_assert(offsetof(UAction_Attack_C, AirAttackDisablingTimeLimit) == 0x00018C, "Member 'UAction_Attack_C::AirAttackDisablingTimeLimit' has a wrong offset!");

}

