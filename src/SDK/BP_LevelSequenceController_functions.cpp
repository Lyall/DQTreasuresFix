#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelSequenceController

#include "Basic.hpp"

#include "BP_LevelSequenceController_classes.hpp"
#include "BP_LevelSequenceController_parameters.hpp"


namespace SDK
{

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.ExecuteUbergraph_BP_LevelSequenceController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::ExecuteUbergraph_BP_LevelSequenceController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "ExecuteUbergraph_BP_LevelSequenceController");

	Params::BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallOpenDrawTalkWindow
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           TextID                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::CallOpenDrawTalkWindow(const class FString& TextID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "CallOpenDrawTalkWindow");

	Params::BP_LevelSequenceController_C_CallOpenDrawTalkWindow Parms{};

	Parms.TextID = std::move(TextID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_LevelSequenceController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PlayLevelSequence
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::PlayLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "PlayLevelSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.SetLooping
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SequenceLength                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::SetLooping(int32 SequenceLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "SetLooping");

	Params::BP_LevelSequenceController_C_SetLooping Parms{};

	Parms.SequenceLength = SequenceLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.EndSubLevelSequence
// (BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::EndSubLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "EndSubLevelSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PlaySubSequence
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              SubLevelSequence                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::PlaySubSequence(class ALevelSequenceActor* SubLevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "PlaySubSequence");

	Params::BP_LevelSequenceController_C_PlaySubSequence Parms{};

	Parms.SubLevelSequence = SubLevelSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallDrawTalkWindow_Old
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MassageStartIndex                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::CallDrawTalkWindow_Old(const int32 MassageStartIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "CallDrawTalkWindow_Old");

	Params::BP_LevelSequenceController_C_CallDrawTalkWindow_Old Parms{};

	Parms.MassageStartIndex = MassageStartIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallSetDrawTextInfo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDrawTextInfo                    DrawTextInfo                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// struct FST_EventTalktBranchData         TextBranch                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_LevelSequenceController_C::CallSetDrawTextInfo(const struct FDrawTextInfo& DrawTextInfo, const struct FST_EventTalktBranchData& TextBranch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "CallSetDrawTextInfo");

	Params::BP_LevelSequenceController_C_CallSetDrawTextInfo Parms{};

	Parms.DrawTextInfo = std::move(DrawTextInfo);
	Parms.TextBranch = std::move(TextBranch);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallEndLevelSequence
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLockOutgoing                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bCameraKeep                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LevelSequenceController_C::CallEndLevelSequence(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, bool bCameraKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "CallEndLevelSequence");

	Params::BP_LevelSequenceController_C_CallEndLevelSequence Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;
	Parms.bCameraKeep = bCameraKeep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.Init
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EventExecter_C*               BP_EventExector                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::Init(class UBP_EventExecter_C* BP_EventExector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "Init");

	Params::BP_LevelSequenceController_C_Init Parms{};

	Parms.BP_EventExector = BP_EventExector;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.StopPlayingSequence
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::StopPlayingSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "StopPlayingSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PlaySub
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::PlaySub()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "PlaySub");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.SkipPlayingSequence
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::SkipPlayingSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "SkipPlayingSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.SkipLevelSequence
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequencePlayer*             SkipLevelSequence_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::SkipLevelSequence(class ULevelSequencePlayer* SkipLevelSequence_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "SkipLevelSequence");

	Params::BP_LevelSequenceController_C_SkipLevelSequence Parms{};

	Parms.SkipLevelSequence_0 = SkipLevelSequence_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PrintCurrentCamera
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::PrintCurrentCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "PrintCurrentCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.StopPlayedSequence
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::StopPlayedSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "StopPlayedSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.StopMainSequence
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::StopMainSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "StopMainSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PrintStopLog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::PrintStopLog(const class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "PrintStopLog");

	Params::BP_LevelSequenceController_C_PrintStopLog Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CanStopSequencePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMovieSceneSequencePlayer*        StopTargetPlayer                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_LevelSequenceController_C::CanStopSequencePlayer(class UMovieSceneSequencePlayer* StopTargetPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "CanStopSequencePlayer");

	Params::BP_LevelSequenceController_C_CanStopSequencePlayer Parms{};

	Parms.StopTargetPlayer = StopTargetPlayer;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.ResetStarEmissive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        BP_EnviromentLighting                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::ResetStarEmissive(class ABP_EnvironmentLighting_C* BP_EnviromentLighting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "ResetStarEmissive");

	Params::BP_LevelSequenceController_C_ResetStarEmissive Parms{};

	Parms.BP_EnviromentLighting = BP_EnviromentLighting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.Set Star Emissive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        BP_EnviromentLighting                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BigStarEmissive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallStarEmissive                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::Set_Star_Emissive(class ABP_EnvironmentLighting_C* BP_EnviromentLighting, float BigStarEmissive, float SmallStarEmissive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "Set Star Emissive");

	Params::BP_LevelSequenceController_C_Set_Star_Emissive Parms{};

	Parms.BP_EnviromentLighting = BP_EnviromentLighting;
	Parms.BigStarEmissive = BigStarEmissive;
	Parms.SmallStarEmissive = SmallStarEmissive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.InitSky
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        ChangeEnvironmentLighting_0                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LevelSequenceController_C::InitSky(class ABP_EnvironmentLighting_C* ChangeEnvironmentLighting_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "InitSky");

	Params::BP_LevelSequenceController_C_InitSky Parms{};

	Parms.ChangeEnvironmentLighting_0 = ChangeEnvironmentLighting_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.ResetSkyPalam
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_LevelSequenceController_C::ResetSkyPalam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "ResetSkyPalam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelSequenceController.BP_LevelSequenceController_C.IsPlayingLevelSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    return_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_LevelSequenceController_C::IsPlayingLevelSequence(bool* return_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelSequenceController_C", "IsPlayingLevelSequence");

	Params::BP_LevelSequenceController_C_IsPlayingLevelSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (return_0 != nullptr)
		*return_0 = Parms.return_0;
}

}

