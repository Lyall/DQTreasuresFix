#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_Base

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"


namespace SDK::Params
{

// Function BTTask_Base.BTTask_Base_C.ExecuteUbergraph_BTTask_Base
// 0x0060 (0x0060 - 0x0000)
struct BTTask_Base_C_ExecuteUbergraph_BTTask_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICharacterInterface>   K2Node_DynamicCast_AsCharacter_Interface;          // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMonsterBase*                           K2Node_DynamicCast_AsMonster_Base;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMonsterBehavior                              CallFunc_GetBehavior_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x004C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base) == 0x000008, "Wrong alignment on BTTask_Base_C_ExecuteUbergraph_BTTask_Base");
static_assert(sizeof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base) == 0x000060, "Wrong size on BTTask_Base_C_ExecuteUbergraph_BTTask_Base");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, EntryPoint) == 0x000000, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_Event_OwnerController_1) == 0x000008, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_Event_OwnerController) == 0x000018, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_Event_ControlledPawn) == 0x000020, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_DynamicCast_AsCharacter_Interface) == 0x000028, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_DynamicCast_AsCharacter_Interface' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_DynamicCast_AsMonster_Base) == 0x000040, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_DynamicCast_AsMonster_Base' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, CallFunc_GetBehavior_ReturnValue) == 0x000049, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::CallFunc_GetBehavior_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004A, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ExecuteUbergraph_BTTask_Base, K2Node_CreateDelegate_OutputDelegate) == 0x00004C, "Member 'BTTask_Base_C_ExecuteUbergraph_BTTask_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BTTask_Base.BTTask_Base_C.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct BTTask_Base_C_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTTask_Base_C_ReceiveAbortAI) == 0x000008, "Wrong alignment on BTTask_Base_C_ReceiveAbortAI");
static_assert(sizeof(BTTask_Base_C_ReceiveAbortAI) == 0x000010, "Wrong size on BTTask_Base_C_ReceiveAbortAI");
static_assert(offsetof(BTTask_Base_C_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'BTTask_Base_C_ReceiveAbortAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'BTTask_Base_C_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// Function BTTask_Base.BTTask_Base_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTTask_Base_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTTask_Base_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTTask_Base_C_ReceiveExecuteAI");
static_assert(sizeof(BTTask_Base_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTTask_Base_C_ReceiveExecuteAI");
static_assert(offsetof(BTTask_Base_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTTask_Base_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTTask_Base_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTTask_Base.BTTask_Base_C.GetTarget
// 0x0028 (0x0028 - 0x0000)
struct BTTask_Base_C_GetTarget final
{
public:
	class UBlackboardComponent*                   Blackboard;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          Target;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetValueAsObject_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          K2Node_DynamicCast_AsGPACharacter;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTTask_Base_C_GetTarget) == 0x000008, "Wrong alignment on BTTask_Base_C_GetTarget");
static_assert(sizeof(BTTask_Base_C_GetTarget) == 0x000028, "Wrong size on BTTask_Base_C_GetTarget");
static_assert(offsetof(BTTask_Base_C_GetTarget, Blackboard) == 0x000000, "Member 'BTTask_Base_C_GetTarget::Blackboard' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_GetTarget, Target) == 0x000008, "Member 'BTTask_Base_C_GetTarget::Target' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_GetTarget, CallFunc_GetValueAsObject_ReturnValue) == 0x000010, "Member 'BTTask_Base_C_GetTarget::CallFunc_GetValueAsObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_GetTarget, K2Node_DynamicCast_AsGPACharacter) == 0x000018, "Member 'BTTask_Base_C_GetTarget::K2Node_DynamicCast_AsGPACharacter' has a wrong offset!");
static_assert(offsetof(BTTask_Base_C_GetTarget, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BTTask_Base_C_GetTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

