#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Action_SlingShot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Action_SlingShot.Action_SlingShot_C
// 0x0030 (0x0160 - 0x0130)
class UAction_SlingShot_C final : public UActionStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0130(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsAiming;                                          // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrevIndex;                                         // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Canceled;                                          // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForceExit;                                         // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanChangeTarget;                                   // 0x0142(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143[0x1];                                      // 0x0143(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PLAYER_LOCK_SLING_SHOT;                            // 0x0144(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Shot_WinStatus_C*                    SlingShotSelectWidget;                             // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseWheelDisableTimer;                            // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool IsAimAssistContinuable();
	void GetActionDetailID(class FName* ID);
	void SetActionDetailID();
	void Enter_Ground();
	void Enter_Air();
	void ShotOrEnd();
	void Move(const struct FVector& InputVector);
	void ChangeViewportAndUI(bool visible);
	void Release();
	void Update(float DeltaTime);
	void HoldSlingShot(bool End);
	void Exit();
	void Cancel();
	void Enter_Abnormal();
	void Button_Y(bool bRelease);
	void Button_A(bool bRelease);
	void Button_R(bool bRelease);
	void Button_RT(bool bRelease);
	void Button_L(bool bRelease);
	void Thumb_Left(bool bRelease);
	void CheckCurrentTarget();
	void Button_X(bool bRelease);
	void Button_B(bool bRelease);
	void SwordHide(const bool& IsBattleMode);
	void ExecuteUbergraph_Action_SlingShot(int32 EntryPoint);

	bool IsSpecialAbility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Action_SlingShot_C">();
	}
	static class UAction_SlingShot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAction_SlingShot_C>();
	}
};
static_assert(alignof(UAction_SlingShot_C) == 0x000008, "Wrong alignment on UAction_SlingShot_C");
static_assert(sizeof(UAction_SlingShot_C) == 0x000160, "Wrong size on UAction_SlingShot_C");
static_assert(offsetof(UAction_SlingShot_C, UberGraphFrame) == 0x000130, "Member 'UAction_SlingShot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, IsAiming) == 0x000138, "Member 'UAction_SlingShot_C::IsAiming' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, PrevIndex) == 0x00013C, "Member 'UAction_SlingShot_C::PrevIndex' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, Canceled) == 0x000140, "Member 'UAction_SlingShot_C::Canceled' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, ForceExit) == 0x000141, "Member 'UAction_SlingShot_C::ForceExit' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, CanChangeTarget) == 0x000142, "Member 'UAction_SlingShot_C::CanChangeTarget' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, PLAYER_LOCK_SLING_SHOT) == 0x000144, "Member 'UAction_SlingShot_C::PLAYER_LOCK_SLING_SHOT' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, SlingShotSelectWidget) == 0x000150, "Member 'UAction_SlingShot_C::SlingShotSelectWidget' has a wrong offset!");
static_assert(offsetof(UAction_SlingShot_C, MouseWheelDisableTimer) == 0x000158, "Member 'UAction_SlingShot_C::MouseWheelDisableTimer' has a wrong offset!");

}

