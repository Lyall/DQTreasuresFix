#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABPP_P001

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABPP_P001.ABPP_P001_C.ExecuteUbergraph_ABPP_P001
// 0x0038 (0x0038 - 0x0000)
struct ABPP_P001_C_ExecuteUbergraph_ABPP_P001 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001) == 0x000004, "Wrong alignment on ABPP_P001_C_ExecuteUbergraph_ABPP_P001");
static_assert(sizeof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001) == 0x000038, "Wrong size on ABPP_P001_C_ExecuteUbergraph_ABPP_P001");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, EntryPoint) == 0x000000, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Less_FloatFloat_ReturnValue) == 0x000014, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000018, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001D, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000028, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00002C, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000030, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_ExecuteUbergraph_ABPP_P001, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000034, "Member 'ABPP_P001_C_ExecuteUbergraph_ABPP_P001::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function ABPP_P001.ABPP_P001_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABPP_P001_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPP_P001_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABPP_P001_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABPP_P001_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABPP_P001_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABPP_P001_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABPP_P001_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABPP_P001.ABPP_P001_C.TemporarilyChangePhysicsRate
// 0x0010 (0x0010 - 0x0000)
struct ABPP_P001_C_TemporarilyChangePhysicsRate final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rate;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABPP_P001_C_TemporarilyChangePhysicsRate) == 0x000004, "Wrong alignment on ABPP_P001_C_TemporarilyChangePhysicsRate");
static_assert(sizeof(ABPP_P001_C_TemporarilyChangePhysicsRate) == 0x000010, "Wrong size on ABPP_P001_C_TemporarilyChangePhysicsRate");
static_assert(offsetof(ABPP_P001_C_TemporarilyChangePhysicsRate, Frame) == 0x000000, "Member 'ABPP_P001_C_TemporarilyChangePhysicsRate::Frame' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_TemporarilyChangePhysicsRate, Rate) == 0x000004, "Member 'ABPP_P001_C_TemporarilyChangePhysicsRate::Rate' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_TemporarilyChangePhysicsRate, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000008, "Member 'ABPP_P001_C_TemporarilyChangePhysicsRate::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_TemporarilyChangePhysicsRate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABPP_P001_C_TemporarilyChangePhysicsRate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABPP_P001.ABPP_P001_C.AnimGraph
// 0x0020 (0x0020 - 0x0000)
struct ABPP_P001_C_AnimGraph final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimGraph_0;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABPP_P001_C_AnimGraph) == 0x000008, "Wrong alignment on ABPP_P001_C_AnimGraph");
static_assert(sizeof(ABPP_P001_C_AnimGraph) == 0x000020, "Wrong size on ABPP_P001_C_AnimGraph");
static_assert(offsetof(ABPP_P001_C_AnimGraph, InPose) == 0x000000, "Member 'ABPP_P001_C_AnimGraph::InPose' has a wrong offset!");
static_assert(offsetof(ABPP_P001_C_AnimGraph, AnimGraph_0) == 0x000010, "Member 'ABPP_P001_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

