#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DarwinLevelSequenceDirector

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ExecuteUbergraph_BP_DarwinLevelSequenceDirector
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenWaitUI_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelSequencePlayRangeInfo            K2Node_CustomEvent_LoopRange;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_CustomEvent_LimitFrame;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_FirstLoopStartFrameOffset;      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DelayAndBlendFrame;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, EntryPoint) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, CallFunc_IsOpenWaitUI_ReturnValue) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::CallFunc_IsOpenWaitUI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, K2Node_CustomEvent_LoopRange) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::K2Node_CustomEvent_LoopRange' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, K2Node_CustomEvent_LimitFrame) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::K2Node_CustomEvent_LimitFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, K2Node_CustomEvent_FirstLoopStartFrameOffset) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::K2Node_CustomEvent_FirstLoopStartFrameOffset' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector, K2Node_CustomEvent_DelayAndBlendFrame) == 0x000024, "Member 'BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector::K2Node_CustomEvent_DelayAndBlendFrame' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLoopingAndLimitTIme
// 0x0010 (0x0010 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme final
{
public:
	struct FLevelSequencePlayRangeInfo            LoopRange;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         LimitFrame;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FirstLoopStartFrameOffset;                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme) == 0x000010, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme, LoopRange) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme::LoopRange' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme, LimitFrame) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme::LimitFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme, FirstLoopStartFrameOffset) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme::FirstLoopStartFrameOffset' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DelayAndPauseEvent
// 0x0004 (0x0004 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent final
{
public:
	float                                         DelayAndBlendFrame;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent) == 0x000004, "Wrong size on BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent, DelayAndBlendFrame) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent::DelayAndBlendFrame' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Pause
// 0x0001 (0x0001 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Pause final
{
public:
	bool                                          CallFunc_IsOpenWaitUI_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Pause) == 0x000001, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Pause");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Pause) == 0x000001, "Wrong size on BP_DarwinLevelSequenceDirector_C_Pause");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Pause, CallFunc_IsOpenWaitUI_ReturnValue) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Pause::CallFunc_IsOpenWaitUI_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetBindings
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_ResetBindings final
{
public:
	class ALevelSequenceActor*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFrameDuration_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_ResetBindings) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_ResetBindings");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_ResetBindings) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_ResetBindings");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindings, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindings::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindings, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindings::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindings, CallFunc_GetSequencePlayer_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindings::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindings, CallFunc_GetFrameDuration_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindings::CallFunc_GetFrameDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindings, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindings::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindow_Old
// 0x0004 (0x0004 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old final
{
public:
	int32                                         MessageStartIndex;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old) == 0x000004, "Wrong size on BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old, MessageStartIndex) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old::MessageStartIndex' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingPlayerCharacter
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter final
{
public:
	class ALevelSequenceActor*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneObjectBindingID             Binding;                                           // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter, Binding) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter::Binding' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Stop
// 0x0018 (0x0018 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Stop final
{
public:
	class ALevelSequenceActor*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFrameDuration_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Stop) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Stop");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Stop) == 0x000018, "Wrong size on BP_DarwinLevelSequenceDirector_C_Stop");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Stop::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop, CallFunc_GetSequencePlayer_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_Stop::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop, CallFunc_GetFrameDuration_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_Stop::CallFunc_GetFrameDuration_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayRange_old
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetPlayRange_old final
{
public:
	class ULevelSequencePlayer*                   Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayRangeIndex;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetPlayRange_old");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetPlayRange_old");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange_old::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old, PlayRangeIndex) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange_old::PlayRangeIndex' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old, SequencePlayer) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange_old::SequencePlayer' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange_old::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange_old::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange_old, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange_old::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLooping_Old
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old final
{
public:
	class ALevelSequenceActor*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayRangeIndex;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_SetPlayRange_old_SequencePlayer;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old, PlayRangeIndex) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old::PlayRangeIndex' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old, CallFunc_GetSequencePlayer_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old, CallFunc_SetPlayRange_old_SequencePlayer) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old::CallFunc_SetPlayRange_old_SequencePlayer' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeNormal_Old
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old final
{
public:
	class ALevelSequenceActor*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayRangeIndex;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_SetPlayRange_old_SequencePlayer;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old, PlayRangeIndex) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old::PlayRangeIndex' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old, CallFunc_GetSequencePlayer_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old, CallFunc_SetPlayRange_old_SequencePlayer) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old::CallFunc_SetPlayRange_old_SequencePlayer' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Change Player Camera to Event Camera
// 0x0040 (0x0040 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera final
{
public:
	class ACineCameraActor*                       EventCamera;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTime;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockOutgoing;                                     // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera) == 0x000040, "Wrong size on BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, EventCamera) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::EventCamera' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, BlendTime) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::BlendTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, BlendFunc) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::BlendFunc' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, BlendExp) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::BlendExp' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, bLockOutgoing) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, CallFunc_GetViewTarget_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, CallFunc_GetPlayerController_ReturnValue_1) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera, CallFunc_GetDisplayName_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Play
// 0x0010 (0x0010 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Play final
{
public:
	class ALevelSequenceActor*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Play) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Play");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Play) == 0x000010, "Wrong size on BP_DarwinLevelSequenceDirector_C_Play");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Play, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Play::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Play, CallFunc_GetSequencePlayer_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_Play::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.InitMain
// 0x00B0 (0x00B0 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_InitMain final
{
public:
	bool                                          IsGravity_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNewActorEnableCollision;                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsDrawCSBlackLine;                                // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AllNpcVisibility;                                  // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNPCManager*                            CallFunc_GetNPCManager_NPCManager;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAppPlayerController*                   K2Node_DynamicCast_AsApp_Player_Controller;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAppInputComponent*                     CallFunc_GetAppInputComponent_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float DeltaTime, bool bGamePaused, const struct FKeyInput& InKeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Output)> K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventManager*                          CallFunc_GetEventManager_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentEventId_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkippableEvent_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue_1;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetDuration_ReturnValue;                  // 0x0070(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FFrameNumber                           CallFunc_BreakQualifiedFrameTime_Frame;            // 0x0080(0x0004)(NoDestructor, HasGetValueTypeHash)
	struct FFrameRate                             CallFunc_BreakQualifiedFrameTime_FrameRate;        // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakQualifiedFrameTime_SubFrame;         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawTextInfo                          CallFunc_CreateTextID_ReturnValue;                 // 0x0090(0x0010)()
	class ABP_EvetSystemManagerActor_C*           CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_LevelSequenceController_C*          CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller; // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_InitMain) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_InitMain");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_InitMain) == 0x0000B0, "Wrong size on BP_DarwinLevelSequenceDirector_C_InitMain");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, IsGravity_0) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::IsGravity_0' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, bNewActorEnableCollision) == 0x000001, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::bNewActorEnableCollision' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, bIsDrawCSBlackLine) == 0x000002, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::bIsDrawCSBlackLine' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, AllNpcVisibility) == 0x000003, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::AllNpcVisibility' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetNPCManager_NPCManager) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetNPCManager_NPCManager' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, K2Node_DynamicCast_AsApp_Player_Controller) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::K2Node_DynamicCast_AsApp_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetAppInputComponent_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetAppInputComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetInstance_ReturnValue) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetEventManager_ReturnValue) == 0x000048, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetEventManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000050, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetCurrentEventId_ReturnValue) == 0x000058, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetCurrentEventId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_IsSkippableEvent_ReturnValue) == 0x000060, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_IsSkippableEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetInstance_ReturnValue_1) == 0x000068, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetDuration_ReturnValue) == 0x000070, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_BreakQualifiedFrameTime_Frame) == 0x000080, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_BreakQualifiedFrameTime_Frame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_BreakQualifiedFrameTime_FrameRate) == 0x000084, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_BreakQualifiedFrameTime_FrameRate' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_BreakQualifiedFrameTime_SubFrame) == 0x00008C, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_BreakQualifiedFrameTime_SubFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_CreateTextID_ReturnValue) == 0x000090, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_CreateTextID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor) == 0x0000A0, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitMain, CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller) == 0x0000A8, "Member 'BP_DarwinLevelSequenceDirector_C_InitMain::CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FinMain
// 0x0050 (0x0050 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_FinMain final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CameraKeep;                                        // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NPCHiddenKeep;                                     // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsResetPlayerCamera;                               // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StopAllLookAt;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RemovePlayerCollision;                             // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNPCManager*                            CallFunc_GetNPCManager_NPCManager;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAppPlayerController*                   K2Node_DynamicCast_AsApp_Player_Controller;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAppInputComponent*                     CallFunc_GetAppInputComponent_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_FinMain) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_FinMain");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_FinMain) == 0x000050, "Wrong size on BP_DarwinLevelSequenceDirector_C_FinMain");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, BlendTime) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::BlendTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, BlendFunc) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::BlendFunc' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, BlendExp) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::BlendExp' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, bLockOutgoing) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, CameraKeep) == 0x00000D, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::CameraKeep' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, NPCHiddenKeep) == 0x00000E, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::NPCHiddenKeep' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, IsResetPlayerCamera) == 0x00000F, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::IsResetPlayerCamera' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, StopAllLookAt) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::StopAllLookAt' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, RemovePlayerCollision) == 0x000011, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::RemovePlayerCollision' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, CallFunc_GetNPCManager_NPCManager) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::CallFunc_GetNPCManager_NPCManager' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, CallFunc_GetPlayerController_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, K2Node_DynamicCast_AsApp_Player_Controller) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::K2Node_DynamicCast_AsApp_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, CallFunc_GetAppInputComponent_ReturnValue) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::CallFunc_GetAppInputComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinMain, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_DarwinLevelSequenceDirector_C_FinMain::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ChangeEventCameraToPlayerCamera
// 0x0060 (0x0060 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADarwinCamera*                          Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerControllerInterface> K2Node_DynamicCast_AsPlayer_Controller_Interface;  // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADarwinCamera*                          CallFunc_GetControlledCamera_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera) == 0x000060, "Wrong size on BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, BlendTime) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::BlendTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, BlendFunc) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::BlendFunc' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, BlendExp) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::BlendExp' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, bLockOutgoing) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, Temp_object_Variable) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, CallFunc_GetViewTarget_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, CallFunc_GetDisplayName_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, CallFunc_GetPlayerController_ReturnValue_1) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, K2Node_DynamicCast_AsPlayer_Controller_Interface) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::K2Node_DynamicCast_AsPlayer_Controller_Interface' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera, CallFunc_GetControlledCamera_ReturnValue) == 0x000058, "Member 'BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera::CallFunc_GetControlledCamera_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.InitSub
// 0x0030 (0x0030 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_InitSub final
{
public:
	int32                                         CallFunc_CalcSequenceLength_Length;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EvetSystemManagerActor_C*           CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_LevelSequenceController_C*          CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawTextInfo                          CallFunc_CreateTextID_ReturnValue;                 // 0x0020(0x0010)()
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_InitSub) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_InitSub");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_InitSub) == 0x000030, "Wrong size on BP_DarwinLevelSequenceDirector_C_InitSub");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitSub, CallFunc_CalcSequenceLength_Length) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_InitSub::CallFunc_CalcSequenceLength_Length' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitSub, CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_InitSub::CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitSub, CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_InitSub::CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitSub, CallFunc_GetInstance_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_InitSub::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InitSub, CallFunc_CreateTextID_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_InitSub::CallFunc_CreateTextID_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.CallPlaySubSequence
// 0x0048 (0x0048 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence final
{
public:
	class ALevelSequenceActor*                    SubLevelSequence;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BreakSoftObjectPath_PathString;           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ULevelSequence*                         CallFunc_GetSequence_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence) == 0x000048, "Wrong size on BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence, SubLevelSequence) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence::SubLevelSequence' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence, CallFunc_Concat_StrStr_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence, CallFunc_BreakSoftObjectPath_PathString) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence::CallFunc_BreakSoftObjectPath_PathString' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence, CallFunc_GetSequence_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence::CallFunc_GetSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence, CallFunc_GetPathName_ReturnValue) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence::CallFunc_GetPathName_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLoopingSelf_Old
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old final
{
public:
	int32                                         PlayRangeIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Talk_WinStatus_C*                    CallFunc_GetTalkWindow_Result;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_SetPlayRange_old_SequencePlayer;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old, PlayRangeIndex) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old::PlayRangeIndex' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old, CallFunc_GetTalkWindow_Result) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old::CallFunc_GetTalkWindow_Result' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000011, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old, CallFunc_SetPlayRange_old_SequencePlayer) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old::CallFunc_SetPlayRange_old_SequencePlayer' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayerVisible
// 0x0018 (0x0018 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetPlayerVisible final
{
public:
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Player_C*                           K2Node_DynamicCast_AsBP_Player;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetPlayerVisible) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetPlayerVisible");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetPlayerVisible) == 0x000018, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetPlayerVisible");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerVisible, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerVisible::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerVisible, K2Node_DynamicCast_AsBP_Player) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerVisible::K2Node_DynamicCast_AsBP_Player' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerVisible, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerVisible::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayBSComponent
// 0x0038 (0x0038 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayBSComponent final
{
public:
	EAtomCompCategory                             CompCategory;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	float                                         FadeTime;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeVolume;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          CallFunc_GetCueByCueSheetTable_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayBSComponent");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent) == 0x000038, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayBSComponent");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent, CompCategory) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayBSComponent::CompCategory' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent, SheetName) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_PlayBSComponent::SheetName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent, CueName) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayBSComponent::CueName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent, FadeTime) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_PlayBSComponent::FadeTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent, FadeVolume) == 0x000024, "Member 'BP_DarwinLevelSequenceDirector_C_PlayBSComponent::FadeVolume' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent, CallFunc_GetCueByCueSheetTable_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_PlayBSComponent::CallFunc_GetCueByCueSheetTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayBSComponent, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_PlayBSComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.StopBSComponent
// 0x000C (0x000C - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_StopBSComponent final
{
public:
	EAtomCompCategory                             CompCategory;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeVolume;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_StopBSComponent) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_StopBSComponent");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_StopBSComponent) == 0x00000C, "Wrong size on BP_DarwinLevelSequenceDirector_C_StopBSComponent");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StopBSComponent, CompCategory) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_StopBSComponent::CompCategory' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StopBSComponent, FadeTime) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_StopBSComponent::FadeTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StopBSComponent, FadeVolume) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_StopBSComponent::FadeVolume' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeByBSComponent
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_FadeByBSComponent final
{
public:
	EAtomCompCategory                             CompCategory;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESoundFadeType                                Type;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeVolume;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESFadeOutEndState                             FOState;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         CallFunc_GetBSComp_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_FadeByBSComponent");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_FadeByBSComponent");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent, CompCategory) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_FadeByBSComponent::CompCategory' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent, Type) == 0x000001, "Member 'BP_DarwinLevelSequenceDirector_C_FadeByBSComponent::Type' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent, FadeTime) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_FadeByBSComponent::FadeTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent, FadeVolume) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_FadeByBSComponent::FadeVolume' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent, FOState) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_FadeByBSComponent::FOState' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent, CallFunc_GetBSComp_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_FadeByBSComponent::CallFunc_GetBSComp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeByBSComponent, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_FadeByBSComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySe
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlaySe final
{
public:
	class FName                                   SheetName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CueName;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_Spawn2DSound_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlaySe) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlaySe");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlaySe) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlaySe");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySe, SheetName) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySe::SheetName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySe, CueName) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySe::CueName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySe, CallFunc_Spawn2DSound_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySe::CallFunc_Spawn2DSound_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySeByPlayer
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer final
{
public:
	class FName                                   SheetName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CueName;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_Spawn2DSound_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer, SheetName) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer::SheetName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer, CueName) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer::CueName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer, CallFunc_Spawn2DSound_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer::CallFunc_Spawn2DSound_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayVoice
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayVoice final
{
public:
	class FName                                   SheetName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CueName;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_Spawn2DSoundCalcReverb_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayVoice) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayVoice");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayVoice) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayVoice");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayVoice, SheetName) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayVoice::SheetName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayVoice, CueName) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayVoice::CueName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayVoice, CallFunc_Spawn2DSoundCalcReverb_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayVoice::CallFunc_Spawn2DSoundCalcReverb_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.StopBgmComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_StopBgmComponent final
{
public:
	EAtomCompCategory                             Category;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_StopBgmComponent) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_StopBgmComponent");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_StopBgmComponent) == 0x000008, "Wrong size on BP_DarwinLevelSequenceDirector_C_StopBgmComponent");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StopBgmComponent, Category) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_StopBgmComponent::Category' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StopBgmComponent, FadeTime) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_StopBgmComponent::FadeTime' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeInByCategory
// 0x000C (0x000C - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_FadeInByCategory final
{
public:
	ESoundVolumeCategory                          VolumeCategory;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeVolume;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_FadeInByCategory) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_FadeInByCategory");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_FadeInByCategory) == 0x00000C, "Wrong size on BP_DarwinLevelSequenceDirector_C_FadeInByCategory");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeInByCategory, VolumeCategory) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_FadeInByCategory::VolumeCategory' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeInByCategory, FadeTime) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_FadeInByCategory::FadeTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeInByCategory, FadeVolume) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_FadeInByCategory::FadeVolume' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeOutByCategory
// 0x000C (0x000C - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_FadeOutByCategory final
{
public:
	ESoundVolumeCategory                          VolumeCategory;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeVolume;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_FadeOutByCategory) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_FadeOutByCategory");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_FadeOutByCategory) == 0x00000C, "Wrong size on BP_DarwinLevelSequenceDirector_C_FadeOutByCategory");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutByCategory, VolumeCategory) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutByCategory::VolumeCategory' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutByCategory, FadeTime) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutByCategory::FadeTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutByCategory, FadeVolume) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutByCategory::FadeVolume' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SyncEventCamera
// 0x0100 (0x0100 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SyncEventCamera final
{
public:
	class ADarwinCamera*                          Temp_object_Variable;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IPlayerControllerInterface> K2Node_DynamicCast_AsPlayer_Controller_Interface;  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADarwinCamera*                          CallFunc_GetControlledCamera_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera) == 0x000010, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SyncEventCamera");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera) == 0x000100, "Wrong size on BP_DarwinLevelSequenceDirector_C_SyncEventCamera");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, Temp_object_Variable) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, K2Node_DynamicCast_AsPlayer_Controller_Interface) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::K2Node_DynamicCast_AsPlayer_Controller_Interface' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, CallFunc_GetViewTarget_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, CallFunc_GetControlledCamera_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::CallFunc_GetControlledCamera_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000070, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SyncEventCamera, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000F8, "Member 'BP_DarwinLevelSequenceDirector_C_SyncEventCamera::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetPlayerCamera
// 0x0018 (0x0018 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera final
{
public:
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Player_C*                           K2Node_DynamicCast_AsBP_Player;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera) == 0x000018, "Wrong size on BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera, K2Node_DynamicCast_AsBP_Player) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera::K2Node_DynamicCast_AsBP_Player' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_ResetPlayerCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayLoopAnimation
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation final
{
public:
	class USkeletalMeshComponent*                 Meth;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          PlayAnimation;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation, Meth) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation::Meth' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation, PlayAnimation) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation::PlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.CalcSequenceLength
// 0x0048 (0x0048 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_CalcSequenceLength final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetDuration_ReturnValue;                  // 0x0004(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetStartTime_ReturnValue;                 // 0x0014(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FFrameNumber                           CallFunc_BreakQualifiedFrameTime_Frame;            // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash)
	struct FFrameRate                             CallFunc_BreakQualifiedFrameTime_FrameRate;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakQualifiedFrameTime_SubFrame;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFrameNumber                           CallFunc_BreakQualifiedFrameTime_Frame_1;          // 0x0034(0x0004)(NoDestructor, HasGetValueTypeHash)
	struct FFrameRate                             CallFunc_BreakQualifiedFrameTime_FrameRate_1;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakQualifiedFrameTime_SubFrame_1;       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_CalcSequenceLength");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength) == 0x000048, "Wrong size on BP_DarwinLevelSequenceDirector_C_CalcSequenceLength");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, Length) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::Length' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_GetDuration_ReturnValue) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_GetDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_GetStartTime_ReturnValue) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_GetStartTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_BreakQualifiedFrameTime_Frame) == 0x000024, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_BreakQualifiedFrameTime_Frame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_BreakQualifiedFrameTime_FrameRate) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_BreakQualifiedFrameTime_FrameRate' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_BreakQualifiedFrameTime_SubFrame) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_BreakQualifiedFrameTime_SubFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_BreakQualifiedFrameTime_Frame_1) == 0x000034, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_BreakQualifiedFrameTime_Frame_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_BreakQualifiedFrameTime_FrameRate_1) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_BreakQualifiedFrameTime_FrameRate_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_BreakQualifiedFrameTime_SubFrame_1) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_BreakQualifiedFrameTime_SubFrame_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CalcSequenceLength, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_DarwinLevelSequenceDirector_C_CalcSequenceLength::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLoopingSelf
// 0x0038 (0x0038 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf final
{
public:
	struct FLevelSequencePlayRangeInfo            NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOpenWaitUI_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEventSystemManagerActor*               CallFunc_GetEventSystemManagerActor_ReturnValue;   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USequencerController*                   CallFunc_GetSequencerContorller_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_LevelSequenceController_C*          K2Node_DynamicCast_AsBP_Level_Sequence_Controller; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf) == 0x000038, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf, NewParam) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf::NewParam' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf, CallFunc_GetInstance_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf, CallFunc_IsOpenWaitUI_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf::CallFunc_IsOpenWaitUI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf, CallFunc_GetEventSystemManagerActor_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf::CallFunc_GetEventSystemManagerActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf, CallFunc_GetSequencerContorller_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf::CallFunc_GetSequencerContorller_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf, K2Node_DynamicCast_AsBP_Level_Sequence_Controller) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf::K2Node_DynamicCast_AsBP_Level_Sequence_Controller' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayRange
// 0x0018 (0x0018 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetPlayRange final
{
public:
	class ULevelSequencePlayer*                   Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLevelSequencePlayRangeInfo            LevelSequencePlayRangeInfo;                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetPlayRange) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetPlayRange");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetPlayRange) == 0x000018, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetPlayRange");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange, Target) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange::Target' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange, LevelSequencePlayRangeInfo) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange::LevelSequencePlayRangeInfo' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayRange, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayRange::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindow
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DrawTalkWindow final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTalkEventSystem*                       CallFunc_GetTalkEventSystem_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DrawTalkWindow");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_DrawTalkWindow");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow, TextID) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindow::TextID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow, CallFunc_GetInstance_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindow::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindow, CallFunc_GetTalkEventSystem_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindow::CallFunc_GetTalkEventSystem_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindowForce
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTalkEventSystem*                       CallFunc_GetTalkEventSystem_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce, Text) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce::Text' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce, CallFunc_GetInstance_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce, CallFunc_GetTalkEventSystem_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce::CallFunc_GetTalkEventSystem_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawSubTitle
// 0x0068 (0x0068 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DrawSubTitle final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetParameterByTextSoundTable_SheetName;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetParameterByTextSoundTable_ID;          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetParameterByTextSoundTable_ID_Me;       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UTextManager*                           CallFunc_GetInstance_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAtomComponent*                         CallFunc_Spawn2DSoundCalcReverb_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTextCS_ReturnValue;                    // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_RemoveSquareBrackets_ReturnValue;         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DrawSubTitle");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle) == 0x000068, "Wrong size on BP_DarwinLevelSequenceDirector_C_DrawSubTitle");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, TextID) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::TextID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_GetParameterByTextSoundTable_SheetName) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_GetParameterByTextSoundTable_SheetName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_GetParameterByTextSoundTable_ID) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_GetParameterByTextSoundTable_ID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_GetParameterByTextSoundTable_ID_Me) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_GetParameterByTextSoundTable_ID_Me' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_GetInstance_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_Spawn2DSoundCalcReverb_ReturnValue) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_Spawn2DSoundCalcReverb_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_GetTextCS_ReturnValue) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_GetTextCS_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000050, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitle, CallFunc_RemoveSquareBrackets_ReturnValue) == 0x000058, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitle::CallFunc_RemoveSquareBrackets_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawSubTitleForce
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce, Text) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce::Text' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce, CallFunc_Concat_StrStr_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingPlayerCharacterbyTag
// 0x0040 (0x0040 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag final
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          GPA_PlayerCharacter;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewLocalVar_0;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFindBindingTag_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          K2Node_DynamicCast_AsGPACharacter;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFindBindingTag_ReturnValue_1;           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFindBindingTag_ReturnValue_2;           // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag) == 0x000040, "Wrong size on BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, LevelSequenceActor) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, GPA_PlayerCharacter) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::GPA_PlayerCharacter' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, NewLocalVar_0) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_IsFindBindingTag_ReturnValue) == 0x000011, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_IsFindBindingTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000012, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, K2Node_DynamicCast_AsGPACharacter) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::K2Node_DynamicCast_AsGPACharacter' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_IsFindBindingTag_ReturnValue_1) == 0x000029, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_IsFindBindingTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x00002A, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_IsFindBindingTag_ReturnValue_2) == 0x00002B, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_IsFindBindingTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_Conv_StringToName_ReturnValue) == 0x00002C, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000034, "Member 'BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayerCharacterVisible
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          K2Node_DynamicCast_AsGPACharacter;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible, IsVisible) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible::IsVisible' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible, K2Node_DynamicCast_AsGPACharacter) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible::K2Node_DynamicCast_AsGPACharacter' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySubTitleMaskIn
// 0x0004 (0x0004 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn final
{
public:
	float                                         AnimationSeconds;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn) == 0x000004, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn, AnimationSeconds) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn::AnimationSeconds' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySubTitleMaskOut
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut final
{
public:
	float                                         AnimationSeconds;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UIManager_C*                        CallFunc_GetBPUIManager_Result;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDarwinUserWidget*                      CallFunc_GetWidget_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOpenState                                    CallFunc_GetOpenState_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, AnimationSeconds) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::AnimationSeconds' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, CallFunc_GetBPUIManager_Result) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::CallFunc_GetBPUIManager_Result' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, CallFunc_GetWidget_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, CallFunc_GetOpenState_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::CallFunc_GetOpenState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut, CallFunc_BooleanOR_ReturnValue) == 0x00001C, "Member 'BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.CallSet Star Emissive
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive final
{
public:
	class ABP_EnvironmentLighting_C*              BP_EnviromentLighting;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BigStarEmissive;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallStarEmissive;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EvetSystemManagerActor_C*           CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_LevelSequenceController_C*          CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive, BP_EnviromentLighting) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive::BP_EnviromentLighting' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive, BigStarEmissive) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive::BigStarEmissive' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive, SmallStarEmissive) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive::SmallStarEmissive' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive, CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive::CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive, CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive::CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Call Reset StarEmissive
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive final
{
public:
	class ABP_EnvironmentLighting_C*              BP_EnviromentLighting;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_EvetSystemManagerActor_C*           CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_LevelSequenceController_C*          CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive, BP_EnviromentLighting) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive::BP_EnviromentLighting' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive, CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive::CallFunc_GetBP_EventSystemManager_BP_Evet_System_Manager_Actor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive, CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive::CallFunc_GetBPSequencerController_AsBP_Level_Sequence_Controller' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Init Sky with Editor
// 0x0018 (0x0018 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor final
{
public:
	class ABP_EnvironmentLighting_C*              BP_EnvironmentLighthing;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmallStarEmissive_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmallStarReduce_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBigStarEmissive_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor) == 0x000018, "Wrong size on BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor, BP_EnvironmentLighthing) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor::BP_EnvironmentLighthing' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor, CallFunc_GetSmallStarEmissive_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor::CallFunc_GetSmallStarEmissive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor, CallFunc_GetSmallStarReduce_ReturnValue) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor::CallFunc_GetSmallStarReduce_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor, CallFunc_GetBigStarEmissive_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor::CallFunc_GetBigStarEmissive_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetStarEmissiveWithEditor
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor final
{
public:
	class ABP_EnvironmentLighting_C*              BP_EnvironmentLighthing;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BigStarEmissive;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallStarEmissive;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor, BP_EnvironmentLighthing) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor::BP_EnvironmentLighthing' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor, BigStarEmissive) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor::BigStarEmissive' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor, SmallStarEmissive) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor::SmallStarEmissive' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetStarEmissivePalamWithEditor
// 0x0008 (0x0008 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor final
{
public:
	class ABP_EnvironmentLighting_C*              BP_EnvironmentLighthing;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor) == 0x000008, "Wrong size on BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor, BP_EnvironmentLighthing) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor::BP_EnvironmentLighthing' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetCollisionAndGravity
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity final
{
public:
	class AGameCharacter*                         GameCharacter;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionEnable;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          GravityEnable;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity, GameCharacter) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity::GameCharacter' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity, CollisionEnable) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity::CollisionEnable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity, GravityEnable) == 0x000009, "Member 'BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity::GravityEnable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayLoopAnimationBlend
// 0x0038 (0x0038 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend final
{
public:
	class USkeletalMeshComponent*                 CharacterMesh;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InBlendFrame;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSecondPerFrame_Second;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend) == 0x000038, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, CharacterMesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::CharacterMesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, Anim) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::Anim' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, InBlendFrame) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::InBlendFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, CallFunc_GetSecondPerFrame_Second) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::CallFunc_GetSecondPerFrame_Second' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Stop Loop Animation Blend
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend final
{
public:
	class USkeletalMeshComponent*                 CharacterMesh;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Blend_Frame;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSecondPerFrame_Second;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentActiveMontage_ReturnValue;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend, CharacterMesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend::CharacterMesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend, Blend_Frame) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend::Blend_Frame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend, CallFunc_GetSecondPerFrame_Second) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend::CallFunc_GetSecondPerFrame_Second' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend, CallFunc_GetCurrentActiveMontage_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend::CallFunc_GetCurrentActiveMontage_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Set Select NPCVisibility
// 0x0030 (0x0030 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NPCDataID;                                         // 0x0004(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNPCManager*                            CallFunc_GetNPCManager_NPCManager;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_ConvertNPCID_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCBase*                               CallFunc_GetNPC_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility) == 0x000030, "Wrong size on BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility, Visibility) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility, NPCDataID) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility::NPCDataID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility, CallFunc_GetNPCManager_NPCManager) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility::CallFunc_GetNPCManager_NPCManager' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility, CallFunc_ConvertNPCID_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility::CallFunc_ConvertNPCID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility, CallFunc_GetNPC_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility::CallFunc_GetNPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingNPC
// 0x0078 (0x0078 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_BindingNPC final
{
public:
	class ALevelSequenceActor*                    LevelSequence;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NpcID;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BindingTag;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNPCManager*                            CallFunc_GetNPCManager_NPCManager;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCBase*                               CallFunc_GetNPC_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNPCManager*                            CallFunc_GetNPCManager_NPCManager_1;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCBase*                               CallFunc_GetNPC_ReturnValue_1;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_BindingNPC) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_BindingNPC");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_BindingNPC) == 0x000078, "Wrong size on BP_DarwinLevelSequenceDirector_C_BindingNPC");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, LevelSequence) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::LevelSequence' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, NpcID) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::NpcID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, BindingTag) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::BindingTag' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_GetNPCManager_NPCManager) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_GetNPCManager_NPCManager' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_GetNPC_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_GetNPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_Conv_NameToString_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000048, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_GetNPCManager_NPCManager_1) == 0x000060, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_GetNPCManager_NPCManager_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_GetNPC_ReturnValue_1) == 0x000068, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_GetNPC_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingNPC, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'BP_DarwinLevelSequenceDirector_C_BindingNPC::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetBindingNPC
// 0x0070 (0x0070 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_ResetBindingNPC final
{
public:
	class ALevelSequenceActor*                    LevelSequence;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NpcID;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Tag;                                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNPCManager*                            CallFunc_GetNPCManager_NPCManager;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCBase*                               CallFunc_GetNPC_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UNPCManager*                            CallFunc_GetNPCManager_NPCManager_1;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCBase*                               CallFunc_GetNPC_ReturnValue_1;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRunning_ReturnValue;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_ResetBindingNPC");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC) == 0x000070, "Wrong size on BP_DarwinLevelSequenceDirector_C_ResetBindingNPC");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, LevelSequence) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::LevelSequence' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, NpcID) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::NpcID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, Tag) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::Tag' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_GetNPCManager_NPCManager) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_GetNPCManager_NPCManager' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_GetNPC_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_GetNPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_Conv_NameToString_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_GetNPCManager_NPCManager_1) == 0x000048, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_GetNPCManager_NPCManager_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_GetNPC_ReturnValue_1) == 0x000050, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_GetNPC_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_GetAIController_ReturnValue) == 0x000060, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetBindingNPC, CallFunc_IsRunning_ReturnValue) == 0x000068, "Member 'BP_DarwinLevelSequenceDirector_C_ResetBindingNPC::CallFunc_IsRunning_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Set Look at Actor or Flg
// 0x0048 (0x0048 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           TargetLookAtActor;                                 // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLookStart;                                       // 0x0010(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNPCCSAnimInstance*                     K2Node_DynamicCast_AsNPCCSAnim_Instance;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg) == 0x000048, "Wrong size on BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, SkeletalMesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, TargetLookAtActor) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::TargetLookAtActor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, IsLookStart) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::IsLookStart' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, K2Node_DynamicCast_AsNPCCSAnim_Instance) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::K2Node_DynamicCast_AsNPCCSAnim_Instance' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.StartLookAt
// 0x0060 (0x0060 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_StartLookAt final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadLookAtVelocity;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HeadLookAtClamp;                                   // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpineLookAtVeocity;                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SpineLookAtClamp;                                  // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameCharacter*                         K2Node_DynamicCast_AsGame_Character;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameCharacter*                         K2Node_DynamicCast_AsGame_Character_1;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_StartLookAt) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_StartLookAt");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_StartLookAt) == 0x000060, "Wrong size on BP_DarwinLevelSequenceDirector_C_StartLookAt");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, Mesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::Mesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, TargetActor) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, HeadLookAtVelocity) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::HeadLookAtVelocity' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, HeadLookAtClamp) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::HeadLookAtClamp' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, SpineLookAtVeocity) == 0x00001C, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::SpineLookAtVeocity' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, SpineLookAtClamp) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::SpineLookAtClamp' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, CallFunc_BreakVector2D_X) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, CallFunc_BreakVector2D_Y) == 0x000034, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, K2Node_DynamicCast_AsGame_Character) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::K2Node_DynamicCast_AsGame_Character' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, CallFunc_BreakVector2D_X_1) == 0x000044, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, CallFunc_BreakVector2D_Y_1) == 0x000048, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, K2Node_DynamicCast_AsGame_Character_1) == 0x000050, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::K2Node_DynamicCast_AsGame_Character_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_StartLookAt, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_DarwinLevelSequenceDirector_C_StartLookAt::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FinLookAt
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_FinLookAt final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameCharacter*                         K2Node_DynamicCast_AsGame_Character;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_FinLookAt) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_FinLookAt");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_FinLookAt) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_FinLookAt");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAt, SkeletalMesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAt::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAt, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAt::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAt, K2Node_DynamicCast_AsGame_Character) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAt::K2Node_DynamicCast_AsGame_Character' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAt, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FinLookAtDirect
// 0x0020 (0x0020 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_FinLookAtDirect final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComopnent;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameCharacter*                         K2Node_DynamicCast_AsGame_Character;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_FinLookAtDirect) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_FinLookAtDirect");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_FinLookAtDirect) == 0x000020, "Wrong size on BP_DarwinLevelSequenceDirector_C_FinLookAtDirect");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAtDirect, SkeletalMeshComopnent) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAtDirect::SkeletalMeshComopnent' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAtDirect, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAtDirect::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAtDirect, K2Node_DynamicCast_AsGame_Character) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAtDirect::K2Node_DynamicCast_AsGame_Character' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FinLookAtDirect, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_FinLookAtDirect::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetLookAtParamHead
// 0x0030 (0x0030 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnglearVelocity;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampVertical;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampHorizontal;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameCharacter*                         K2Node_DynamicCast_AsGame_Character;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead) == 0x000030, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead, SkeletalMesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead, AnglearVelocity) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead::AnglearVelocity' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead, ClampVertical) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead::ClampVertical' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead, ClampHorizontal) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead::ClampHorizontal' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead, K2Node_DynamicCast_AsGame_Character) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead::K2Node_DynamicCast_AsGame_Character' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetLookAtParamSpine
// 0x0030 (0x0030 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnglearVelocity;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampVertical;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampHorizontal;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameCharacter*                         K2Node_DynamicCast_AsGame_Character;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine) == 0x000030, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine, SkeletalMesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine, AnglearVelocity) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine::AnglearVelocity' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine, ClampVertical) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine::ClampVertical' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine, ClampHorizontal) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine::ClampHorizontal' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine, K2Node_DynamicCast_AsGame_Character) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine::K2Node_DynamicCast_AsGame_Character' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.OpenTips
// 0x0018 (0x0018 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_OpenTips final
{
public:
	class FName                                   OpenTipsID;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_UIManager_C*                        CallFunc_GetBPUIManager_Result;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTipsOpener*                            CallFunc_GetTipsOpener_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_OpenTips) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_OpenTips");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_OpenTips) == 0x000018, "Wrong size on BP_DarwinLevelSequenceDirector_C_OpenTips");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_OpenTips, OpenTipsID) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_OpenTips::OpenTipsID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_OpenTips, CallFunc_GetBPUIManager_Result) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_OpenTips::CallFunc_GetBPUIManager_Result' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_OpenTips, CallFunc_GetTipsOpener_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_OpenTips::CallFunc_GetTipsOpener_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.OpenNewItemUI
// 0x000C (0x000C - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_OpenNewItemUI final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAndOpenTips_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_OpenNewItemUI) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_OpenNewItemUI");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_OpenNewItemUI) == 0x00000C, "Wrong size on BP_DarwinLevelSequenceDirector_C_OpenNewItemUI");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_OpenNewItemUI, ItemId) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_OpenNewItemUI::ItemId' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_OpenNewItemUI, CallFunc_CheckAndOpenTips_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_OpenNewItemUI::CallFunc_CheckAndOpenTips_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DelayAndPause
// 0x0004 (0x0004 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DelayAndPause final
{
public:
	float                                         DelayFrame;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DelayAndPause) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DelayAndPause");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DelayAndPause) == 0x000004, "Wrong size on BP_DarwinLevelSequenceDirector_C_DelayAndPause");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DelayAndPause, DelayFrame) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DelayAndPause::DelayFrame' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayCustomLoopAnimationStartAt
// 0x0060 (0x0060 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          PlayAnimation;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoopAnimStartFrame;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlendTime;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SlotNodeName;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentFrame;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrameNum;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSecondPerFrame_Second;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt) == 0x000060, "Wrong size on BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, Mesh) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::Mesh' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, PlayAnimation) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::PlayAnimation' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, LoopAnimStartFrame) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::LoopAnimStartFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, BlendTime) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::BlendTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, SlotNodeName) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CurrentFrame) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CurrentFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, FrameNum) == 0x000024, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::FrameNum' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_GetSecondPerFrame_Second) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_GetSecondPerFrame_Second' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00002C, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_FTrunc_ReturnValue) == 0x000034, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_GetAnimInstance_ReturnValue) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000041, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000044, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue) == 0x000048, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000050, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt, CallFunc_Percent_IntInt_ReturnValue) == 0x00005C, "Member 'BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingMonstersByTag
// 0x0008 (0x0008 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag final
{
public:
	class ALevelSequenceActor*                    rootActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag) == 0x000008, "Wrong size on BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag, rootActor) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag::rootActor' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindowSwitch
// 0x0058 (0x0058 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch final
{
public:
	class FString                                 IsPlayer_kamyu_TextID;                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 IsPlayer_maya_TextID;                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameDataPlayer*                        CallFunc_GetGameDataPlayer_GameDataPlayer;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsKindKamyu_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTalkEventSystem*                       CallFunc_GetTalkEventSystem_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0048(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch) == 0x000058, "Wrong size on BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, IsPlayer_kamyu_TextID) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::IsPlayer_kamyu_TextID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, IsPlayer_maya_TextID) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::IsPlayer_maya_TextID' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, Temp_bool_Variable) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, CallFunc_GetGameDataPlayer_GameDataPlayer) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::CallFunc_GetGameDataPlayer_GameDataPlayer' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, CallFunc_GetInstance_ReturnValue) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, CallFunc_IsKindKamyu_ReturnValue) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::CallFunc_IsKindKamyu_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, CallFunc_GetTalkEventSystem_ReturnValue) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::CallFunc_GetTalkEventSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch, K2Node_Select_Default) == 0x000048, "Member 'BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch::K2Node_Select_Default' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Set Vocalize Sync Draw Text Compare By Tag
// 0x0008 (0x0008 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag) == 0x000008, "Wrong size on BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag, Character) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag::Character' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetWorldTime
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetWorldTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minute;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipEvent;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameDataFlag*                          CallFunc_GetGameDataFlag_GameDataFlag;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_WorldTimeManager_C*                 CallFunc_GetWorldTimeManager_WorldTimeManager;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFlag_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetWorldTime) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetWorldTime");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetWorldTime) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetWorldTime");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetWorldTime, Hour) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetWorldTime::Hour' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetWorldTime, Minute) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_SetWorldTime::Minute' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetWorldTime, SkipEvent) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetWorldTime::SkipEvent' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetWorldTime, CallFunc_GetGameDataFlag_GameDataFlag) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_SetWorldTime::CallFunc_GetGameDataFlag_GameDataFlag' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetWorldTime, CallFunc_GetWorldTimeManager_WorldTimeManager) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_SetWorldTime::CallFunc_GetWorldTimeManager_WorldTimeManager' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetWorldTime, CallFunc_GetFlag_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_SetWorldTime::CallFunc_GetFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetWorldTime, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000021, "Member 'BP_DarwinLevelSequenceDirector_C_SetWorldTime::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetWorldTimePause
// 0x0008 (0x0008 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_ResetWorldTimePause final
{
public:
	class UGameDataFlag*                          CallFunc_GetGameDataFlag_GameDataFlag;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_ResetWorldTimePause) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_ResetWorldTimePause");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_ResetWorldTimePause) == 0x000008, "Wrong size on BP_DarwinLevelSequenceDirector_C_ResetWorldTimePause");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_ResetWorldTimePause, CallFunc_GetGameDataFlag_GameDataFlag) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_ResetWorldTimePause::CallFunc_GetGameDataFlag_GameDataFlag' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.InputProc_CS_Skip
// 0x0150 (0x0150 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGamePaused;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyInput                              InKeyInput;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FKeyInput                              OutKeyInput;                                       // 0x0018(0x0010)(Parm, OutParm)
	struct FEventReply                            Output;                                            // 0x0028(0x00B8)(Parm, OutParm)
	float                                         CallFunc_GetValue_ReturnValue;                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCSSkipVisible_ReturnValue;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue_1;                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue_2;                // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue_3;                // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCSSkipVisible_ReturnValue_1;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue_4;                // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCSSkipDone_ReturnValue;                 // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue_5;                // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventExecuter*                         CallFunc_GetEventExecuter_ReturnValue;             // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventSystemManager*                    CallFunc_GetInstance_ReturnValue_6;                // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingLevelSequence_Return;            // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayEvent_ReturnValue;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip) == 0x000150, "Wrong size on BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, DeltaTime) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, bGamePaused) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::bGamePaused' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, InKeyInput) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::InKeyInput' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, OutKeyInput) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::OutKeyInput' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, Output) == 0x000028, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::Output' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetValue_ReturnValue) == 0x0000E0, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000E4, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0000E8, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetInstance_ReturnValue) == 0x0000F0, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_IsCSSkipVisible_ReturnValue) == 0x0000F8, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_IsCSSkipVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000F9, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetInstance_ReturnValue_1) == 0x000100, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetInstance_ReturnValue_2) == 0x000108, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetInstance_ReturnValue_3) == 0x000110, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_IsCSSkipVisible_ReturnValue_1) == 0x000118, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_IsCSSkipVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetInstance_ReturnValue_4) == 0x000120, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_IsCSSkipDone_ReturnValue) == 0x000128, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_IsCSSkipDone_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetInstance_ReturnValue_5) == 0x000130, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetEventExecuter_ReturnValue) == 0x000138, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetEventExecuter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_GetInstance_ReturnValue_6) == 0x000140, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_GetInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_IsPlayingLevelSequence_Return) == 0x000148, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_IsPlayingLevelSequence_Return' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_IsPlayEvent_ReturnValue) == 0x000149, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_IsPlayEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip, CallFunc_BooleanAND_ReturnValue) == 0x00014A, "Member 'BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.GetSecondPerFrame
// 0x0014 (0x0014 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame final
{
public:
	float                                         second;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FrameRate_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame) == 0x000004, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame) == 0x000014, "Wrong size on BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame, second) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame::second' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame, CallFunc_FrameRate_ReturnValue) == 0x000004, "Member 'BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame::CallFunc_FrameRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayerCollisionEnable
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable final
{
public:
	class ACharacter*                             Player_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewCollisionEnable;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable, Player_0) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable::Player_0' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable, NewCollisionEnable) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable::NewCollisionEnable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable, Temp_bool_Variable) == 0x000009, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable, Temp_name_Variable) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable, Temp_name_Variable_1) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable, K2Node_Select_Default) == 0x00001C, "Member 'BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable::K2Node_Select_Default' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.IsSkipDurationd
// 0x0048 (0x0048 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_IsSkipDurationd final
{
public:
	class USequencerController*                   m______________;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartFadeOutMaxFrame_CS;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFrameDuration_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetCurrentTime_ReturnValue;               // 0x001C(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FFrameNumber                           CallFunc_BreakQualifiedFrameTime_Frame;            // 0x002C(0x0004)(NoDestructor, HasGetValueTypeHash)
	struct FFrameRate                             CallFunc_BreakQualifiedFrameTime_FrameRate;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakQualifiedFrameTime_SubFrame;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_IsSkipDurationd");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd) == 0x000048, "Wrong size on BP_DarwinLevelSequenceDirector_C_IsSkipDurationd");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, m______________) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::m______________' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, ReturnValue) == 0x000008, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, StartFadeOutMaxFrame_CS) == 0x00000C, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::StartFadeOutMaxFrame_CS' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_GetSequencePlayer_ReturnValue) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_GetFrameDuration_ReturnValue) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_GetFrameDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_GetCurrentTime_ReturnValue) == 0x00001C, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_GetCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_BreakQualifiedFrameTime_Frame) == 0x00002C, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_BreakQualifiedFrameTime_Frame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_BreakQualifiedFrameTime_FrameRate) == 0x000030, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_BreakQualifiedFrameTime_FrameRate' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_BreakQualifiedFrameTime_SubFrame) == 0x000038, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_BreakQualifiedFrameTime_SubFrame' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_Subtract_IntInt_ReturnValue) == 0x00003C, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_IsSkipDurationd, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_DarwinLevelSequenceDirector_C_IsSkipDurationd::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeOutIfNotYet
// 0x0028 (0x0028 - 0x0000)
struct BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet final
{
public:
	struct FLinearColor                           DestColor;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Float;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFadeZOrderType                               ZorderType;                                        // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Fade_C*                              CallFunc_GetFade_OutWidget;                        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUse_ReturnValue;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet) == 0x000008, "Wrong alignment on BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet");
static_assert(sizeof(BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet) == 0x000028, "Wrong size on BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet, DestColor) == 0x000000, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet::DestColor' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet, Float) == 0x000010, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet::Float' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet, ZorderType) == 0x000014, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet::ZorderType' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet, CallFunc_GetFade_OutWidget) == 0x000018, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet::CallFunc_GetFade_OutWidget' has a wrong offset!");
static_assert(offsetof(BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet, CallFunc_IsUse_ReturnValue) == 0x000020, "Member 'BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet::CallFunc_IsUse_ReturnValue' has a wrong offset!");

}

