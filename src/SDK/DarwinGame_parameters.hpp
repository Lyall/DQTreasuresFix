#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DarwinGame

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "UMG_structs.hpp"
#include "CriWareRuntime_structs.hpp"


namespace SDK::Params
{

// Function DarwinGame.DarwinUserWidget.AddInputEventFunc
// 0x0018 (0x0018 - 0x0000)
struct DarwinUserWidget_AddInputEventFunc final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinUserWidget_AddInputEventFunc) == 0x000008, "Wrong alignment on DarwinUserWidget_AddInputEventFunc");
static_assert(sizeof(DarwinUserWidget_AddInputEventFunc) == 0x000018, "Wrong size on DarwinUserWidget_AddInputEventFunc");
static_assert(offsetof(DarwinUserWidget_AddInputEventFunc, EventName) == 0x000000, "Member 'DarwinUserWidget_AddInputEventFunc::EventName' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_AddInputEventFunc, InPriority) == 0x000010, "Member 'DarwinUserWidget_AddInputEventFunc::InPriority' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Button_Down
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Button_Down final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Button_Down) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Button_Down");
static_assert(sizeof(DarwinUserWidget_Input_Button_Down) == 0x000001, "Wrong size on DarwinUserWidget_Input_Button_Down");
static_assert(offsetof(DarwinUserWidget_Input_Button_Down, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Button_Down::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Button_Left
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Button_Left final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Button_Left) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Button_Left");
static_assert(sizeof(DarwinUserWidget_Input_Button_Left) == 0x000001, "Wrong size on DarwinUserWidget_Input_Button_Left");
static_assert(offsetof(DarwinUserWidget_Input_Button_Left, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Button_Left::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Button_Right
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Button_Right final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Button_Right) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Button_Right");
static_assert(sizeof(DarwinUserWidget_Input_Button_Right) == 0x000001, "Wrong size on DarwinUserWidget_Input_Button_Right");
static_assert(offsetof(DarwinUserWidget_Input_Button_Right, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Button_Right::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Button_Up
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Button_Up final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Button_Up) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Button_Up");
static_assert(sizeof(DarwinUserWidget_Input_Button_Up) == 0x000001, "Wrong size on DarwinUserWidget_Input_Button_Up");
static_assert(offsetof(DarwinUserWidget_Input_Button_Up, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Button_Up::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Cancel
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Cancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Cancel) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Cancel");
static_assert(sizeof(DarwinUserWidget_Input_Cancel) == 0x000001, "Wrong size on DarwinUserWidget_Input_Cancel");
static_assert(offsetof(DarwinUserWidget_Input_Cancel, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Cancel::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Decide
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Decide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Decide) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Decide");
static_assert(sizeof(DarwinUserWidget_Input_Decide) == 0x000001, "Wrong size on DarwinUserWidget_Input_Decide");
static_assert(offsetof(DarwinUserWidget_Input_Decide, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Decide::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Down
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Down final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Down) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Down");
static_assert(sizeof(DarwinUserWidget_Input_Down) == 0x000001, "Wrong size on DarwinUserWidget_Input_Down");
static_assert(offsetof(DarwinUserWidget_Input_Down, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Down::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_L
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_L final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_L) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_L");
static_assert(sizeof(DarwinUserWidget_Input_L) == 0x000001, "Wrong size on DarwinUserWidget_Input_L");
static_assert(offsetof(DarwinUserWidget_Input_L, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_L::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Left
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Left final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Left) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Left");
static_assert(sizeof(DarwinUserWidget_Input_Left) == 0x000001, "Wrong size on DarwinUserWidget_Input_Left");
static_assert(offsetof(DarwinUserWidget_Input_Left, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Left::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Left_Analog_Down
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Left_Analog_Down final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Left_Analog_Down) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Left_Analog_Down");
static_assert(sizeof(DarwinUserWidget_Input_Left_Analog_Down) == 0x000001, "Wrong size on DarwinUserWidget_Input_Left_Analog_Down");
static_assert(offsetof(DarwinUserWidget_Input_Left_Analog_Down, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Left_Analog_Down::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Left_Analog_Left
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Left_Analog_Left final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Left_Analog_Left) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Left_Analog_Left");
static_assert(sizeof(DarwinUserWidget_Input_Left_Analog_Left) == 0x000001, "Wrong size on DarwinUserWidget_Input_Left_Analog_Left");
static_assert(offsetof(DarwinUserWidget_Input_Left_Analog_Left, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Left_Analog_Left::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Left_Analog_Right
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Left_Analog_Right final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Left_Analog_Right) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Left_Analog_Right");
static_assert(sizeof(DarwinUserWidget_Input_Left_Analog_Right) == 0x000001, "Wrong size on DarwinUserWidget_Input_Left_Analog_Right");
static_assert(offsetof(DarwinUserWidget_Input_Left_Analog_Right, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Left_Analog_Right::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Left_Analog_Up
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Left_Analog_Up final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Left_Analog_Up) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Left_Analog_Up");
static_assert(sizeof(DarwinUserWidget_Input_Left_Analog_Up) == 0x000001, "Wrong size on DarwinUserWidget_Input_Left_Analog_Up");
static_assert(offsetof(DarwinUserWidget_Input_Left_Analog_Up, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Left_Analog_Up::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Minus
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Minus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Minus) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Minus");
static_assert(sizeof(DarwinUserWidget_Input_Minus) == 0x000001, "Wrong size on DarwinUserWidget_Input_Minus");
static_assert(offsetof(DarwinUserWidget_Input_Minus, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Minus::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Mouse_Wheel_Down
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Mouse_Wheel_Down final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Mouse_Wheel_Down) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Mouse_Wheel_Down");
static_assert(sizeof(DarwinUserWidget_Input_Mouse_Wheel_Down) == 0x000001, "Wrong size on DarwinUserWidget_Input_Mouse_Wheel_Down");
static_assert(offsetof(DarwinUserWidget_Input_Mouse_Wheel_Down, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Mouse_Wheel_Down::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Mouse_Wheel_Up
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Mouse_Wheel_Up final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Mouse_Wheel_Up) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Mouse_Wheel_Up");
static_assert(sizeof(DarwinUserWidget_Input_Mouse_Wheel_Up) == 0x000001, "Wrong size on DarwinUserWidget_Input_Mouse_Wheel_Up");
static_assert(offsetof(DarwinUserWidget_Input_Mouse_Wheel_Up, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Mouse_Wheel_Up::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_PC_R
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_PC_R final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_PC_R) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_PC_R");
static_assert(sizeof(DarwinUserWidget_Input_PC_R) == 0x000001, "Wrong size on DarwinUserWidget_Input_PC_R");
static_assert(offsetof(DarwinUserWidget_Input_PC_R, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_PC_R::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_PC_T
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_PC_T final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_PC_T) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_PC_T");
static_assert(sizeof(DarwinUserWidget_Input_PC_T) == 0x000001, "Wrong size on DarwinUserWidget_Input_PC_T");
static_assert(offsetof(DarwinUserWidget_Input_PC_T, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_PC_T::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Plus
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Plus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Plus) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Plus");
static_assert(sizeof(DarwinUserWidget_Input_Plus) == 0x000001, "Wrong size on DarwinUserWidget_Input_Plus");
static_assert(offsetof(DarwinUserWidget_Input_Plus, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Plus::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_R
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_R final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_R) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_R");
static_assert(sizeof(DarwinUserWidget_Input_R) == 0x000001, "Wrong size on DarwinUserWidget_Input_R");
static_assert(offsetof(DarwinUserWidget_Input_R, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_R::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Right
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Right final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Right) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Right");
static_assert(sizeof(DarwinUserWidget_Input_Right) == 0x000001, "Wrong size on DarwinUserWidget_Input_Right");
static_assert(offsetof(DarwinUserWidget_Input_Right, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Right::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Right_Analog_Down
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Right_Analog_Down final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Right_Analog_Down) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Right_Analog_Down");
static_assert(sizeof(DarwinUserWidget_Input_Right_Analog_Down) == 0x000001, "Wrong size on DarwinUserWidget_Input_Right_Analog_Down");
static_assert(offsetof(DarwinUserWidget_Input_Right_Analog_Down, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Right_Analog_Down::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Right_Analog_Left
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Right_Analog_Left final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Right_Analog_Left) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Right_Analog_Left");
static_assert(sizeof(DarwinUserWidget_Input_Right_Analog_Left) == 0x000001, "Wrong size on DarwinUserWidget_Input_Right_Analog_Left");
static_assert(offsetof(DarwinUserWidget_Input_Right_Analog_Left, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Right_Analog_Left::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Right_Analog_Right
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Right_Analog_Right final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Right_Analog_Right) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Right_Analog_Right");
static_assert(sizeof(DarwinUserWidget_Input_Right_Analog_Right) == 0x000001, "Wrong size on DarwinUserWidget_Input_Right_Analog_Right");
static_assert(offsetof(DarwinUserWidget_Input_Right_Analog_Right, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Right_Analog_Right::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Right_Analog_Up
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Right_Analog_Up final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Right_Analog_Up) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Right_Analog_Up");
static_assert(sizeof(DarwinUserWidget_Input_Right_Analog_Up) == 0x000001, "Wrong size on DarwinUserWidget_Input_Right_Analog_Up");
static_assert(offsetof(DarwinUserWidget_Input_Right_Analog_Up, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Right_Analog_Up::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_RMB
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_RMB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_RMB) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_RMB");
static_assert(sizeof(DarwinUserWidget_Input_RMB) == 0x000001, "Wrong size on DarwinUserWidget_Input_RMB");
static_assert(offsetof(DarwinUserWidget_Input_RMB, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_RMB::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Tab
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Tab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Tab) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Tab");
static_assert(sizeof(DarwinUserWidget_Input_Tab) == 0x000001, "Wrong size on DarwinUserWidget_Input_Tab");
static_assert(offsetof(DarwinUserWidget_Input_Tab, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Tab::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Up
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Up final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Up) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Up");
static_assert(sizeof(DarwinUserWidget_Input_Up) == 0x000001, "Wrong size on DarwinUserWidget_Input_Up");
static_assert(offsetof(DarwinUserWidget_Input_Up, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Up::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_X
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_X final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_X) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_X");
static_assert(sizeof(DarwinUserWidget_Input_X) == 0x000001, "Wrong size on DarwinUserWidget_Input_X");
static_assert(offsetof(DarwinUserWidget_Input_X, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_X::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_Y
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_Y final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_Y) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_Y");
static_assert(sizeof(DarwinUserWidget_Input_Y) == 0x000001, "Wrong size on DarwinUserWidget_Input_Y");
static_assert(offsetof(DarwinUserWidget_Input_Y, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_Y::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_ZL
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_ZL final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_ZL) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_ZL");
static_assert(sizeof(DarwinUserWidget_Input_ZL) == 0x000001, "Wrong size on DarwinUserWidget_Input_ZL");
static_assert(offsetof(DarwinUserWidget_Input_ZL, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_ZL::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Input_ZR
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_Input_ZR final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Input_ZR) == 0x000001, "Wrong alignment on DarwinUserWidget_Input_ZR");
static_assert(sizeof(DarwinUserWidget_Input_ZR) == 0x000001, "Wrong size on DarwinUserWidget_Input_ZR");
static_assert(offsetof(DarwinUserWidget_Input_ZR, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_Input_ZR::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.InputEventFunc
// 0x00E0 (0x00E0 - 0x0000)
struct DarwinUserWidget_InputEventFunc final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GamePaused;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyInput                              KeyInput;                                          // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FKeyInput                              OutKeyInput;                                       // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FEventReply                            Reply;                                             // 0x0028(0x00B8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_InputEventFunc) == 0x000008, "Wrong alignment on DarwinUserWidget_InputEventFunc");
static_assert(sizeof(DarwinUserWidget_InputEventFunc) == 0x0000E0, "Wrong size on DarwinUserWidget_InputEventFunc");
static_assert(offsetof(DarwinUserWidget_InputEventFunc, DeltaTime) == 0x000000, "Member 'DarwinUserWidget_InputEventFunc::DeltaTime' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_InputEventFunc, GamePaused) == 0x000004, "Member 'DarwinUserWidget_InputEventFunc::GamePaused' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_InputEventFunc, KeyInput) == 0x000008, "Member 'DarwinUserWidget_InputEventFunc::KeyInput' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_InputEventFunc, OutKeyInput) == 0x000018, "Member 'DarwinUserWidget_InputEventFunc::OutKeyInput' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_InputEventFunc, Reply) == 0x000028, "Member 'DarwinUserWidget_InputEventFunc::Reply' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.InputName
// 0x0020 (0x0020 - 0x0000)
struct DarwinUserWidget_InputName final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class FName EnteredName)>      EnteredNameEvent;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_InputName) == 0x000004, "Wrong alignment on DarwinUserWidget_InputName");
static_assert(sizeof(DarwinUserWidget_InputName) == 0x000020, "Wrong size on DarwinUserWidget_InputName");
static_assert(offsetof(DarwinUserWidget_InputName, ID) == 0x000000, "Member 'DarwinUserWidget_InputName::ID' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_InputName, Name_0) == 0x000008, "Member 'DarwinUserWidget_InputName::Name_0' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_InputName, EnteredNameEvent) == 0x000010, "Member 'DarwinUserWidget_InputName::EnteredNameEvent' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.IsRepeatPressedWIthSetting
// 0x0018 (0x0018 - 0x0000)
struct DarwinUserWidget_IsRepeatPressedWIthSetting final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinUserWidget_IsRepeatPressedWIthSetting) == 0x000008, "Wrong alignment on DarwinUserWidget_IsRepeatPressedWIthSetting");
static_assert(sizeof(DarwinUserWidget_IsRepeatPressedWIthSetting) == 0x000018, "Wrong size on DarwinUserWidget_IsRepeatPressedWIthSetting");
static_assert(offsetof(DarwinUserWidget_IsRepeatPressedWIthSetting, KeyInput) == 0x000000, "Member 'DarwinUserWidget_IsRepeatPressedWIthSetting::KeyInput' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_IsRepeatPressedWIthSetting, Type) == 0x000010, "Member 'DarwinUserWidget_IsRepeatPressedWIthSetting::Type' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_IsRepeatPressedWIthSetting, ReturnValue) == 0x000011, "Member 'DarwinUserWidget_IsRepeatPressedWIthSetting::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.IsUse
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_IsUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_IsUse) == 0x000001, "Wrong alignment on DarwinUserWidget_IsUse");
static_assert(sizeof(DarwinUserWidget_IsUse) == 0x000001, "Wrong size on DarwinUserWidget_IsUse");
static_assert(offsetof(DarwinUserWidget_IsUse, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_IsUse::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.PlayOneShot
// 0x0004 (0x0004 - 0x0000)
struct DarwinUserWidget_PlayOneShot final
{
public:
	float                                         WaitTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_PlayOneShot) == 0x000004, "Wrong alignment on DarwinUserWidget_PlayOneShot");
static_assert(sizeof(DarwinUserWidget_PlayOneShot) == 0x000004, "Wrong size on DarwinUserWidget_PlayOneShot");
static_assert(offsetof(DarwinUserWidget_PlayOneShot, WaitTime) == 0x000000, "Member 'DarwinUserWidget_PlayOneShot::WaitTime' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.SetBrushFromButtonTexture
// 0x0010 (0x0010 - 0x0000)
struct DarwinUserWidget_SetBrushFromButtonTexture final
{
public:
	class UImage*                                 TargetImage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisMappingType                              Button;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinUserWidget_SetBrushFromButtonTexture) == 0x000008, "Wrong alignment on DarwinUserWidget_SetBrushFromButtonTexture");
static_assert(sizeof(DarwinUserWidget_SetBrushFromButtonTexture) == 0x000010, "Wrong size on DarwinUserWidget_SetBrushFromButtonTexture");
static_assert(offsetof(DarwinUserWidget_SetBrushFromButtonTexture, TargetImage) == 0x000000, "Member 'DarwinUserWidget_SetBrushFromButtonTexture::TargetImage' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_SetBrushFromButtonTexture, Button) == 0x000008, "Member 'DarwinUserWidget_SetBrushFromButtonTexture::Button' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.SetHandlingInput
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_SetHandlingInput final
{
public:
	bool                                          InIsHandlingInput;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_SetHandlingInput) == 0x000001, "Wrong alignment on DarwinUserWidget_SetHandlingInput");
static_assert(sizeof(DarwinUserWidget_SetHandlingInput) == 0x000001, "Wrong size on DarwinUserWidget_SetHandlingInput");
static_assert(offsetof(DarwinUserWidget_SetHandlingInput, InIsHandlingInput) == 0x000000, "Member 'DarwinUserWidget_SetHandlingInput::InIsHandlingInput' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.SetHideCount
// 0x0004 (0x0004 - 0x0000)
struct DarwinUserWidget_SetHideCount final
{
public:
	float                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_SetHideCount) == 0x000004, "Wrong alignment on DarwinUserWidget_SetHideCount");
static_assert(sizeof(DarwinUserWidget_SetHideCount) == 0x000004, "Wrong size on DarwinUserWidget_SetHideCount");
static_assert(offsetof(DarwinUserWidget_SetHideCount, Count) == 0x000000, "Member 'DarwinUserWidget_SetHideCount::Count' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.SetProgressBar
// 0x0010 (0x0010 - 0x0000)
struct DarwinUserWidget_SetProgressBar final
{
public:
	class UProgressBar*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Numerator;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Denominator;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_SetProgressBar) == 0x000008, "Wrong alignment on DarwinUserWidget_SetProgressBar");
static_assert(sizeof(DarwinUserWidget_SetProgressBar) == 0x000010, "Wrong size on DarwinUserWidget_SetProgressBar");
static_assert(offsetof(DarwinUserWidget_SetProgressBar, Target) == 0x000000, "Member 'DarwinUserWidget_SetProgressBar::Target' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_SetProgressBar, Numerator) == 0x000008, "Member 'DarwinUserWidget_SetProgressBar::Numerator' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_SetProgressBar, Denominator) == 0x00000C, "Member 'DarwinUserWidget_SetProgressBar::Denominator' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.Update
// 0x0004 (0x0004 - 0x0000)
struct DarwinUserWidget_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_Update) == 0x000004, "Wrong alignment on DarwinUserWidget_Update");
static_assert(sizeof(DarwinUserWidget_Update) == 0x000004, "Wrong size on DarwinUserWidget_Update");
static_assert(offsetof(DarwinUserWidget_Update, DeltaTime) == 0x000000, "Member 'DarwinUserWidget_Update::DeltaTime' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.UpdateAtPostUpdateWork
// 0x0004 (0x0004 - 0x0000)
struct DarwinUserWidget_UpdateAtPostUpdateWork final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_UpdateAtPostUpdateWork) == 0x000004, "Wrong alignment on DarwinUserWidget_UpdateAtPostUpdateWork");
static_assert(sizeof(DarwinUserWidget_UpdateAtPostUpdateWork) == 0x000004, "Wrong size on DarwinUserWidget_UpdateAtPostUpdateWork");
static_assert(offsetof(DarwinUserWidget_UpdateAtPostUpdateWork, DeltaTime) == 0x000000, "Member 'DarwinUserWidget_UpdateAtPostUpdateWork::DeltaTime' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.CanAction
// 0x0002 (0x0002 - 0x0000)
struct DarwinUserWidget_CanAction final
{
public:
	EWidgetAction                                 Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_CanAction) == 0x000001, "Wrong alignment on DarwinUserWidget_CanAction");
static_assert(sizeof(DarwinUserWidget_CanAction) == 0x000002, "Wrong size on DarwinUserWidget_CanAction");
static_assert(offsetof(DarwinUserWidget_CanAction, Action) == 0x000000, "Member 'DarwinUserWidget_CanAction::Action' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_CanAction, ReturnValue) == 0x000001, "Member 'DarwinUserWidget_CanAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.GetDarwinUserWidgetFromName
// 0x0010 (0x0010 - 0x0000)
struct DarwinUserWidget_GetDarwinUserWidgetFromName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDarwinUserWidget*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_GetDarwinUserWidgetFromName) == 0x000008, "Wrong alignment on DarwinUserWidget_GetDarwinUserWidgetFromName");
static_assert(sizeof(DarwinUserWidget_GetDarwinUserWidgetFromName) == 0x000010, "Wrong size on DarwinUserWidget_GetDarwinUserWidgetFromName");
static_assert(offsetof(DarwinUserWidget_GetDarwinUserWidgetFromName, InName) == 0x000000, "Member 'DarwinUserWidget_GetDarwinUserWidgetFromName::InName' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_GetDarwinUserWidgetFromName, ReturnValue) == 0x000008, "Member 'DarwinUserWidget_GetDarwinUserWidgetFromName::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.GetImageFromName
// 0x0010 (0x0010 - 0x0000)
struct DarwinUserWidget_GetImageFromName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_GetImageFromName) == 0x000008, "Wrong alignment on DarwinUserWidget_GetImageFromName");
static_assert(sizeof(DarwinUserWidget_GetImageFromName) == 0x000010, "Wrong size on DarwinUserWidget_GetImageFromName");
static_assert(offsetof(DarwinUserWidget_GetImageFromName, InName) == 0x000000, "Member 'DarwinUserWidget_GetImageFromName::InName' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_GetImageFromName, ReturnValue) == 0x000008, "Member 'DarwinUserWidget_GetImageFromName::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.GetOpenState
// 0x0001 (0x0001 - 0x0000)
struct DarwinUserWidget_GetOpenState final
{
public:
	EOpenState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_GetOpenState) == 0x000001, "Wrong alignment on DarwinUserWidget_GetOpenState");
static_assert(sizeof(DarwinUserWidget_GetOpenState) == 0x000001, "Wrong size on DarwinUserWidget_GetOpenState");
static_assert(offsetof(DarwinUserWidget_GetOpenState, ReturnValue) == 0x000000, "Member 'DarwinUserWidget_GetOpenState::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.GetTextBlockFromName
// 0x0010 (0x0010 - 0x0000)
struct DarwinUserWidget_GetTextBlockFromName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_GetTextBlockFromName) == 0x000008, "Wrong alignment on DarwinUserWidget_GetTextBlockFromName");
static_assert(sizeof(DarwinUserWidget_GetTextBlockFromName) == 0x000010, "Wrong size on DarwinUserWidget_GetTextBlockFromName");
static_assert(offsetof(DarwinUserWidget_GetTextBlockFromName, InName) == 0x000000, "Member 'DarwinUserWidget_GetTextBlockFromName::InName' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_GetTextBlockFromName, ReturnValue) == 0x000008, "Member 'DarwinUserWidget_GetTextBlockFromName::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinUserWidget.IsJustPressedWithLeftAnalog
// 0x0002 (0x0002 - 0x0000)
struct DarwinUserWidget_IsJustPressedWithLeftAnalog final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinUserWidget_IsJustPressedWithLeftAnalog) == 0x000001, "Wrong alignment on DarwinUserWidget_IsJustPressedWithLeftAnalog");
static_assert(sizeof(DarwinUserWidget_IsJustPressedWithLeftAnalog) == 0x000002, "Wrong size on DarwinUserWidget_IsJustPressedWithLeftAnalog");
static_assert(offsetof(DarwinUserWidget_IsJustPressedWithLeftAnalog, Key) == 0x000000, "Member 'DarwinUserWidget_IsJustPressedWithLeftAnalog::Key' has a wrong offset!");
static_assert(offsetof(DarwinUserWidget_IsJustPressedWithLeftAnalog, ReturnValue) == 0x000001, "Member 'DarwinUserWidget_IsJustPressedWithLeftAnalog::ReturnValue' has a wrong offset!");

// Function DarwinGame.UI3DBase.SetAttachSocketName
// 0x0008 (0x0008 - 0x0000)
struct UI3DBase_SetAttachSocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI3DBase_SetAttachSocketName) == 0x000004, "Wrong alignment on UI3DBase_SetAttachSocketName");
static_assert(sizeof(UI3DBase_SetAttachSocketName) == 0x000008, "Wrong size on UI3DBase_SetAttachSocketName");
static_assert(offsetof(UI3DBase_SetAttachSocketName, SocketName) == 0x000000, "Member 'UI3DBase_SetAttachSocketName::SocketName' has a wrong offset!");

// Function DarwinGame.UI3DBase.SetLocation
// 0x000C (0x000C - 0x0000)
struct UI3DBase_SetLocation final
{
public:
	struct FVector                                InLocaion;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI3DBase_SetLocation) == 0x000004, "Wrong alignment on UI3DBase_SetLocation");
static_assert(sizeof(UI3DBase_SetLocation) == 0x00000C, "Wrong size on UI3DBase_SetLocation");
static_assert(offsetof(UI3DBase_SetLocation, InLocaion) == 0x000000, "Member 'UI3DBase_SetLocation::InLocaion' has a wrong offset!");

// Function DarwinGame.UI3DBase.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct UI3DBase_SetTargetActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI3DBase_SetTargetActor) == 0x000008, "Wrong alignment on UI3DBase_SetTargetActor");
static_assert(sizeof(UI3DBase_SetTargetActor) == 0x000008, "Wrong size on UI3DBase_SetTargetActor");
static_assert(offsetof(UI3DBase_SetTargetActor, InActor) == 0x000000, "Member 'UI3DBase_SetTargetActor::InActor' has a wrong offset!");

// Function DarwinGame.UIField_SkillChain_Word.SetChainData
// 0x0004 (0x0004 - 0x0000)
struct UIField_SkillChain_Word_SetChainData final
{
public:
	int32                                         DamageNum;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_SkillChain_Word_SetChainData) == 0x000004, "Wrong alignment on UIField_SkillChain_Word_SetChainData");
static_assert(sizeof(UIField_SkillChain_Word_SetChainData) == 0x000004, "Wrong size on UIField_SkillChain_Word_SetChainData");
static_assert(offsetof(UIField_SkillChain_Word_SetChainData, DamageNum) == 0x000000, "Member 'UIField_SkillChain_Word_SetChainData::DamageNum' has a wrong offset!");

// Function DarwinGame.UIMenuBase.AddItemList
// 0x0008 (0x0008 - 0x0000)
struct UIMenuBase_AddItemList final
{
public:
	class UUIMenuItemBase*                        Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_AddItemList) == 0x000008, "Wrong alignment on UIMenuBase_AddItemList");
static_assert(sizeof(UIMenuBase_AddItemList) == 0x000008, "Wrong size on UIMenuBase_AddItemList");
static_assert(offsetof(UIMenuBase_AddItemList, Item) == 0x000000, "Member 'UIMenuBase_AddItemList::Item' has a wrong offset!");

// Function DarwinGame.UIMenuBase.ChangeFocusWithNavigation
// 0x0003 (0x0003 - 0x0000)
struct UIMenuBase_ChangeFocusWithNavigation final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckSelfKeyInput;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_ChangeFocusWithNavigation) == 0x000001, "Wrong alignment on UIMenuBase_ChangeFocusWithNavigation");
static_assert(sizeof(UIMenuBase_ChangeFocusWithNavigation) == 0x000003, "Wrong size on UIMenuBase_ChangeFocusWithNavigation");
static_assert(offsetof(UIMenuBase_ChangeFocusWithNavigation, Key) == 0x000000, "Member 'UIMenuBase_ChangeFocusWithNavigation::Key' has a wrong offset!");
static_assert(offsetof(UIMenuBase_ChangeFocusWithNavigation, CheckSelfKeyInput) == 0x000001, "Member 'UIMenuBase_ChangeFocusWithNavigation::CheckSelfKeyInput' has a wrong offset!");
static_assert(offsetof(UIMenuBase_ChangeFocusWithNavigation, ReturnValue) == 0x000002, "Member 'UIMenuBase_ChangeFocusWithNavigation::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuBase.CheckSelectableFromKeyInput
// 0x0018 (0x0018 - 0x0000)
struct UIMenuBase_CheckSelectableFromKeyInput final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIMenuBase*                            Menu;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMenuBase_CheckSelectableFromKeyInput) == 0x000008, "Wrong alignment on UIMenuBase_CheckSelectableFromKeyInput");
static_assert(sizeof(UIMenuBase_CheckSelectableFromKeyInput) == 0x000018, "Wrong size on UIMenuBase_CheckSelectableFromKeyInput");
static_assert(offsetof(UIMenuBase_CheckSelectableFromKeyInput, Key) == 0x000000, "Member 'UIMenuBase_CheckSelectableFromKeyInput::Key' has a wrong offset!");
static_assert(offsetof(UIMenuBase_CheckSelectableFromKeyInput, Menu) == 0x000008, "Member 'UIMenuBase_CheckSelectableFromKeyInput::Menu' has a wrong offset!");
static_assert(offsetof(UIMenuBase_CheckSelectableFromKeyInput, ReturnValue) == 0x000010, "Member 'UIMenuBase_CheckSelectableFromKeyInput::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuBase.GetItemList
// 0x0010 (0x0010 - 0x0000)
struct UIMenuBase_GetItemList final
{
public:
	TArray<class UUIMenuItemBase*>                ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_GetItemList) == 0x000008, "Wrong alignment on UIMenuBase_GetItemList");
static_assert(sizeof(UIMenuBase_GetItemList) == 0x000010, "Wrong size on UIMenuBase_GetItemList");
static_assert(offsetof(UIMenuBase_GetItemList, ReturnValue) == 0x000000, "Member 'UIMenuBase_GetItemList::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuBase.OnTriedToMoveBeyondTheEdgeFunc
// 0x0001 (0x0001 - 0x0000)
struct UIMenuBase_OnTriedToMoveBeyondTheEdgeFunc final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_OnTriedToMoveBeyondTheEdgeFunc) == 0x000001, "Wrong alignment on UIMenuBase_OnTriedToMoveBeyondTheEdgeFunc");
static_assert(sizeof(UIMenuBase_OnTriedToMoveBeyondTheEdgeFunc) == 0x000001, "Wrong size on UIMenuBase_OnTriedToMoveBeyondTheEdgeFunc");
static_assert(offsetof(UIMenuBase_OnTriedToMoveBeyondTheEdgeFunc, Key) == 0x000000, "Member 'UIMenuBase_OnTriedToMoveBeyondTheEdgeFunc::Key' has a wrong offset!");

// Function DarwinGame.UIMenuBase.RemoveIndexItemList
// 0x0004 (0x0004 - 0x0000)
struct UIMenuBase_RemoveIndexItemList final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_RemoveIndexItemList) == 0x000004, "Wrong alignment on UIMenuBase_RemoveIndexItemList");
static_assert(sizeof(UIMenuBase_RemoveIndexItemList) == 0x000004, "Wrong size on UIMenuBase_RemoveIndexItemList");
static_assert(offsetof(UIMenuBase_RemoveIndexItemList, Index_0) == 0x000000, "Member 'UIMenuBase_RemoveIndexItemList::Index_0' has a wrong offset!");

// Function DarwinGame.UIMenuBase.SetFocusItem
// 0x0008 (0x0008 - 0x0000)
struct UIMenuBase_SetFocusItem final
{
public:
	class UUIMenuItemBase*                        Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_SetFocusItem) == 0x000008, "Wrong alignment on UIMenuBase_SetFocusItem");
static_assert(sizeof(UIMenuBase_SetFocusItem) == 0x000008, "Wrong size on UIMenuBase_SetFocusItem");
static_assert(offsetof(UIMenuBase_SetFocusItem, Item) == 0x000000, "Member 'UIMenuBase_SetFocusItem::Item' has a wrong offset!");

// Function DarwinGame.UIMenuBase.SetFocusItemFromIndex
// 0x0004 (0x0004 - 0x0000)
struct UIMenuBase_SetFocusItemFromIndex final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_SetFocusItemFromIndex) == 0x000004, "Wrong alignment on UIMenuBase_SetFocusItemFromIndex");
static_assert(sizeof(UIMenuBase_SetFocusItemFromIndex) == 0x000004, "Wrong size on UIMenuBase_SetFocusItemFromIndex");
static_assert(offsetof(UIMenuBase_SetFocusItemFromIndex, ItemIndex) == 0x000000, "Member 'UIMenuBase_SetFocusItemFromIndex::ItemIndex' has a wrong offset!");

// Function DarwinGame.UIMenuBase.SetItemList
// 0x0010 (0x0010 - 0x0000)
struct UIMenuBase_SetItemList final
{
public:
	TArray<class UUIMenuItemBase*>                NewParam;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_SetItemList) == 0x000008, "Wrong alignment on UIMenuBase_SetItemList");
static_assert(sizeof(UIMenuBase_SetItemList) == 0x000010, "Wrong size on UIMenuBase_SetItemList");
static_assert(offsetof(UIMenuBase_SetItemList, NewParam) == 0x000000, "Member 'UIMenuBase_SetItemList::NewParam' has a wrong offset!");

// Function DarwinGame.UIMenuBase.SetNavigationLinear
// 0x0018 (0x0018 - 0x0000)
struct UIMenuBase_SetNavigationLinear final
{
public:
	TArray<class UUIMenuItemBase*>                NewParam;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisMappingType                              PrevKey;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisMappingType                              NextKey;                                           // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMenuBase_SetNavigationLinear) == 0x000008, "Wrong alignment on UIMenuBase_SetNavigationLinear");
static_assert(sizeof(UIMenuBase_SetNavigationLinear) == 0x000018, "Wrong size on UIMenuBase_SetNavigationLinear");
static_assert(offsetof(UIMenuBase_SetNavigationLinear, NewParam) == 0x000000, "Member 'UIMenuBase_SetNavigationLinear::NewParam' has a wrong offset!");
static_assert(offsetof(UIMenuBase_SetNavigationLinear, Loop) == 0x000010, "Member 'UIMenuBase_SetNavigationLinear::Loop' has a wrong offset!");
static_assert(offsetof(UIMenuBase_SetNavigationLinear, PrevKey) == 0x000011, "Member 'UIMenuBase_SetNavigationLinear::PrevKey' has a wrong offset!");
static_assert(offsetof(UIMenuBase_SetNavigationLinear, NextKey) == 0x000012, "Member 'UIMenuBase_SetNavigationLinear::NextKey' has a wrong offset!");

// Function DarwinGame.UIMenuBase.SetNavigationLinearLR
// 0x0018 (0x0018 - 0x0000)
struct UIMenuBase_SetNavigationLinearLR final
{
public:
	TArray<class UUIMenuItemBase*>                NewParam;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMenuBase_SetNavigationLinearLR) == 0x000008, "Wrong alignment on UIMenuBase_SetNavigationLinearLR");
static_assert(sizeof(UIMenuBase_SetNavigationLinearLR) == 0x000018, "Wrong size on UIMenuBase_SetNavigationLinearLR");
static_assert(offsetof(UIMenuBase_SetNavigationLinearLR, NewParam) == 0x000000, "Member 'UIMenuBase_SetNavigationLinearLR::NewParam' has a wrong offset!");
static_assert(offsetof(UIMenuBase_SetNavigationLinearLR, Loop) == 0x000010, "Member 'UIMenuBase_SetNavigationLinearLR::Loop' has a wrong offset!");

// Function DarwinGame.UIMenuBase.SetNavigationLinearUpDown
// 0x0018 (0x0018 - 0x0000)
struct UIMenuBase_SetNavigationLinearUpDown final
{
public:
	TArray<class UUIMenuItemBase*>                NewParam;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMenuBase_SetNavigationLinearUpDown) == 0x000008, "Wrong alignment on UIMenuBase_SetNavigationLinearUpDown");
static_assert(sizeof(UIMenuBase_SetNavigationLinearUpDown) == 0x000018, "Wrong size on UIMenuBase_SetNavigationLinearUpDown");
static_assert(offsetof(UIMenuBase_SetNavigationLinearUpDown, NewParam) == 0x000000, "Member 'UIMenuBase_SetNavigationLinearUpDown::NewParam' has a wrong offset!");
static_assert(offsetof(UIMenuBase_SetNavigationLinearUpDown, Loop) == 0x000010, "Member 'UIMenuBase_SetNavigationLinearUpDown::Loop' has a wrong offset!");

// Function DarwinGame.UIMenuBase.GetFocusItem
// 0x0008 (0x0008 - 0x0000)
struct UIMenuBase_GetFocusItem final
{
public:
	class UUIMenuItemBase*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_GetFocusItem) == 0x000008, "Wrong alignment on UIMenuBase_GetFocusItem");
static_assert(sizeof(UIMenuBase_GetFocusItem) == 0x000008, "Wrong size on UIMenuBase_GetFocusItem");
static_assert(offsetof(UIMenuBase_GetFocusItem, ReturnValue) == 0x000000, "Member 'UIMenuBase_GetFocusItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuBase.GetIndexAtFocusItem
// 0x0004 (0x0004 - 0x0000)
struct UIMenuBase_GetIndexAtFocusItem final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_GetIndexAtFocusItem) == 0x000004, "Wrong alignment on UIMenuBase_GetIndexAtFocusItem");
static_assert(sizeof(UIMenuBase_GetIndexAtFocusItem) == 0x000004, "Wrong size on UIMenuBase_GetIndexAtFocusItem");
static_assert(offsetof(UIMenuBase_GetIndexAtFocusItem, ReturnValue) == 0x000000, "Member 'UIMenuBase_GetIndexAtFocusItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuBase.HasFocusItem
// 0x0001 (0x0001 - 0x0000)
struct UIMenuBase_HasFocusItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_HasFocusItem) == 0x000001, "Wrong alignment on UIMenuBase_HasFocusItem");
static_assert(sizeof(UIMenuBase_HasFocusItem) == 0x000001, "Wrong size on UIMenuBase_HasFocusItem");
static_assert(offsetof(UIMenuBase_HasFocusItem, ReturnValue) == 0x000000, "Member 'UIMenuBase_HasFocusItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuBase.ItemListLastIndex
// 0x0004 (0x0004 - 0x0000)
struct UIMenuBase_ItemListLastIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_ItemListLastIndex) == 0x000004, "Wrong alignment on UIMenuBase_ItemListLastIndex");
static_assert(sizeof(UIMenuBase_ItemListLastIndex) == 0x000004, "Wrong size on UIMenuBase_ItemListLastIndex");
static_assert(offsetof(UIMenuBase_ItemListLastIndex, ReturnValue) == 0x000000, "Member 'UIMenuBase_ItemListLastIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuBase.ItemListLength
// 0x0004 (0x0004 - 0x0000)
struct UIMenuBase_ItemListLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuBase_ItemListLength) == 0x000004, "Wrong alignment on UIMenuBase_ItemListLength");
static_assert(sizeof(UIMenuBase_ItemListLength) == 0x000004, "Wrong size on UIMenuBase_ItemListLength");
static_assert(offsetof(UIMenuBase_ItemListLength, ReturnValue) == 0x000000, "Member 'UIMenuBase_ItemListLength::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.CanPlaySelectSound
// 0x0001 (0x0001 - 0x0000)
struct UIScrollMenuBase_CanPlaySelectSound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_CanPlaySelectSound) == 0x000001, "Wrong alignment on UIScrollMenuBase_CanPlaySelectSound");
static_assert(sizeof(UIScrollMenuBase_CanPlaySelectSound) == 0x000001, "Wrong size on UIScrollMenuBase_CanPlaySelectSound");
static_assert(offsetof(UIScrollMenuBase_CanPlaySelectSound, ReturnValue) == 0x000000, "Member 'UIScrollMenuBase_CanPlaySelectSound::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.CanSelect
// 0x0001 (0x0001 - 0x0000)
struct UIScrollMenuBase_CanSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_CanSelect) == 0x000001, "Wrong alignment on UIScrollMenuBase_CanSelect");
static_assert(sizeof(UIScrollMenuBase_CanSelect) == 0x000001, "Wrong size on UIScrollMenuBase_CanSelect");
static_assert(offsetof(UIScrollMenuBase_CanSelect, ReturnValue) == 0x000000, "Member 'UIScrollMenuBase_CanSelect::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.ChangePage
// 0x0003 (0x0003 - 0x0000)
struct UIScrollMenuBase_ChangePage final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckSelfKeyInput;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_ChangePage) == 0x000001, "Wrong alignment on UIScrollMenuBase_ChangePage");
static_assert(sizeof(UIScrollMenuBase_ChangePage) == 0x000003, "Wrong size on UIScrollMenuBase_ChangePage");
static_assert(offsetof(UIScrollMenuBase_ChangePage, Key) == 0x000000, "Member 'UIScrollMenuBase_ChangePage::Key' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_ChangePage, CheckSelfKeyInput) == 0x000001, "Member 'UIScrollMenuBase_ChangePage::CheckSelfKeyInput' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_ChangePage, ReturnValue) == 0x000002, "Member 'UIScrollMenuBase_ChangePage::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.InitList
// 0x0004 (0x0004 - 0x0000)
struct UIScrollMenuBase_InitList final
{
public:
	int32                                         InListNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_InitList) == 0x000004, "Wrong alignment on UIScrollMenuBase_InitList");
static_assert(sizeof(UIScrollMenuBase_InitList) == 0x000004, "Wrong size on UIScrollMenuBase_InitList");
static_assert(offsetof(UIScrollMenuBase_InitList, InListNum) == 0x000000, "Member 'UIScrollMenuBase_InitList::InListNum' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.InitScrollMenu
// 0x0010 (0x0010 - 0x0000)
struct UIScrollMenuBase_InitScrollMenu final
{
public:
	TArray<class UUIScrollMenuItemBase*>          InItemList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_InitScrollMenu) == 0x000008, "Wrong alignment on UIScrollMenuBase_InitScrollMenu");
static_assert(sizeof(UIScrollMenuBase_InitScrollMenu) == 0x000010, "Wrong size on UIScrollMenuBase_InitScrollMenu");
static_assert(offsetof(UIScrollMenuBase_InitScrollMenu, InItemList) == 0x000000, "Member 'UIScrollMenuBase_InitScrollMenu::InItemList' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.IsScrolling
// 0x0001 (0x0001 - 0x0000)
struct UIScrollMenuBase_IsScrolling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_IsScrolling) == 0x000001, "Wrong alignment on UIScrollMenuBase_IsScrolling");
static_assert(sizeof(UIScrollMenuBase_IsScrolling) == 0x000001, "Wrong size on UIScrollMenuBase_IsScrolling");
static_assert(offsetof(UIScrollMenuBase_IsScrolling, ReturnValue) == 0x000000, "Member 'UIScrollMenuBase_IsScrolling::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.IsValidItem
// 0x0010 (0x0010 - 0x0000)
struct UIScrollMenuBase_IsValidItem final
{
public:
	class UUIScrollMenuItemBase*                  InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollMenuBase_IsValidItem) == 0x000008, "Wrong alignment on UIScrollMenuBase_IsValidItem");
static_assert(sizeof(UIScrollMenuBase_IsValidItem) == 0x000010, "Wrong size on UIScrollMenuBase_IsValidItem");
static_assert(offsetof(UIScrollMenuBase_IsValidItem, InItem) == 0x000000, "Member 'UIScrollMenuBase_IsValidItem::InItem' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_IsValidItem, ReturnValue) == 0x000008, "Member 'UIScrollMenuBase_IsValidItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.ResetDispList
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuBase_ResetDispList final
{
public:
	int32                                         InFocusIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSetFocus;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollMenuBase_ResetDispList) == 0x000004, "Wrong alignment on UIScrollMenuBase_ResetDispList");
static_assert(sizeof(UIScrollMenuBase_ResetDispList) == 0x000008, "Wrong size on UIScrollMenuBase_ResetDispList");
static_assert(offsetof(UIScrollMenuBase_ResetDispList, InFocusIndex) == 0x000000, "Member 'UIScrollMenuBase_ResetDispList::InFocusIndex' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_ResetDispList, IsSetFocus) == 0x000004, "Member 'UIScrollMenuBase_ResetDispList::IsSetFocus' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.ResetDispListKeepFocus
// 0x0001 (0x0001 - 0x0000)
struct UIScrollMenuBase_ResetDispListKeepFocus final
{
public:
	bool                                          IsSetFocus;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_ResetDispListKeepFocus) == 0x000001, "Wrong alignment on UIScrollMenuBase_ResetDispListKeepFocus");
static_assert(sizeof(UIScrollMenuBase_ResetDispListKeepFocus) == 0x000001, "Wrong size on UIScrollMenuBase_ResetDispListKeepFocus");
static_assert(offsetof(UIScrollMenuBase_ResetDispListKeepFocus, IsSetFocus) == 0x000000, "Member 'UIScrollMenuBase_ResetDispListKeepFocus::IsSetFocus' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.ResetDispListStartIndex
// 0x000C (0x000C - 0x0000)
struct UIScrollMenuBase_ResetDispListStartIndex final
{
public:
	int32                                         InFocusIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InListStartIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSetFocus;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollMenuBase_ResetDispListStartIndex) == 0x000004, "Wrong alignment on UIScrollMenuBase_ResetDispListStartIndex");
static_assert(sizeof(UIScrollMenuBase_ResetDispListStartIndex) == 0x00000C, "Wrong size on UIScrollMenuBase_ResetDispListStartIndex");
static_assert(offsetof(UIScrollMenuBase_ResetDispListStartIndex, InFocusIndex) == 0x000000, "Member 'UIScrollMenuBase_ResetDispListStartIndex::InFocusIndex' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_ResetDispListStartIndex, InListStartIndex) == 0x000004, "Member 'UIScrollMenuBase_ResetDispListStartIndex::InListStartIndex' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_ResetDispListStartIndex, IsSetFocus) == 0x000008, "Member 'UIScrollMenuBase_ResetDispListStartIndex::IsSetFocus' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.ScrollPage
// 0x0003 (0x0003 - 0x0000)
struct UIScrollMenuBase_ScrollPage final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckSelfKeyInput;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_ScrollPage) == 0x000001, "Wrong alignment on UIScrollMenuBase_ScrollPage");
static_assert(sizeof(UIScrollMenuBase_ScrollPage) == 0x000003, "Wrong size on UIScrollMenuBase_ScrollPage");
static_assert(offsetof(UIScrollMenuBase_ScrollPage, Key) == 0x000000, "Member 'UIScrollMenuBase_ScrollPage::Key' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_ScrollPage, CheckSelfKeyInput) == 0x000001, "Member 'UIScrollMenuBase_ScrollPage::CheckSelfKeyInput' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_ScrollPage, ReturnValue) == 0x000002, "Member 'UIScrollMenuBase_ScrollPage::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.SetFocusItemFromListIndex
// 0x0004 (0x0004 - 0x0000)
struct UIScrollMenuBase_SetFocusItemFromListIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_SetFocusItemFromListIndex) == 0x000004, "Wrong alignment on UIScrollMenuBase_SetFocusItemFromListIndex");
static_assert(sizeof(UIScrollMenuBase_SetFocusItemFromListIndex) == 0x000004, "Wrong size on UIScrollMenuBase_SetFocusItemFromListIndex");
static_assert(offsetof(UIScrollMenuBase_SetFocusItemFromListIndex, InIndex) == 0x000000, "Member 'UIScrollMenuBase_SetFocusItemFromListIndex::InIndex' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.SetItemData
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuBase_SetItemData final
{
public:
	class UUIScrollMenuItemBase*                  InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_SetItemData) == 0x000008, "Wrong alignment on UIScrollMenuBase_SetItemData");
static_assert(sizeof(UIScrollMenuBase_SetItemData) == 0x000008, "Wrong size on UIScrollMenuBase_SetItemData");
static_assert(offsetof(UIScrollMenuBase_SetItemData, InItem) == 0x000000, "Member 'UIScrollMenuBase_SetItemData::InItem' has a wrong offset!");

// Function DarwinGame.UIScrollMenuBase.SetVisibleCursorArrow
// 0x0002 (0x0002 - 0x0000)
struct UIScrollMenuBase_SetVisibleCursorArrow final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArrowWidgetVisibleType                       VisibleType;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuBase_SetVisibleCursorArrow) == 0x000001, "Wrong alignment on UIScrollMenuBase_SetVisibleCursorArrow");
static_assert(sizeof(UIScrollMenuBase_SetVisibleCursorArrow) == 0x000002, "Wrong size on UIScrollMenuBase_SetVisibleCursorArrow");
static_assert(offsetof(UIScrollMenuBase_SetVisibleCursorArrow, IsVisible_0) == 0x000000, "Member 'UIScrollMenuBase_SetVisibleCursorArrow::IsVisible_0' has a wrong offset!");
static_assert(offsetof(UIScrollMenuBase_SetVisibleCursorArrow, VisibleType) == 0x000001, "Member 'UIScrollMenuBase_SetVisibleCursorArrow::VisibleType' has a wrong offset!");

// Function DarwinGame.AbilityTask_PlayMontageAndWaitEvent.PlayMontageAndWaitEvent
// 0x0058 (0x0058 - 0x0000)
struct AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay_0;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags_0;                                       // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         Rate_0;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSection_0;                                    // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnds_0;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRootMotionTranslationScale_0;                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_PlayMontageAndWaitEvent*   ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent) == 0x000008, "Wrong alignment on AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent");
static_assert(sizeof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent) == 0x000058, "Wrong size on AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, OwningAbility) == 0x000000, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, TaskInstanceName) == 0x000008, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, MontageToPlay_0) == 0x000010, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::MontageToPlay_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, EventTags_0) == 0x000018, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::EventTags_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, Rate_0) == 0x000038, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::Rate_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, StartSection_0) == 0x00003C, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::StartSection_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, bStopWhenAbilityEnds_0) == 0x000044, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::bStopWhenAbilityEnds_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, AnimRootMotionTranslationScale_0) == 0x000048, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::AnimRootMotionTranslationScale_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent, ReturnValue) == 0x000050, "Member 'AbilityTask_PlayMontageAndWaitEvent_PlayMontageAndWaitEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateBase.Button_A
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_A final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_A) == 0x000001, "Wrong alignment on StateBase_Button_A");
static_assert(sizeof(StateBase_Button_A) == 0x000001, "Wrong size on StateBase_Button_A");
static_assert(offsetof(StateBase_Button_A, bRelease) == 0x000000, "Member 'StateBase_Button_A::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_B
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_B final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_B) == 0x000001, "Wrong alignment on StateBase_Button_B");
static_assert(sizeof(StateBase_Button_B) == 0x000001, "Wrong size on StateBase_Button_B");
static_assert(offsetof(StateBase_Button_B, bRelease) == 0x000000, "Member 'StateBase_Button_B::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_Down
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_Down final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_Down) == 0x000001, "Wrong alignment on StateBase_Button_Down");
static_assert(sizeof(StateBase_Button_Down) == 0x000001, "Wrong size on StateBase_Button_Down");
static_assert(offsetof(StateBase_Button_Down, bRelease) == 0x000000, "Member 'StateBase_Button_Down::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_L
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_L final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_L) == 0x000001, "Wrong alignment on StateBase_Button_L");
static_assert(sizeof(StateBase_Button_L) == 0x000001, "Wrong size on StateBase_Button_L");
static_assert(offsetof(StateBase_Button_L, bRelease) == 0x000000, "Member 'StateBase_Button_L::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_Left
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_Left final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_Left) == 0x000001, "Wrong alignment on StateBase_Button_Left");
static_assert(sizeof(StateBase_Button_Left) == 0x000001, "Wrong size on StateBase_Button_Left");
static_assert(offsetof(StateBase_Button_Left, bRelease) == 0x000000, "Member 'StateBase_Button_Left::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_LT
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_LT final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_LT) == 0x000001, "Wrong alignment on StateBase_Button_LT");
static_assert(sizeof(StateBase_Button_LT) == 0x000001, "Wrong size on StateBase_Button_LT");
static_assert(offsetof(StateBase_Button_LT, bRelease) == 0x000000, "Member 'StateBase_Button_LT::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_PC_R
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_PC_R final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_PC_R) == 0x000001, "Wrong alignment on StateBase_Button_PC_R");
static_assert(sizeof(StateBase_Button_PC_R) == 0x000001, "Wrong size on StateBase_Button_PC_R");
static_assert(offsetof(StateBase_Button_PC_R, bRelease) == 0x000000, "Member 'StateBase_Button_PC_R::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_PC_T
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_PC_T final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_PC_T) == 0x000001, "Wrong alignment on StateBase_Button_PC_T");
static_assert(sizeof(StateBase_Button_PC_T) == 0x000001, "Wrong size on StateBase_Button_PC_T");
static_assert(offsetof(StateBase_Button_PC_T, bRelease) == 0x000000, "Member 'StateBase_Button_PC_T::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_R
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_R final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_R) == 0x000001, "Wrong alignment on StateBase_Button_R");
static_assert(sizeof(StateBase_Button_R) == 0x000001, "Wrong size on StateBase_Button_R");
static_assert(offsetof(StateBase_Button_R, bRelease) == 0x000000, "Member 'StateBase_Button_R::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_Right
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_Right final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_Right) == 0x000001, "Wrong alignment on StateBase_Button_Right");
static_assert(sizeof(StateBase_Button_Right) == 0x000001, "Wrong size on StateBase_Button_Right");
static_assert(offsetof(StateBase_Button_Right, bRelease) == 0x000000, "Member 'StateBase_Button_Right::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_RMB
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_RMB final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_RMB) == 0x000001, "Wrong alignment on StateBase_Button_RMB");
static_assert(sizeof(StateBase_Button_RMB) == 0x000001, "Wrong size on StateBase_Button_RMB");
static_assert(offsetof(StateBase_Button_RMB, bRelease) == 0x000000, "Member 'StateBase_Button_RMB::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_RT
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_RT final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_RT) == 0x000001, "Wrong alignment on StateBase_Button_RT");
static_assert(sizeof(StateBase_Button_RT) == 0x000001, "Wrong size on StateBase_Button_RT");
static_assert(offsetof(StateBase_Button_RT, bRelease) == 0x000000, "Member 'StateBase_Button_RT::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_Up
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_Up final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_Up) == 0x000001, "Wrong alignment on StateBase_Button_Up");
static_assert(sizeof(StateBase_Button_Up) == 0x000001, "Wrong size on StateBase_Button_Up");
static_assert(offsetof(StateBase_Button_Up, bRelease) == 0x000000, "Member 'StateBase_Button_Up::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_X
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_X final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_X) == 0x000001, "Wrong alignment on StateBase_Button_X");
static_assert(sizeof(StateBase_Button_X) == 0x000001, "Wrong size on StateBase_Button_X");
static_assert(offsetof(StateBase_Button_X, bRelease) == 0x000000, "Member 'StateBase_Button_X::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Button_Y
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Button_Y final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Button_Y) == 0x000001, "Wrong alignment on StateBase_Button_Y");
static_assert(sizeof(StateBase_Button_Y) == 0x000001, "Wrong size on StateBase_Button_Y");
static_assert(offsetof(StateBase_Button_Y, bRelease) == 0x000000, "Member 'StateBase_Button_Y::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Move
// 0x000C (0x000C - 0x0000)
struct StateBase_Move final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Move) == 0x000004, "Wrong alignment on StateBase_Move");
static_assert(sizeof(StateBase_Move) == 0x00000C, "Wrong size on StateBase_Move");
static_assert(offsetof(StateBase_Move, InputVector) == 0x000000, "Member 'StateBase_Move::InputVector' has a wrong offset!");

// Function DarwinGame.StateBase.SpecialLeft
// 0x0001 (0x0001 - 0x0000)
struct StateBase_SpecialLeft final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_SpecialLeft) == 0x000001, "Wrong alignment on StateBase_SpecialLeft");
static_assert(sizeof(StateBase_SpecialLeft) == 0x000001, "Wrong size on StateBase_SpecialLeft");
static_assert(offsetof(StateBase_SpecialLeft, bRelease) == 0x000000, "Member 'StateBase_SpecialLeft::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.SpecialRight
// 0x0001 (0x0001 - 0x0000)
struct StateBase_SpecialRight final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_SpecialRight) == 0x000001, "Wrong alignment on StateBase_SpecialRight");
static_assert(sizeof(StateBase_SpecialRight) == 0x000001, "Wrong size on StateBase_SpecialRight");
static_assert(offsetof(StateBase_SpecialRight, bRelease) == 0x000000, "Member 'StateBase_SpecialRight::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.TakeAction
// 0x000C (0x000C - 0x0000)
struct StateBase_TakeAction final
{
public:
	struct FGameplayTag                           ActionTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelease;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateBase_TakeAction) == 0x000004, "Wrong alignment on StateBase_TakeAction");
static_assert(sizeof(StateBase_TakeAction) == 0x00000C, "Wrong size on StateBase_TakeAction");
static_assert(offsetof(StateBase_TakeAction, ActionTag) == 0x000000, "Member 'StateBase_TakeAction::ActionTag' has a wrong offset!");
static_assert(offsetof(StateBase_TakeAction, bRelease) == 0x000008, "Member 'StateBase_TakeAction::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Thumb_Left
// 0x0001 (0x0001 - 0x0000)
struct StateBase_Thumb_Left final
{
public:
	bool                                          bRelease;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Thumb_Left) == 0x000001, "Wrong alignment on StateBase_Thumb_Left");
static_assert(sizeof(StateBase_Thumb_Left) == 0x000001, "Wrong size on StateBase_Thumb_Left");
static_assert(offsetof(StateBase_Thumb_Left, bRelease) == 0x000000, "Member 'StateBase_Thumb_Left::bRelease' has a wrong offset!");

// Function DarwinGame.StateBase.Update
// 0x0004 (0x0004 - 0x0000)
struct StateBase_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_Update) == 0x000004, "Wrong alignment on StateBase_Update");
static_assert(sizeof(StateBase_Update) == 0x000004, "Wrong size on StateBase_Update");
static_assert(offsetof(StateBase_Update, DeltaTime) == 0x000000, "Member 'StateBase_Update::DeltaTime' has a wrong offset!");

// Function DarwinGame.StateBase.CalcAxisValue
// 0x0004 (0x0004 - 0x0000)
struct StateBase_CalcAxisValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_CalcAxisValue) == 0x000004, "Wrong alignment on StateBase_CalcAxisValue");
static_assert(sizeof(StateBase_CalcAxisValue) == 0x000004, "Wrong size on StateBase_CalcAxisValue");
static_assert(offsetof(StateBase_CalcAxisValue, ReturnValue) == 0x000000, "Member 'StateBase_CalcAxisValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateBase.GetInputRotation
// 0x000C (0x000C - 0x0000)
struct StateBase_GetInputRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_GetInputRotation) == 0x000004, "Wrong alignment on StateBase_GetInputRotation");
static_assert(sizeof(StateBase_GetInputRotation) == 0x00000C, "Wrong size on StateBase_GetInputRotation");
static_assert(offsetof(StateBase_GetInputRotation, ReturnValue) == 0x000000, "Member 'StateBase_GetInputRotation::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateBase.GetLastMovementInput
// 0x000C (0x000C - 0x0000)
struct StateBase_GetLastMovementInput final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_GetLastMovementInput) == 0x000004, "Wrong alignment on StateBase_GetLastMovementInput");
static_assert(sizeof(StateBase_GetLastMovementInput) == 0x00000C, "Wrong size on StateBase_GetLastMovementInput");
static_assert(offsetof(StateBase_GetLastMovementInput, ReturnValue) == 0x000000, "Member 'StateBase_GetLastMovementInput::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateBase.GetMoveRotation
// 0x000C (0x000C - 0x0000)
struct StateBase_GetMoveRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_GetMoveRotation) == 0x000004, "Wrong alignment on StateBase_GetMoveRotation");
static_assert(sizeof(StateBase_GetMoveRotation) == 0x00000C, "Wrong size on StateBase_GetMoveRotation");
static_assert(offsetof(StateBase_GetMoveRotation, ReturnValue) == 0x000000, "Member 'StateBase_GetMoveRotation::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateBase.GetMoveValue
// 0x0008 (0x0008 - 0x0000)
struct StateBase_GetMoveValue final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateBase_GetMoveValue) == 0x000004, "Wrong alignment on StateBase_GetMoveValue");
static_assert(sizeof(StateBase_GetMoveValue) == 0x000008, "Wrong size on StateBase_GetMoveValue");
static_assert(offsetof(StateBase_GetMoveValue, Axis) == 0x000000, "Member 'StateBase_GetMoveValue::Axis' has a wrong offset!");
static_assert(offsetof(StateBase_GetMoveValue, Direction) == 0x000004, "Member 'StateBase_GetMoveValue::Direction' has a wrong offset!");

// Function DarwinGame.UIDungeon_Floor.SetRoomNumber
// 0x0004 (0x0004 - 0x0000)
struct UIDungeon_Floor_SetRoomNumber final
{
public:
	int32                                         NewRoomNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDungeon_Floor_SetRoomNumber) == 0x000004, "Wrong alignment on UIDungeon_Floor_SetRoomNumber");
static_assert(sizeof(UIDungeon_Floor_SetRoomNumber) == 0x000004, "Wrong size on UIDungeon_Floor_SetRoomNumber");
static_assert(offsetof(UIDungeon_Floor_SetRoomNumber, NewRoomNumber) == 0x000000, "Member 'UIDungeon_Floor_SetRoomNumber::NewRoomNumber' has a wrong offset!");

// Function DarwinGame.MoveStateBase.CheckFrontWall
// 0x0018 (0x0018 - 0x0000)
struct MoveStateBase_CheckFrontWall final
{
public:
	float                                         RayLength;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncidentAngle;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Top;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bottom;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoveStateBase_CheckFrontWall) == 0x000004, "Wrong alignment on MoveStateBase_CheckFrontWall");
static_assert(sizeof(MoveStateBase_CheckFrontWall) == 0x000018, "Wrong size on MoveStateBase_CheckFrontWall");
static_assert(offsetof(MoveStateBase_CheckFrontWall, RayLength) == 0x000000, "Member 'MoveStateBase_CheckFrontWall::RayLength' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckFrontWall, Angle) == 0x000004, "Member 'MoveStateBase_CheckFrontWall::Angle' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckFrontWall, IncidentAngle) == 0x000008, "Member 'MoveStateBase_CheckFrontWall::IncidentAngle' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckFrontWall, Top) == 0x00000C, "Member 'MoveStateBase_CheckFrontWall::Top' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckFrontWall, Bottom) == 0x000010, "Member 'MoveStateBase_CheckFrontWall::Bottom' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckFrontWall, ReturnValue) == 0x000014, "Member 'MoveStateBase_CheckFrontWall::ReturnValue' has a wrong offset!");

// Function DarwinGame.MoveStateBase.CheckWallHeight
// 0x0010 (0x0010 - 0x0000)
struct MoveStateBase_CheckWallHeight final
{
public:
	float                                         Top;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bottom;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoveStateBase_CheckWallHeight) == 0x000004, "Wrong alignment on MoveStateBase_CheckWallHeight");
static_assert(sizeof(MoveStateBase_CheckWallHeight) == 0x000010, "Wrong size on MoveStateBase_CheckWallHeight");
static_assert(offsetof(MoveStateBase_CheckWallHeight, Top) == 0x000000, "Member 'MoveStateBase_CheckWallHeight::Top' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckWallHeight, Bottom) == 0x000004, "Member 'MoveStateBase_CheckWallHeight::Bottom' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckWallHeight, Height) == 0x000008, "Member 'MoveStateBase_CheckWallHeight::Height' has a wrong offset!");
static_assert(offsetof(MoveStateBase_CheckWallHeight, ReturnValue) == 0x00000C, "Member 'MoveStateBase_CheckWallHeight::ReturnValue' has a wrong offset!");

// Function DarwinGame.MoveStateBase.GetGradientVector
// 0x000C (0x000C - 0x0000)
struct MoveStateBase_GetGradientVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveStateBase_GetGradientVector) == 0x000004, "Wrong alignment on MoveStateBase_GetGradientVector");
static_assert(sizeof(MoveStateBase_GetGradientVector) == 0x00000C, "Wrong size on MoveStateBase_GetGradientVector");
static_assert(offsetof(MoveStateBase_GetGradientVector, ReturnValue) == 0x000000, "Member 'MoveStateBase_GetGradientVector::ReturnValue' has a wrong offset!");

// Function DarwinGame.MoveStateBase.SetNextMoveStateTag
// 0x0008 (0x0008 - 0x0000)
struct MoveStateBase_SetNextMoveStateTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveStateBase_SetNextMoveStateTag) == 0x000004, "Wrong alignment on MoveStateBase_SetNextMoveStateTag");
static_assert(sizeof(MoveStateBase_SetNextMoveStateTag) == 0x000008, "Wrong size on MoveStateBase_SetNextMoveStateTag");
static_assert(offsetof(MoveStateBase_SetNextMoveStateTag, Tag) == 0x000000, "Member 'MoveStateBase_SetNextMoveStateTag::Tag' has a wrong offset!");

// Function DarwinGame.MoveStateBase.GetNextMoveStateTag
// 0x0008 (0x0008 - 0x0000)
struct MoveStateBase_GetNextMoveStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveStateBase_GetNextMoveStateTag) == 0x000004, "Wrong alignment on MoveStateBase_GetNextMoveStateTag");
static_assert(sizeof(MoveStateBase_GetNextMoveStateTag) == 0x000008, "Wrong size on MoveStateBase_GetNextMoveStateTag");
static_assert(offsetof(MoveStateBase_GetNextMoveStateTag, ReturnValue) == 0x000000, "Member 'MoveStateBase_GetNextMoveStateTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.MoveStateBase.GetWallSurface
// 0x0088 (0x0088 - 0x0000)
struct MoveStateBase_GetWallSurface final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveStateBase_GetWallSurface) == 0x000004, "Wrong alignment on MoveStateBase_GetWallSurface");
static_assert(sizeof(MoveStateBase_GetWallSurface) == 0x000088, "Wrong size on MoveStateBase_GetWallSurface");
static_assert(offsetof(MoveStateBase_GetWallSurface, ReturnValue) == 0x000000, "Member 'MoveStateBase_GetWallSurface::ReturnValue' has a wrong offset!");

// Function DarwinGame.MoveStateBase.IsWallSurfaceFound
// 0x0001 (0x0001 - 0x0000)
struct MoveStateBase_IsWallSurfaceFound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveStateBase_IsWallSurfaceFound) == 0x000001, "Wrong alignment on MoveStateBase_IsWallSurfaceFound");
static_assert(sizeof(MoveStateBase_IsWallSurfaceFound) == 0x000001, "Wrong size on MoveStateBase_IsWallSurfaceFound");
static_assert(offsetof(MoveStateBase_IsWallSurfaceFound, ReturnValue) == 0x000000, "Member 'MoveStateBase_IsWallSurfaceFound::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.AddExp
// 0x0008 (0x0008 - 0x0000)
struct GameDataPlayer_AddExp final
{
public:
	int32                                         Exp;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_AddExp) == 0x000004, "Wrong alignment on GameDataPlayer_AddExp");
static_assert(sizeof(GameDataPlayer_AddExp) == 0x000008, "Wrong size on GameDataPlayer_AddExp");
static_assert(offsetof(GameDataPlayer_AddExp, Exp) == 0x000000, "Member 'GameDataPlayer_AddExp::Exp' has a wrong offset!");
static_assert(offsetof(GameDataPlayer_AddExp, ReturnValue) == 0x000004, "Member 'GameDataPlayer_AddExp::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.AddGold
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_AddGold final
{
public:
	int32                                         Gold;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_AddGold) == 0x000004, "Wrong alignment on GameDataPlayer_AddGold");
static_assert(sizeof(GameDataPlayer_AddGold) == 0x000004, "Wrong size on GameDataPlayer_AddGold");
static_assert(offsetof(GameDataPlayer_AddGold, Gold) == 0x000000, "Member 'GameDataPlayer_AddGold::Gold' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataPlayer_Clone final
{
public:
	class UGameDataPlayer*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_Clone) == 0x000008, "Wrong alignment on GameDataPlayer_Clone");
static_assert(sizeof(GameDataPlayer_Clone) == 0x000008, "Wrong size on GameDataPlayer_Clone");
static_assert(offsetof(GameDataPlayer_Clone, ReturnValue) == 0x000000, "Member 'GameDataPlayer_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataPlayer_Overwrite final
{
public:
	class UGameDataPlayer*                        game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_Overwrite) == 0x000008, "Wrong alignment on GameDataPlayer_Overwrite");
static_assert(sizeof(GameDataPlayer_Overwrite) == 0x000008, "Wrong size on GameDataPlayer_Overwrite");
static_assert(offsetof(GameDataPlayer_Overwrite, game_data) == 0x000000, "Member 'GameDataPlayer_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.SetAttributeList
// 0x0050 (0x0050 - 0x0000)
struct GameDataPlayer_SetAttributeList final
{
public:
	TMap<class FName, int32>                      list;                                              // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_SetAttributeList) == 0x000008, "Wrong alignment on GameDataPlayer_SetAttributeList");
static_assert(sizeof(GameDataPlayer_SetAttributeList) == 0x000050, "Wrong size on GameDataPlayer_SetAttributeList");
static_assert(offsetof(GameDataPlayer_SetAttributeList, list) == 0x000000, "Member 'GameDataPlayer_SetAttributeList::list' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.SetBP
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_SetBP final
{
public:
	int32                                         BP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_SetBP) == 0x000004, "Wrong alignment on GameDataPlayer_SetBP");
static_assert(sizeof(GameDataPlayer_SetBP) == 0x000004, "Wrong size on GameDataPlayer_SetBP");
static_assert(offsetof(GameDataPlayer_SetBP, BP) == 0x000000, "Member 'GameDataPlayer_SetBP::BP' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.SetEquipmentCoins
// 0x0010 (0x0010 - 0x0000)
struct GameDataPlayer_SetEquipmentCoins final
{
public:
	TArray<struct FST_CoinData>                   EquipmentCoins;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_SetEquipmentCoins) == 0x000008, "Wrong alignment on GameDataPlayer_SetEquipmentCoins");
static_assert(sizeof(GameDataPlayer_SetEquipmentCoins) == 0x000010, "Wrong size on GameDataPlayer_SetEquipmentCoins");
static_assert(offsetof(GameDataPlayer_SetEquipmentCoins, EquipmentCoins) == 0x000000, "Member 'GameDataPlayer_SetEquipmentCoins::EquipmentCoins' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.SetFeatureBuffList
// 0x0050 (0x0050 - 0x0000)
struct GameDataPlayer_SetFeatureBuffList final
{
public:
	TMap<class FName, struct FFeatureMapData>     list;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_SetFeatureBuffList) == 0x000008, "Wrong alignment on GameDataPlayer_SetFeatureBuffList");
static_assert(sizeof(GameDataPlayer_SetFeatureBuffList) == 0x000050, "Wrong size on GameDataPlayer_SetFeatureBuffList");
static_assert(offsetof(GameDataPlayer_SetFeatureBuffList, list) == 0x000000, "Member 'GameDataPlayer_SetFeatureBuffList::list' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.SetGold
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_SetGold final
{
public:
	int32                                         Gold;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_SetGold) == 0x000004, "Wrong alignment on GameDataPlayer_SetGold");
static_assert(sizeof(GameDataPlayer_SetGold) == 0x000004, "Wrong size on GameDataPlayer_SetGold");
static_assert(offsetof(GameDataPlayer_SetGold, Gold) == 0x000000, "Member 'GameDataPlayer_SetGold::Gold' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.SetHP
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_SetHP final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_SetHP) == 0x000004, "Wrong alignment on GameDataPlayer_SetHP");
static_assert(sizeof(GameDataPlayer_SetHP) == 0x000004, "Wrong size on GameDataPlayer_SetHP");
static_assert(offsetof(GameDataPlayer_SetHP, HP) == 0x000000, "Member 'GameDataPlayer_SetHP::HP' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.SetMP
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_SetMP final
{
public:
	int32                                         MP;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_SetMP) == 0x000004, "Wrong alignment on GameDataPlayer_SetMP");
static_assert(sizeof(GameDataPlayer_SetMP) == 0x000004, "Wrong size on GameDataPlayer_SetMP");
static_assert(offsetof(GameDataPlayer_SetMP, MP) == 0x000000, "Member 'GameDataPlayer_SetMP::MP' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetAdvanceStatus
// 0x0018 (0x0018 - 0x0000)
struct GameDataPlayer_GetAdvanceStatus final
{
public:
	struct FST_Status                             ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetAdvanceStatus) == 0x000004, "Wrong alignment on GameDataPlayer_GetAdvanceStatus");
static_assert(sizeof(GameDataPlayer_GetAdvanceStatus) == 0x000018, "Wrong size on GameDataPlayer_GetAdvanceStatus");
static_assert(offsetof(GameDataPlayer_GetAdvanceStatus, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetAdvanceStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetAttributeList
// 0x0050 (0x0050 - 0x0000)
struct GameDataPlayer_GetAttributeList final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetAttributeList) == 0x000008, "Wrong alignment on GameDataPlayer_GetAttributeList");
static_assert(sizeof(GameDataPlayer_GetAttributeList) == 0x000050, "Wrong size on GameDataPlayer_GetAttributeList");
static_assert(offsetof(GameDataPlayer_GetAttributeList, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetAttributeList::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetBaseStatus
// 0x0018 (0x0018 - 0x0000)
struct GameDataPlayer_GetBaseStatus final
{
public:
	struct FST_Status                             ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetBaseStatus) == 0x000004, "Wrong alignment on GameDataPlayer_GetBaseStatus");
static_assert(sizeof(GameDataPlayer_GetBaseStatus) == 0x000018, "Wrong size on GameDataPlayer_GetBaseStatus");
static_assert(offsetof(GameDataPlayer_GetBaseStatus, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetBaseStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetBP
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetBP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetBP) == 0x000004, "Wrong alignment on GameDataPlayer_GetBP");
static_assert(sizeof(GameDataPlayer_GetBP) == 0x000004, "Wrong size on GameDataPlayer_GetBP");
static_assert(offsetof(GameDataPlayer_GetBP, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetBP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetEquipmentCoins
// 0x0010 (0x0010 - 0x0000)
struct GameDataPlayer_GetEquipmentCoins final
{
public:
	TArray<struct FST_CoinData>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetEquipmentCoins) == 0x000008, "Wrong alignment on GameDataPlayer_GetEquipmentCoins");
static_assert(sizeof(GameDataPlayer_GetEquipmentCoins) == 0x000010, "Wrong size on GameDataPlayer_GetEquipmentCoins");
static_assert(offsetof(GameDataPlayer_GetEquipmentCoins, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetEquipmentCoins::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetFeatureBuffList
// 0x0050 (0x0050 - 0x0000)
struct GameDataPlayer_GetFeatureBuffList final
{
public:
	TMap<class FName, struct FFeatureMapData>     ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetFeatureBuffList) == 0x000008, "Wrong alignment on GameDataPlayer_GetFeatureBuffList");
static_assert(sizeof(GameDataPlayer_GetFeatureBuffList) == 0x000050, "Wrong size on GameDataPlayer_GetFeatureBuffList");
static_assert(offsetof(GameDataPlayer_GetFeatureBuffList, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetFeatureBuffList::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetGold
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetGold) == 0x000004, "Wrong alignment on GameDataPlayer_GetGold");
static_assert(sizeof(GameDataPlayer_GetGold) == 0x000004, "Wrong size on GameDataPlayer_GetGold");
static_assert(offsetof(GameDataPlayer_GetGold, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetGold::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetHP
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetHP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetHP) == 0x000004, "Wrong alignment on GameDataPlayer_GetHP");
static_assert(sizeof(GameDataPlayer_GetHP) == 0x000004, "Wrong size on GameDataPlayer_GetHP");
static_assert(offsetof(GameDataPlayer_GetHP, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetHP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetLevel) == 0x000004, "Wrong alignment on GameDataPlayer_GetLevel");
static_assert(sizeof(GameDataPlayer_GetLevel) == 0x000004, "Wrong size on GameDataPlayer_GetLevel");
static_assert(offsetof(GameDataPlayer_GetLevel, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetMP
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetMP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetMP) == 0x000004, "Wrong alignment on GameDataPlayer_GetMP");
static_assert(sizeof(GameDataPlayer_GetMP) == 0x000004, "Wrong size on GameDataPlayer_GetMP");
static_assert(offsetof(GameDataPlayer_GetMP, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetMP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetRequiredExp
// 0x0008 (0x0008 - 0x0000)
struct GameDataPlayer_GetRequiredExp final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetRequiredExp) == 0x000004, "Wrong alignment on GameDataPlayer_GetRequiredExp");
static_assert(sizeof(GameDataPlayer_GetRequiredExp) == 0x000008, "Wrong size on GameDataPlayer_GetRequiredExp");
static_assert(offsetof(GameDataPlayer_GetRequiredExp, Level) == 0x000000, "Member 'GameDataPlayer_GetRequiredExp::Level' has a wrong offset!");
static_assert(offsetof(GameDataPlayer_GetRequiredExp, ReturnValue) == 0x000004, "Member 'GameDataPlayer_GetRequiredExp::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetRequiredExpToNextLevel
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetRequiredExpToNextLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetRequiredExpToNextLevel) == 0x000004, "Wrong alignment on GameDataPlayer_GetRequiredExpToNextLevel");
static_assert(sizeof(GameDataPlayer_GetRequiredExpToNextLevel) == 0x000004, "Wrong size on GameDataPlayer_GetRequiredExpToNextLevel");
static_assert(offsetof(GameDataPlayer_GetRequiredExpToNextLevel, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetRequiredExpToNextLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetRequiredExpToNextLevelPercent
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetRequiredExpToNextLevelPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetRequiredExpToNextLevelPercent) == 0x000004, "Wrong alignment on GameDataPlayer_GetRequiredExpToNextLevelPercent");
static_assert(sizeof(GameDataPlayer_GetRequiredExpToNextLevelPercent) == 0x000004, "Wrong size on GameDataPlayer_GetRequiredExpToNextLevelPercent");
static_assert(offsetof(GameDataPlayer_GetRequiredExpToNextLevelPercent, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetRequiredExpToNextLevelPercent::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetStatus
// 0x0018 (0x0018 - 0x0000)
struct GameDataPlayer_GetStatus final
{
public:
	struct FST_Status                             ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetStatus) == 0x000004, "Wrong alignment on GameDataPlayer_GetStatus");
static_assert(sizeof(GameDataPlayer_GetStatus) == 0x000018, "Wrong size on GameDataPlayer_GetStatus");
static_assert(offsetof(GameDataPlayer_GetStatus, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.GetTotalExp
// 0x0004 (0x0004 - 0x0000)
struct GameDataPlayer_GetTotalExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_GetTotalExp) == 0x000004, "Wrong alignment on GameDataPlayer_GetTotalExp");
static_assert(sizeof(GameDataPlayer_GetTotalExp) == 0x000004, "Wrong size on GameDataPlayer_GetTotalExp");
static_assert(offsetof(GameDataPlayer_GetTotalExp, ReturnValue) == 0x000000, "Member 'GameDataPlayer_GetTotalExp::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.IsKindKamyu
// 0x0001 (0x0001 - 0x0000)
struct GameDataPlayer_IsKindKamyu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_IsKindKamyu) == 0x000001, "Wrong alignment on GameDataPlayer_IsKindKamyu");
static_assert(sizeof(GameDataPlayer_IsKindKamyu) == 0x000001, "Wrong size on GameDataPlayer_IsKindKamyu");
static_assert(offsetof(GameDataPlayer_IsKindKamyu, ReturnValue) == 0x000000, "Member 'GameDataPlayer_IsKindKamyu::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataPlayer.IsKindMaya
// 0x0001 (0x0001 - 0x0000)
struct GameDataPlayer_IsKindMaya final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataPlayer_IsKindMaya) == 0x000001, "Wrong alignment on GameDataPlayer_IsKindMaya");
static_assert(sizeof(GameDataPlayer_IsKindMaya) == 0x000001, "Wrong size on GameDataPlayer_IsKindMaya");
static_assert(offsetof(GameDataPlayer_IsKindMaya, ReturnValue) == 0x000000, "Member 'GameDataPlayer_IsKindMaya::ReturnValue' has a wrong offset!");

// Function DarwinGame.AbyssRectTrigger.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct AbyssRectTrigger_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbyssRectTrigger_OnBeginOverlap) == 0x000008, "Wrong alignment on AbyssRectTrigger_OnBeginOverlap");
static_assert(sizeof(AbyssRectTrigger_OnBeginOverlap) == 0x000010, "Wrong size on AbyssRectTrigger_OnBeginOverlap");
static_assert(offsetof(AbyssRectTrigger_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'AbyssRectTrigger_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AbyssRectTrigger_OnBeginOverlap, OtherActor) == 0x000008, "Member 'AbyssRectTrigger_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function DarwinGame.ActionAbilitySystemComponent.AddOnlyGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct ActionAbilitySystemComponent_AddOnlyGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAbilitySystemComponent_AddOnlyGameplayTag) == 0x000004, "Wrong alignment on ActionAbilitySystemComponent_AddOnlyGameplayTag");
static_assert(sizeof(ActionAbilitySystemComponent_AddOnlyGameplayTag) == 0x000008, "Wrong size on ActionAbilitySystemComponent_AddOnlyGameplayTag");
static_assert(offsetof(ActionAbilitySystemComponent_AddOnlyGameplayTag, Tag) == 0x000000, "Member 'ActionAbilitySystemComponent_AddOnlyGameplayTag::Tag' has a wrong offset!");

// Function DarwinGame.ActionAbilitySystemComponent.HasTag
// 0x000C (0x000C - 0x0000)
struct ActionAbilitySystemComponent_HasTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionAbilitySystemComponent_HasTag) == 0x000004, "Wrong alignment on ActionAbilitySystemComponent_HasTag");
static_assert(sizeof(ActionAbilitySystemComponent_HasTag) == 0x00000C, "Wrong size on ActionAbilitySystemComponent_HasTag");
static_assert(offsetof(ActionAbilitySystemComponent_HasTag, Tag) == 0x000000, "Member 'ActionAbilitySystemComponent_HasTag::Tag' has a wrong offset!");
static_assert(offsetof(ActionAbilitySystemComponent_HasTag, ReturnValue) == 0x000008, "Member 'ActionAbilitySystemComponent_HasTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionAbilitySystemComponent.SetPauseAllActiveGameplayEffects
// 0x0001 (0x0001 - 0x0000)
struct ActionAbilitySystemComponent_SetPauseAllActiveGameplayEffects final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAbilitySystemComponent_SetPauseAllActiveGameplayEffects) == 0x000001, "Wrong alignment on ActionAbilitySystemComponent_SetPauseAllActiveGameplayEffects");
static_assert(sizeof(ActionAbilitySystemComponent_SetPauseAllActiveGameplayEffects) == 0x000001, "Wrong size on ActionAbilitySystemComponent_SetPauseAllActiveGameplayEffects");
static_assert(offsetof(ActionAbilitySystemComponent_SetPauseAllActiveGameplayEffects, Pause) == 0x000000, "Member 'ActionAbilitySystemComponent_SetPauseAllActiveGameplayEffects::Pause' has a wrong offset!");

// Function DarwinGame.ActionAbilitySystemComponent.GetOwnedTags
// 0x0020 (0x0020 - 0x0000)
struct ActionAbilitySystemComponent_GetOwnedTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAbilitySystemComponent_GetOwnedTags) == 0x000008, "Wrong alignment on ActionAbilitySystemComponent_GetOwnedTags");
static_assert(sizeof(ActionAbilitySystemComponent_GetOwnedTags) == 0x000020, "Wrong size on ActionAbilitySystemComponent_GetOwnedTags");
static_assert(offsetof(ActionAbilitySystemComponent_GetOwnedTags, ReturnValue) == 0x000000, "Member 'ActionAbilitySystemComponent_GetOwnedTags::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionAssistFindWater.OnBeginOverlapCollision
// 0x00A8 (0x00A8 - 0x0000)
struct ActionAssistFindWater_OnBeginOverlapCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAssistFindWater_OnBeginOverlapCollision) == 0x000008, "Wrong alignment on ActionAssistFindWater_OnBeginOverlapCollision");
static_assert(sizeof(ActionAssistFindWater_OnBeginOverlapCollision) == 0x0000A8, "Wrong size on ActionAssistFindWater_OnBeginOverlapCollision");
static_assert(offsetof(ActionAssistFindWater_OnBeginOverlapCollision, OverlappedComp) == 0x000000, "Member 'ActionAssistFindWater_OnBeginOverlapCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnBeginOverlapCollision, OtherActor) == 0x000008, "Member 'ActionAssistFindWater_OnBeginOverlapCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnBeginOverlapCollision, OtherComp) == 0x000010, "Member 'ActionAssistFindWater_OnBeginOverlapCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnBeginOverlapCollision, OtherBodyIndex) == 0x000018, "Member 'ActionAssistFindWater_OnBeginOverlapCollision::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnBeginOverlapCollision, bFromSweep) == 0x00001C, "Member 'ActionAssistFindWater_OnBeginOverlapCollision::bFromSweep' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnBeginOverlapCollision, SweepResult) == 0x000020, "Member 'ActionAssistFindWater_OnBeginOverlapCollision::SweepResult' has a wrong offset!");

// Function DarwinGame.ActionAssistFindWater.OnEndOverlapCollision
// 0x0020 (0x0020 - 0x0000)
struct ActionAssistFindWater_OnEndOverlapCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionAssistFindWater_OnEndOverlapCollision) == 0x000008, "Wrong alignment on ActionAssistFindWater_OnEndOverlapCollision");
static_assert(sizeof(ActionAssistFindWater_OnEndOverlapCollision) == 0x000020, "Wrong size on ActionAssistFindWater_OnEndOverlapCollision");
static_assert(offsetof(ActionAssistFindWater_OnEndOverlapCollision, OverlappedComp) == 0x000000, "Member 'ActionAssistFindWater_OnEndOverlapCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnEndOverlapCollision, OtherActor) == 0x000008, "Member 'ActionAssistFindWater_OnEndOverlapCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnEndOverlapCollision, OtherComp) == 0x000010, "Member 'ActionAssistFindWater_OnEndOverlapCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(ActionAssistFindWater_OnEndOverlapCollision, OtherBodyIndex) == 0x000018, "Member 'ActionAssistFindWater_OnEndOverlapCollision::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.GetCursorPosition
// 0x000C (0x000C - 0x0000)
struct UIMenuItemBase_GetCursorPosition final
{
public:
	bool                                          HasCursor;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_GetCursorPosition) == 0x000004, "Wrong alignment on UIMenuItemBase_GetCursorPosition");
static_assert(sizeof(UIMenuItemBase_GetCursorPosition) == 0x00000C, "Wrong size on UIMenuItemBase_GetCursorPosition");
static_assert(offsetof(UIMenuItemBase_GetCursorPosition, HasCursor) == 0x000000, "Member 'UIMenuItemBase_GetCursorPosition::HasCursor' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_GetCursorPosition, Position) == 0x000004, "Member 'UIMenuItemBase_GetCursorPosition::Position' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.GetNavigationItem
// 0x0010 (0x0010 - 0x0000)
struct UIMenuItemBase_GetNavigationItem final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIMenuItemBase*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_GetNavigationItem) == 0x000008, "Wrong alignment on UIMenuItemBase_GetNavigationItem");
static_assert(sizeof(UIMenuItemBase_GetNavigationItem) == 0x000010, "Wrong size on UIMenuItemBase_GetNavigationItem");
static_assert(offsetof(UIMenuItemBase_GetNavigationItem, Key) == 0x000000, "Member 'UIMenuItemBase_GetNavigationItem::Key' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_GetNavigationItem, ReturnValue) == 0x000008, "Member 'UIMenuItemBase_GetNavigationItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.GetNavigationItemWithSelectable
// 0x0010 (0x0010 - 0x0000)
struct UIMenuItemBase_GetNavigationItemWithSelectable final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIMenuItemBase*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_GetNavigationItemWithSelectable) == 0x000008, "Wrong alignment on UIMenuItemBase_GetNavigationItemWithSelectable");
static_assert(sizeof(UIMenuItemBase_GetNavigationItemWithSelectable) == 0x000010, "Wrong size on UIMenuItemBase_GetNavigationItemWithSelectable");
static_assert(offsetof(UIMenuItemBase_GetNavigationItemWithSelectable, Key) == 0x000000, "Member 'UIMenuItemBase_GetNavigationItemWithSelectable::Key' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_GetNavigationItemWithSelectable, ReturnValue) == 0x000008, "Member 'UIMenuItemBase_GetNavigationItemWithSelectable::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.GetNavigationItemWithSelectableKeyRepead
// 0x0010 (0x0010 - 0x0000)
struct UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIMenuItemBase*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead) == 0x000008, "Wrong alignment on UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead");
static_assert(sizeof(UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead) == 0x000010, "Wrong size on UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead");
static_assert(offsetof(UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead, Key) == 0x000000, "Member 'UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead::Key' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead, ReturnValue) == 0x000008, "Member 'UIMenuItemBase_GetNavigationItemWithSelectableKeyRepead::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.HasNavigationItem
// 0x0002 (0x0002 - 0x0000)
struct UIMenuItemBase_HasNavigationItem final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_HasNavigationItem) == 0x000001, "Wrong alignment on UIMenuItemBase_HasNavigationItem");
static_assert(sizeof(UIMenuItemBase_HasNavigationItem) == 0x000002, "Wrong size on UIMenuItemBase_HasNavigationItem");
static_assert(offsetof(UIMenuItemBase_HasNavigationItem, Key) == 0x000000, "Member 'UIMenuItemBase_HasNavigationItem::Key' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_HasNavigationItem, ReturnValue) == 0x000001, "Member 'UIMenuItemBase_HasNavigationItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.IsKeyEdge
// 0x0002 (0x0002 - 0x0000)
struct UIMenuItemBase_IsKeyEdge final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_IsKeyEdge) == 0x000001, "Wrong alignment on UIMenuItemBase_IsKeyEdge");
static_assert(sizeof(UIMenuItemBase_IsKeyEdge) == 0x000002, "Wrong size on UIMenuItemBase_IsKeyEdge");
static_assert(offsetof(UIMenuItemBase_IsKeyEdge, Key) == 0x000000, "Member 'UIMenuItemBase_IsKeyEdge::Key' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_IsKeyEdge, ReturnValue) == 0x000001, "Member 'UIMenuItemBase_IsKeyEdge::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.IsKeyRepeatSelectable
// 0x0002 (0x0002 - 0x0000)
struct UIMenuItemBase_IsKeyRepeatSelectable final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_IsKeyRepeatSelectable) == 0x000001, "Wrong alignment on UIMenuItemBase_IsKeyRepeatSelectable");
static_assert(sizeof(UIMenuItemBase_IsKeyRepeatSelectable) == 0x000002, "Wrong size on UIMenuItemBase_IsKeyRepeatSelectable");
static_assert(offsetof(UIMenuItemBase_IsKeyRepeatSelectable, Key) == 0x000000, "Member 'UIMenuItemBase_IsKeyRepeatSelectable::Key' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_IsKeyRepeatSelectable, ReturnValue) == 0x000001, "Member 'UIMenuItemBase_IsKeyRepeatSelectable::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.IsSelectable
// 0x0001 (0x0001 - 0x0000)
struct UIMenuItemBase_IsSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_IsSelectable) == 0x000001, "Wrong alignment on UIMenuItemBase_IsSelectable");
static_assert(sizeof(UIMenuItemBase_IsSelectable) == 0x000001, "Wrong size on UIMenuItemBase_IsSelectable");
static_assert(offsetof(UIMenuItemBase_IsSelectable, ReturnValue) == 0x000000, "Member 'UIMenuItemBase_IsSelectable::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct UIMenuItemBase_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_IsSelected) == 0x000001, "Wrong alignment on UIMenuItemBase_IsSelected");
static_assert(sizeof(UIMenuItemBase_IsSelected) == 0x000001, "Wrong size on UIMenuItemBase_IsSelected");
static_assert(offsetof(UIMenuItemBase_IsSelected, ReturnValue) == 0x000000, "Member 'UIMenuItemBase_IsSelected::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.RemoveNavigationItem
// 0x0001 (0x0001 - 0x0000)
struct UIMenuItemBase_RemoveNavigationItem final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_RemoveNavigationItem) == 0x000001, "Wrong alignment on UIMenuItemBase_RemoveNavigationItem");
static_assert(sizeof(UIMenuItemBase_RemoveNavigationItem) == 0x000001, "Wrong size on UIMenuItemBase_RemoveNavigationItem");
static_assert(offsetof(UIMenuItemBase_RemoveNavigationItem, Key) == 0x000000, "Member 'UIMenuItemBase_RemoveNavigationItem::Key' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.SetNavigationItem
// 0x0018 (0x0018 - 0x0000)
struct UIMenuItemBase_SetNavigationItem final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIMenuItemBase*                        ToItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeyRepeatSelectable;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeyEdge;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMenuItemBase_SetNavigationItem) == 0x000008, "Wrong alignment on UIMenuItemBase_SetNavigationItem");
static_assert(sizeof(UIMenuItemBase_SetNavigationItem) == 0x000018, "Wrong size on UIMenuItemBase_SetNavigationItem");
static_assert(offsetof(UIMenuItemBase_SetNavigationItem, Key) == 0x000000, "Member 'UIMenuItemBase_SetNavigationItem::Key' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_SetNavigationItem, ToItem) == 0x000008, "Member 'UIMenuItemBase_SetNavigationItem::ToItem' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_SetNavigationItem, KeyRepeatSelectable) == 0x000010, "Member 'UIMenuItemBase_SetNavigationItem::KeyRepeatSelectable' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_SetNavigationItem, KeyEdge) == 0x000011, "Member 'UIMenuItemBase_SetNavigationItem::KeyEdge' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.SetNavigationItemLR
// 0x0020 (0x0020 - 0x0000)
struct UIMenuItemBase_SetNavigationItemLR final
{
public:
	struct FST_UIMenuNavigationItem               Left;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FST_UIMenuNavigationItem               Right;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_SetNavigationItemLR) == 0x000008, "Wrong alignment on UIMenuItemBase_SetNavigationItemLR");
static_assert(sizeof(UIMenuItemBase_SetNavigationItemLR) == 0x000020, "Wrong size on UIMenuItemBase_SetNavigationItemLR");
static_assert(offsetof(UIMenuItemBase_SetNavigationItemLR, Left) == 0x000000, "Member 'UIMenuItemBase_SetNavigationItemLR::Left' has a wrong offset!");
static_assert(offsetof(UIMenuItemBase_SetNavigationItemLR, Right) == 0x000010, "Member 'UIMenuItemBase_SetNavigationItemLR::Right' has a wrong offset!");

// Function DarwinGame.UIMenuItemBase.SetSelectable
// 0x0001 (0x0001 - 0x0000)
struct UIMenuItemBase_SetSelectable final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuItemBase_SetSelectable) == 0x000001, "Wrong alignment on UIMenuItemBase_SetSelectable");
static_assert(sizeof(UIMenuItemBase_SetSelectable) == 0x000001, "Wrong size on UIMenuItemBase_SetSelectable");
static_assert(offsetof(UIMenuItemBase_SetSelectable, NewParam) == 0x000000, "Member 'UIMenuItemBase_SetSelectable::NewParam' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.GetArrow
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuItemBase_GetArrow final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_GetArrow) == 0x000008, "Wrong alignment on UIScrollMenuItemBase_GetArrow");
static_assert(sizeof(UIScrollMenuItemBase_GetArrow) == 0x000008, "Wrong size on UIScrollMenuItemBase_GetArrow");
static_assert(offsetof(UIScrollMenuItemBase_GetArrow, ReturnValue) == 0x000000, "Member 'UIScrollMenuItemBase_GetArrow::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuItemBase_GetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_GetPosition) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_GetPosition");
static_assert(sizeof(UIScrollMenuItemBase_GetPosition) == 0x000008, "Wrong size on UIScrollMenuItemBase_GetPosition");
static_assert(offsetof(UIScrollMenuItemBase_GetPosition, ReturnValue) == 0x000000, "Member 'UIScrollMenuItemBase_GetPosition::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.GetScale
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuItemBase_GetScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_GetScale) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_GetScale");
static_assert(sizeof(UIScrollMenuItemBase_GetScale) == 0x000008, "Wrong size on UIScrollMenuItemBase_GetScale");
static_assert(offsetof(UIScrollMenuItemBase_GetScale, ReturnValue) == 0x000000, "Member 'UIScrollMenuItemBase_GetScale::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.Move
// 0x0014 (0x0014 - 0x0000)
struct UIScrollMenuItemBase_Move final
{
public:
	struct FVector2D                              InTargetPosition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InTargetScale;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPosIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_Move) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_Move");
static_assert(sizeof(UIScrollMenuItemBase_Move) == 0x000014, "Wrong size on UIScrollMenuItemBase_Move");
static_assert(offsetof(UIScrollMenuItemBase_Move, InTargetPosition) == 0x000000, "Member 'UIScrollMenuItemBase_Move::InTargetPosition' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_Move, InTargetScale) == 0x000008, "Member 'UIScrollMenuItemBase_Move::InTargetScale' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_Move, InPosIndex) == 0x000010, "Member 'UIScrollMenuItemBase_Move::InPosIndex' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.SetFocusAnimation
// 0x0018 (0x0018 - 0x0000)
struct UIScrollMenuItemBase_SetFocusAnimation final
{
public:
	class UWidgetAnimation*                       Focus_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       OutFocus_0;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Loop;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_SetFocusAnimation) == 0x000008, "Wrong alignment on UIScrollMenuItemBase_SetFocusAnimation");
static_assert(sizeof(UIScrollMenuItemBase_SetFocusAnimation) == 0x000018, "Wrong size on UIScrollMenuItemBase_SetFocusAnimation");
static_assert(offsetof(UIScrollMenuItemBase_SetFocusAnimation, Focus_0) == 0x000000, "Member 'UIScrollMenuItemBase_SetFocusAnimation::Focus_0' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_SetFocusAnimation, OutFocus_0) == 0x000008, "Member 'UIScrollMenuItemBase_SetFocusAnimation::OutFocus_0' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_SetFocusAnimation, Loop) == 0x000010, "Member 'UIScrollMenuItemBase_SetFocusAnimation::Loop' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.SetFocusAnimationByName
// 0x0018 (0x0018 - 0x0000)
struct UIScrollMenuItemBase_SetFocusAnimationByName final
{
public:
	class FName                                   FocusName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutFocusName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_SetFocusAnimationByName) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_SetFocusAnimationByName");
static_assert(sizeof(UIScrollMenuItemBase_SetFocusAnimationByName) == 0x000018, "Wrong size on UIScrollMenuItemBase_SetFocusAnimationByName");
static_assert(offsetof(UIScrollMenuItemBase_SetFocusAnimationByName, FocusName) == 0x000000, "Member 'UIScrollMenuItemBase_SetFocusAnimationByName::FocusName' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_SetFocusAnimationByName, OutFocusName) == 0x000008, "Member 'UIScrollMenuItemBase_SetFocusAnimationByName::OutFocusName' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_SetFocusAnimationByName, LoopName) == 0x000010, "Member 'UIScrollMenuItemBase_SetFocusAnimationByName::LoopName' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuItemBase_SetPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_SetPosition) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_SetPosition");
static_assert(sizeof(UIScrollMenuItemBase_SetPosition) == 0x000008, "Wrong size on UIScrollMenuItemBase_SetPosition");
static_assert(offsetof(UIScrollMenuItemBase_SetPosition, InPosition) == 0x000000, "Member 'UIScrollMenuItemBase_SetPosition::InPosition' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.SetScale
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuItemBase_SetScale final
{
public:
	struct FVector2D                              InScale;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_SetScale) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_SetScale");
static_assert(sizeof(UIScrollMenuItemBase_SetScale) == 0x000008, "Wrong size on UIScrollMenuItemBase_SetScale");
static_assert(offsetof(UIScrollMenuItemBase_SetScale, InScale) == 0x000000, "Member 'UIScrollMenuItemBase_SetScale::InScale' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.SetScrollItem
// 0x0018 (0x0018 - 0x0000)
struct UIScrollMenuItemBase_SetScrollItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InScale;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPosIndex;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_SetScrollItem) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_SetScrollItem");
static_assert(sizeof(UIScrollMenuItemBase_SetScrollItem) == 0x000018, "Wrong size on UIScrollMenuItemBase_SetScrollItem");
static_assert(offsetof(UIScrollMenuItemBase_SetScrollItem, Index_0) == 0x000000, "Member 'UIScrollMenuItemBase_SetScrollItem::Index_0' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_SetScrollItem, InPosition) == 0x000004, "Member 'UIScrollMenuItemBase_SetScrollItem::InPosition' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_SetScrollItem, InScale) == 0x00000C, "Member 'UIScrollMenuItemBase_SetScrollItem::InScale' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_SetScrollItem, InPosIndex) == 0x000014, "Member 'UIScrollMenuItemBase_SetScrollItem::InPosIndex' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.UpdatePosition
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuItemBase_UpdatePosition final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScrollSpeed;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_UpdatePosition) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_UpdatePosition");
static_assert(sizeof(UIScrollMenuItemBase_UpdatePosition) == 0x000008, "Wrong size on UIScrollMenuItemBase_UpdatePosition");
static_assert(offsetof(UIScrollMenuItemBase_UpdatePosition, InDeltaTime) == 0x000000, "Member 'UIScrollMenuItemBase_UpdatePosition::InDeltaTime' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_UpdatePosition, InScrollSpeed) == 0x000004, "Member 'UIScrollMenuItemBase_UpdatePosition::InScrollSpeed' has a wrong offset!");

// Function DarwinGame.UIScrollMenuItemBase.UpdateScale
// 0x0008 (0x0008 - 0x0000)
struct UIScrollMenuItemBase_UpdateScale final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScalingSpeed;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollMenuItemBase_UpdateScale) == 0x000004, "Wrong alignment on UIScrollMenuItemBase_UpdateScale");
static_assert(sizeof(UIScrollMenuItemBase_UpdateScale) == 0x000008, "Wrong size on UIScrollMenuItemBase_UpdateScale");
static_assert(offsetof(UIScrollMenuItemBase_UpdateScale, InDeltaTime) == 0x000000, "Member 'UIScrollMenuItemBase_UpdateScale::InDeltaTime' has a wrong offset!");
static_assert(offsetof(UIScrollMenuItemBase_UpdateScale, InScalingSpeed) == 0x000004, "Member 'UIScrollMenuItemBase_UpdateScale::InScalingSpeed' has a wrong offset!");

// Function DarwinGame.ActionComponent.CanParkour
// 0x0003 (0x0003 - 0x0000)
struct ActionComponent_CanParkour final
{
public:
	ETraceTypeQuery                               TraceType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionComponent_CanParkour) == 0x000001, "Wrong alignment on ActionComponent_CanParkour");
static_assert(sizeof(ActionComponent_CanParkour) == 0x000003, "Wrong size on ActionComponent_CanParkour");
static_assert(offsetof(ActionComponent_CanParkour, TraceType) == 0x000000, "Member 'ActionComponent_CanParkour::TraceType' has a wrong offset!");
static_assert(offsetof(ActionComponent_CanParkour, DrawDebugType) == 0x000001, "Member 'ActionComponent_CanParkour::DrawDebugType' has a wrong offset!");
static_assert(offsetof(ActionComponent_CanParkour, ReturnValue) == 0x000002, "Member 'ActionComponent_CanParkour::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.BlowToAttackerDirection
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_BlowToAttackerDirection final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_BlowToAttackerDirection) == 0x000004, "Wrong alignment on ActionDataTable_BlowToAttackerDirection");
static_assert(sizeof(ActionDataTable_BlowToAttackerDirection) == 0x00000C, "Wrong size on ActionDataTable_BlowToAttackerDirection");
static_assert(offsetof(ActionDataTable_BlowToAttackerDirection, DetailID) == 0x000000, "Member 'ActionDataTable_BlowToAttackerDirection::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_BlowToAttackerDirection, ReturnValue) == 0x000008, "Member 'ActionDataTable_BlowToAttackerDirection::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.ConvertActionOverviewID
// 0x001C (0x001C - 0x0000)
struct ActionDataTable_ConvertActionOverviewID final
{
public:
	class FName                                   ActionOverviewID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionLevel;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterLevel;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   outOverviewID;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_ConvertActionOverviewID) == 0x000004, "Wrong alignment on ActionDataTable_ConvertActionOverviewID");
static_assert(sizeof(ActionDataTable_ConvertActionOverviewID) == 0x00001C, "Wrong size on ActionDataTable_ConvertActionOverviewID");
static_assert(offsetof(ActionDataTable_ConvertActionOverviewID, ActionOverviewID) == 0x000000, "Member 'ActionDataTable_ConvertActionOverviewID::ActionOverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_ConvertActionOverviewID, ActionLevel) == 0x000008, "Member 'ActionDataTable_ConvertActionOverviewID::ActionLevel' has a wrong offset!");
static_assert(offsetof(ActionDataTable_ConvertActionOverviewID, CharacterLevel) == 0x00000C, "Member 'ActionDataTable_ConvertActionOverviewID::CharacterLevel' has a wrong offset!");
static_assert(offsetof(ActionDataTable_ConvertActionOverviewID, outOverviewID) == 0x000010, "Member 'ActionDataTable_ConvertActionOverviewID::outOverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_ConvertActionOverviewID, ReturnValue) == 0x000018, "Member 'ActionDataTable_ConvertActionOverviewID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.DecideDeriVateID
// 0x0010 (0x0010 - 0x0000)
struct ActionDataTable_DecideDeriVateID final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_DecideDeriVateID) == 0x000004, "Wrong alignment on ActionDataTable_DecideDeriVateID");
static_assert(sizeof(ActionDataTable_DecideDeriVateID) == 0x000010, "Wrong size on ActionDataTable_DecideDeriVateID");
static_assert(offsetof(ActionDataTable_DecideDeriVateID, ActionID) == 0x000000, "Member 'ActionDataTable_DecideDeriVateID::ActionID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_DecideDeriVateID, ReturnValue) == 0x000008, "Member 'ActionDataTable_DecideDeriVateID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetActionEffections
// 0x0018 (0x0018 - 0x0000)
struct ActionDataTable_GetActionEffections final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectEffectionEnum>                  Effections;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetActionEffections) == 0x000008, "Wrong alignment on ActionDataTable_GetActionEffections");
static_assert(sizeof(ActionDataTable_GetActionEffections) == 0x000018, "Wrong size on ActionDataTable_GetActionEffections");
static_assert(offsetof(ActionDataTable_GetActionEffections, DetailID) == 0x000000, "Member 'ActionDataTable_GetActionEffections::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetActionEffections, Effections) == 0x000008, "Member 'ActionDataTable_GetActionEffections::Effections' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetActionTargetType
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetActionTargetType final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionTargetType                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_GetActionTargetType) == 0x000004, "Wrong alignment on ActionDataTable_GetActionTargetType");
static_assert(sizeof(ActionDataTable_GetActionTargetType) == 0x00000C, "Wrong size on ActionDataTable_GetActionTargetType");
static_assert(offsetof(ActionDataTable_GetActionTargetType, DetailID) == 0x000000, "Member 'ActionDataTable_GetActionTargetType::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetActionTargetType, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetActionTargetType::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetActPerformance
// 0x004C (0x004C - 0x0000)
struct ActionDataTable_GetActPerformance final
{
public:
	class FName                                   OverviewID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_ActionPerformance                  Performance;                                       // 0x0008(0x0044)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetActPerformance) == 0x000004, "Wrong alignment on ActionDataTable_GetActPerformance");
static_assert(sizeof(ActionDataTable_GetActPerformance) == 0x00004C, "Wrong size on ActionDataTable_GetActPerformance");
static_assert(offsetof(ActionDataTable_GetActPerformance, OverviewID) == 0x000000, "Member 'ActionDataTable_GetActPerformance::OverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetActPerformance, Performance) == 0x000008, "Member 'ActionDataTable_GetActPerformance::Performance' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetAttributes
// 0x0018 (0x0018 - 0x0000)
struct ActionDataTable_GetAttributes final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_Attribute>                  Attributes;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetAttributes) == 0x000008, "Wrong alignment on ActionDataTable_GetAttributes");
static_assert(sizeof(ActionDataTable_GetAttributes) == 0x000018, "Wrong size on ActionDataTable_GetAttributes");
static_assert(offsetof(ActionDataTable_GetAttributes, DetailID) == 0x000000, "Member 'ActionDataTable_GetAttributes::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetAttributes, Attributes) == 0x000008, "Member 'ActionDataTable_GetAttributes::Attributes' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetBallisticPerformance
// 0x0058 (0x0058 - 0x0000)
struct ActionDataTable_GetBallisticPerformance final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_BallisticPerformance               Performance;                                       // 0x0008(0x0050)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetBallisticPerformance) == 0x000004, "Wrong alignment on ActionDataTable_GetBallisticPerformance");
static_assert(sizeof(ActionDataTable_GetBallisticPerformance) == 0x000058, "Wrong size on ActionDataTable_GetBallisticPerformance");
static_assert(offsetof(ActionDataTable_GetBallisticPerformance, DetailID) == 0x000000, "Member 'ActionDataTable_GetBallisticPerformance::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetBallisticPerformance, Performance) == 0x000008, "Member 'ActionDataTable_GetBallisticPerformance::Performance' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetCastTime
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetCastTime final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetCastTime) == 0x000004, "Wrong alignment on ActionDataTable_GetCastTime");
static_assert(sizeof(ActionDataTable_GetCastTime) == 0x00000C, "Wrong size on ActionDataTable_GetCastTime");
static_assert(offsetof(ActionDataTable_GetCastTime, DetailID) == 0x000000, "Member 'ActionDataTable_GetCastTime::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetCastTime, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetCastTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetChildActionPerformance
// 0x0020 (0x0020 - 0x0000)
struct ActionDataTable_GetChildActionPerformance final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_ChildActionPerformance             Performance;                                       // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetChildActionPerformance) == 0x000004, "Wrong alignment on ActionDataTable_GetChildActionPerformance");
static_assert(sizeof(ActionDataTable_GetChildActionPerformance) == 0x000020, "Wrong size on ActionDataTable_GetChildActionPerformance");
static_assert(offsetof(ActionDataTable_GetChildActionPerformance, DetailID) == 0x000000, "Member 'ActionDataTable_GetChildActionPerformance::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetChildActionPerformance, Performance) == 0x000008, "Member 'ActionDataTable_GetChildActionPerformance::Performance' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetClassType
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetClassType final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionClassType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_GetClassType) == 0x000004, "Wrong alignment on ActionDataTable_GetClassType");
static_assert(sizeof(ActionDataTable_GetClassType) == 0x00000C, "Wrong size on ActionDataTable_GetClassType");
static_assert(offsetof(ActionDataTable_GetClassType, DetailID) == 0x000000, "Member 'ActionDataTable_GetClassType::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetClassType, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetClassType::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetClassTypeFromOverViewID
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetClassTypeFromOverViewID final
{
public:
	class FName                                   OverviewID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionClassType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_GetClassTypeFromOverViewID) == 0x000004, "Wrong alignment on ActionDataTable_GetClassTypeFromOverViewID");
static_assert(sizeof(ActionDataTable_GetClassTypeFromOverViewID) == 0x00000C, "Wrong size on ActionDataTable_GetClassTypeFromOverViewID");
static_assert(offsetof(ActionDataTable_GetClassTypeFromOverViewID, OverviewID) == 0x000000, "Member 'ActionDataTable_GetClassTypeFromOverViewID::OverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetClassTypeFromOverViewID, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetClassTypeFromOverViewID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetCorrectValue
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetCorrectValue final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetCorrectValue) == 0x000004, "Wrong alignment on ActionDataTable_GetCorrectValue");
static_assert(sizeof(ActionDataTable_GetCorrectValue) == 0x00000C, "Wrong size on ActionDataTable_GetCorrectValue");
static_assert(offsetof(ActionDataTable_GetCorrectValue, DetailID) == 0x000000, "Member 'ActionDataTable_GetCorrectValue::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetCorrectValue, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetCorrectValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetDamageData
// 0x0038 (0x0038 - 0x0000)
struct ActionDataTable_GetDamageData final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnemy;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AttackData                         AttackData;                                        // 0x0010(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetDamageData) == 0x000008, "Wrong alignment on ActionDataTable_GetDamageData");
static_assert(sizeof(ActionDataTable_GetDamageData) == 0x000038, "Wrong size on ActionDataTable_GetDamageData");
static_assert(offsetof(ActionDataTable_GetDamageData, DetailID) == 0x000000, "Member 'ActionDataTable_GetDamageData::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetDamageData, IsEnemy) == 0x000008, "Member 'ActionDataTable_GetDamageData::IsEnemy' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetDamageData, AttackData) == 0x000010, "Member 'ActionDataTable_GetDamageData::AttackData' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetEffectType
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetEffectType final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionEffectType                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_GetEffectType) == 0x000004, "Wrong alignment on ActionDataTable_GetEffectType");
static_assert(sizeof(ActionDataTable_GetEffectType) == 0x00000C, "Wrong size on ActionDataTable_GetEffectType");
static_assert(offsetof(ActionDataTable_GetEffectType, DetailID) == 0x000000, "Member 'ActionDataTable_GetEffectType::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetEffectType, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetEffectType::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetHitStopTime
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetHitStopTime final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetHitStopTime) == 0x000004, "Wrong alignment on ActionDataTable_GetHitStopTime");
static_assert(sizeof(ActionDataTable_GetHitStopTime) == 0x00000C, "Wrong size on ActionDataTable_GetHitStopTime");
static_assert(offsetof(ActionDataTable_GetHitStopTime, DetailID) == 0x000000, "Member 'ActionDataTable_GetHitStopTime::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetHitStopTime, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetHitStopTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetLaserPerformance
// 0x002C (0x002C - 0x0000)
struct ActionDataTable_GetLaserPerformance final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_LaserPerformance                   Performance;                                       // 0x0008(0x0024)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetLaserPerformance) == 0x000004, "Wrong alignment on ActionDataTable_GetLaserPerformance");
static_assert(sizeof(ActionDataTable_GetLaserPerformance) == 0x00002C, "Wrong size on ActionDataTable_GetLaserPerformance");
static_assert(offsetof(ActionDataTable_GetLaserPerformance, DetailID) == 0x000000, "Member 'ActionDataTable_GetLaserPerformance::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetLaserPerformance, Performance) == 0x000008, "Member 'ActionDataTable_GetLaserPerformance::Performance' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetOverHeadFallPerformance
// 0x0014 (0x0014 - 0x0000)
struct ActionDataTable_GetOverHeadFallPerformance final
{
public:
	class FName                                   OverviewID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_OverHeadFallPerformanceDefine      Performance;                                       // 0x0008(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetOverHeadFallPerformance) == 0x000004, "Wrong alignment on ActionDataTable_GetOverHeadFallPerformance");
static_assert(sizeof(ActionDataTable_GetOverHeadFallPerformance) == 0x000014, "Wrong size on ActionDataTable_GetOverHeadFallPerformance");
static_assert(offsetof(ActionDataTable_GetOverHeadFallPerformance, OverviewID) == 0x000000, "Member 'ActionDataTable_GetOverHeadFallPerformance::OverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetOverHeadFallPerformance, Performance) == 0x000008, "Member 'ActionDataTable_GetOverHeadFallPerformance::Performance' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetOverviewID
// 0x0010 (0x0010 - 0x0000)
struct ActionDataTable_GetOverviewID final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetOverviewID) == 0x000004, "Wrong alignment on ActionDataTable_GetOverviewID");
static_assert(sizeof(ActionDataTable_GetOverviewID) == 0x000010, "Wrong size on ActionDataTable_GetOverviewID");
static_assert(offsetof(ActionDataTable_GetOverviewID, DetailID) == 0x000000, "Member 'ActionDataTable_GetOverviewID::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetOverviewID, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetOverviewID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetReactionType
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetReactionType final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageReactionType                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_GetReactionType) == 0x000004, "Wrong alignment on ActionDataTable_GetReactionType");
static_assert(sizeof(ActionDataTable_GetReactionType) == 0x00000C, "Wrong size on ActionDataTable_GetReactionType");
static_assert(offsetof(ActionDataTable_GetReactionType, DetailID) == 0x000000, "Member 'ActionDataTable_GetReactionType::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetReactionType, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetReactionType::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetRequiredMP
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_GetRequiredMP final
{
public:
	class FName                                   ActionOverviewID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetRequiredMP) == 0x000004, "Wrong alignment on ActionDataTable_GetRequiredMP");
static_assert(sizeof(ActionDataTable_GetRequiredMP) == 0x00000C, "Wrong size on ActionDataTable_GetRequiredMP");
static_assert(offsetof(ActionDataTable_GetRequiredMP, ActionOverviewID) == 0x000000, "Member 'ActionDataTable_GetRequiredMP::ActionOverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetRequiredMP, ReturnValue) == 0x000008, "Member 'ActionDataTable_GetRequiredMP::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetResistanceID
// 0x0014 (0x0014 - 0x0000)
struct ActionDataTable_GetResistanceID final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResistJudgeType                              Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnemy;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetResistanceID) == 0x000004, "Wrong alignment on ActionDataTable_GetResistanceID");
static_assert(sizeof(ActionDataTable_GetResistanceID) == 0x000014, "Wrong size on ActionDataTable_GetResistanceID");
static_assert(offsetof(ActionDataTable_GetResistanceID, DetailID) == 0x000000, "Member 'ActionDataTable_GetResistanceID::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetResistanceID, Type) == 0x000008, "Member 'ActionDataTable_GetResistanceID::Type' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetResistanceID, bIsEnemy) == 0x000009, "Member 'ActionDataTable_GetResistanceID::bIsEnemy' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetResistanceID, ReturnValue) == 0x00000C, "Member 'ActionDataTable_GetResistanceID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetResistanceTypes
// 0x0018 (0x0018 - 0x0000)
struct ActionDataTable_GetResistanceTypes final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EResistanceType>                       Types;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetResistanceTypes) == 0x000008, "Wrong alignment on ActionDataTable_GetResistanceTypes");
static_assert(sizeof(ActionDataTable_GetResistanceTypes) == 0x000018, "Wrong size on ActionDataTable_GetResistanceTypes");
static_assert(offsetof(ActionDataTable_GetResistanceTypes, DetailID) == 0x000000, "Member 'ActionDataTable_GetResistanceTypes::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetResistanceTypes, Types) == 0x000008, "Member 'ActionDataTable_GetResistanceTypes::Types' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetShotgunActionPerformance
// 0x0018 (0x0018 - 0x0000)
struct ActionDataTable_GetShotgunActionPerformance final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_ShotgunActionPerformance>   Performance;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetShotgunActionPerformance) == 0x000008, "Wrong alignment on ActionDataTable_GetShotgunActionPerformance");
static_assert(sizeof(ActionDataTable_GetShotgunActionPerformance) == 0x000018, "Wrong size on ActionDataTable_GetShotgunActionPerformance");
static_assert(offsetof(ActionDataTable_GetShotgunActionPerformance, DetailID) == 0x000000, "Member 'ActionDataTable_GetShotgunActionPerformance::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetShotgunActionPerformance, Performance) == 0x000008, "Member 'ActionDataTable_GetShotgunActionPerformance::Performance' has a wrong offset!");

// Function DarwinGame.ActionDataTable.GetTargetArea
// 0x0024 (0x0024 - 0x0000)
struct ActionDataTable_GetTargetArea final
{
public:
	class FName                                   OverviewID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TargetArea                         Performance;                                       // 0x0008(0x001C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDataTable_GetTargetArea) == 0x000004, "Wrong alignment on ActionDataTable_GetTargetArea");
static_assert(sizeof(ActionDataTable_GetTargetArea) == 0x000024, "Wrong size on ActionDataTable_GetTargetArea");
static_assert(offsetof(ActionDataTable_GetTargetArea, OverviewID) == 0x000000, "Member 'ActionDataTable_GetTargetArea::OverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_GetTargetArea, Performance) == 0x000008, "Member 'ActionDataTable_GetTargetArea::Performance' has a wrong offset!");

// Function DarwinGame.ActionDataTable.IsDerivateOverviewID
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_IsDerivateOverviewID final
{
public:
	class FName                                   OverviewID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_IsDerivateOverviewID) == 0x000004, "Wrong alignment on ActionDataTable_IsDerivateOverviewID");
static_assert(sizeof(ActionDataTable_IsDerivateOverviewID) == 0x00000C, "Wrong size on ActionDataTable_IsDerivateOverviewID");
static_assert(offsetof(ActionDataTable_IsDerivateOverviewID, OverviewID) == 0x000000, "Member 'ActionDataTable_IsDerivateOverviewID::OverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_IsDerivateOverviewID, ReturnValue) == 0x000008, "Member 'ActionDataTable_IsDerivateOverviewID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.IsEnableHitStop
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_IsEnableHitStop final
{
public:
	class FName                                   DetailID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_IsEnableHitStop) == 0x000004, "Wrong alignment on ActionDataTable_IsEnableHitStop");
static_assert(sizeof(ActionDataTable_IsEnableHitStop) == 0x00000C, "Wrong size on ActionDataTable_IsEnableHitStop");
static_assert(offsetof(ActionDataTable_IsEnableHitStop, DetailID) == 0x000000, "Member 'ActionDataTable_IsEnableHitStop::DetailID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_IsEnableHitStop, ReturnValue) == 0x000008, "Member 'ActionDataTable_IsEnableHitStop::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionDataTable.UseCurve
// 0x000C (0x000C - 0x0000)
struct ActionDataTable_UseCurve final
{
public:
	class FName                                   OverviewID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDataTable_UseCurve) == 0x000004, "Wrong alignment on ActionDataTable_UseCurve");
static_assert(sizeof(ActionDataTable_UseCurve) == 0x00000C, "Wrong size on ActionDataTable_UseCurve");
static_assert(offsetof(ActionDataTable_UseCurve, OverviewID) == 0x000000, "Member 'ActionDataTable_UseCurve::OverviewID' has a wrong offset!");
static_assert(offsetof(ActionDataTable_UseCurve, ReturnValue) == 0x000008, "Member 'ActionDataTable_UseCurve::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataShop.AddBoughtItem
// 0x0008 (0x0008 - 0x0000)
struct GameDataShop_AddBoughtItem final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataShop_AddBoughtItem) == 0x000004, "Wrong alignment on GameDataShop_AddBoughtItem");
static_assert(sizeof(GameDataShop_AddBoughtItem) == 0x000008, "Wrong size on GameDataShop_AddBoughtItem");
static_assert(offsetof(GameDataShop_AddBoughtItem, ID) == 0x000000, "Member 'GameDataShop_AddBoughtItem::ID' has a wrong offset!");

// Function DarwinGame.GameDataShop.AddId
// 0x000C (0x000C - 0x0000)
struct GameDataShop_AddId final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataShop_AddId) == 0x000004, "Wrong alignment on GameDataShop_AddId");
static_assert(sizeof(GameDataShop_AddId) == 0x00000C, "Wrong size on GameDataShop_AddId");
static_assert(offsetof(GameDataShop_AddId, ID) == 0x000000, "Member 'GameDataShop_AddId::ID' has a wrong offset!");
static_assert(offsetof(GameDataShop_AddId, IsNew) == 0x000008, "Member 'GameDataShop_AddId::IsNew' has a wrong offset!");

// Function DarwinGame.GameDataShop.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataShop_Clone final
{
public:
	class UGameDataShop*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataShop_Clone) == 0x000008, "Wrong alignment on GameDataShop_Clone");
static_assert(sizeof(GameDataShop_Clone) == 0x000008, "Wrong size on GameDataShop_Clone");
static_assert(offsetof(GameDataShop_Clone, ReturnValue) == 0x000000, "Member 'GameDataShop_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataShop.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataShop_Overwrite final
{
public:
	class UGameDataShop*                          game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataShop_Overwrite) == 0x000008, "Wrong alignment on GameDataShop_Overwrite");
static_assert(sizeof(GameDataShop_Overwrite) == 0x000008, "Wrong size on GameDataShop_Overwrite");
static_assert(offsetof(GameDataShop_Overwrite, game_data) == 0x000000, "Member 'GameDataShop_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataShop.SetIsNewItem
// 0x000C (0x000C - 0x0000)
struct GameDataShop_SetIsNewItem final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataShop_SetIsNewItem) == 0x000004, "Wrong alignment on GameDataShop_SetIsNewItem");
static_assert(sizeof(GameDataShop_SetIsNewItem) == 0x00000C, "Wrong size on GameDataShop_SetIsNewItem");
static_assert(offsetof(GameDataShop_SetIsNewItem, ID) == 0x000000, "Member 'GameDataShop_SetIsNewItem::ID' has a wrong offset!");
static_assert(offsetof(GameDataShop_SetIsNewItem, IsNew) == 0x000008, "Member 'GameDataShop_SetIsNewItem::IsNew' has a wrong offset!");

// Function DarwinGame.GameDataShop.IsBoughtItem
// 0x000C (0x000C - 0x0000)
struct GameDataShop_IsBoughtItem final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataShop_IsBoughtItem) == 0x000004, "Wrong alignment on GameDataShop_IsBoughtItem");
static_assert(sizeof(GameDataShop_IsBoughtItem) == 0x00000C, "Wrong size on GameDataShop_IsBoughtItem");
static_assert(offsetof(GameDataShop_IsBoughtItem, ID) == 0x000000, "Member 'GameDataShop_IsBoughtItem::ID' has a wrong offset!");
static_assert(offsetof(GameDataShop_IsBoughtItem, ReturnValue) == 0x000008, "Member 'GameDataShop_IsBoughtItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataShop.IsContainId
// 0x000C (0x000C - 0x0000)
struct GameDataShop_IsContainId final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataShop_IsContainId) == 0x000004, "Wrong alignment on GameDataShop_IsContainId");
static_assert(sizeof(GameDataShop_IsContainId) == 0x00000C, "Wrong size on GameDataShop_IsContainId");
static_assert(offsetof(GameDataShop_IsContainId, ID) == 0x000000, "Member 'GameDataShop_IsContainId::ID' has a wrong offset!");
static_assert(offsetof(GameDataShop_IsContainId, ReturnValue) == 0x000008, "Member 'GameDataShop_IsContainId::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataShop.IsNewItem
// 0x000C (0x000C - 0x0000)
struct GameDataShop_IsNewItem final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataShop_IsNewItem) == 0x000004, "Wrong alignment on GameDataShop_IsNewItem");
static_assert(sizeof(GameDataShop_IsNewItem) == 0x00000C, "Wrong size on GameDataShop_IsNewItem");
static_assert(offsetof(GameDataShop_IsNewItem, ID) == 0x000000, "Member 'GameDataShop_IsNewItem::ID' has a wrong offset!");
static_assert(offsetof(GameDataShop_IsNewItem, ReturnValue) == 0x000008, "Member 'GameDataShop_IsNewItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataShop.IsNewShopData
// 0x0008 (0x0008 - 0x0000)
struct GameDataShop_IsNewShopData final
{
public:
	int32                                         ShopID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataShop_IsNewShopData) == 0x000004, "Wrong alignment on GameDataShop_IsNewShopData");
static_assert(sizeof(GameDataShop_IsNewShopData) == 0x000008, "Wrong size on GameDataShop_IsNewShopData");
static_assert(offsetof(GameDataShop_IsNewShopData, ShopID) == 0x000000, "Member 'GameDataShop_IsNewShopData::ShopID' has a wrong offset!");
static_assert(offsetof(GameDataShop_IsNewShopData, ReturnValue) == 0x000004, "Member 'GameDataShop_IsNewShopData::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.AddPlayerActionCount
// 0x0001 (0x0001 - 0x0000)
struct QuestFunctionLibrary_AddPlayerActionCount final
{
public:
	EQuestClearPlayerActionType                   Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestFunctionLibrary_AddPlayerActionCount) == 0x000001, "Wrong alignment on QuestFunctionLibrary_AddPlayerActionCount");
static_assert(sizeof(QuestFunctionLibrary_AddPlayerActionCount) == 0x000001, "Wrong size on QuestFunctionLibrary_AddPlayerActionCount");
static_assert(offsetof(QuestFunctionLibrary_AddPlayerActionCount, Type) == 0x000000, "Member 'QuestFunctionLibrary_AddPlayerActionCount::Type' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.AddPlayerActionNum
// 0x0008 (0x0008 - 0x0000)
struct QuestFunctionLibrary_AddPlayerActionNum final
{
public:
	EQuestClearPlayerActionType                   Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestFunctionLibrary_AddPlayerActionNum) == 0x000004, "Wrong alignment on QuestFunctionLibrary_AddPlayerActionNum");
static_assert(sizeof(QuestFunctionLibrary_AddPlayerActionNum) == 0x000008, "Wrong size on QuestFunctionLibrary_AddPlayerActionNum");
static_assert(offsetof(QuestFunctionLibrary_AddPlayerActionNum, Type) == 0x000000, "Member 'QuestFunctionLibrary_AddPlayerActionNum::Type' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_AddPlayerActionNum, Num) == 0x000004, "Member 'QuestFunctionLibrary_AddPlayerActionNum::Num' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.ArrivalDestination
// 0x0008 (0x0008 - 0x0000)
struct QuestFunctionLibrary_ArrivalDestination final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestFunctionLibrary_ArrivalDestination) == 0x000004, "Wrong alignment on QuestFunctionLibrary_ArrivalDestination");
static_assert(sizeof(QuestFunctionLibrary_ArrivalDestination) == 0x000008, "Wrong size on QuestFunctionLibrary_ArrivalDestination");
static_assert(offsetof(QuestFunctionLibrary_ArrivalDestination, QuestID) == 0x000000, "Member 'QuestFunctionLibrary_ArrivalDestination::QuestID' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CalcQuestCountRandom
// 0x0008 (0x0008 - 0x0000)
struct QuestFunctionLibrary_CalcQuestCountRandom final
{
public:
	int32                                         Param;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestFunctionLibrary_CalcQuestCountRandom) == 0x000004, "Wrong alignment on QuestFunctionLibrary_CalcQuestCountRandom");
static_assert(sizeof(QuestFunctionLibrary_CalcQuestCountRandom) == 0x000008, "Wrong size on QuestFunctionLibrary_CalcQuestCountRandom");
static_assert(offsetof(QuestFunctionLibrary_CalcQuestCountRandom, Param) == 0x000000, "Member 'QuestFunctionLibrary_CalcQuestCountRandom::Param' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CalcQuestCountRandom, ReturnValue) == 0x000004, "Member 'QuestFunctionLibrary_CalcQuestCountRandom::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckArtifactDetectNum
// 0x0168 (0x0168 - 0x0000)
struct QuestFunctionLibrary_CheckArtifactDetectNum final
{
public:
	struct FST_QuestListClear                     ClearDat;                                          // 0x0000(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0150(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameDataQuest*                   GameDataQuest;                                     // 0x0158(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0160(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckArtifactDetectNum) == 0x000008, "Wrong alignment on QuestFunctionLibrary_CheckArtifactDetectNum");
static_assert(sizeof(QuestFunctionLibrary_CheckArtifactDetectNum) == 0x000168, "Wrong size on QuestFunctionLibrary_CheckArtifactDetectNum");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactDetectNum, ClearDat) == 0x000000, "Member 'QuestFunctionLibrary_CheckArtifactDetectNum::ClearDat' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactDetectNum, QuestID) == 0x000150, "Member 'QuestFunctionLibrary_CheckArtifactDetectNum::QuestID' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactDetectNum, GameDataQuest) == 0x000158, "Member 'QuestFunctionLibrary_CheckArtifactDetectNum::GameDataQuest' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactDetectNum, ReturnValue) == 0x000160, "Member 'QuestFunctionLibrary_CheckArtifactDetectNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckArtifactDisplayNum
// 0x0670 (0x0670 - 0x0000)
struct QuestFunctionLibrary_CheckArtifactDisplayNum final
{
public:
	struct FST_QuestListClear                     ClearDat;                                          // 0x0000(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOrderQuestData                        OrderData;                                         // 0x0150(0x0518)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0668(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckArtifactDisplayNum) == 0x000008, "Wrong alignment on QuestFunctionLibrary_CheckArtifactDisplayNum");
static_assert(sizeof(QuestFunctionLibrary_CheckArtifactDisplayNum) == 0x000670, "Wrong size on QuestFunctionLibrary_CheckArtifactDisplayNum");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactDisplayNum, ClearDat) == 0x000000, "Member 'QuestFunctionLibrary_CheckArtifactDisplayNum::ClearDat' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactDisplayNum, OrderData) == 0x000150, "Member 'QuestFunctionLibrary_CheckArtifactDisplayNum::OrderData' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactDisplayNum, ReturnValue) == 0x000668, "Member 'QuestFunctionLibrary_CheckArtifactDisplayNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckArtifactGetNum
// 0x0168 (0x0168 - 0x0000)
struct QuestFunctionLibrary_CheckArtifactGetNum final
{
public:
	struct FST_QuestListClear                     ClearDat;                                          // 0x0000(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0150(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameDataQuest*                   GameDataQuest;                                     // 0x0158(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0160(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckArtifactGetNum) == 0x000008, "Wrong alignment on QuestFunctionLibrary_CheckArtifactGetNum");
static_assert(sizeof(QuestFunctionLibrary_CheckArtifactGetNum) == 0x000168, "Wrong size on QuestFunctionLibrary_CheckArtifactGetNum");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactGetNum, ClearDat) == 0x000000, "Member 'QuestFunctionLibrary_CheckArtifactGetNum::ClearDat' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactGetNum, QuestID) == 0x000150, "Member 'QuestFunctionLibrary_CheckArtifactGetNum::QuestID' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactGetNum, GameDataQuest) == 0x000158, "Member 'QuestFunctionLibrary_CheckArtifactGetNum::GameDataQuest' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactGetNum, ReturnValue) == 0x000160, "Member 'QuestFunctionLibrary_CheckArtifactGetNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckArtifactSum
// 0x0160 (0x0160 - 0x0000)
struct QuestFunctionLibrary_CheckArtifactSum final
{
public:
	struct FST_QuestListClear                     ClearDat;                                          // 0x0000(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0150(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0158(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckArtifactSum) == 0x000008, "Wrong alignment on QuestFunctionLibrary_CheckArtifactSum");
static_assert(sizeof(QuestFunctionLibrary_CheckArtifactSum) == 0x000160, "Wrong size on QuestFunctionLibrary_CheckArtifactSum");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactSum, ClearDat) == 0x000000, "Member 'QuestFunctionLibrary_CheckArtifactSum::ClearDat' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactSum, QuestID) == 0x000150, "Member 'QuestFunctionLibrary_CheckArtifactSum::QuestID' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckArtifactSum, ReturnValue) == 0x000158, "Member 'QuestFunctionLibrary_CheckArtifactSum::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckClearTargetObjectDestroy
// 0x0008 (0x0008 - 0x0000)
struct QuestFunctionLibrary_CheckClearTargetObjectDestroy final
{
public:
	int32                                         ClearNum;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckClearTargetObjectDestroy) == 0x000004, "Wrong alignment on QuestFunctionLibrary_CheckClearTargetObjectDestroy");
static_assert(sizeof(QuestFunctionLibrary_CheckClearTargetObjectDestroy) == 0x000008, "Wrong size on QuestFunctionLibrary_CheckClearTargetObjectDestroy");
static_assert(offsetof(QuestFunctionLibrary_CheckClearTargetObjectDestroy, ClearNum) == 0x000000, "Member 'QuestFunctionLibrary_CheckClearTargetObjectDestroy::ClearNum' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckClearTargetObjectDestroy, ReturnValue) == 0x000004, "Member 'QuestFunctionLibrary_CheckClearTargetObjectDestroy::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckFriendMonsterNum
// 0x0008 (0x0008 - 0x0000)
struct QuestFunctionLibrary_CheckFriendMonsterNum final
{
public:
	int32                                         friend_num;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckFriendMonsterNum) == 0x000004, "Wrong alignment on QuestFunctionLibrary_CheckFriendMonsterNum");
static_assert(sizeof(QuestFunctionLibrary_CheckFriendMonsterNum) == 0x000008, "Wrong size on QuestFunctionLibrary_CheckFriendMonsterNum");
static_assert(offsetof(QuestFunctionLibrary_CheckFriendMonsterNum, friend_num) == 0x000000, "Member 'QuestFunctionLibrary_CheckFriendMonsterNum::friend_num' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckFriendMonsterNum, ReturnValue) == 0x000004, "Member 'QuestFunctionLibrary_CheckFriendMonsterNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckMonsterVisionNum
// 0x0160 (0x0160 - 0x0000)
struct QuestFunctionLibrary_CheckMonsterVisionNum final
{
public:
	struct FST_QuestListClear                     ClearDat;                                          // 0x0000(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0150(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0158(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckMonsterVisionNum) == 0x000008, "Wrong alignment on QuestFunctionLibrary_CheckMonsterVisionNum");
static_assert(sizeof(QuestFunctionLibrary_CheckMonsterVisionNum) == 0x000160, "Wrong size on QuestFunctionLibrary_CheckMonsterVisionNum");
static_assert(offsetof(QuestFunctionLibrary_CheckMonsterVisionNum, ClearDat) == 0x000000, "Member 'QuestFunctionLibrary_CheckMonsterVisionNum::ClearDat' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckMonsterVisionNum, QuestID) == 0x000150, "Member 'QuestFunctionLibrary_CheckMonsterVisionNum::QuestID' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckMonsterVisionNum, ReturnValue) == 0x000158, "Member 'QuestFunctionLibrary_CheckMonsterVisionNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.CheckTeamRank
// 0x0008 (0x0008 - 0x0000)
struct QuestFunctionLibrary_CheckTeamRank final
{
public:
	int32                                         team_rank;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestFunctionLibrary_CheckTeamRank) == 0x000004, "Wrong alignment on QuestFunctionLibrary_CheckTeamRank");
static_assert(sizeof(QuestFunctionLibrary_CheckTeamRank) == 0x000008, "Wrong size on QuestFunctionLibrary_CheckTeamRank");
static_assert(offsetof(QuestFunctionLibrary_CheckTeamRank, team_rank) == 0x000000, "Member 'QuestFunctionLibrary_CheckTeamRank::team_rank' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_CheckTeamRank, ReturnValue) == 0x000004, "Member 'QuestFunctionLibrary_CheckTeamRank::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.PlayQuestEvent
// 0x0008 (0x0008 - 0x0000)
struct QuestFunctionLibrary_PlayQuestEvent final
{
public:
	class FName                                   quest_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestFunctionLibrary_PlayQuestEvent) == 0x000004, "Wrong alignment on QuestFunctionLibrary_PlayQuestEvent");
static_assert(sizeof(QuestFunctionLibrary_PlayQuestEvent) == 0x000008, "Wrong size on QuestFunctionLibrary_PlayQuestEvent");
static_assert(offsetof(QuestFunctionLibrary_PlayQuestEvent, quest_id) == 0x000000, "Member 'QuestFunctionLibrary_PlayQuestEvent::quest_id' has a wrong offset!");

// Function DarwinGame.QuestFunctionLibrary.ResetArrivalDestination
// 0x0010 (0x0010 - 0x0000)
struct QuestFunctionLibrary_ResetArrivalDestination final
{
public:
	class FName                                   RectID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestFunctionLibrary_ResetArrivalDestination) == 0x000004, "Wrong alignment on QuestFunctionLibrary_ResetArrivalDestination");
static_assert(sizeof(QuestFunctionLibrary_ResetArrivalDestination) == 0x000010, "Wrong size on QuestFunctionLibrary_ResetArrivalDestination");
static_assert(offsetof(QuestFunctionLibrary_ResetArrivalDestination, RectID) == 0x000000, "Member 'QuestFunctionLibrary_ResetArrivalDestination::RectID' has a wrong offset!");
static_assert(offsetof(QuestFunctionLibrary_ResetArrivalDestination, QuestID) == 0x000008, "Member 'QuestFunctionLibrary_ResetArrivalDestination::QuestID' has a wrong offset!");

// Function DarwinGame.ActionGameplayAbility.CreateEffectContainerSpec
// 0x0040 (0x0040 - 0x0000)
struct ActionGameplayAbility_CreateEffectContainerSpec final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGameplayEffectContainerSpec     ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGameplayAbility_CreateEffectContainerSpec) == 0x000008, "Wrong alignment on ActionGameplayAbility_CreateEffectContainerSpec");
static_assert(sizeof(ActionGameplayAbility_CreateEffectContainerSpec) == 0x000040, "Wrong size on ActionGameplayAbility_CreateEffectContainerSpec");
static_assert(offsetof(ActionGameplayAbility_CreateEffectContainerSpec, actionDetailID) == 0x000000, "Member 'ActionGameplayAbility_CreateEffectContainerSpec::actionDetailID' has a wrong offset!");
static_assert(offsetof(ActionGameplayAbility_CreateEffectContainerSpec, ReturnValue) == 0x000008, "Member 'ActionGameplayAbility_CreateEffectContainerSpec::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionGameplayAbility.CreateEffectContainerSpecFromActionOverViewID
// 0x0040 (0x0040 - 0x0000)
struct ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID final
{
public:
	class FName                                   ActionOverviewID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGameplayEffectContainerSpec     ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID) == 0x000008, "Wrong alignment on ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID");
static_assert(sizeof(ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID) == 0x000040, "Wrong size on ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID");
static_assert(offsetof(ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID, ActionOverviewID) == 0x000000, "Member 'ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID::ActionOverviewID' has a wrong offset!");
static_assert(offsetof(ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID, ReturnValue) == 0x000008, "Member 'ActionGameplayAbility_CreateEffectContainerSpecFromActionOverViewID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionGameplayAbility.CreateEffectContainerSpecWithAttackResult
// 0x0080 (0x0080 - 0x0000)
struct ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttackHitResultStruct                 AttackResult;                                      // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FActionGameplayEffectContainerSpec     ReturnValue;                                       // 0x0048(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult) == 0x000008, "Wrong alignment on ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult");
static_assert(sizeof(ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult) == 0x000080, "Wrong size on ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult");
static_assert(offsetof(ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult, actionDetailID) == 0x000000, "Member 'ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult::actionDetailID' has a wrong offset!");
static_assert(offsetof(ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult, AttackResult) == 0x000008, "Member 'ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult::AttackResult' has a wrong offset!");
static_assert(offsetof(ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult, ReturnValue) == 0x000048, "Member 'ActionGameplayAbility_CreateEffectContainerSpecWithAttackResult::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionGameplayAbility.Debug_CheckPrintTask
// 0x0003 (0x0003 - 0x0000)
struct ActionGameplayAbility_Debug_CheckPrintTask final
{
public:
	bool                                          OnBlend;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnIntercept;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnCancel;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGameplayAbility_Debug_CheckPrintTask) == 0x000001, "Wrong alignment on ActionGameplayAbility_Debug_CheckPrintTask");
static_assert(sizeof(ActionGameplayAbility_Debug_CheckPrintTask) == 0x000003, "Wrong size on ActionGameplayAbility_Debug_CheckPrintTask");
static_assert(offsetof(ActionGameplayAbility_Debug_CheckPrintTask, OnBlend) == 0x000000, "Member 'ActionGameplayAbility_Debug_CheckPrintTask::OnBlend' has a wrong offset!");
static_assert(offsetof(ActionGameplayAbility_Debug_CheckPrintTask, OnIntercept) == 0x000001, "Member 'ActionGameplayAbility_Debug_CheckPrintTask::OnIntercept' has a wrong offset!");
static_assert(offsetof(ActionGameplayAbility_Debug_CheckPrintTask, OnCancel) == 0x000002, "Member 'ActionGameplayAbility_Debug_CheckPrintTask::OnCancel' has a wrong offset!");

// Function DarwinGame.ActionGameplayAbility.Debug_SetNeedCallOnTaskFinish
// 0x0001 (0x0001 - 0x0000)
struct ActionGameplayAbility_Debug_SetNeedCallOnTaskFinish final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGameplayAbility_Debug_SetNeedCallOnTaskFinish) == 0x000001, "Wrong alignment on ActionGameplayAbility_Debug_SetNeedCallOnTaskFinish");
static_assert(sizeof(ActionGameplayAbility_Debug_SetNeedCallOnTaskFinish) == 0x000001, "Wrong size on ActionGameplayAbility_Debug_SetNeedCallOnTaskFinish");
static_assert(offsetof(ActionGameplayAbility_Debug_SetNeedCallOnTaskFinish, Flag) == 0x000000, "Member 'ActionGameplayAbility_Debug_SetNeedCallOnTaskFinish::Flag' has a wrong offset!");

// Function DarwinGame.ActionGameplayAbility.JumpToSection
// 0x0008 (0x0008 - 0x0000)
struct ActionGameplayAbility_JumpToSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGameplayAbility_JumpToSection) == 0x000004, "Wrong alignment on ActionGameplayAbility_JumpToSection");
static_assert(sizeof(ActionGameplayAbility_JumpToSection) == 0x000008, "Wrong size on ActionGameplayAbility_JumpToSection");
static_assert(offsetof(ActionGameplayAbility_JumpToSection, SectionName) == 0x000000, "Member 'ActionGameplayAbility_JumpToSection::SectionName' has a wrong offset!");

// Function DarwinGame.ActionGameplayAbility.SetNextSection
// 0x0008 (0x0008 - 0x0000)
struct ActionGameplayAbility_SetNextSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGameplayAbility_SetNextSection) == 0x000004, "Wrong alignment on ActionGameplayAbility_SetNextSection");
static_assert(sizeof(ActionGameplayAbility_SetNextSection) == 0x000008, "Wrong size on ActionGameplayAbility_SetNextSection");
static_assert(offsetof(ActionGameplayAbility_SetNextSection, SectionName) == 0x000000, "Member 'ActionGameplayAbility_SetNextSection::SectionName' has a wrong offset!");

// Function DarwinGame.MonsterSpawnedCallbackHolder.countKillNumber
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpawnedCallbackHolder_countKillNumber final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpawnedCallbackHolder_countKillNumber) == 0x000008, "Wrong alignment on MonsterSpawnedCallbackHolder_countKillNumber");
static_assert(sizeof(MonsterSpawnedCallbackHolder_countKillNumber) == 0x000008, "Wrong size on MonsterSpawnedCallbackHolder_countKillNumber");
static_assert(offsetof(MonsterSpawnedCallbackHolder_countKillNumber, Monster) == 0x000000, "Member 'MonsterSpawnedCallbackHolder_countKillNumber::Monster' has a wrong offset!");

// Function DarwinGame.MonsterSpawnedCallbackHolder.GetKillCount
// 0x0004 (0x0004 - 0x0000)
struct MonsterSpawnedCallbackHolder_GetKillCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpawnedCallbackHolder_GetKillCount) == 0x000004, "Wrong alignment on MonsterSpawnedCallbackHolder_GetKillCount");
static_assert(sizeof(MonsterSpawnedCallbackHolder_GetKillCount) == 0x000004, "Wrong size on MonsterSpawnedCallbackHolder_GetKillCount");
static_assert(offsetof(MonsterSpawnedCallbackHolder_GetKillCount, ReturnValue) == 0x000000, "Member 'MonsterSpawnedCallbackHolder_GetKillCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterSpawnedCallbackHolder.SetKillCount
// 0x0004 (0x0004 - 0x0000)
struct MonsterSpawnedCallbackHolder_SetKillCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpawnedCallbackHolder_SetKillCount) == 0x000004, "Wrong alignment on MonsterSpawnedCallbackHolder_SetKillCount");
static_assert(sizeof(MonsterSpawnedCallbackHolder_SetKillCount) == 0x000004, "Wrong size on MonsterSpawnedCallbackHolder_SetKillCount");
static_assert(offsetof(MonsterSpawnedCallbackHolder_SetKillCount, Count) == 0x000000, "Member 'MonsterSpawnedCallbackHolder_SetKillCount::Count' has a wrong offset!");

// Function DarwinGame.MonsterSpawnedCallbackHolder.SetTargetBattleID
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpawnedCallbackHolder_SetTargetBattleID final
{
public:
	class FName                                   BattleID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpawnedCallbackHolder_SetTargetBattleID) == 0x000004, "Wrong alignment on MonsterSpawnedCallbackHolder_SetTargetBattleID");
static_assert(sizeof(MonsterSpawnedCallbackHolder_SetTargetBattleID) == 0x000008, "Wrong size on MonsterSpawnedCallbackHolder_SetTargetBattleID");
static_assert(offsetof(MonsterSpawnedCallbackHolder_SetTargetBattleID, BattleID) == 0x000000, "Member 'MonsterSpawnedCallbackHolder_SetTargetBattleID::BattleID' has a wrong offset!");

// Function DarwinGame.ActionPoint.GetGameFlag
// 0x0008 (0x0008 - 0x0000)
struct ActionPoint_GetGameFlag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPoint_GetGameFlag) == 0x000004, "Wrong alignment on ActionPoint_GetGameFlag");
static_assert(sizeof(ActionPoint_GetGameFlag) == 0x000008, "Wrong size on ActionPoint_GetGameFlag");
static_assert(offsetof(ActionPoint_GetGameFlag, ReturnValue) == 0x000000, "Member 'ActionPoint_GetGameFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionPoint.GetType
// 0x0001 (0x0001 - 0x0000)
struct ActionPoint_GetType final
{
public:
	EActionPointType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPoint_GetType) == 0x000001, "Wrong alignment on ActionPoint_GetType");
static_assert(sizeof(ActionPoint_GetType) == 0x000001, "Wrong size on ActionPoint_GetType");
static_assert(offsetof(ActionPoint_GetType, ReturnValue) == 0x000000, "Member 'ActionPoint_GetType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterTimeWait.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_MonsterTimeWait_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterTimeWait_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterTimeWait_NotifyBegin");
static_assert(sizeof(MonsNotifyState_MonsterTimeWait_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_MonsterTimeWait_NotifyBegin");
static_assert(offsetof(MonsNotifyState_MonsterTimeWait_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_MonsterTimeWait_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterTimeWait.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterTimeWait_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterTimeWait_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterTimeWait_NotifyEnd");
static_assert(sizeof(MonsNotifyState_MonsterTimeWait_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_MonsterTimeWait_NotifyEnd");
static_assert(offsetof(MonsNotifyState_MonsterTimeWait_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_MonsterTimeWait_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterTimeWait.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterTimeWait_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterTimeWait_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterTimeWait_NotifyTick");
static_assert(sizeof(MonsNotifyState_MonsterTimeWait_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_MonsterTimeWait_NotifyTick");
static_assert(offsetof(MonsNotifyState_MonsterTimeWait_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_MonsterTimeWait_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.FieldObjectBase.DoEventEndSubBP
// 0x0008 (0x0008 - 0x0000)
struct FieldObjectBase_DoEventEndSubBP final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBase_DoEventEndSubBP) == 0x000004, "Wrong alignment on FieldObjectBase_DoEventEndSubBP");
static_assert(sizeof(FieldObjectBase_DoEventEndSubBP) == 0x000008, "Wrong size on FieldObjectBase_DoEventEndSubBP");
static_assert(offsetof(FieldObjectBase_DoEventEndSubBP, ID) == 0x000000, "Member 'FieldObjectBase_DoEventEndSubBP::ID' has a wrong offset!");

// Function DarwinGame.FieldObjectBase.DoEventStartSubBP
// 0x0008 (0x0008 - 0x0000)
struct FieldObjectBase_DoEventStartSubBP final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBase_DoEventStartSubBP) == 0x000004, "Wrong alignment on FieldObjectBase_DoEventStartSubBP");
static_assert(sizeof(FieldObjectBase_DoEventStartSubBP) == 0x000008, "Wrong size on FieldObjectBase_DoEventStartSubBP");
static_assert(offsetof(FieldObjectBase_DoEventStartSubBP, ID) == 0x000000, "Member 'FieldObjectBase_DoEventStartSubBP::ID' has a wrong offset!");

// Function DarwinGame.FieldObjectBase.OnReceiveEventSubBP
// 0x0020 (0x0020 - 0x0000)
struct FieldObjectBase_OnReceiveEventSubBP final
{
public:
	struct FEventStruct                           Info;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBase_OnReceiveEventSubBP) == 0x000008, "Wrong alignment on FieldObjectBase_OnReceiveEventSubBP");
static_assert(sizeof(FieldObjectBase_OnReceiveEventSubBP) == 0x000020, "Wrong size on FieldObjectBase_OnReceiveEventSubBP");
static_assert(offsetof(FieldObjectBase_OnReceiveEventSubBP, Info) == 0x000000, "Member 'FieldObjectBase_OnReceiveEventSubBP::Info' has a wrong offset!");

// Function DarwinGame.FieldObjectBase.OnReceiveHitSubBP
// 0x0010 (0x0010 - 0x0000)
struct FieldObjectBase_OnReceiveHitSubBP final
{
public:
	EObjectEffectionEnum                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Inst;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBase_OnReceiveHitSubBP) == 0x000008, "Wrong alignment on FieldObjectBase_OnReceiveHitSubBP");
static_assert(sizeof(FieldObjectBase_OnReceiveHitSubBP) == 0x000010, "Wrong size on FieldObjectBase_OnReceiveHitSubBP");
static_assert(offsetof(FieldObjectBase_OnReceiveHitSubBP, Type) == 0x000000, "Member 'FieldObjectBase_OnReceiveHitSubBP::Type' has a wrong offset!");
static_assert(offsetof(FieldObjectBase_OnReceiveHitSubBP, Inst) == 0x000008, "Member 'FieldObjectBase_OnReceiveHitSubBP::Inst' has a wrong offset!");

// Function DarwinGame.FieldObjectBase.OnShowObject
// 0x0001 (0x0001 - 0x0000)
struct FieldObjectBase_OnShowObject final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBase_OnShowObject) == 0x000001, "Wrong alignment on FieldObjectBase_OnShowObject");
static_assert(sizeof(FieldObjectBase_OnShowObject) == 0x000001, "Wrong size on FieldObjectBase_OnShowObject");
static_assert(offsetof(FieldObjectBase_OnShowObject, IsShow) == 0x000000, "Member 'FieldObjectBase_OnShowObject::IsShow' has a wrong offset!");

// Function DarwinGame.FieldObjectBase.SetActorHiddenInGameToAll
// 0x0001 (0x0001 - 0x0000)
struct FieldObjectBase_SetActorHiddenInGameToAll final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBase_SetActorHiddenInGameToAll) == 0x000001, "Wrong alignment on FieldObjectBase_SetActorHiddenInGameToAll");
static_assert(sizeof(FieldObjectBase_SetActorHiddenInGameToAll) == 0x000001, "Wrong size on FieldObjectBase_SetActorHiddenInGameToAll");
static_assert(offsetof(FieldObjectBase_SetActorHiddenInGameToAll, bNewHidden) == 0x000000, "Member 'FieldObjectBase_SetActorHiddenInGameToAll::bNewHidden' has a wrong offset!");

// Function DarwinGame.TrainBase.AttachToRail
// 0x0018 (0x0018 - 0x0000)
struct TrainBase_AttachToRail final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InboundVector;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainBase_AttachToRail) == 0x000004, "Wrong alignment on TrainBase_AttachToRail");
static_assert(sizeof(TrainBase_AttachToRail) == 0x000018, "Wrong size on TrainBase_AttachToRail");
static_assert(offsetof(TrainBase_AttachToRail, Location) == 0x000000, "Member 'TrainBase_AttachToRail::Location' has a wrong offset!");
static_assert(offsetof(TrainBase_AttachToRail, InboundVector) == 0x00000C, "Member 'TrainBase_AttachToRail::InboundVector' has a wrong offset!");

// Function DarwinGame.TrainBase.GetDoorLocation
// 0x000C (0x000C - 0x0000)
struct TrainBase_GetDoorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainBase_GetDoorLocation) == 0x000004, "Wrong alignment on TrainBase_GetDoorLocation");
static_assert(sizeof(TrainBase_GetDoorLocation) == 0x00000C, "Wrong size on TrainBase_GetDoorLocation");
static_assert(offsetof(TrainBase_GetDoorLocation, ReturnValue) == 0x000000, "Member 'TrainBase_GetDoorLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.TrainBase.GetStandPoint
// 0x0030 (0x0030 - 0x0000)
struct TrainBase_GetStandPoint final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainBase_GetStandPoint) == 0x000010, "Wrong alignment on TrainBase_GetStandPoint");
static_assert(sizeof(TrainBase_GetStandPoint) == 0x000030, "Wrong size on TrainBase_GetStandPoint");
static_assert(offsetof(TrainBase_GetStandPoint, ReturnValue) == 0x000000, "Member 'TrainBase_GetStandPoint::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionPointExamine.SetData
// 0x000C (0x000C - 0x0000)
struct ActionPointExamine_SetData final
{
public:
	EActionPointType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   gameFlag;                                          // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPointExamine_SetData) == 0x000004, "Wrong alignment on ActionPointExamine_SetData");
static_assert(sizeof(ActionPointExamine_SetData) == 0x00000C, "Wrong size on ActionPointExamine_SetData");
static_assert(offsetof(ActionPointExamine_SetData, Type) == 0x000000, "Member 'ActionPointExamine_SetData::Type' has a wrong offset!");
static_assert(offsetof(ActionPointExamine_SetData, gameFlag) == 0x000004, "Member 'ActionPointExamine_SetData::gameFlag' has a wrong offset!");

// Function DarwinGame.ActionStateBase.EnterWithResult
// 0x0030 (0x0030 - 0x0000)
struct ActionStateBase_EnterWithResult final
{
public:
	struct FActionResult                          InActionResult;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionStateBase_EnterWithResult) == 0x000004, "Wrong alignment on ActionStateBase_EnterWithResult");
static_assert(sizeof(ActionStateBase_EnterWithResult) == 0x000030, "Wrong size on ActionStateBase_EnterWithResult");
static_assert(offsetof(ActionStateBase_EnterWithResult, InActionResult) == 0x000000, "Member 'ActionStateBase_EnterWithResult::InActionResult' has a wrong offset!");

// Function DarwinGame.ActionStateBase.GetActionResult
// 0x0030 (0x0030 - 0x0000)
struct ActionStateBase_GetActionResult final
{
public:
	struct FActionResult                          ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionStateBase_GetActionResult) == 0x000004, "Wrong alignment on ActionStateBase_GetActionResult");
static_assert(sizeof(ActionStateBase_GetActionResult) == 0x000030, "Wrong size on ActionStateBase_GetActionResult");
static_assert(offsetof(ActionStateBase_GetActionResult, ReturnValue) == 0x000000, "Member 'ActionStateBase_GetActionResult::ReturnValue' has a wrong offset!");

// Function DarwinGame.ActionTargetType.GetTargets
// 0x00E0 (0x00E0 - 0x0000)
struct ActionTargetType_GetTargets final
{
public:
	class AGPACharacter*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     EventData;                                         // 0x0010(0x00B0)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     OutHitResults;                                     // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x00D0(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionTargetType_GetTargets) == 0x000008, "Wrong alignment on ActionTargetType_GetTargets");
static_assert(sizeof(ActionTargetType_GetTargets) == 0x0000E0, "Wrong size on ActionTargetType_GetTargets");
static_assert(offsetof(ActionTargetType_GetTargets, TargetCharacter) == 0x000000, "Member 'ActionTargetType_GetTargets::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ActionTargetType_GetTargets, TargetActor) == 0x000008, "Member 'ActionTargetType_GetTargets::TargetActor' has a wrong offset!");
static_assert(offsetof(ActionTargetType_GetTargets, EventData) == 0x000010, "Member 'ActionTargetType_GetTargets::EventData' has a wrong offset!");
static_assert(offsetof(ActionTargetType_GetTargets, OutHitResults) == 0x0000C0, "Member 'ActionTargetType_GetTargets::OutHitResults' has a wrong offset!");
static_assert(offsetof(ActionTargetType_GetTargets, OutActors) == 0x0000D0, "Member 'ActionTargetType_GetTargets::OutActors' has a wrong offset!");

// Function DarwinGame.GameDataAchievement.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataAchievement_Clone final
{
public:
	class UGameDataAchievement*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataAchievement_Clone) == 0x000008, "Wrong alignment on GameDataAchievement_Clone");
static_assert(sizeof(GameDataAchievement_Clone) == 0x000008, "Wrong size on GameDataAchievement_Clone");
static_assert(offsetof(GameDataAchievement_Clone, ReturnValue) == 0x000000, "Member 'GameDataAchievement_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataAchievement.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataAchievement_Overwrite final
{
public:
	class UGameDataAchievement*                   game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataAchievement_Overwrite) == 0x000008, "Wrong alignment on GameDataAchievement_Overwrite");
static_assert(sizeof(GameDataAchievement_Overwrite) == 0x000008, "Wrong size on GameDataAchievement_Overwrite");
static_assert(offsetof(GameDataAchievement_Overwrite, game_data) == 0x000000, "Member 'GameDataAchievement_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.GetTalkerActor
// 0x0018 (0x0018 - 0x0000)
struct TalkEventSystem_GetTalkerActor final
{
public:
	class AGPACharacter*                          Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayer;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANPCBase*                               NPCActor;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_GetTalkerActor) == 0x000008, "Wrong alignment on TalkEventSystem_GetTalkerActor");
static_assert(sizeof(TalkEventSystem_GetTalkerActor) == 0x000018, "Wrong size on TalkEventSystem_GetTalkerActor");
static_assert(offsetof(TalkEventSystem_GetTalkerActor, Actor) == 0x000000, "Member 'TalkEventSystem_GetTalkerActor::Actor' has a wrong offset!");
static_assert(offsetof(TalkEventSystem_GetTalkerActor, IsPlayer) == 0x000008, "Member 'TalkEventSystem_GetTalkerActor::IsPlayer' has a wrong offset!");
static_assert(offsetof(TalkEventSystem_GetTalkerActor, NPCActor) == 0x000010, "Member 'TalkEventSystem_GetTalkerActor::NPCActor' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.IsCloseTalkWindow
// 0x0001 (0x0001 - 0x0000)
struct TalkEventSystem_IsCloseTalkWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_IsCloseTalkWindow) == 0x000001, "Wrong alignment on TalkEventSystem_IsCloseTalkWindow");
static_assert(sizeof(TalkEventSystem_IsCloseTalkWindow) == 0x000001, "Wrong size on TalkEventSystem_IsCloseTalkWindow");
static_assert(offsetof(TalkEventSystem_IsCloseTalkWindow, ReturnValue) == 0x000000, "Member 'TalkEventSystem_IsCloseTalkWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.IsOpenTalkWindow
// 0x0001 (0x0001 - 0x0000)
struct TalkEventSystem_IsOpenTalkWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_IsOpenTalkWindow) == 0x000001, "Wrong alignment on TalkEventSystem_IsOpenTalkWindow");
static_assert(sizeof(TalkEventSystem_IsOpenTalkWindow) == 0x000001, "Wrong size on TalkEventSystem_IsOpenTalkWindow");
static_assert(offsetof(TalkEventSystem_IsOpenTalkWindow, ReturnValue) == 0x000000, "Member 'TalkEventSystem_IsOpenTalkWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.OnUtilityDelegateEvent
// 0x0010 (0x0010 - 0x0000)
struct TalkEventSystem_OnUtilityDelegateEvent final
{
public:
	class FString                                 CommandStr;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_OnUtilityDelegateEvent) == 0x000008, "Wrong alignment on TalkEventSystem_OnUtilityDelegateEvent");
static_assert(sizeof(TalkEventSystem_OnUtilityDelegateEvent) == 0x000010, "Wrong size on TalkEventSystem_OnUtilityDelegateEvent");
static_assert(offsetof(TalkEventSystem_OnUtilityDelegateEvent, CommandStr) == 0x000000, "Member 'TalkEventSystem_OnUtilityDelegateEvent::CommandStr' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.OpenTalkWindow
// 0x0010 (0x0010 - 0x0000)
struct TalkEventSystem_OpenTalkWindow final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_OpenTalkWindow) == 0x000008, "Wrong alignment on TalkEventSystem_OpenTalkWindow");
static_assert(sizeof(TalkEventSystem_OpenTalkWindow) == 0x000010, "Wrong size on TalkEventSystem_OpenTalkWindow");
static_assert(offsetof(TalkEventSystem_OpenTalkWindow, TextID) == 0x000000, "Member 'TalkEventSystem_OpenTalkWindow::TextID' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.OpenTalkWindowForceText
// 0x0010 (0x0010 - 0x0000)
struct TalkEventSystem_OpenTalkWindowForceText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_OpenTalkWindowForceText) == 0x000008, "Wrong alignment on TalkEventSystem_OpenTalkWindowForceText");
static_assert(sizeof(TalkEventSystem_OpenTalkWindowForceText) == 0x000010, "Wrong size on TalkEventSystem_OpenTalkWindowForceText");
static_assert(offsetof(TalkEventSystem_OpenTalkWindowForceText, Text) == 0x000000, "Member 'TalkEventSystem_OpenTalkWindowForceText::Text' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.PutEmotionEffectOnTalker
// 0x0001 (0x0001 - 0x0000)
struct TalkEventSystem_PutEmotionEffectOnTalker final
{
public:
	EEmotionEffectID                              EmotionEffectID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_PutEmotionEffectOnTalker) == 0x000001, "Wrong alignment on TalkEventSystem_PutEmotionEffectOnTalker");
static_assert(sizeof(TalkEventSystem_PutEmotionEffectOnTalker) == 0x000001, "Wrong size on TalkEventSystem_PutEmotionEffectOnTalker");
static_assert(offsetof(TalkEventSystem_PutEmotionEffectOnTalker, EmotionEffectID) == 0x000000, "Member 'TalkEventSystem_PutEmotionEffectOnTalker::EmotionEffectID' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.PutMotionOnTalker
// 0x0001 (0x0001 - 0x0000)
struct TalkEventSystem_PutMotionOnTalker final
{
public:
	ETextTalkEmotion                              EmotionID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_PutMotionOnTalker) == 0x000001, "Wrong alignment on TalkEventSystem_PutMotionOnTalker");
static_assert(sizeof(TalkEventSystem_PutMotionOnTalker) == 0x000001, "Wrong size on TalkEventSystem_PutMotionOnTalker");
static_assert(offsetof(TalkEventSystem_PutMotionOnTalker, EmotionID) == 0x000000, "Member 'TalkEventSystem_PutMotionOnTalker::EmotionID' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.PutStampOnTalker
// 0x0020 (0x0020 - 0x0000)
struct TalkEventSystem_PutStampOnTalker final
{
public:
	EStampIconType                                StampID;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Option;                                            // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopNum;                                           // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TalkEventSystem_PutStampOnTalker) == 0x000008, "Wrong alignment on TalkEventSystem_PutStampOnTalker");
static_assert(sizeof(TalkEventSystem_PutStampOnTalker) == 0x000020, "Wrong size on TalkEventSystem_PutStampOnTalker");
static_assert(offsetof(TalkEventSystem_PutStampOnTalker, StampID) == 0x000000, "Member 'TalkEventSystem_PutStampOnTalker::StampID' has a wrong offset!");
static_assert(offsetof(TalkEventSystem_PutStampOnTalker, Option) == 0x000008, "Member 'TalkEventSystem_PutStampOnTalker::Option' has a wrong offset!");
static_assert(offsetof(TalkEventSystem_PutStampOnTalker, LoopNum) == 0x000018, "Member 'TalkEventSystem_PutStampOnTalker::LoopNum' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.ResetActorEmote
// 0x0001 (0x0001 - 0x0000)
struct TalkEventSystem_ResetActorEmote final
{
public:
	bool                                          IsBodySkip;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_ResetActorEmote) == 0x000001, "Wrong alignment on TalkEventSystem_ResetActorEmote");
static_assert(sizeof(TalkEventSystem_ResetActorEmote) == 0x000001, "Wrong size on TalkEventSystem_ResetActorEmote");
static_assert(offsetof(TalkEventSystem_ResetActorEmote, IsBodySkip) == 0x000000, "Member 'TalkEventSystem_ResetActorEmote::IsBodySkip' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.SendSelectResult
// 0x0004 (0x0004 - 0x0000)
struct TalkEventSystem_SendSelectResult final
{
public:
	int32                                         SendSelectIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_SendSelectResult) == 0x000004, "Wrong alignment on TalkEventSystem_SendSelectResult");
static_assert(sizeof(TalkEventSystem_SendSelectResult) == 0x000004, "Wrong size on TalkEventSystem_SendSelectResult");
static_assert(offsetof(TalkEventSystem_SendSelectResult, SendSelectIndex) == 0x000000, "Member 'TalkEventSystem_SendSelectResult::SendSelectIndex' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.SetEventOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct TalkEventSystem_SetEventOwnerActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_SetEventOwnerActor) == 0x000008, "Wrong alignment on TalkEventSystem_SetEventOwnerActor");
static_assert(sizeof(TalkEventSystem_SetEventOwnerActor) == 0x000008, "Wrong size on TalkEventSystem_SetEventOwnerActor");
static_assert(offsetof(TalkEventSystem_SetEventOwnerActor, Actor) == 0x000000, "Member 'TalkEventSystem_SetEventOwnerActor::Actor' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.StartTalkEvent
// 0x0018 (0x0018 - 0x0000)
struct TalkEventSystem_StartTalkEvent final
{
public:
	struct FST_EventData                          EventData;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_StartTalkEvent) == 0x000004, "Wrong alignment on TalkEventSystem_StartTalkEvent");
static_assert(sizeof(TalkEventSystem_StartTalkEvent) == 0x000018, "Wrong size on TalkEventSystem_StartTalkEvent");
static_assert(offsetof(TalkEventSystem_StartTalkEvent, EventData) == 0x000000, "Member 'TalkEventSystem_StartTalkEvent::EventData' has a wrong offset!");

// Function DarwinGame.TalkEventSystem.IsSelectCancel
// 0x0001 (0x0001 - 0x0000)
struct TalkEventSystem_IsSelectCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TalkEventSystem_IsSelectCancel) == 0x000001, "Wrong alignment on TalkEventSystem_IsSelectCancel");
static_assert(sizeof(TalkEventSystem_IsSelectCancel) == 0x000001, "Wrong size on TalkEventSystem_IsSelectCancel");
static_assert(offsetof(TalkEventSystem_IsSelectCancel, ReturnValue) == 0x000000, "Member 'TalkEventSystem_IsSelectCancel::ReturnValue' has a wrong offset!");

// Function DarwinGame.MagicBase.CheckTerrainWithLineTrace
// 0x00A4 (0x00A4 - 0x0000)
struct MagicBase_CheckTerrainWithLineTrace final
{
public:
	struct FHitResult                             out_hit;                                           // 0x0000(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                StartPos;                                          // 0x0088(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPos;                                            // 0x0094(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicBase_CheckTerrainWithLineTrace) == 0x000004, "Wrong alignment on MagicBase_CheckTerrainWithLineTrace");
static_assert(sizeof(MagicBase_CheckTerrainWithLineTrace) == 0x0000A4, "Wrong size on MagicBase_CheckTerrainWithLineTrace");
static_assert(offsetof(MagicBase_CheckTerrainWithLineTrace, out_hit) == 0x000000, "Member 'MagicBase_CheckTerrainWithLineTrace::out_hit' has a wrong offset!");
static_assert(offsetof(MagicBase_CheckTerrainWithLineTrace, StartPos) == 0x000088, "Member 'MagicBase_CheckTerrainWithLineTrace::StartPos' has a wrong offset!");
static_assert(offsetof(MagicBase_CheckTerrainWithLineTrace, EndPos) == 0x000094, "Member 'MagicBase_CheckTerrainWithLineTrace::EndPos' has a wrong offset!");
static_assert(offsetof(MagicBase_CheckTerrainWithLineTrace, ReturnValue) == 0x0000A0, "Member 'MagicBase_CheckTerrainWithLineTrace::ReturnValue' has a wrong offset!");

// Function DarwinGame.AnimNotifyState_ZoomUp.GetDestAngle
// 0x0004 (0x0004 - 0x0000)
struct AnimNotifyState_ZoomUp_GetDestAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_ZoomUp_GetDestAngle) == 0x000004, "Wrong alignment on AnimNotifyState_ZoomUp_GetDestAngle");
static_assert(sizeof(AnimNotifyState_ZoomUp_GetDestAngle) == 0x000004, "Wrong size on AnimNotifyState_ZoomUp_GetDestAngle");
static_assert(offsetof(AnimNotifyState_ZoomUp_GetDestAngle, ReturnValue) == 0x000000, "Member 'AnimNotifyState_ZoomUp_GetDestAngle::ReturnValue' has a wrong offset!");

// Function DarwinGame.AnimNotifyState_ZoomUp.GetDestLength
// 0x0004 (0x0004 - 0x0000)
struct AnimNotifyState_ZoomUp_GetDestLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_ZoomUp_GetDestLength) == 0x000004, "Wrong alignment on AnimNotifyState_ZoomUp_GetDestLength");
static_assert(sizeof(AnimNotifyState_ZoomUp_GetDestLength) == 0x000004, "Wrong size on AnimNotifyState_ZoomUp_GetDestLength");
static_assert(offsetof(AnimNotifyState_ZoomUp_GetDestLength, ReturnValue) == 0x000000, "Member 'AnimNotifyState_ZoomUp_GetDestLength::ReturnValue' has a wrong offset!");

// Function DarwinGame.AnimNotifyState_ZoomUp.GetDestYaw
// 0x0004 (0x0004 - 0x0000)
struct AnimNotifyState_ZoomUp_GetDestYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotifyState_ZoomUp_GetDestYaw) == 0x000004, "Wrong alignment on AnimNotifyState_ZoomUp_GetDestYaw");
static_assert(sizeof(AnimNotifyState_ZoomUp_GetDestYaw) == 0x000004, "Wrong size on AnimNotifyState_ZoomUp_GetDestYaw");
static_assert(offsetof(AnimNotifyState_ZoomUp_GetDestYaw, ReturnValue) == 0x000000, "Member 'AnimNotifyState_ZoomUp_GetDestYaw::ReturnValue' has a wrong offset!");

// Function DarwinGame.AreaFunctionLibrary.GetErosionCorrection
// 0x0004 (0x0004 - 0x0000)
struct AreaFunctionLibrary_GetErosionCorrection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaFunctionLibrary_GetErosionCorrection) == 0x000004, "Wrong alignment on AreaFunctionLibrary_GetErosionCorrection");
static_assert(sizeof(AreaFunctionLibrary_GetErosionCorrection) == 0x000004, "Wrong size on AreaFunctionLibrary_GetErosionCorrection");
static_assert(offsetof(AreaFunctionLibrary_GetErosionCorrection, ReturnValue) == 0x000000, "Member 'AreaFunctionLibrary_GetErosionCorrection::ReturnValue' has a wrong offset!");

// Function DarwinGame.AimTargetComponent.SetAimEnabled
// 0x0001 (0x0001 - 0x0000)
struct AimTargetComponent_SetAimEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimTargetComponent_SetAimEnabled) == 0x000001, "Wrong alignment on AimTargetComponent_SetAimEnabled");
static_assert(sizeof(AimTargetComponent_SetAimEnabled) == 0x000001, "Wrong size on AimTargetComponent_SetAimEnabled");
static_assert(offsetof(AimTargetComponent_SetAimEnabled, Enabled) == 0x000000, "Member 'AimTargetComponent_SetAimEnabled::Enabled' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddAttackCount
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_AddAttackCount final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddAttackCount) == 0x000004, "Wrong alignment on GameDataHistory_AddAttackCount");
static_assert(sizeof(GameDataHistory_AddAttackCount) == 0x000008, "Wrong size on GameDataHistory_AddAttackCount");
static_assert(offsetof(GameDataHistory_AddAttackCount, ID) == 0x000000, "Member 'GameDataHistory_AddAttackCount::ID' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddDefeatedMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddDefeatedMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddDefeatedMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_AddDefeatedMonsterCount");
static_assert(sizeof(GameDataHistory_AddDefeatedMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_AddDefeatedMonsterCount");
static_assert(offsetof(GameDataHistory_AddDefeatedMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_AddDefeatedMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddDefeatedMonsterCount, Count) == 0x000008, "Member 'GameDataHistory_AddDefeatedMonsterCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddFriendMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddFriendMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddFriendMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_AddFriendMonsterCount");
static_assert(sizeof(GameDataHistory_AddFriendMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_AddFriendMonsterCount");
static_assert(offsetof(GameDataHistory_AddFriendMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_AddFriendMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddFriendMonsterCount, Count) == 0x000008, "Member 'GameDataHistory_AddFriendMonsterCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemBuyCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddItemBuyCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemBuyCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemBuyCount");
static_assert(sizeof(GameDataHistory_AddItemBuyCount) == 0x00000C, "Wrong size on GameDataHistory_AddItemBuyCount");
static_assert(offsetof(GameDataHistory_AddItemBuyCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemBuyCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemBuyCount, Count) == 0x000008, "Member 'GameDataHistory_AddItemBuyCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemCollectionCount
// 0x0010 (0x0010 - 0x0000)
struct GameDataHistory_AddItemCollectionCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemCollectionCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemCollectionCount");
static_assert(sizeof(GameDataHistory_AddItemCollectionCount) == 0x000010, "Wrong size on GameDataHistory_AddItemCollectionCount");
static_assert(offsetof(GameDataHistory_AddItemCollectionCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemCollectionCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemCollectionCount, AreaType) == 0x000008, "Member 'GameDataHistory_AddItemCollectionCount::AreaType' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemCollectionCount, Count) == 0x00000C, "Member 'GameDataHistory_AddItemCollectionCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemGetCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddItemGetCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemGetCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemGetCount");
static_assert(sizeof(GameDataHistory_AddItemGetCount) == 0x00000C, "Wrong size on GameDataHistory_AddItemGetCount");
static_assert(offsetof(GameDataHistory_AddItemGetCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemGetCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemGetCount, Count) == 0x000008, "Member 'GameDataHistory_AddItemGetCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemMakeCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddItemMakeCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemMakeCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemMakeCount");
static_assert(sizeof(GameDataHistory_AddItemMakeCount) == 0x00000C, "Wrong size on GameDataHistory_AddItemMakeCount");
static_assert(offsetof(GameDataHistory_AddItemMakeCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemMakeCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemMakeCount, Count) == 0x000008, "Member 'GameDataHistory_AddItemMakeCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemSellCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddItemSellCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemSellCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemSellCount");
static_assert(sizeof(GameDataHistory_AddItemSellCount) == 0x00000C, "Wrong size on GameDataHistory_AddItemSellCount");
static_assert(offsetof(GameDataHistory_AddItemSellCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemSellCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemSellCount, Count) == 0x000008, "Member 'GameDataHistory_AddItemSellCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemUseToEnemyCount
// 0x0014 (0x0014 - 0x0000)
struct GameDataHistory_AddItemUseToEnemyCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemUseToEnemyCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemUseToEnemyCount");
static_assert(sizeof(GameDataHistory_AddItemUseToEnemyCount) == 0x000014, "Wrong size on GameDataHistory_AddItemUseToEnemyCount");
static_assert(offsetof(GameDataHistory_AddItemUseToEnemyCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemUseToEnemyCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemUseToEnemyCount, KindId) == 0x000008, "Member 'GameDataHistory_AddItemUseToEnemyCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemUseToEnemyCount, Count) == 0x000010, "Member 'GameDataHistory_AddItemUseToEnemyCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemUseToFriendCount
// 0x0014 (0x0014 - 0x0000)
struct GameDataHistory_AddItemUseToFriendCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemUseToFriendCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemUseToFriendCount");
static_assert(sizeof(GameDataHistory_AddItemUseToFriendCount) == 0x000014, "Wrong size on GameDataHistory_AddItemUseToFriendCount");
static_assert(offsetof(GameDataHistory_AddItemUseToFriendCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemUseToFriendCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemUseToFriendCount, KindId) == 0x000008, "Member 'GameDataHistory_AddItemUseToFriendCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemUseToFriendCount, Count) == 0x000010, "Member 'GameDataHistory_AddItemUseToFriendCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddItemUseToMeCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddItemUseToMeCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddItemUseToMeCount) == 0x000004, "Wrong alignment on GameDataHistory_AddItemUseToMeCount");
static_assert(sizeof(GameDataHistory_AddItemUseToMeCount) == 0x00000C, "Wrong size on GameDataHistory_AddItemUseToMeCount");
static_assert(offsetof(GameDataHistory_AddItemUseToMeCount, ItemId) == 0x000000, "Member 'GameDataHistory_AddItemUseToMeCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddItemUseToMeCount, Count) == 0x000008, "Member 'GameDataHistory_AddItemUseToMeCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddKillMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddKillMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddKillMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_AddKillMonsterCount");
static_assert(sizeof(GameDataHistory_AddKillMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_AddKillMonsterCount");
static_assert(offsetof(GameDataHistory_AddKillMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_AddKillMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddKillMonsterCount, Count) == 0x000008, "Member 'GameDataHistory_AddKillMonsterCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddKillNightmareMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddKillNightmareMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddKillNightmareMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_AddKillNightmareMonsterCount");
static_assert(sizeof(GameDataHistory_AddKillNightmareMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_AddKillNightmareMonsterCount");
static_assert(offsetof(GameDataHistory_AddKillNightmareMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_AddKillNightmareMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddKillNightmareMonsterCount, Count) == 0x000008, "Member 'GameDataHistory_AddKillNightmareMonsterCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddPlayerActionCount
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_AddPlayerActionCount final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddPlayerActionCount) == 0x000004, "Wrong alignment on GameDataHistory_AddPlayerActionCount");
static_assert(sizeof(GameDataHistory_AddPlayerActionCount) == 0x000008, "Wrong size on GameDataHistory_AddPlayerActionCount");
static_assert(offsetof(GameDataHistory_AddPlayerActionCount, ID) == 0x000000, "Member 'GameDataHistory_AddPlayerActionCount::ID' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddPlayerActionNum
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddPlayerActionNum final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddPlayerActionNum) == 0x000004, "Wrong alignment on GameDataHistory_AddPlayerActionNum");
static_assert(sizeof(GameDataHistory_AddPlayerActionNum) == 0x00000C, "Wrong size on GameDataHistory_AddPlayerActionNum");
static_assert(offsetof(GameDataHistory_AddPlayerActionNum, ID) == 0x000000, "Member 'GameDataHistory_AddPlayerActionNum::ID' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddPlayerActionNum, Num) == 0x000008, "Member 'GameDataHistory_AddPlayerActionNum::Num' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddRivalTeamKillCount
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_AddRivalTeamKillCount final
{
public:
	ERivalTeamForce                               RivalTeam;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddRivalTeamKillCount) == 0x000004, "Wrong alignment on GameDataHistory_AddRivalTeamKillCount");
static_assert(sizeof(GameDataHistory_AddRivalTeamKillCount) == 0x000008, "Wrong size on GameDataHistory_AddRivalTeamKillCount");
static_assert(offsetof(GameDataHistory_AddRivalTeamKillCount, RivalTeam) == 0x000000, "Member 'GameDataHistory_AddRivalTeamKillCount::RivalTeam' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddRivalTeamKillCount, Num) == 0x000004, "Member 'GameDataHistory_AddRivalTeamKillCount::Num' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddScoutMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddScoutMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddScoutMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_AddScoutMonsterCount");
static_assert(sizeof(GameDataHistory_AddScoutMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_AddScoutMonsterCount");
static_assert(offsetof(GameDataHistory_AddScoutMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_AddScoutMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddScoutMonsterCount, Count) == 0x000008, "Member 'GameDataHistory_AddScoutMonsterCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.AddStealMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_AddStealMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_AddStealMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_AddStealMonsterCount");
static_assert(sizeof(GameDataHistory_AddStealMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_AddStealMonsterCount");
static_assert(offsetof(GameDataHistory_AddStealMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_AddStealMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_AddStealMonsterCount, Count) == 0x000008, "Member 'GameDataHistory_AddStealMonsterCount::Count' has a wrong offset!");

// Function DarwinGame.GameDataHistory.ArrivalDestinationRect
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_ArrivalDestinationRect final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_ArrivalDestinationRect) == 0x000004, "Wrong alignment on GameDataHistory_ArrivalDestinationRect");
static_assert(sizeof(GameDataHistory_ArrivalDestinationRect) == 0x000008, "Wrong size on GameDataHistory_ArrivalDestinationRect");
static_assert(offsetof(GameDataHistory_ArrivalDestinationRect, QuestID) == 0x000000, "Member 'GameDataHistory_ArrivalDestinationRect::QuestID' has a wrong offset!");

// Function DarwinGame.GameDataHistory.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_Clone final
{
public:
	class UGameDataHistory*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_Clone) == 0x000008, "Wrong alignment on GameDataHistory_Clone");
static_assert(sizeof(GameDataHistory_Clone) == 0x000008, "Wrong size on GameDataHistory_Clone");
static_assert(offsetof(GameDataHistory_Clone, ReturnValue) == 0x000000, "Member 'GameDataHistory_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_Overwrite final
{
public:
	class UGameDataHistory*                       game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_Overwrite) == 0x000008, "Wrong alignment on GameDataHistory_Overwrite");
static_assert(sizeof(GameDataHistory_Overwrite) == 0x000008, "Wrong size on GameDataHistory_Overwrite");
static_assert(offsetof(GameDataHistory_Overwrite, game_data) == 0x000000, "Member 'GameDataHistory_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataHistory.ResetDestinationRect
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_ResetDestinationRect final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_ResetDestinationRect) == 0x000004, "Wrong alignment on GameDataHistory_ResetDestinationRect");
static_assert(sizeof(GameDataHistory_ResetDestinationRect) == 0x000008, "Wrong size on GameDataHistory_ResetDestinationRect");
static_assert(offsetof(GameDataHistory_ResetDestinationRect, QuestID) == 0x000000, "Member 'GameDataHistory_ResetDestinationRect::QuestID' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetAttackCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetAttackCount final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetAttackCount) == 0x000004, "Wrong alignment on GameDataHistory_GetAttackCount");
static_assert(sizeof(GameDataHistory_GetAttackCount) == 0x00000C, "Wrong size on GameDataHistory_GetAttackCount");
static_assert(offsetof(GameDataHistory_GetAttackCount, ID) == 0x000000, "Member 'GameDataHistory_GetAttackCount::ID' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetAttackCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetAttackCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetDefeatedMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetDefeatedMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetDefeatedMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_GetDefeatedMonsterCount");
static_assert(sizeof(GameDataHistory_GetDefeatedMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_GetDefeatedMonsterCount");
static_assert(offsetof(GameDataHistory_GetDefeatedMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_GetDefeatedMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetDefeatedMonsterCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetDefeatedMonsterCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetDictMonsters
// 0x0010 (0x0010 - 0x0000)
struct GameDataHistory_GetDictMonsters final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetDictMonsters) == 0x000008, "Wrong alignment on GameDataHistory_GetDictMonsters");
static_assert(sizeof(GameDataHistory_GetDictMonsters) == 0x000010, "Wrong size on GameDataHistory_GetDictMonsters");
static_assert(offsetof(GameDataHistory_GetDictMonsters, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetDictMonsters::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetFriendMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetFriendMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetFriendMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_GetFriendMonsterCount");
static_assert(sizeof(GameDataHistory_GetFriendMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_GetFriendMonsterCount");
static_assert(offsetof(GameDataHistory_GetFriendMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_GetFriendMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetFriendMonsterCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetFriendMonsterCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetFriendMonsterCountAll
// 0x0004 (0x0004 - 0x0000)
struct GameDataHistory_GetFriendMonsterCountAll final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetFriendMonsterCountAll) == 0x000004, "Wrong alignment on GameDataHistory_GetFriendMonsterCountAll");
static_assert(sizeof(GameDataHistory_GetFriendMonsterCountAll) == 0x000004, "Wrong size on GameDataHistory_GetFriendMonsterCountAll");
static_assert(offsetof(GameDataHistory_GetFriendMonsterCountAll, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetFriendMonsterCountAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetFriendMonsterCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetFriendMonsterCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetFriendMonsterCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetFriendMonsterCountMap");
static_assert(sizeof(GameDataHistory_GetFriendMonsterCountMap) == 0x000050, "Wrong size on GameDataHistory_GetFriendMonsterCountMap");
static_assert(offsetof(GameDataHistory_GetFriendMonsterCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetFriendMonsterCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemBuyCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetItemBuyCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemBuyCount) == 0x000004, "Wrong alignment on GameDataHistory_GetItemBuyCount");
static_assert(sizeof(GameDataHistory_GetItemBuyCount) == 0x00000C, "Wrong size on GameDataHistory_GetItemBuyCount");
static_assert(offsetof(GameDataHistory_GetItemBuyCount, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemBuyCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemBuyCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemBuyCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemBuyCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemBuyCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemBuyCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemBuyCountMap");
static_assert(sizeof(GameDataHistory_GetItemBuyCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemBuyCountMap");
static_assert(offsetof(GameDataHistory_GetItemBuyCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemBuyCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemCollectionCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemCollectionCountMap final
{
public:
	TMap<class FName, struct FItemCollection>     ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemCollectionCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemCollectionCountMap");
static_assert(sizeof(GameDataHistory_GetItemCollectionCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemCollectionCountMap");
static_assert(offsetof(GameDataHistory_GetItemCollectionCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemCollectionCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemGetCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetItemGetCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemGetCount) == 0x000004, "Wrong alignment on GameDataHistory_GetItemGetCount");
static_assert(sizeof(GameDataHistory_GetItemGetCount) == 0x00000C, "Wrong size on GameDataHistory_GetItemGetCount");
static_assert(offsetof(GameDataHistory_GetItemGetCount, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemGetCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemGetCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemGetCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemGetCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemGetCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemGetCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemGetCountMap");
static_assert(sizeof(GameDataHistory_GetItemGetCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemGetCountMap");
static_assert(offsetof(GameDataHistory_GetItemGetCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemGetCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemMakeCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetItemMakeCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemMakeCount) == 0x000004, "Wrong alignment on GameDataHistory_GetItemMakeCount");
static_assert(sizeof(GameDataHistory_GetItemMakeCount) == 0x00000C, "Wrong size on GameDataHistory_GetItemMakeCount");
static_assert(offsetof(GameDataHistory_GetItemMakeCount, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemMakeCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemMakeCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemMakeCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemMakeCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemMakeCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemMakeCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemMakeCountMap");
static_assert(sizeof(GameDataHistory_GetItemMakeCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemMakeCountMap");
static_assert(offsetof(GameDataHistory_GetItemMakeCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemMakeCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemSellCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetItemSellCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemSellCount) == 0x000004, "Wrong alignment on GameDataHistory_GetItemSellCount");
static_assert(sizeof(GameDataHistory_GetItemSellCount) == 0x00000C, "Wrong size on GameDataHistory_GetItemSellCount");
static_assert(offsetof(GameDataHistory_GetItemSellCount, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemSellCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemSellCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemSellCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemSellCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemSellCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemSellCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemSellCountMap");
static_assert(sizeof(GameDataHistory_GetItemSellCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemSellCountMap");
static_assert(offsetof(GameDataHistory_GetItemSellCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemSellCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemsGet
// 0x0010 (0x0010 - 0x0000)
struct GameDataHistory_GetItemsGet final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemsGet) == 0x000008, "Wrong alignment on GameDataHistory_GetItemsGet");
static_assert(sizeof(GameDataHistory_GetItemsGet) == 0x000010, "Wrong size on GameDataHistory_GetItemsGet");
static_assert(offsetof(GameDataHistory_GetItemsGet, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemsGet::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToEnemyCount
// 0x0014 (0x0014 - 0x0000)
struct GameDataHistory_GetItemUseToEnemyCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToEnemyCount) == 0x000004, "Wrong alignment on GameDataHistory_GetItemUseToEnemyCount");
static_assert(sizeof(GameDataHistory_GetItemUseToEnemyCount) == 0x000014, "Wrong size on GameDataHistory_GetItemUseToEnemyCount");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCount, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemUseToEnemyCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCount, KindId) == 0x000008, "Member 'GameDataHistory_GetItemUseToEnemyCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCount, ReturnValue) == 0x000010, "Member 'GameDataHistory_GetItemUseToEnemyCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToEnemyCountAllItem
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetItemUseToEnemyCountAllItem final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToEnemyCountAllItem) == 0x000004, "Wrong alignment on GameDataHistory_GetItemUseToEnemyCountAllItem");
static_assert(sizeof(GameDataHistory_GetItemUseToEnemyCountAllItem) == 0x00000C, "Wrong size on GameDataHistory_GetItemUseToEnemyCountAllItem");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountAllItem, KindId) == 0x000000, "Member 'GameDataHistory_GetItemUseToEnemyCountAllItem::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountAllItem, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemUseToEnemyCountAllItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToEnemyCountAllItemOfType
// 0x0010 (0x0010 - 0x0000)
struct GameDataHistory_GetItemUseToEnemyCountAllItemOfType final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemDataType                                 Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToEnemyCountAllItemOfType) == 0x000004, "Wrong alignment on GameDataHistory_GetItemUseToEnemyCountAllItemOfType");
static_assert(sizeof(GameDataHistory_GetItemUseToEnemyCountAllItemOfType) == 0x000010, "Wrong size on GameDataHistory_GetItemUseToEnemyCountAllItemOfType");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountAllItemOfType, KindId) == 0x000000, "Member 'GameDataHistory_GetItemUseToEnemyCountAllItemOfType::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountAllItemOfType, Type) == 0x000008, "Member 'GameDataHistory_GetItemUseToEnemyCountAllItemOfType::Type' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountAllItemOfType, ReturnValue) == 0x00000C, "Member 'GameDataHistory_GetItemUseToEnemyCountAllItemOfType::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToEnemyCountAllMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetItemUseToEnemyCountAllMonster final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToEnemyCountAllMonster) == 0x000004, "Wrong alignment on GameDataHistory_GetItemUseToEnemyCountAllMonster");
static_assert(sizeof(GameDataHistory_GetItemUseToEnemyCountAllMonster) == 0x00000C, "Wrong size on GameDataHistory_GetItemUseToEnemyCountAllMonster");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountAllMonster, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemUseToEnemyCountAllMonster::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountAllMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemUseToEnemyCountAllMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToEnemyCountDetail
// 0x0058 (0x0058 - 0x0000)
struct GameDataHistory_GetItemUseToEnemyCountDetail final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToEnemyCountDetail) == 0x000008, "Wrong alignment on GameDataHistory_GetItemUseToEnemyCountDetail");
static_assert(sizeof(GameDataHistory_GetItemUseToEnemyCountDetail) == 0x000058, "Wrong size on GameDataHistory_GetItemUseToEnemyCountDetail");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountDetail, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemUseToEnemyCountDetail::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountDetail, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemUseToEnemyCountDetail::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToEnemyCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemUseToEnemyCountMap final
{
public:
	TMap<class FName, struct FItemUseToMonster>   ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToEnemyCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemUseToEnemyCountMap");
static_assert(sizeof(GameDataHistory_GetItemUseToEnemyCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemUseToEnemyCountMap");
static_assert(offsetof(GameDataHistory_GetItemUseToEnemyCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemUseToEnemyCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToFriendCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemUseToFriendCountMap final
{
public:
	TMap<class FName, struct FItemUseToMonster>   ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToFriendCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemUseToFriendCountMap");
static_assert(sizeof(GameDataHistory_GetItemUseToFriendCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemUseToFriendCountMap");
static_assert(offsetof(GameDataHistory_GetItemUseToFriendCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemUseToFriendCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToMeCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetItemUseToMeCount final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToMeCount) == 0x000004, "Wrong alignment on GameDataHistory_GetItemUseToMeCount");
static_assert(sizeof(GameDataHistory_GetItemUseToMeCount) == 0x00000C, "Wrong size on GameDataHistory_GetItemUseToMeCount");
static_assert(offsetof(GameDataHistory_GetItemUseToMeCount, ItemId) == 0x000000, "Member 'GameDataHistory_GetItemUseToMeCount::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetItemUseToMeCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetItemUseToMeCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetItemUseToMeCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetItemUseToMeCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetItemUseToMeCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetItemUseToMeCountMap");
static_assert(sizeof(GameDataHistory_GetItemUseToMeCountMap) == 0x000050, "Wrong size on GameDataHistory_GetItemUseToMeCountMap");
static_assert(offsetof(GameDataHistory_GetItemUseToMeCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetItemUseToMeCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetKilledMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetKilledMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetKilledMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_GetKilledMonsterCount");
static_assert(sizeof(GameDataHistory_GetKilledMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_GetKilledMonsterCount");
static_assert(offsetof(GameDataHistory_GetKilledMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_GetKilledMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetKilledMonsterCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetKilledMonsterCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetKilledMonsterCountAll
// 0x0004 (0x0004 - 0x0000)
struct GameDataHistory_GetKilledMonsterCountAll final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetKilledMonsterCountAll) == 0x000004, "Wrong alignment on GameDataHistory_GetKilledMonsterCountAll");
static_assert(sizeof(GameDataHistory_GetKilledMonsterCountAll) == 0x000004, "Wrong size on GameDataHistory_GetKilledMonsterCountAll");
static_assert(offsetof(GameDataHistory_GetKilledMonsterCountAll, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetKilledMonsterCountAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetKilledMonsterCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetKilledMonsterCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetKilledMonsterCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetKilledMonsterCountMap");
static_assert(sizeof(GameDataHistory_GetKilledMonsterCountMap) == 0x000050, "Wrong size on GameDataHistory_GetKilledMonsterCountMap");
static_assert(offsetof(GameDataHistory_GetKilledMonsterCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetKilledMonsterCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetKilledNightmareMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetKilledNightmareMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetKilledNightmareMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_GetKilledNightmareMonsterCount");
static_assert(sizeof(GameDataHistory_GetKilledNightmareMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_GetKilledNightmareMonsterCount");
static_assert(offsetof(GameDataHistory_GetKilledNightmareMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_GetKilledNightmareMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetKilledNightmareMonsterCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetKilledNightmareMonsterCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetKilledNightmareMonsterCountAll
// 0x0004 (0x0004 - 0x0000)
struct GameDataHistory_GetKilledNightmareMonsterCountAll final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetKilledNightmareMonsterCountAll) == 0x000004, "Wrong alignment on GameDataHistory_GetKilledNightmareMonsterCountAll");
static_assert(sizeof(GameDataHistory_GetKilledNightmareMonsterCountAll) == 0x000004, "Wrong size on GameDataHistory_GetKilledNightmareMonsterCountAll");
static_assert(offsetof(GameDataHistory_GetKilledNightmareMonsterCountAll, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetKilledNightmareMonsterCountAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetKilledNightmareMonsterCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetKilledNightmareMonsterCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetKilledNightmareMonsterCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetKilledNightmareMonsterCountMap");
static_assert(sizeof(GameDataHistory_GetKilledNightmareMonsterCountMap) == 0x000050, "Wrong size on GameDataHistory_GetKilledNightmareMonsterCountMap");
static_assert(offsetof(GameDataHistory_GetKilledNightmareMonsterCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetKilledNightmareMonsterCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetPlayerActionCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetPlayerActionCount final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetPlayerActionCount) == 0x000004, "Wrong alignment on GameDataHistory_GetPlayerActionCount");
static_assert(sizeof(GameDataHistory_GetPlayerActionCount) == 0x00000C, "Wrong size on GameDataHistory_GetPlayerActionCount");
static_assert(offsetof(GameDataHistory_GetPlayerActionCount, ID) == 0x000000, "Member 'GameDataHistory_GetPlayerActionCount::ID' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetPlayerActionCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetPlayerActionCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetRegisteredKindIDList
// 0x0010 (0x0010 - 0x0000)
struct GameDataHistory_GetRegisteredKindIDList final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetRegisteredKindIDList) == 0x000008, "Wrong alignment on GameDataHistory_GetRegisteredKindIDList");
static_assert(sizeof(GameDataHistory_GetRegisteredKindIDList) == 0x000010, "Wrong size on GameDataHistory_GetRegisteredKindIDList");
static_assert(offsetof(GameDataHistory_GetRegisteredKindIDList, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetRegisteredKindIDList::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetRivalTeamKillCount
// 0x0008 (0x0008 - 0x0000)
struct GameDataHistory_GetRivalTeamKillCount final
{
public:
	ERivalTeamForce                               RivalTeam;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetRivalTeamKillCount) == 0x000004, "Wrong alignment on GameDataHistory_GetRivalTeamKillCount");
static_assert(sizeof(GameDataHistory_GetRivalTeamKillCount) == 0x000008, "Wrong size on GameDataHistory_GetRivalTeamKillCount");
static_assert(offsetof(GameDataHistory_GetRivalTeamKillCount, RivalTeam) == 0x000000, "Member 'GameDataHistory_GetRivalTeamKillCount::RivalTeam' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetRivalTeamKillCount, ReturnValue) == 0x000004, "Member 'GameDataHistory_GetRivalTeamKillCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetRivalTeamKillCountTMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetRivalTeamKillCountTMap final
{
public:
	TMap<ERivalTeamForce, int32>                  ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetRivalTeamKillCountTMap) == 0x000008, "Wrong alignment on GameDataHistory_GetRivalTeamKillCountTMap");
static_assert(sizeof(GameDataHistory_GetRivalTeamKillCountTMap) == 0x000050, "Wrong size on GameDataHistory_GetRivalTeamKillCountTMap");
static_assert(offsetof(GameDataHistory_GetRivalTeamKillCountTMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetRivalTeamKillCountTMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetScoutedMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetScoutedMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetScoutedMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_GetScoutedMonsterCount");
static_assert(sizeof(GameDataHistory_GetScoutedMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_GetScoutedMonsterCount");
static_assert(offsetof(GameDataHistory_GetScoutedMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_GetScoutedMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetScoutedMonsterCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetScoutedMonsterCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetScoutedMonsterCountAll
// 0x0004 (0x0004 - 0x0000)
struct GameDataHistory_GetScoutedMonsterCountAll final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetScoutedMonsterCountAll) == 0x000004, "Wrong alignment on GameDataHistory_GetScoutedMonsterCountAll");
static_assert(sizeof(GameDataHistory_GetScoutedMonsterCountAll) == 0x000004, "Wrong size on GameDataHistory_GetScoutedMonsterCountAll");
static_assert(offsetof(GameDataHistory_GetScoutedMonsterCountAll, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetScoutedMonsterCountAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetScoutedMonsterCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetScoutedMonsterCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetScoutedMonsterCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetScoutedMonsterCountMap");
static_assert(sizeof(GameDataHistory_GetScoutedMonsterCountMap) == 0x000050, "Wrong size on GameDataHistory_GetScoutedMonsterCountMap");
static_assert(offsetof(GameDataHistory_GetScoutedMonsterCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetScoutedMonsterCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetStealedMonsterCount
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_GetStealedMonsterCount final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetStealedMonsterCount) == 0x000004, "Wrong alignment on GameDataHistory_GetStealedMonsterCount");
static_assert(sizeof(GameDataHistory_GetStealedMonsterCount) == 0x00000C, "Wrong size on GameDataHistory_GetStealedMonsterCount");
static_assert(offsetof(GameDataHistory_GetStealedMonsterCount, KindId) == 0x000000, "Member 'GameDataHistory_GetStealedMonsterCount::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_GetStealedMonsterCount, ReturnValue) == 0x000008, "Member 'GameDataHistory_GetStealedMonsterCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetStealedMonsterCountAll
// 0x0004 (0x0004 - 0x0000)
struct GameDataHistory_GetStealedMonsterCountAll final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetStealedMonsterCountAll) == 0x000004, "Wrong alignment on GameDataHistory_GetStealedMonsterCountAll");
static_assert(sizeof(GameDataHistory_GetStealedMonsterCountAll) == 0x000004, "Wrong size on GameDataHistory_GetStealedMonsterCountAll");
static_assert(offsetof(GameDataHistory_GetStealedMonsterCountAll, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetStealedMonsterCountAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.GetStealedMonsterCountMap
// 0x0050 (0x0050 - 0x0000)
struct GameDataHistory_GetStealedMonsterCountMap final
{
public:
	TMap<class FName, int32>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_GetStealedMonsterCountMap) == 0x000008, "Wrong alignment on GameDataHistory_GetStealedMonsterCountMap");
static_assert(sizeof(GameDataHistory_GetStealedMonsterCountMap) == 0x000050, "Wrong size on GameDataHistory_GetStealedMonsterCountMap");
static_assert(offsetof(GameDataHistory_GetStealedMonsterCountMap, ReturnValue) == 0x000000, "Member 'GameDataHistory_GetStealedMonsterCountMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsBuyItem
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsBuyItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsBuyItem) == 0x000004, "Wrong alignment on GameDataHistory_IsBuyItem");
static_assert(sizeof(GameDataHistory_IsBuyItem) == 0x00000C, "Wrong size on GameDataHistory_IsBuyItem");
static_assert(offsetof(GameDataHistory_IsBuyItem, ItemId) == 0x000000, "Member 'GameDataHistory_IsBuyItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsBuyItem, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsBuyItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsDefeatedMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsDefeatedMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsDefeatedMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsDefeatedMonster");
static_assert(sizeof(GameDataHistory_IsDefeatedMonster) == 0x00000C, "Wrong size on GameDataHistory_IsDefeatedMonster");
static_assert(offsetof(GameDataHistory_IsDefeatedMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsDefeatedMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsDefeatedMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsDefeatedMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsDestinationRect
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsDestinationRect final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsDestinationRect) == 0x000004, "Wrong alignment on GameDataHistory_IsDestinationRect");
static_assert(sizeof(GameDataHistory_IsDestinationRect) == 0x00000C, "Wrong size on GameDataHistory_IsDestinationRect");
static_assert(offsetof(GameDataHistory_IsDestinationRect, QuestID) == 0x000000, "Member 'GameDataHistory_IsDestinationRect::QuestID' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsDestinationRect, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsDestinationRect::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsDictMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsDictMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsDictMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsDictMonster");
static_assert(sizeof(GameDataHistory_IsDictMonster) == 0x00000C, "Wrong size on GameDataHistory_IsDictMonster");
static_assert(offsetof(GameDataHistory_IsDictMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsDictMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsDictMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsDictMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsFriendMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsFriendMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsFriendMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsFriendMonster");
static_assert(sizeof(GameDataHistory_IsFriendMonster) == 0x00000C, "Wrong size on GameDataHistory_IsFriendMonster");
static_assert(offsetof(GameDataHistory_IsFriendMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsFriendMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsFriendMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsFriendMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsGetItem
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsGetItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsGetItem) == 0x000004, "Wrong alignment on GameDataHistory_IsGetItem");
static_assert(sizeof(GameDataHistory_IsGetItem) == 0x00000C, "Wrong size on GameDataHistory_IsGetItem");
static_assert(offsetof(GameDataHistory_IsGetItem, ItemId) == 0x000000, "Member 'GameDataHistory_IsGetItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsGetItem, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsGetItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsKilledMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsKilledMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsKilledMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsKilledMonster");
static_assert(sizeof(GameDataHistory_IsKilledMonster) == 0x00000C, "Wrong size on GameDataHistory_IsKilledMonster");
static_assert(offsetof(GameDataHistory_IsKilledMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsKilledMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsKilledMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsKilledMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsKilledNightmareMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsKilledNightmareMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsKilledNightmareMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsKilledNightmareMonster");
static_assert(sizeof(GameDataHistory_IsKilledNightmareMonster) == 0x00000C, "Wrong size on GameDataHistory_IsKilledNightmareMonster");
static_assert(offsetof(GameDataHistory_IsKilledNightmareMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsKilledNightmareMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsKilledNightmareMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsKilledNightmareMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsMakeItem
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsMakeItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsMakeItem) == 0x000004, "Wrong alignment on GameDataHistory_IsMakeItem");
static_assert(sizeof(GameDataHistory_IsMakeItem) == 0x00000C, "Wrong size on GameDataHistory_IsMakeItem");
static_assert(offsetof(GameDataHistory_IsMakeItem, ItemId) == 0x000000, "Member 'GameDataHistory_IsMakeItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsMakeItem, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsMakeItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsRegisterItem
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsRegisterItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsRegisterItem) == 0x000004, "Wrong alignment on GameDataHistory_IsRegisterItem");
static_assert(sizeof(GameDataHistory_IsRegisterItem) == 0x00000C, "Wrong size on GameDataHistory_IsRegisterItem");
static_assert(offsetof(GameDataHistory_IsRegisterItem, ItemId) == 0x000000, "Member 'GameDataHistory_IsRegisterItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsRegisterItem, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsRegisterItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsRegisterMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsRegisterMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsRegisterMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsRegisterMonster");
static_assert(sizeof(GameDataHistory_IsRegisterMonster) == 0x00000C, "Wrong size on GameDataHistory_IsRegisterMonster");
static_assert(offsetof(GameDataHistory_IsRegisterMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsRegisterMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsRegisterMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsRegisterMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsRegisterRivalTeam
// 0x0002 (0x0002 - 0x0000)
struct GameDataHistory_IsRegisterRivalTeam final
{
public:
	ERivalTeamForce                               RivalTeam;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHistory_IsRegisterRivalTeam) == 0x000001, "Wrong alignment on GameDataHistory_IsRegisterRivalTeam");
static_assert(sizeof(GameDataHistory_IsRegisterRivalTeam) == 0x000002, "Wrong size on GameDataHistory_IsRegisterRivalTeam");
static_assert(offsetof(GameDataHistory_IsRegisterRivalTeam, RivalTeam) == 0x000000, "Member 'GameDataHistory_IsRegisterRivalTeam::RivalTeam' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsRegisterRivalTeam, ReturnValue) == 0x000001, "Member 'GameDataHistory_IsRegisterRivalTeam::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsScoutedMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsScoutedMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsScoutedMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsScoutedMonster");
static_assert(sizeof(GameDataHistory_IsScoutedMonster) == 0x00000C, "Wrong size on GameDataHistory_IsScoutedMonster");
static_assert(offsetof(GameDataHistory_IsScoutedMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsScoutedMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsScoutedMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsScoutedMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsSellItem
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsSellItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsSellItem) == 0x000004, "Wrong alignment on GameDataHistory_IsSellItem");
static_assert(sizeof(GameDataHistory_IsSellItem) == 0x00000C, "Wrong size on GameDataHistory_IsSellItem");
static_assert(offsetof(GameDataHistory_IsSellItem, ItemId) == 0x000000, "Member 'GameDataHistory_IsSellItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsSellItem, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsSellItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsStealedMonster
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsStealedMonster final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsStealedMonster) == 0x000004, "Wrong alignment on GameDataHistory_IsStealedMonster");
static_assert(sizeof(GameDataHistory_IsStealedMonster) == 0x00000C, "Wrong size on GameDataHistory_IsStealedMonster");
static_assert(offsetof(GameDataHistory_IsStealedMonster, KindId) == 0x000000, "Member 'GameDataHistory_IsStealedMonster::KindId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsStealedMonster, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsStealedMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsUseItemToEnemy
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsUseItemToEnemy final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsUseItemToEnemy) == 0x000004, "Wrong alignment on GameDataHistory_IsUseItemToEnemy");
static_assert(sizeof(GameDataHistory_IsUseItemToEnemy) == 0x00000C, "Wrong size on GameDataHistory_IsUseItemToEnemy");
static_assert(offsetof(GameDataHistory_IsUseItemToEnemy, ItemId) == 0x000000, "Member 'GameDataHistory_IsUseItemToEnemy::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsUseItemToEnemy, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsUseItemToEnemy::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsUseItemToFriend
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsUseItemToFriend final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsUseItemToFriend) == 0x000004, "Wrong alignment on GameDataHistory_IsUseItemToFriend");
static_assert(sizeof(GameDataHistory_IsUseItemToFriend) == 0x00000C, "Wrong size on GameDataHistory_IsUseItemToFriend");
static_assert(offsetof(GameDataHistory_IsUseItemToFriend, ItemId) == 0x000000, "Member 'GameDataHistory_IsUseItemToFriend::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsUseItemToFriend, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsUseItemToFriend::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHistory.IsUseItemToMe
// 0x000C (0x000C - 0x0000)
struct GameDataHistory_IsUseItemToMe final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataHistory_IsUseItemToMe) == 0x000004, "Wrong alignment on GameDataHistory_IsUseItemToMe");
static_assert(sizeof(GameDataHistory_IsUseItemToMe) == 0x00000C, "Wrong size on GameDataHistory_IsUseItemToMe");
static_assert(offsetof(GameDataHistory_IsUseItemToMe, ItemId) == 0x000000, "Member 'GameDataHistory_IsUseItemToMe::ItemId' has a wrong offset!");
static_assert(offsetof(GameDataHistory_IsUseItemToMe, ReturnValue) == 0x000008, "Member 'GameDataHistory_IsUseItemToMe::ReturnValue' has a wrong offset!");

// Function DarwinGame.AirShipBase.SetCollisionEnable
// 0x0001 (0x0001 - 0x0000)
struct AirShipBase_SetCollisionEnable final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AirShipBase_SetCollisionEnable) == 0x000001, "Wrong alignment on AirShipBase_SetCollisionEnable");
static_assert(sizeof(AirShipBase_SetCollisionEnable) == 0x000001, "Wrong size on AirShipBase_SetCollisionEnable");
static_assert(offsetof(AirShipBase_SetCollisionEnable, enable) == 0x000000, "Member 'AirShipBase_SetCollisionEnable::enable' has a wrong offset!");

// Function DarwinGame.AirStateBase.SetVelocity
// 0x000C (0x000C - 0x0000)
struct AirStateBase_SetVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AirStateBase_SetVelocity) == 0x000004, "Wrong alignment on AirStateBase_SetVelocity");
static_assert(sizeof(AirStateBase_SetVelocity) == 0x00000C, "Wrong size on AirStateBase_SetVelocity");
static_assert(offsetof(AirStateBase_SetVelocity, Velocity) == 0x000000, "Member 'AirStateBase_SetVelocity::Velocity' has a wrong offset!");

// Function DarwinGame.BelongingInterface.GetBelonging
// 0x0008 (0x0008 - 0x0000)
struct BelongingInterface_GetBelonging final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BelongingInterface_GetBelonging) == 0x000004, "Wrong alignment on BelongingInterface_GetBelonging");
static_assert(sizeof(BelongingInterface_GetBelonging) == 0x000008, "Wrong size on BelongingInterface_GetBelonging");
static_assert(offsetof(BelongingInterface_GetBelonging, ReturnValue) == 0x000000, "Member 'BelongingInterface_GetBelonging::ReturnValue' has a wrong offset!");

// Function DarwinGame.AirStateJump.CalculateJumpVelocity
// 0x000C (0x000C - 0x0000)
struct AirStateJump_CalculateJumpVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AirStateJump_CalculateJumpVelocity) == 0x000004, "Wrong alignment on AirStateJump_CalculateJumpVelocity");
static_assert(sizeof(AirStateJump_CalculateJumpVelocity) == 0x00000C, "Wrong size on AirStateJump_CalculateJumpVelocity");
static_assert(offsetof(AirStateJump_CalculateJumpVelocity, ReturnValue) == 0x000000, "Member 'AirStateJump_CalculateJumpVelocity::ReturnValue' has a wrong offset!");

// Function DarwinGame.SceneCaptureBase.GetCharacterActor
// 0x0008 (0x0008 - 0x0000)
struct SceneCaptureBase_GetCharacterActor final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureBase_GetCharacterActor) == 0x000008, "Wrong alignment on SceneCaptureBase_GetCharacterActor");
static_assert(sizeof(SceneCaptureBase_GetCharacterActor) == 0x000008, "Wrong size on SceneCaptureBase_GetCharacterActor");
static_assert(offsetof(SceneCaptureBase_GetCharacterActor, ReturnValue) == 0x000000, "Member 'SceneCaptureBase_GetCharacterActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIArtifact_Warehouse.SetPedestalIndex
// 0x0004 (0x0004 - 0x0000)
struct UIArtifact_Warehouse_SetPedestalIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIArtifact_Warehouse_SetPedestalIndex) == 0x000004, "Wrong alignment on UIArtifact_Warehouse_SetPedestalIndex");
static_assert(sizeof(UIArtifact_Warehouse_SetPedestalIndex) == 0x000004, "Wrong size on UIArtifact_Warehouse_SetPedestalIndex");
static_assert(offsetof(UIArtifact_Warehouse_SetPedestalIndex, Index_0) == 0x000000, "Member 'UIArtifact_Warehouse_SetPedestalIndex::Index_0' has a wrong offset!");

// Function DarwinGame.IndoorTriggerBase.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct IndoorTriggerBase_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndoorTriggerBase_OnBeginOverlap) == 0x000008, "Wrong alignment on IndoorTriggerBase_OnBeginOverlap");
static_assert(sizeof(IndoorTriggerBase_OnBeginOverlap) == 0x000010, "Wrong size on IndoorTriggerBase_OnBeginOverlap");
static_assert(offsetof(IndoorTriggerBase_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'IndoorTriggerBase_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(IndoorTriggerBase_OnBeginOverlap, OtherActor) == 0x000008, "Member 'IndoorTriggerBase_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function DarwinGame.IndoorTriggerBase.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct IndoorTriggerBase_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndoorTriggerBase_OnEndOverlap) == 0x000008, "Wrong alignment on IndoorTriggerBase_OnEndOverlap");
static_assert(sizeof(IndoorTriggerBase_OnEndOverlap) == 0x000010, "Wrong size on IndoorTriggerBase_OnEndOverlap");
static_assert(offsetof(IndoorTriggerBase_OnEndOverlap, OverlappedActor) == 0x000000, "Member 'IndoorTriggerBase_OnEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(IndoorTriggerBase_OnEndOverlap, OtherActor) == 0x000008, "Member 'IndoorTriggerBase_OnEndOverlap::OtherActor' has a wrong offset!");

// Function DarwinGame.AirStateStartLink.IsFalling
// 0x0001 (0x0001 - 0x0000)
struct AirStateStartLink_IsFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AirStateStartLink_IsFalling) == 0x000001, "Wrong alignment on AirStateStartLink_IsFalling");
static_assert(sizeof(AirStateStartLink_IsFalling) == 0x000001, "Wrong size on AirStateStartLink_IsFalling");
static_assert(offsetof(AirStateStartLink_IsFalling, ReturnValue) == 0x000000, "Member 'AirStateStartLink_IsFalling::ReturnValue' has a wrong offset!");

// Function DarwinGame.AirStateStartLink.IsLinkSuccessed
// 0x0001 (0x0001 - 0x0000)
struct AirStateStartLink_IsLinkSuccessed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AirStateStartLink_IsLinkSuccessed) == 0x000001, "Wrong alignment on AirStateStartLink_IsLinkSuccessed");
static_assert(sizeof(AirStateStartLink_IsLinkSuccessed) == 0x000001, "Wrong size on AirStateStartLink_IsLinkSuccessed");
static_assert(offsetof(AirStateStartLink_IsLinkSuccessed, ReturnValue) == 0x000000, "Member 'AirStateStartLink_IsLinkSuccessed::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAbilitySystemBlueprintLibrary.GetActionResult
// 0x00E8 (0x00E8 - 0x0000)
struct DarwinAbilitySystemBlueprintLibrary_GetActionResult final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FActionResult                          ReturnValue;                                       // 0x00B8(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAbilitySystemBlueprintLibrary_GetActionResult) == 0x000008, "Wrong alignment on DarwinAbilitySystemBlueprintLibrary_GetActionResult");
static_assert(sizeof(DarwinAbilitySystemBlueprintLibrary_GetActionResult) == 0x0000E8, "Wrong size on DarwinAbilitySystemBlueprintLibrary_GetActionResult");
static_assert(offsetof(DarwinAbilitySystemBlueprintLibrary_GetActionResult, Parameters) == 0x000000, "Member 'DarwinAbilitySystemBlueprintLibrary_GetActionResult::Parameters' has a wrong offset!");
static_assert(offsetof(DarwinAbilitySystemBlueprintLibrary_GetActionResult, ReturnValue) == 0x0000B8, "Member 'DarwinAbilitySystemBlueprintLibrary_GetActionResult::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAbilitySystemBlueprintLibrary.GetAttackResult
// 0x00F8 (0x00F8 - 0x0000)
struct DarwinAbilitySystemBlueprintLibrary_GetAttackResult final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAttackHitResultStruct                 ReturnValue;                                       // 0x00B8(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAbilitySystemBlueprintLibrary_GetAttackResult) == 0x000008, "Wrong alignment on DarwinAbilitySystemBlueprintLibrary_GetAttackResult");
static_assert(sizeof(DarwinAbilitySystemBlueprintLibrary_GetAttackResult) == 0x0000F8, "Wrong size on DarwinAbilitySystemBlueprintLibrary_GetAttackResult");
static_assert(offsetof(DarwinAbilitySystemBlueprintLibrary_GetAttackResult, Parameters) == 0x000000, "Member 'DarwinAbilitySystemBlueprintLibrary_GetAttackResult::Parameters' has a wrong offset!");
static_assert(offsetof(DarwinAbilitySystemBlueprintLibrary_GetAttackResult, ReturnValue) == 0x0000B8, "Member 'DarwinAbilitySystemBlueprintLibrary_GetAttackResult::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ActorIsCharacter
// 0x0010 (0x0010 - 0x0000)
struct DarwinBlueprintLibrary_ActorIsCharacter final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_ActorIsCharacter) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_ActorIsCharacter");
static_assert(sizeof(DarwinBlueprintLibrary_ActorIsCharacter) == 0x000010, "Wrong size on DarwinBlueprintLibrary_ActorIsCharacter");
static_assert(offsetof(DarwinBlueprintLibrary_ActorIsCharacter, Target) == 0x000000, "Member 'DarwinBlueprintLibrary_ActorIsCharacter::Target' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ActorIsCharacter, ReturnValue) == 0x000008, "Member 'DarwinBlueprintLibrary_ActorIsCharacter::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ActorIsPlayer
// 0x0010 (0x0010 - 0x0000)
struct DarwinBlueprintLibrary_ActorIsPlayer final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_ActorIsPlayer) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_ActorIsPlayer");
static_assert(sizeof(DarwinBlueprintLibrary_ActorIsPlayer) == 0x000010, "Wrong size on DarwinBlueprintLibrary_ActorIsPlayer");
static_assert(offsetof(DarwinBlueprintLibrary_ActorIsPlayer, Target) == 0x000000, "Member 'DarwinBlueprintLibrary_ActorIsPlayer::Target' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ActorIsPlayer, ReturnValue) == 0x000008, "Member 'DarwinBlueprintLibrary_ActorIsPlayer::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.AddTargetsToEffectContainerSpec
// 0x0090 (0x0090 - 0x0000)
struct DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec final
{
public:
	struct FActionGameplayEffectContainerSpec     ContainerSpec;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         TargetActors;                                      // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGameplayEffectContainerSpec     ReturnValue;                                       // 0x0058(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec");
static_assert(sizeof(DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec) == 0x000090, "Wrong size on DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec");
static_assert(offsetof(DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec, ContainerSpec) == 0x000000, "Member 'DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec::ContainerSpec' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec, HitResults) == 0x000038, "Member 'DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec::HitResults' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec, TargetActors) == 0x000048, "Member 'DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec::TargetActors' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec, ReturnValue) == 0x000058, "Member 'DarwinBlueprintLibrary_AddTargetsToEffectContainerSpec::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ApplyExternalEffectContainerSpec
// 0x0048 (0x0048 - 0x0000)
struct DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec final
{
public:
	struct FActionGameplayEffectContainerSpec     ContainerSpec;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec");
static_assert(sizeof(DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec) == 0x000048, "Wrong size on DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec");
static_assert(offsetof(DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec, ContainerSpec) == 0x000000, "Member 'DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec::ContainerSpec' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec, ReturnValue) == 0x000038, "Member 'DarwinBlueprintLibrary_ApplyExternalEffectContainerSpec::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ASyncLoadAsset
// 0x0028 (0x0028 - 0x0000)
struct DarwinBlueprintLibrary_ASyncLoadAsset final
{
public:
	struct FSoftObjectPath                        targetsToStream;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FASyncLoadInfo                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_ASyncLoadAsset) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_ASyncLoadAsset");
static_assert(sizeof(DarwinBlueprintLibrary_ASyncLoadAsset) == 0x000028, "Wrong size on DarwinBlueprintLibrary_ASyncLoadAsset");
static_assert(offsetof(DarwinBlueprintLibrary_ASyncLoadAsset, targetsToStream) == 0x000000, "Member 'DarwinBlueprintLibrary_ASyncLoadAsset::targetsToStream' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ASyncLoadAsset, ReturnValue) == 0x000018, "Member 'DarwinBlueprintLibrary_ASyncLoadAsset::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ASyncLoadAssets
// 0x0020 (0x0020 - 0x0000)
struct DarwinBlueprintLibrary_ASyncLoadAssets final
{
public:
	TArray<struct FSoftObjectPath>                targetsToStream;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FASyncLoadInfo                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_ASyncLoadAssets) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_ASyncLoadAssets");
static_assert(sizeof(DarwinBlueprintLibrary_ASyncLoadAssets) == 0x000020, "Wrong size on DarwinBlueprintLibrary_ASyncLoadAssets");
static_assert(offsetof(DarwinBlueprintLibrary_ASyncLoadAssets, targetsToStream) == 0x000000, "Member 'DarwinBlueprintLibrary_ASyncLoadAssets::targetsToStream' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ASyncLoadAssets, ReturnValue) == 0x000010, "Member 'DarwinBlueprintLibrary_ASyncLoadAssets::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.BoxOverlapActors
// 0x0070 (0x0070 - 0x0000)
struct DarwinBlueprintLibrary_BoxOverlapActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoxRotation;                                       // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClassFilter;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_BoxOverlapActors) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_BoxOverlapActors");
static_assert(sizeof(DarwinBlueprintLibrary_BoxOverlapActors) == 0x000070, "Wrong size on DarwinBlueprintLibrary_BoxOverlapActors");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, BoxPos) == 0x000008, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::BoxPos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, BoxExtent) == 0x000014, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::BoxExtent' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, BoxRotation) == 0x000020, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::BoxRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, ObjectTypes) == 0x000030, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::ObjectTypes' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, ActorClassFilter) == 0x000040, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, ActorsToIgnore) == 0x000048, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, OutActors) == 0x000058, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::OutActors' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActors, ReturnValue) == 0x000068, "Member 'DarwinBlueprintLibrary_BoxOverlapActors::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.BoxOverlapActorsByProfile
// 0x0068 (0x0068 - 0x0000)
struct DarwinBlueprintLibrary_BoxOverlapActorsByProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoxRotation;                                       // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x002C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActorClassFilter;                                  // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_BoxOverlapActorsByProfile");
static_assert(sizeof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile) == 0x000068, "Wrong size on DarwinBlueprintLibrary_BoxOverlapActorsByProfile");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, BoxPos) == 0x000008, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::BoxPos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, BoxExtent) == 0x000014, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::BoxExtent' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, BoxRotation) == 0x000020, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::BoxRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, ProfileName) == 0x00002C, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, ActorClassFilter) == 0x000038, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, ActorsToIgnore) == 0x000040, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, OutActors) == 0x000050, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::OutActors' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapActorsByProfile, ReturnValue) == 0x000060, "Member 'DarwinBlueprintLibrary_BoxOverlapActorsByProfile::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.BoxOverlapComponents
// 0x0070 (0x0070 - 0x0000)
struct DarwinBlueprintLibrary_BoxOverlapComponents final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoxRotation;                                       // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ComponentClassFilter;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_BoxOverlapComponents) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_BoxOverlapComponents");
static_assert(sizeof(DarwinBlueprintLibrary_BoxOverlapComponents) == 0x000070, "Wrong size on DarwinBlueprintLibrary_BoxOverlapComponents");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, BoxPos) == 0x000008, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::BoxPos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, BoxExtent) == 0x000014, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::BoxExtent' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, BoxRotation) == 0x000020, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::BoxRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, ObjectTypes) == 0x000030, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::ObjectTypes' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, ComponentClassFilter) == 0x000040, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::ComponentClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, ActorsToIgnore) == 0x000048, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, OutComponents) == 0x000058, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::OutComponents' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponents, ReturnValue) == 0x000068, "Member 'DarwinBlueprintLibrary_BoxOverlapComponents::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.BoxOverlapComponentsByProfile
// 0x0068 (0x0068 - 0x0000)
struct DarwinBlueprintLibrary_BoxOverlapComponentsByProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxPos;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoxRotation;                                       // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x002C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ComponentClassFilter;                              // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_BoxOverlapComponentsByProfile");
static_assert(sizeof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile) == 0x000068, "Wrong size on DarwinBlueprintLibrary_BoxOverlapComponentsByProfile");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, BoxPos) == 0x000008, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::BoxPos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, BoxExtent) == 0x000014, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::BoxExtent' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, BoxRotation) == 0x000020, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::BoxRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, ProfileName) == 0x00002C, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, ComponentClassFilter) == 0x000038, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::ComponentClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, ActorsToIgnore) == 0x000040, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, OutComponents) == 0x000050, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::OutComponents' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_BoxOverlapComponentsByProfile, ReturnValue) == 0x000060, "Member 'DarwinBlueprintLibrary_BoxOverlapComponentsByProfile::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.CapsuleOverlapActors
// 0x0068 (0x0068 - 0x0000)
struct DarwinBlueprintLibrary_CapsuleOverlapActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos;                                        // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRotation;                                   // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClassFilter;                                  // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_CapsuleOverlapActors) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_CapsuleOverlapActors");
static_assert(sizeof(DarwinBlueprintLibrary_CapsuleOverlapActors) == 0x000068, "Wrong size on DarwinBlueprintLibrary_CapsuleOverlapActors");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, CapsulePos) == 0x000008, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::CapsulePos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, Radius) == 0x000014, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, HalfHeight) == 0x000018, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::HalfHeight' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, CapsuleRotation) == 0x00001C, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::CapsuleRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, ObjectTypes) == 0x000028, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::ObjectTypes' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, ActorClassFilter) == 0x000038, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, ActorsToIgnore) == 0x000040, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, OutActors) == 0x000050, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::OutActors' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActors, ReturnValue) == 0x000060, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActors::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.CapsuleOverlapActorsByProfile
// 0x0060 (0x0060 - 0x0000)
struct DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos;                                        // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRotation;                                   // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClassFilter;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile");
static_assert(sizeof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile) == 0x000060, "Wrong size on DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, CapsulePos) == 0x000008, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::CapsulePos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, Radius) == 0x000014, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, HalfHeight) == 0x000018, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::HalfHeight' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, CapsuleRotation) == 0x00001C, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::CapsuleRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, ProfileName) == 0x000028, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, ActorClassFilter) == 0x000030, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, ActorsToIgnore) == 0x000038, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, OutActors) == 0x000048, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::OutActors' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile, ReturnValue) == 0x000058, "Member 'DarwinBlueprintLibrary_CapsuleOverlapActorsByProfile::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.CapsuleOverlapComponents
// 0x0068 (0x0068 - 0x0000)
struct DarwinBlueprintLibrary_CapsuleOverlapComponents final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos;                                        // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRotation;                                   // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ComponentClassFilter;                              // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_CapsuleOverlapComponents) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_CapsuleOverlapComponents");
static_assert(sizeof(DarwinBlueprintLibrary_CapsuleOverlapComponents) == 0x000068, "Wrong size on DarwinBlueprintLibrary_CapsuleOverlapComponents");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, CapsulePos) == 0x000008, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::CapsulePos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, Radius) == 0x000014, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, HalfHeight) == 0x000018, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::HalfHeight' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, CapsuleRotation) == 0x00001C, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::CapsuleRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, ObjectTypes) == 0x000028, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::ObjectTypes' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, ComponentClassFilter) == 0x000038, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::ComponentClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, ActorsToIgnore) == 0x000040, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, OutComponents) == 0x000050, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::OutComponents' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponents, ReturnValue) == 0x000060, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponents::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.CapsuleOverlapComponentsByProfile
// 0x0060 (0x0060 - 0x0000)
struct DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos;                                        // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRotation;                                   // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ComponentClassFilter;                              // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            OutComponents;                                     // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile");
static_assert(sizeof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile) == 0x000060, "Wrong size on DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, WorldContextObject) == 0x000000, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, CapsulePos) == 0x000008, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::CapsulePos' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, Radius) == 0x000014, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, HalfHeight) == 0x000018, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::HalfHeight' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, CapsuleRotation) == 0x00001C, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::CapsuleRotation' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, ProfileName) == 0x000028, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, ComponentClassFilter) == 0x000030, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::ComponentClassFilter' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, ActorsToIgnore) == 0x000038, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, OutComponents) == 0x000048, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::OutComponents' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile, ReturnValue) == 0x000058, "Member 'DarwinBlueprintLibrary_CapsuleOverlapComponentsByProfile::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.CheckCurrentFloor
// 0x0028 (0x0028 - 0x0000)
struct DarwinBlueprintLibrary_CheckCurrentFloor final
{
public:
	class AActor*                                 observe;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtendScaleToUpward;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_CheckCurrentFloor) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_CheckCurrentFloor");
static_assert(sizeof(DarwinBlueprintLibrary_CheckCurrentFloor) == 0x000028, "Wrong size on DarwinBlueprintLibrary_CheckCurrentFloor");
static_assert(offsetof(DarwinBlueprintLibrary_CheckCurrentFloor, observe) == 0x000000, "Member 'DarwinBlueprintLibrary_CheckCurrentFloor::observe' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CheckCurrentFloor, Height) == 0x000008, "Member 'DarwinBlueprintLibrary_CheckCurrentFloor::Height' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CheckCurrentFloor, Radius) == 0x00000C, "Member 'DarwinBlueprintLibrary_CheckCurrentFloor::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CheckCurrentFloor, ExtendScaleToUpward) == 0x000010, "Member 'DarwinBlueprintLibrary_CheckCurrentFloor::ExtendScaleToUpward' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_CheckCurrentFloor, ReturnValue) == 0x000018, "Member 'DarwinBlueprintLibrary_CheckCurrentFloor::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.DataTableRemoveAssetInfo
// 0x0008 (0x0008 - 0x0000)
struct DarwinBlueprintLibrary_DataTableRemoveAssetInfo final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_DataTableRemoveAssetInfo) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_DataTableRemoveAssetInfo");
static_assert(sizeof(DarwinBlueprintLibrary_DataTableRemoveAssetInfo) == 0x000008, "Wrong size on DarwinBlueprintLibrary_DataTableRemoveAssetInfo");
static_assert(offsetof(DarwinBlueprintLibrary_DataTableRemoveAssetInfo, DataTable) == 0x000000, "Member 'DarwinBlueprintLibrary_DataTableRemoveAssetInfo::DataTable' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.DoesEffectContainerSpecHaveEffects
// 0x0040 (0x0040 - 0x0000)
struct DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects final
{
public:
	struct FActionGameplayEffectContainerSpec     ContainerSpec;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects");
static_assert(sizeof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects) == 0x000040, "Wrong size on DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects");
static_assert(offsetof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects, ContainerSpec) == 0x000000, "Member 'DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects::ContainerSpec' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects, ReturnValue) == 0x000038, "Member 'DarwinBlueprintLibrary_DoesEffectContainerSpecHaveEffects::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.DoesEffectContainerSpecHaveTargets
// 0x0040 (0x0040 - 0x0000)
struct DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets final
{
public:
	struct FActionGameplayEffectContainerSpec     ContainerSpec;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets");
static_assert(sizeof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets) == 0x000040, "Wrong size on DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets");
static_assert(offsetof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets, ContainerSpec) == 0x000000, "Member 'DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets::ContainerSpec' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets, ReturnValue) == 0x000038, "Member 'DarwinBlueprintLibrary_DoesEffectContainerSpecHaveTargets::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.DoesTagBelongToEnemy
// 0x000C (0x000C - 0x0000)
struct DarwinBlueprintLibrary_DoesTagBelongToEnemy final
{
public:
	struct FGameplayTag                           Belong;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_DoesTagBelongToEnemy) == 0x000004, "Wrong alignment on DarwinBlueprintLibrary_DoesTagBelongToEnemy");
static_assert(sizeof(DarwinBlueprintLibrary_DoesTagBelongToEnemy) == 0x00000C, "Wrong size on DarwinBlueprintLibrary_DoesTagBelongToEnemy");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTagBelongToEnemy, Belong) == 0x000000, "Member 'DarwinBlueprintLibrary_DoesTagBelongToEnemy::Belong' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTagBelongToEnemy, ReturnValue) == 0x000008, "Member 'DarwinBlueprintLibrary_DoesTagBelongToEnemy::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.DoesTargetBlongToAlly
// 0x0010 (0x0010 - 0x0000)
struct DarwinBlueprintLibrary_DoesTargetBlongToAlly final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_DoesTargetBlongToAlly) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_DoesTargetBlongToAlly");
static_assert(sizeof(DarwinBlueprintLibrary_DoesTargetBlongToAlly) == 0x000010, "Wrong size on DarwinBlueprintLibrary_DoesTargetBlongToAlly");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTargetBlongToAlly, Target) == 0x000000, "Member 'DarwinBlueprintLibrary_DoesTargetBlongToAlly::Target' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTargetBlongToAlly, ReturnValue) == 0x000008, "Member 'DarwinBlueprintLibrary_DoesTargetBlongToAlly::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.DoesTargetBlongToEnemy
// 0x0010 (0x0010 - 0x0000)
struct DarwinBlueprintLibrary_DoesTargetBlongToEnemy final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_DoesTargetBlongToEnemy) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_DoesTargetBlongToEnemy");
static_assert(sizeof(DarwinBlueprintLibrary_DoesTargetBlongToEnemy) == 0x000010, "Wrong size on DarwinBlueprintLibrary_DoesTargetBlongToEnemy");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTargetBlongToEnemy, Target) == 0x000000, "Member 'DarwinBlueprintLibrary_DoesTargetBlongToEnemy::Target' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTargetBlongToEnemy, ReturnValue) == 0x000008, "Member 'DarwinBlueprintLibrary_DoesTargetBlongToEnemy::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.DoesTargetBlongToSameDepartment
// 0x0018 (0x0018 - 0x0000)
struct DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment");
static_assert(sizeof(DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment) == 0x000018, "Wrong size on DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment, Source) == 0x000000, "Member 'DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment::Source' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment, Target) == 0x000008, "Member 'DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment::Target' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment, ReturnValue) == 0x000010, "Member 'DarwinBlueprintLibrary_DoesTargetBlongToSameDepartment::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ExportCSVFromDataTable
// 0x0020 (0x0020 - 0x0000)
struct DarwinBlueprintLibrary_ExportCSVFromDataTable final
{
public:
	const class UDataTable*                       DataTable;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_ExportCSVFromDataTable) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_ExportCSVFromDataTable");
static_assert(sizeof(DarwinBlueprintLibrary_ExportCSVFromDataTable) == 0x000020, "Wrong size on DarwinBlueprintLibrary_ExportCSVFromDataTable");
static_assert(offsetof(DarwinBlueprintLibrary_ExportCSVFromDataTable, DataTable) == 0x000000, "Member 'DarwinBlueprintLibrary_ExportCSVFromDataTable::DataTable' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ExportCSVFromDataTable, FilePath) == 0x000008, "Member 'DarwinBlueprintLibrary_ExportCSVFromDataTable::FilePath' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ExportCSVFromDataTable, ReturnValue) == 0x000018, "Member 'DarwinBlueprintLibrary_ExportCSVFromDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.FindNPC
// 0x0018 (0x0018 - 0x0000)
struct DarwinBlueprintLibrary_FindNPC final
{
public:
	float                                         FindDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FindAngle;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_FindNPC) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_FindNPC");
static_assert(sizeof(DarwinBlueprintLibrary_FindNPC) == 0x000018, "Wrong size on DarwinBlueprintLibrary_FindNPC");
static_assert(offsetof(DarwinBlueprintLibrary_FindNPC, FindDistance) == 0x000000, "Member 'DarwinBlueprintLibrary_FindNPC::FindDistance' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_FindNPC, FindAngle) == 0x000004, "Member 'DarwinBlueprintLibrary_FindNPC::FindAngle' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_FindNPC, ObjectTypes) == 0x000008, "Member 'DarwinBlueprintLibrary_FindNPC::ObjectTypes' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ForceGarbageCollection
// 0x0001 (0x0001 - 0x0000)
struct DarwinBlueprintLibrary_ForceGarbageCollection final
{
public:
	bool                                          bFullPurge;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_ForceGarbageCollection) == 0x000001, "Wrong alignment on DarwinBlueprintLibrary_ForceGarbageCollection");
static_assert(sizeof(DarwinBlueprintLibrary_ForceGarbageCollection) == 0x000001, "Wrong size on DarwinBlueprintLibrary_ForceGarbageCollection");
static_assert(offsetof(DarwinBlueprintLibrary_ForceGarbageCollection, bFullPurge) == 0x000000, "Member 'DarwinBlueprintLibrary_ForceGarbageCollection::bFullPurge' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetAnimationAsset
// 0x0020 (0x0020 - 0x0000)
struct DarwinBlueprintLibrary_GetAnimationAsset final
{
public:
	struct FSoftObjectPath                        SoftObjectPath;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_GetAnimationAsset) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_GetAnimationAsset");
static_assert(sizeof(DarwinBlueprintLibrary_GetAnimationAsset) == 0x000020, "Wrong size on DarwinBlueprintLibrary_GetAnimationAsset");
static_assert(offsetof(DarwinBlueprintLibrary_GetAnimationAsset, SoftObjectPath) == 0x000000, "Member 'DarwinBlueprintLibrary_GetAnimationAsset::SoftObjectPath' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_GetAnimationAsset, ReturnValue) == 0x000018, "Member 'DarwinBlueprintLibrary_GetAnimationAsset::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetAverageFPS
// 0x0004 (0x0004 - 0x0000)
struct DarwinBlueprintLibrary_GetAverageFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_GetAverageFPS) == 0x000004, "Wrong alignment on DarwinBlueprintLibrary_GetAverageFPS");
static_assert(sizeof(DarwinBlueprintLibrary_GetAverageFPS) == 0x000004, "Wrong size on DarwinBlueprintLibrary_GetAverageFPS");
static_assert(offsetof(DarwinBlueprintLibrary_GetAverageFPS, ReturnValue) == 0x000000, "Member 'DarwinBlueprintLibrary_GetAverageFPS::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetAverageMS
// 0x0004 (0x0004 - 0x0000)
struct DarwinBlueprintLibrary_GetAverageMS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_GetAverageMS) == 0x000004, "Wrong alignment on DarwinBlueprintLibrary_GetAverageMS");
static_assert(sizeof(DarwinBlueprintLibrary_GetAverageMS) == 0x000004, "Wrong size on DarwinBlueprintLibrary_GetAverageMS");
static_assert(offsetof(DarwinBlueprintLibrary_GetAverageMS, ReturnValue) == 0x000000, "Member 'DarwinBlueprintLibrary_GetAverageMS::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetIntegerByName
// 0x0018 (0x0018 - 0x0000)
struct DarwinBlueprintLibrary_GetIntegerByName final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VarName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutInteger;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_GetIntegerByName) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_GetIntegerByName");
static_assert(sizeof(DarwinBlueprintLibrary_GetIntegerByName) == 0x000018, "Wrong size on DarwinBlueprintLibrary_GetIntegerByName");
static_assert(offsetof(DarwinBlueprintLibrary_GetIntegerByName, Target) == 0x000000, "Member 'DarwinBlueprintLibrary_GetIntegerByName::Target' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_GetIntegerByName, VarName) == 0x000008, "Member 'DarwinBlueprintLibrary_GetIntegerByName::VarName' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_GetIntegerByName, OutInteger) == 0x000010, "Member 'DarwinBlueprintLibrary_GetIntegerByName::OutInteger' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_GetIntegerByName, ReturnValue) == 0x000014, "Member 'DarwinBlueprintLibrary_GetIntegerByName::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetLoadAsset
// 0x0018 (0x0018 - 0x0000)
struct DarwinBlueprintLibrary_GetLoadAsset final
{
public:
	struct FASyncLoadInfo                         ASyncLoadInfo;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                LoadAsset;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_GetLoadAsset) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_GetLoadAsset");
static_assert(sizeof(DarwinBlueprintLibrary_GetLoadAsset) == 0x000018, "Wrong size on DarwinBlueprintLibrary_GetLoadAsset");
static_assert(offsetof(DarwinBlueprintLibrary_GetLoadAsset, ASyncLoadInfo) == 0x000000, "Member 'DarwinBlueprintLibrary_GetLoadAsset::ASyncLoadInfo' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_GetLoadAsset, LoadAsset) == 0x000010, "Member 'DarwinBlueprintLibrary_GetLoadAsset::LoadAsset' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetLoadAssets
// 0x0020 (0x0020 - 0x0000)
struct DarwinBlueprintLibrary_GetLoadAssets final
{
public:
	struct FASyncLoadInfo                         ASyncLoadInfo;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        loadAssets;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_GetLoadAssets) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_GetLoadAssets");
static_assert(sizeof(DarwinBlueprintLibrary_GetLoadAssets) == 0x000020, "Wrong size on DarwinBlueprintLibrary_GetLoadAssets");
static_assert(offsetof(DarwinBlueprintLibrary_GetLoadAssets, ASyncLoadInfo) == 0x000000, "Member 'DarwinBlueprintLibrary_GetLoadAssets::ASyncLoadInfo' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_GetLoadAssets, loadAssets) == 0x000010, "Member 'DarwinBlueprintLibrary_GetLoadAssets::loadAssets' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetTargetFPS
// 0x0004 (0x0004 - 0x0000)
struct DarwinBlueprintLibrary_GetTargetFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_GetTargetFPS) == 0x000004, "Wrong alignment on DarwinBlueprintLibrary_GetTargetFPS");
static_assert(sizeof(DarwinBlueprintLibrary_GetTargetFPS) == 0x000004, "Wrong size on DarwinBlueprintLibrary_GetTargetFPS");
static_assert(offsetof(DarwinBlueprintLibrary_GetTargetFPS, ReturnValue) == 0x000000, "Member 'DarwinBlueprintLibrary_GetTargetFPS::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.GetTargetMS
// 0x0004 (0x0004 - 0x0000)
struct DarwinBlueprintLibrary_GetTargetMS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_GetTargetMS) == 0x000004, "Wrong alignment on DarwinBlueprintLibrary_GetTargetMS");
static_assert(sizeof(DarwinBlueprintLibrary_GetTargetMS) == 0x000004, "Wrong size on DarwinBlueprintLibrary_GetTargetMS");
static_assert(offsetof(DarwinBlueprintLibrary_GetTargetMS, ReturnValue) == 0x000000, "Member 'DarwinBlueprintLibrary_GetTargetMS::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.IsConfigFixedFrameRate
// 0x0001 (0x0001 - 0x0000)
struct DarwinBlueprintLibrary_IsConfigFixedFrameRate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_IsConfigFixedFrameRate) == 0x000001, "Wrong alignment on DarwinBlueprintLibrary_IsConfigFixedFrameRate");
static_assert(sizeof(DarwinBlueprintLibrary_IsConfigFixedFrameRate) == 0x000001, "Wrong size on DarwinBlueprintLibrary_IsConfigFixedFrameRate");
static_assert(offsetof(DarwinBlueprintLibrary_IsConfigFixedFrameRate, ReturnValue) == 0x000000, "Member 'DarwinBlueprintLibrary_IsConfigFixedFrameRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.IsExistAsset
// 0x0018 (0x0018 - 0x0000)
struct DarwinBlueprintLibrary_IsExistAsset final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_IsExistAsset) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_IsExistAsset");
static_assert(sizeof(DarwinBlueprintLibrary_IsExistAsset) == 0x000018, "Wrong size on DarwinBlueprintLibrary_IsExistAsset");
static_assert(offsetof(DarwinBlueprintLibrary_IsExistAsset, Path) == 0x000000, "Member 'DarwinBlueprintLibrary_IsExistAsset::Path' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsExistAsset, ReturnValue) == 0x000010, "Member 'DarwinBlueprintLibrary_IsExistAsset::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.IsFinishedASyncLoad
// 0x0018 (0x0018 - 0x0000)
struct DarwinBlueprintLibrary_IsFinishedASyncLoad final
{
public:
	struct FASyncLoadInfo                         ASyncLoadInfo;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_IsFinishedASyncLoad) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_IsFinishedASyncLoad");
static_assert(sizeof(DarwinBlueprintLibrary_IsFinishedASyncLoad) == 0x000018, "Wrong size on DarwinBlueprintLibrary_IsFinishedASyncLoad");
static_assert(offsetof(DarwinBlueprintLibrary_IsFinishedASyncLoad, ASyncLoadInfo) == 0x000000, "Member 'DarwinBlueprintLibrary_IsFinishedASyncLoad::ASyncLoadInfo' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsFinishedASyncLoad, ReturnValue) == 0x000010, "Member 'DarwinBlueprintLibrary_IsFinishedASyncLoad::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.IsHitLocationAtFeet
// 0x00A0 (0x00A0 - 0x0000)
struct DarwinBlueprintLibrary_IsHitLocationAtFeet final
{
public:
	class AActor*                                 observe;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_IsHitLocationAtFeet) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_IsHitLocationAtFeet");
static_assert(sizeof(DarwinBlueprintLibrary_IsHitLocationAtFeet) == 0x0000A0, "Wrong size on DarwinBlueprintLibrary_IsHitLocationAtFeet");
static_assert(offsetof(DarwinBlueprintLibrary_IsHitLocationAtFeet, observe) == 0x000000, "Member 'DarwinBlueprintLibrary_IsHitLocationAtFeet::observe' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsHitLocationAtFeet, Height) == 0x000008, "Member 'DarwinBlueprintLibrary_IsHitLocationAtFeet::Height' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsHitLocationAtFeet, Radius) == 0x00000C, "Member 'DarwinBlueprintLibrary_IsHitLocationAtFeet::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsHitLocationAtFeet, Hit) == 0x000010, "Member 'DarwinBlueprintLibrary_IsHitLocationAtFeet::Hit' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsHitLocationAtFeet, ReturnValue) == 0x000098, "Member 'DarwinBlueprintLibrary_IsHitLocationAtFeet::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.IsObjectFaceToFace
// 0x001C (0x001C - 0x0000)
struct DarwinBlueprintLibrary_IsObjectFaceToFace final
{
public:
	struct FRotator                               A;                                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               B;                                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_IsObjectFaceToFace) == 0x000004, "Wrong alignment on DarwinBlueprintLibrary_IsObjectFaceToFace");
static_assert(sizeof(DarwinBlueprintLibrary_IsObjectFaceToFace) == 0x00001C, "Wrong size on DarwinBlueprintLibrary_IsObjectFaceToFace");
static_assert(offsetof(DarwinBlueprintLibrary_IsObjectFaceToFace, A) == 0x000000, "Member 'DarwinBlueprintLibrary_IsObjectFaceToFace::A' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsObjectFaceToFace, B) == 0x00000C, "Member 'DarwinBlueprintLibrary_IsObjectFaceToFace::B' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsObjectFaceToFace, ReturnValue) == 0x000018, "Member 'DarwinBlueprintLibrary_IsObjectFaceToFace::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.IsOnFloor
// 0x0018 (0x0018 - 0x0000)
struct DarwinBlueprintLibrary_IsOnFloor final
{
public:
	class AActor*                                 observe;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtendScaleToUpward;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_IsOnFloor) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_IsOnFloor");
static_assert(sizeof(DarwinBlueprintLibrary_IsOnFloor) == 0x000018, "Wrong size on DarwinBlueprintLibrary_IsOnFloor");
static_assert(offsetof(DarwinBlueprintLibrary_IsOnFloor, observe) == 0x000000, "Member 'DarwinBlueprintLibrary_IsOnFloor::observe' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsOnFloor, Height) == 0x000008, "Member 'DarwinBlueprintLibrary_IsOnFloor::Height' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsOnFloor, Radius) == 0x00000C, "Member 'DarwinBlueprintLibrary_IsOnFloor::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsOnFloor, ExtendScaleToUpward) == 0x000010, "Member 'DarwinBlueprintLibrary_IsOnFloor::ExtendScaleToUpward' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_IsOnFloor, ReturnValue) == 0x000014, "Member 'DarwinBlueprintLibrary_IsOnFloor::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.ReleaseASyncLoad
// 0x0020 (0x0020 - 0x0000)
struct DarwinBlueprintLibrary_ReleaseASyncLoad final
{
public:
	struct FASyncLoadInfo                         inAsyncLoadInfo;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FASyncLoadInfo                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_ReleaseASyncLoad) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_ReleaseASyncLoad");
static_assert(sizeof(DarwinBlueprintLibrary_ReleaseASyncLoad) == 0x000020, "Wrong size on DarwinBlueprintLibrary_ReleaseASyncLoad");
static_assert(offsetof(DarwinBlueprintLibrary_ReleaseASyncLoad, inAsyncLoadInfo) == 0x000000, "Member 'DarwinBlueprintLibrary_ReleaseASyncLoad::inAsyncLoadInfo' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_ReleaseASyncLoad, ReturnValue) == 0x000010, "Member 'DarwinBlueprintLibrary_ReleaseASyncLoad::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.SetFixedFrameRate
// 0x0008 (0x0008 - 0x0000)
struct DarwinBlueprintLibrary_SetFixedFrameRate final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FPS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_SetFixedFrameRate) == 0x000004, "Wrong alignment on DarwinBlueprintLibrary_SetFixedFrameRate");
static_assert(sizeof(DarwinBlueprintLibrary_SetFixedFrameRate) == 0x000008, "Wrong size on DarwinBlueprintLibrary_SetFixedFrameRate");
static_assert(offsetof(DarwinBlueprintLibrary_SetFixedFrameRate, bUse) == 0x000000, "Member 'DarwinBlueprintLibrary_SetFixedFrameRate::bUse' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_SetFixedFrameRate, FPS) == 0x000004, "Member 'DarwinBlueprintLibrary_SetFixedFrameRate::FPS' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.SetIntegerByName
// 0x0020 (0x0020 - 0x0000)
struct DarwinBlueprintLibrary_SetIntegerByName final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VarName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutInteger;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_SetIntegerByName) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_SetIntegerByName");
static_assert(sizeof(DarwinBlueprintLibrary_SetIntegerByName) == 0x000020, "Wrong size on DarwinBlueprintLibrary_SetIntegerByName");
static_assert(offsetof(DarwinBlueprintLibrary_SetIntegerByName, Target) == 0x000000, "Member 'DarwinBlueprintLibrary_SetIntegerByName::Target' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_SetIntegerByName, VarName) == 0x000008, "Member 'DarwinBlueprintLibrary_SetIntegerByName::VarName' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_SetIntegerByName, NewValue) == 0x000010, "Member 'DarwinBlueprintLibrary_SetIntegerByName::NewValue' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_SetIntegerByName, OutInteger) == 0x000014, "Member 'DarwinBlueprintLibrary_SetIntegerByName::OutInteger' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_SetIntegerByName, ReturnValue) == 0x000018, "Member 'DarwinBlueprintLibrary_SetIntegerByName::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.SpawnActor
// 0x0050 (0x0050 - 0x0000)
struct DarwinBlueprintLibrary_SpawnActor final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_SpawnActor) == 0x000010, "Wrong alignment on DarwinBlueprintLibrary_SpawnActor");
static_assert(sizeof(DarwinBlueprintLibrary_SpawnActor) == 0x000050, "Wrong size on DarwinBlueprintLibrary_SpawnActor");
static_assert(offsetof(DarwinBlueprintLibrary_SpawnActor, Object) == 0x000000, "Member 'DarwinBlueprintLibrary_SpawnActor::Object' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_SpawnActor, Transform) == 0x000010, "Member 'DarwinBlueprintLibrary_SpawnActor::Transform' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_SpawnActor, ReturnValue) == 0x000040, "Member 'DarwinBlueprintLibrary_SpawnActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.UnlockPCAchievement
// 0x0001 (0x0001 - 0x0000)
struct DarwinBlueprintLibrary_UnlockPCAchievement final
{
public:
	EDarwinAchievementsID                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinBlueprintLibrary_UnlockPCAchievement) == 0x000001, "Wrong alignment on DarwinBlueprintLibrary_UnlockPCAchievement");
static_assert(sizeof(DarwinBlueprintLibrary_UnlockPCAchievement) == 0x000001, "Wrong size on DarwinBlueprintLibrary_UnlockPCAchievement");
static_assert(offsetof(DarwinBlueprintLibrary_UnlockPCAchievement, ID) == 0x000000, "Member 'DarwinBlueprintLibrary_UnlockPCAchievement::ID' has a wrong offset!");

// Function DarwinGame.DarwinBlueprintLibrary.WhetherHitOnGround
// 0x00A0 (0x00A0 - 0x0000)
struct DarwinBlueprintLibrary_WhetherHitOnGround final
{
public:
	class AActor*                                 observe;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinBlueprintLibrary_WhetherHitOnGround) == 0x000008, "Wrong alignment on DarwinBlueprintLibrary_WhetherHitOnGround");
static_assert(sizeof(DarwinBlueprintLibrary_WhetherHitOnGround) == 0x0000A0, "Wrong size on DarwinBlueprintLibrary_WhetherHitOnGround");
static_assert(offsetof(DarwinBlueprintLibrary_WhetherHitOnGround, observe) == 0x000000, "Member 'DarwinBlueprintLibrary_WhetherHitOnGround::observe' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_WhetherHitOnGround, Height) == 0x000008, "Member 'DarwinBlueprintLibrary_WhetherHitOnGround::Height' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_WhetherHitOnGround, Radius) == 0x00000C, "Member 'DarwinBlueprintLibrary_WhetherHitOnGround::Radius' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_WhetherHitOnGround, Hit) == 0x000010, "Member 'DarwinBlueprintLibrary_WhetherHitOnGround::Hit' has a wrong offset!");
static_assert(offsetof(DarwinBlueprintLibrary_WhetherHitOnGround, ReturnValue) == 0x000098, "Member 'DarwinBlueprintLibrary_WhetherHitOnGround::ReturnValue' has a wrong offset!");

// Function DarwinGame.ArtifactPoint.GetSoundComponent
// 0x0008 (0x0008 - 0x0000)
struct ArtifactPoint_GetSoundComponent final
{
public:
	class UPointEnvSound*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArtifactPoint_GetSoundComponent) == 0x000008, "Wrong alignment on ArtifactPoint_GetSoundComponent");
static_assert(sizeof(ArtifactPoint_GetSoundComponent) == 0x000008, "Wrong size on ArtifactPoint_GetSoundComponent");
static_assert(offsetof(ArtifactPoint_GetSoundComponent, ReturnValue) == 0x000000, "Member 'ArtifactPoint_GetSoundComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.ArtifactPoint.OnBeginOverlapEffectCollision
// 0x00A8 (0x00A8 - 0x0000)
struct ArtifactPoint_OnBeginOverlapEffectCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArtifactPoint_OnBeginOverlapEffectCollision) == 0x000008, "Wrong alignment on ArtifactPoint_OnBeginOverlapEffectCollision");
static_assert(sizeof(ArtifactPoint_OnBeginOverlapEffectCollision) == 0x0000A8, "Wrong size on ArtifactPoint_OnBeginOverlapEffectCollision");
static_assert(offsetof(ArtifactPoint_OnBeginOverlapEffectCollision, OverlappedComp) == 0x000000, "Member 'ArtifactPoint_OnBeginOverlapEffectCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnBeginOverlapEffectCollision, OtherActor) == 0x000008, "Member 'ArtifactPoint_OnBeginOverlapEffectCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnBeginOverlapEffectCollision, OtherComp) == 0x000010, "Member 'ArtifactPoint_OnBeginOverlapEffectCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnBeginOverlapEffectCollision, OtherBodyIndex) == 0x000018, "Member 'ArtifactPoint_OnBeginOverlapEffectCollision::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnBeginOverlapEffectCollision, bFromSweep) == 0x00001C, "Member 'ArtifactPoint_OnBeginOverlapEffectCollision::bFromSweep' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnBeginOverlapEffectCollision, SweepResult) == 0x000020, "Member 'ArtifactPoint_OnBeginOverlapEffectCollision::SweepResult' has a wrong offset!");

// Function DarwinGame.ArtifactPoint.OnEndOverlapEffectCollision
// 0x0020 (0x0020 - 0x0000)
struct ArtifactPoint_OnEndOverlapEffectCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArtifactPoint_OnEndOverlapEffectCollision) == 0x000008, "Wrong alignment on ArtifactPoint_OnEndOverlapEffectCollision");
static_assert(sizeof(ArtifactPoint_OnEndOverlapEffectCollision) == 0x000020, "Wrong size on ArtifactPoint_OnEndOverlapEffectCollision");
static_assert(offsetof(ArtifactPoint_OnEndOverlapEffectCollision, OverlappedComp) == 0x000000, "Member 'ArtifactPoint_OnEndOverlapEffectCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnEndOverlapEffectCollision, OtherActor) == 0x000008, "Member 'ArtifactPoint_OnEndOverlapEffectCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnEndOverlapEffectCollision, OtherComp) == 0x000010, "Member 'ArtifactPoint_OnEndOverlapEffectCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(ArtifactPoint_OnEndOverlapEffectCollision, OtherBodyIndex) == 0x000018, "Member 'ArtifactPoint_OnEndOverlapEffectCollision::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.DarwinAssetManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct DarwinAssetManager_GetInstance final
{
public:
	class UDarwinAssetManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAssetManager_GetInstance) == 0x000008, "Wrong alignment on DarwinAssetManager_GetInstance");
static_assert(sizeof(DarwinAssetManager_GetInstance) == 0x000008, "Wrong size on DarwinAssetManager_GetInstance");
static_assert(offsetof(DarwinAssetManager_GetInstance, ReturnValue) == 0x000000, "Member 'DarwinAssetManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.ItemObjectBase.GetStaticMeshComponentRelativeLocation
// 0x000C (0x000C - 0x0000)
struct ItemObjectBase_GetStaticMeshComponentRelativeLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemObjectBase_GetStaticMeshComponentRelativeLocation) == 0x000004, "Wrong alignment on ItemObjectBase_GetStaticMeshComponentRelativeLocation");
static_assert(sizeof(ItemObjectBase_GetStaticMeshComponentRelativeLocation) == 0x00000C, "Wrong size on ItemObjectBase_GetStaticMeshComponentRelativeLocation");
static_assert(offsetof(ItemObjectBase_GetStaticMeshComponentRelativeLocation, ReturnValue) == 0x000000, "Member 'ItemObjectBase_GetStaticMeshComponentRelativeLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.ItemObjectBase.GetItemGetInfo
// 0x0010 (0x0010 - 0x0000)
struct ItemObjectBase_GetItemGetInfo final
{
public:
	TArray<struct FFieldItemGetInfo>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemObjectBase_GetItemGetInfo) == 0x000008, "Wrong alignment on ItemObjectBase_GetItemGetInfo");
static_assert(sizeof(ItemObjectBase_GetItemGetInfo) == 0x000010, "Wrong size on ItemObjectBase_GetItemGetInfo");
static_assert(offsetof(ItemObjectBase_GetItemGetInfo, ReturnValue) == 0x000000, "Member 'ItemObjectBase_GetItemGetInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.ItemObjectBase.GetObjectRootComponent
// 0x0008 (0x0008 - 0x0000)
struct ItemObjectBase_GetObjectRootComponent final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemObjectBase_GetObjectRootComponent) == 0x000008, "Wrong alignment on ItemObjectBase_GetObjectRootComponent");
static_assert(sizeof(ItemObjectBase_GetObjectRootComponent) == 0x000008, "Wrong size on ItemObjectBase_GetObjectRootComponent");
static_assert(offsetof(ItemObjectBase_GetObjectRootComponent, ReturnValue) == 0x000000, "Member 'ItemObjectBase_GetObjectRootComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.ItemObjectBase.GetStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct ItemObjectBase_GetStaticMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemObjectBase_GetStaticMesh) == 0x000008, "Wrong alignment on ItemObjectBase_GetStaticMesh");
static_assert(sizeof(ItemObjectBase_GetStaticMesh) == 0x000008, "Wrong size on ItemObjectBase_GetStaticMesh");
static_assert(offsetof(ItemObjectBase_GetStaticMesh, ReturnValue) == 0x000000, "Member 'ItemObjectBase_GetStaticMesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.DropItemObject.OnDrop
// 0x0020 (0x0020 - 0x0000)
struct DropItemObject_OnDrop final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DropItemObject_OnDrop) == 0x000008, "Wrong alignment on DropItemObject_OnDrop");
static_assert(sizeof(DropItemObject_OnDrop) == 0x000020, "Wrong size on DropItemObject_OnDrop");
static_assert(offsetof(DropItemObject_OnDrop, LaunchVelocity) == 0x000000, "Member 'DropItemObject_OnDrop::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(DropItemObject_OnDrop, IgnoreActors) == 0x000010, "Member 'DropItemObject_OnDrop::IgnoreActors' has a wrong offset!");

// Function DarwinGame.DropItemObject.OverlapWaterObject
// 0x0008 (0x0008 - 0x0000)
struct DropItemObject_OverlapWaterObject final
{
public:
	class UPrimitiveComponent*                    collision;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DropItemObject_OverlapWaterObject) == 0x000008, "Wrong alignment on DropItemObject_OverlapWaterObject");
static_assert(sizeof(DropItemObject_OverlapWaterObject) == 0x000008, "Wrong size on DropItemObject_OverlapWaterObject");
static_assert(offsetof(DropItemObject_OverlapWaterObject, collision) == 0x000000, "Member 'DropItemObject_OverlapWaterObject::collision' has a wrong offset!");

// Function DarwinGame.DropItemObject.GetWaterOverlapCollision
// 0x0008 (0x0008 - 0x0000)
struct DropItemObject_GetWaterOverlapCollision final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DropItemObject_GetWaterOverlapCollision) == 0x000008, "Wrong alignment on DropItemObject_GetWaterOverlapCollision");
static_assert(sizeof(DropItemObject_GetWaterOverlapCollision) == 0x000008, "Wrong size on DropItemObject_GetWaterOverlapCollision");
static_assert(offsetof(DropItemObject_GetWaterOverlapCollision, ReturnValue) == 0x000000, "Member 'DropItemObject_GetWaterOverlapCollision::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_IconStamp.PlayStamp
// 0x0014 (0x0014 - 0x0000)
struct UIField_IconStamp_PlayStamp final
{
public:
	float                                         StartAtTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopStart;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_IconStamp_PlayStamp) == 0x000004, "Wrong alignment on UIField_IconStamp_PlayStamp");
static_assert(sizeof(UIField_IconStamp_PlayStamp) == 0x000014, "Wrong size on UIField_IconStamp_PlayStamp");
static_assert(offsetof(UIField_IconStamp_PlayStamp, StartAtTime) == 0x000000, "Member 'UIField_IconStamp_PlayStamp::StartAtTime' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_PlayStamp, NumLoopsToPlay) == 0x000004, "Member 'UIField_IconStamp_PlayStamp::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_PlayStamp, PlayMode) == 0x000008, "Member 'UIField_IconStamp_PlayStamp::PlayMode' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_PlayStamp, PlaybackSpeed) == 0x00000C, "Member 'UIField_IconStamp_PlayStamp::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_PlayStamp, LoopStart) == 0x000010, "Member 'UIField_IconStamp_PlayStamp::LoopStart' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_PlayStamp, ReturnValue) == 0x000011, "Member 'UIField_IconStamp_PlayStamp::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_IconStamp.PlayStampByTime
// 0x0008 (0x0008 - 0x0000)
struct UIField_IconStamp_PlayStampByTime final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_IconStamp_PlayStampByTime) == 0x000004, "Wrong alignment on UIField_IconStamp_PlayStampByTime");
static_assert(sizeof(UIField_IconStamp_PlayStampByTime) == 0x000008, "Wrong size on UIField_IconStamp_PlayStampByTime");
static_assert(offsetof(UIField_IconStamp_PlayStampByTime, AnimTime) == 0x000000, "Member 'UIField_IconStamp_PlayStampByTime::AnimTime' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_PlayStampByTime, ReturnValue) == 0x000004, "Member 'UIField_IconStamp_PlayStampByTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_IconStamp.SetDataFromType
// 0x0018 (0x0018 - 0x0000)
struct UIField_IconStamp_SetDataFromType final
{
public:
	EStampIconType                                StampType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStampFrameType                               Frame;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopStart;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_IconStamp_SetDataFromType) == 0x000008, "Wrong alignment on UIField_IconStamp_SetDataFromType");
static_assert(sizeof(UIField_IconStamp_SetDataFromType) == 0x000018, "Wrong size on UIField_IconStamp_SetDataFromType");
static_assert(offsetof(UIField_IconStamp_SetDataFromType, StampType) == 0x000000, "Member 'UIField_IconStamp_SetDataFromType::StampType' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_SetDataFromType, Target) == 0x000008, "Member 'UIField_IconStamp_SetDataFromType::Target' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_SetDataFromType, Frame) == 0x000010, "Member 'UIField_IconStamp_SetDataFromType::Frame' has a wrong offset!");
static_assert(offsetof(UIField_IconStamp_SetDataFromType, LoopStart) == 0x000011, "Member 'UIField_IconStamp_SetDataFromType::LoopStart' has a wrong offset!");

// Function DarwinGame.GameCharacter.AddEmotionEffect
// 0x0010 (0x0010 - 0x0000)
struct GameCharacter_AddEmotionEffect final
{
public:
	EEmotionEffectID                              ID;                                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 Size;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_AddEmotionEffect) == 0x000004, "Wrong alignment on GameCharacter_AddEmotionEffect");
static_assert(sizeof(GameCharacter_AddEmotionEffect) == 0x000010, "Wrong size on GameCharacter_AddEmotionEffect");
static_assert(offsetof(GameCharacter_AddEmotionEffect, ID) == 0x000000, "Member 'GameCharacter_AddEmotionEffect::ID' has a wrong offset!");
static_assert(offsetof(GameCharacter_AddEmotionEffect, Size) == 0x000001, "Member 'GameCharacter_AddEmotionEffect::Size' has a wrong offset!");
static_assert(offsetof(GameCharacter_AddEmotionEffect, Offset) == 0x000004, "Member 'GameCharacter_AddEmotionEffect::Offset' has a wrong offset!");

// Function DarwinGame.GameCharacter.AddStamp
// 0x0014 (0x0014 - 0x0000)
struct GameCharacter_AddStamp final
{
public:
	EStampIconType                                Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_AddStamp) == 0x000004, "Wrong alignment on GameCharacter_AddStamp");
static_assert(sizeof(GameCharacter_AddStamp) == 0x000014, "Wrong size on GameCharacter_AddStamp");
static_assert(offsetof(GameCharacter_AddStamp, Type) == 0x000000, "Member 'GameCharacter_AddStamp::Type' has a wrong offset!");
static_assert(offsetof(GameCharacter_AddStamp, LoopNum) == 0x000004, "Member 'GameCharacter_AddStamp::LoopNum' has a wrong offset!");
static_assert(offsetof(GameCharacter_AddStamp, Offset) == 0x000008, "Member 'GameCharacter_AddStamp::Offset' has a wrong offset!");

// Function DarwinGame.GameCharacter.AttachToSocket
// 0x0010 (0x0010 - 0x0000)
struct GameCharacter_AttachToSocket final
{
public:
	class AActor*                                 AttachActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       socket;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               LocationRule;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               RotationRule;                                      // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               ScaleRule;                                         // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeldSimulatedBodies;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_AttachToSocket) == 0x000008, "Wrong alignment on GameCharacter_AttachToSocket");
static_assert(sizeof(GameCharacter_AttachToSocket) == 0x000010, "Wrong size on GameCharacter_AttachToSocket");
static_assert(offsetof(GameCharacter_AttachToSocket, AttachActor) == 0x000000, "Member 'GameCharacter_AttachToSocket::AttachActor' has a wrong offset!");
static_assert(offsetof(GameCharacter_AttachToSocket, socket) == 0x000008, "Member 'GameCharacter_AttachToSocket::socket' has a wrong offset!");
static_assert(offsetof(GameCharacter_AttachToSocket, LocationRule) == 0x000009, "Member 'GameCharacter_AttachToSocket::LocationRule' has a wrong offset!");
static_assert(offsetof(GameCharacter_AttachToSocket, RotationRule) == 0x00000A, "Member 'GameCharacter_AttachToSocket::RotationRule' has a wrong offset!");
static_assert(offsetof(GameCharacter_AttachToSocket, ScaleRule) == 0x00000B, "Member 'GameCharacter_AttachToSocket::ScaleRule' has a wrong offset!");
static_assert(offsetof(GameCharacter_AttachToSocket, bWeldSimulatedBodies) == 0x00000C, "Member 'GameCharacter_AttachToSocket::bWeldSimulatedBodies' has a wrong offset!");

// Function DarwinGame.GameCharacter.CreateAndSetMaterialInstanceDynamicFromMaterial
// 0x0020 (0x0020 - 0x0000)
struct GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyPamameterFromOld;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial) == 0x000008, "Wrong alignment on GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial");
static_assert(sizeof(GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial) == 0x000020, "Wrong size on GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial");
static_assert(offsetof(GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial, ElementIndex) == 0x000000, "Member 'GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial::ElementIndex' has a wrong offset!");
static_assert(offsetof(GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial, Parent) == 0x000008, "Member 'GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial::Parent' has a wrong offset!");
static_assert(offsetof(GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial, bCopyPamameterFromOld) == 0x000010, "Member 'GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial::bCopyPamameterFromOld' has a wrong offset!");
static_assert(offsetof(GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial, ReturnValue) == 0x000018, "Member 'GameCharacter_CreateAndSetMaterialInstanceDynamicFromMaterial::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.DetachFromSocket
// 0x0010 (0x0010 - 0x0000)
struct GameCharacter_DetachFromSocket final
{
public:
	class AActor*                                 DetachActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               LocationRule;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               RotationRule;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               ScaleRule;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_DetachFromSocket) == 0x000008, "Wrong alignment on GameCharacter_DetachFromSocket");
static_assert(sizeof(GameCharacter_DetachFromSocket) == 0x000010, "Wrong size on GameCharacter_DetachFromSocket");
static_assert(offsetof(GameCharacter_DetachFromSocket, DetachActor) == 0x000000, "Member 'GameCharacter_DetachFromSocket::DetachActor' has a wrong offset!");
static_assert(offsetof(GameCharacter_DetachFromSocket, LocationRule) == 0x000008, "Member 'GameCharacter_DetachFromSocket::LocationRule' has a wrong offset!");
static_assert(offsetof(GameCharacter_DetachFromSocket, RotationRule) == 0x000009, "Member 'GameCharacter_DetachFromSocket::RotationRule' has a wrong offset!");
static_assert(offsetof(GameCharacter_DetachFromSocket, ScaleRule) == 0x00000A, "Member 'GameCharacter_DetachFromSocket::ScaleRule' has a wrong offset!");

// Function DarwinGame.GameCharacter.EnableLookAtCharacter
// 0x0008 (0x0008 - 0x0000)
struct GameCharacter_EnableLookAtCharacter final
{
public:
	class AGameCharacter*                         TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_EnableLookAtCharacter) == 0x000008, "Wrong alignment on GameCharacter_EnableLookAtCharacter");
static_assert(sizeof(GameCharacter_EnableLookAtCharacter) == 0x000008, "Wrong size on GameCharacter_EnableLookAtCharacter");
static_assert(offsetof(GameCharacter_EnableLookAtCharacter, TargetCharacter) == 0x000000, "Member 'GameCharacter_EnableLookAtCharacter::TargetCharacter' has a wrong offset!");

// Function DarwinGame.GameCharacter.EnableLookAtCharacterDirect
// 0x0008 (0x0008 - 0x0000)
struct GameCharacter_EnableLookAtCharacterDirect final
{
public:
	class AGameCharacter*                         TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_EnableLookAtCharacterDirect) == 0x000008, "Wrong alignment on GameCharacter_EnableLookAtCharacterDirect");
static_assert(sizeof(GameCharacter_EnableLookAtCharacterDirect) == 0x000008, "Wrong size on GameCharacter_EnableLookAtCharacterDirect");
static_assert(offsetof(GameCharacter_EnableLookAtCharacterDirect, TargetCharacter) == 0x000000, "Member 'GameCharacter_EnableLookAtCharacterDirect::TargetCharacter' has a wrong offset!");

// Function DarwinGame.GameCharacter.EnableLookAtLocation
// 0x000C (0x000C - 0x0000)
struct GameCharacter_EnableLookAtLocation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_EnableLookAtLocation) == 0x000004, "Wrong alignment on GameCharacter_EnableLookAtLocation");
static_assert(sizeof(GameCharacter_EnableLookAtLocation) == 0x00000C, "Wrong size on GameCharacter_EnableLookAtLocation");
static_assert(offsetof(GameCharacter_EnableLookAtLocation, TargetLocation) == 0x000000, "Member 'GameCharacter_EnableLookAtLocation::TargetLocation' has a wrong offset!");

// Function DarwinGame.GameCharacter.EnableLookAtLocationDirect
// 0x000C (0x000C - 0x0000)
struct GameCharacter_EnableLookAtLocationDirect final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_EnableLookAtLocationDirect) == 0x000004, "Wrong alignment on GameCharacter_EnableLookAtLocationDirect");
static_assert(sizeof(GameCharacter_EnableLookAtLocationDirect) == 0x00000C, "Wrong size on GameCharacter_EnableLookAtLocationDirect");
static_assert(offsetof(GameCharacter_EnableLookAtLocationDirect, TargetLocation) == 0x000000, "Member 'GameCharacter_EnableLookAtLocationDirect::TargetLocation' has a wrong offset!");

// Function DarwinGame.GameCharacter.GetAControllerTickable
// 0x0018 (0x0018 - 0x0000)
struct GameCharacter_GetAControllerTickable final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_GetAControllerTickable) == 0x000008, "Wrong alignment on GameCharacter_GetAControllerTickable");
static_assert(sizeof(GameCharacter_GetAControllerTickable) == 0x000018, "Wrong size on GameCharacter_GetAControllerTickable");
static_assert(offsetof(GameCharacter_GetAControllerTickable, enable) == 0x000000, "Member 'GameCharacter_GetAControllerTickable::enable' has a wrong offset!");
static_assert(offsetof(GameCharacter_GetAControllerTickable, Name_0) == 0x000008, "Member 'GameCharacter_GetAControllerTickable::Name_0' has a wrong offset!");

// Function DarwinGame.GameCharacter.IsOverAbyssBorder
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_IsOverAbyssBorder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_IsOverAbyssBorder) == 0x000001, "Wrong alignment on GameCharacter_IsOverAbyssBorder");
static_assert(sizeof(GameCharacter_IsOverAbyssBorder) == 0x000001, "Wrong size on GameCharacter_IsOverAbyssBorder");
static_assert(offsetof(GameCharacter_IsOverAbyssBorder, ReturnValue) == 0x000000, "Member 'GameCharacter_IsOverAbyssBorder::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.OpenFukidashi
// 0x0038 (0x0038 - 0x0000)
struct GameCharacter_OpenFukidashi final
{
public:
	EFukidashiEnum                                FukidashiType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FukidashiText;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisibleIcon;                                       // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoClose;                                         // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkeID;                                           // 0x002C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_OpenFukidashi) == 0x000008, "Wrong alignment on GameCharacter_OpenFukidashi");
static_assert(sizeof(GameCharacter_OpenFukidashi) == 0x000038, "Wrong size on GameCharacter_OpenFukidashi");
static_assert(offsetof(GameCharacter_OpenFukidashi, FukidashiType) == 0x000000, "Member 'GameCharacter_OpenFukidashi::FukidashiType' has a wrong offset!");
static_assert(offsetof(GameCharacter_OpenFukidashi, CharacterName) == 0x000008, "Member 'GameCharacter_OpenFukidashi::CharacterName' has a wrong offset!");
static_assert(offsetof(GameCharacter_OpenFukidashi, FukidashiText) == 0x000018, "Member 'GameCharacter_OpenFukidashi::FukidashiText' has a wrong offset!");
static_assert(offsetof(GameCharacter_OpenFukidashi, VisibleIcon) == 0x000028, "Member 'GameCharacter_OpenFukidashi::VisibleIcon' has a wrong offset!");
static_assert(offsetof(GameCharacter_OpenFukidashi, AutoClose) == 0x000029, "Member 'GameCharacter_OpenFukidashi::AutoClose' has a wrong offset!");
static_assert(offsetof(GameCharacter_OpenFukidashi, TalkeID) == 0x00002C, "Member 'GameCharacter_OpenFukidashi::TalkeID' has a wrong offset!");

// Function DarwinGame.GameCharacter.PlayEmote
// 0x0048 (0x0048 - 0x0000)
struct GameCharacter_PlayEmote final
{
public:
	EEmoteType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EEmoteMethod>                          ignoreMethods;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteRuntimeOption*                    runtimeOpt;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteStampOverwriteOption*             overwriteOpt;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteBodyMotionOverwriteOption*        overwriteBodyOpt;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteFaceOverwriteOption*              overwriteFaceOpt;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteBlinkOverwriteOption*             overwriteBlinkOpt;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteVocalizeOverwriteOption*          overwriteVocalizeOpt;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_PlayEmote) == 0x000008, "Wrong alignment on GameCharacter_PlayEmote");
static_assert(sizeof(GameCharacter_PlayEmote) == 0x000048, "Wrong size on GameCharacter_PlayEmote");
static_assert(offsetof(GameCharacter_PlayEmote, Type) == 0x000000, "Member 'GameCharacter_PlayEmote::Type' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmote, ignoreMethods) == 0x000008, "Member 'GameCharacter_PlayEmote::ignoreMethods' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmote, runtimeOpt) == 0x000018, "Member 'GameCharacter_PlayEmote::runtimeOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmote, overwriteOpt) == 0x000020, "Member 'GameCharacter_PlayEmote::overwriteOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmote, overwriteBodyOpt) == 0x000028, "Member 'GameCharacter_PlayEmote::overwriteBodyOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmote, overwriteFaceOpt) == 0x000030, "Member 'GameCharacter_PlayEmote::overwriteFaceOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmote, overwriteBlinkOpt) == 0x000038, "Member 'GameCharacter_PlayEmote::overwriteBlinkOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmote, overwriteVocalizeOpt) == 0x000040, "Member 'GameCharacter_PlayEmote::overwriteVocalizeOpt' has a wrong offset!");

// Function DarwinGame.GameCharacter.PlayEmoteBlink
// 0x0018 (0x0018 - 0x0000)
struct GameCharacter_PlayEmoteBlink final
{
public:
	class UEmoteRuntimeOption*                    runtimeOpt;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteBlinkOverwriteOption*             overwriteOpt;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTotalEmote;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_PlayEmoteBlink) == 0x000008, "Wrong alignment on GameCharacter_PlayEmoteBlink");
static_assert(sizeof(GameCharacter_PlayEmoteBlink) == 0x000018, "Wrong size on GameCharacter_PlayEmoteBlink");
static_assert(offsetof(GameCharacter_PlayEmoteBlink, runtimeOpt) == 0x000000, "Member 'GameCharacter_PlayEmoteBlink::runtimeOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteBlink, overwriteOpt) == 0x000008, "Member 'GameCharacter_PlayEmoteBlink::overwriteOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteBlink, bUseTotalEmote) == 0x000010, "Member 'GameCharacter_PlayEmoteBlink::bUseTotalEmote' has a wrong offset!");

// Function DarwinGame.GameCharacter.PlayEmoteBody
// 0x0020 (0x0020 - 0x0000)
struct GameCharacter_PlayEmoteBody final
{
public:
	EEmoteType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEmoteRuntimeOption*                    runtimeOpt;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteBodyMotionOverwriteOption*        overwriteOpt;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTotalEmote;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_PlayEmoteBody) == 0x000008, "Wrong alignment on GameCharacter_PlayEmoteBody");
static_assert(sizeof(GameCharacter_PlayEmoteBody) == 0x000020, "Wrong size on GameCharacter_PlayEmoteBody");
static_assert(offsetof(GameCharacter_PlayEmoteBody, Type) == 0x000000, "Member 'GameCharacter_PlayEmoteBody::Type' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteBody, runtimeOpt) == 0x000008, "Member 'GameCharacter_PlayEmoteBody::runtimeOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteBody, overwriteOpt) == 0x000010, "Member 'GameCharacter_PlayEmoteBody::overwriteOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteBody, bUseTotalEmote) == 0x000018, "Member 'GameCharacter_PlayEmoteBody::bUseTotalEmote' has a wrong offset!");

// Function DarwinGame.GameCharacter.PlayEmoteFacial
// 0x0020 (0x0020 - 0x0000)
struct GameCharacter_PlayEmoteFacial final
{
public:
	EEmoteType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEmoteRuntimeOption*                    runtimeOpt;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteFaceOverwriteOption*              overwriteOpt;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTotalEmote;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_PlayEmoteFacial) == 0x000008, "Wrong alignment on GameCharacter_PlayEmoteFacial");
static_assert(sizeof(GameCharacter_PlayEmoteFacial) == 0x000020, "Wrong size on GameCharacter_PlayEmoteFacial");
static_assert(offsetof(GameCharacter_PlayEmoteFacial, Type) == 0x000000, "Member 'GameCharacter_PlayEmoteFacial::Type' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteFacial, runtimeOpt) == 0x000008, "Member 'GameCharacter_PlayEmoteFacial::runtimeOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteFacial, overwriteOpt) == 0x000010, "Member 'GameCharacter_PlayEmoteFacial::overwriteOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteFacial, bUseTotalEmote) == 0x000018, "Member 'GameCharacter_PlayEmoteFacial::bUseTotalEmote' has a wrong offset!");

// Function DarwinGame.GameCharacter.PlayEmoteSE
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_PlayEmoteSE final
{
public:
	EEmoteType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_PlayEmoteSE) == 0x000001, "Wrong alignment on GameCharacter_PlayEmoteSE");
static_assert(sizeof(GameCharacter_PlayEmoteSE) == 0x000001, "Wrong size on GameCharacter_PlayEmoteSE");
static_assert(offsetof(GameCharacter_PlayEmoteSE, Type) == 0x000000, "Member 'GameCharacter_PlayEmoteSE::Type' has a wrong offset!");

// Function DarwinGame.GameCharacter.PlayEmoteStamp
// 0x0020 (0x0020 - 0x0000)
struct GameCharacter_PlayEmoteStamp final
{
public:
	EEmoteType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEmoteRuntimeOption*                    runtimeOpt;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteStampOverwriteOption*             overwriteOpt;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTotalEmote;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_PlayEmoteStamp) == 0x000008, "Wrong alignment on GameCharacter_PlayEmoteStamp");
static_assert(sizeof(GameCharacter_PlayEmoteStamp) == 0x000020, "Wrong size on GameCharacter_PlayEmoteStamp");
static_assert(offsetof(GameCharacter_PlayEmoteStamp, Type) == 0x000000, "Member 'GameCharacter_PlayEmoteStamp::Type' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteStamp, runtimeOpt) == 0x000008, "Member 'GameCharacter_PlayEmoteStamp::runtimeOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteStamp, overwriteOpt) == 0x000010, "Member 'GameCharacter_PlayEmoteStamp::overwriteOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteStamp, bUseTotalEmote) == 0x000018, "Member 'GameCharacter_PlayEmoteStamp::bUseTotalEmote' has a wrong offset!");

// Function DarwinGame.GameCharacter.PlayEmoteVocalize
// 0x0018 (0x0018 - 0x0000)
struct GameCharacter_PlayEmoteVocalize final
{
public:
	class UEmoteRuntimeOption*                    runtimeOpt;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteVocalizeOverwriteOption*          overwriteVocalizeOpt;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTotalEmote;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameCharacter_PlayEmoteVocalize) == 0x000008, "Wrong alignment on GameCharacter_PlayEmoteVocalize");
static_assert(sizeof(GameCharacter_PlayEmoteVocalize) == 0x000018, "Wrong size on GameCharacter_PlayEmoteVocalize");
static_assert(offsetof(GameCharacter_PlayEmoteVocalize, runtimeOpt) == 0x000000, "Member 'GameCharacter_PlayEmoteVocalize::runtimeOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteVocalize, overwriteVocalizeOpt) == 0x000008, "Member 'GameCharacter_PlayEmoteVocalize::overwriteVocalizeOpt' has a wrong offset!");
static_assert(offsetof(GameCharacter_PlayEmoteVocalize, bUseTotalEmote) == 0x000010, "Member 'GameCharacter_PlayEmoteVocalize::bUseTotalEmote' has a wrong offset!");

// Function DarwinGame.GameCharacter.RemoveDefaultMaterial
// 0x0004 (0x0004 - 0x0000)
struct GameCharacter_RemoveDefaultMaterial final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_RemoveDefaultMaterial) == 0x000004, "Wrong alignment on GameCharacter_RemoveDefaultMaterial");
static_assert(sizeof(GameCharacter_RemoveDefaultMaterial) == 0x000004, "Wrong size on GameCharacter_RemoveDefaultMaterial");
static_assert(offsetof(GameCharacter_RemoveDefaultMaterial, ElementIndex) == 0x000000, "Member 'GameCharacter_RemoveDefaultMaterial::ElementIndex' has a wrong offset!");

// Function DarwinGame.GameCharacter.RemoveDefaultMaterialByName
// 0x0008 (0x0008 - 0x0000)
struct GameCharacter_RemoveDefaultMaterialByName final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_RemoveDefaultMaterialByName) == 0x000004, "Wrong alignment on GameCharacter_RemoveDefaultMaterialByName");
static_assert(sizeof(GameCharacter_RemoveDefaultMaterialByName) == 0x000008, "Wrong size on GameCharacter_RemoveDefaultMaterialByName");
static_assert(offsetof(GameCharacter_RemoveDefaultMaterialByName, MaterialSlotName) == 0x000000, "Member 'GameCharacter_RemoveDefaultMaterialByName::MaterialSlotName' has a wrong offset!");

// Function DarwinGame.GameCharacter.SetDefaultMaterial
// 0x0010 (0x0010 - 0x0000)
struct GameCharacter_SetDefaultMaterial final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_SetDefaultMaterial) == 0x000008, "Wrong alignment on GameCharacter_SetDefaultMaterial");
static_assert(sizeof(GameCharacter_SetDefaultMaterial) == 0x000010, "Wrong size on GameCharacter_SetDefaultMaterial");
static_assert(offsetof(GameCharacter_SetDefaultMaterial, ElementIndex) == 0x000000, "Member 'GameCharacter_SetDefaultMaterial::ElementIndex' has a wrong offset!");
static_assert(offsetof(GameCharacter_SetDefaultMaterial, Material) == 0x000008, "Member 'GameCharacter_SetDefaultMaterial::Material' has a wrong offset!");

// Function DarwinGame.GameCharacter.SetDefaultMaterialByName
// 0x0010 (0x0010 - 0x0000)
struct GameCharacter_SetDefaultMaterialByName final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_SetDefaultMaterialByName) == 0x000008, "Wrong alignment on GameCharacter_SetDefaultMaterialByName");
static_assert(sizeof(GameCharacter_SetDefaultMaterialByName) == 0x000010, "Wrong size on GameCharacter_SetDefaultMaterialByName");
static_assert(offsetof(GameCharacter_SetDefaultMaterialByName, MaterialSlotName) == 0x000000, "Member 'GameCharacter_SetDefaultMaterialByName::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(GameCharacter_SetDefaultMaterialByName, Material) == 0x000008, "Member 'GameCharacter_SetDefaultMaterialByName::Material' has a wrong offset!");

// Function DarwinGame.GameCharacter.SetEmoteFacialAnim
// 0x0008 (0x0008 - 0x0000)
struct GameCharacter_SetEmoteFacialAnim final
{
public:
	class UAnimSequence*                          FacialAnim;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_SetEmoteFacialAnim) == 0x000008, "Wrong alignment on GameCharacter_SetEmoteFacialAnim");
static_assert(sizeof(GameCharacter_SetEmoteFacialAnim) == 0x000008, "Wrong size on GameCharacter_SetEmoteFacialAnim");
static_assert(offsetof(GameCharacter_SetEmoteFacialAnim, FacialAnim) == 0x000000, "Member 'GameCharacter_SetEmoteFacialAnim::FacialAnim' has a wrong offset!");

// Function DarwinGame.GameCharacter.SetEnableAController
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_SetEnableAController final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_SetEnableAController) == 0x000001, "Wrong alignment on GameCharacter_SetEnableAController");
static_assert(sizeof(GameCharacter_SetEnableAController) == 0x000001, "Wrong size on GameCharacter_SetEnableAController");
static_assert(offsetof(GameCharacter_SetEnableAController, enable) == 0x000000, "Member 'GameCharacter_SetEnableAController::enable' has a wrong offset!");

// Function DarwinGame.GameCharacter.SetEnableApplyEmoteFace
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_SetEnableApplyEmoteFace final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_SetEnableApplyEmoteFace) == 0x000001, "Wrong alignment on GameCharacter_SetEnableApplyEmoteFace");
static_assert(sizeof(GameCharacter_SetEnableApplyEmoteFace) == 0x000001, "Wrong size on GameCharacter_SetEnableApplyEmoteFace");
static_assert(offsetof(GameCharacter_SetEnableApplyEmoteFace, enable) == 0x000000, "Member 'GameCharacter_SetEnableApplyEmoteFace::enable' has a wrong offset!");

// Function DarwinGame.GameCharacter.SetLookAtParamHead
// 0x000C (0x000C - 0x0000)
struct GameCharacter_SetLookAtParamHead final
{
public:
	float                                         AnglearVelocity;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVertical;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampHorizontal;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_SetLookAtParamHead) == 0x000004, "Wrong alignment on GameCharacter_SetLookAtParamHead");
static_assert(sizeof(GameCharacter_SetLookAtParamHead) == 0x00000C, "Wrong size on GameCharacter_SetLookAtParamHead");
static_assert(offsetof(GameCharacter_SetLookAtParamHead, AnglearVelocity) == 0x000000, "Member 'GameCharacter_SetLookAtParamHead::AnglearVelocity' has a wrong offset!");
static_assert(offsetof(GameCharacter_SetLookAtParamHead, ClampVertical) == 0x000004, "Member 'GameCharacter_SetLookAtParamHead::ClampVertical' has a wrong offset!");
static_assert(offsetof(GameCharacter_SetLookAtParamHead, ClampHorizontal) == 0x000008, "Member 'GameCharacter_SetLookAtParamHead::ClampHorizontal' has a wrong offset!");

// Function DarwinGame.GameCharacter.SetLookAtParamSpine
// 0x000C (0x000C - 0x0000)
struct GameCharacter_SetLookAtParamSpine final
{
public:
	float                                         AnglearVelocity;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVertical;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampHorizontal;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_SetLookAtParamSpine) == 0x000004, "Wrong alignment on GameCharacter_SetLookAtParamSpine");
static_assert(sizeof(GameCharacter_SetLookAtParamSpine) == 0x00000C, "Wrong size on GameCharacter_SetLookAtParamSpine");
static_assert(offsetof(GameCharacter_SetLookAtParamSpine, AnglearVelocity) == 0x000000, "Member 'GameCharacter_SetLookAtParamSpine::AnglearVelocity' has a wrong offset!");
static_assert(offsetof(GameCharacter_SetLookAtParamSpine, ClampVertical) == 0x000004, "Member 'GameCharacter_SetLookAtParamSpine::ClampVertical' has a wrong offset!");
static_assert(offsetof(GameCharacter_SetLookAtParamSpine, ClampHorizontal) == 0x000008, "Member 'GameCharacter_SetLookAtParamSpine::ClampHorizontal' has a wrong offset!");

// Function DarwinGame.GameCharacter.GetIsPause
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_GetIsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_GetIsPause) == 0x000001, "Wrong alignment on GameCharacter_GetIsPause");
static_assert(sizeof(GameCharacter_GetIsPause) == 0x000001, "Wrong size on GameCharacter_GetIsPause");
static_assert(offsetof(GameCharacter_GetIsPause, ReturnValue) == 0x000000, "Member 'GameCharacter_GetIsPause::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.GetSocketName
// 0x000C (0x000C - 0x0000)
struct GameCharacter_GetSocketName final
{
public:
	ESocket                                       socket;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_GetSocketName) == 0x000004, "Wrong alignment on GameCharacter_GetSocketName");
static_assert(sizeof(GameCharacter_GetSocketName) == 0x00000C, "Wrong size on GameCharacter_GetSocketName");
static_assert(offsetof(GameCharacter_GetSocketName, socket) == 0x000000, "Member 'GameCharacter_GetSocketName::socket' has a wrong offset!");
static_assert(offsetof(GameCharacter_GetSocketName, ReturnValue) == 0x000004, "Member 'GameCharacter_GetSocketName::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.GetSocketTransform
// 0x0040 (0x0040 - 0x0000)
struct GameCharacter_GetSocketTransform final
{
public:
	ESocket                                       socket;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       TransformSpace;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_GetSocketTransform) == 0x000010, "Wrong alignment on GameCharacter_GetSocketTransform");
static_assert(sizeof(GameCharacter_GetSocketTransform) == 0x000040, "Wrong size on GameCharacter_GetSocketTransform");
static_assert(offsetof(GameCharacter_GetSocketTransform, socket) == 0x000000, "Member 'GameCharacter_GetSocketTransform::socket' has a wrong offset!");
static_assert(offsetof(GameCharacter_GetSocketTransform, TransformSpace) == 0x000001, "Member 'GameCharacter_GetSocketTransform::TransformSpace' has a wrong offset!");
static_assert(offsetof(GameCharacter_GetSocketTransform, ReturnValue) == 0x000010, "Member 'GameCharacter_GetSocketTransform::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.HasEmoteEndMotion
// 0x0002 (0x0002 - 0x0000)
struct GameCharacter_HasEmoteEndMotion final
{
public:
	EEmoteType                                    Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_HasEmoteEndMotion) == 0x000001, "Wrong alignment on GameCharacter_HasEmoteEndMotion");
static_assert(sizeof(GameCharacter_HasEmoteEndMotion) == 0x000002, "Wrong size on GameCharacter_HasEmoteEndMotion");
static_assert(offsetof(GameCharacter_HasEmoteEndMotion, Type) == 0x000000, "Member 'GameCharacter_HasEmoteEndMotion::Type' has a wrong offset!");
static_assert(offsetof(GameCharacter_HasEmoteEndMotion, ReturnValue) == 0x000001, "Member 'GameCharacter_HasEmoteEndMotion::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.IsOpenFukidashi
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_IsOpenFukidashi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_IsOpenFukidashi) == 0x000001, "Wrong alignment on GameCharacter_IsOpenFukidashi");
static_assert(sizeof(GameCharacter_IsOpenFukidashi) == 0x000001, "Wrong size on GameCharacter_IsOpenFukidashi");
static_assert(offsetof(GameCharacter_IsOpenFukidashi, ReturnValue) == 0x000000, "Member 'GameCharacter_IsOpenFukidashi::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.IsPlayEmote
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_IsPlayEmote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_IsPlayEmote) == 0x000001, "Wrong alignment on GameCharacter_IsPlayEmote");
static_assert(sizeof(GameCharacter_IsPlayEmote) == 0x000001, "Wrong size on GameCharacter_IsPlayEmote");
static_assert(offsetof(GameCharacter_IsPlayEmote, ReturnValue) == 0x000000, "Member 'GameCharacter_IsPlayEmote::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameCharacter.IsUpdateCollision
// 0x0001 (0x0001 - 0x0000)
struct GameCharacter_IsUpdateCollision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameCharacter_IsUpdateCollision) == 0x000001, "Wrong alignment on GameCharacter_IsUpdateCollision");
static_assert(sizeof(GameCharacter_IsUpdateCollision) == 0x000001, "Wrong size on GameCharacter_IsUpdateCollision");
static_assert(offsetof(GameCharacter_IsUpdateCollision, ReturnValue) == 0x000000, "Member 'GameCharacter_IsUpdateCollision::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.ActivateAbilities
// 0x0028 (0x0028 - 0x0000)
struct GPACharacter_ActivateAbilities final
{
public:
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bAllowRemoteActivation;                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GPACharacter_ActivateAbilities) == 0x000008, "Wrong alignment on GPACharacter_ActivateAbilities");
static_assert(sizeof(GPACharacter_ActivateAbilities) == 0x000028, "Wrong size on GPACharacter_ActivateAbilities");
static_assert(offsetof(GPACharacter_ActivateAbilities, AbilityTags) == 0x000000, "Member 'GPACharacter_ActivateAbilities::AbilityTags' has a wrong offset!");
static_assert(offsetof(GPACharacter_ActivateAbilities, bAllowRemoteActivation) == 0x000020, "Member 'GPACharacter_ActivateAbilities::bAllowRemoteActivation' has a wrong offset!");
static_assert(offsetof(GPACharacter_ActivateAbilities, ReturnValue) == 0x000021, "Member 'GPACharacter_ActivateAbilities::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.ApplyForce
// 0x0010 (0x0010 - 0x0000)
struct GPACharacter_ApplyForce final
{
public:
	EForceType                                    Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Force;                                             // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_ApplyForce) == 0x000004, "Wrong alignment on GPACharacter_ApplyForce");
static_assert(sizeof(GPACharacter_ApplyForce) == 0x000010, "Wrong size on GPACharacter_ApplyForce");
static_assert(offsetof(GPACharacter_ApplyForce, Type) == 0x000000, "Member 'GPACharacter_ApplyForce::Type' has a wrong offset!");
static_assert(offsetof(GPACharacter_ApplyForce, Force) == 0x000004, "Member 'GPACharacter_ApplyForce::Force' has a wrong offset!");

// Function DarwinGame.GPACharacter.ApplySubFoodEffectGameplayEffectData
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_ApplySubFoodEffectGameplayEffectData final
{
public:
	int32                                         FoodHandle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnitId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_ApplySubFoodEffectGameplayEffectData) == 0x000004, "Wrong alignment on GPACharacter_ApplySubFoodEffectGameplayEffectData");
static_assert(sizeof(GPACharacter_ApplySubFoodEffectGameplayEffectData) == 0x000008, "Wrong size on GPACharacter_ApplySubFoodEffectGameplayEffectData");
static_assert(offsetof(GPACharacter_ApplySubFoodEffectGameplayEffectData, FoodHandle) == 0x000000, "Member 'GPACharacter_ApplySubFoodEffectGameplayEffectData::FoodHandle' has a wrong offset!");
static_assert(offsetof(GPACharacter_ApplySubFoodEffectGameplayEffectData, UnitId) == 0x000004, "Member 'GPACharacter_ApplySubFoodEffectGameplayEffectData::UnitId' has a wrong offset!");

// Function DarwinGame.GPACharacter.CalcFallingAltitude
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_CalcFallingAltitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_CalcFallingAltitude) == 0x000004, "Wrong alignment on GPACharacter_CalcFallingAltitude");
static_assert(sizeof(GPACharacter_CalcFallingAltitude) == 0x000004, "Wrong size on GPACharacter_CalcFallingAltitude");
static_assert(offsetof(GPACharacter_CalcFallingAltitude, ReturnValue) == 0x000000, "Member 'GPACharacter_CalcFallingAltitude::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.CancelAbilities
// 0x0020 (0x0020 - 0x0000)
struct GPACharacter_CancelAbilities final
{
public:
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_CancelAbilities) == 0x000008, "Wrong alignment on GPACharacter_CancelAbilities");
static_assert(sizeof(GPACharacter_CancelAbilities) == 0x000020, "Wrong size on GPACharacter_CancelAbilities");
static_assert(offsetof(GPACharacter_CancelAbilities, AbilityTags) == 0x000000, "Member 'GPACharacter_CancelAbilities::AbilityTags' has a wrong offset!");

// Function DarwinGame.GPACharacter.CanUseMP
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_CanUseMP final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GPACharacter_CanUseMP) == 0x000004, "Wrong alignment on GPACharacter_CanUseMP");
static_assert(sizeof(GPACharacter_CanUseMP) == 0x000008, "Wrong size on GPACharacter_CanUseMP");
static_assert(offsetof(GPACharacter_CanUseMP, Value) == 0x000000, "Member 'GPACharacter_CanUseMP::Value' has a wrong offset!");
static_assert(offsetof(GPACharacter_CanUseMP, ReturnValue) == 0x000004, "Member 'GPACharacter_CanUseMP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.ChangeBelong
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_ChangeBelong final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_ChangeBelong) == 0x000004, "Wrong alignment on GPACharacter_ChangeBelong");
static_assert(sizeof(GPACharacter_ChangeBelong) == 0x000004, "Wrong size on GPACharacter_ChangeBelong");
static_assert(offsetof(GPACharacter_ChangeBelong, Type) == 0x000000, "Member 'GPACharacter_ChangeBelong::Type' has a wrong offset!");

// Function DarwinGame.GPACharacter.Dodge
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_Dodge final
{
public:
	bool                                          StickTilted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_Dodge) == 0x000001, "Wrong alignment on GPACharacter_Dodge");
static_assert(sizeof(GPACharacter_Dodge) == 0x000001, "Wrong size on GPACharacter_Dodge");
static_assert(offsetof(GPACharacter_Dodge, StickTilted) == 0x000000, "Member 'GPACharacter_Dodge::StickTilted' has a wrong offset!");

// Function DarwinGame.GPACharacter.EndAbilities
// 0x0020 (0x0020 - 0x0000)
struct GPACharacter_EndAbilities final
{
public:
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_EndAbilities) == 0x000008, "Wrong alignment on GPACharacter_EndAbilities");
static_assert(sizeof(GPACharacter_EndAbilities) == 0x000020, "Wrong size on GPACharacter_EndAbilities");
static_assert(offsetof(GPACharacter_EndAbilities, AbilityTags) == 0x000000, "Member 'GPACharacter_EndAbilities::AbilityTags' has a wrong offset!");

// Function DarwinGame.GPACharacter.EqualBelong
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_EqualBelong final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GPACharacter_EqualBelong) == 0x000004, "Wrong alignment on GPACharacter_EqualBelong");
static_assert(sizeof(GPACharacter_EqualBelong) == 0x000008, "Wrong size on GPACharacter_EqualBelong");
static_assert(offsetof(GPACharacter_EqualBelong, Type) == 0x000000, "Member 'GPACharacter_EqualBelong::Type' has a wrong offset!");
static_assert(offsetof(GPACharacter_EqualBelong, ReturnValue) == 0x000004, "Member 'GPACharacter_EqualBelong::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.EventSetEnableAController
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_EventSetEnableAController final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_EventSetEnableAController) == 0x000001, "Wrong alignment on GPACharacter_EventSetEnableAController");
static_assert(sizeof(GPACharacter_EventSetEnableAController) == 0x000001, "Wrong size on GPACharacter_EventSetEnableAController");
static_assert(offsetof(GPACharacter_EventSetEnableAController, enable) == 0x000000, "Member 'GPACharacter_EventSetEnableAController::enable' has a wrong offset!");

// Function DarwinGame.GPACharacter.ExpendMP
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_ExpendMP final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_ExpendMP) == 0x000004, "Wrong alignment on GPACharacter_ExpendMP");
static_assert(sizeof(GPACharacter_ExpendMP) == 0x000004, "Wrong size on GPACharacter_ExpendMP");
static_assert(offsetof(GPACharacter_ExpendMP, Value) == 0x000000, "Member 'GPACharacter_ExpendMP::Value' has a wrong offset!");

// Function DarwinGame.GPACharacter.FindBattleMotionData
// 0x000C (0x000C - 0x0000)
struct GPACharacter_FindBattleMotionData final
{
public:
	class FName                                   MotionID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GPACharacter_FindBattleMotionData) == 0x000004, "Wrong alignment on GPACharacter_FindBattleMotionData");
static_assert(sizeof(GPACharacter_FindBattleMotionData) == 0x00000C, "Wrong size on GPACharacter_FindBattleMotionData");
static_assert(offsetof(GPACharacter_FindBattleMotionData, MotionID) == 0x000000, "Member 'GPACharacter_FindBattleMotionData::MotionID' has a wrong offset!");
static_assert(offsetof(GPACharacter_FindBattleMotionData, ReturnValue) == 0x000008, "Member 'GPACharacter_FindBattleMotionData::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetActiveAbilitiesWithTags
// 0x0030 (0x0030 - 0x0000)
struct GPACharacter_GetActiveAbilitiesWithTags final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UActionGameplayAbility*>         ActiveAbilities;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetActiveAbilitiesWithTags) == 0x000008, "Wrong alignment on GPACharacter_GetActiveAbilitiesWithTags");
static_assert(sizeof(GPACharacter_GetActiveAbilitiesWithTags) == 0x000030, "Wrong size on GPACharacter_GetActiveAbilitiesWithTags");
static_assert(offsetof(GPACharacter_GetActiveAbilitiesWithTags, GameplayTagContainer) == 0x000000, "Member 'GPACharacter_GetActiveAbilitiesWithTags::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(GPACharacter_GetActiveAbilitiesWithTags, ActiveAbilities) == 0x000020, "Member 'GPACharacter_GetActiveAbilitiesWithTags::ActiveAbilities' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetBodyEffect
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetBodyEffect final
{
public:
	class AEffectBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetBodyEffect) == 0x000008, "Wrong alignment on GPACharacter_GetBodyEffect");
static_assert(sizeof(GPACharacter_GetBodyEffect) == 0x000008, "Wrong size on GPACharacter_GetBodyEffect");
static_assert(offsetof(GPACharacter_GetBodyEffect, ReturnValue) == 0x000000, "Member 'GPACharacter_GetBodyEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetData
// 0x0120 (0x0120 - 0x0000)
struct GPACharacter_GetData final
{
public:
	struct FST_TempCharaDataForDamageCalc         ReturnValue;                                       // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetData) == 0x000008, "Wrong alignment on GPACharacter_GetData");
static_assert(sizeof(GPACharacter_GetData) == 0x000120, "Wrong size on GPACharacter_GetData");
static_assert(offsetof(GPACharacter_GetData, ReturnValue) == 0x000000, "Member 'GPACharacter_GetData::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetHeadEffect
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetHeadEffect final
{
public:
	class AEffectBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetHeadEffect) == 0x000008, "Wrong alignment on GPACharacter_GetHeadEffect");
static_assert(sizeof(GPACharacter_GetHeadEffect) == 0x000008, "Wrong size on GPACharacter_GetHeadEffect");
static_assert(offsetof(GPACharacter_GetHeadEffect, ReturnValue) == 0x000000, "Member 'GPACharacter_GetHeadEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetStun
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetStun final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetStun) == 0x000004, "Wrong alignment on GPACharacter_GetStun");
static_assert(sizeof(GPACharacter_GetStun) == 0x000004, "Wrong size on GPACharacter_GetStun");
static_assert(offsetof(GPACharacter_GetStun, ReturnValue) == 0x000000, "Member 'GPACharacter_GetStun::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.Initialize
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_Initialize final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_Initialize) == 0x000004, "Wrong alignment on GPACharacter_Initialize");
static_assert(sizeof(GPACharacter_Initialize) == 0x000008, "Wrong size on GPACharacter_Initialize");
static_assert(offsetof(GPACharacter_Initialize, ID) == 0x000000, "Member 'GPACharacter_Initialize::ID' has a wrong offset!");

// Function DarwinGame.GPACharacter.IsUsingAbility
// 0x0028 (0x0028 - 0x0000)
struct GPACharacter_IsUsingAbility final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GPACharacter_IsUsingAbility) == 0x000008, "Wrong alignment on GPACharacter_IsUsingAbility");
static_assert(sizeof(GPACharacter_IsUsingAbility) == 0x000028, "Wrong size on GPACharacter_IsUsingAbility");
static_assert(offsetof(GPACharacter_IsUsingAbility, GameplayTagContainer) == 0x000000, "Member 'GPACharacter_IsUsingAbility::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(GPACharacter_IsUsingAbility, ReturnValue) == 0x000020, "Member 'GPACharacter_IsUsingAbility::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.JudgeMagicRampage
// 0x000C (0x000C - 0x0000)
struct GPACharacter_JudgeMagicRampage final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GPACharacter_JudgeMagicRampage) == 0x000004, "Wrong alignment on GPACharacter_JudgeMagicRampage");
static_assert(sizeof(GPACharacter_JudgeMagicRampage) == 0x00000C, "Wrong size on GPACharacter_JudgeMagicRampage");
static_assert(offsetof(GPACharacter_JudgeMagicRampage, actionDetailID) == 0x000000, "Member 'GPACharacter_JudgeMagicRampage::actionDetailID' has a wrong offset!");
static_assert(offsetof(GPACharacter_JudgeMagicRampage, ReturnValue) == 0x000008, "Member 'GPACharacter_JudgeMagicRampage::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.KnockBack
// 0x0010 (0x0010 - 0x0000)
struct GPACharacter_KnockBack final
{
public:
	struct FVector                                Direct;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_KnockBack) == 0x000004, "Wrong alignment on GPACharacter_KnockBack");
static_assert(sizeof(GPACharacter_KnockBack) == 0x000010, "Wrong size on GPACharacter_KnockBack");
static_assert(offsetof(GPACharacter_KnockBack, Direct) == 0x000000, "Member 'GPACharacter_KnockBack::Direct' has a wrong offset!");
static_assert(offsetof(GPACharacter_KnockBack, Power) == 0x00000C, "Member 'GPACharacter_KnockBack::Power' has a wrong offset!");

// Function DarwinGame.GPACharacter.KnockBackAction
// 0x0030 (0x0030 - 0x0000)
struct GPACharacter_KnockBackAction final
{
public:
	struct FActionResult                          ActionResult;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_KnockBackAction) == 0x000004, "Wrong alignment on GPACharacter_KnockBackAction");
static_assert(sizeof(GPACharacter_KnockBackAction) == 0x000030, "Wrong size on GPACharacter_KnockBackAction");
static_assert(offsetof(GPACharacter_KnockBackAction, ActionResult) == 0x000000, "Member 'GPACharacter_KnockBackAction::ActionResult' has a wrong offset!");

// Function DarwinGame.GPACharacter.OnDamaged
// 0x0028 (0x0028 - 0x0000)
struct GPACharacter_OnDamaged final
{
public:
	struct FGameplayEffectContextHandle           Handle;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          InstigatorCharacter;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_OnDamaged) == 0x000008, "Wrong alignment on GPACharacter_OnDamaged");
static_assert(sizeof(GPACharacter_OnDamaged) == 0x000028, "Wrong size on GPACharacter_OnDamaged");
static_assert(offsetof(GPACharacter_OnDamaged, Handle) == 0x000000, "Member 'GPACharacter_OnDamaged::Handle' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnDamaged, DamageAmount) == 0x000018, "Member 'GPACharacter_OnDamaged::DamageAmount' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnDamaged, InstigatorCharacter) == 0x000020, "Member 'GPACharacter_OnDamaged::InstigatorCharacter' has a wrong offset!");

// Function DarwinGame.GPACharacter.OnDead
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_OnDead final
{
public:
	class AGPACharacter*                          InstigatorCharacter;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_OnDead) == 0x000008, "Wrong alignment on GPACharacter_OnDead");
static_assert(sizeof(GPACharacter_OnDead) == 0x000008, "Wrong size on GPACharacter_OnDead");
static_assert(offsetof(GPACharacter_OnDead, InstigatorCharacter) == 0x000000, "Member 'GPACharacter_OnDead::InstigatorCharacter' has a wrong offset!");

// Function DarwinGame.GPACharacter.OnGuard
// 0x0028 (0x0028 - 0x0000)
struct GPACharacter_OnGuard final
{
public:
	struct FGameplayEffectContextHandle           Handle;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EGuardType                                    Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          InstigatorCharacter;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_OnGuard) == 0x000008, "Wrong alignment on GPACharacter_OnGuard");
static_assert(sizeof(GPACharacter_OnGuard) == 0x000028, "Wrong size on GPACharacter_OnGuard");
static_assert(offsetof(GPACharacter_OnGuard, Handle) == 0x000000, "Member 'GPACharacter_OnGuard::Handle' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnGuard, Type) == 0x000018, "Member 'GPACharacter_OnGuard::Type' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnGuard, InstigatorCharacter) == 0x000020, "Member 'GPACharacter_OnGuard::InstigatorCharacter' has a wrong offset!");

// Function DarwinGame.GPACharacter.OnGuts
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_OnGuts final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_OnGuts) == 0x000004, "Wrong alignment on GPACharacter_OnGuts");
static_assert(sizeof(GPACharacter_OnGuts) == 0x000004, "Wrong size on GPACharacter_OnGuts");
static_assert(offsetof(GPACharacter_OnGuts, DamageAmount) == 0x000000, "Member 'GPACharacter_OnGuts::DamageAmount' has a wrong offset!");

// Function DarwinGame.GPACharacter.OnHealed
// 0x0028 (0x0028 - 0x0000)
struct GPACharacter_OnHealed final
{
public:
	struct FGameplayEffectContextHandle           Handle;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         HealAmount;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          InstigatorCharacter;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_OnHealed) == 0x000008, "Wrong alignment on GPACharacter_OnHealed");
static_assert(sizeof(GPACharacter_OnHealed) == 0x000028, "Wrong size on GPACharacter_OnHealed");
static_assert(offsetof(GPACharacter_OnHealed, Handle) == 0x000000, "Member 'GPACharacter_OnHealed::Handle' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnHealed, HealAmount) == 0x000018, "Member 'GPACharacter_OnHealed::HealAmount' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnHealed, InstigatorCharacter) == 0x000020, "Member 'GPACharacter_OnHealed::InstigatorCharacter' has a wrong offset!");

// Function DarwinGame.GPACharacter.OnMPHealed
// 0x0028 (0x0028 - 0x0000)
struct GPACharacter_OnMPHealed final
{
public:
	struct FGameplayEffectContextHandle           Handle;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         HealAmount;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          InstigatorCharacter;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_OnMPHealed) == 0x000008, "Wrong alignment on GPACharacter_OnMPHealed");
static_assert(sizeof(GPACharacter_OnMPHealed) == 0x000028, "Wrong size on GPACharacter_OnMPHealed");
static_assert(offsetof(GPACharacter_OnMPHealed, Handle) == 0x000000, "Member 'GPACharacter_OnMPHealed::Handle' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnMPHealed, HealAmount) == 0x000018, "Member 'GPACharacter_OnMPHealed::HealAmount' has a wrong offset!");
static_assert(offsetof(GPACharacter_OnMPHealed, InstigatorCharacter) == 0x000020, "Member 'GPACharacter_OnMPHealed::InstigatorCharacter' has a wrong offset!");

// Function DarwinGame.GPACharacter.OnSetHiddenByDithering
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_OnSetHiddenByDithering final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_OnSetHiddenByDithering) == 0x000001, "Wrong alignment on GPACharacter_OnSetHiddenByDithering");
static_assert(sizeof(GPACharacter_OnSetHiddenByDithering) == 0x000001, "Wrong size on GPACharacter_OnSetHiddenByDithering");
static_assert(offsetof(GPACharacter_OnSetHiddenByDithering, Hidden) == 0x000000, "Member 'GPACharacter_OnSetHiddenByDithering::Hidden' has a wrong offset!");

// Function DarwinGame.GPACharacter.ReleaseForce
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_ReleaseForce final
{
public:
	EForceType                                    Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_ReleaseForce) == 0x000001, "Wrong alignment on GPACharacter_ReleaseForce");
static_assert(sizeof(GPACharacter_ReleaseForce) == 0x000001, "Wrong size on GPACharacter_ReleaseForce");
static_assert(offsetof(GPACharacter_ReleaseForce, Type) == 0x000000, "Member 'GPACharacter_ReleaseForce::Type' has a wrong offset!");

// Function DarwinGame.GPACharacter.RotateToTarget
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_RotateToTarget final
{
public:
	int32                                         RotateRate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_RotateToTarget) == 0x000004, "Wrong alignment on GPACharacter_RotateToTarget");
static_assert(sizeof(GPACharacter_RotateToTarget) == 0x000004, "Wrong size on GPACharacter_RotateToTarget");
static_assert(offsetof(GPACharacter_RotateToTarget, RotateRate) == 0x000000, "Member 'GPACharacter_RotateToTarget::RotateRate' has a wrong offset!");

// Function DarwinGame.GPACharacter.RotateToTargetWithAllParams
// 0x0018 (0x0018 - 0x0000)
struct GPACharacter_RotateToTargetWithAllParams final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotateRate;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_RotateToTargetWithAllParams) == 0x000008, "Wrong alignment on GPACharacter_RotateToTargetWithAllParams");
static_assert(sizeof(GPACharacter_RotateToTargetWithAllParams) == 0x000018, "Wrong size on GPACharacter_RotateToTargetWithAllParams");
static_assert(offsetof(GPACharacter_RotateToTargetWithAllParams, Target) == 0x000000, "Member 'GPACharacter_RotateToTargetWithAllParams::Target' has a wrong offset!");
static_assert(offsetof(GPACharacter_RotateToTargetWithAllParams, Offset) == 0x000008, "Member 'GPACharacter_RotateToTargetWithAllParams::Offset' has a wrong offset!");
static_assert(offsetof(GPACharacter_RotateToTargetWithAllParams, RotateRate) == 0x000014, "Member 'GPACharacter_RotateToTargetWithAllParams::RotateRate' has a wrong offset!");

// Function DarwinGame.GPACharacter.RotateToTargetWithOffset
// 0x0010 (0x0010 - 0x0000)
struct GPACharacter_RotateToTargetWithOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotateRate;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_RotateToTargetWithOffset) == 0x000004, "Wrong alignment on GPACharacter_RotateToTargetWithOffset");
static_assert(sizeof(GPACharacter_RotateToTargetWithOffset) == 0x000010, "Wrong size on GPACharacter_RotateToTargetWithOffset");
static_assert(offsetof(GPACharacter_RotateToTargetWithOffset, Offset) == 0x000000, "Member 'GPACharacter_RotateToTargetWithOffset::Offset' has a wrong offset!");
static_assert(offsetof(GPACharacter_RotateToTargetWithOffset, RotateRate) == 0x00000C, "Member 'GPACharacter_RotateToTargetWithOffset::RotateRate' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetCurrentDamageReactionType
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_SetCurrentDamageReactionType final
{
public:
	EDamageReactionType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetCurrentDamageReactionType) == 0x000001, "Wrong alignment on GPACharacter_SetCurrentDamageReactionType");
static_assert(sizeof(GPACharacter_SetCurrentDamageReactionType) == 0x000001, "Wrong size on GPACharacter_SetCurrentDamageReactionType");
static_assert(offsetof(GPACharacter_SetCurrentDamageReactionType, Type) == 0x000000, "Member 'GPACharacter_SetCurrentDamageReactionType::Type' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetHP
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_SetHP final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetHP) == 0x000004, "Wrong alignment on GPACharacter_SetHP");
static_assert(sizeof(GPACharacter_SetHP) == 0x000004, "Wrong size on GPACharacter_SetHP");
static_assert(offsetof(GPACharacter_SetHP, Value) == 0x000000, "Member 'GPACharacter_SetHP::Value' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetInDodge
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_SetInDodge final
{
public:
	bool                                          InDodge;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetInDodge) == 0x000001, "Wrong alignment on GPACharacter_SetInDodge");
static_assert(sizeof(GPACharacter_SetInDodge) == 0x000001, "Wrong size on GPACharacter_SetInDodge");
static_assert(offsetof(GPACharacter_SetInDodge, InDodge) == 0x000000, "Member 'GPACharacter_SetInDodge::InDodge' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetLinkTarget
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_SetLinkTarget final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetLinkTarget) == 0x000008, "Wrong alignment on GPACharacter_SetLinkTarget");
static_assert(sizeof(GPACharacter_SetLinkTarget) == 0x000008, "Wrong size on GPACharacter_SetLinkTarget");
static_assert(offsetof(GPACharacter_SetLinkTarget, Target) == 0x000000, "Member 'GPACharacter_SetLinkTarget::Target' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetMP
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_SetMP final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetMP) == 0x000004, "Wrong alignment on GPACharacter_SetMP");
static_assert(sizeof(GPACharacter_SetMP) == 0x000004, "Wrong size on GPACharacter_SetMP");
static_assert(offsetof(GPACharacter_SetMP, Value) == 0x000000, "Member 'GPACharacter_SetMP::Value' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetPauseAllAttributeEffect
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_SetPauseAllAttributeEffect final
{
public:
	bool                                          Pause_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetPauseAllAttributeEffect) == 0x000001, "Wrong alignment on GPACharacter_SetPauseAllAttributeEffect");
static_assert(sizeof(GPACharacter_SetPauseAllAttributeEffect) == 0x000001, "Wrong size on GPACharacter_SetPauseAllAttributeEffect");
static_assert(offsetof(GPACharacter_SetPauseAllAttributeEffect, Pause_0) == 0x000000, "Member 'GPACharacter_SetPauseAllAttributeEffect::Pause_0' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetRootMotionScale
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_SetRootMotionScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetRootMotionScale) == 0x000004, "Wrong alignment on GPACharacter_SetRootMotionScale");
static_assert(sizeof(GPACharacter_SetRootMotionScale) == 0x000004, "Wrong size on GPACharacter_SetRootMotionScale");
static_assert(offsetof(GPACharacter_SetRootMotionScale, Scale) == 0x000000, "Member 'GPACharacter_SetRootMotionScale::Scale' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetRunningLinkID
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_SetRunningLinkID final
{
public:
	class FName                                   LinkID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetRunningLinkID) == 0x000004, "Wrong alignment on GPACharacter_SetRunningLinkID");
static_assert(sizeof(GPACharacter_SetRunningLinkID) == 0x000008, "Wrong size on GPACharacter_SetRunningLinkID");
static_assert(offsetof(GPACharacter_SetRunningLinkID, LinkID) == 0x000000, "Member 'GPACharacter_SetRunningLinkID::LinkID' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetRunninngActionOverViewID
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_SetRunninngActionOverViewID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetRunninngActionOverViewID) == 0x000004, "Wrong alignment on GPACharacter_SetRunninngActionOverViewID");
static_assert(sizeof(GPACharacter_SetRunninngActionOverViewID) == 0x000008, "Wrong size on GPACharacter_SetRunninngActionOverViewID");
static_assert(offsetof(GPACharacter_SetRunninngActionOverViewID, ID) == 0x000000, "Member 'GPACharacter_SetRunninngActionOverViewID::ID' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetTemporarilyActionDetailID
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_SetTemporarilyActionDetailID final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetTemporarilyActionDetailID) == 0x000004, "Wrong alignment on GPACharacter_SetTemporarilyActionDetailID");
static_assert(sizeof(GPACharacter_SetTemporarilyActionDetailID) == 0x000008, "Wrong size on GPACharacter_SetTemporarilyActionDetailID");
static_assert(offsetof(GPACharacter_SetTemporarilyActionDetailID, actionDetailID) == 0x000000, "Member 'GPACharacter_SetTemporarilyActionDetailID::actionDetailID' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_SetVisible final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetVisible) == 0x000001, "Wrong alignment on GPACharacter_SetVisible");
static_assert(sizeof(GPACharacter_SetVisible) == 0x000001, "Wrong size on GPACharacter_SetVisible");
static_assert(offsetof(GPACharacter_SetVisible, Visibility) == 0x000000, "Member 'GPACharacter_SetVisible::Visibility' has a wrong offset!");

// Function DarwinGame.GPACharacter.SetVisibleOnlyBodyAndEquipments
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_SetVisibleOnlyBodyAndEquipments final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_SetVisibleOnlyBodyAndEquipments) == 0x000001, "Wrong alignment on GPACharacter_SetVisibleOnlyBodyAndEquipments");
static_assert(sizeof(GPACharacter_SetVisibleOnlyBodyAndEquipments) == 0x000001, "Wrong size on GPACharacter_SetVisibleOnlyBodyAndEquipments");
static_assert(offsetof(GPACharacter_SetVisibleOnlyBodyAndEquipments, Visibility) == 0x000000, "Member 'GPACharacter_SetVisibleOnlyBodyAndEquipments::Visibility' has a wrong offset!");

// Function DarwinGame.GPACharacter.UseMP
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_UseMP final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GPACharacter_UseMP) == 0x000004, "Wrong alignment on GPACharacter_UseMP");
static_assert(sizeof(GPACharacter_UseMP) == 0x000008, "Wrong size on GPACharacter_UseMP");
static_assert(offsetof(GPACharacter_UseMP, Value) == 0x000000, "Member 'GPACharacter_UseMP::Value' has a wrong offset!");
static_assert(offsetof(GPACharacter_UseMP, ReturnValue) == 0x000004, "Member 'GPACharacter_UseMP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetAttributeList
// 0x0050 (0x0050 - 0x0000)
struct GPACharacter_GetAttributeList final
{
public:
	TMap<class FName, int32>                      AttributeList;                                     // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetAttributeList) == 0x000008, "Wrong alignment on GPACharacter_GetAttributeList");
static_assert(sizeof(GPACharacter_GetAttributeList) == 0x000050, "Wrong size on GPACharacter_GetAttributeList");
static_assert(offsetof(GPACharacter_GetAttributeList, AttributeList) == 0x000000, "Member 'GPACharacter_GetAttributeList::AttributeList' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetCharacterLevel
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetCharacterLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetCharacterLevel) == 0x000004, "Wrong alignment on GPACharacter_GetCharacterLevel");
static_assert(sizeof(GPACharacter_GetCharacterLevel) == 0x000004, "Wrong size on GPACharacter_GetCharacterLevel");
static_assert(offsetof(GPACharacter_GetCharacterLevel, ReturnValue) == 0x000000, "Member 'GPACharacter_GetCharacterLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetDarwinCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetDarwinCharacterMovement final
{
public:
	class USwitchCollisionMovementComponent*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetDarwinCharacterMovement) == 0x000008, "Wrong alignment on GPACharacter_GetDarwinCharacterMovement");
static_assert(sizeof(GPACharacter_GetDarwinCharacterMovement) == 0x000008, "Wrong size on GPACharacter_GetDarwinCharacterMovement");
static_assert(offsetof(GPACharacter_GetDarwinCharacterMovement, ReturnValue) == 0x000000, "Member 'GPACharacter_GetDarwinCharacterMovement::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetDitheringComponent
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetDitheringComponent final
{
public:
	class UDitheringComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetDitheringComponent) == 0x000008, "Wrong alignment on GPACharacter_GetDitheringComponent");
static_assert(sizeof(GPACharacter_GetDitheringComponent) == 0x000008, "Wrong size on GPACharacter_GetDitheringComponent");
static_assert(offsetof(GPACharacter_GetDitheringComponent, ReturnValue) == 0x000000, "Member 'GPACharacter_GetDitheringComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetEffectSize
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_GetEffectSize final
{
public:
	EEffectSizeID                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetEffectSize) == 0x000001, "Wrong alignment on GPACharacter_GetEffectSize");
static_assert(sizeof(GPACharacter_GetEffectSize) == 0x000001, "Wrong size on GPACharacter_GetEffectSize");
static_assert(offsetof(GPACharacter_GetEffectSize, ReturnValue) == 0x000000, "Member 'GPACharacter_GetEffectSize::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetFallingAltitude
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetFallingAltitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetFallingAltitude) == 0x000004, "Wrong alignment on GPACharacter_GetFallingAltitude");
static_assert(sizeof(GPACharacter_GetFallingAltitude) == 0x000004, "Wrong size on GPACharacter_GetFallingAltitude");
static_assert(offsetof(GPACharacter_GetFallingAltitude, ReturnValue) == 0x000000, "Member 'GPACharacter_GetFallingAltitude::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetFeatures
// 0x0010 (0x0010 - 0x0000)
struct GPACharacter_GetFeatures final
{
public:
	TArray<struct FFeaturePossessionInfo>         Features;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetFeatures) == 0x000008, "Wrong alignment on GPACharacter_GetFeatures");
static_assert(sizeof(GPACharacter_GetFeatures) == 0x000010, "Wrong size on GPACharacter_GetFeatures");
static_assert(offsetof(GPACharacter_GetFeatures, Features) == 0x000000, "Member 'GPACharacter_GetFeatures::Features' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetHP
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetHP) == 0x000004, "Wrong alignment on GPACharacter_GetHP");
static_assert(sizeof(GPACharacter_GetHP) == 0x000004, "Wrong size on GPACharacter_GetHP");
static_assert(offsetof(GPACharacter_GetHP, ReturnValue) == 0x000000, "Member 'GPACharacter_GetHP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetLinkTarget
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetLinkTarget final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetLinkTarget) == 0x000008, "Wrong alignment on GPACharacter_GetLinkTarget");
static_assert(sizeof(GPACharacter_GetLinkTarget) == 0x000008, "Wrong size on GPACharacter_GetLinkTarget");
static_assert(offsetof(GPACharacter_GetLinkTarget, ReturnValue) == 0x000000, "Member 'GPACharacter_GetLinkTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetMaxHP
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetMaxHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetMaxHP) == 0x000004, "Wrong alignment on GPACharacter_GetMaxHP");
static_assert(sizeof(GPACharacter_GetMaxHP) == 0x000004, "Wrong size on GPACharacter_GetMaxHP");
static_assert(offsetof(GPACharacter_GetMaxHP, ReturnValue) == 0x000000, "Member 'GPACharacter_GetMaxHP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetMaxMP
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetMaxMP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetMaxMP) == 0x000004, "Wrong alignment on GPACharacter_GetMaxMP");
static_assert(sizeof(GPACharacter_GetMaxMP) == 0x000004, "Wrong size on GPACharacter_GetMaxMP");
static_assert(offsetof(GPACharacter_GetMaxMP, ReturnValue) == 0x000000, "Member 'GPACharacter_GetMaxMP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetMP
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetMP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetMP) == 0x000004, "Wrong alignment on GPACharacter_GetMP");
static_assert(sizeof(GPACharacter_GetMP) == 0x000004, "Wrong size on GPACharacter_GetMP");
static_assert(offsetof(GPACharacter_GetMP, ReturnValue) == 0x000000, "Member 'GPACharacter_GetMP::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetOriginKindID
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetOriginKindID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetOriginKindID) == 0x000004, "Wrong alignment on GPACharacter_GetOriginKindID");
static_assert(sizeof(GPACharacter_GetOriginKindID) == 0x000008, "Wrong size on GPACharacter_GetOriginKindID");
static_assert(offsetof(GPACharacter_GetOriginKindID, ReturnValue) == 0x000000, "Member 'GPACharacter_GetOriginKindID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetResistLevel
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetResistLevel final
{
public:
	EResistanceType                               ResistType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetResistLevel) == 0x000004, "Wrong alignment on GPACharacter_GetResistLevel");
static_assert(sizeof(GPACharacter_GetResistLevel) == 0x000008, "Wrong size on GPACharacter_GetResistLevel");
static_assert(offsetof(GPACharacter_GetResistLevel, ResistType) == 0x000000, "Member 'GPACharacter_GetResistLevel::ResistType' has a wrong offset!");
static_assert(offsetof(GPACharacter_GetResistLevel, ReturnValue) == 0x000004, "Member 'GPACharacter_GetResistLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetRootMotionScale
// 0x0004 (0x0004 - 0x0000)
struct GPACharacter_GetRootMotionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetRootMotionScale) == 0x000004, "Wrong alignment on GPACharacter_GetRootMotionScale");
static_assert(sizeof(GPACharacter_GetRootMotionScale) == 0x000004, "Wrong size on GPACharacter_GetRootMotionScale");
static_assert(offsetof(GPACharacter_GetRootMotionScale, ReturnValue) == 0x000000, "Member 'GPACharacter_GetRootMotionScale::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetRunningLinkID
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetRunningLinkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetRunningLinkID) == 0x000004, "Wrong alignment on GPACharacter_GetRunningLinkID");
static_assert(sizeof(GPACharacter_GetRunningLinkID) == 0x000008, "Wrong size on GPACharacter_GetRunningLinkID");
static_assert(offsetof(GPACharacter_GetRunningLinkID, ReturnValue) == 0x000000, "Member 'GPACharacter_GetRunningLinkID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetRunninngActionOverViewID
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetRunninngActionOverViewID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetRunninngActionOverViewID) == 0x000004, "Wrong alignment on GPACharacter_GetRunninngActionOverViewID");
static_assert(sizeof(GPACharacter_GetRunninngActionOverViewID) == 0x000008, "Wrong size on GPACharacter_GetRunninngActionOverViewID");
static_assert(offsetof(GPACharacter_GetRunninngActionOverViewID, ReturnValue) == 0x000000, "Member 'GPACharacter_GetRunninngActionOverViewID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetStatus
// 0x0018 (0x0018 - 0x0000)
struct GPACharacter_GetStatus final
{
public:
	struct FST_Status                             ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetStatus) == 0x000004, "Wrong alignment on GPACharacter_GetStatus");
static_assert(sizeof(GPACharacter_GetStatus) == 0x000018, "Wrong size on GPACharacter_GetStatus");
static_assert(offsetof(GPACharacter_GetStatus, ReturnValue) == 0x000000, "Member 'GPACharacter_GetStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetTargetComponent
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetTargetComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetTargetComponent) == 0x000008, "Wrong alignment on GPACharacter_GetTargetComponent");
static_assert(sizeof(GPACharacter_GetTargetComponent) == 0x000008, "Wrong size on GPACharacter_GetTargetComponent");
static_assert(offsetof(GPACharacter_GetTargetComponent, ReturnValue) == 0x000000, "Member 'GPACharacter_GetTargetComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.GetTemporarilyActionDetailID
// 0x0008 (0x0008 - 0x0000)
struct GPACharacter_GetTemporarilyActionDetailID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_GetTemporarilyActionDetailID) == 0x000004, "Wrong alignment on GPACharacter_GetTemporarilyActionDetailID");
static_assert(sizeof(GPACharacter_GetTemporarilyActionDetailID) == 0x000008, "Wrong size on GPACharacter_GetTemporarilyActionDetailID");
static_assert(offsetof(GPACharacter_GetTemporarilyActionDetailID, ReturnValue) == 0x000000, "Member 'GPACharacter_GetTemporarilyActionDetailID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.IsMPEmpty
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_IsMPEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_IsMPEmpty) == 0x000001, "Wrong alignment on GPACharacter_IsMPEmpty");
static_assert(sizeof(GPACharacter_IsMPEmpty) == 0x000001, "Wrong size on GPACharacter_IsMPEmpty");
static_assert(offsetof(GPACharacter_IsMPEmpty, ReturnValue) == 0x000000, "Member 'GPACharacter_IsMPEmpty::ReturnValue' has a wrong offset!");

// Function DarwinGame.GPACharacter.IsRunninngAction
// 0x0001 (0x0001 - 0x0000)
struct GPACharacter_IsRunninngAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GPACharacter_IsRunninngAction) == 0x000001, "Wrong alignment on GPACharacter_IsRunninngAction");
static_assert(sizeof(GPACharacter_IsRunninngAction) == 0x000001, "Wrong size on GPACharacter_IsRunninngAction");
static_assert(offsetof(GPACharacter_IsRunninngAction, ReturnValue) == 0x000000, "Member 'GPACharacter_IsRunninngAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.AvoidMonster
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_AvoidMonster final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_AvoidMonster) == 0x000008, "Wrong alignment on MonsterBase_AvoidMonster");
static_assert(sizeof(MonsterBase_AvoidMonster) == 0x000008, "Wrong size on MonsterBase_AvoidMonster");
static_assert(offsetof(MonsterBase_AvoidMonster, Other) == 0x000000, "Member 'MonsterBase_AvoidMonster::Other' has a wrong offset!");

// Function DarwinGame.MonsterBase.CancelBehaviorAndWait
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_CancelBehaviorAndWait final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_CancelBehaviorAndWait) == 0x000008, "Wrong alignment on MonsterBase_CancelBehaviorAndWait");
static_assert(sizeof(MonsterBase_CancelBehaviorAndWait) == 0x000008, "Wrong size on MonsterBase_CancelBehaviorAndWait");
static_assert(offsetof(MonsterBase_CancelBehaviorAndWait, Target) == 0x000000, "Member 'MonsterBase_CancelBehaviorAndWait::Target' has a wrong offset!");

// Function DarwinGame.MonsterBase.CanExetuteMonsterTask
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_CanExetuteMonsterTask final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_CanExetuteMonsterTask) == 0x000001, "Wrong alignment on MonsterBase_CanExetuteMonsterTask");
static_assert(sizeof(MonsterBase_CanExetuteMonsterTask) == 0x000001, "Wrong size on MonsterBase_CanExetuteMonsterTask");
static_assert(offsetof(MonsterBase_CanExetuteMonsterTask, ReturnValue) == 0x000000, "Member 'MonsterBase_CanExetuteMonsterTask::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.ChangeBehavior
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_ChangeBehavior final
{
public:
	bool                                          change;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_ChangeBehavior) == 0x000001, "Wrong alignment on MonsterBase_ChangeBehavior");
static_assert(sizeof(MonsterBase_ChangeBehavior) == 0x000001, "Wrong size on MonsterBase_ChangeBehavior");
static_assert(offsetof(MonsterBase_ChangeBehavior, change) == 0x000000, "Member 'MonsterBase_ChangeBehavior::change' has a wrong offset!");

// Function DarwinGame.MonsterBase.CheckRemakeAttackLocationData
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_CheckRemakeAttackLocationData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_CheckRemakeAttackLocationData) == 0x000001, "Wrong alignment on MonsterBase_CheckRemakeAttackLocationData");
static_assert(sizeof(MonsterBase_CheckRemakeAttackLocationData) == 0x000001, "Wrong size on MonsterBase_CheckRemakeAttackLocationData");
static_assert(offsetof(MonsterBase_CheckRemakeAttackLocationData, ReturnValue) == 0x000000, "Member 'MonsterBase_CheckRemakeAttackLocationData::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.CountEcologicalMotionWithConsecutiveNumber
// 0x000C (0x000C - 0x0000)
struct MonsterBase_CountEcologicalMotionWithConsecutiveNumber final
{
public:
	EMonsterEcologicalMotion                      ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_CountEcologicalMotionWithConsecutiveNumber) == 0x000004, "Wrong alignment on MonsterBase_CountEcologicalMotionWithConsecutiveNumber");
static_assert(sizeof(MonsterBase_CountEcologicalMotionWithConsecutiveNumber) == 0x00000C, "Wrong size on MonsterBase_CountEcologicalMotionWithConsecutiveNumber");
static_assert(offsetof(MonsterBase_CountEcologicalMotionWithConsecutiveNumber, ID) == 0x000000, "Member 'MonsterBase_CountEcologicalMotionWithConsecutiveNumber::ID' has a wrong offset!");
static_assert(offsetof(MonsterBase_CountEcologicalMotionWithConsecutiveNumber, Max) == 0x000004, "Member 'MonsterBase_CountEcologicalMotionWithConsecutiveNumber::Max' has a wrong offset!");
static_assert(offsetof(MonsterBase_CountEcologicalMotionWithConsecutiveNumber, ReturnValue) == 0x000008, "Member 'MonsterBase_CountEcologicalMotionWithConsecutiveNumber::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetAbnormalEffectHandel
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetAbnormalEffectHandel final
{
public:
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetAbnormalEffectHandel) == 0x000004, "Wrong alignment on MonsterBase_GetAbnormalEffectHandel");
static_assert(sizeof(MonsterBase_GetAbnormalEffectHandel) == 0x000008, "Wrong size on MonsterBase_GetAbnormalEffectHandel");
static_assert(offsetof(MonsterBase_GetAbnormalEffectHandel, ReturnValue) == 0x000000, "Member 'MonsterBase_GetAbnormalEffectHandel::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetAcceptableRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_GetAcceptableRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetAcceptableRadius) == 0x000004, "Wrong alignment on MonsterBase_GetAcceptableRadius");
static_assert(sizeof(MonsterBase_GetAcceptableRadius) == 0x000004, "Wrong size on MonsterBase_GetAcceptableRadius");
static_assert(offsetof(MonsterBase_GetAcceptableRadius, ReturnValue) == 0x000000, "Member 'MonsterBase_GetAcceptableRadius::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetAnimSection
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetAnimSection final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetAnimSection) == 0x000004, "Wrong alignment on MonsterBase_GetAnimSection");
static_assert(sizeof(MonsterBase_GetAnimSection) == 0x000008, "Wrong size on MonsterBase_GetAnimSection");
static_assert(offsetof(MonsterBase_GetAnimSection, ReturnValue) == 0x000000, "Member 'MonsterBase_GetAnimSection::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetAreaOfEffectComponent
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetAreaOfEffectComponent final
{
public:
	class UAreaOfEffectControlComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetAreaOfEffectComponent) == 0x000008, "Wrong alignment on MonsterBase_GetAreaOfEffectComponent");
static_assert(sizeof(MonsterBase_GetAreaOfEffectComponent) == 0x000008, "Wrong size on MonsterBase_GetAreaOfEffectComponent");
static_assert(offsetof(MonsterBase_GetAreaOfEffectComponent, ReturnValue) == 0x000000, "Member 'MonsterBase_GetAreaOfEffectComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetBattleAIBase
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetBattleAIBase final
{
public:
	class UMonsterBattleAIBase*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetBattleAIBase) == 0x000008, "Wrong alignment on MonsterBase_GetBattleAIBase");
static_assert(sizeof(MonsterBase_GetBattleAIBase) == 0x000008, "Wrong size on MonsterBase_GetBattleAIBase");
static_assert(offsetof(MonsterBase_GetBattleAIBase, ReturnValue) == 0x000000, "Member 'MonsterBase_GetBattleAIBase::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetBattleOnDead
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetBattleOnDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetBattleOnDead) == 0x000001, "Wrong alignment on MonsterBase_GetBattleOnDead");
static_assert(sizeof(MonsterBase_GetBattleOnDead) == 0x000001, "Wrong size on MonsterBase_GetBattleOnDead");
static_assert(offsetof(MonsterBase_GetBattleOnDead, ReturnValue) == 0x000000, "Member 'MonsterBase_GetBattleOnDead::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetBattleStartWaiting
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetBattleStartWaiting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetBattleStartWaiting) == 0x000001, "Wrong alignment on MonsterBase_GetBattleStartWaiting");
static_assert(sizeof(MonsterBase_GetBattleStartWaiting) == 0x000001, "Wrong size on MonsterBase_GetBattleStartWaiting");
static_assert(offsetof(MonsterBase_GetBattleStartWaiting, ReturnValue) == 0x000000, "Member 'MonsterBase_GetBattleStartWaiting::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetCausedDamage
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetCausedDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetCausedDamage) == 0x000001, "Wrong alignment on MonsterBase_GetCausedDamage");
static_assert(sizeof(MonsterBase_GetCausedDamage) == 0x000001, "Wrong size on MonsterBase_GetCausedDamage");
static_assert(offsetof(MonsterBase_GetCausedDamage, ReturnValue) == 0x000000, "Member 'MonsterBase_GetCausedDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetCombatState
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetCombatState final
{
public:
	EMonsterCombatState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetCombatState) == 0x000001, "Wrong alignment on MonsterBase_GetCombatState");
static_assert(sizeof(MonsterBase_GetCombatState) == 0x000001, "Wrong size on MonsterBase_GetCombatState");
static_assert(offsetof(MonsterBase_GetCombatState, ReturnValue) == 0x000000, "Member 'MonsterBase_GetCombatState::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetEcologicalMotionData
// 0x0030 (0x0030 - 0x0000)
struct MonsterBase_GetEcologicalMotionData final
{
public:
	struct FST_EcologicalMotionData               Out;                                               // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EMonsterEcologicalMotion                      ID;                                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_GetEcologicalMotionData) == 0x000008, "Wrong alignment on MonsterBase_GetEcologicalMotionData");
static_assert(sizeof(MonsterBase_GetEcologicalMotionData) == 0x000030, "Wrong size on MonsterBase_GetEcologicalMotionData");
static_assert(offsetof(MonsterBase_GetEcologicalMotionData, Out) == 0x000000, "Member 'MonsterBase_GetEcologicalMotionData::Out' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetEcologicalMotionData, ID) == 0x000028, "Member 'MonsterBase_GetEcologicalMotionData::ID' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetEcologicalMotionData, ReturnValue) == 0x000029, "Member 'MonsterBase_GetEcologicalMotionData::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetEcologicalMotionDataWithNumber
// 0x0038 (0x0038 - 0x0000)
struct MonsterBase_GetEcologicalMotionDataWithNumber final
{
public:
	struct FST_EcologicalMotionData               Out;                                               // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	EMonsterEcologicalMotion                      ID;                                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         No;                                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_GetEcologicalMotionDataWithNumber) == 0x000008, "Wrong alignment on MonsterBase_GetEcologicalMotionDataWithNumber");
static_assert(sizeof(MonsterBase_GetEcologicalMotionDataWithNumber) == 0x000038, "Wrong size on MonsterBase_GetEcologicalMotionDataWithNumber");
static_assert(offsetof(MonsterBase_GetEcologicalMotionDataWithNumber, Out) == 0x000000, "Member 'MonsterBase_GetEcologicalMotionDataWithNumber::Out' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetEcologicalMotionDataWithNumber, ID) == 0x000028, "Member 'MonsterBase_GetEcologicalMotionDataWithNumber::ID' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetEcologicalMotionDataWithNumber, No) == 0x00002C, "Member 'MonsterBase_GetEcologicalMotionDataWithNumber::No' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetEcologicalMotionDataWithNumber, ReturnValue) == 0x000030, "Member 'MonsterBase_GetEcologicalMotionDataWithNumber::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetLandSection
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetLandSection final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetLandSection) == 0x000004, "Wrong alignment on MonsterBase_GetLandSection");
static_assert(sizeof(MonsterBase_GetLandSection) == 0x000008, "Wrong size on MonsterBase_GetLandSection");
static_assert(offsetof(MonsterBase_GetLandSection, ReturnValue) == 0x000000, "Member 'MonsterBase_GetLandSection::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetMonsterRingComponent
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetMonsterRingComponent final
{
public:
	class UMonsterRingComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetMonsterRingComponent) == 0x000008, "Wrong alignment on MonsterBase_GetMonsterRingComponent");
static_assert(sizeof(MonsterBase_GetMonsterRingComponent) == 0x000008, "Wrong size on MonsterBase_GetMonsterRingComponent");
static_assert(offsetof(MonsterBase_GetMonsterRingComponent, ReturnValue) == 0x000000, "Member 'MonsterBase_GetMonsterRingComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetMoveAnimation
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetMoveAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetMoveAnimation) == 0x000001, "Wrong alignment on MonsterBase_GetMoveAnimation");
static_assert(sizeof(MonsterBase_GetMoveAnimation) == 0x000001, "Wrong size on MonsterBase_GetMoveAnimation");
static_assert(offsetof(MonsterBase_GetMoveAnimation, ReturnValue) == 0x000000, "Member 'MonsterBase_GetMoveAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetOuterRequestLeave
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetOuterRequestLeave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetOuterRequestLeave) == 0x000001, "Wrong alignment on MonsterBase_GetOuterRequestLeave");
static_assert(sizeof(MonsterBase_GetOuterRequestLeave) == 0x000001, "Wrong size on MonsterBase_GetOuterRequestLeave");
static_assert(offsetof(MonsterBase_GetOuterRequestLeave, ReturnValue) == 0x000000, "Member 'MonsterBase_GetOuterRequestLeave::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetParentGeneratorType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetParentGeneratorType final
{
public:
	EEnemySpawnGeneratorType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetParentGeneratorType) == 0x000001, "Wrong alignment on MonsterBase_GetParentGeneratorType");
static_assert(sizeof(MonsterBase_GetParentGeneratorType) == 0x000001, "Wrong size on MonsterBase_GetParentGeneratorType");
static_assert(offsetof(MonsterBase_GetParentGeneratorType, ReturnValue) == 0x000000, "Member 'MonsterBase_GetParentGeneratorType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetReversalTime
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_GetReversalTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetReversalTime) == 0x000004, "Wrong alignment on MonsterBase_GetReversalTime");
static_assert(sizeof(MonsterBase_GetReversalTime) == 0x000004, "Wrong size on MonsterBase_GetReversalTime");
static_assert(offsetof(MonsterBase_GetReversalTime, ReturnValue) == 0x000000, "Member 'MonsterBase_GetReversalTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetSpecialAbilityLevelSequence
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetSpecialAbilityLevelSequence final
{
public:
	class ULevelSequence*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetSpecialAbilityLevelSequence) == 0x000008, "Wrong alignment on MonsterBase_GetSpecialAbilityLevelSequence");
static_assert(sizeof(MonsterBase_GetSpecialAbilityLevelSequence) == 0x000008, "Wrong size on MonsterBase_GetSpecialAbilityLevelSequence");
static_assert(offsetof(MonsterBase_GetSpecialAbilityLevelSequence, ReturnValue) == 0x000000, "Member 'MonsterBase_GetSpecialAbilityLevelSequence::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetSuperArmor
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetSuperArmor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetSuperArmor) == 0x000001, "Wrong alignment on MonsterBase_GetSuperArmor");
static_assert(sizeof(MonsterBase_GetSuperArmor) == 0x000001, "Wrong size on MonsterBase_GetSuperArmor");
static_assert(offsetof(MonsterBase_GetSuperArmor, ReturnValue) == 0x000000, "Member 'MonsterBase_GetSuperArmor::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.HasChangedBehavior
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_HasChangedBehavior final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_HasChangedBehavior) == 0x000001, "Wrong alignment on MonsterBase_HasChangedBehavior");
static_assert(sizeof(MonsterBase_HasChangedBehavior) == 0x000001, "Wrong size on MonsterBase_HasChangedBehavior");
static_assert(offsetof(MonsterBase_HasChangedBehavior, ReturnValue) == 0x000000, "Member 'MonsterBase_HasChangedBehavior::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.HasRequestChangeBehavior
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_HasRequestChangeBehavior final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_HasRequestChangeBehavior) == 0x000001, "Wrong alignment on MonsterBase_HasRequestChangeBehavior");
static_assert(sizeof(MonsterBase_HasRequestChangeBehavior) == 0x000001, "Wrong size on MonsterBase_HasRequestChangeBehavior");
static_assert(offsetof(MonsterBase_HasRequestChangeBehavior, ReturnValue) == 0x000000, "Member 'MonsterBase_HasRequestChangeBehavior::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsChargeBreaking
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsChargeBreaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsChargeBreaking) == 0x000001, "Wrong alignment on MonsterBase_IsChargeBreaking");
static_assert(sizeof(MonsterBase_IsChargeBreaking) == 0x000001, "Wrong size on MonsterBase_IsChargeBreaking");
static_assert(offsetof(MonsterBase_IsChargeBreaking, ReturnValue) == 0x000000, "Member 'MonsterBase_IsChargeBreaking::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsHiding
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsHiding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsHiding) == 0x000001, "Wrong alignment on MonsterBase_IsHiding");
static_assert(sizeof(MonsterBase_IsHiding) == 0x000001, "Wrong size on MonsterBase_IsHiding");
static_assert(offsetof(MonsterBase_IsHiding, ReturnValue) == 0x000000, "Member 'MonsterBase_IsHiding::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsStun
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsStun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsStun) == 0x000001, "Wrong alignment on MonsterBase_IsStun");
static_assert(sizeof(MonsterBase_IsStun) == 0x000001, "Wrong size on MonsterBase_IsStun");
static_assert(offsetof(MonsterBase_IsStun, ReturnValue) == 0x000000, "Member 'MonsterBase_IsStun::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.NeedFixedJump
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_NeedFixedJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_NeedFixedJump) == 0x000001, "Wrong alignment on MonsterBase_NeedFixedJump");
static_assert(sizeof(MonsterBase_NeedFixedJump) == 0x000001, "Wrong size on MonsterBase_NeedFixedJump");
static_assert(offsetof(MonsterBase_NeedFixedJump, ReturnValue) == 0x000000, "Member 'MonsterBase_NeedFixedJump::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.NextBehaviorWithContext
// 0x0010 (0x0010 - 0x0000)
struct MonsterBase_NextBehaviorWithContext final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBehaviorContext                       Context;                                           // 0x0008(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_NextBehaviorWithContext) == 0x000008, "Wrong alignment on MonsterBase_NextBehaviorWithContext");
static_assert(sizeof(MonsterBase_NextBehaviorWithContext) == 0x000010, "Wrong size on MonsterBase_NextBehaviorWithContext");
static_assert(offsetof(MonsterBase_NextBehaviorWithContext, Target) == 0x000000, "Member 'MonsterBase_NextBehaviorWithContext::Target' has a wrong offset!");
static_assert(offsetof(MonsterBase_NextBehaviorWithContext, Context) == 0x000008, "Member 'MonsterBase_NextBehaviorWithContext::Context' has a wrong offset!");

// Function DarwinGame.MonsterBase.RequestChangeBehavior
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_RequestChangeBehavior final
{
public:
	bool                                          change;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_RequestChangeBehavior) == 0x000001, "Wrong alignment on MonsterBase_RequestChangeBehavior");
static_assert(sizeof(MonsterBase_RequestChangeBehavior) == 0x000001, "Wrong size on MonsterBase_RequestChangeBehavior");
static_assert(offsetof(MonsterBase_RequestChangeBehavior, change) == 0x000000, "Member 'MonsterBase_RequestChangeBehavior::change' has a wrong offset!");

// Function DarwinGame.MonsterBase.ResetBehavior
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_ResetBehavior final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_ResetBehavior) == 0x000008, "Wrong alignment on MonsterBase_ResetBehavior");
static_assert(sizeof(MonsterBase_ResetBehavior) == 0x000008, "Wrong size on MonsterBase_ResetBehavior");
static_assert(offsetof(MonsterBase_ResetBehavior, Target) == 0x000000, "Member 'MonsterBase_ResetBehavior::Target' has a wrong offset!");

// Function DarwinGame.MonsterBase.ResetBehaviorWithContext
// 0x0010 (0x0010 - 0x0000)
struct MonsterBase_ResetBehaviorWithContext final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBehaviorContext                       Context;                                           // 0x0008(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_ResetBehaviorWithContext) == 0x000008, "Wrong alignment on MonsterBase_ResetBehaviorWithContext");
static_assert(sizeof(MonsterBase_ResetBehaviorWithContext) == 0x000010, "Wrong size on MonsterBase_ResetBehaviorWithContext");
static_assert(offsetof(MonsterBase_ResetBehaviorWithContext, Target) == 0x000000, "Member 'MonsterBase_ResetBehaviorWithContext::Target' has a wrong offset!");
static_assert(offsetof(MonsterBase_ResetBehaviorWithContext, Context) == 0x000008, "Member 'MonsterBase_ResetBehaviorWithContext::Context' has a wrong offset!");

// Function DarwinGame.MonsterBase.RotateToSelectTarget
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_RotateToSelectTarget final
{
public:
	int32                                         RotateRate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_RotateToSelectTarget) == 0x000004, "Wrong alignment on MonsterBase_RotateToSelectTarget");
static_assert(sizeof(MonsterBase_RotateToSelectTarget) == 0x000004, "Wrong size on MonsterBase_RotateToSelectTarget");
static_assert(offsetof(MonsterBase_RotateToSelectTarget, RotateRate) == 0x000000, "Member 'MonsterBase_RotateToSelectTarget::RotateRate' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetAbnormalEffectHandle
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_SetAbnormalEffectHandle final
{
public:
	struct FActiveGameplayEffectHandle            meffect;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetAbnormalEffectHandle) == 0x000004, "Wrong alignment on MonsterBase_SetAbnormalEffectHandle");
static_assert(sizeof(MonsterBase_SetAbnormalEffectHandle) == 0x000008, "Wrong size on MonsterBase_SetAbnormalEffectHandle");
static_assert(offsetof(MonsterBase_SetAbnormalEffectHandle, meffect) == 0x000000, "Member 'MonsterBase_SetAbnormalEffectHandle::meffect' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetAcceptableRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_SetAcceptableRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetAcceptableRadius) == 0x000004, "Wrong alignment on MonsterBase_SetAcceptableRadius");
static_assert(sizeof(MonsterBase_SetAcceptableRadius) == 0x000004, "Wrong size on MonsterBase_SetAcceptableRadius");
static_assert(offsetof(MonsterBase_SetAcceptableRadius, Radius) == 0x000000, "Member 'MonsterBase_SetAcceptableRadius::Radius' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetAnimSection
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_SetAnimSection final
{
public:
	class FName                                   Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetAnimSection) == 0x000004, "Wrong alignment on MonsterBase_SetAnimSection");
static_assert(sizeof(MonsterBase_SetAnimSection) == 0x000008, "Wrong size on MonsterBase_SetAnimSection");
static_assert(offsetof(MonsterBase_SetAnimSection, Section) == 0x000000, "Member 'MonsterBase_SetAnimSection::Section' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetBattleOnDead
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetBattleOnDead final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetBattleOnDead) == 0x000001, "Wrong alignment on MonsterBase_SetBattleOnDead");
static_assert(sizeof(MonsterBase_SetBattleOnDead) == 0x000001, "Wrong size on MonsterBase_SetBattleOnDead");
static_assert(offsetof(MonsterBase_SetBattleOnDead, flg) == 0x000000, "Member 'MonsterBase_SetBattleOnDead::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetBattleStartWaiting
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetBattleStartWaiting final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetBattleStartWaiting) == 0x000001, "Wrong alignment on MonsterBase_SetBattleStartWaiting");
static_assert(sizeof(MonsterBase_SetBattleStartWaiting) == 0x000001, "Wrong size on MonsterBase_SetBattleStartWaiting");
static_assert(offsetof(MonsterBase_SetBattleStartWaiting, flg) == 0x000000, "Member 'MonsterBase_SetBattleStartWaiting::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetBehavior
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetBehavior final
{
public:
	EMonsterBehavior                              Behavior;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetBehavior) == 0x000001, "Wrong alignment on MonsterBase_SetBehavior");
static_assert(sizeof(MonsterBase_SetBehavior) == 0x000001, "Wrong size on MonsterBase_SetBehavior");
static_assert(offsetof(MonsterBase_SetBehavior, Behavior) == 0x000000, "Member 'MonsterBase_SetBehavior::Behavior' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetBoolOnBlackboard
// 0x000C (0x000C - 0x0000)
struct MonsterBase_SetBoolOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_SetBoolOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_SetBoolOnBlackboard");
static_assert(sizeof(MonsterBase_SetBoolOnBlackboard) == 0x00000C, "Wrong size on MonsterBase_SetBoolOnBlackboard");
static_assert(offsetof(MonsterBase_SetBoolOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_SetBoolOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetBoolOnBlackboard, Value) == 0x000008, "Member 'MonsterBase_SetBoolOnBlackboard::Value' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetCausedDamage
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetCausedDamage final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetCausedDamage) == 0x000001, "Wrong alignment on MonsterBase_SetCausedDamage");
static_assert(sizeof(MonsterBase_SetCausedDamage) == 0x000001, "Wrong size on MonsterBase_SetCausedDamage");
static_assert(offsetof(MonsterBase_SetCausedDamage, flg) == 0x000000, "Member 'MonsterBase_SetCausedDamage::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetChargeBreaking
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetChargeBreaking final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetChargeBreaking) == 0x000001, "Wrong alignment on MonsterBase_SetChargeBreaking");
static_assert(sizeof(MonsterBase_SetChargeBreaking) == 0x000001, "Wrong size on MonsterBase_SetChargeBreaking");
static_assert(offsetof(MonsterBase_SetChargeBreaking, flg) == 0x000000, "Member 'MonsterBase_SetChargeBreaking::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetCombatState
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetCombatState final
{
public:
	EMonsterCombatState                           State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetCombatState) == 0x000001, "Wrong alignment on MonsterBase_SetCombatState");
static_assert(sizeof(MonsterBase_SetCombatState) == 0x000001, "Wrong size on MonsterBase_SetCombatState");
static_assert(offsetof(MonsterBase_SetCombatState, State) == 0x000000, "Member 'MonsterBase_SetCombatState::State' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetDamageCollisionEnable
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetDamageCollisionEnable final
{
public:
	bool                                          isEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetDamageCollisionEnable) == 0x000001, "Wrong alignment on MonsterBase_SetDamageCollisionEnable");
static_assert(sizeof(MonsterBase_SetDamageCollisionEnable) == 0x000001, "Wrong size on MonsterBase_SetDamageCollisionEnable");
static_assert(offsetof(MonsterBase_SetDamageCollisionEnable, isEnable) == 0x000000, "Member 'MonsterBase_SetDamageCollisionEnable::isEnable' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetEcologicalState
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetEcologicalState final
{
public:
	EEcologicalState                              ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetEcologicalState) == 0x000001, "Wrong alignment on MonsterBase_SetEcologicalState");
static_assert(sizeof(MonsterBase_SetEcologicalState) == 0x000001, "Wrong size on MonsterBase_SetEcologicalState");
static_assert(offsetof(MonsterBase_SetEcologicalState, ID) == 0x000000, "Member 'MonsterBase_SetEcologicalState::ID' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetFloatOnBlackboard
// 0x000C (0x000C - 0x0000)
struct MonsterBase_SetFloatOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetFloatOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_SetFloatOnBlackboard");
static_assert(sizeof(MonsterBase_SetFloatOnBlackboard) == 0x00000C, "Wrong size on MonsterBase_SetFloatOnBlackboard");
static_assert(offsetof(MonsterBase_SetFloatOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_SetFloatOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetFloatOnBlackboard, Value) == 0x000008, "Member 'MonsterBase_SetFloatOnBlackboard::Value' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetHidingDamage
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetHidingDamage final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetHidingDamage) == 0x000001, "Wrong alignment on MonsterBase_SetHidingDamage");
static_assert(sizeof(MonsterBase_SetHidingDamage) == 0x000001, "Wrong size on MonsterBase_SetHidingDamage");
static_assert(offsetof(MonsterBase_SetHidingDamage, flg) == 0x000000, "Member 'MonsterBase_SetHidingDamage::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetIntOnBlackboard
// 0x000C (0x000C - 0x0000)
struct MonsterBase_SetIntOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetIntOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_SetIntOnBlackboard");
static_assert(sizeof(MonsterBase_SetIntOnBlackboard) == 0x00000C, "Wrong size on MonsterBase_SetIntOnBlackboard");
static_assert(offsetof(MonsterBase_SetIntOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_SetIntOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetIntOnBlackboard, Value) == 0x000008, "Member 'MonsterBase_SetIntOnBlackboard::Value' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetLandSection
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_SetLandSection final
{
public:
	class FName                                   Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetLandSection) == 0x000004, "Wrong alignment on MonsterBase_SetLandSection");
static_assert(sizeof(MonsterBase_SetLandSection) == 0x000008, "Wrong size on MonsterBase_SetLandSection");
static_assert(offsetof(MonsterBase_SetLandSection, Section) == 0x000000, "Member 'MonsterBase_SetLandSection::Section' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetMagicChantingTimer
// 0x0010 (0x0010 - 0x0000)
struct MonsterBase_SetMagicChantingTimer final
{
public:
	class AEffectBase*                            chantingEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         chantingTimer;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_SetMagicChantingTimer) == 0x000008, "Wrong alignment on MonsterBase_SetMagicChantingTimer");
static_assert(sizeof(MonsterBase_SetMagicChantingTimer) == 0x000010, "Wrong size on MonsterBase_SetMagicChantingTimer");
static_assert(offsetof(MonsterBase_SetMagicChantingTimer, chantingEffect) == 0x000000, "Member 'MonsterBase_SetMagicChantingTimer::chantingEffect' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetMagicChantingTimer, chantingTimer) == 0x000008, "Member 'MonsterBase_SetMagicChantingTimer::chantingTimer' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetMonsterStatus
// 0x0002 (0x0002 - 0x0000)
struct MonsterBase_SetMonsterStatus final
{
public:
	EMonsterStatus                                Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetFlag;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetMonsterStatus) == 0x000001, "Wrong alignment on MonsterBase_SetMonsterStatus");
static_assert(sizeof(MonsterBase_SetMonsterStatus) == 0x000002, "Wrong size on MonsterBase_SetMonsterStatus");
static_assert(offsetof(MonsterBase_SetMonsterStatus, Status) == 0x000000, "Member 'MonsterBase_SetMonsterStatus::Status' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetMonsterStatus, SetFlag) == 0x000001, "Member 'MonsterBase_SetMonsterStatus::SetFlag' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetMoveAnimation
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetMoveAnimation final
{
public:
	bool                                          Animation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetMoveAnimation) == 0x000001, "Wrong alignment on MonsterBase_SetMoveAnimation");
static_assert(sizeof(MonsterBase_SetMoveAnimation) == 0x000001, "Wrong size on MonsterBase_SetMoveAnimation");
static_assert(offsetof(MonsterBase_SetMoveAnimation, Animation) == 0x000000, "Member 'MonsterBase_SetMoveAnimation::Animation' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetOuterRequestLeave
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetOuterRequestLeave final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetOuterRequestLeave) == 0x000001, "Wrong alignment on MonsterBase_SetOuterRequestLeave");
static_assert(sizeof(MonsterBase_SetOuterRequestLeave) == 0x000001, "Wrong size on MonsterBase_SetOuterRequestLeave");
static_assert(offsetof(MonsterBase_SetOuterRequestLeave, flg) == 0x000000, "Member 'MonsterBase_SetOuterRequestLeave::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetPlayingDeadEd
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetPlayingDeadEd final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetPlayingDeadEd) == 0x000001, "Wrong alignment on MonsterBase_SetPlayingDeadEd");
static_assert(sizeof(MonsterBase_SetPlayingDeadEd) == 0x000001, "Wrong size on MonsterBase_SetPlayingDeadEd");
static_assert(offsetof(MonsterBase_SetPlayingDeadEd, flg) == 0x000000, "Member 'MonsterBase_SetPlayingDeadEd::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetPlayingHideEd
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetPlayingHideEd final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetPlayingHideEd) == 0x000001, "Wrong alignment on MonsterBase_SetPlayingHideEd");
static_assert(sizeof(MonsterBase_SetPlayingHideEd) == 0x000001, "Wrong size on MonsterBase_SetPlayingHideEd");
static_assert(offsetof(MonsterBase_SetPlayingHideEd, flg) == 0x000000, "Member 'MonsterBase_SetPlayingHideEd::flg' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetStateComplete
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetStateComplete final
{
public:
	bool                                          Complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetStateComplete) == 0x000001, "Wrong alignment on MonsterBase_SetStateComplete");
static_assert(sizeof(MonsterBase_SetStateComplete) == 0x000001, "Wrong size on MonsterBase_SetStateComplete");
static_assert(offsetof(MonsterBase_SetStateComplete, Complete) == 0x000000, "Member 'MonsterBase_SetStateComplete::Complete' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetSuperArmor
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetSuperArmor final
{
public:
	bool                                          change;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetSuperArmor) == 0x000001, "Wrong alignment on MonsterBase_SetSuperArmor");
static_assert(sizeof(MonsterBase_SetSuperArmor) == 0x000001, "Wrong size on MonsterBase_SetSuperArmor");
static_assert(offsetof(MonsterBase_SetSuperArmor, change) == 0x000000, "Member 'MonsterBase_SetSuperArmor::change' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetTargetDropItemOnBlackboard
// 0x0010 (0x0010 - 0x0000)
struct MonsterBase_SetTargetDropItemOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADropItemObject*                        Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetTargetDropItemOnBlackboard) == 0x000008, "Wrong alignment on MonsterBase_SetTargetDropItemOnBlackboard");
static_assert(sizeof(MonsterBase_SetTargetDropItemOnBlackboard) == 0x000010, "Wrong size on MonsterBase_SetTargetDropItemOnBlackboard");
static_assert(offsetof(MonsterBase_SetTargetDropItemOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_SetTargetDropItemOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetTargetDropItemOnBlackboard, Actor) == 0x000008, "Member 'MonsterBase_SetTargetDropItemOnBlackboard::Actor' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetTerritoryMaxRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_SetTerritoryMaxRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetTerritoryMaxRadius) == 0x000004, "Wrong alignment on MonsterBase_SetTerritoryMaxRadius");
static_assert(sizeof(MonsterBase_SetTerritoryMaxRadius) == 0x000004, "Wrong size on MonsterBase_SetTerritoryMaxRadius");
static_assert(offsetof(MonsterBase_SetTerritoryMaxRadius, Radius) == 0x000000, "Member 'MonsterBase_SetTerritoryMaxRadius::Radius' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetTerritoryMinRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_SetTerritoryMinRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetTerritoryMinRadius) == 0x000004, "Wrong alignment on MonsterBase_SetTerritoryMinRadius");
static_assert(sizeof(MonsterBase_SetTerritoryMinRadius) == 0x000004, "Wrong size on MonsterBase_SetTerritoryMinRadius");
static_assert(offsetof(MonsterBase_SetTerritoryMinRadius, Radius) == 0x000000, "Member 'MonsterBase_SetTerritoryMinRadius::Radius' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetThoughtType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_SetThoughtType final
{
public:
	EMonsterThoughtType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetThoughtType) == 0x000001, "Wrong alignment on MonsterBase_SetThoughtType");
static_assert(sizeof(MonsterBase_SetThoughtType) == 0x000001, "Wrong size on MonsterBase_SetThoughtType");
static_assert(offsetof(MonsterBase_SetThoughtType, Type) == 0x000000, "Member 'MonsterBase_SetThoughtType::Type' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetTurn
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_SetTurn final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLeft;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_SetTurn) == 0x000004, "Wrong alignment on MonsterBase_SetTurn");
static_assert(sizeof(MonsterBase_SetTurn) == 0x000008, "Wrong size on MonsterBase_SetTurn");
static_assert(offsetof(MonsterBase_SetTurn, Angle) == 0x000000, "Member 'MonsterBase_SetTurn::Angle' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetTurn, isLeft) == 0x000004, "Member 'MonsterBase_SetTurn::isLeft' has a wrong offset!");

// Function DarwinGame.MonsterBase.SetVectorOnBlackboard
// 0x0014 (0x0014 - 0x0000)
struct MonsterBase_SetVectorOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_SetVectorOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_SetVectorOnBlackboard");
static_assert(sizeof(MonsterBase_SetVectorOnBlackboard) == 0x000014, "Wrong size on MonsterBase_SetVectorOnBlackboard");
static_assert(offsetof(MonsterBase_SetVectorOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_SetVectorOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_SetVectorOnBlackboard, Location) == 0x000008, "Member 'MonsterBase_SetVectorOnBlackboard::Location' has a wrong offset!");

// Function DarwinGame.MonsterBase.StartEcoActCoolTime
// 0x000C (0x000C - 0x0000)
struct MonsterBase_StartEcoActCoolTime final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_StartEcoActCoolTime) == 0x000004, "Wrong alignment on MonsterBase_StartEcoActCoolTime");
static_assert(sizeof(MonsterBase_StartEcoActCoolTime) == 0x00000C, "Wrong size on MonsterBase_StartEcoActCoolTime");
static_assert(offsetof(MonsterBase_StartEcoActCoolTime, ID) == 0x000000, "Member 'MonsterBase_StartEcoActCoolTime::ID' has a wrong offset!");
static_assert(offsetof(MonsterBase_StartEcoActCoolTime, Time) == 0x000008, "Member 'MonsterBase_StartEcoActCoolTime::Time' has a wrong offset!");

// Function DarwinGame.MonsterBase.TaskFinishBroadcast
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_TaskFinishBroadcast final
{
public:
	bool                                          IsCallBroadcast;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_TaskFinishBroadcast) == 0x000001, "Wrong alignment on MonsterBase_TaskFinishBroadcast");
static_assert(sizeof(MonsterBase_TaskFinishBroadcast) == 0x000001, "Wrong size on MonsterBase_TaskFinishBroadcast");
static_assert(offsetof(MonsterBase_TaskFinishBroadcast, IsCallBroadcast) == 0x000000, "Member 'MonsterBase_TaskFinishBroadcast::IsCallBroadcast' has a wrong offset!");

// Function DarwinGame.MonsterBase.UpdateActionCoolTime
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_UpdateActionCoolTime final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_UpdateActionCoolTime) == 0x000004, "Wrong alignment on MonsterBase_UpdateActionCoolTime");
static_assert(sizeof(MonsterBase_UpdateActionCoolTime) == 0x000004, "Wrong size on MonsterBase_UpdateActionCoolTime");
static_assert(offsetof(MonsterBase_UpdateActionCoolTime, DeltaTime) == 0x000000, "Member 'MonsterBase_UpdateActionCoolTime::DeltaTime' has a wrong offset!");

// Function DarwinGame.MonsterBase.UpdateEcoActCoolTime
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_UpdateEcoActCoolTime final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_UpdateEcoActCoolTime) == 0x000004, "Wrong alignment on MonsterBase_UpdateEcoActCoolTime");
static_assert(sizeof(MonsterBase_UpdateEcoActCoolTime) == 0x000004, "Wrong size on MonsterBase_UpdateEcoActCoolTime");
static_assert(offsetof(MonsterBase_UpdateEcoActCoolTime, DeltaTime) == 0x000000, "Member 'MonsterBase_UpdateEcoActCoolTime::DeltaTime' has a wrong offset!");

// Function DarwinGame.MonsterBase.ValidEcologicalMotion
// 0x0002 (0x0002 - 0x0000)
struct MonsterBase_ValidEcologicalMotion final
{
public:
	EMonsterEcologicalMotion                      ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_ValidEcologicalMotion) == 0x000001, "Wrong alignment on MonsterBase_ValidEcologicalMotion");
static_assert(sizeof(MonsterBase_ValidEcologicalMotion) == 0x000002, "Wrong size on MonsterBase_ValidEcologicalMotion");
static_assert(offsetof(MonsterBase_ValidEcologicalMotion, ID) == 0x000000, "Member 'MonsterBase_ValidEcologicalMotion::ID' has a wrong offset!");
static_assert(offsetof(MonsterBase_ValidEcologicalMotion, ReturnValue) == 0x000001, "Member 'MonsterBase_ValidEcologicalMotion::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.ValidEcologicalMotions
// 0x0018 (0x0018 - 0x0000)
struct MonsterBase_ValidEcologicalMotions final
{
public:
	TArray<EMonsterEcologicalMotion>              IDs;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_ValidEcologicalMotions) == 0x000008, "Wrong alignment on MonsterBase_ValidEcologicalMotions");
static_assert(sizeof(MonsterBase_ValidEcologicalMotions) == 0x000018, "Wrong size on MonsterBase_ValidEcologicalMotions");
static_assert(offsetof(MonsterBase_ValidEcologicalMotions, IDs) == 0x000000, "Member 'MonsterBase_ValidEcologicalMotions::IDs' has a wrong offset!");
static_assert(offsetof(MonsterBase_ValidEcologicalMotions, ReturnValue) == 0x000010, "Member 'MonsterBase_ValidEcologicalMotions::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.ValidEcologicalMotionWithNumber
// 0x000C (0x000C - 0x0000)
struct MonsterBase_ValidEcologicalMotionWithNumber final
{
public:
	EMonsterEcologicalMotion                      ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         No;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_ValidEcologicalMotionWithNumber) == 0x000004, "Wrong alignment on MonsterBase_ValidEcologicalMotionWithNumber");
static_assert(sizeof(MonsterBase_ValidEcologicalMotionWithNumber) == 0x00000C, "Wrong size on MonsterBase_ValidEcologicalMotionWithNumber");
static_assert(offsetof(MonsterBase_ValidEcologicalMotionWithNumber, ID) == 0x000000, "Member 'MonsterBase_ValidEcologicalMotionWithNumber::ID' has a wrong offset!");
static_assert(offsetof(MonsterBase_ValidEcologicalMotionWithNumber, No) == 0x000004, "Member 'MonsterBase_ValidEcologicalMotionWithNumber::No' has a wrong offset!");
static_assert(offsetof(MonsterBase_ValidEcologicalMotionWithNumber, ReturnValue) == 0x000008, "Member 'MonsterBase_ValidEcologicalMotionWithNumber::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.ValidTurn
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_ValidTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_ValidTurn) == 0x000001, "Wrong alignment on MonsterBase_ValidTurn");
static_assert(sizeof(MonsterBase_ValidTurn) == 0x000001, "Wrong size on MonsterBase_ValidTurn");
static_assert(offsetof(MonsterBase_ValidTurn, ReturnValue) == 0x000000, "Member 'MonsterBase_ValidTurn::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetActionCycle
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_GetActionCycle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetActionCycle) == 0x000004, "Wrong alignment on MonsterBase_GetActionCycle");
static_assert(sizeof(MonsterBase_GetActionCycle) == 0x000004, "Wrong size on MonsterBase_GetActionCycle");
static_assert(offsetof(MonsterBase_GetActionCycle, ReturnValue) == 0x000000, "Member 'MonsterBase_GetActionCycle::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetBehavior
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetBehavior final
{
public:
	EMonsterBehavior                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetBehavior) == 0x000001, "Wrong alignment on MonsterBase_GetBehavior");
static_assert(sizeof(MonsterBase_GetBehavior) == 0x000001, "Wrong size on MonsterBase_GetBehavior");
static_assert(offsetof(MonsterBase_GetBehavior, ReturnValue) == 0x000000, "Member 'MonsterBase_GetBehavior::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetBoolOnBlackboard
// 0x000C (0x000C - 0x0000)
struct MonsterBase_GetBoolOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_GetBoolOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_GetBoolOnBlackboard");
static_assert(sizeof(MonsterBase_GetBoolOnBlackboard) == 0x00000C, "Wrong size on MonsterBase_GetBoolOnBlackboard");
static_assert(offsetof(MonsterBase_GetBoolOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_GetBoolOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetBoolOnBlackboard, ReturnValue) == 0x000008, "Member 'MonsterBase_GetBoolOnBlackboard::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetEcologicalState
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetEcologicalState final
{
public:
	EEcologicalState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetEcologicalState) == 0x000001, "Wrong alignment on MonsterBase_GetEcologicalState");
static_assert(sizeof(MonsterBase_GetEcologicalState) == 0x000001, "Wrong size on MonsterBase_GetEcologicalState");
static_assert(offsetof(MonsterBase_GetEcologicalState, ReturnValue) == 0x000000, "Member 'MonsterBase_GetEcologicalState::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetFieldLinkType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetFieldLinkType final
{
public:
	EFieldLinkType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetFieldLinkType) == 0x000001, "Wrong alignment on MonsterBase_GetFieldLinkType");
static_assert(sizeof(MonsterBase_GetFieldLinkType) == 0x000001, "Wrong size on MonsterBase_GetFieldLinkType");
static_assert(offsetof(MonsterBase_GetFieldLinkType, ReturnValue) == 0x000000, "Member 'MonsterBase_GetFieldLinkType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetFloatOnBlackboard
// 0x000C (0x000C - 0x0000)
struct MonsterBase_GetFloatOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetFloatOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_GetFloatOnBlackboard");
static_assert(sizeof(MonsterBase_GetFloatOnBlackboard) == 0x00000C, "Wrong size on MonsterBase_GetFloatOnBlackboard");
static_assert(offsetof(MonsterBase_GetFloatOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_GetFloatOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetFloatOnBlackboard, ReturnValue) == 0x000008, "Member 'MonsterBase_GetFloatOnBlackboard::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetIntOnBlackboard
// 0x000C (0x000C - 0x0000)
struct MonsterBase_GetIntOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetIntOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_GetIntOnBlackboard");
static_assert(sizeof(MonsterBase_GetIntOnBlackboard) == 0x00000C, "Wrong size on MonsterBase_GetIntOnBlackboard");
static_assert(offsetof(MonsterBase_GetIntOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_GetIntOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetIntOnBlackboard, ReturnValue) == 0x000008, "Member 'MonsterBase_GetIntOnBlackboard::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetIsBoss
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetIsBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetIsBoss) == 0x000001, "Wrong alignment on MonsterBase_GetIsBoss");
static_assert(sizeof(MonsterBase_GetIsBoss) == 0x000001, "Wrong size on MonsterBase_GetIsBoss");
static_assert(offsetof(MonsterBase_GetIsBoss, ReturnValue) == 0x000000, "Member 'MonsterBase_GetIsBoss::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetIsKeepInvisible
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetIsKeepInvisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetIsKeepInvisible) == 0x000001, "Wrong alignment on MonsterBase_GetIsKeepInvisible");
static_assert(sizeof(MonsterBase_GetIsKeepInvisible) == 0x000001, "Wrong size on MonsterBase_GetIsKeepInvisible");
static_assert(offsetof(MonsterBase_GetIsKeepInvisible, ReturnValue) == 0x000000, "Member 'MonsterBase_GetIsKeepInvisible::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetIsNormalBoss
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetIsNormalBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetIsNormalBoss) == 0x000001, "Wrong alignment on MonsterBase_GetIsNormalBoss");
static_assert(sizeof(MonsterBase_GetIsNormalBoss) == 0x000001, "Wrong size on MonsterBase_GetIsNormalBoss");
static_assert(offsetof(MonsterBase_GetIsNormalBoss, ReturnValue) == 0x000000, "Member 'MonsterBase_GetIsNormalBoss::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetKindIDName
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetKindIDName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetKindIDName) == 0x000004, "Wrong alignment on MonsterBase_GetKindIDName");
static_assert(sizeof(MonsterBase_GetKindIDName) == 0x000008, "Wrong size on MonsterBase_GetKindIDName");
static_assert(offsetof(MonsterBase_GetKindIDName, ReturnValue) == 0x000000, "Member 'MonsterBase_GetKindIDName::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetMonsterAIController
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_GetMonsterAIController final
{
public:
	class AMonsterAIController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetMonsterAIController) == 0x000008, "Wrong alignment on MonsterBase_GetMonsterAIController");
static_assert(sizeof(MonsterBase_GetMonsterAIController) == 0x000008, "Wrong size on MonsterBase_GetMonsterAIController");
static_assert(offsetof(MonsterBase_GetMonsterAIController, ReturnValue) == 0x000000, "Member 'MonsterBase_GetMonsterAIController::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetMonsterStatus
// 0x0002 (0x0002 - 0x0000)
struct MonsterBase_GetMonsterStatus final
{
public:
	EMonsterStatus                                Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetMonsterStatus) == 0x000001, "Wrong alignment on MonsterBase_GetMonsterStatus");
static_assert(sizeof(MonsterBase_GetMonsterStatus) == 0x000002, "Wrong size on MonsterBase_GetMonsterStatus");
static_assert(offsetof(MonsterBase_GetMonsterStatus, Status) == 0x000000, "Member 'MonsterBase_GetMonsterStatus::Status' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetMonsterStatus, ReturnValue) == 0x000001, "Member 'MonsterBase_GetMonsterStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetParamMonsterType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetParamMonsterType final
{
public:
	EMonsterType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetParamMonsterType) == 0x000001, "Wrong alignment on MonsterBase_GetParamMonsterType");
static_assert(sizeof(MonsterBase_GetParamMonsterType) == 0x000001, "Wrong size on MonsterBase_GetParamMonsterType");
static_assert(offsetof(MonsterBase_GetParamMonsterType, ReturnValue) == 0x000000, "Member 'MonsterBase_GetParamMonsterType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetPartyIndex
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_GetPartyIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetPartyIndex) == 0x000004, "Wrong alignment on MonsterBase_GetPartyIndex");
static_assert(sizeof(MonsterBase_GetPartyIndex) == 0x000004, "Wrong size on MonsterBase_GetPartyIndex");
static_assert(offsetof(MonsterBase_GetPartyIndex, ReturnValue) == 0x000000, "Member 'MonsterBase_GetPartyIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetRotatorOnBlackboard
// 0x0014 (0x0014 - 0x0000)
struct MonsterBase_GetRotatorOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetRotatorOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_GetRotatorOnBlackboard");
static_assert(sizeof(MonsterBase_GetRotatorOnBlackboard) == 0x000014, "Wrong size on MonsterBase_GetRotatorOnBlackboard");
static_assert(offsetof(MonsterBase_GetRotatorOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_GetRotatorOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetRotatorOnBlackboard, ReturnValue) == 0x000008, "Member 'MonsterBase_GetRotatorOnBlackboard::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetStateComplete
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetStateComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetStateComplete) == 0x000001, "Wrong alignment on MonsterBase_GetStateComplete");
static_assert(sizeof(MonsterBase_GetStateComplete) == 0x000001, "Wrong size on MonsterBase_GetStateComplete");
static_assert(offsetof(MonsterBase_GetStateComplete, ReturnValue) == 0x000000, "Member 'MonsterBase_GetStateComplete::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetTargetDropItemOnBlackboard
// 0x0010 (0x0010 - 0x0000)
struct MonsterBase_GetTargetDropItemOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADropItemObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetTargetDropItemOnBlackboard) == 0x000008, "Wrong alignment on MonsterBase_GetTargetDropItemOnBlackboard");
static_assert(sizeof(MonsterBase_GetTargetDropItemOnBlackboard) == 0x000010, "Wrong size on MonsterBase_GetTargetDropItemOnBlackboard");
static_assert(offsetof(MonsterBase_GetTargetDropItemOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_GetTargetDropItemOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetTargetDropItemOnBlackboard, ReturnValue) == 0x000008, "Member 'MonsterBase_GetTargetDropItemOnBlackboard::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetTargetOnBlackboard
// 0x0010 (0x0010 - 0x0000)
struct MonsterBase_GetTargetOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetTargetOnBlackboard) == 0x000008, "Wrong alignment on MonsterBase_GetTargetOnBlackboard");
static_assert(sizeof(MonsterBase_GetTargetOnBlackboard) == 0x000010, "Wrong size on MonsterBase_GetTargetOnBlackboard");
static_assert(offsetof(MonsterBase_GetTargetOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_GetTargetOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetTargetOnBlackboard, ReturnValue) == 0x000008, "Member 'MonsterBase_GetTargetOnBlackboard::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetTerritoryMaxRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_GetTerritoryMaxRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetTerritoryMaxRadius) == 0x000004, "Wrong alignment on MonsterBase_GetTerritoryMaxRadius");
static_assert(sizeof(MonsterBase_GetTerritoryMaxRadius) == 0x000004, "Wrong size on MonsterBase_GetTerritoryMaxRadius");
static_assert(offsetof(MonsterBase_GetTerritoryMaxRadius, ReturnValue) == 0x000000, "Member 'MonsterBase_GetTerritoryMaxRadius::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetTerritoryMinRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBase_GetTerritoryMinRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetTerritoryMinRadius) == 0x000004, "Wrong alignment on MonsterBase_GetTerritoryMinRadius");
static_assert(sizeof(MonsterBase_GetTerritoryMinRadius) == 0x000004, "Wrong size on MonsterBase_GetTerritoryMinRadius");
static_assert(offsetof(MonsterBase_GetTerritoryMinRadius, ReturnValue) == 0x000000, "Member 'MonsterBase_GetTerritoryMinRadius::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetThoughtType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_GetThoughtType final
{
public:
	EMonsterThoughtType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetThoughtType) == 0x000001, "Wrong alignment on MonsterBase_GetThoughtType");
static_assert(sizeof(MonsterBase_GetThoughtType) == 0x000001, "Wrong size on MonsterBase_GetThoughtType");
static_assert(offsetof(MonsterBase_GetThoughtType, ReturnValue) == 0x000000, "Member 'MonsterBase_GetThoughtType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.GetVectorOnBlackboard
// 0x0014 (0x0014 - 0x0000)
struct MonsterBase_GetVectorOnBlackboard final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_GetVectorOnBlackboard) == 0x000004, "Wrong alignment on MonsterBase_GetVectorOnBlackboard");
static_assert(sizeof(MonsterBase_GetVectorOnBlackboard) == 0x000014, "Wrong size on MonsterBase_GetVectorOnBlackboard");
static_assert(offsetof(MonsterBase_GetVectorOnBlackboard, Key) == 0x000000, "Member 'MonsterBase_GetVectorOnBlackboard::Key' has a wrong offset!");
static_assert(offsetof(MonsterBase_GetVectorOnBlackboard, ReturnValue) == 0x000008, "Member 'MonsterBase_GetVectorOnBlackboard::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsEnemyMonster
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsEnemyMonster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsEnemyMonster) == 0x000001, "Wrong alignment on MonsterBase_IsEnemyMonster");
static_assert(sizeof(MonsterBase_IsEnemyMonster) == 0x000001, "Wrong size on MonsterBase_IsEnemyMonster");
static_assert(offsetof(MonsterBase_IsEnemyMonster, ReturnValue) == 0x000000, "Member 'MonsterBase_IsEnemyMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsFlyType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsFlyType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsFlyType) == 0x000001, "Wrong alignment on MonsterBase_IsFlyType");
static_assert(sizeof(MonsterBase_IsFlyType) == 0x000001, "Wrong size on MonsterBase_IsFlyType");
static_assert(offsetof(MonsterBase_IsFlyType, ReturnValue) == 0x000000, "Member 'MonsterBase_IsFlyType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsFriendMonster
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsFriendMonster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsFriendMonster) == 0x000001, "Wrong alignment on MonsterBase_IsFriendMonster");
static_assert(sizeof(MonsterBase_IsFriendMonster) == 0x000001, "Wrong size on MonsterBase_IsFriendMonster");
static_assert(offsetof(MonsterBase_IsFriendMonster, ReturnValue) == 0x000000, "Member 'MonsterBase_IsFriendMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsHidingDamage
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsHidingDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsHidingDamage) == 0x000001, "Wrong alignment on MonsterBase_IsHidingDamage");
static_assert(sizeof(MonsterBase_IsHidingDamage) == 0x000001, "Wrong size on MonsterBase_IsHidingDamage");
static_assert(offsetof(MonsterBase_IsHidingDamage, ReturnValue) == 0x000000, "Member 'MonsterBase_IsHidingDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsHighAltitude
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsHighAltitude final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsHighAltitude) == 0x000001, "Wrong alignment on MonsterBase_IsHighAltitude");
static_assert(sizeof(MonsterBase_IsHighAltitude) == 0x000001, "Wrong size on MonsterBase_IsHighAltitude");
static_assert(offsetof(MonsterBase_IsHighAltitude, ReturnValue) == 0x000000, "Member 'MonsterBase_IsHighAltitude::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsPlayingDeadEd
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsPlayingDeadEd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsPlayingDeadEd) == 0x000001, "Wrong alignment on MonsterBase_IsPlayingDeadEd");
static_assert(sizeof(MonsterBase_IsPlayingDeadEd) == 0x000001, "Wrong size on MonsterBase_IsPlayingDeadEd");
static_assert(offsetof(MonsterBase_IsPlayingDeadEd, ReturnValue) == 0x000000, "Member 'MonsterBase_IsPlayingDeadEd::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsPlayingHideEd
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsPlayingHideEd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsPlayingHideEd) == 0x000001, "Wrong alignment on MonsterBase_IsPlayingHideEd");
static_assert(sizeof(MonsterBase_IsPlayingHideEd) == 0x000001, "Wrong size on MonsterBase_IsPlayingHideEd");
static_assert(offsetof(MonsterBase_IsPlayingHideEd, ReturnValue) == 0x000000, "Member 'MonsterBase_IsPlayingHideEd::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsTargeted
// 0x0001 (0x0001 - 0x0000)
struct MonsterBase_IsTargeted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBase_IsTargeted) == 0x000001, "Wrong alignment on MonsterBase_IsTargeted");
static_assert(sizeof(MonsterBase_IsTargeted) == 0x000001, "Wrong size on MonsterBase_IsTargeted");
static_assert(offsetof(MonsterBase_IsTargeted, ReturnValue) == 0x000000, "Member 'MonsterBase_IsTargeted::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBase.IsTurn
// 0x0008 (0x0008 - 0x0000)
struct MonsterBase_IsTurn final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBase_IsTurn) == 0x000004, "Wrong alignment on MonsterBase_IsTurn");
static_assert(sizeof(MonsterBase_IsTurn) == 0x000008, "Wrong size on MonsterBase_IsTurn");
static_assert(offsetof(MonsterBase_IsTurn, Angle) == 0x000000, "Member 'MonsterBase_IsTurn::Angle' has a wrong offset!");
static_assert(offsetof(MonsterBase_IsTurn, ReturnValue) == 0x000004, "Member 'MonsterBase_IsTurn::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.BindOnTargetPerceptionUpdated
// 0x0048 (0x0048 - 0x0000)
struct Monster_BindOnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Monster_BindOnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on Monster_BindOnTargetPerceptionUpdated");
static_assert(sizeof(Monster_BindOnTargetPerceptionUpdated) == 0x000048, "Wrong size on Monster_BindOnTargetPerceptionUpdated");
static_assert(offsetof(Monster_BindOnTargetPerceptionUpdated, Actor) == 0x000000, "Member 'Monster_BindOnTargetPerceptionUpdated::Actor' has a wrong offset!");
static_assert(offsetof(Monster_BindOnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'Monster_BindOnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function DarwinGame.Monster.GetBattleAI
// 0x0008 (0x0008 - 0x0000)
struct Monster_GetBattleAI final
{
public:
	class UMonsterBattleAI*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetBattleAI) == 0x000008, "Wrong alignment on Monster_GetBattleAI");
static_assert(sizeof(Monster_GetBattleAI) == 0x000008, "Wrong size on Monster_GetBattleAI");
static_assert(offsetof(Monster_GetBattleAI, ReturnValue) == 0x000000, "Member 'Monster_GetBattleAI::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetCamEnd
// 0x0001 (0x0001 - 0x0000)
struct Monster_GetCamEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetCamEnd) == 0x000001, "Wrong alignment on Monster_GetCamEnd");
static_assert(sizeof(Monster_GetCamEnd) == 0x000001, "Wrong size on Monster_GetCamEnd");
static_assert(offsetof(Monster_GetCamEnd, ReturnValue) == 0x000000, "Member 'Monster_GetCamEnd::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetCameraControll
// 0x0001 (0x0001 - 0x0000)
struct Monster_GetCameraControll final
{
public:
	EMonsterCameraControllType                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetCameraControll) == 0x000001, "Wrong alignment on Monster_GetCameraControll");
static_assert(sizeof(Monster_GetCameraControll) == 0x000001, "Wrong size on Monster_GetCameraControll");
static_assert(offsetof(Monster_GetCameraControll, ReturnValue) == 0x000000, "Member 'Monster_GetCameraControll::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetCameraType
// 0x0001 (0x0001 - 0x0000)
struct Monster_GetCameraType final
{
public:
	EMonsterCameraType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetCameraType) == 0x000001, "Wrong alignment on Monster_GetCameraType");
static_assert(sizeof(Monster_GetCameraType) == 0x000001, "Wrong size on Monster_GetCameraType");
static_assert(offsetof(Monster_GetCameraType, ReturnValue) == 0x000000, "Member 'Monster_GetCameraType::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetEcologicalAI
// 0x0008 (0x0008 - 0x0000)
struct Monster_GetEcologicalAI final
{
public:
	class UMonsterEcologicalAI*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetEcologicalAI) == 0x000008, "Wrong alignment on Monster_GetEcologicalAI");
static_assert(sizeof(Monster_GetEcologicalAI) == 0x000008, "Wrong size on Monster_GetEcologicalAI");
static_assert(offsetof(Monster_GetEcologicalAI, ReturnValue) == 0x000000, "Member 'Monster_GetEcologicalAI::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetIsCounterAttack
// 0x0001 (0x0001 - 0x0000)
struct Monster_GetIsCounterAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetIsCounterAttack) == 0x000001, "Wrong alignment on Monster_GetIsCounterAttack");
static_assert(sizeof(Monster_GetIsCounterAttack) == 0x000001, "Wrong size on Monster_GetIsCounterAttack");
static_assert(offsetof(Monster_GetIsCounterAttack, ReturnValue) == 0x000000, "Member 'Monster_GetIsCounterAttack::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetIsGetUp
// 0x0001 (0x0001 - 0x0000)
struct Monster_GetIsGetUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetIsGetUp) == 0x000001, "Wrong alignment on Monster_GetIsGetUp");
static_assert(sizeof(Monster_GetIsGetUp) == 0x000001, "Wrong size on Monster_GetIsGetUp");
static_assert(offsetof(Monster_GetIsGetUp, ReturnValue) == 0x000000, "Member 'Monster_GetIsGetUp::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetMonsterPhase
// 0x0001 (0x0001 - 0x0000)
struct Monster_GetMonsterPhase final
{
public:
	EMonsterPhase                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetMonsterPhase) == 0x000001, "Wrong alignment on Monster_GetMonsterPhase");
static_assert(sizeof(Monster_GetMonsterPhase) == 0x000001, "Wrong size on Monster_GetMonsterPhase");
static_assert(offsetof(Monster_GetMonsterPhase, ReturnValue) == 0x000000, "Member 'Monster_GetMonsterPhase::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetRivalTeamNonBattleAI
// 0x0008 (0x0008 - 0x0000)
struct Monster_GetRivalTeamNonBattleAI final
{
public:
	class UMonsterRivalteamNonBattleAI*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetRivalTeamNonBattleAI) == 0x000008, "Wrong alignment on Monster_GetRivalTeamNonBattleAI");
static_assert(sizeof(Monster_GetRivalTeamNonBattleAI) == 0x000008, "Wrong size on Monster_GetRivalTeamNonBattleAI");
static_assert(offsetof(Monster_GetRivalTeamNonBattleAI, ReturnValue) == 0x000000, "Member 'Monster_GetRivalTeamNonBattleAI::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetRivalTeamStealArtifactAI
// 0x0008 (0x0008 - 0x0000)
struct Monster_GetRivalTeamStealArtifactAI final
{
public:
	class UMonsterRivalteamStealArtifactAI*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetRivalTeamStealArtifactAI) == 0x000008, "Wrong alignment on Monster_GetRivalTeamStealArtifactAI");
static_assert(sizeof(Monster_GetRivalTeamStealArtifactAI) == 0x000008, "Wrong size on Monster_GetRivalTeamStealArtifactAI");
static_assert(offsetof(Monster_GetRivalTeamStealArtifactAI, ReturnValue) == 0x000000, "Member 'Monster_GetRivalTeamStealArtifactAI::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.HiddenDeadIcon
// 0x0001 (0x0001 - 0x0000)
struct Monster_HiddenDeadIcon final
{
public:
	bool                                          IsHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_HiddenDeadIcon) == 0x000001, "Wrong alignment on Monster_HiddenDeadIcon");
static_assert(sizeof(Monster_HiddenDeadIcon) == 0x000001, "Wrong size on Monster_HiddenDeadIcon");
static_assert(offsetof(Monster_HiddenDeadIcon, IsHidden) == 0x000000, "Member 'Monster_HiddenDeadIcon::IsHidden' has a wrong offset!");

// Function DarwinGame.Monster.SetCamEnd
// 0x0001 (0x0001 - 0x0000)
struct Monster_SetCamEnd final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_SetCamEnd) == 0x000001, "Wrong alignment on Monster_SetCamEnd");
static_assert(sizeof(Monster_SetCamEnd) == 0x000001, "Wrong size on Monster_SetCamEnd");
static_assert(offsetof(Monster_SetCamEnd, flg) == 0x000000, "Member 'Monster_SetCamEnd::flg' has a wrong offset!");

// Function DarwinGame.Monster.SetCameraControll
// 0x0001 (0x0001 - 0x0000)
struct Monster_SetCameraControll final
{
public:
	EMonsterCameraControllType                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_SetCameraControll) == 0x000001, "Wrong alignment on Monster_SetCameraControll");
static_assert(sizeof(Monster_SetCameraControll) == 0x000001, "Wrong size on Monster_SetCameraControll");
static_assert(offsetof(Monster_SetCameraControll, Type) == 0x000000, "Member 'Monster_SetCameraControll::Type' has a wrong offset!");

// Function DarwinGame.Monster.SetCameraType
// 0x0001 (0x0001 - 0x0000)
struct Monster_SetCameraType final
{
public:
	EMonsterCameraType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_SetCameraType) == 0x000001, "Wrong alignment on Monster_SetCameraType");
static_assert(sizeof(Monster_SetCameraType) == 0x000001, "Wrong size on Monster_SetCameraType");
static_assert(offsetof(Monster_SetCameraType, Type) == 0x000000, "Member 'Monster_SetCameraType::Type' has a wrong offset!");

// Function DarwinGame.Monster.SetEyesSocket
// 0x0008 (0x0008 - 0x0000)
struct Monster_SetEyesSocket final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_SetEyesSocket) == 0x000004, "Wrong alignment on Monster_SetEyesSocket");
static_assert(sizeof(Monster_SetEyesSocket) == 0x000008, "Wrong size on Monster_SetEyesSocket");
static_assert(offsetof(Monster_SetEyesSocket, Name_0) == 0x000000, "Member 'Monster_SetEyesSocket::Name_0' has a wrong offset!");

// Function DarwinGame.Monster.SetIsCounterAttack
// 0x0001 (0x0001 - 0x0000)
struct Monster_SetIsCounterAttack final
{
public:
	bool                                          IsCounterAttack;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_SetIsCounterAttack) == 0x000001, "Wrong alignment on Monster_SetIsCounterAttack");
static_assert(sizeof(Monster_SetIsCounterAttack) == 0x000001, "Wrong size on Monster_SetIsCounterAttack");
static_assert(offsetof(Monster_SetIsCounterAttack, IsCounterAttack) == 0x000000, "Member 'Monster_SetIsCounterAttack::IsCounterAttack' has a wrong offset!");

// Function DarwinGame.Monster.SetMonsterPhase
// 0x0001 (0x0001 - 0x0000)
struct Monster_SetMonsterPhase final
{
public:
	EMonsterPhase                                 phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_SetMonsterPhase) == 0x000001, "Wrong alignment on Monster_SetMonsterPhase");
static_assert(sizeof(Monster_SetMonsterPhase) == 0x000001, "Wrong size on Monster_SetMonsterPhase");
static_assert(offsetof(Monster_SetMonsterPhase, phase) == 0x000000, "Member 'Monster_SetMonsterPhase::phase' has a wrong offset!");

// Function DarwinGame.Monster.SetRivalTeamDialogID
// 0x0004 (0x0004 - 0x0000)
struct Monster_SetRivalTeamDialogID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_SetRivalTeamDialogID) == 0x000004, "Wrong alignment on Monster_SetRivalTeamDialogID");
static_assert(sizeof(Monster_SetRivalTeamDialogID) == 0x000004, "Wrong size on Monster_SetRivalTeamDialogID");
static_assert(offsetof(Monster_SetRivalTeamDialogID, ID) == 0x000000, "Member 'Monster_SetRivalTeamDialogID::ID' has a wrong offset!");

// Function DarwinGame.Monster.StartLink
// 0x001C (0x001C - 0x0000)
struct Monster_StartLink final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Monster_StartLink) == 0x000004, "Wrong alignment on Monster_StartLink");
static_assert(sizeof(Monster_StartLink) == 0x00001C, "Wrong size on Monster_StartLink");
static_assert(offsetof(Monster_StartLink, Location) == 0x000000, "Member 'Monster_StartLink::Location' has a wrong offset!");
static_assert(offsetof(Monster_StartLink, Rotation) == 0x00000C, "Member 'Monster_StartLink::Rotation' has a wrong offset!");
static_assert(offsetof(Monster_StartLink, ReturnValue) == 0x000018, "Member 'Monster_StartLink::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.StartLinkDefault
// 0x001C (0x001C - 0x0000)
struct Monster_StartLinkDefault final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Monster_StartLinkDefault) == 0x000004, "Wrong alignment on Monster_StartLinkDefault");
static_assert(sizeof(Monster_StartLinkDefault) == 0x00001C, "Wrong size on Monster_StartLinkDefault");
static_assert(offsetof(Monster_StartLinkDefault, Location) == 0x000000, "Member 'Monster_StartLinkDefault::Location' has a wrong offset!");
static_assert(offsetof(Monster_StartLinkDefault, Rotation) == 0x00000C, "Member 'Monster_StartLinkDefault::Rotation' has a wrong offset!");
static_assert(offsetof(Monster_StartLinkDefault, ReturnValue) == 0x000018, "Member 'Monster_StartLinkDefault::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.StartLinkDive
// 0x001C (0x001C - 0x0000)
struct Monster_StartLinkDive final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Monster_StartLinkDive) == 0x000004, "Wrong alignment on Monster_StartLinkDive");
static_assert(sizeof(Monster_StartLinkDive) == 0x00001C, "Wrong size on Monster_StartLinkDive");
static_assert(offsetof(Monster_StartLinkDive, Location) == 0x000000, "Member 'Monster_StartLinkDive::Location' has a wrong offset!");
static_assert(offsetof(Monster_StartLinkDive, Rotation) == 0x00000C, "Member 'Monster_StartLinkDive::Rotation' has a wrong offset!");
static_assert(offsetof(Monster_StartLinkDive, ReturnValue) == 0x000018, "Member 'Monster_StartLinkDive::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetMonsterTableComponent
// 0x0008 (0x0008 - 0x0000)
struct Monster_GetMonsterTableComponent final
{
public:
	class UMonsterTableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetMonsterTableComponent) == 0x000008, "Wrong alignment on Monster_GetMonsterTableComponent");
static_assert(sizeof(Monster_GetMonsterTableComponent) == 0x000008, "Wrong size on Monster_GetMonsterTableComponent");
static_assert(offsetof(Monster_GetMonsterTableComponent, ReturnValue) == 0x000000, "Member 'Monster_GetMonsterTableComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetRivalTeamDialogID
// 0x0004 (0x0004 - 0x0000)
struct Monster_GetRivalTeamDialogID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetRivalTeamDialogID) == 0x000004, "Wrong alignment on Monster_GetRivalTeamDialogID");
static_assert(sizeof(Monster_GetRivalTeamDialogID) == 0x000004, "Wrong size on Monster_GetRivalTeamDialogID");
static_assert(offsetof(Monster_GetRivalTeamDialogID, ReturnValue) == 0x000000, "Member 'Monster_GetRivalTeamDialogID::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.GetStealArtifactID
// 0x0004 (0x0004 - 0x0000)
struct Monster_GetStealArtifactID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_GetStealArtifactID) == 0x000004, "Wrong alignment on Monster_GetStealArtifactID");
static_assert(sizeof(Monster_GetStealArtifactID) == 0x000004, "Wrong size on Monster_GetStealArtifactID");
static_assert(offsetof(Monster_GetStealArtifactID, ReturnValue) == 0x000000, "Member 'Monster_GetStealArtifactID::ReturnValue' has a wrong offset!");

// Function DarwinGame.Monster.HasStealArtifact
// 0x0001 (0x0001 - 0x0000)
struct Monster_HasStealArtifact final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Monster_HasStealArtifact) == 0x000001, "Wrong alignment on Monster_HasStealArtifact");
static_assert(sizeof(Monster_HasStealArtifact) == 0x000001, "Wrong size on Monster_HasStealArtifact");
static_assert(offsetof(Monster_HasStealArtifact, ReturnValue) == 0x000000, "Member 'Monster_HasStealArtifact::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttackCollisionInterface.IsMagicRampage
// 0x0001 (0x0001 - 0x0000)
struct AttackCollisionInterface_IsMagicRampage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackCollisionInterface_IsMagicRampage) == 0x000001, "Wrong alignment on AttackCollisionInterface_IsMagicRampage");
static_assert(sizeof(AttackCollisionInterface_IsMagicRampage) == 0x000001, "Wrong size on AttackCollisionInterface_IsMagicRampage");
static_assert(offsetof(AttackCollisionInterface_IsMagicRampage, ReturnValue) == 0x000000, "Member 'AttackCollisionInterface_IsMagicRampage::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttackCollisionInterface.IsOffsetable
// 0x0001 (0x0001 - 0x0000)
struct AttackCollisionInterface_IsOffsetable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackCollisionInterface_IsOffsetable) == 0x000001, "Wrong alignment on AttackCollisionInterface_IsOffsetable");
static_assert(sizeof(AttackCollisionInterface_IsOffsetable) == 0x000001, "Wrong size on AttackCollisionInterface_IsOffsetable");
static_assert(offsetof(AttackCollisionInterface_IsOffsetable, ReturnValue) == 0x000000, "Member 'AttackCollisionInterface_IsOffsetable::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_IconLockon.SetLockOnState
// 0x0001 (0x0001 - 0x0000)
struct UIField_IconLockon_SetLockOnState final
{
public:
	bool                                          IsLockOn;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLockon_SetLockOnState) == 0x000001, "Wrong alignment on UIField_IconLockon_SetLockOnState");
static_assert(sizeof(UIField_IconLockon_SetLockOnState) == 0x000001, "Wrong size on UIField_IconLockon_SetLockOnState");
static_assert(offsetof(UIField_IconLockon_SetLockOnState, IsLockOn) == 0x000000, "Member 'UIField_IconLockon_SetLockOnState::IsLockOn' has a wrong offset!");

// Function DarwinGame.UIField_IconLockon.SetMarkerVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIField_IconLockon_SetMarkerVisibility final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLockon_SetMarkerVisibility) == 0x000001, "Wrong alignment on UIField_IconLockon_SetMarkerVisibility");
static_assert(sizeof(UIField_IconLockon_SetMarkerVisibility) == 0x000001, "Wrong size on UIField_IconLockon_SetMarkerVisibility");
static_assert(offsetof(UIField_IconLockon_SetMarkerVisibility, Condition) == 0x000000, "Member 'UIField_IconLockon_SetMarkerVisibility::Condition' has a wrong offset!");

// Function DarwinGame.UIField_IconLockon.SetTarget
// 0x0008 (0x0008 - 0x0000)
struct UIField_IconLockon_SetTarget final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLockon_SetTarget) == 0x000008, "Wrong alignment on UIField_IconLockon_SetTarget");
static_assert(sizeof(UIField_IconLockon_SetTarget) == 0x000008, "Wrong size on UIField_IconLockon_SetTarget");
static_assert(offsetof(UIField_IconLockon_SetTarget, SceneComponent) == 0x000000, "Member 'UIField_IconLockon_SetTarget::SceneComponent' has a wrong offset!");

// Function DarwinGame.AttackCollisionBase.OnComponentBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct AttackCollisionBase_OnComponentBeginOverlap final
{
public:
	struct FOverlapEventInfo                      Info;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ElementID;                                         // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackCollisionBase_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on AttackCollisionBase_OnComponentBeginOverlap");
static_assert(sizeof(AttackCollisionBase_OnComponentBeginOverlap) == 0x0000B0, "Wrong size on AttackCollisionBase_OnComponentBeginOverlap");
static_assert(offsetof(AttackCollisionBase_OnComponentBeginOverlap, Info) == 0x000000, "Member 'AttackCollisionBase_OnComponentBeginOverlap::Info' has a wrong offset!");
static_assert(offsetof(AttackCollisionBase_OnComponentBeginOverlap, ElementID) == 0x0000A8, "Member 'AttackCollisionBase_OnComponentBeginOverlap::ElementID' has a wrong offset!");

// Function DarwinGame.AttackCollisionBase.OnComponentExecuteOverlapEvent
// 0x00C8 (0x00C8 - 0x0000)
struct AttackCollisionBase_OnComponentExecuteOverlapEvent final
{
public:
	struct FAttackCollisionEventInfo              Info;                                              // 0x0000(0x00B8)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   damageCollisionId;                                 // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          doDamage;                                          // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttackCollisionBase_OnComponentExecuteOverlapEvent) == 0x000008, "Wrong alignment on AttackCollisionBase_OnComponentExecuteOverlapEvent");
static_assert(sizeof(AttackCollisionBase_OnComponentExecuteOverlapEvent) == 0x0000C8, "Wrong size on AttackCollisionBase_OnComponentExecuteOverlapEvent");
static_assert(offsetof(AttackCollisionBase_OnComponentExecuteOverlapEvent, Info) == 0x000000, "Member 'AttackCollisionBase_OnComponentExecuteOverlapEvent::Info' has a wrong offset!");
static_assert(offsetof(AttackCollisionBase_OnComponentExecuteOverlapEvent, damageCollisionId) == 0x0000B8, "Member 'AttackCollisionBase_OnComponentExecuteOverlapEvent::damageCollisionId' has a wrong offset!");
static_assert(offsetof(AttackCollisionBase_OnComponentExecuteOverlapEvent, doDamage) == 0x0000C0, "Member 'AttackCollisionBase_OnComponentExecuteOverlapEvent::doDamage' has a wrong offset!");

// Function DarwinGame.TreasureFigureBase.EnableUIMode
// 0x0003 (0x0003 - 0x0000)
struct TreasureFigureBase_EnableUIMode final
{
public:
	EFigureType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pedestal;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Crystal;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureFigureBase_EnableUIMode) == 0x000001, "Wrong alignment on TreasureFigureBase_EnableUIMode");
static_assert(sizeof(TreasureFigureBase_EnableUIMode) == 0x000003, "Wrong size on TreasureFigureBase_EnableUIMode");
static_assert(offsetof(TreasureFigureBase_EnableUIMode, Type) == 0x000000, "Member 'TreasureFigureBase_EnableUIMode::Type' has a wrong offset!");
static_assert(offsetof(TreasureFigureBase_EnableUIMode, pedestal) == 0x000001, "Member 'TreasureFigureBase_EnableUIMode::pedestal' has a wrong offset!");
static_assert(offsetof(TreasureFigureBase_EnableUIMode, Crystal) == 0x000002, "Member 'TreasureFigureBase_EnableUIMode::Crystal' has a wrong offset!");

// Function DarwinGame.BaseAreaBattleFunctionLibrary.IsBaseAreaBattleEvent
// 0x0001 (0x0001 - 0x0000)
struct BaseAreaBattleFunctionLibrary_IsBaseAreaBattleEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAreaBattleFunctionLibrary_IsBaseAreaBattleEvent) == 0x000001, "Wrong alignment on BaseAreaBattleFunctionLibrary_IsBaseAreaBattleEvent");
static_assert(sizeof(BaseAreaBattleFunctionLibrary_IsBaseAreaBattleEvent) == 0x000001, "Wrong size on BaseAreaBattleFunctionLibrary_IsBaseAreaBattleEvent");
static_assert(offsetof(BaseAreaBattleFunctionLibrary_IsBaseAreaBattleEvent, ReturnValue) == 0x000000, "Member 'BaseAreaBattleFunctionLibrary_IsBaseAreaBattleEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.BaseAreaBattleFunctionLibrary.IsOccurringBaseAreaBattle
// 0x0002 (0x0002 - 0x0000)
struct BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle final
{
public:
	bool                                          isCheckEvent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle) == 0x000001, "Wrong alignment on BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle");
static_assert(sizeof(BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle) == 0x000002, "Wrong size on BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle");
static_assert(offsetof(BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle, isCheckEvent) == 0x000000, "Member 'BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle::isCheckEvent' has a wrong offset!");
static_assert(offsetof(BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle, ReturnValue) == 0x000001, "Member 'BaseAreaBattleFunctionLibrary_IsOccurringBaseAreaBattle::ReturnValue' has a wrong offset!");

// Function DarwinGame.DoorObjectBase.AutoCloseDoor
// 0x0008 (0x0008 - 0x0000)
struct DoorObjectBase_AutoCloseDoor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorObjectBase_AutoCloseDoor) == 0x000008, "Wrong alignment on DoorObjectBase_AutoCloseDoor");
static_assert(sizeof(DoorObjectBase_AutoCloseDoor) == 0x000008, "Wrong size on DoorObjectBase_AutoCloseDoor");
static_assert(offsetof(DoorObjectBase_AutoCloseDoor, TargetActor) == 0x000000, "Member 'DoorObjectBase_AutoCloseDoor::TargetActor' has a wrong offset!");

// Function DarwinGame.DoorObjectBase.PlayOpen
// 0x000C (0x000C - 0x0000)
struct DoorObjectBase_PlayOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorObjectBase_PlayOpen) == 0x000004, "Wrong alignment on DoorObjectBase_PlayOpen");
static_assert(sizeof(DoorObjectBase_PlayOpen) == 0x00000C, "Wrong size on DoorObjectBase_PlayOpen");
static_assert(offsetof(DoorObjectBase_PlayOpen, Vector) == 0x000000, "Member 'DoorObjectBase_PlayOpen::Vector' has a wrong offset!");

// Function DarwinGame.DoorObjectBase.SetOpen
// 0x000C (0x000C - 0x0000)
struct DoorObjectBase_SetOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorObjectBase_SetOpen) == 0x000004, "Wrong alignment on DoorObjectBase_SetOpen");
static_assert(sizeof(DoorObjectBase_SetOpen) == 0x00000C, "Wrong size on DoorObjectBase_SetOpen");
static_assert(offsetof(DoorObjectBase_SetOpen, Vector) == 0x000000, "Member 'DoorObjectBase_SetOpen::Vector' has a wrong offset!");

// Function DarwinGame.DoorObjectBase.GetObjectDoorComponent
// 0x0008 (0x0008 - 0x0000)
struct DoorObjectBase_GetObjectDoorComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorObjectBase_GetObjectDoorComponent) == 0x000008, "Wrong alignment on DoorObjectBase_GetObjectDoorComponent");
static_assert(sizeof(DoorObjectBase_GetObjectDoorComponent) == 0x000008, "Wrong size on DoorObjectBase_GetObjectDoorComponent");
static_assert(offsetof(DoorObjectBase_GetObjectDoorComponent, ReturnValue) == 0x000000, "Member 'DoorObjectBase_GetObjectDoorComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.BasicDoor.ReceivePlayOpen
// 0x000C (0x000C - 0x0000)
struct BasicDoor_ReceivePlayOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasicDoor_ReceivePlayOpen) == 0x000004, "Wrong alignment on BasicDoor_ReceivePlayOpen");
static_assert(sizeof(BasicDoor_ReceivePlayOpen) == 0x00000C, "Wrong size on BasicDoor_ReceivePlayOpen");
static_assert(offsetof(BasicDoor_ReceivePlayOpen, Vector) == 0x000000, "Member 'BasicDoor_ReceivePlayOpen::Vector' has a wrong offset!");

// Function DarwinGame.BasicDoor.ReceiveSetOpen
// 0x000C (0x000C - 0x0000)
struct BasicDoor_ReceiveSetOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasicDoor_ReceiveSetOpen) == 0x000004, "Wrong alignment on BasicDoor_ReceiveSetOpen");
static_assert(sizeof(BasicDoor_ReceiveSetOpen) == 0x00000C, "Wrong size on BasicDoor_ReceiveSetOpen");
static_assert(offsetof(BasicDoor_ReceiveSetOpen, Vector) == 0x000000, "Member 'BasicDoor_ReceiveSetOpen::Vector' has a wrong offset!");

// Function DarwinGame.SoundManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct SoundManager_GetInstance final
{
public:
	class USoundManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundManager_GetInstance) == 0x000008, "Wrong alignment on SoundManager_GetInstance");
static_assert(sizeof(SoundManager_GetInstance) == 0x000008, "Wrong size on SoundManager_GetInstance");
static_assert(offsetof(SoundManager_GetInstance, ReturnValue) == 0x000000, "Member 'SoundManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataTips.AddOpenTips
// 0x0008 (0x0008 - 0x0000)
struct GameDataTips_AddOpenTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataTips_AddOpenTips) == 0x000004, "Wrong alignment on GameDataTips_AddOpenTips");
static_assert(sizeof(GameDataTips_AddOpenTips) == 0x000008, "Wrong size on GameDataTips_AddOpenTips");
static_assert(offsetof(GameDataTips_AddOpenTips, TipsID) == 0x000000, "Member 'GameDataTips_AddOpenTips::TipsID' has a wrong offset!");

// Function DarwinGame.GameDataTips.AddPopupTips
// 0x0008 (0x0008 - 0x0000)
struct GameDataTips_AddPopupTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataTips_AddPopupTips) == 0x000004, "Wrong alignment on GameDataTips_AddPopupTips");
static_assert(sizeof(GameDataTips_AddPopupTips) == 0x000008, "Wrong size on GameDataTips_AddPopupTips");
static_assert(offsetof(GameDataTips_AddPopupTips, TipsID) == 0x000000, "Member 'GameDataTips_AddPopupTips::TipsID' has a wrong offset!");

// Function DarwinGame.GameDataTips.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataTips_Clone final
{
public:
	class UGameDataTips*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataTips_Clone) == 0x000008, "Wrong alignment on GameDataTips_Clone");
static_assert(sizeof(GameDataTips_Clone) == 0x000008, "Wrong size on GameDataTips_Clone");
static_assert(offsetof(GameDataTips_Clone, ReturnValue) == 0x000000, "Member 'GameDataTips_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataTips.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataTips_Overwrite final
{
public:
	class UGameDataTips*                          game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataTips_Overwrite) == 0x000008, "Wrong alignment on GameDataTips_Overwrite");
static_assert(sizeof(GameDataTips_Overwrite) == 0x000008, "Wrong size on GameDataTips_Overwrite");
static_assert(offsetof(GameDataTips_Overwrite, game_data) == 0x000000, "Member 'GameDataTips_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataTips.ShowTips
// 0x0008 (0x0008 - 0x0000)
struct GameDataTips_ShowTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataTips_ShowTips) == 0x000004, "Wrong alignment on GameDataTips_ShowTips");
static_assert(sizeof(GameDataTips_ShowTips) == 0x000008, "Wrong size on GameDataTips_ShowTips");
static_assert(offsetof(GameDataTips_ShowTips, TipsID) == 0x000000, "Member 'GameDataTips_ShowTips::TipsID' has a wrong offset!");

// Function DarwinGame.GameDataTips.IsOpenTips
// 0x000C (0x000C - 0x0000)
struct GameDataTips_IsOpenTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataTips_IsOpenTips) == 0x000004, "Wrong alignment on GameDataTips_IsOpenTips");
static_assert(sizeof(GameDataTips_IsOpenTips) == 0x00000C, "Wrong size on GameDataTips_IsOpenTips");
static_assert(offsetof(GameDataTips_IsOpenTips, TipsID) == 0x000000, "Member 'GameDataTips_IsOpenTips::TipsID' has a wrong offset!");
static_assert(offsetof(GameDataTips_IsOpenTips, ReturnValue) == 0x000008, "Member 'GameDataTips_IsOpenTips::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataTips.IsOpenTipsNew
// 0x000C (0x000C - 0x0000)
struct GameDataTips_IsOpenTipsNew final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataTips_IsOpenTipsNew) == 0x000004, "Wrong alignment on GameDataTips_IsOpenTipsNew");
static_assert(sizeof(GameDataTips_IsOpenTipsNew) == 0x00000C, "Wrong size on GameDataTips_IsOpenTipsNew");
static_assert(offsetof(GameDataTips_IsOpenTipsNew, TipsID) == 0x000000, "Member 'GameDataTips_IsOpenTipsNew::TipsID' has a wrong offset!");
static_assert(offsetof(GameDataTips_IsOpenTipsNew, ReturnValue) == 0x000008, "Member 'GameDataTips_IsOpenTipsNew::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataTips.IsPopupedTips
// 0x000C (0x000C - 0x0000)
struct GameDataTips_IsPopupedTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataTips_IsPopupedTips) == 0x000004, "Wrong alignment on GameDataTips_IsPopupedTips");
static_assert(sizeof(GameDataTips_IsPopupedTips) == 0x00000C, "Wrong size on GameDataTips_IsPopupedTips");
static_assert(offsetof(GameDataTips_IsPopupedTips, TipsID) == 0x000000, "Member 'GameDataTips_IsPopupedTips::TipsID' has a wrong offset!");
static_assert(offsetof(GameDataTips_IsPopupedTips, ReturnValue) == 0x000008, "Member 'GameDataTips_IsPopupedTips::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleInformation.AddAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct BattleInformation_AddAttackTarget final
{
public:
	class AGPACharacter*                          Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleInformation_AddAttackTarget) == 0x000008, "Wrong alignment on BattleInformation_AddAttackTarget");
static_assert(sizeof(BattleInformation_AddAttackTarget) == 0x000008, "Wrong size on BattleInformation_AddAttackTarget");
static_assert(offsetof(BattleInformation_AddAttackTarget, Monster) == 0x000000, "Member 'BattleInformation_AddAttackTarget::Monster' has a wrong offset!");

// Function DarwinGame.BattleInformation.GetAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct BattleInformation_GetAttackTarget final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleInformation_GetAttackTarget) == 0x000008, "Wrong alignment on BattleInformation_GetAttackTarget");
static_assert(sizeof(BattleInformation_GetAttackTarget) == 0x000008, "Wrong size on BattleInformation_GetAttackTarget");
static_assert(offsetof(BattleInformation_GetAttackTarget, ReturnValue) == 0x000000, "Member 'BattleInformation_GetAttackTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleInformation.SetOwner
// 0x0010 (0x0010 - 0x0000)
struct BattleInformation_SetOwner final
{
public:
	class AGPACharacter*                          Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          registerType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleInformation_SetOwner) == 0x000008, "Wrong alignment on BattleInformation_SetOwner");
static_assert(sizeof(BattleInformation_SetOwner) == 0x000010, "Wrong size on BattleInformation_SetOwner");
static_assert(offsetof(BattleInformation_SetOwner, Owner) == 0x000000, "Member 'BattleInformation_SetOwner::Owner' has a wrong offset!");
static_assert(offsetof(BattleInformation_SetOwner, registerType) == 0x000008, "Member 'BattleInformation_SetOwner::registerType' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateActionCastTime
// 0x0130 (0x0130 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateActionCastTime final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0128(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateActionCastTime) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateActionCastTime");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateActionCastTime) == 0x000130, "Wrong size on BattleBlueprintFunctionLibrary_CalculateActionCastTime");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateActionCastTime, actionDetailID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateActionCastTime::actionDetailID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateActionCastTime, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateActionCastTime::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateActionCastTime, ReturnValue) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculateActionCastTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateBreathDamage
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateBreathDamage final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0248(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateBreathDamage) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateBreathDamage");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateBreathDamage) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_CalculateBreathDamage");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateBreathDamage, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateBreathDamage::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateBreathDamage, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateBreathDamage::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateBreathDamage, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculateBreathDamage::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateBreathDamage, ReturnValue) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculateBreathDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateDamageCorrectValue
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0248(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue, ReturnValue) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateDamageCorrectValueWithountActionCorrect
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0248(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect, ReturnValue) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageCorrectValueWithountActionCorrect::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateDamageRevision
// 0x0150 (0x0150 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateDamageRevision final
{
public:
	struct FST_AttackData                         AttackData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0028(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0148(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateDamageRevision) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateDamageRevision");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateDamageRevision) == 0x000150, "Wrong size on BattleBlueprintFunctionLibrary_CalculateDamageRevision");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageRevision, AttackData) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageRevision::AttackData' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageRevision, Source) == 0x000028, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageRevision::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDamageRevision, ReturnValue) == 0x000148, "Member 'BattleBlueprintFunctionLibrary_CalculateDamageRevision::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateDropMoney
// 0x0010 (0x0010 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateDropMoney final
{
public:
	class FName                                   MonsterParamID;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateDropMoney) == 0x000004, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateDropMoney");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateDropMoney) == 0x000010, "Wrong size on BattleBlueprintFunctionLibrary_CalculateDropMoney");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDropMoney, MonsterParamID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateDropMoney::MonsterParamID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDropMoney, Level) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateDropMoney::Level' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDropMoney, ReturnValue) == 0x00000C, "Member 'BattleBlueprintFunctionLibrary_CalculateDropMoney::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateDropRate
// 0x0018 (0x0018 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateDropRate final
{
public:
	class FName                                   MonsterParamID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          InstigatorCharacter;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateDropRate) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateDropRate");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateDropRate) == 0x000018, "Wrong size on BattleBlueprintFunctionLibrary_CalculateDropRate");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDropRate, MonsterParamID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateDropRate::MonsterParamID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDropRate, InstigatorCharacter) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateDropRate::InstigatorCharacter' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateDropRate, ReturnValue) == 0x000010, "Member 'BattleBlueprintFunctionLibrary_CalculateDropRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateEffectTime
// 0x0138 (0x0138 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateEffectTime final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0010(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0130(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateEffectTime) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateEffectTime");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateEffectTime) == 0x000138, "Wrong size on BattleBlueprintFunctionLibrary_CalculateEffectTime");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateEffectTime, ID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateEffectTime::ID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateEffectTime, Level) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateEffectTime::Level' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateEffectTime, Source) == 0x000010, "Member 'BattleBlueprintFunctionLibrary_CalculateEffectTime::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateEffectTime, ReturnValue) == 0x000130, "Member 'BattleBlueprintFunctionLibrary_CalculateEffectTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateMagicalBulletDamage
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0248(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage, ReturnValue) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalBulletDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateMagicalDamage
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateMagicalDamage final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Rampage;                                           // 0x0248(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x024C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateMagicalDamage) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateMagicalDamage");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateMagicalDamage) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_CalculateMagicalDamage");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalDamage, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalDamage::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalDamage, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalDamage::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalDamage, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalDamage::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalDamage, Rampage) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalDamage::Rampage' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMagicalDamage, ReturnValue) == 0x00024C, "Member 'BattleBlueprintFunctionLibrary_CalculateMagicalDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateMPCost
// 0x0018 (0x0018 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateMPCost final
{
public:
	class AGPACharacter*                          Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionOverviewID;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateMPCost) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateMPCost");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateMPCost) == 0x000018, "Wrong size on BattleBlueprintFunctionLibrary_CalculateMPCost");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMPCost, Instigator) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateMPCost::Instigator' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMPCost, ActionOverviewID) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateMPCost::ActionOverviewID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateMPCost, ReturnValue) == 0x000010, "Member 'BattleBlueprintFunctionLibrary_CalculateMPCost::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculatePhysicalBulletDamage
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0248(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage, ReturnValue) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalBulletDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculatePhysicalDamage
// 0x0290 (0x0290 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculatePhysicalDamage final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAttackHitResultStruct                 AttackResult;                                      // 0x0248(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsCritical;                                        // 0x0288(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x028C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculatePhysicalDamage");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage) == 0x000290, "Wrong size on BattleBlueprintFunctionLibrary_CalculatePhysicalDamage");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalDamage::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalDamage::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalDamage::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage, AttackResult) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalDamage::AttackResult' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage, IsCritical) == 0x000288, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalDamage::IsCritical' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculatePhysicalDamage, ReturnValue) == 0x00028C, "Member 'BattleBlueprintFunctionLibrary_CalculatePhysicalDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateSkillChainTime
// 0x0128 (0x0128 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateSkillChainTime final
{
public:
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0120(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateSkillChainTime) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateSkillChainTime");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateSkillChainTime) == 0x000128, "Wrong size on BattleBlueprintFunctionLibrary_CalculateSkillChainTime");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateSkillChainTime, Source) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateSkillChainTime::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateSkillChainTime, ReturnValue) == 0x000120, "Member 'BattleBlueprintFunctionLibrary_CalculateSkillChainTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateSkillDamage
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateSkillDamage final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0248(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateSkillDamage) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateSkillDamage");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateSkillDamage) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_CalculateSkillDamage");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateSkillDamage, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateSkillDamage::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateSkillDamage, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_CalculateSkillDamage::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateSkillDamage, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_CalculateSkillDamage::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateSkillDamage, ReturnValue) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_CalculateSkillDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.CalculateTakenDamageRevision
// 0x0150 (0x0150 - 0x0000)
struct BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision final
{
public:
	struct FST_AttackData                         AttackData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0028(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0148(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision");
static_assert(sizeof(BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision) == 0x000150, "Wrong size on BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision, AttackData) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision::AttackData' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision, Target) == 0x000028, "Member 'BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision, ReturnValue) == 0x000148, "Member 'BattleBlueprintFunctionLibrary_CalculateTakenDamageRevision::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.GainExp
// 0x0008 (0x0008 - 0x0000)
struct BattleBlueprintFunctionLibrary_GainExp final
{
public:
	int32                                         Exp;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_GainExp) == 0x000004, "Wrong alignment on BattleBlueprintFunctionLibrary_GainExp");
static_assert(sizeof(BattleBlueprintFunctionLibrary_GainExp) == 0x000008, "Wrong size on BattleBlueprintFunctionLibrary_GainExp");
static_assert(offsetof(BattleBlueprintFunctionLibrary_GainExp, Exp) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_GainExp::Exp' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_GainExp, ReturnValue) == 0x000004, "Member 'BattleBlueprintFunctionLibrary_GainExp::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.GetBlownVelocity
// 0x0048 (0x0048 - 0x0000)
struct BattleBlueprintFunctionLibrary_GetBlownVelocity final
{
public:
	struct FActionResult                          ActionResult;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Target;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToBack;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x003C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBlueprintFunctionLibrary_GetBlownVelocity) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_GetBlownVelocity");
static_assert(sizeof(BattleBlueprintFunctionLibrary_GetBlownVelocity) == 0x000048, "Wrong size on BattleBlueprintFunctionLibrary_GetBlownVelocity");
static_assert(offsetof(BattleBlueprintFunctionLibrary_GetBlownVelocity, ActionResult) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_GetBlownVelocity::ActionResult' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_GetBlownVelocity, Target) == 0x000030, "Member 'BattleBlueprintFunctionLibrary_GetBlownVelocity::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_GetBlownVelocity, bToBack) == 0x000038, "Member 'BattleBlueprintFunctionLibrary_GetBlownVelocity::bToBack' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_GetBlownVelocity, ReturnValue) == 0x00003C, "Member 'BattleBlueprintFunctionLibrary_GetBlownVelocity::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.IsTargetOfAction
// 0x0020 (0x0020 - 0x0000)
struct BattleBlueprintFunctionLibrary_IsTargetOfAction final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_IsTargetOfAction) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_IsTargetOfAction");
static_assert(sizeof(BattleBlueprintFunctionLibrary_IsTargetOfAction) == 0x000020, "Wrong size on BattleBlueprintFunctionLibrary_IsTargetOfAction");
static_assert(offsetof(BattleBlueprintFunctionLibrary_IsTargetOfAction, actionDetailID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_IsTargetOfAction::actionDetailID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_IsTargetOfAction, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_IsTargetOfAction::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_IsTargetOfAction, Target) == 0x000010, "Member 'BattleBlueprintFunctionLibrary_IsTargetOfAction::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_IsTargetOfAction, ReturnValue) == 0x000018, "Member 'BattleBlueprintFunctionLibrary_IsTargetOfAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.IsTargetOfActionAlly
// 0x000C (0x000C - 0x0000)
struct BattleBlueprintFunctionLibrary_IsTargetOfActionAlly final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_IsTargetOfActionAlly) == 0x000004, "Wrong alignment on BattleBlueprintFunctionLibrary_IsTargetOfActionAlly");
static_assert(sizeof(BattleBlueprintFunctionLibrary_IsTargetOfActionAlly) == 0x00000C, "Wrong size on BattleBlueprintFunctionLibrary_IsTargetOfActionAlly");
static_assert(offsetof(BattleBlueprintFunctionLibrary_IsTargetOfActionAlly, actionDetailID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_IsTargetOfActionAlly::actionDetailID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_IsTargetOfActionAlly, ReturnValue) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_IsTargetOfActionAlly::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.JudgeWhetherAttackIsBlow
// 0x0250 (0x0250 - 0x0000)
struct BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow final
{
public:
	class FName                                   ActionID;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0128(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0248(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow");
static_assert(sizeof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow) == 0x000250, "Wrong size on BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow, ActionID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow::ActionID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow, Target) == 0x000128, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow, ReturnValue) == 0x000248, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsBlow::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.JudgeWhetherAttackIsRampage
// 0x0270 (0x0270 - 0x0000)
struct BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage final
{
public:
	struct FST_AttackData                         AttackData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Source;                                            // 0x0028(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_TempCharaDataForDamageCalc         Target;                                            // 0x0148(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0268(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage");
static_assert(sizeof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage) == 0x000270, "Wrong size on BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage, AttackData) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage::AttackData' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage, Source) == 0x000028, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage, Target) == 0x000148, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage, ReturnValue) == 0x000268, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherAttackIsRampage::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.JudgeWhetherEvasion
// 0x0020 (0x0020 - 0x0000)
struct BattleBlueprintFunctionLibrary_JudgeWhetherEvasion final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Source;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuardType                                    ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_JudgeWhetherEvasion) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_JudgeWhetherEvasion");
static_assert(sizeof(BattleBlueprintFunctionLibrary_JudgeWhetherEvasion) == 0x000020, "Wrong size on BattleBlueprintFunctionLibrary_JudgeWhetherEvasion");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherEvasion, actionDetailID) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherEvasion::actionDetailID' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherEvasion, Source) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherEvasion::Source' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherEvasion, Target) == 0x000010, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherEvasion::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_JudgeWhetherEvasion, ReturnValue) == 0x000018, "Member 'BattleBlueprintFunctionLibrary_JudgeWhetherEvasion::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleBlueprintFunctionLibrary.LotteryGetUp
// 0x0018 (0x0018 - 0x0000)
struct BattleBlueprintFunctionLibrary_LotteryGetUp final
{
public:
	class AGPACharacter*                          Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBlueprintFunctionLibrary_LotteryGetUp) == 0x000008, "Wrong alignment on BattleBlueprintFunctionLibrary_LotteryGetUp");
static_assert(sizeof(BattleBlueprintFunctionLibrary_LotteryGetUp) == 0x000018, "Wrong size on BattleBlueprintFunctionLibrary_LotteryGetUp");
static_assert(offsetof(BattleBlueprintFunctionLibrary_LotteryGetUp, Instigator) == 0x000000, "Member 'BattleBlueprintFunctionLibrary_LotteryGetUp::Instigator' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_LotteryGetUp, Target) == 0x000008, "Member 'BattleBlueprintFunctionLibrary_LotteryGetUp::Target' has a wrong offset!");
static_assert(offsetof(BattleBlueprintFunctionLibrary_LotteryGetUp, ReturnValue) == 0x000010, "Member 'BattleBlueprintFunctionLibrary_LotteryGetUp::ReturnValue' has a wrong offset!");

// Function DarwinGame.TreasureMapObjectBase.Initialize
// 0x0008 (0x0008 - 0x0000)
struct TreasureMapObjectBase_Initialize final
{
public:
	class FName                                   Param;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureMapObjectBase_Initialize) == 0x000004, "Wrong alignment on TreasureMapObjectBase_Initialize");
static_assert(sizeof(TreasureMapObjectBase_Initialize) == 0x000008, "Wrong size on TreasureMapObjectBase_Initialize");
static_assert(offsetof(TreasureMapObjectBase_Initialize, Param) == 0x000000, "Member 'TreasureMapObjectBase_Initialize::Param' has a wrong offset!");

// Function DarwinGame.LinkMenuBase.ExecuteLinkAction
// 0x0004 (0x0004 - 0x0000)
struct LinkMenuBase_ExecuteLinkAction final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkMenuBase_ExecuteLinkAction) == 0x000004, "Wrong alignment on LinkMenuBase_ExecuteLinkAction");
static_assert(sizeof(LinkMenuBase_ExecuteLinkAction) == 0x000004, "Wrong size on LinkMenuBase_ExecuteLinkAction");
static_assert(offsetof(LinkMenuBase_ExecuteLinkAction, Index_0) == 0x000000, "Member 'LinkMenuBase_ExecuteLinkAction::Index_0' has a wrong offset!");

// Function DarwinGame.LinkMenuBase.IsExecutable
// 0x0008 (0x0008 - 0x0000)
struct LinkMenuBase_IsExecutable final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LinkMenuBase_IsExecutable) == 0x000004, "Wrong alignment on LinkMenuBase_IsExecutable");
static_assert(sizeof(LinkMenuBase_IsExecutable) == 0x000008, "Wrong size on LinkMenuBase_IsExecutable");
static_assert(offsetof(LinkMenuBase_IsExecutable, Index_0) == 0x000000, "Member 'LinkMenuBase_IsExecutable::Index_0' has a wrong offset!");
static_assert(offsetof(LinkMenuBase_IsExecutable, ReturnValue) == 0x000004, "Member 'LinkMenuBase_IsExecutable::ReturnValue' has a wrong offset!");

// Function DarwinGame.LinkMenuBase.GetLinkWidget
// 0x0008 (0x0008 - 0x0000)
struct LinkMenuBase_GetLinkWidget final
{
public:
	class UUIField_IconLink*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkMenuBase_GetLinkWidget) == 0x000008, "Wrong alignment on LinkMenuBase_GetLinkWidget");
static_assert(sizeof(LinkMenuBase_GetLinkWidget) == 0x000008, "Wrong size on LinkMenuBase_GetLinkWidget");
static_assert(offsetof(LinkMenuBase_GetLinkWidget, ReturnValue) == 0x000000, "Member 'LinkMenuBase_GetLinkWidget::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageExecutionBase.CalculateDamage
// 0x0030 (0x0030 - 0x0000)
struct DamageExecutionBase_CalculateDamage final
{
public:
	struct FGameplayEffectContextHandle           ContextHandle;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Source;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stun;                                              // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageExecutionBase_CalculateDamage) == 0x000008, "Wrong alignment on DamageExecutionBase_CalculateDamage");
static_assert(sizeof(DamageExecutionBase_CalculateDamage) == 0x000030, "Wrong size on DamageExecutionBase_CalculateDamage");
static_assert(offsetof(DamageExecutionBase_CalculateDamage, ContextHandle) == 0x000000, "Member 'DamageExecutionBase_CalculateDamage::ContextHandle' has a wrong offset!");
static_assert(offsetof(DamageExecutionBase_CalculateDamage, Source) == 0x000018, "Member 'DamageExecutionBase_CalculateDamage::Source' has a wrong offset!");
static_assert(offsetof(DamageExecutionBase_CalculateDamage, Target) == 0x000020, "Member 'DamageExecutionBase_CalculateDamage::Target' has a wrong offset!");
static_assert(offsetof(DamageExecutionBase_CalculateDamage, Damage) == 0x000028, "Member 'DamageExecutionBase_CalculateDamage::Damage' has a wrong offset!");
static_assert(offsetof(DamageExecutionBase_CalculateDamage, Stun) == 0x00002C, "Member 'DamageExecutionBase_CalculateDamage::Stun' has a wrong offset!");

// Function DarwinGame.EventDataBase.CanForcedBattleEvent
// 0x000C (0x000C - 0x0000)
struct EventDataBase_CanForcedBattleEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventDataBase_CanForcedBattleEvent) == 0x000004, "Wrong alignment on EventDataBase_CanForcedBattleEvent");
static_assert(sizeof(EventDataBase_CanForcedBattleEvent) == 0x00000C, "Wrong size on EventDataBase_CanForcedBattleEvent");
static_assert(offsetof(EventDataBase_CanForcedBattleEvent, EventID) == 0x000000, "Member 'EventDataBase_CanForcedBattleEvent::EventID' has a wrong offset!");
static_assert(offsetof(EventDataBase_CanForcedBattleEvent, ReturnValue) == 0x000008, "Member 'EventDataBase_CanForcedBattleEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventDataBase.ConvertItemIdToTreasureAreaId
// 0x0010 (0x0010 - 0x0000)
struct EventDataBase_ConvertItemIdToTreasureAreaId final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventDataBase_ConvertItemIdToTreasureAreaId) == 0x000004, "Wrong alignment on EventDataBase_ConvertItemIdToTreasureAreaId");
static_assert(sizeof(EventDataBase_ConvertItemIdToTreasureAreaId) == 0x000010, "Wrong size on EventDataBase_ConvertItemIdToTreasureAreaId");
static_assert(offsetof(EventDataBase_ConvertItemIdToTreasureAreaId, ItemId) == 0x000000, "Member 'EventDataBase_ConvertItemIdToTreasureAreaId::ItemId' has a wrong offset!");
static_assert(offsetof(EventDataBase_ConvertItemIdToTreasureAreaId, ReturnValue) == 0x000008, "Member 'EventDataBase_ConvertItemIdToTreasureAreaId::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventDataBase.ConvertItemIdToTresureId
// 0x000C (0x000C - 0x0000)
struct EventDataBase_ConvertItemIdToTresureId final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventDataBase_ConvertItemIdToTresureId) == 0x000004, "Wrong alignment on EventDataBase_ConvertItemIdToTresureId");
static_assert(sizeof(EventDataBase_ConvertItemIdToTresureId) == 0x00000C, "Wrong size on EventDataBase_ConvertItemIdToTresureId");
static_assert(offsetof(EventDataBase_ConvertItemIdToTresureId, ItemId) == 0x000000, "Member 'EventDataBase_ConvertItemIdToTresureId::ItemId' has a wrong offset!");
static_assert(offsetof(EventDataBase_ConvertItemIdToTresureId, ReturnValue) == 0x000008, "Member 'EventDataBase_ConvertItemIdToTresureId::ReturnValue' has a wrong offset!");

// Function DarwinGame.AnimNotifyState_ComboInputTime.OnComboInputBegin
// 0x0018 (0x0018 - 0x0000)
struct AnimNotifyState_ComboInputTime_OnComboInputBegin final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotifyState_ComboInputTime_OnComboInputBegin) == 0x000008, "Wrong alignment on AnimNotifyState_ComboInputTime_OnComboInputBegin");
static_assert(sizeof(AnimNotifyState_ComboInputTime_OnComboInputBegin) == 0x000018, "Wrong size on AnimNotifyState_ComboInputTime_OnComboInputBegin");
static_assert(offsetof(AnimNotifyState_ComboInputTime_OnComboInputBegin, MeshComp) == 0x000000, "Member 'AnimNotifyState_ComboInputTime_OnComboInputBegin::MeshComp' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_ComboInputTime_OnComboInputBegin, Animation) == 0x000008, "Member 'AnimNotifyState_ComboInputTime_OnComboInputBegin::Animation' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_ComboInputTime_OnComboInputBegin, TotalDuration) == 0x000010, "Member 'AnimNotifyState_ComboInputTime_OnComboInputBegin::TotalDuration' has a wrong offset!");

// Function DarwinGame.TipsOpener.AddOpenScheduleManualTipsList
// 0x0008 (0x0008 - 0x0000)
struct TipsOpener_AddOpenScheduleManualTipsList final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TipsOpener_AddOpenScheduleManualTipsList) == 0x000004, "Wrong alignment on TipsOpener_AddOpenScheduleManualTipsList");
static_assert(sizeof(TipsOpener_AddOpenScheduleManualTipsList) == 0x000008, "Wrong size on TipsOpener_AddOpenScheduleManualTipsList");
static_assert(offsetof(TipsOpener_AddOpenScheduleManualTipsList, TipsID) == 0x000000, "Member 'TipsOpener_AddOpenScheduleManualTipsList::TipsID' has a wrong offset!");

// Function DarwinGame.TipsOpener.AddOpenScheduleNewItemGetTipsList
// 0x0008 (0x0008 - 0x0000)
struct TipsOpener_AddOpenScheduleNewItemGetTipsList final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TipsOpener_AddOpenScheduleNewItemGetTipsList) == 0x000004, "Wrong alignment on TipsOpener_AddOpenScheduleNewItemGetTipsList");
static_assert(sizeof(TipsOpener_AddOpenScheduleNewItemGetTipsList) == 0x000008, "Wrong size on TipsOpener_AddOpenScheduleNewItemGetTipsList");
static_assert(offsetof(TipsOpener_AddOpenScheduleNewItemGetTipsList, ItemId) == 0x000000, "Member 'TipsOpener_AddOpenScheduleNewItemGetTipsList::ItemId' has a wrong offset!");

// Function DarwinGame.TipsOpener.OpenDelayedTips
// 0x0008 (0x0008 - 0x0000)
struct TipsOpener_OpenDelayedTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TipsOpener_OpenDelayedTips) == 0x000004, "Wrong alignment on TipsOpener_OpenDelayedTips");
static_assert(sizeof(TipsOpener_OpenDelayedTips) == 0x000008, "Wrong size on TipsOpener_OpenDelayedTips");
static_assert(offsetof(TipsOpener_OpenDelayedTips, TipsID) == 0x000000, "Member 'TipsOpener_OpenDelayedTips::TipsID' has a wrong offset!");

// Function DarwinGame.TipsOpener.OpenTipsSpecifyOnly
// 0x0008 (0x0008 - 0x0000)
struct TipsOpener_OpenTipsSpecifyOnly final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TipsOpener_OpenTipsSpecifyOnly) == 0x000004, "Wrong alignment on TipsOpener_OpenTipsSpecifyOnly");
static_assert(sizeof(TipsOpener_OpenTipsSpecifyOnly) == 0x000008, "Wrong size on TipsOpener_OpenTipsSpecifyOnly");
static_assert(offsetof(TipsOpener_OpenTipsSpecifyOnly, TipsID) == 0x000000, "Member 'TipsOpener_OpenTipsSpecifyOnly::TipsID' has a wrong offset!");

// Function DarwinGame.TipsOpener.RequestOpenDelayedTips
// 0x000C (0x000C - 0x0000)
struct TipsOpener_RequestOpenDelayedTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TipsOpener_RequestOpenDelayedTips) == 0x000004, "Wrong alignment on TipsOpener_RequestOpenDelayedTips");
static_assert(sizeof(TipsOpener_RequestOpenDelayedTips) == 0x00000C, "Wrong size on TipsOpener_RequestOpenDelayedTips");
static_assert(offsetof(TipsOpener_RequestOpenDelayedTips, TipsID) == 0x000000, "Member 'TipsOpener_RequestOpenDelayedTips::TipsID' has a wrong offset!");
static_assert(offsetof(TipsOpener_RequestOpenDelayedTips, DelayTime) == 0x000008, "Member 'TipsOpener_RequestOpenDelayedTips::DelayTime' has a wrong offset!");

// Function DarwinGame.UICoinStatusArrow.InitWidget
// 0x0018 (0x0018 - 0x0000)
struct UICoinStatusArrow_InitWidget final
{
public:
	class UImage*                                 iconImg;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             upValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       statusUp;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICoinStatusArrow_InitWidget) == 0x000008, "Wrong alignment on UICoinStatusArrow_InitWidget");
static_assert(sizeof(UICoinStatusArrow_InitWidget) == 0x000018, "Wrong size on UICoinStatusArrow_InitWidget");
static_assert(offsetof(UICoinStatusArrow_InitWidget, iconImg) == 0x000000, "Member 'UICoinStatusArrow_InitWidget::iconImg' has a wrong offset!");
static_assert(offsetof(UICoinStatusArrow_InitWidget, upValue) == 0x000008, "Member 'UICoinStatusArrow_InitWidget::upValue' has a wrong offset!");
static_assert(offsetof(UICoinStatusArrow_InitWidget, statusUp) == 0x000010, "Member 'UICoinStatusArrow_InitWidget::statusUp' has a wrong offset!");

// Function DarwinGame.TextWidgetData.SetText
// 0x0028 (0x0028 - 0x0000)
struct TextWidgetData_SetText final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSystemMessage;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         defaultCursol;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         cancelPos;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceRuby;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextWidgetData_SetText) == 0x000008, "Wrong alignment on TextWidgetData_SetText");
static_assert(sizeof(TextWidgetData_SetText) == 0x000028, "Wrong size on TextWidgetData_SetText");
static_assert(offsetof(TextWidgetData_SetText, inString) == 0x000000, "Member 'TextWidgetData_SetText::inString' has a wrong offset!");
static_assert(offsetof(TextWidgetData_SetText, isSystemMessage) == 0x000010, "Member 'TextWidgetData_SetText::isSystemMessage' has a wrong offset!");
static_assert(offsetof(TextWidgetData_SetText, defaultCursol) == 0x000014, "Member 'TextWidgetData_SetText::defaultCursol' has a wrong offset!");
static_assert(offsetof(TextWidgetData_SetText, cancelPos) == 0x000018, "Member 'TextWidgetData_SetText::cancelPos' has a wrong offset!");
static_assert(offsetof(TextWidgetData_SetText, Price) == 0x00001C, "Member 'TextWidgetData_SetText::Price' has a wrong offset!");
static_assert(offsetof(TextWidgetData_SetText, forceRuby) == 0x000020, "Member 'TextWidgetData_SetText::forceRuby' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.GetBigStarEmissive
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_GetBigStarEmissive final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_GetBigStarEmissive) == 0x000004, "Wrong alignment on EnvironmentObject_GetBigStarEmissive");
static_assert(sizeof(EnvironmentObject_GetBigStarEmissive) == 0x000004, "Wrong size on EnvironmentObject_GetBigStarEmissive");
static_assert(offsetof(EnvironmentObject_GetBigStarEmissive, ReturnValue) == 0x000000, "Member 'EnvironmentObject_GetBigStarEmissive::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.GetEnvironmentType
// 0x0001 (0x0001 - 0x0000)
struct EnvironmentObject_GetEnvironmentType final
{
public:
	EEnvironmentType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_GetEnvironmentType) == 0x000001, "Wrong alignment on EnvironmentObject_GetEnvironmentType");
static_assert(sizeof(EnvironmentObject_GetEnvironmentType) == 0x000001, "Wrong size on EnvironmentObject_GetEnvironmentType");
static_assert(offsetof(EnvironmentObject_GetEnvironmentType, ReturnValue) == 0x000000, "Member 'EnvironmentObject_GetEnvironmentType::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.GetFogDensity
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_GetFogDensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_GetFogDensity) == 0x000004, "Wrong alignment on EnvironmentObject_GetFogDensity");
static_assert(sizeof(EnvironmentObject_GetFogDensity) == 0x000004, "Wrong size on EnvironmentObject_GetFogDensity");
static_assert(offsetof(EnvironmentObject_GetFogDensity, ReturnValue) == 0x000000, "Member 'EnvironmentObject_GetFogDensity::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.GetSmallStarEmissive
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_GetSmallStarEmissive final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_GetSmallStarEmissive) == 0x000004, "Wrong alignment on EnvironmentObject_GetSmallStarEmissive");
static_assert(sizeof(EnvironmentObject_GetSmallStarEmissive) == 0x000004, "Wrong size on EnvironmentObject_GetSmallStarEmissive");
static_assert(offsetof(EnvironmentObject_GetSmallStarEmissive, ReturnValue) == 0x000000, "Member 'EnvironmentObject_GetSmallStarEmissive::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.GetSmallStarReduce
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_GetSmallStarReduce final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_GetSmallStarReduce) == 0x000004, "Wrong alignment on EnvironmentObject_GetSmallStarReduce");
static_assert(sizeof(EnvironmentObject_GetSmallStarReduce) == 0x000004, "Wrong size on EnvironmentObject_GetSmallStarReduce");
static_assert(offsetof(EnvironmentObject_GetSmallStarReduce, ReturnValue) == 0x000000, "Member 'EnvironmentObject_GetSmallStarReduce::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.GetStarOverallEmissive
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_GetStarOverallEmissive final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_GetStarOverallEmissive) == 0x000004, "Wrong alignment on EnvironmentObject_GetStarOverallEmissive");
static_assert(sizeof(EnvironmentObject_GetStarOverallEmissive) == 0x000004, "Wrong size on EnvironmentObject_GetStarOverallEmissive");
static_assert(offsetof(EnvironmentObject_GetStarOverallEmissive, ReturnValue) == 0x000000, "Member 'EnvironmentObject_GetStarOverallEmissive::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.Initialize
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentObject_Initialize final
{
public:
	class FName                                   EnvID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_Initialize) == 0x000004, "Wrong alignment on EnvironmentObject_Initialize");
static_assert(sizeof(EnvironmentObject_Initialize) == 0x000008, "Wrong size on EnvironmentObject_Initialize");
static_assert(offsetof(EnvironmentObject_Initialize, EnvID) == 0x000000, "Member 'EnvironmentObject_Initialize::EnvID' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.PreInitialize
// 0x0050 (0x0050 - 0x0000)
struct EnvironmentObject_PreInitialize final
{
public:
	class UPostProcessComponent*                  PostProcessComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkySphere;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkyCloud;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           SkyMPC;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SunColorCurve;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           SunRotationCurve;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           DirectionalLightRotationCurve;                     // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_PreInitialize) == 0x000008, "Wrong alignment on EnvironmentObject_PreInitialize");
static_assert(sizeof(EnvironmentObject_PreInitialize) == 0x000050, "Wrong size on EnvironmentObject_PreInitialize");
static_assert(offsetof(EnvironmentObject_PreInitialize, PostProcessComponent) == 0x000000, "Member 'EnvironmentObject_PreInitialize::PostProcessComponent' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, SkySphere) == 0x000008, "Member 'EnvironmentObject_PreInitialize::SkySphere' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, SkyCloud) == 0x000010, "Member 'EnvironmentObject_PreInitialize::SkyCloud' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, SkyLight) == 0x000018, "Member 'EnvironmentObject_PreInitialize::SkyLight' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, DirectionalLight) == 0x000020, "Member 'EnvironmentObject_PreInitialize::DirectionalLight' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, ExponentialHeightFog) == 0x000028, "Member 'EnvironmentObject_PreInitialize::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, SkyMPC) == 0x000030, "Member 'EnvironmentObject_PreInitialize::SkyMPC' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, SunColorCurve) == 0x000038, "Member 'EnvironmentObject_PreInitialize::SunColorCurve' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, SunRotationCurve) == 0x000040, "Member 'EnvironmentObject_PreInitialize::SunRotationCurve' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_PreInitialize, DirectionalLightRotationCurve) == 0x000048, "Member 'EnvironmentObject_PreInitialize::DirectionalLightRotationCurve' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.SetBigStarEmissive
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_SetBigStarEmissive final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_SetBigStarEmissive) == 0x000004, "Wrong alignment on EnvironmentObject_SetBigStarEmissive");
static_assert(sizeof(EnvironmentObject_SetBigStarEmissive) == 0x000004, "Wrong size on EnvironmentObject_SetBigStarEmissive");
static_assert(offsetof(EnvironmentObject_SetBigStarEmissive, Param) == 0x000000, "Member 'EnvironmentObject_SetBigStarEmissive::Param' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.SetFogDensity
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_SetFogDensity final
{
public:
	float                                         Density;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_SetFogDensity) == 0x000004, "Wrong alignment on EnvironmentObject_SetFogDensity");
static_assert(sizeof(EnvironmentObject_SetFogDensity) == 0x000004, "Wrong size on EnvironmentObject_SetFogDensity");
static_assert(offsetof(EnvironmentObject_SetFogDensity, Density) == 0x000000, "Member 'EnvironmentObject_SetFogDensity::Density' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.SetPostProcessWeight
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentObject_SetPostProcessWeight final
{
public:
	EEnvironmentPostProcessType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_SetPostProcessWeight) == 0x000004, "Wrong alignment on EnvironmentObject_SetPostProcessWeight");
static_assert(sizeof(EnvironmentObject_SetPostProcessWeight) == 0x000008, "Wrong size on EnvironmentObject_SetPostProcessWeight");
static_assert(offsetof(EnvironmentObject_SetPostProcessWeight, Type) == 0x000000, "Member 'EnvironmentObject_SetPostProcessWeight::Type' has a wrong offset!");
static_assert(offsetof(EnvironmentObject_SetPostProcessWeight, Weight) == 0x000004, "Member 'EnvironmentObject_SetPostProcessWeight::Weight' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.SetSmallStarEmissive
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_SetSmallStarEmissive final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_SetSmallStarEmissive) == 0x000004, "Wrong alignment on EnvironmentObject_SetSmallStarEmissive");
static_assert(sizeof(EnvironmentObject_SetSmallStarEmissive) == 0x000004, "Wrong size on EnvironmentObject_SetSmallStarEmissive");
static_assert(offsetof(EnvironmentObject_SetSmallStarEmissive, Param) == 0x000000, "Member 'EnvironmentObject_SetSmallStarEmissive::Param' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.SetSmallStarReduce
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_SetSmallStarReduce final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_SetSmallStarReduce) == 0x000004, "Wrong alignment on EnvironmentObject_SetSmallStarReduce");
static_assert(sizeof(EnvironmentObject_SetSmallStarReduce) == 0x000004, "Wrong size on EnvironmentObject_SetSmallStarReduce");
static_assert(offsetof(EnvironmentObject_SetSmallStarReduce, Param) == 0x000000, "Member 'EnvironmentObject_SetSmallStarReduce::Param' has a wrong offset!");

// Function DarwinGame.EnvironmentObject.SetStarOverallEmissive
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentObject_SetStarOverallEmissive final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentObject_SetStarOverallEmissive) == 0x000004, "Wrong alignment on EnvironmentObject_SetStarOverallEmissive");
static_assert(sizeof(EnvironmentObject_SetStarOverallEmissive) == 0x000004, "Wrong size on EnvironmentObject_SetStarOverallEmissive");
static_assert(offsetof(EnvironmentObject_SetStarOverallEmissive, Param) == 0x000000, "Member 'EnvironmentObject_SetStarOverallEmissive::Param' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.SetBoxVisible
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_SetBoxVisible final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_SetBoxVisible) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_SetBoxVisible");
static_assert(sizeof(EnemySpawnGeneratorBase_SetBoxVisible) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_SetBoxVisible");
static_assert(offsetof(EnemySpawnGeneratorBase_SetBoxVisible, flg) == 0x000000, "Member 'EnemySpawnGeneratorBase_SetBoxVisible::flg' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.SetEnableSpawnCheck
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_SetEnableSpawnCheck final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_SetEnableSpawnCheck) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_SetEnableSpawnCheck");
static_assert(sizeof(EnemySpawnGeneratorBase_SetEnableSpawnCheck) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_SetEnableSpawnCheck");
static_assert(offsetof(EnemySpawnGeneratorBase_SetEnableSpawnCheck, flg) == 0x000000, "Member 'EnemySpawnGeneratorBase_SetEnableSpawnCheck::flg' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.SetGeneratorID
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorBase_SetGeneratorID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_SetGeneratorID) == 0x000004, "Wrong alignment on EnemySpawnGeneratorBase_SetGeneratorID");
static_assert(sizeof(EnemySpawnGeneratorBase_SetGeneratorID) == 0x000008, "Wrong size on EnemySpawnGeneratorBase_SetGeneratorID");
static_assert(offsetof(EnemySpawnGeneratorBase_SetGeneratorID, ID) == 0x000000, "Member 'EnemySpawnGeneratorBase_SetGeneratorID::ID' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.SetIgnoreAreaCheck
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_SetIgnoreAreaCheck final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_SetIgnoreAreaCheck) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_SetIgnoreAreaCheck");
static_assert(sizeof(EnemySpawnGeneratorBase_SetIgnoreAreaCheck) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_SetIgnoreAreaCheck");
static_assert(offsetof(EnemySpawnGeneratorBase_SetIgnoreAreaCheck, flg) == 0x000000, "Member 'EnemySpawnGeneratorBase_SetIgnoreAreaCheck::flg' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.SetOverlapCheck
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_SetOverlapCheck final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_SetOverlapCheck) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_SetOverlapCheck");
static_assert(sizeof(EnemySpawnGeneratorBase_SetOverlapCheck) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_SetOverlapCheck");
static_assert(offsetof(EnemySpawnGeneratorBase_SetOverlapCheck, flg) == 0x000000, "Member 'EnemySpawnGeneratorBase_SetOverlapCheck::flg' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.SetStopSpawn
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_SetStopSpawn final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_SetStopSpawn) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_SetStopSpawn");
static_assert(sizeof(EnemySpawnGeneratorBase_SetStopSpawn) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_SetStopSpawn");
static_assert(offsetof(EnemySpawnGeneratorBase_SetStopSpawn, flg) == 0x000000, "Member 'EnemySpawnGeneratorBase_SetStopSpawn::flg' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.GetChildGeneratorRadius
// 0x0004 (0x0004 - 0x0000)
struct EnemySpawnGeneratorBase_GetChildGeneratorRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_GetChildGeneratorRadius) == 0x000004, "Wrong alignment on EnemySpawnGeneratorBase_GetChildGeneratorRadius");
static_assert(sizeof(EnemySpawnGeneratorBase_GetChildGeneratorRadius) == 0x000004, "Wrong size on EnemySpawnGeneratorBase_GetChildGeneratorRadius");
static_assert(offsetof(EnemySpawnGeneratorBase_GetChildGeneratorRadius, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_GetChildGeneratorRadius::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.GetGeneratorID
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorBase_GetGeneratorID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_GetGeneratorID) == 0x000004, "Wrong alignment on EnemySpawnGeneratorBase_GetGeneratorID");
static_assert(sizeof(EnemySpawnGeneratorBase_GetGeneratorID) == 0x000008, "Wrong size on EnemySpawnGeneratorBase_GetGeneratorID");
static_assert(offsetof(EnemySpawnGeneratorBase_GetGeneratorID, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_GetGeneratorID::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.HasActiveGenerator
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_HasActiveGenerator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_HasActiveGenerator) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_HasActiveGenerator");
static_assert(sizeof(EnemySpawnGeneratorBase_HasActiveGenerator) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_HasActiveGenerator");
static_assert(offsetof(EnemySpawnGeneratorBase_HasActiveGenerator, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_HasActiveGenerator::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.IsBoxVisible
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_IsBoxVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_IsBoxVisible) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_IsBoxVisible");
static_assert(sizeof(EnemySpawnGeneratorBase_IsBoxVisible) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_IsBoxVisible");
static_assert(offsetof(EnemySpawnGeneratorBase_IsBoxVisible, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_IsBoxVisible::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.IsEnableSpawnCheck
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_IsEnableSpawnCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_IsEnableSpawnCheck) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_IsEnableSpawnCheck");
static_assert(sizeof(EnemySpawnGeneratorBase_IsEnableSpawnCheck) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_IsEnableSpawnCheck");
static_assert(offsetof(EnemySpawnGeneratorBase_IsEnableSpawnCheck, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_IsEnableSpawnCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.IsIgnoreAreaCheck
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_IsIgnoreAreaCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_IsIgnoreAreaCheck) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_IsIgnoreAreaCheck");
static_assert(sizeof(EnemySpawnGeneratorBase_IsIgnoreAreaCheck) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_IsIgnoreAreaCheck");
static_assert(offsetof(EnemySpawnGeneratorBase_IsIgnoreAreaCheck, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_IsIgnoreAreaCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.IsOverlapCheck
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_IsOverlapCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_IsOverlapCheck) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_IsOverlapCheck");
static_assert(sizeof(EnemySpawnGeneratorBase_IsOverlapCheck) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_IsOverlapCheck");
static_assert(offsetof(EnemySpawnGeneratorBase_IsOverlapCheck, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_IsOverlapCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorBase.IsStopSpawn
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnGeneratorBase_IsStopSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorBase_IsStopSpawn) == 0x000001, "Wrong alignment on EnemySpawnGeneratorBase_IsStopSpawn");
static_assert(sizeof(EnemySpawnGeneratorBase_IsStopSpawn) == 0x000001, "Wrong size on EnemySpawnGeneratorBase_IsStopSpawn");
static_assert(offsetof(EnemySpawnGeneratorBase_IsStopSpawn, ReturnValue) == 0x000000, "Member 'EnemySpawnGeneratorBase_IsStopSpawn::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorDirect.SetForwardArrow
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorDirect_SetForwardArrow final
{
public:
	class UArrowComponent*                        arrow;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorDirect_SetForwardArrow) == 0x000008, "Wrong alignment on EnemySpawnGeneratorDirect_SetForwardArrow");
static_assert(sizeof(EnemySpawnGeneratorDirect_SetForwardArrow) == 0x000008, "Wrong size on EnemySpawnGeneratorDirect_SetForwardArrow");
static_assert(offsetof(EnemySpawnGeneratorDirect_SetForwardArrow, arrow) == 0x000000, "Member 'EnemySpawnGeneratorDirect_SetForwardArrow::arrow' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorDirect.SetIgnoreSphere
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorDirect_SetIgnoreSphere final
{
public:
	class USphereComponent*                       Sphere;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorDirect_SetIgnoreSphere) == 0x000008, "Wrong alignment on EnemySpawnGeneratorDirect_SetIgnoreSphere");
static_assert(sizeof(EnemySpawnGeneratorDirect_SetIgnoreSphere) == 0x000008, "Wrong size on EnemySpawnGeneratorDirect_SetIgnoreSphere");
static_assert(offsetof(EnemySpawnGeneratorDirect_SetIgnoreSphere, Sphere) == 0x000000, "Member 'EnemySpawnGeneratorDirect_SetIgnoreSphere::Sphere' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorDirect.SetSpawnBox
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorDirect_SetSpawnBox final
{
public:
	class UBoxComponent*                          Box;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorDirect_SetSpawnBox) == 0x000008, "Wrong alignment on EnemySpawnGeneratorDirect_SetSpawnBox");
static_assert(sizeof(EnemySpawnGeneratorDirect_SetSpawnBox) == 0x000008, "Wrong size on EnemySpawnGeneratorDirect_SetSpawnBox");
static_assert(offsetof(EnemySpawnGeneratorDirect_SetSpawnBox, Box) == 0x000000, "Member 'EnemySpawnGeneratorDirect_SetSpawnBox::Box' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorDirect.SetSpawnCylinder
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorDirect_SetSpawnCylinder final
{
public:
	class UCapsuleComponent*                      Cylinder;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorDirect_SetSpawnCylinder) == 0x000008, "Wrong alignment on EnemySpawnGeneratorDirect_SetSpawnCylinder");
static_assert(sizeof(EnemySpawnGeneratorDirect_SetSpawnCylinder) == 0x000008, "Wrong size on EnemySpawnGeneratorDirect_SetSpawnCylinder");
static_assert(offsetof(EnemySpawnGeneratorDirect_SetSpawnCylinder, Cylinder) == 0x000000, "Member 'EnemySpawnGeneratorDirect_SetSpawnCylinder::Cylinder' has a wrong offset!");

// Function DarwinGame.FlexibleDoor.FrontCheck
// 0x0010 (0x0010 - 0x0000)
struct FlexibleDoor_FrontCheck final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlexibleDoor_FrontCheck) == 0x000008, "Wrong alignment on FlexibleDoor_FrontCheck");
static_assert(sizeof(FlexibleDoor_FrontCheck) == 0x000010, "Wrong size on FlexibleDoor_FrontCheck");
static_assert(offsetof(FlexibleDoor_FrontCheck, TargetActor) == 0x000000, "Member 'FlexibleDoor_FrontCheck::TargetActor' has a wrong offset!");
static_assert(offsetof(FlexibleDoor_FrontCheck, ReturnValue) == 0x000008, "Member 'FlexibleDoor_FrontCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.SimpleOpenAnimInstance.IsCloseAndPlayAnimation
// 0x0001 (0x0001 - 0x0000)
struct SimpleOpenAnimInstance_IsCloseAndPlayAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleOpenAnimInstance_IsCloseAndPlayAnimation) == 0x000001, "Wrong alignment on SimpleOpenAnimInstance_IsCloseAndPlayAnimation");
static_assert(sizeof(SimpleOpenAnimInstance_IsCloseAndPlayAnimation) == 0x000001, "Wrong size on SimpleOpenAnimInstance_IsCloseAndPlayAnimation");
static_assert(offsetof(SimpleOpenAnimInstance_IsCloseAndPlayAnimation, ReturnValue) == 0x000000, "Member 'SimpleOpenAnimInstance_IsCloseAndPlayAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.SimpleOpenAnimInstance.IsCloseAndSkipAnimation
// 0x0001 (0x0001 - 0x0000)
struct SimpleOpenAnimInstance_IsCloseAndSkipAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleOpenAnimInstance_IsCloseAndSkipAnimation) == 0x000001, "Wrong alignment on SimpleOpenAnimInstance_IsCloseAndSkipAnimation");
static_assert(sizeof(SimpleOpenAnimInstance_IsCloseAndSkipAnimation) == 0x000001, "Wrong size on SimpleOpenAnimInstance_IsCloseAndSkipAnimation");
static_assert(offsetof(SimpleOpenAnimInstance_IsCloseAndSkipAnimation, ReturnValue) == 0x000000, "Member 'SimpleOpenAnimInstance_IsCloseAndSkipAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.SimpleOpenAnimInstance.IsOpenAndPlayAnimation
// 0x0001 (0x0001 - 0x0000)
struct SimpleOpenAnimInstance_IsOpenAndPlayAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleOpenAnimInstance_IsOpenAndPlayAnimation) == 0x000001, "Wrong alignment on SimpleOpenAnimInstance_IsOpenAndPlayAnimation");
static_assert(sizeof(SimpleOpenAnimInstance_IsOpenAndPlayAnimation) == 0x000001, "Wrong size on SimpleOpenAnimInstance_IsOpenAndPlayAnimation");
static_assert(offsetof(SimpleOpenAnimInstance_IsOpenAndPlayAnimation, ReturnValue) == 0x000000, "Member 'SimpleOpenAnimInstance_IsOpenAndPlayAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.SimpleOpenAnimInstance.IsOpenAndSkipAnimation
// 0x0001 (0x0001 - 0x0000)
struct SimpleOpenAnimInstance_IsOpenAndSkipAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleOpenAnimInstance_IsOpenAndSkipAnimation) == 0x000001, "Wrong alignment on SimpleOpenAnimInstance_IsOpenAndSkipAnimation");
static_assert(sizeof(SimpleOpenAnimInstance_IsOpenAndSkipAnimation) == 0x000001, "Wrong size on SimpleOpenAnimInstance_IsOpenAndSkipAnimation");
static_assert(offsetof(SimpleOpenAnimInstance_IsOpenAndSkipAnimation, ReturnValue) == 0x000000, "Member 'SimpleOpenAnimInstance_IsOpenAndSkipAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.EstimateBackPanel.SetPanelMaterial
// 0x0008 (0x0008 - 0x0000)
struct EstimateBackPanel_SetPanelMaterial final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EstimateBackPanel_SetPanelMaterial) == 0x000008, "Wrong alignment on EstimateBackPanel_SetPanelMaterial");
static_assert(sizeof(EstimateBackPanel_SetPanelMaterial) == 0x000008, "Wrong size on EstimateBackPanel_SetPanelMaterial");
static_assert(offsetof(EstimateBackPanel_SetPanelMaterial, Texture) == 0x000000, "Member 'EstimateBackPanel_SetPanelMaterial::Texture' has a wrong offset!");

// Function DarwinGame.FootEffectSystemComponent.PlayFootEffect
// 0x0020 (0x0020 - 0x0000)
struct FootEffectSystemComponent_PlayFootEffect final
{
public:
	struct FFootEffectRequest                     Request;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootEffectSystemComponent_PlayFootEffect) == 0x000008, "Wrong alignment on FootEffectSystemComponent_PlayFootEffect");
static_assert(sizeof(FootEffectSystemComponent_PlayFootEffect) == 0x000020, "Wrong size on FootEffectSystemComponent_PlayFootEffect");
static_assert(offsetof(FootEffectSystemComponent_PlayFootEffect, Request) == 0x000000, "Member 'FootEffectSystemComponent_PlayFootEffect::Request' has a wrong offset!");

// Function DarwinGame.DungeonPointMaze.GetEffectLocation
// 0x000C (0x000C - 0x0000)
struct DungeonPointMaze_GetEffectLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DungeonPointMaze_GetEffectLocation) == 0x000004, "Wrong alignment on DungeonPointMaze_GetEffectLocation");
static_assert(sizeof(DungeonPointMaze_GetEffectLocation) == 0x00000C, "Wrong size on DungeonPointMaze_GetEffectLocation");
static_assert(offsetof(DungeonPointMaze_GetEffectLocation, ReturnValue) == 0x000000, "Member 'DungeonPointMaze_GetEffectLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.GetCurrentAIPart
// 0x0010 (0x0010 - 0x0000)
struct MonsterBattleAIBase_GetCurrentAIPart final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBattleAIPart                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBattleAIBase_GetCurrentAIPart) == 0x000008, "Wrong alignment on MonsterBattleAIBase_GetCurrentAIPart");
static_assert(sizeof(MonsterBattleAIBase_GetCurrentAIPart) == 0x000010, "Wrong size on MonsterBattleAIBase_GetCurrentAIPart");
static_assert(offsetof(MonsterBattleAIBase_GetCurrentAIPart, Monster) == 0x000000, "Member 'MonsterBattleAIBase_GetCurrentAIPart::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBattleAIBase_GetCurrentAIPart, ReturnValue) == 0x000008, "Member 'MonsterBattleAIBase_GetCurrentAIPart::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.ActionCycleMoveSelect
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAIBase_ActionCycleMoveSelect final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAIBase_ActionCycleMoveSelect) == 0x000008, "Wrong alignment on MonsterBattleAIBase_ActionCycleMoveSelect");
static_assert(sizeof(MonsterBattleAIBase_ActionCycleMoveSelect) == 0x000008, "Wrong size on MonsterBattleAIBase_ActionCycleMoveSelect");
static_assert(offsetof(MonsterBattleAIBase_ActionCycleMoveSelect, Monster) == 0x000000, "Member 'MonsterBattleAIBase_ActionCycleMoveSelect::Monster' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.CheckDistancingToBehavior
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAIBase_CheckDistancingToBehavior final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAIBase_CheckDistancingToBehavior) == 0x000008, "Wrong alignment on MonsterBattleAIBase_CheckDistancingToBehavior");
static_assert(sizeof(MonsterBattleAIBase_CheckDistancingToBehavior) == 0x000008, "Wrong size on MonsterBattleAIBase_CheckDistancingToBehavior");
static_assert(offsetof(MonsterBattleAIBase_CheckDistancingToBehavior, Monster) == 0x000000, "Member 'MonsterBattleAIBase_CheckDistancingToBehavior::Monster' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.MoveSelect
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAIBase_MoveSelect final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAIBase_MoveSelect) == 0x000008, "Wrong alignment on MonsterBattleAIBase_MoveSelect");
static_assert(sizeof(MonsterBattleAIBase_MoveSelect) == 0x000008, "Wrong size on MonsterBattleAIBase_MoveSelect");
static_assert(offsetof(MonsterBattleAIBase_MoveSelect, Monster) == 0x000000, "Member 'MonsterBattleAIBase_MoveSelect::Monster' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.PreAction
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAIBase_PreAction final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAIBase_PreAction) == 0x000008, "Wrong alignment on MonsterBattleAIBase_PreAction");
static_assert(sizeof(MonsterBattleAIBase_PreAction) == 0x000008, "Wrong size on MonsterBattleAIBase_PreAction");
static_assert(offsetof(MonsterBattleAIBase_PreAction, Monster) == 0x000000, "Member 'MonsterBattleAIBase_PreAction::Monster' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.SetupActionCycle
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAIBase_SetupActionCycle final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAIBase_SetupActionCycle) == 0x000008, "Wrong alignment on MonsterBattleAIBase_SetupActionCycle");
static_assert(sizeof(MonsterBattleAIBase_SetupActionCycle) == 0x000008, "Wrong size on MonsterBattleAIBase_SetupActionCycle");
static_assert(offsetof(MonsterBattleAIBase_SetupActionCycle, Monster) == 0x000000, "Member 'MonsterBattleAIBase_SetupActionCycle::Monster' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.SetupActionLocation
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAIBase_SetupActionLocation final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAIBase_SetupActionLocation) == 0x000008, "Wrong alignment on MonsterBattleAIBase_SetupActionLocation");
static_assert(sizeof(MonsterBattleAIBase_SetupActionLocation) == 0x000008, "Wrong size on MonsterBattleAIBase_SetupActionLocation");
static_assert(offsetof(MonsterBattleAIBase_SetupActionLocation, Monster) == 0x000000, "Member 'MonsterBattleAIBase_SetupActionLocation::Monster' has a wrong offset!");

// Function DarwinGame.MonsterBattleAIBase.StartActionCycle
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAIBase_StartActionCycle final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAIBase_StartActionCycle) == 0x000008, "Wrong alignment on MonsterBattleAIBase_StartActionCycle");
static_assert(sizeof(MonsterBattleAIBase_StartActionCycle) == 0x000008, "Wrong size on MonsterBattleAIBase_StartActionCycle");
static_assert(offsetof(MonsterBattleAIBase_StartActionCycle, Monster) == 0x000000, "Member 'MonsterBattleAIBase_StartActionCycle::Monster' has a wrong offset!");

// Function DarwinGame.EventFlagBlueprintLibrary.IsCrearSelectRangeEventFlag
// 0x0020 (0x0020 - 0x0000)
struct EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag final
{
public:
	class FString                                 FlagNameBase;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartNum;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndNum;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag) == 0x000008, "Wrong alignment on EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag");
static_assert(sizeof(EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag) == 0x000020, "Wrong size on EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag");
static_assert(offsetof(EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag, FlagNameBase) == 0x000000, "Member 'EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag::FlagNameBase' has a wrong offset!");
static_assert(offsetof(EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag, StartNum) == 0x000010, "Member 'EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag::StartNum' has a wrong offset!");
static_assert(offsetof(EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag, EndNum) == 0x000014, "Member 'EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag::EndNum' has a wrong offset!");
static_assert(offsetof(EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag, ReturnValue) == 0x000018, "Member 'EventFlagBlueprintLibrary_IsCrearSelectRangeEventFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFlagBlueprintLibrary.SetSelectRangeEventFlag
// 0x0020 (0x0020 - 0x0000)
struct EventFlagBlueprintLibrary_SetSelectRangeEventFlag final
{
public:
	class FString                                 FlagNameBase;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartNum;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndNum;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          on;                                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventFlagBlueprintLibrary_SetSelectRangeEventFlag) == 0x000008, "Wrong alignment on EventFlagBlueprintLibrary_SetSelectRangeEventFlag");
static_assert(sizeof(EventFlagBlueprintLibrary_SetSelectRangeEventFlag) == 0x000020, "Wrong size on EventFlagBlueprintLibrary_SetSelectRangeEventFlag");
static_assert(offsetof(EventFlagBlueprintLibrary_SetSelectRangeEventFlag, FlagNameBase) == 0x000000, "Member 'EventFlagBlueprintLibrary_SetSelectRangeEventFlag::FlagNameBase' has a wrong offset!");
static_assert(offsetof(EventFlagBlueprintLibrary_SetSelectRangeEventFlag, StartNum) == 0x000010, "Member 'EventFlagBlueprintLibrary_SetSelectRangeEventFlag::StartNum' has a wrong offset!");
static_assert(offsetof(EventFlagBlueprintLibrary_SetSelectRangeEventFlag, EndNum) == 0x000014, "Member 'EventFlagBlueprintLibrary_SetSelectRangeEventFlag::EndNum' has a wrong offset!");
static_assert(offsetof(EventFlagBlueprintLibrary_SetSelectRangeEventFlag, on) == 0x000018, "Member 'EventFlagBlueprintLibrary_SetSelectRangeEventFlag::on' has a wrong offset!");

// Function DarwinGame.AppDebugMenu.DebugDrawText
// 0x0018 (0x0018 - 0x0000)
struct AppDebugMenu_DebugDrawText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sec;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppDebugMenu_DebugDrawText) == 0x000008, "Wrong alignment on AppDebugMenu_DebugDrawText");
static_assert(sizeof(AppDebugMenu_DebugDrawText) == 0x000018, "Wrong size on AppDebugMenu_DebugDrawText");
static_assert(offsetof(AppDebugMenu_DebugDrawText, Text) == 0x000000, "Member 'AppDebugMenu_DebugDrawText::Text' has a wrong offset!");
static_assert(offsetof(AppDebugMenu_DebugDrawText, sec) == 0x000010, "Member 'AppDebugMenu_DebugDrawText::sec' has a wrong offset!");
static_assert(offsetof(AppDebugMenu_DebugDrawText, Color) == 0x000014, "Member 'AppDebugMenu_DebugDrawText::Color' has a wrong offset!");

// Function DarwinGame.AppDebugMenu.UpdateInput
// 0x00E0 (0x00E0 - 0x0000)
struct AppDebugMenu_UpdateInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamePaused;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyInput                              KeyInput;                                          // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FKeyInput                              OutKeyInput;                                       // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FEventReply                            Output;                                            // 0x0028(0x00B8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppDebugMenu_UpdateInput) == 0x000008, "Wrong alignment on AppDebugMenu_UpdateInput");
static_assert(sizeof(AppDebugMenu_UpdateInput) == 0x0000E0, "Wrong size on AppDebugMenu_UpdateInput");
static_assert(offsetof(AppDebugMenu_UpdateInput, DeltaTime) == 0x000000, "Member 'AppDebugMenu_UpdateInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(AppDebugMenu_UpdateInput, bGamePaused) == 0x000004, "Member 'AppDebugMenu_UpdateInput::bGamePaused' has a wrong offset!");
static_assert(offsetof(AppDebugMenu_UpdateInput, KeyInput) == 0x000008, "Member 'AppDebugMenu_UpdateInput::KeyInput' has a wrong offset!");
static_assert(offsetof(AppDebugMenu_UpdateInput, OutKeyInput) == 0x000018, "Member 'AppDebugMenu_UpdateInput::OutKeyInput' has a wrong offset!");
static_assert(offsetof(AppDebugMenu_UpdateInput, Output) == 0x000028, "Member 'AppDebugMenu_UpdateInput::Output' has a wrong offset!");

// Function DarwinGame.AppDebugMenu.GetRevision
// 0x0010 (0x0010 - 0x0000)
struct AppDebugMenu_GetRevision final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppDebugMenu_GetRevision) == 0x000008, "Wrong alignment on AppDebugMenu_GetRevision");
static_assert(sizeof(AppDebugMenu_GetRevision) == 0x000010, "Wrong size on AppDebugMenu_GetRevision");
static_assert(offsetof(AppDebugMenu_GetRevision, Text) == 0x000000, "Member 'AppDebugMenu_GetRevision::Text' has a wrong offset!");

// Function DarwinGame.AppDebugMenu.IsActive
// 0x0001 (0x0001 - 0x0000)
struct AppDebugMenu_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppDebugMenu_IsActive) == 0x000001, "Wrong alignment on AppDebugMenu_IsActive");
static_assert(sizeof(AppDebugMenu_IsActive) == 0x000001, "Wrong size on AppDebugMenu_IsActive");
static_assert(offsetof(AppDebugMenu_IsActive, ReturnValue) == 0x000000, "Member 'AppDebugMenu_IsActive::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppDebugMenu.IsIdle
// 0x0001 (0x0001 - 0x0000)
struct AppDebugMenu_IsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppDebugMenu_IsIdle) == 0x000001, "Wrong alignment on AppDebugMenu_IsIdle");
static_assert(sizeof(AppDebugMenu_IsIdle) == 0x000001, "Wrong size on AppDebugMenu_IsIdle");
static_assert(offsetof(AppDebugMenu_IsIdle, ReturnValue) == 0x000000, "Member 'AppDebugMenu_IsIdle::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppGameInstance.GetAppGameInstance
// 0x0008 (0x0008 - 0x0000)
struct AppGameInstance_GetAppGameInstance final
{
public:
	class UAppGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppGameInstance_GetAppGameInstance) == 0x000008, "Wrong alignment on AppGameInstance_GetAppGameInstance");
static_assert(sizeof(AppGameInstance_GetAppGameInstance) == 0x000008, "Wrong size on AppGameInstance_GetAppGameInstance");
static_assert(offsetof(AppGameInstance_GetAppGameInstance, ReturnValue) == 0x000000, "Member 'AppGameInstance_GetAppGameInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppGameInstance.GetGameSettings
// 0x0008 (0x0008 - 0x0000)
struct AppGameInstance_GetGameSettings final
{
public:
	class UGameSetting*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppGameInstance_GetGameSettings) == 0x000008, "Wrong alignment on AppGameInstance_GetGameSettings");
static_assert(sizeof(AppGameInstance_GetGameSettings) == 0x000008, "Wrong size on AppGameInstance_GetGameSettings");
static_assert(offsetof(AppGameInstance_GetGameSettings, ReturnValue) == 0x000000, "Member 'AppGameInstance_GetGameSettings::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppGameInstance.GetDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct AppGameInstance_GetDebugMenu final
{
public:
	class UAppDebugMenu*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppGameInstance_GetDebugMenu) == 0x000008, "Wrong alignment on AppGameInstance_GetDebugMenu");
static_assert(sizeof(AppGameInstance_GetDebugMenu) == 0x000008, "Wrong size on AppGameInstance_GetDebugMenu");
static_assert(offsetof(AppGameInstance_GetDebugMenu, ReturnValue) == 0x000000, "Member 'AppGameInstance_GetDebugMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppGameInstance.GetGameWorld
// 0x0008 (0x0008 - 0x0000)
struct AppGameInstance_GetGameWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppGameInstance_GetGameWorld) == 0x000008, "Wrong alignment on AppGameInstance_GetGameWorld");
static_assert(sizeof(AppGameInstance_GetGameWorld) == 0x000008, "Wrong size on AppGameInstance_GetGameWorld");
static_assert(offsetof(AppGameInstance_GetGameWorld, ReturnValue) == 0x000000, "Member 'AppGameInstance_GetGameWorld::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppGameInstance.IsStatedGameInstance
// 0x0001 (0x0001 - 0x0000)
struct AppGameInstance_IsStatedGameInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppGameInstance_IsStatedGameInstance) == 0x000001, "Wrong alignment on AppGameInstance_IsStatedGameInstance");
static_assert(sizeof(AppGameInstance_IsStatedGameInstance) == 0x000001, "Wrong size on AppGameInstance_IsStatedGameInstance");
static_assert(offsetof(AppGameInstance_IsStatedGameInstance, ReturnValue) == 0x000000, "Member 'AppGameInstance_IsStatedGameInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppInputComponent.AddInputEvent
// 0x0030 (0x0030 - 0x0000)
struct AppInputComponent_AddInputEvent final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float DeltaTime, bool bGamePaused, const struct FKeyInput& InKeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Output)> InEvent;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstInterval;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AfterSecondInterval;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppInputComponent_AddInputEvent) == 0x000008, "Wrong alignment on AppInputComponent_AddInputEvent");
static_assert(sizeof(AppInputComponent_AddInputEvent) == 0x000030, "Wrong size on AppInputComponent_AddInputEvent");
static_assert(offsetof(AppInputComponent_AddInputEvent, UniqueId) == 0x000000, "Member 'AppInputComponent_AddInputEvent::UniqueId' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEvent, InEvent) == 0x000010, "Member 'AppInputComponent_AddInputEvent::InEvent' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEvent, InPriority) == 0x000020, "Member 'AppInputComponent_AddInputEvent::InPriority' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEvent, FirstInterval) == 0x000024, "Member 'AppInputComponent_AddInputEvent::FirstInterval' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEvent, AfterSecondInterval) == 0x000028, "Member 'AppInputComponent_AddInputEvent::AfterSecondInterval' has a wrong offset!");

// Function DarwinGame.AppInputComponent.AddInputEventWithInterruptedEvent
// 0x0040 (0x0040 - 0x0000)
struct AppInputComponent_AddInputEventWithInterruptedEvent final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float DeltaTime, bool bGamePaused, const struct FKeyInput& InKeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Output)> InEvent;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InInterruptedEvent;                                // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstInterval;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AfterSecondInterval;                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppInputComponent_AddInputEventWithInterruptedEvent) == 0x000008, "Wrong alignment on AppInputComponent_AddInputEventWithInterruptedEvent");
static_assert(sizeof(AppInputComponent_AddInputEventWithInterruptedEvent) == 0x000040, "Wrong size on AppInputComponent_AddInputEventWithInterruptedEvent");
static_assert(offsetof(AppInputComponent_AddInputEventWithInterruptedEvent, UniqueId) == 0x000000, "Member 'AppInputComponent_AddInputEventWithInterruptedEvent::UniqueId' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEventWithInterruptedEvent, InEvent) == 0x000010, "Member 'AppInputComponent_AddInputEventWithInterruptedEvent::InEvent' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEventWithInterruptedEvent, InInterruptedEvent) == 0x000020, "Member 'AppInputComponent_AddInputEventWithInterruptedEvent::InInterruptedEvent' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEventWithInterruptedEvent, InPriority) == 0x000030, "Member 'AppInputComponent_AddInputEventWithInterruptedEvent::InPriority' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEventWithInterruptedEvent, FirstInterval) == 0x000034, "Member 'AppInputComponent_AddInputEventWithInterruptedEvent::FirstInterval' has a wrong offset!");
static_assert(offsetof(AppInputComponent_AddInputEventWithInterruptedEvent, AfterSecondInterval) == 0x000038, "Member 'AppInputComponent_AddInputEventWithInterruptedEvent::AfterSecondInterval' has a wrong offset!");

// Function DarwinGame.AppInputComponent.RemoveSingleInputEvent
// 0x0010 (0x0010 - 0x0000)
struct AppInputComponent_RemoveSingleInputEvent final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppInputComponent_RemoveSingleInputEvent) == 0x000008, "Wrong alignment on AppInputComponent_RemoveSingleInputEvent");
static_assert(sizeof(AppInputComponent_RemoveSingleInputEvent) == 0x000010, "Wrong size on AppInputComponent_RemoveSingleInputEvent");
static_assert(offsetof(AppInputComponent_RemoveSingleInputEvent, UniqueId) == 0x000000, "Member 'AppInputComponent_RemoveSingleInputEvent::UniqueId' has a wrong offset!");

// Function DarwinGame.AppInputComponent.GetInputPriority_DebugMenu
// 0x0004 (0x0004 - 0x0000)
struct AppInputComponent_GetInputPriority_DebugMenu final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppInputComponent_GetInputPriority_DebugMenu) == 0x000004, "Wrong alignment on AppInputComponent_GetInputPriority_DebugMenu");
static_assert(sizeof(AppInputComponent_GetInputPriority_DebugMenu) == 0x000004, "Wrong size on AppInputComponent_GetInputPriority_DebugMenu");
static_assert(offsetof(AppInputComponent_GetInputPriority_DebugMenu, ReturnValue) == 0x000000, "Member 'AppInputComponent_GetInputPriority_DebugMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppInputComponent.GetInputPriority_EVENT
// 0x0004 (0x0004 - 0x0000)
struct AppInputComponent_GetInputPriority_EVENT final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppInputComponent_GetInputPriority_EVENT) == 0x000004, "Wrong alignment on AppInputComponent_GetInputPriority_EVENT");
static_assert(sizeof(AppInputComponent_GetInputPriority_EVENT) == 0x000004, "Wrong size on AppInputComponent_GetInputPriority_EVENT");
static_assert(offsetof(AppInputComponent_GetInputPriority_EVENT, ReturnValue) == 0x000000, "Member 'AppInputComponent_GetInputPriority_EVENT::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppInputComponent.GetInputPriority_Max
// 0x0004 (0x0004 - 0x0000)
struct AppInputComponent_GetInputPriority_Max final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppInputComponent_GetInputPriority_Max) == 0x000004, "Wrong alignment on AppInputComponent_GetInputPriority_Max");
static_assert(sizeof(AppInputComponent_GetInputPriority_Max) == 0x000004, "Wrong size on AppInputComponent_GetInputPriority_Max");
static_assert(offsetof(AppInputComponent_GetInputPriority_Max, ReturnValue) == 0x000000, "Member 'AppInputComponent_GetInputPriority_Max::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppInputComponent.GetInputPriority_Min
// 0x0004 (0x0004 - 0x0000)
struct AppInputComponent_GetInputPriority_Min final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppInputComponent_GetInputPriority_Min) == 0x000004, "Wrong alignment on AppInputComponent_GetInputPriority_Min");
static_assert(sizeof(AppInputComponent_GetInputPriority_Min) == 0x000004, "Wrong size on AppInputComponent_GetInputPriority_Min");
static_assert(offsetof(AppInputComponent_GetInputPriority_Min, ReturnValue) == 0x000000, "Member 'AppInputComponent_GetInputPriority_Min::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppInputComponent.GetInputPriority_PLAYER
// 0x0004 (0x0004 - 0x0000)
struct AppInputComponent_GetInputPriority_PLAYER final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppInputComponent_GetInputPriority_PLAYER) == 0x000004, "Wrong alignment on AppInputComponent_GetInputPriority_PLAYER");
static_assert(sizeof(AppInputComponent_GetInputPriority_PLAYER) == 0x000004, "Wrong size on AppInputComponent_GetInputPriority_PLAYER");
static_assert(offsetof(AppInputComponent_GetInputPriority_PLAYER, ReturnValue) == 0x000000, "Member 'AppInputComponent_GetInputPriority_PLAYER::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppInputComponent.GetInputPriority_UI
// 0x0004 (0x0004 - 0x0000)
struct AppInputComponent_GetInputPriority_UI final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppInputComponent_GetInputPriority_UI) == 0x000004, "Wrong alignment on AppInputComponent_GetInputPriority_UI");
static_assert(sizeof(AppInputComponent_GetInputPriority_UI) == 0x000004, "Wrong size on AppInputComponent_GetInputPriority_UI");
static_assert(offsetof(AppInputComponent_GetInputPriority_UI, ReturnValue) == 0x000000, "Member 'AppInputComponent_GetInputPriority_UI::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManagerActor.StartDebugEvent
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManagerActor_StartDebugEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManagerActor_StartDebugEvent) == 0x000004, "Wrong alignment on EventSystemManagerActor_StartDebugEvent");
static_assert(sizeof(EventSystemManagerActor_StartDebugEvent) == 0x000008, "Wrong size on EventSystemManagerActor_StartDebugEvent");
static_assert(offsetof(EventSystemManagerActor_StartDebugEvent, EventID) == 0x000000, "Member 'EventSystemManagerActor_StartDebugEvent::EventID' has a wrong offset!");

// Function DarwinGame.EventSystemManagerActor.GetEventExecuter
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManagerActor_GetEventExecuter final
{
public:
	class UEventExecuter*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManagerActor_GetEventExecuter) == 0x000008, "Wrong alignment on EventSystemManagerActor_GetEventExecuter");
static_assert(sizeof(EventSystemManagerActor_GetEventExecuter) == 0x000008, "Wrong size on EventSystemManagerActor_GetEventExecuter");
static_assert(offsetof(EventSystemManagerActor_GetEventExecuter, ReturnValue) == 0x000000, "Member 'EventSystemManagerActor_GetEventExecuter::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManagerActor.GetEventManager
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManagerActor_GetEventManager final
{
public:
	class UEventManager*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManagerActor_GetEventManager) == 0x000008, "Wrong alignment on EventSystemManagerActor_GetEventManager");
static_assert(sizeof(EventSystemManagerActor_GetEventManager) == 0x000008, "Wrong size on EventSystemManagerActor_GetEventManager");
static_assert(offsetof(EventSystemManagerActor_GetEventManager, ReturnValue) == 0x000000, "Member 'EventSystemManagerActor_GetEventManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManagerActor.GetSequencerContorller
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManagerActor_GetSequencerContorller final
{
public:
	class USequencerController*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManagerActor_GetSequencerContorller) == 0x000008, "Wrong alignment on EventSystemManagerActor_GetSequencerContorller");
static_assert(sizeof(EventSystemManagerActor_GetSequencerContorller) == 0x000008, "Wrong size on EventSystemManagerActor_GetSequencerContorller");
static_assert(offsetof(EventSystemManagerActor_GetSequencerContorller, ReturnValue) == 0x000000, "Member 'EventSystemManagerActor_GetSequencerContorller::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppPlayerController.AdjustInputValueWithFPS
// 0x000C (0x000C - 0x0000)
struct AppPlayerController_AdjustInputValueWithFPS final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_AdjustInputValueWithFPS) == 0x000004, "Wrong alignment on AppPlayerController_AdjustInputValueWithFPS");
static_assert(sizeof(AppPlayerController_AdjustInputValueWithFPS) == 0x00000C, "Wrong size on AppPlayerController_AdjustInputValueWithFPS");
static_assert(offsetof(AppPlayerController_AdjustInputValueWithFPS, Value) == 0x000000, "Member 'AppPlayerController_AdjustInputValueWithFPS::Value' has a wrong offset!");
static_assert(offsetof(AppPlayerController_AdjustInputValueWithFPS, DeltaTime) == 0x000004, "Member 'AppPlayerController_AdjustInputValueWithFPS::DeltaTime' has a wrong offset!");
static_assert(offsetof(AppPlayerController_AdjustInputValueWithFPS, ReturnValue) == 0x000008, "Member 'AppPlayerController_AdjustInputValueWithFPS::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppPlayerController.CanOperateCamera
// 0x0001 (0x0001 - 0x0000)
struct AppPlayerController_CanOperateCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_CanOperateCamera) == 0x000001, "Wrong alignment on AppPlayerController_CanOperateCamera");
static_assert(sizeof(AppPlayerController_CanOperateCamera) == 0x000001, "Wrong size on AppPlayerController_CanOperateCamera");
static_assert(offsetof(AppPlayerController_CanOperateCamera, ReturnValue) == 0x000000, "Member 'AppPlayerController_CanOperateCamera::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppPlayerController.GetAppInputComponent
// 0x0008 (0x0008 - 0x0000)
struct AppPlayerController_GetAppInputComponent final
{
public:
	class UAppInputComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_GetAppInputComponent) == 0x000008, "Wrong alignment on AppPlayerController_GetAppInputComponent");
static_assert(sizeof(AppPlayerController_GetAppInputComponent) == 0x000008, "Wrong size on AppPlayerController_GetAppInputComponent");
static_assert(offsetof(AppPlayerController_GetAppInputComponent, ReturnValue) == 0x000000, "Member 'AppPlayerController_GetAppInputComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppPlayerController.SetInputEnable
// 0x0001 (0x0001 - 0x0000)
struct AppPlayerController_SetInputEnable final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_SetInputEnable) == 0x000001, "Wrong alignment on AppPlayerController_SetInputEnable");
static_assert(sizeof(AppPlayerController_SetInputEnable) == 0x000001, "Wrong size on AppPlayerController_SetInputEnable");
static_assert(offsetof(AppPlayerController_SetInputEnable, enable) == 0x000000, "Member 'AppPlayerController_SetInputEnable::enable' has a wrong offset!");

// Function DarwinGame.AppPlayerController.SetKeyRepeatInterval
// 0x0008 (0x0008 - 0x0000)
struct AppPlayerController_SetKeyRepeatInterval final
{
public:
	int32                                         FirstInterval;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interval;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_SetKeyRepeatInterval) == 0x000004, "Wrong alignment on AppPlayerController_SetKeyRepeatInterval");
static_assert(sizeof(AppPlayerController_SetKeyRepeatInterval) == 0x000008, "Wrong size on AppPlayerController_SetKeyRepeatInterval");
static_assert(offsetof(AppPlayerController_SetKeyRepeatInterval, FirstInterval) == 0x000000, "Member 'AppPlayerController_SetKeyRepeatInterval::FirstInterval' has a wrong offset!");
static_assert(offsetof(AppPlayerController_SetKeyRepeatInterval, Interval) == 0x000004, "Member 'AppPlayerController_SetKeyRepeatInterval::Interval' has a wrong offset!");

// Function DarwinGame.AppPlayerController.UpdateKeyState
// 0x0008 (0x0008 - 0x0000)
struct AppPlayerController_UpdateKeyState final
{
public:
	EAxisMappingType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_UpdateKeyState) == 0x000004, "Wrong alignment on AppPlayerController_UpdateKeyState");
static_assert(sizeof(AppPlayerController_UpdateKeyState) == 0x000008, "Wrong size on AppPlayerController_UpdateKeyState");
static_assert(offsetof(AppPlayerController_UpdateKeyState, Type) == 0x000000, "Member 'AppPlayerController_UpdateKeyState::Type' has a wrong offset!");
static_assert(offsetof(AppPlayerController_UpdateKeyState, Value) == 0x000004, "Member 'AppPlayerController_UpdateKeyState::Value' has a wrong offset!");

// Function DarwinGame.AppPlayerController.GetMouseWheelAxis
// 0x0004 (0x0004 - 0x0000)
struct AppPlayerController_GetMouseWheelAxis final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_GetMouseWheelAxis) == 0x000004, "Wrong alignment on AppPlayerController_GetMouseWheelAxis");
static_assert(sizeof(AppPlayerController_GetMouseWheelAxis) == 0x000004, "Wrong size on AppPlayerController_GetMouseWheelAxis");
static_assert(offsetof(AppPlayerController_GetMouseWheelAxis, ReturnValue) == 0x000000, "Member 'AppPlayerController_GetMouseWheelAxis::ReturnValue' has a wrong offset!");

// Function DarwinGame.AppPlayerController.HasAppWindowFocus
// 0x0001 (0x0001 - 0x0000)
struct AppPlayerController_HasAppWindowFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPlayerController_HasAppWindowFocus) == 0x000001, "Wrong alignment on AppPlayerController_HasAppWindowFocus");
static_assert(sizeof(AppPlayerController_HasAppWindowFocus) == 0x000001, "Wrong size on AppPlayerController_HasAppWindowFocus");
static_assert(offsetof(AppPlayerController_HasAppWindowFocus, ReturnValue) == 0x000000, "Member 'AppPlayerController_HasAppWindowFocus::ReturnValue' has a wrong offset!");

// Function DarwinGame.DataTableManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct DataTableManager_GetInstance final
{
public:
	class UDataTableManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableManager_GetInstance) == 0x000008, "Wrong alignment on DataTableManager_GetInstance");
static_assert(sizeof(DataTableManager_GetInstance) == 0x000008, "Wrong size on DataTableManager_GetInstance");
static_assert(offsetof(DataTableManager_GetInstance, ReturnValue) == 0x000000, "Member 'DataTableManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.AreaOfEffectBase.FadeIn
// 0x0008 (0x0008 - 0x0000)
struct AreaOfEffectBase_FadeIn final
{
public:
	float                                         StartDelay;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectBase_FadeIn) == 0x000004, "Wrong alignment on AreaOfEffectBase_FadeIn");
static_assert(sizeof(AreaOfEffectBase_FadeIn) == 0x000008, "Wrong size on AreaOfEffectBase_FadeIn");
static_assert(offsetof(AreaOfEffectBase_FadeIn, StartDelay) == 0x000000, "Member 'AreaOfEffectBase_FadeIn::StartDelay' has a wrong offset!");
static_assert(offsetof(AreaOfEffectBase_FadeIn, Duration) == 0x000004, "Member 'AreaOfEffectBase_FadeIn::Duration' has a wrong offset!");

// Function DarwinGame.AreaOfEffectBase.FadeOut
// 0x0008 (0x0008 - 0x0000)
struct AreaOfEffectBase_FadeOut final
{
public:
	float                                         StartDelay;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectBase_FadeOut) == 0x000004, "Wrong alignment on AreaOfEffectBase_FadeOut");
static_assert(sizeof(AreaOfEffectBase_FadeOut) == 0x000008, "Wrong size on AreaOfEffectBase_FadeOut");
static_assert(offsetof(AreaOfEffectBase_FadeOut, StartDelay) == 0x000000, "Member 'AreaOfEffectBase_FadeOut::StartDelay' has a wrong offset!");
static_assert(offsetof(AreaOfEffectBase_FadeOut, Duration) == 0x000004, "Member 'AreaOfEffectBase_FadeOut::Duration' has a wrong offset!");

// Function DarwinGame.AreaOfEffectBase.SetHeight
// 0x0004 (0x0004 - 0x0000)
struct AreaOfEffectBase_SetHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectBase_SetHeight) == 0x000004, "Wrong alignment on AreaOfEffectBase_SetHeight");
static_assert(sizeof(AreaOfEffectBase_SetHeight) == 0x000004, "Wrong size on AreaOfEffectBase_SetHeight");
static_assert(offsetof(AreaOfEffectBase_SetHeight, Height) == 0x000000, "Member 'AreaOfEffectBase_SetHeight::Height' has a wrong offset!");

// Function DarwinGame.SoundPatternControlComponent.SetPattern
// 0x0001 (0x0001 - 0x0000)
struct SoundPatternControlComponent_SetPattern final
{
public:
	EEnvironmentSoundPatternID                    ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundPatternControlComponent_SetPattern) == 0x000001, "Wrong alignment on SoundPatternControlComponent_SetPattern");
static_assert(sizeof(SoundPatternControlComponent_SetPattern) == 0x000001, "Wrong size on SoundPatternControlComponent_SetPattern");
static_assert(offsetof(SoundPatternControlComponent_SetPattern, ID) == 0x000000, "Member 'SoundPatternControlComponent_SetPattern::ID' has a wrong offset!");

// Function DarwinGame.AreaOfEffectControlComponent.LoadTargetAreaInfo
// 0x0008 (0x0008 - 0x0000)
struct AreaOfEffectControlComponent_LoadTargetAreaInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectControlComponent_LoadTargetAreaInfo) == 0x000004, "Wrong alignment on AreaOfEffectControlComponent_LoadTargetAreaInfo");
static_assert(sizeof(AreaOfEffectControlComponent_LoadTargetAreaInfo) == 0x000008, "Wrong size on AreaOfEffectControlComponent_LoadTargetAreaInfo");
static_assert(offsetof(AreaOfEffectControlComponent_LoadTargetAreaInfo, ID) == 0x000000, "Member 'AreaOfEffectControlComponent_LoadTargetAreaInfo::ID' has a wrong offset!");

// Function DarwinGame.AreaOfEffectDecalComponet.OnFadeComplete
// 0x0001 (0x0001 - 0x0000)
struct AreaOfEffectDecalComponet_OnFadeComplete final
{
public:
	EAoEDecalState                                FadeType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectDecalComponet_OnFadeComplete) == 0x000001, "Wrong alignment on AreaOfEffectDecalComponet_OnFadeComplete");
static_assert(sizeof(AreaOfEffectDecalComponet_OnFadeComplete) == 0x000001, "Wrong size on AreaOfEffectDecalComponet_OnFadeComplete");
static_assert(offsetof(AreaOfEffectDecalComponet_OnFadeComplete, FadeType) == 0x000000, "Member 'AreaOfEffectDecalComponet_OnFadeComplete::FadeType' has a wrong offset!");

// Function DarwinGame.StateComponent.ChangeAbnormalState
// 0x000C (0x000C - 0x0000)
struct StateComponent_ChangeAbnormalState final
{
public:
	struct FGameplayTag                           NextAbnormalStateTag;                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateComponent_ChangeAbnormalState) == 0x000004, "Wrong alignment on StateComponent_ChangeAbnormalState");
static_assert(sizeof(StateComponent_ChangeAbnormalState) == 0x00000C, "Wrong size on StateComponent_ChangeAbnormalState");
static_assert(offsetof(StateComponent_ChangeAbnormalState, NextAbnormalStateTag) == 0x000000, "Member 'StateComponent_ChangeAbnormalState::NextAbnormalStateTag' has a wrong offset!");
static_assert(offsetof(StateComponent_ChangeAbnormalState, End) == 0x000008, "Member 'StateComponent_ChangeAbnormalState::End' has a wrong offset!");

// Function DarwinGame.StateComponent.ChangeActionState
// 0x0008 (0x0008 - 0x0000)
struct StateComponent_ChangeActionState final
{
public:
	struct FGameplayTag                           NextActionStateTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_ChangeActionState) == 0x000004, "Wrong alignment on StateComponent_ChangeActionState");
static_assert(sizeof(StateComponent_ChangeActionState) == 0x000008, "Wrong size on StateComponent_ChangeActionState");
static_assert(offsetof(StateComponent_ChangeActionState, NextActionStateTag) == 0x000000, "Member 'StateComponent_ChangeActionState::NextActionStateTag' has a wrong offset!");

// Function DarwinGame.StateComponent.ChangeActionStateWithResult
// 0x0038 (0x0038 - 0x0000)
struct StateComponent_ChangeActionStateWithResult final
{
public:
	struct FGameplayTag                           NextActionStateTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionResult                          ActionResult;                                      // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_ChangeActionStateWithResult) == 0x000004, "Wrong alignment on StateComponent_ChangeActionStateWithResult");
static_assert(sizeof(StateComponent_ChangeActionStateWithResult) == 0x000038, "Wrong size on StateComponent_ChangeActionStateWithResult");
static_assert(offsetof(StateComponent_ChangeActionStateWithResult, NextActionStateTag) == 0x000000, "Member 'StateComponent_ChangeActionStateWithResult::NextActionStateTag' has a wrong offset!");
static_assert(offsetof(StateComponent_ChangeActionStateWithResult, ActionResult) == 0x000008, "Member 'StateComponent_ChangeActionStateWithResult::ActionResult' has a wrong offset!");

// Function DarwinGame.StateComponent.ChangeEventState
// 0x0008 (0x0008 - 0x0000)
struct StateComponent_ChangeEventState final
{
public:
	struct FGameplayTag                           NextEventStateTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_ChangeEventState) == 0x000004, "Wrong alignment on StateComponent_ChangeEventState");
static_assert(sizeof(StateComponent_ChangeEventState) == 0x000008, "Wrong size on StateComponent_ChangeEventState");
static_assert(offsetof(StateComponent_ChangeEventState, NextEventStateTag) == 0x000000, "Member 'StateComponent_ChangeEventState::NextEventStateTag' has a wrong offset!");

// Function DarwinGame.StateComponent.ChangeMoveState
// 0x0008 (0x0008 - 0x0000)
struct StateComponent_ChangeMoveState final
{
public:
	struct FGameplayTag                           NextMoveStateTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_ChangeMoveState) == 0x000004, "Wrong alignment on StateComponent_ChangeMoveState");
static_assert(sizeof(StateComponent_ChangeMoveState) == 0x000008, "Wrong size on StateComponent_ChangeMoveState");
static_assert(offsetof(StateComponent_ChangeMoveState, NextMoveStateTag) == 0x000000, "Member 'StateComponent_ChangeMoveState::NextMoveStateTag' has a wrong offset!");

// Function DarwinGame.StateComponent.Initialize
// 0x0008 (0x0008 - 0x0000)
struct StateComponent_Initialize final
{
public:
	class FName                                   OriginKindID;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_Initialize) == 0x000004, "Wrong alignment on StateComponent_Initialize");
static_assert(sizeof(StateComponent_Initialize) == 0x000008, "Wrong size on StateComponent_Initialize");
static_assert(offsetof(StateComponent_Initialize, OriginKindID) == 0x000000, "Member 'StateComponent_Initialize::OriginKindID' has a wrong offset!");

// Function DarwinGame.StateComponent.Move
// 0x000C (0x000C - 0x0000)
struct StateComponent_Move final
{
public:
	struct FVector                                Input;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_Move) == 0x000004, "Wrong alignment on StateComponent_Move");
static_assert(sizeof(StateComponent_Move) == 0x00000C, "Wrong size on StateComponent_Move");
static_assert(offsetof(StateComponent_Move, Input) == 0x000000, "Member 'StateComponent_Move::Input' has a wrong offset!");

// Function DarwinGame.StateComponent.SetEnableInput
// 0x0001 (0x0001 - 0x0000)
struct StateComponent_SetEnableInput final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_SetEnableInput) == 0x000001, "Wrong alignment on StateComponent_SetEnableInput");
static_assert(sizeof(StateComponent_SetEnableInput) == 0x000001, "Wrong size on StateComponent_SetEnableInput");
static_assert(offsetof(StateComponent_SetEnableInput, Enabled) == 0x000000, "Member 'StateComponent_SetEnableInput::Enabled' has a wrong offset!");

// Function DarwinGame.StateComponent.TakeAction
// 0x000C (0x000C - 0x0000)
struct StateComponent_TakeAction final
{
public:
	struct FGameplayTag                           ActionTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelease;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateComponent_TakeAction) == 0x000004, "Wrong alignment on StateComponent_TakeAction");
static_assert(sizeof(StateComponent_TakeAction) == 0x00000C, "Wrong size on StateComponent_TakeAction");
static_assert(offsetof(StateComponent_TakeAction, ActionTag) == 0x000000, "Member 'StateComponent_TakeAction::ActionTag' has a wrong offset!");
static_assert(offsetof(StateComponent_TakeAction, bRelease) == 0x000008, "Member 'StateComponent_TakeAction::bRelease' has a wrong offset!");

// Function DarwinGame.StateComponent.GetActionStateList
// 0x0050 (0x0050 - 0x0000)
struct StateComponent_GetActionStateList final
{
public:
	TMap<struct FGameplayTag, class UActionStateBase*> ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_GetActionStateList) == 0x000008, "Wrong alignment on StateComponent_GetActionStateList");
static_assert(sizeof(StateComponent_GetActionStateList) == 0x000050, "Wrong size on StateComponent_GetActionStateList");
static_assert(offsetof(StateComponent_GetActionStateList, ReturnValue) == 0x000000, "Member 'StateComponent_GetActionStateList::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateComponent.GetCurrentActionState
// 0x0008 (0x0008 - 0x0000)
struct StateComponent_GetCurrentActionState final
{
public:
	class UActionStateBase*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_GetCurrentActionState) == 0x000008, "Wrong alignment on StateComponent_GetCurrentActionState");
static_assert(sizeof(StateComponent_GetCurrentActionState) == 0x000008, "Wrong size on StateComponent_GetCurrentActionState");
static_assert(offsetof(StateComponent_GetCurrentActionState, ReturnValue) == 0x000000, "Member 'StateComponent_GetCurrentActionState::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateComponent.GetCurrentState
// 0x0008 (0x0008 - 0x0000)
struct StateComponent_GetCurrentState final
{
public:
	class UStateBase*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_GetCurrentState) == 0x000008, "Wrong alignment on StateComponent_GetCurrentState");
static_assert(sizeof(StateComponent_GetCurrentState) == 0x000008, "Wrong size on StateComponent_GetCurrentState");
static_assert(offsetof(StateComponent_GetCurrentState, ReturnValue) == 0x000000, "Member 'StateComponent_GetCurrentState::ReturnValue' has a wrong offset!");

// Function DarwinGame.StateComponent.GetMoveStateList
// 0x0050 (0x0050 - 0x0000)
struct StateComponent_GetMoveStateList final
{
public:
	TMap<struct FGameplayTag, class UStateBase*>  ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateComponent_GetMoveStateList) == 0x000008, "Wrong alignment on StateComponent_GetMoveStateList");
static_assert(sizeof(StateComponent_GetMoveStateList) == 0x000050, "Wrong size on StateComponent_GetMoveStateList");
static_assert(offsetof(StateComponent_GetMoveStateList, ReturnValue) == 0x000000, "Member 'StateComponent_GetMoveStateList::ReturnValue' has a wrong offset!");

// Function DarwinGame.AreaOfEffectManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct AreaOfEffectManager_GetInstance final
{
public:
	class UAreaOfEffectManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectManager_GetInstance) == 0x000008, "Wrong alignment on AreaOfEffectManager_GetInstance");
static_assert(sizeof(AreaOfEffectManager_GetInstance) == 0x000008, "Wrong size on AreaOfEffectManager_GetInstance");
static_assert(offsetof(AreaOfEffectManager_GetInstance, ReturnValue) == 0x000000, "Member 'AreaOfEffectManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.AreaOfEffectManager.LoadSectorAoEMaterial
// 0x0010 (0x0010 - 0x0000)
struct AreaOfEffectManager_LoadSectorAoEMaterial final
{
public:
	ESectorAoEAngle                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectManager_LoadSectorAoEMaterial) == 0x000008, "Wrong alignment on AreaOfEffectManager_LoadSectorAoEMaterial");
static_assert(sizeof(AreaOfEffectManager_LoadSectorAoEMaterial) == 0x000010, "Wrong size on AreaOfEffectManager_LoadSectorAoEMaterial");
static_assert(offsetof(AreaOfEffectManager_LoadSectorAoEMaterial, Type) == 0x000000, "Member 'AreaOfEffectManager_LoadSectorAoEMaterial::Type' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_LoadSectorAoEMaterial, ReturnValue) == 0x000008, "Member 'AreaOfEffectManager_LoadSectorAoEMaterial::ReturnValue' has a wrong offset!");

// Function DarwinGame.AreaOfEffectManager.SpawnRectangleAreaOfEffect
// 0x0038 (0x0038 - 0x0000)
struct AreaOfEffectManager_SpawnRectangleAreaOfEffect final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalHeight;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLoc;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRot;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARectangleAreaOfEffect*                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectManager_SpawnRectangleAreaOfEffect) == 0x000008, "Wrong alignment on AreaOfEffectManager_SpawnRectangleAreaOfEffect");
static_assert(sizeof(AreaOfEffectManager_SpawnRectangleAreaOfEffect) == 0x000038, "Wrong size on AreaOfEffectManager_SpawnRectangleAreaOfEffect");
static_assert(offsetof(AreaOfEffectManager_SpawnRectangleAreaOfEffect, Size) == 0x000000, "Member 'AreaOfEffectManager_SpawnRectangleAreaOfEffect::Size' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnRectangleAreaOfEffect, DecalHeight) == 0x000008, "Member 'AreaOfEffectManager_SpawnRectangleAreaOfEffect::DecalHeight' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnRectangleAreaOfEffect, WorldLoc) == 0x00000C, "Member 'AreaOfEffectManager_SpawnRectangleAreaOfEffect::WorldLoc' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnRectangleAreaOfEffect, WorldRot) == 0x000018, "Member 'AreaOfEffectManager_SpawnRectangleAreaOfEffect::WorldRot' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnRectangleAreaOfEffect, WorldScale) == 0x000024, "Member 'AreaOfEffectManager_SpawnRectangleAreaOfEffect::WorldScale' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnRectangleAreaOfEffect, ReturnValue) == 0x000030, "Member 'AreaOfEffectManager_SpawnRectangleAreaOfEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.AreaOfEffectManager.SpawnSectorAreaOfEffect
// 0x0038 (0x0038 - 0x0000)
struct AreaOfEffectManager_SpawnSectorAreaOfEffect final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalHeight;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESectorAoEAngle                               AngleType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLoc;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRot;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASectorAreaOfEffect*                    ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaOfEffectManager_SpawnSectorAreaOfEffect) == 0x000008, "Wrong alignment on AreaOfEffectManager_SpawnSectorAreaOfEffect");
static_assert(sizeof(AreaOfEffectManager_SpawnSectorAreaOfEffect) == 0x000038, "Wrong size on AreaOfEffectManager_SpawnSectorAreaOfEffect");
static_assert(offsetof(AreaOfEffectManager_SpawnSectorAreaOfEffect, Radius) == 0x000000, "Member 'AreaOfEffectManager_SpawnSectorAreaOfEffect::Radius' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnSectorAreaOfEffect, DecalHeight) == 0x000004, "Member 'AreaOfEffectManager_SpawnSectorAreaOfEffect::DecalHeight' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnSectorAreaOfEffect, AngleType) == 0x000008, "Member 'AreaOfEffectManager_SpawnSectorAreaOfEffect::AngleType' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnSectorAreaOfEffect, WorldLoc) == 0x00000C, "Member 'AreaOfEffectManager_SpawnSectorAreaOfEffect::WorldLoc' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnSectorAreaOfEffect, WorldRot) == 0x000018, "Member 'AreaOfEffectManager_SpawnSectorAreaOfEffect::WorldRot' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnSectorAreaOfEffect, WorldScale) == 0x000024, "Member 'AreaOfEffectManager_SpawnSectorAreaOfEffect::WorldScale' has a wrong offset!");
static_assert(offsetof(AreaOfEffectManager_SpawnSectorAreaOfEffect, ReturnValue) == 0x000030, "Member 'AreaOfEffectManager_SpawnSectorAreaOfEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.ETextDataType_Fukidasi
// 0x0008 (0x0008 - 0x0000)
struct TextManager_ETextDataType_Fukidasi final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_ETextDataType_Fukidasi) == 0x000004, "Wrong alignment on TextManager_ETextDataType_Fukidasi");
static_assert(sizeof(TextManager_ETextDataType_Fukidasi) == 0x000008, "Wrong size on TextManager_ETextDataType_Fukidasi");
static_assert(offsetof(TextManager_ETextDataType_Fukidasi, ReturnValue) == 0x000000, "Member 'TextManager_ETextDataType_Fukidasi::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.ETextDataType_None
// 0x0008 (0x0008 - 0x0000)
struct TextManager_ETextDataType_None final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_ETextDataType_None) == 0x000004, "Wrong alignment on TextManager_ETextDataType_None");
static_assert(sizeof(TextManager_ETextDataType_None) == 0x000008, "Wrong size on TextManager_ETextDataType_None");
static_assert(offsetof(TextManager_ETextDataType_None, ReturnValue) == 0x000000, "Member 'TextManager_ETextDataType_None::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.ETextDataType_Reference
// 0x0008 (0x0008 - 0x0000)
struct TextManager_ETextDataType_Reference final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_ETextDataType_Reference) == 0x000004, "Wrong alignment on TextManager_ETextDataType_Reference");
static_assert(sizeof(TextManager_ETextDataType_Reference) == 0x000008, "Wrong size on TextManager_ETextDataType_Reference");
static_assert(offsetof(TextManager_ETextDataType_Reference, ReturnValue) == 0x000000, "Member 'TextManager_ETextDataType_Reference::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.ETextDataType_Serifu
// 0x0008 (0x0008 - 0x0000)
struct TextManager_ETextDataType_Serifu final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_ETextDataType_Serifu) == 0x000004, "Wrong alignment on TextManager_ETextDataType_Serifu");
static_assert(sizeof(TextManager_ETextDataType_Serifu) == 0x000008, "Wrong size on TextManager_ETextDataType_Serifu");
static_assert(offsetof(TextManager_ETextDataType_Serifu, ReturnValue) == 0x000000, "Member 'TextManager_ETextDataType_Serifu::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.ETextDataType_SystemMessage
// 0x0008 (0x0008 - 0x0000)
struct TextManager_ETextDataType_SystemMessage final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_ETextDataType_SystemMessage) == 0x000004, "Wrong alignment on TextManager_ETextDataType_SystemMessage");
static_assert(sizeof(TextManager_ETextDataType_SystemMessage) == 0x000008, "Wrong size on TextManager_ETextDataType_SystemMessage");
static_assert(offsetof(TextManager_ETextDataType_SystemMessage, ReturnValue) == 0x000000, "Member 'TextManager_ETextDataType_SystemMessage::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct TextManager_GetInstance final
{
public:
	class UTextManager*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetInstance) == 0x000008, "Wrong alignment on TextManager_GetInstance");
static_assert(sizeof(TextManager_GetInstance) == 0x000008, "Wrong size on TextManager_GetInstance");
static_assert(offsetof(TextManager_GetInstance, ReturnValue) == 0x000000, "Member 'TextManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.getNPCList
// 0x0008 (0x0008 - 0x0000)
struct TextManager_getNPCList final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_getNPCList) == 0x000008, "Wrong alignment on TextManager_getNPCList");
static_assert(sizeof(TextManager_getNPCList) == 0x000008, "Wrong size on TextManager_getNPCList");
static_assert(offsetof(TextManager_getNPCList, ReturnValue) == 0x000000, "Member 'TextManager_getNPCList::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.SetLanguageSetting
// 0x0001 (0x0001 - 0x0000)
struct TextManager_SetLanguageSetting final
{
public:
	ETextLanguage                                 newSetting;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_SetLanguageSetting) == 0x000001, "Wrong alignment on TextManager_SetLanguageSetting");
static_assert(sizeof(TextManager_SetLanguageSetting) == 0x000001, "Wrong size on TextManager_SetLanguageSetting");
static_assert(offsetof(TextManager_SetLanguageSetting, newSetting) == 0x000000, "Member 'TextManager_SetLanguageSetting::newSetting' has a wrong offset!");

// Function DarwinGame.TextManager.GetColorTagTable
// 0x0008 (0x0008 - 0x0000)
struct TextManager_GetColorTagTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetColorTagTable) == 0x000008, "Wrong alignment on TextManager_GetColorTagTable");
static_assert(sizeof(TextManager_GetColorTagTable) == 0x000008, "Wrong size on TextManager_GetColorTagTable");
static_assert(offsetof(TextManager_GetColorTagTable, ReturnValue) == 0x000000, "Member 'TextManager_GetColorTagTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetEventPairReplaceText
// 0x0008 (0x0008 - 0x0000)
struct TextManager_GetEventPairReplaceText final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetEventPairReplaceText) == 0x000008, "Wrong alignment on TextManager_GetEventPairReplaceText");
static_assert(sizeof(TextManager_GetEventPairReplaceText) == 0x000008, "Wrong size on TextManager_GetEventPairReplaceText");
static_assert(offsetof(TextManager_GetEventPairReplaceText, ReturnValue) == 0x000000, "Member 'TextManager_GetEventPairReplaceText::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetEventReplaceText
// 0x0008 (0x0008 - 0x0000)
struct TextManager_GetEventReplaceText final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetEventReplaceText) == 0x000008, "Wrong alignment on TextManager_GetEventReplaceText");
static_assert(sizeof(TextManager_GetEventReplaceText) == 0x000008, "Wrong size on TextManager_GetEventReplaceText");
static_assert(offsetof(TextManager_GetEventReplaceText, ReturnValue) == 0x000000, "Member 'TextManager_GetEventReplaceText::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetFriendAppearanceID
// 0x0010 (0x0010 - 0x0000)
struct TextManager_GetFriendAppearanceID final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetFriendAppearanceID) == 0x000004, "Wrong alignment on TextManager_GetFriendAppearanceID");
static_assert(sizeof(TextManager_GetFriendAppearanceID) == 0x000010, "Wrong size on TextManager_GetFriendAppearanceID");
static_assert(offsetof(TextManager_GetFriendAppearanceID, NpcID) == 0x000000, "Member 'TextManager_GetFriendAppearanceID::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetFriendAppearanceID, ReturnValue) == 0x000008, "Member 'TextManager_GetFriendAppearanceID::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetLanguageSetting
// 0x0001 (0x0001 - 0x0000)
struct TextManager_GetLanguageSetting final
{
public:
	ETextLanguage                                 ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetLanguageSetting) == 0x000001, "Wrong alignment on TextManager_GetLanguageSetting");
static_assert(sizeof(TextManager_GetLanguageSetting) == 0x000001, "Wrong size on TextManager_GetLanguageSetting");
static_assert(offsetof(TextManager_GetLanguageSetting, ReturnValue) == 0x000000, "Member 'TextManager_GetLanguageSetting::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetNpcAppearanceID
// 0x0010 (0x0010 - 0x0000)
struct TextManager_GetNpcAppearanceID final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetNpcAppearanceID) == 0x000004, "Wrong alignment on TextManager_GetNpcAppearanceID");
static_assert(sizeof(TextManager_GetNpcAppearanceID) == 0x000010, "Wrong size on TextManager_GetNpcAppearanceID");
static_assert(offsetof(TextManager_GetNpcAppearanceID, NpcID) == 0x000000, "Member 'TextManager_GetNpcAppearanceID::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcAppearanceID, ReturnValue) == 0x000008, "Member 'TextManager_GetNpcAppearanceID::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetNpcDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TextManager_GetNpcDisplayName final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetNpcDisplayName) == 0x000008, "Wrong alignment on TextManager_GetNpcDisplayName");
static_assert(sizeof(TextManager_GetNpcDisplayName) == 0x000018, "Wrong size on TextManager_GetNpcDisplayName");
static_assert(offsetof(TextManager_GetNpcDisplayName, NpcID) == 0x000000, "Member 'TextManager_GetNpcDisplayName::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcDisplayName, ReturnValue) == 0x000008, "Member 'TextManager_GetNpcDisplayName::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetNpcDisplayNameAndCheck
// 0x0020 (0x0020 - 0x0000)
struct TextManager_GetNpcDisplayNameAndCheck final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextManager_GetNpcDisplayNameAndCheck) == 0x000008, "Wrong alignment on TextManager_GetNpcDisplayNameAndCheck");
static_assert(sizeof(TextManager_GetNpcDisplayNameAndCheck) == 0x000020, "Wrong size on TextManager_GetNpcDisplayNameAndCheck");
static_assert(offsetof(TextManager_GetNpcDisplayNameAndCheck, NpcID) == 0x000000, "Member 'TextManager_GetNpcDisplayNameAndCheck::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcDisplayNameAndCheck, DisplayName) == 0x000008, "Member 'TextManager_GetNpcDisplayNameAndCheck::DisplayName' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcDisplayNameAndCheck, ReturnValue) == 0x000018, "Member 'TextManager_GetNpcDisplayNameAndCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetNpcInfo
// 0x0090 (0x0090 - 0x0000)
struct TextManager_GetNpcInfo final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNPCInfoData                           NpcInfo;                                           // 0x0008(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextManager_GetNpcInfo) == 0x000008, "Wrong alignment on TextManager_GetNpcInfo");
static_assert(sizeof(TextManager_GetNpcInfo) == 0x000090, "Wrong size on TextManager_GetNpcInfo");
static_assert(offsetof(TextManager_GetNpcInfo, NpcID) == 0x000000, "Member 'TextManager_GetNpcInfo::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcInfo, NpcInfo) == 0x000008, "Member 'TextManager_GetNpcInfo::NpcInfo' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcInfo, ReturnValue) == 0x000088, "Member 'TextManager_GetNpcInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetNpcNickName
// 0x0028 (0x0028 - 0x0000)
struct TextManager_GetNpcNickName final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NickName1;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NickName2;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetNpcNickName) == 0x000008, "Wrong alignment on TextManager_GetNpcNickName");
static_assert(sizeof(TextManager_GetNpcNickName) == 0x000028, "Wrong size on TextManager_GetNpcNickName");
static_assert(offsetof(TextManager_GetNpcNickName, NpcID) == 0x000000, "Member 'TextManager_GetNpcNickName::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcNickName, NickName1) == 0x000008, "Member 'TextManager_GetNpcNickName::NickName1' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcNickName, NickName2) == 0x000018, "Member 'TextManager_GetNpcNickName::NickName2' has a wrong offset!");

// Function DarwinGame.TextManager.GetNpcPartTalkerType
// 0x000C (0x000C - 0x0000)
struct TextManager_GetNpcPartTalkerType final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetNpcPartTalkerType) == 0x000004, "Wrong alignment on TextManager_GetNpcPartTalkerType");
static_assert(sizeof(TextManager_GetNpcPartTalkerType) == 0x00000C, "Wrong size on TextManager_GetNpcPartTalkerType");
static_assert(offsetof(TextManager_GetNpcPartTalkerType, NpcID) == 0x000000, "Member 'TextManager_GetNpcPartTalkerType::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcPartTalkerType, ReturnValue) == 0x000008, "Member 'TextManager_GetNpcPartTalkerType::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetNpcSeType
// 0x000C (0x000C - 0x0000)
struct TextManager_GetNpcSeType final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENpcSeType                                    ReturnValue;                                       // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextManager_GetNpcSeType) == 0x000004, "Wrong alignment on TextManager_GetNpcSeType");
static_assert(sizeof(TextManager_GetNpcSeType) == 0x00000C, "Wrong size on TextManager_GetNpcSeType");
static_assert(offsetof(TextManager_GetNpcSeType, NpcID) == 0x000000, "Member 'TextManager_GetNpcSeType::NpcID' has a wrong offset!");
static_assert(offsetof(TextManager_GetNpcSeType, ReturnValue) == 0x000008, "Member 'TextManager_GetNpcSeType::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetStampTagTable
// 0x0008 (0x0008 - 0x0000)
struct TextManager_GetStampTagTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetStampTagTable) == 0x000008, "Wrong alignment on TextManager_GetStampTagTable");
static_assert(sizeof(TextManager_GetStampTagTable) == 0x000008, "Wrong size on TextManager_GetStampTagTable");
static_assert(offsetof(TextManager_GetStampTagTable, ReturnValue) == 0x000000, "Member 'TextManager_GetStampTagTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetTextByTableName
// 0x0028 (0x0028 - 0x0000)
struct TextManager_GetTextByTableName final
{
public:
	class FString                                 TableName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetTextByTableName) == 0x000008, "Wrong alignment on TextManager_GetTextByTableName");
static_assert(sizeof(TextManager_GetTextByTableName) == 0x000028, "Wrong size on TextManager_GetTextByTableName");
static_assert(offsetof(TextManager_GetTextByTableName, TableName) == 0x000000, "Member 'TextManager_GetTextByTableName::TableName' has a wrong offset!");
static_assert(offsetof(TextManager_GetTextByTableName, TextID) == 0x000010, "Member 'TextManager_GetTextByTableName::TextID' has a wrong offset!");
static_assert(offsetof(TextManager_GetTextByTableName, ReturnValue) == 0x000018, "Member 'TextManager_GetTextByTableName::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetTextCS
// 0x0018 (0x0018 - 0x0000)
struct TextManager_GetTextCS final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetTextCS) == 0x000008, "Wrong alignment on TextManager_GetTextCS");
static_assert(sizeof(TextManager_GetTextCS) == 0x000018, "Wrong size on TextManager_GetTextCS");
static_assert(offsetof(TextManager_GetTextCS, TextID) == 0x000000, "Member 'TextManager_GetTextCS::TextID' has a wrong offset!");
static_assert(offsetof(TextManager_GetTextCS, ReturnValue) == 0x000008, "Member 'TextManager_GetTextCS::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetTextFukidasi
// 0x0018 (0x0018 - 0x0000)
struct TextManager_GetTextFukidasi final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetTextFukidasi) == 0x000008, "Wrong alignment on TextManager_GetTextFukidasi");
static_assert(sizeof(TextManager_GetTextFukidasi) == 0x000018, "Wrong size on TextManager_GetTextFukidasi");
static_assert(offsetof(TextManager_GetTextFukidasi, TextID) == 0x000000, "Member 'TextManager_GetTextFukidasi::TextID' has a wrong offset!");
static_assert(offsetof(TextManager_GetTextFukidasi, ReturnValue) == 0x000008, "Member 'TextManager_GetTextFukidasi::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetTextIE
// 0x0018 (0x0018 - 0x0000)
struct TextManager_GetTextIE final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetTextIE) == 0x000008, "Wrong alignment on TextManager_GetTextIE");
static_assert(sizeof(TextManager_GetTextIE) == 0x000018, "Wrong size on TextManager_GetTextIE");
static_assert(offsetof(TextManager_GetTextIE, TextID) == 0x000000, "Member 'TextManager_GetTextIE::TextID' has a wrong offset!");
static_assert(offsetof(TextManager_GetTextIE, ReturnValue) == 0x000008, "Member 'TextManager_GetTextIE::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetTextInfo
// 0x0058 (0x0058 - 0x0000)
struct TextManager_GetTextInfo final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTextInfoWorkData                      ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetTextInfo) == 0x000008, "Wrong alignment on TextManager_GetTextInfo");
static_assert(sizeof(TextManager_GetTextInfo) == 0x000058, "Wrong size on TextManager_GetTextInfo");
static_assert(offsetof(TextManager_GetTextInfo, TextID) == 0x000000, "Member 'TextManager_GetTextInfo::TextID' has a wrong offset!");
static_assert(offsetof(TextManager_GetTextInfo, ReturnValue) == 0x000008, "Member 'TextManager_GetTextInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.GetTextSIE
// 0x0018 (0x0018 - 0x0000)
struct TextManager_GetTextSIE final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextManager_GetTextSIE) == 0x000008, "Wrong alignment on TextManager_GetTextSIE");
static_assert(sizeof(TextManager_GetTextSIE) == 0x000018, "Wrong size on TextManager_GetTextSIE");
static_assert(offsetof(TextManager_GetTextSIE, TextID) == 0x000000, "Member 'TextManager_GetTextSIE::TextID' has a wrong offset!");
static_assert(offsetof(TextManager_GetTextSIE, ReturnValue) == 0x000008, "Member 'TextManager_GetTextSIE::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextManager.IsTextInfo
// 0x000C (0x000C - 0x0000)
struct TextManager_IsTextInfo final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextManager_IsTextInfo) == 0x000004, "Wrong alignment on TextManager_IsTextInfo");
static_assert(sizeof(TextManager_IsTextInfo) == 0x00000C, "Wrong size on TextManager_IsTextInfo");
static_assert(offsetof(TextManager_IsTextInfo, TextID) == 0x000000, "Member 'TextManager_IsTextInfo::TextID' has a wrong offset!");
static_assert(offsetof(TextManager_IsTextInfo, ReturnValue) == 0x000008, "Member 'TextManager_IsTextInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterEcologicalAI.CalcWaitActionSecond
// 0x0010 (0x0010 - 0x0000)
struct MonsterEcologicalAI_CalcWaitActionSecond final
{
public:
	class AMonster*                               Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterEcologicalAI_CalcWaitActionSecond) == 0x000008, "Wrong alignment on MonsterEcologicalAI_CalcWaitActionSecond");
static_assert(sizeof(MonsterEcologicalAI_CalcWaitActionSecond) == 0x000010, "Wrong size on MonsterEcologicalAI_CalcWaitActionSecond");
static_assert(offsetof(MonsterEcologicalAI_CalcWaitActionSecond, Monster) == 0x000000, "Member 'MonsterEcologicalAI_CalcWaitActionSecond::Monster' has a wrong offset!");
static_assert(offsetof(MonsterEcologicalAI_CalcWaitActionSecond, ReturnValue) == 0x000008, "Member 'MonsterEcologicalAI_CalcWaitActionSecond::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterEcologicalAI.PopRunningEcologyMontageID
// 0x0008 (0x0008 - 0x0000)
struct MonsterEcologicalAI_PopRunningEcologyMontageID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterEcologicalAI_PopRunningEcologyMontageID) == 0x000004, "Wrong alignment on MonsterEcologicalAI_PopRunningEcologyMontageID");
static_assert(sizeof(MonsterEcologicalAI_PopRunningEcologyMontageID) == 0x000008, "Wrong size on MonsterEcologicalAI_PopRunningEcologyMontageID");
static_assert(offsetof(MonsterEcologicalAI_PopRunningEcologyMontageID, ReturnValue) == 0x000000, "Member 'MonsterEcologicalAI_PopRunningEcologyMontageID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterEcologicalAI.PushRunningEcologyMontageID
// 0x0008 (0x0008 - 0x0000)
struct MonsterEcologicalAI_PushRunningEcologyMontageID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterEcologicalAI_PushRunningEcologyMontageID) == 0x000004, "Wrong alignment on MonsterEcologicalAI_PushRunningEcologyMontageID");
static_assert(sizeof(MonsterEcologicalAI_PushRunningEcologyMontageID) == 0x000008, "Wrong size on MonsterEcologicalAI_PushRunningEcologyMontageID");
static_assert(offsetof(MonsterEcologicalAI_PushRunningEcologyMontageID, ID) == 0x000000, "Member 'MonsterEcologicalAI_PushRunningEcologyMontageID::ID' has a wrong offset!");

// Function DarwinGame.MonsterEcologicalAI.SetRunningEcologyMontageID
// 0x0008 (0x0008 - 0x0000)
struct MonsterEcologicalAI_SetRunningEcologyMontageID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterEcologicalAI_SetRunningEcologyMontageID) == 0x000004, "Wrong alignment on MonsterEcologicalAI_SetRunningEcologyMontageID");
static_assert(sizeof(MonsterEcologicalAI_SetRunningEcologyMontageID) == 0x000008, "Wrong size on MonsterEcologicalAI_SetRunningEcologyMontageID");
static_assert(offsetof(MonsterEcologicalAI_SetRunningEcologyMontageID, ID) == 0x000000, "Member 'MonsterEcologicalAI_SetRunningEcologyMontageID::ID' has a wrong offset!");

// Function DarwinGame.MonsterEcologicalAI.GetRunningEcologyMontageID
// 0x0008 (0x0008 - 0x0000)
struct MonsterEcologicalAI_GetRunningEcologyMontageID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterEcologicalAI_GetRunningEcologyMontageID) == 0x000004, "Wrong alignment on MonsterEcologicalAI_GetRunningEcologyMontageID");
static_assert(sizeof(MonsterEcologicalAI_GetRunningEcologyMontageID) == 0x000008, "Wrong size on MonsterEcologicalAI_GetRunningEcologyMontageID");
static_assert(offsetof(MonsterEcologicalAI_GetRunningEcologyMontageID, ReturnValue) == 0x000000, "Member 'MonsterEcologicalAI_GetRunningEcologyMontageID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterEcologicalAI.IsRunningEcologyMontage
// 0x0001 (0x0001 - 0x0000)
struct MonsterEcologicalAI_IsRunningEcologyMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterEcologicalAI_IsRunningEcologyMontage) == 0x000001, "Wrong alignment on MonsterEcologicalAI_IsRunningEcologyMontage");
static_assert(sizeof(MonsterEcologicalAI_IsRunningEcologyMontage) == 0x000001, "Wrong size on MonsterEcologicalAI_IsRunningEcologyMontage");
static_assert(offsetof(MonsterEcologicalAI_IsRunningEcologyMontage, ReturnValue) == 0x000000, "Member 'MonsterEcologicalAI_IsRunningEcologyMontage::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorFix.SetSpawnBox
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorFix_SetSpawnBox final
{
public:
	class UBoxComponent*                          Box;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorFix_SetSpawnBox) == 0x000008, "Wrong alignment on EnemySpawnGeneratorFix_SetSpawnBox");
static_assert(sizeof(EnemySpawnGeneratorFix_SetSpawnBox) == 0x000008, "Wrong size on EnemySpawnGeneratorFix_SetSpawnBox");
static_assert(offsetof(EnemySpawnGeneratorFix_SetSpawnBox, Box) == 0x000000, "Member 'EnemySpawnGeneratorFix_SetSpawnBox::Box' has a wrong offset!");

// Function DarwinGame.ArtifactFunctionLibrary.GetCarryingArtifactsNum
// 0x0004 (0x0004 - 0x0000)
struct ArtifactFunctionLibrary_GetCarryingArtifactsNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArtifactFunctionLibrary_GetCarryingArtifactsNum) == 0x000004, "Wrong alignment on ArtifactFunctionLibrary_GetCarryingArtifactsNum");
static_assert(sizeof(ArtifactFunctionLibrary_GetCarryingArtifactsNum) == 0x000004, "Wrong size on ArtifactFunctionLibrary_GetCarryingArtifactsNum");
static_assert(offsetof(ArtifactFunctionLibrary_GetCarryingArtifactsNum, ReturnValue) == 0x000000, "Member 'ArtifactFunctionLibrary_GetCarryingArtifactsNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorRandom.SetSpawnBox
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorRandom_SetSpawnBox final
{
public:
	class UBoxComponent*                          Box;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorRandom_SetSpawnBox) == 0x000008, "Wrong alignment on EnemySpawnGeneratorRandom_SetSpawnBox");
static_assert(sizeof(EnemySpawnGeneratorRandom_SetSpawnBox) == 0x000008, "Wrong size on EnemySpawnGeneratorRandom_SetSpawnBox");
static_assert(offsetof(EnemySpawnGeneratorRandom_SetSpawnBox, Box) == 0x000000, "Member 'EnemySpawnGeneratorRandom_SetSpawnBox::Box' has a wrong offset!");

// Function DarwinGame.FieldObjectSpline.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct FieldObjectSpline_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectSpline_GetSplineComponent) == 0x000008, "Wrong alignment on FieldObjectSpline_GetSplineComponent");
static_assert(sizeof(FieldObjectSpline_GetSplineComponent) == 0x000008, "Wrong size on FieldObjectSpline_GetSplineComponent");
static_assert(offsetof(FieldObjectSpline_GetSplineComponent, ReturnValue) == 0x000000, "Member 'FieldObjectSpline_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIBaseBattle_Logo_00.SetBaseBattleType
// 0x0002 (0x0002 - 0x0000)
struct UIBaseBattle_Logo_00_SetBaseBattleType final
{
public:
	EBaseBattleType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isEnableCloseAnimation;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseBattle_Logo_00_SetBaseBattleType) == 0x000001, "Wrong alignment on UIBaseBattle_Logo_00_SetBaseBattleType");
static_assert(sizeof(UIBaseBattle_Logo_00_SetBaseBattleType) == 0x000002, "Wrong size on UIBaseBattle_Logo_00_SetBaseBattleType");
static_assert(offsetof(UIBaseBattle_Logo_00_SetBaseBattleType, Type) == 0x000000, "Member 'UIBaseBattle_Logo_00_SetBaseBattleType::Type' has a wrong offset!");
static_assert(offsetof(UIBaseBattle_Logo_00_SetBaseBattleType, isEnableCloseAnimation) == 0x000001, "Member 'UIBaseBattle_Logo_00_SetBaseBattleType::isEnableCloseAnimation' has a wrong offset!");

// Function DarwinGame.AttachObjectBase.GetDitheringComponent
// 0x0008 (0x0008 - 0x0000)
struct AttachObjectBase_GetDitheringComponent final
{
public:
	class UDitheringComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttachObjectBase_GetDitheringComponent) == 0x000008, "Wrong alignment on AttachObjectBase_GetDitheringComponent");
static_assert(sizeof(AttachObjectBase_GetDitheringComponent) == 0x000008, "Wrong size on AttachObjectBase_GetDitheringComponent");
static_assert(offsetof(AttachObjectBase_GetDitheringComponent, ReturnValue) == 0x000000, "Member 'AttachObjectBase_GetDitheringComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttachObjectBase.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct AttachObjectBase_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttachObjectBase_GetSkeletalMesh) == 0x000008, "Wrong alignment on AttachObjectBase_GetSkeletalMesh");
static_assert(sizeof(AttachObjectBase_GetSkeletalMesh) == 0x000008, "Wrong size on AttachObjectBase_GetSkeletalMesh");
static_assert(offsetof(AttachObjectBase_GetSkeletalMesh, ReturnValue) == 0x000000, "Member 'AttachObjectBase_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttachObjectBase.GetStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct AttachObjectBase_GetStaticMesh final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttachObjectBase_GetStaticMesh) == 0x000008, "Wrong alignment on AttachObjectBase_GetStaticMesh");
static_assert(sizeof(AttachObjectBase_GetStaticMesh) == 0x000008, "Wrong size on AttachObjectBase_GetStaticMesh");
static_assert(offsetof(AttachObjectBase_GetStaticMesh, ReturnValue) == 0x000000, "Member 'AttachObjectBase_GetStaticMesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.OutbreakQuestGimmickBase.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct OutbreakQuestGimmickBase_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutbreakQuestGimmickBase_BeginOverlap) == 0x000008, "Wrong alignment on OutbreakQuestGimmickBase_BeginOverlap");
static_assert(sizeof(OutbreakQuestGimmickBase_BeginOverlap) == 0x0000A8, "Wrong size on OutbreakQuestGimmickBase_BeginOverlap");
static_assert(offsetof(OutbreakQuestGimmickBase_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'OutbreakQuestGimmickBase_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_BeginOverlap, OtherActor) == 0x000008, "Member 'OutbreakQuestGimmickBase_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_BeginOverlap, OtherComp) == 0x000010, "Member 'OutbreakQuestGimmickBase_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'OutbreakQuestGimmickBase_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_BeginOverlap, bFromSweep) == 0x00001C, "Member 'OutbreakQuestGimmickBase_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_BeginOverlap, SweepResult) == 0x000020, "Member 'OutbreakQuestGimmickBase_BeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.OutbreakQuestGimmickBase.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct OutbreakQuestGimmickBase_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OutbreakQuestGimmickBase_EndOverlap) == 0x000008, "Wrong alignment on OutbreakQuestGimmickBase_EndOverlap");
static_assert(sizeof(OutbreakQuestGimmickBase_EndOverlap) == 0x000020, "Wrong size on OutbreakQuestGimmickBase_EndOverlap");
static_assert(offsetof(OutbreakQuestGimmickBase_EndOverlap, OverlappedComp) == 0x000000, "Member 'OutbreakQuestGimmickBase_EndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_EndOverlap, OtherActor) == 0x000008, "Member 'OutbreakQuestGimmickBase_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_EndOverlap, OtherComp) == 0x000010, "Member 'OutbreakQuestGimmickBase_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(OutbreakQuestGimmickBase_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'OutbreakQuestGimmickBase_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.AttackElementBaseComponent.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct AttackElementBaseComponent_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttackElementBaseComponent_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on AttackElementBaseComponent_OnComponentBeginOverlap");
static_assert(sizeof(AttackElementBaseComponent_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on AttackElementBaseComponent_OnComponentBeginOverlap");
static_assert(offsetof(AttackElementBaseComponent_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'AttackElementBaseComponent_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AttackElementBaseComponent_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'AttackElementBaseComponent_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AttackElementBaseComponent_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'AttackElementBaseComponent_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AttackElementBaseComponent_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'AttackElementBaseComponent_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AttackElementBaseComponent_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'AttackElementBaseComponent_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(AttackElementBaseComponent_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'AttackElementBaseComponent_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.ClampLevel
// 0x0014 (0x0014 - 0x0000)
struct AttributeDataTable_ClampLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLevel;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_ClampLevel) == 0x000004, "Wrong alignment on AttributeDataTable_ClampLevel");
static_assert(sizeof(AttributeDataTable_ClampLevel) == 0x000014, "Wrong size on AttributeDataTable_ClampLevel");
static_assert(offsetof(AttributeDataTable_ClampLevel, ID) == 0x000000, "Member 'AttributeDataTable_ClampLevel::ID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_ClampLevel, CurrentLevel) == 0x000008, "Member 'AttributeDataTable_ClampLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_ClampLevel, AddLevel) == 0x00000C, "Member 'AttributeDataTable_ClampLevel::AddLevel' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_ClampLevel, ReturnValue) == 0x000010, "Member 'AttributeDataTable_ClampLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetAttributeTag
// 0x0010 (0x0010 - 0x0000)
struct AttributeDataTable_GetAttributeTag final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_GetAttributeTag) == 0x000004, "Wrong alignment on AttributeDataTable_GetAttributeTag");
static_assert(sizeof(AttributeDataTable_GetAttributeTag) == 0x000010, "Wrong size on AttributeDataTable_GetAttributeTag");
static_assert(offsetof(AttributeDataTable_GetAttributeTag, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetAttributeTag::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetAttributeTag, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetAttributeTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetBlockOccursionList
// 0x0020 (0x0020 - 0x0000)
struct AttributeDataTable_GetBlockOccursionList final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutList;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetBlockOccursionList) == 0x000008, "Wrong alignment on AttributeDataTable_GetBlockOccursionList");
static_assert(sizeof(AttributeDataTable_GetBlockOccursionList) == 0x000020, "Wrong size on AttributeDataTable_GetBlockOccursionList");
static_assert(offsetof(AttributeDataTable_GetBlockOccursionList, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetBlockOccursionList::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetBlockOccursionList, OutList) == 0x000008, "Member 'AttributeDataTable_GetBlockOccursionList::OutList' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetBlockOccursionList, ReturnValue) == 0x000018, "Member 'AttributeDataTable_GetBlockOccursionList::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetDurationType
// 0x000C (0x000C - 0x0000)
struct AttributeDataTable_GetDurationType final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeDurationType                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetDurationType) == 0x000004, "Wrong alignment on AttributeDataTable_GetDurationType");
static_assert(sizeof(AttributeDataTable_GetDurationType) == 0x00000C, "Wrong size on AttributeDataTable_GetDurationType");
static_assert(offsetof(AttributeDataTable_GetDurationType, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetDurationType::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetDurationType, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetDurationType::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetEffectOtherType
// 0x000C (0x000C - 0x0000)
struct AttributeDataTable_GetEffectOtherType final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeOtherType                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetEffectOtherType) == 0x000004, "Wrong alignment on AttributeDataTable_GetEffectOtherType");
static_assert(sizeof(AttributeDataTable_GetEffectOtherType) == 0x00000C, "Wrong size on AttributeDataTable_GetEffectOtherType");
static_assert(offsetof(AttributeDataTable_GetEffectOtherType, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetEffectOtherType::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetEffectOtherType, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetEffectOtherType::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetEffectParamType
// 0x000C (0x000C - 0x0000)
struct AttributeDataTable_GetEffectParamType final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusParamType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetEffectParamType) == 0x000004, "Wrong alignment on AttributeDataTable_GetEffectParamType");
static_assert(sizeof(AttributeDataTable_GetEffectParamType) == 0x00000C, "Wrong size on AttributeDataTable_GetEffectParamType");
static_assert(offsetof(AttributeDataTable_GetEffectParamType, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetEffectParamType::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetEffectParamType, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetEffectParamType::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetEffectType
// 0x000C (0x000C - 0x0000)
struct AttributeDataTable_GetEffectType final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFeatureSystemType                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetEffectType) == 0x000004, "Wrong alignment on AttributeDataTable_GetEffectType");
static_assert(sizeof(AttributeDataTable_GetEffectType) == 0x00000C, "Wrong size on AttributeDataTable_GetEffectType");
static_assert(offsetof(AttributeDataTable_GetEffectType, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetEffectType::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetEffectType, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetEffectType::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetEffectValue
// 0x0014 (0x0014 - 0x0000)
struct AttributeDataTable_GetEffectValue final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTarget;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_GetEffectValue) == 0x000004, "Wrong alignment on AttributeDataTable_GetEffectValue");
static_assert(sizeof(AttributeDataTable_GetEffectValue) == 0x000014, "Wrong size on AttributeDataTable_GetEffectValue");
static_assert(offsetof(AttributeDataTable_GetEffectValue, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetEffectValue::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetEffectValue, Level) == 0x000008, "Member 'AttributeDataTable_GetEffectValue::Level' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetEffectValue, IsTarget) == 0x00000C, "Member 'AttributeDataTable_GetEffectValue::IsTarget' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetEffectValue, ReturnValue) == 0x000010, "Member 'AttributeDataTable_GetEffectValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetExecutionRate
// 0x0010 (0x0010 - 0x0000)
struct AttributeDataTable_GetExecutionRate final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_GetExecutionRate) == 0x000004, "Wrong alignment on AttributeDataTable_GetExecutionRate");
static_assert(sizeof(AttributeDataTable_GetExecutionRate) == 0x000010, "Wrong size on AttributeDataTable_GetExecutionRate");
static_assert(offsetof(AttributeDataTable_GetExecutionRate, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetExecutionRate::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetExecutionRate, Level) == 0x000008, "Member 'AttributeDataTable_GetExecutionRate::Level' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetExecutionRate, ReturnValue) == 0x00000C, "Member 'AttributeDataTable_GetExecutionRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetInfluenceType
// 0x0010 (0x0010 - 0x0000)
struct AttributeDataTable_GetInfluenceType final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInfluenceAttribute                           ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetInfluenceType) == 0x000004, "Wrong alignment on AttributeDataTable_GetInfluenceType");
static_assert(sizeof(AttributeDataTable_GetInfluenceType) == 0x000010, "Wrong size on AttributeDataTable_GetInfluenceType");
static_assert(offsetof(AttributeDataTable_GetInfluenceType, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetInfluenceType::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetInfluenceType, Level) == 0x000008, "Member 'AttributeDataTable_GetInfluenceType::Level' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetInfluenceType, ReturnValue) == 0x00000C, "Member 'AttributeDataTable_GetInfluenceType::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetOriginalInfluenceType
// 0x000C (0x000C - 0x0000)
struct AttributeDataTable_GetOriginalInfluenceType final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInfluenceAttribute                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetOriginalInfluenceType) == 0x000004, "Wrong alignment on AttributeDataTable_GetOriginalInfluenceType");
static_assert(sizeof(AttributeDataTable_GetOriginalInfluenceType) == 0x00000C, "Wrong size on AttributeDataTable_GetOriginalInfluenceType");
static_assert(offsetof(AttributeDataTable_GetOriginalInfluenceType, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetOriginalInfluenceType::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetOriginalInfluenceType, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetOriginalInfluenceType::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetProcessPolicy
// 0x000C (0x000C - 0x0000)
struct AttributeDataTable_GetProcessPolicy final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeProcessPolicy                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeDataTable_GetProcessPolicy) == 0x000004, "Wrong alignment on AttributeDataTable_GetProcessPolicy");
static_assert(sizeof(AttributeDataTable_GetProcessPolicy) == 0x00000C, "Wrong size on AttributeDataTable_GetProcessPolicy");
static_assert(offsetof(AttributeDataTable_GetProcessPolicy, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetProcessPolicy::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetProcessPolicy, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetProcessPolicy::ReturnValue' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetReleasedTagsByDamage
// 0x0028 (0x0028 - 0x0000)
struct AttributeDataTable_GetReleasedTagsByDamage final
{
public:
	bool                                          bTargetIsEnemy;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReleaseTags;                                       // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_GetReleasedTagsByDamage) == 0x000008, "Wrong alignment on AttributeDataTable_GetReleasedTagsByDamage");
static_assert(sizeof(AttributeDataTable_GetReleasedTagsByDamage) == 0x000028, "Wrong size on AttributeDataTable_GetReleasedTagsByDamage");
static_assert(offsetof(AttributeDataTable_GetReleasedTagsByDamage, bTargetIsEnemy) == 0x000000, "Member 'AttributeDataTable_GetReleasedTagsByDamage::bTargetIsEnemy' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetReleasedTagsByDamage, ReleaseTags) == 0x000008, "Member 'AttributeDataTable_GetReleasedTagsByDamage::ReleaseTags' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetReleaseTags
// 0x0028 (0x0028 - 0x0000)
struct AttributeDataTable_GetReleaseTags final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReleaseTags;                                       // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_GetReleaseTags) == 0x000008, "Wrong alignment on AttributeDataTable_GetReleaseTags");
static_assert(sizeof(AttributeDataTable_GetReleaseTags) == 0x000028, "Wrong size on AttributeDataTable_GetReleaseTags");
static_assert(offsetof(AttributeDataTable_GetReleaseTags, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetReleaseTags::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetReleaseTags, ReleaseTags) == 0x000008, "Member 'AttributeDataTable_GetReleaseTags::ReleaseTags' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetRequirementTags
// 0x0028 (0x0028 - 0x0000)
struct AttributeDataTable_GetRequirementTags final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequirementTags;                                   // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_GetRequirementTags) == 0x000008, "Wrong alignment on AttributeDataTable_GetRequirementTags");
static_assert(sizeof(AttributeDataTable_GetRequirementTags) == 0x000028, "Wrong size on AttributeDataTable_GetRequirementTags");
static_assert(offsetof(AttributeDataTable_GetRequirementTags, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetRequirementTags::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetRequirementTags, RequirementTags) == 0x000008, "Member 'AttributeDataTable_GetRequirementTags::RequirementTags' has a wrong offset!");

// Function DarwinGame.AttributeDataTable.GetStatusIconID
// 0x0010 (0x0010 - 0x0000)
struct AttributeDataTable_GetStatusIconID final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttributeDataTable_GetStatusIconID) == 0x000004, "Wrong alignment on AttributeDataTable_GetStatusIconID");
static_assert(sizeof(AttributeDataTable_GetStatusIconID) == 0x000010, "Wrong size on AttributeDataTable_GetStatusIconID");
static_assert(offsetof(AttributeDataTable_GetStatusIconID, AttributeID) == 0x000000, "Member 'AttributeDataTable_GetStatusIconID::AttributeID' has a wrong offset!");
static_assert(offsetof(AttributeDataTable_GetStatusIconID, ReturnValue) == 0x000008, "Member 'AttributeDataTable_GetStatusIconID::ReturnValue' has a wrong offset!");

// Function DarwinGame.OriginParameterDataTable.GetAbilityClassList
// 0x0018 (0x0018 - 0x0000)
struct OriginParameterDataTable_GetAbilityClassList final
{
public:
	class FName                                   OriginID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OriginParameterDataTable_GetAbilityClassList) == 0x000008, "Wrong alignment on OriginParameterDataTable_GetAbilityClassList");
static_assert(sizeof(OriginParameterDataTable_GetAbilityClassList) == 0x000018, "Wrong size on OriginParameterDataTable_GetAbilityClassList");
static_assert(offsetof(OriginParameterDataTable_GetAbilityClassList, OriginID) == 0x000000, "Member 'OriginParameterDataTable_GetAbilityClassList::OriginID' has a wrong offset!");
static_assert(offsetof(OriginParameterDataTable_GetAbilityClassList, ReturnValue) == 0x000008, "Member 'OriginParameterDataTable_GetAbilityClassList::ReturnValue' has a wrong offset!");

// Function DarwinGame.OriginParameterDataTable.GetActionStateClassMap
// 0x0058 (0x0058 - 0x0000)
struct OriginParameterDataTable_GetActionStateClassMap final
{
public:
	class FName                                   OriginID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSubclassOf<class UActionStateBase>> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(OriginParameterDataTable_GetActionStateClassMap) == 0x000008, "Wrong alignment on OriginParameterDataTable_GetActionStateClassMap");
static_assert(sizeof(OriginParameterDataTable_GetActionStateClassMap) == 0x000058, "Wrong size on OriginParameterDataTable_GetActionStateClassMap");
static_assert(offsetof(OriginParameterDataTable_GetActionStateClassMap, OriginID) == 0x000000, "Member 'OriginParameterDataTable_GetActionStateClassMap::OriginID' has a wrong offset!");
static_assert(offsetof(OriginParameterDataTable_GetActionStateClassMap, ReturnValue) == 0x000008, "Member 'OriginParameterDataTable_GetActionStateClassMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.OriginParameterDataTable.GetDefaultMoveState
// 0x0010 (0x0010 - 0x0000)
struct OriginParameterDataTable_GetDefaultMoveState final
{
public:
	class FName                                   OriginID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OriginParameterDataTable_GetDefaultMoveState) == 0x000004, "Wrong alignment on OriginParameterDataTable_GetDefaultMoveState");
static_assert(sizeof(OriginParameterDataTable_GetDefaultMoveState) == 0x000010, "Wrong size on OriginParameterDataTable_GetDefaultMoveState");
static_assert(offsetof(OriginParameterDataTable_GetDefaultMoveState, OriginID) == 0x000000, "Member 'OriginParameterDataTable_GetDefaultMoveState::OriginID' has a wrong offset!");
static_assert(offsetof(OriginParameterDataTable_GetDefaultMoveState, ReturnValue) == 0x000008, "Member 'OriginParameterDataTable_GetDefaultMoveState::ReturnValue' has a wrong offset!");

// Function DarwinGame.OriginParameterDataTable.GetEnableMoveStateTagList
// 0x0028 (0x0028 - 0x0000)
struct OriginParameterDataTable_GetEnableMoveStateTagList final
{
public:
	class FName                                   OriginID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OriginParameterDataTable_GetEnableMoveStateTagList) == 0x000008, "Wrong alignment on OriginParameterDataTable_GetEnableMoveStateTagList");
static_assert(sizeof(OriginParameterDataTable_GetEnableMoveStateTagList) == 0x000028, "Wrong size on OriginParameterDataTable_GetEnableMoveStateTagList");
static_assert(offsetof(OriginParameterDataTable_GetEnableMoveStateTagList, OriginID) == 0x000000, "Member 'OriginParameterDataTable_GetEnableMoveStateTagList::OriginID' has a wrong offset!");
static_assert(offsetof(OriginParameterDataTable_GetEnableMoveStateTagList, ReturnValue) == 0x000008, "Member 'OriginParameterDataTable_GetEnableMoveStateTagList::ReturnValue' has a wrong offset!");

// Function DarwinGame.OriginParameterDataTable.GetEventStateClassMap
// 0x0058 (0x0058 - 0x0000)
struct OriginParameterDataTable_GetEventStateClassMap final
{
public:
	class FName                                   OriginID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSubclassOf<class UEventStateBase>> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(OriginParameterDataTable_GetEventStateClassMap) == 0x000008, "Wrong alignment on OriginParameterDataTable_GetEventStateClassMap");
static_assert(sizeof(OriginParameterDataTable_GetEventStateClassMap) == 0x000058, "Wrong size on OriginParameterDataTable_GetEventStateClassMap");
static_assert(offsetof(OriginParameterDataTable_GetEventStateClassMap, OriginID) == 0x000000, "Member 'OriginParameterDataTable_GetEventStateClassMap::OriginID' has a wrong offset!");
static_assert(offsetof(OriginParameterDataTable_GetEventStateClassMap, ReturnValue) == 0x000008, "Member 'OriginParameterDataTable_GetEventStateClassMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.OriginParameterDataTable.GetMoveStateClassMap
// 0x0058 (0x0058 - 0x0000)
struct OriginParameterDataTable_GetMoveStateClassMap final
{
public:
	class FName                                   OriginID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSubclassOf<class UStateBase>> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(OriginParameterDataTable_GetMoveStateClassMap) == 0x000008, "Wrong alignment on OriginParameterDataTable_GetMoveStateClassMap");
static_assert(sizeof(OriginParameterDataTable_GetMoveStateClassMap) == 0x000058, "Wrong size on OriginParameterDataTable_GetMoveStateClassMap");
static_assert(offsetof(OriginParameterDataTable_GetMoveStateClassMap, OriginID) == 0x000000, "Member 'OriginParameterDataTable_GetMoveStateClassMap::OriginID' has a wrong offset!");
static_assert(offsetof(OriginParameterDataTable_GetMoveStateClassMap, ReturnValue) == 0x000008, "Member 'OriginParameterDataTable_GetMoveStateClassMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.AddStatusIcon
// 0x000C (0x000C - 0x0000)
struct UIField_WinEnemy_AddStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusRank;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_AddStatusIcon) == 0x000004, "Wrong alignment on UIField_WinEnemy_AddStatusIcon");
static_assert(sizeof(UIField_WinEnemy_AddStatusIcon) == 0x00000C, "Wrong size on UIField_WinEnemy_AddStatusIcon");
static_assert(offsetof(UIField_WinEnemy_AddStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinEnemy_AddStatusIcon::StatusParameterID' has a wrong offset!");
static_assert(offsetof(UIField_WinEnemy_AddStatusIcon, StatusRank) == 0x000008, "Member 'UIField_WinEnemy_AddStatusIcon::StatusRank' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.ChangeStatusIcon
// 0x0010 (0x0010 - 0x0000)
struct UIField_WinEnemy_ChangeStatusIcon final
{
public:
	TArray<struct FStateChangeIconData>           OrderList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_ChangeStatusIcon) == 0x000008, "Wrong alignment on UIField_WinEnemy_ChangeStatusIcon");
static_assert(sizeof(UIField_WinEnemy_ChangeStatusIcon) == 0x000010, "Wrong size on UIField_WinEnemy_ChangeStatusIcon");
static_assert(offsetof(UIField_WinEnemy_ChangeStatusIcon, OrderList) == 0x000000, "Member 'UIField_WinEnemy_ChangeStatusIcon::OrderList' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.DebugSetIsHideFlag
// 0x0001 (0x0001 - 0x0000)
struct UIField_WinEnemy_DebugSetIsHideFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_DebugSetIsHideFlag) == 0x000001, "Wrong alignment on UIField_WinEnemy_DebugSetIsHideFlag");
static_assert(sizeof(UIField_WinEnemy_DebugSetIsHideFlag) == 0x000001, "Wrong size on UIField_WinEnemy_DebugSetIsHideFlag");
static_assert(offsetof(UIField_WinEnemy_DebugSetIsHideFlag, bFlag) == 0x000000, "Member 'UIField_WinEnemy_DebugSetIsHideFlag::bFlag' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.DeleteStatusIcon
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinEnemy_DeleteStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_DeleteStatusIcon) == 0x000004, "Wrong alignment on UIField_WinEnemy_DeleteStatusIcon");
static_assert(sizeof(UIField_WinEnemy_DeleteStatusIcon) == 0x000008, "Wrong size on UIField_WinEnemy_DeleteStatusIcon");
static_assert(offsetof(UIField_WinEnemy_DeleteStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinEnemy_DeleteStatusIcon::StatusParameterID' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.GetSpiritGauge
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinEnemy_GetSpiritGauge final
{
public:
	class UUISpirit_Gauge*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_GetSpiritGauge) == 0x000008, "Wrong alignment on UIField_WinEnemy_GetSpiritGauge");
static_assert(sizeof(UIField_WinEnemy_GetSpiritGauge) == 0x000008, "Wrong size on UIField_WinEnemy_GetSpiritGauge");
static_assert(offsetof(UIField_WinEnemy_GetSpiritGauge, ReturnValue) == 0x000000, "Member 'UIField_WinEnemy_GetSpiritGauge::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.InitData
// 0x000C (0x000C - 0x0000)
struct UIField_WinEnemy_InitData final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevel;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_InitData) == 0x000004, "Wrong alignment on UIField_WinEnemy_InitData");
static_assert(sizeof(UIField_WinEnemy_InitData) == 0x00000C, "Wrong size on UIField_WinEnemy_InitData");
static_assert(offsetof(UIField_WinEnemy_InitData, InHP) == 0x000000, "Member 'UIField_WinEnemy_InitData::InHP' has a wrong offset!");
static_assert(offsetof(UIField_WinEnemy_InitData, InMaxHP) == 0x000004, "Member 'UIField_WinEnemy_InitData::InMaxHP' has a wrong offset!");
static_assert(offsetof(UIField_WinEnemy_InitData, InLevel) == 0x000008, "Member 'UIField_WinEnemy_InitData::InLevel' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.SetHP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinEnemy_SetHP final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_SetHP) == 0x000004, "Wrong alignment on UIField_WinEnemy_SetHP");
static_assert(sizeof(UIField_WinEnemy_SetHP) == 0x000004, "Wrong size on UIField_WinEnemy_SetHP");
static_assert(offsetof(UIField_WinEnemy_SetHP, InHP) == 0x000000, "Member 'UIField_WinEnemy_SetHP::InHP' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinEnemy_SetLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_SetLevel) == 0x000004, "Wrong alignment on UIField_WinEnemy_SetLevel");
static_assert(sizeof(UIField_WinEnemy_SetLevel) == 0x000004, "Wrong size on UIField_WinEnemy_SetLevel");
static_assert(offsetof(UIField_WinEnemy_SetLevel, InLevel) == 0x000000, "Member 'UIField_WinEnemy_SetLevel::InLevel' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.SetMaxHP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinEnemy_SetMaxHP final
{
public:
	int32                                         InMaxHP;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_SetMaxHP) == 0x000004, "Wrong alignment on UIField_WinEnemy_SetMaxHP");
static_assert(sizeof(UIField_WinEnemy_SetMaxHP) == 0x000004, "Wrong size on UIField_WinEnemy_SetMaxHP");
static_assert(offsetof(UIField_WinEnemy_SetMaxHP, InMaxHP) == 0x000000, "Member 'UIField_WinEnemy_SetMaxHP::InMaxHP' has a wrong offset!");

// Function DarwinGame.UIField_WinEnemy.SetName
// 0x0018 (0x0018 - 0x0000)
struct UIField_WinEnemy_SetName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinEnemy_SetName) == 0x000008, "Wrong alignment on UIField_WinEnemy_SetName");
static_assert(sizeof(UIField_WinEnemy_SetName) == 0x000018, "Wrong size on UIField_WinEnemy_SetName");
static_assert(offsetof(UIField_WinEnemy_SetName, InName) == 0x000000, "Member 'UIField_WinEnemy_SetName::InName' has a wrong offset!");

// Function DarwinGame.AttributeFunctionLibrary.K2_IsSeal
// 0x0010 (0x0010 - 0x0000)
struct AttributeFunctionLibrary_K2_IsSeal final
{
public:
	const class AGPACharacter*                    Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeProcessPolicy                       Policy;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AttributeFunctionLibrary_K2_IsSeal) == 0x000008, "Wrong alignment on AttributeFunctionLibrary_K2_IsSeal");
static_assert(sizeof(AttributeFunctionLibrary_K2_IsSeal) == 0x000010, "Wrong size on AttributeFunctionLibrary_K2_IsSeal");
static_assert(offsetof(AttributeFunctionLibrary_K2_IsSeal, Target) == 0x000000, "Member 'AttributeFunctionLibrary_K2_IsSeal::Target' has a wrong offset!");
static_assert(offsetof(AttributeFunctionLibrary_K2_IsSeal, Policy) == 0x000008, "Member 'AttributeFunctionLibrary_K2_IsSeal::Policy' has a wrong offset!");
static_assert(offsetof(AttributeFunctionLibrary_K2_IsSeal, ReturnValue) == 0x000009, "Member 'AttributeFunctionLibrary_K2_IsSeal::ReturnValue' has a wrong offset!");

// Function DarwinGame.BaseAreaBattleMonsterBeginCallbackHolder.MonserCreatedCallback
// 0x0008 (0x0008 - 0x0000)
struct BaseAreaBattleMonsterBeginCallbackHolder_MonserCreatedCallback final
{
public:
	class AMonsterBase*                           MonsterBase;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseAreaBattleMonsterBeginCallbackHolder_MonserCreatedCallback) == 0x000008, "Wrong alignment on BaseAreaBattleMonsterBeginCallbackHolder_MonserCreatedCallback");
static_assert(sizeof(BaseAreaBattleMonsterBeginCallbackHolder_MonserCreatedCallback) == 0x000008, "Wrong size on BaseAreaBattleMonsterBeginCallbackHolder_MonserCreatedCallback");
static_assert(offsetof(BaseAreaBattleMonsterBeginCallbackHolder_MonserCreatedCallback, MonsterBase) == 0x000000, "Member 'BaseAreaBattleMonsterBeginCallbackHolder_MonserCreatedCallback::MonsterBase' has a wrong offset!");

// Function DarwinGame.EventManager.GetDebugEventId
// 0x0010 (0x0010 - 0x0000)
struct EventManager_GetDebugEventId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_GetDebugEventId) == 0x000008, "Wrong alignment on EventManager_GetDebugEventId");
static_assert(sizeof(EventManager_GetDebugEventId) == 0x000010, "Wrong size on EventManager_GetDebugEventId");
static_assert(offsetof(EventManager_GetDebugEventId, ReturnValue) == 0x000000, "Member 'EventManager_GetDebugEventId::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.SetDebugEventId
// 0x0010 (0x0010 - 0x0000)
struct EventManager_SetDebugEventId final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_SetDebugEventId) == 0x000008, "Wrong alignment on EventManager_SetDebugEventId");
static_assert(sizeof(EventManager_SetDebugEventId) == 0x000010, "Wrong size on EventManager_SetDebugEventId");
static_assert(offsetof(EventManager_SetDebugEventId, ID) == 0x000000, "Member 'EventManager_SetDebugEventId::ID' has a wrong offset!");

// Function DarwinGame.EventManager.AutoSave
// 0x0008 (0x0008 - 0x0000)
struct EventManager_AutoSave final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_AutoSave) == 0x000004, "Wrong alignment on EventManager_AutoSave");
static_assert(sizeof(EventManager_AutoSave) == 0x000008, "Wrong size on EventManager_AutoSave");
static_assert(offsetof(EventManager_AutoSave, EventID) == 0x000000, "Member 'EventManager_AutoSave::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.DeleteEventArtifact
// 0x0008 (0x0008 - 0x0000)
struct EventManager_DeleteEventArtifact final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_DeleteEventArtifact) == 0x000004, "Wrong alignment on EventManager_DeleteEventArtifact");
static_assert(sizeof(EventManager_DeleteEventArtifact) == 0x000008, "Wrong size on EventManager_DeleteEventArtifact");
static_assert(offsetof(EventManager_DeleteEventArtifact, EventID) == 0x000000, "Member 'EventManager_DeleteEventArtifact::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.EventFinishMove
// 0x0008 (0x0008 - 0x0000)
struct EventManager_EventFinishMove final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_EventFinishMove) == 0x000004, "Wrong alignment on EventManager_EventFinishMove");
static_assert(sizeof(EventManager_EventFinishMove) == 0x000008, "Wrong size on EventManager_EventFinishMove");
static_assert(offsetof(EventManager_EventFinishMove, EventID) == 0x000000, "Member 'EventManager_EventFinishMove::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.ForcedEndEvent
// 0x0008 (0x0008 - 0x0000)
struct EventManager_ForcedEndEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_ForcedEndEvent) == 0x000004, "Wrong alignment on EventManager_ForcedEndEvent");
static_assert(sizeof(EventManager_ForcedEndEvent) == 0x000008, "Wrong size on EventManager_ForcedEndEvent");
static_assert(offsetof(EventManager_ForcedEndEvent, EventID) == 0x000000, "Member 'EventManager_ForcedEndEvent::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.GetCurrentEventID
// 0x0008 (0x0008 - 0x0000)
struct EventManager_GetCurrentEventID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_GetCurrentEventID) == 0x000004, "Wrong alignment on EventManager_GetCurrentEventID");
static_assert(sizeof(EventManager_GetCurrentEventID) == 0x000008, "Wrong size on EventManager_GetCurrentEventID");
static_assert(offsetof(EventManager_GetCurrentEventID, ReturnValue) == 0x000000, "Member 'EventManager_GetCurrentEventID::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.GetEventClearData
// 0x0210 (0x0210 - 0x0000)
struct EventManager_GetEventClearData final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_EventClearTableInfo                EventClearData;                                    // 0x0008(0x0200)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0208(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_GetEventClearData) == 0x000008, "Wrong alignment on EventManager_GetEventClearData");
static_assert(sizeof(EventManager_GetEventClearData) == 0x000210, "Wrong size on EventManager_GetEventClearData");
static_assert(offsetof(EventManager_GetEventClearData, EventID) == 0x000000, "Member 'EventManager_GetEventClearData::EventID' has a wrong offset!");
static_assert(offsetof(EventManager_GetEventClearData, EventClearData) == 0x000008, "Member 'EventManager_GetEventClearData::EventClearData' has a wrong offset!");
static_assert(offsetof(EventManager_GetEventClearData, ReturnValue) == 0x000208, "Member 'EventManager_GetEventClearData::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.GetEventData
// 0x0024 (0x0024 - 0x0000)
struct EventManager_GetEventData final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_EventData                          EventData;                                         // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EQuestState                                   QuestState;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_GetEventData) == 0x000004, "Wrong alignment on EventManager_GetEventData");
static_assert(sizeof(EventManager_GetEventData) == 0x000024, "Wrong size on EventManager_GetEventData");
static_assert(offsetof(EventManager_GetEventData, EventID) == 0x000000, "Member 'EventManager_GetEventData::EventID' has a wrong offset!");
static_assert(offsetof(EventManager_GetEventData, EventData) == 0x000008, "Member 'EventManager_GetEventData::EventData' has a wrong offset!");
static_assert(offsetof(EventManager_GetEventData, QuestState) == 0x000020, "Member 'EventManager_GetEventData::QuestState' has a wrong offset!");
static_assert(offsetof(EventManager_GetEventData, ReturnValue) == 0x000021, "Member 'EventManager_GetEventData::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.GetReleaseStigmataNum
// 0x0004 (0x0004 - 0x0000)
struct EventManager_GetReleaseStigmataNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_GetReleaseStigmataNum) == 0x000004, "Wrong alignment on EventManager_GetReleaseStigmataNum");
static_assert(sizeof(EventManager_GetReleaseStigmataNum) == 0x000004, "Wrong size on EventManager_GetReleaseStigmataNum");
static_assert(offsetof(EventManager_GetReleaseStigmataNum, ReturnValue) == 0x000000, "Member 'EventManager_GetReleaseStigmataNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.IsReleaseStigmataEvent
// 0x000C (0x000C - 0x0000)
struct EventManager_IsReleaseStigmataEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_IsReleaseStigmataEvent) == 0x000004, "Wrong alignment on EventManager_IsReleaseStigmataEvent");
static_assert(sizeof(EventManager_IsReleaseStigmataEvent) == 0x00000C, "Wrong size on EventManager_IsReleaseStigmataEvent");
static_assert(offsetof(EventManager_IsReleaseStigmataEvent, EventID) == 0x000000, "Member 'EventManager_IsReleaseStigmataEvent::EventID' has a wrong offset!");
static_assert(offsetof(EventManager_IsReleaseStigmataEvent, ReturnValue) == 0x000008, "Member 'EventManager_IsReleaseStigmataEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.OnEventFinished
// 0x0008 (0x0008 - 0x0000)
struct EventManager_OnEventFinished final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_OnEventFinished) == 0x000004, "Wrong alignment on EventManager_OnEventFinished");
static_assert(sizeof(EventManager_OnEventFinished) == 0x000008, "Wrong size on EventManager_OnEventFinished");
static_assert(offsetof(EventManager_OnEventFinished, EventID) == 0x000000, "Member 'EventManager_OnEventFinished::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.PlayEvent
// 0x000C (0x000C - 0x0000)
struct EventManager_PlayEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   QuestState;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_PlayEvent) == 0x000004, "Wrong alignment on EventManager_PlayEvent");
static_assert(sizeof(EventManager_PlayEvent) == 0x00000C, "Wrong size on EventManager_PlayEvent");
static_assert(offsetof(EventManager_PlayEvent, EventID) == 0x000000, "Member 'EventManager_PlayEvent::EventID' has a wrong offset!");
static_assert(offsetof(EventManager_PlayEvent, QuestState) == 0x000008, "Member 'EventManager_PlayEvent::QuestState' has a wrong offset!");

// Function DarwinGame.EventManager.PlayEventMonster
// 0x0008 (0x0008 - 0x0000)
struct EventManager_PlayEventMonster final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_PlayEventMonster) == 0x000004, "Wrong alignment on EventManager_PlayEventMonster");
static_assert(sizeof(EventManager_PlayEventMonster) == 0x000008, "Wrong size on EventManager_PlayEventMonster");
static_assert(offsetof(EventManager_PlayEventMonster, EventID) == 0x000000, "Member 'EventManager_PlayEventMonster::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.PlayEventOfItemFirstAdd
// 0x0008 (0x0008 - 0x0000)
struct EventManager_PlayEventOfItemFirstAdd final
{
public:
	class FName                                   ItemFirstAdd;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_PlayEventOfItemFirstAdd) == 0x000004, "Wrong alignment on EventManager_PlayEventOfItemFirstAdd");
static_assert(sizeof(EventManager_PlayEventOfItemFirstAdd) == 0x000008, "Wrong size on EventManager_PlayEventOfItemFirstAdd");
static_assert(offsetof(EventManager_PlayEventOfItemFirstAdd, ItemFirstAdd) == 0x000000, "Member 'EventManager_PlayEventOfItemFirstAdd::ItemFirstAdd' has a wrong offset!");

// Function DarwinGame.EventManager.RemoveFriendMonster
// 0x0008 (0x0008 - 0x0000)
struct EventManager_RemoveFriendMonster final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_RemoveFriendMonster) == 0x000004, "Wrong alignment on EventManager_RemoveFriendMonster");
static_assert(sizeof(EventManager_RemoveFriendMonster) == 0x000008, "Wrong size on EventManager_RemoveFriendMonster");
static_assert(offsetof(EventManager_RemoveFriendMonster, EventID) == 0x000000, "Member 'EventManager_RemoveFriendMonster::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.RemoveResetEvent
// 0x0008 (0x0008 - 0x0000)
struct EventManager_RemoveResetEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_RemoveResetEvent) == 0x000004, "Wrong alignment on EventManager_RemoveResetEvent");
static_assert(sizeof(EventManager_RemoveResetEvent) == 0x000008, "Wrong size on EventManager_RemoveResetEvent");
static_assert(offsetof(EventManager_RemoveResetEvent, EventID) == 0x000000, "Member 'EventManager_RemoveResetEvent::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.SetCurrentEventID
// 0x0008 (0x0008 - 0x0000)
struct EventManager_SetCurrentEventID final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_SetCurrentEventID) == 0x000004, "Wrong alignment on EventManager_SetCurrentEventID");
static_assert(sizeof(EventManager_SetCurrentEventID) == 0x000008, "Wrong size on EventManager_SetCurrentEventID");
static_assert(offsetof(EventManager_SetCurrentEventID, EventID) == 0x000000, "Member 'EventManager_SetCurrentEventID::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.SetEventSender
// 0x0008 (0x0008 - 0x0000)
struct EventManager_SetEventSender final
{
public:
	class UEventSender*                           Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_SetEventSender) == 0x000008, "Wrong alignment on EventManager_SetEventSender");
static_assert(sizeof(EventManager_SetEventSender) == 0x000008, "Wrong size on EventManager_SetEventSender");
static_assert(offsetof(EventManager_SetEventSender, Sender) == 0x000000, "Member 'EventManager_SetEventSender::Sender' has a wrong offset!");

// Function DarwinGame.EventManager.SetEventSkip
// 0x0001 (0x0001 - 0x0000)
struct EventManager_SetEventSkip final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_SetEventSkip) == 0x000001, "Wrong alignment on EventManager_SetEventSkip");
static_assert(sizeof(EventManager_SetEventSkip) == 0x000001, "Wrong size on EventManager_SetEventSkip");
static_assert(offsetof(EventManager_SetEventSkip, IsSkip) == 0x000000, "Member 'EventManager_SetEventSkip::IsSkip' has a wrong offset!");

// Function DarwinGame.EventManager.SetSendEventActor
// 0x0008 (0x0008 - 0x0000)
struct EventManager_SetSendEventActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_SetSendEventActor) == 0x000008, "Wrong alignment on EventManager_SetSendEventActor");
static_assert(sizeof(EventManager_SetSendEventActor) == 0x000008, "Wrong size on EventManager_SetSendEventActor");
static_assert(offsetof(EventManager_SetSendEventActor, Actor) == 0x000000, "Member 'EventManager_SetSendEventActor::Actor' has a wrong offset!");

// Function DarwinGame.EventManager.SpawnEventArtifact
// 0x0008 (0x0008 - 0x0000)
struct EventManager_SpawnEventArtifact final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_SpawnEventArtifact) == 0x000004, "Wrong alignment on EventManager_SpawnEventArtifact");
static_assert(sizeof(EventManager_SpawnEventArtifact) == 0x000008, "Wrong size on EventManager_SpawnEventArtifact");
static_assert(offsetof(EventManager_SpawnEventArtifact, EventID) == 0x000000, "Member 'EventManager_SpawnEventArtifact::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.SpawnRequestEventMonster
// 0x0008 (0x0008 - 0x0000)
struct EventManager_SpawnRequestEventMonster final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_SpawnRequestEventMonster) == 0x000004, "Wrong alignment on EventManager_SpawnRequestEventMonster");
static_assert(sizeof(EventManager_SpawnRequestEventMonster) == 0x000008, "Wrong size on EventManager_SpawnRequestEventMonster");
static_assert(offsetof(EventManager_SpawnRequestEventMonster, EventID) == 0x000000, "Member 'EventManager_SpawnRequestEventMonster::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.UpdateEpisode
// 0x0001 (0x0001 - 0x0000)
struct EventManager_UpdateEpisode final
{
public:
	EEpisodeType                                  EpisodeType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_UpdateEpisode) == 0x000001, "Wrong alignment on EventManager_UpdateEpisode");
static_assert(sizeof(EventManager_UpdateEpisode) == 0x000001, "Wrong size on EventManager_UpdateEpisode");
static_assert(offsetof(EventManager_UpdateEpisode, EpisodeType) == 0x000000, "Member 'EventManager_UpdateEpisode::EpisodeType' has a wrong offset!");

// Function DarwinGame.EventManager.UpdateQuestTargetEnemyUI
// 0x0004 (0x0004 - 0x0000)
struct EventManager_UpdateQuestTargetEnemyUI final
{
public:
	int32                                         KindId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_UpdateQuestTargetEnemyUI) == 0x000004, "Wrong alignment on EventManager_UpdateQuestTargetEnemyUI");
static_assert(sizeof(EventManager_UpdateQuestTargetEnemyUI) == 0x000004, "Wrong size on EventManager_UpdateQuestTargetEnemyUI");
static_assert(offsetof(EventManager_UpdateQuestTargetEnemyUI, KindId) == 0x000000, "Member 'EventManager_UpdateQuestTargetEnemyUI::KindId' has a wrong offset!");

// Function DarwinGame.EventManager.UseEventClearItems
// 0x0008 (0x0008 - 0x0000)
struct EventManager_UseEventClearItems final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_UseEventClearItems) == 0x000004, "Wrong alignment on EventManager_UseEventClearItems");
static_assert(sizeof(EventManager_UseEventClearItems) == 0x000008, "Wrong size on EventManager_UseEventClearItems");
static_assert(offsetof(EventManager_UseEventClearItems, EventID) == 0x000000, "Member 'EventManager_UseEventClearItems::EventID' has a wrong offset!");

// Function DarwinGame.EventManager.EventMonsterIsReady
// 0x000C (0x000C - 0x0000)
struct EventManager_EventMonsterIsReady final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_EventMonsterIsReady) == 0x000004, "Wrong alignment on EventManager_EventMonsterIsReady");
static_assert(sizeof(EventManager_EventMonsterIsReady) == 0x00000C, "Wrong size on EventManager_EventMonsterIsReady");
static_assert(offsetof(EventManager_EventMonsterIsReady, EventID) == 0x000000, "Member 'EventManager_EventMonsterIsReady::EventID' has a wrong offset!");
static_assert(offsetof(EventManager_EventMonsterIsReady, ReturnValue) == 0x000008, "Member 'EventManager_EventMonsterIsReady::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.EventMonsterIsRequested
// 0x000C (0x000C - 0x0000)
struct EventManager_EventMonsterIsRequested final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventManager_EventMonsterIsRequested) == 0x000004, "Wrong alignment on EventManager_EventMonsterIsRequested");
static_assert(sizeof(EventManager_EventMonsterIsRequested) == 0x00000C, "Wrong size on EventManager_EventMonsterIsRequested");
static_assert(offsetof(EventManager_EventMonsterIsRequested, EventID) == 0x000000, "Member 'EventManager_EventMonsterIsRequested::EventID' has a wrong offset!");
static_assert(offsetof(EventManager_EventMonsterIsRequested, ReturnValue) == 0x000008, "Member 'EventManager_EventMonsterIsRequested::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.GetEventSendActor
// 0x0008 (0x0008 - 0x0000)
struct EventManager_GetEventSendActor final
{
public:
	const class AActor*                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_GetEventSendActor) == 0x000008, "Wrong alignment on EventManager_GetEventSendActor");
static_assert(sizeof(EventManager_GetEventSendActor) == 0x000008, "Wrong size on EventManager_GetEventSendActor");
static_assert(offsetof(EventManager_GetEventSendActor, ReturnValue) == 0x000000, "Member 'EventManager_GetEventSendActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventManager.GetResistedEventIDLast
// 0x0008 (0x0008 - 0x0000)
struct EventManager_GetResistedEventIDLast final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventManager_GetResistedEventIDLast) == 0x000004, "Wrong alignment on EventManager_GetResistedEventIDLast");
static_assert(sizeof(EventManager_GetResistedEventIDLast) == 0x000008, "Wrong size on EventManager_GetResistedEventIDLast");
static_assert(offsetof(EventManager_GetResistedEventIDLast, ReturnValue) == 0x000000, "Member 'EventManager_GetResistedEventIDLast::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.AddCoin
// 0x0020 (0x0020 - 0x0000)
struct GameBelongingsCoin_AddCoin final
{
public:
	struct FST_CoinParam                          Param;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBelongingsCoin_AddCoin) == 0x000008, "Wrong alignment on GameBelongingsCoin_AddCoin");
static_assert(sizeof(GameBelongingsCoin_AddCoin) == 0x000020, "Wrong size on GameBelongingsCoin_AddCoin");
static_assert(offsetof(GameBelongingsCoin_AddCoin, Param) == 0x000000, "Member 'GameBelongingsCoin_AddCoin::Param' has a wrong offset!");
static_assert(offsetof(GameBelongingsCoin_AddCoin, ReturnValue) == 0x000018, "Member 'GameBelongingsCoin_AddCoin::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameBelongingsCoin_Clone final
{
public:
	class UGameBelongingsCoin*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_Clone) == 0x000008, "Wrong alignment on GameBelongingsCoin_Clone");
static_assert(sizeof(GameBelongingsCoin_Clone) == 0x000008, "Wrong size on GameBelongingsCoin_Clone");
static_assert(offsetof(GameBelongingsCoin_Clone, ReturnValue) == 0x000000, "Member 'GameBelongingsCoin_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameBelongingsCoin_Overwrite final
{
public:
	class UGameBelongingsCoin*                    game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_Overwrite) == 0x000008, "Wrong alignment on GameBelongingsCoin_Overwrite");
static_assert(sizeof(GameBelongingsCoin_Overwrite) == 0x000008, "Wrong size on GameBelongingsCoin_Overwrite");
static_assert(offsetof(GameBelongingsCoin_Overwrite, game_data) == 0x000000, "Member 'GameBelongingsCoin_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.RemoveCoin
// 0x0004 (0x0004 - 0x0000)
struct GameBelongingsCoin_RemoveCoin final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_RemoveCoin) == 0x000004, "Wrong alignment on GameBelongingsCoin_RemoveCoin");
static_assert(sizeof(GameBelongingsCoin_RemoveCoin) == 0x000004, "Wrong size on GameBelongingsCoin_RemoveCoin");
static_assert(offsetof(GameBelongingsCoin_RemoveCoin, Uid) == 0x000000, "Member 'GameBelongingsCoin_RemoveCoin::Uid' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.SetCoinMenuAutoEquip
// 0x0001 (0x0001 - 0x0000)
struct GameBelongingsCoin_SetCoinMenuAutoEquip final
{
public:
	ECoinAutoEquip                                CoinAutoEquip;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_SetCoinMenuAutoEquip) == 0x000001, "Wrong alignment on GameBelongingsCoin_SetCoinMenuAutoEquip");
static_assert(sizeof(GameBelongingsCoin_SetCoinMenuAutoEquip) == 0x000001, "Wrong size on GameBelongingsCoin_SetCoinMenuAutoEquip");
static_assert(offsetof(GameBelongingsCoin_SetCoinMenuAutoEquip, CoinAutoEquip) == 0x000000, "Member 'GameBelongingsCoin_SetCoinMenuAutoEquip::CoinAutoEquip' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.SetCoinMenuFilter
// 0x0010 (0x0010 - 0x0000)
struct GameBelongingsCoin_SetCoinMenuFilter final
{
public:
	TArray<ECoinFilter>                           CoinFilter;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_SetCoinMenuFilter) == 0x000008, "Wrong alignment on GameBelongingsCoin_SetCoinMenuFilter");
static_assert(sizeof(GameBelongingsCoin_SetCoinMenuFilter) == 0x000010, "Wrong size on GameBelongingsCoin_SetCoinMenuFilter");
static_assert(offsetof(GameBelongingsCoin_SetCoinMenuFilter, CoinFilter) == 0x000000, "Member 'GameBelongingsCoin_SetCoinMenuFilter::CoinFilter' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.SetCoinMenuSort
// 0x0001 (0x0001 - 0x0000)
struct GameBelongingsCoin_SetCoinMenuSort final
{
public:
	ECoinSort                                     CoinSort;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_SetCoinMenuSort) == 0x000001, "Wrong alignment on GameBelongingsCoin_SetCoinMenuSort");
static_assert(sizeof(GameBelongingsCoin_SetCoinMenuSort) == 0x000001, "Wrong size on GameBelongingsCoin_SetCoinMenuSort");
static_assert(offsetof(GameBelongingsCoin_SetCoinMenuSort, CoinSort) == 0x000000, "Member 'GameBelongingsCoin_SetCoinMenuSort::CoinSort' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.SetNew
// 0x0008 (0x0008 - 0x0000)
struct GameBelongingsCoin_SetNew final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBelongingsCoin_SetNew) == 0x000004, "Wrong alignment on GameBelongingsCoin_SetNew");
static_assert(sizeof(GameBelongingsCoin_SetNew) == 0x000008, "Wrong size on GameBelongingsCoin_SetNew");
static_assert(offsetof(GameBelongingsCoin_SetNew, Uid) == 0x000000, "Member 'GameBelongingsCoin_SetNew::Uid' has a wrong offset!");
static_assert(offsetof(GameBelongingsCoin_SetNew, IsNew) == 0x000004, "Member 'GameBelongingsCoin_SetNew::IsNew' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.GetCapacity
// 0x0004 (0x0004 - 0x0000)
struct GameBelongingsCoin_GetCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_GetCapacity) == 0x000004, "Wrong alignment on GameBelongingsCoin_GetCapacity");
static_assert(sizeof(GameBelongingsCoin_GetCapacity) == 0x000004, "Wrong size on GameBelongingsCoin_GetCapacity");
static_assert(offsetof(GameBelongingsCoin_GetCapacity, ReturnValue) == 0x000000, "Member 'GameBelongingsCoin_GetCapacity::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.GetCoin
// 0x0038 (0x0038 - 0x0000)
struct GameBelongingsCoin_GetCoin final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CoinData                           CoinData;                                          // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBelongingsCoin_GetCoin) == 0x000008, "Wrong alignment on GameBelongingsCoin_GetCoin");
static_assert(sizeof(GameBelongingsCoin_GetCoin) == 0x000038, "Wrong size on GameBelongingsCoin_GetCoin");
static_assert(offsetof(GameBelongingsCoin_GetCoin, Uid) == 0x000000, "Member 'GameBelongingsCoin_GetCoin::Uid' has a wrong offset!");
static_assert(offsetof(GameBelongingsCoin_GetCoin, CoinData) == 0x000008, "Member 'GameBelongingsCoin_GetCoin::CoinData' has a wrong offset!");
static_assert(offsetof(GameBelongingsCoin_GetCoin, ReturnValue) == 0x000030, "Member 'GameBelongingsCoin_GetCoin::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.GetCoinAll
// 0x0050 (0x0050 - 0x0000)
struct GameBelongingsCoin_GetCoinAll final
{
public:
	TMap<int32, struct FST_CoinData>              ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_GetCoinAll) == 0x000008, "Wrong alignment on GameBelongingsCoin_GetCoinAll");
static_assert(sizeof(GameBelongingsCoin_GetCoinAll) == 0x000050, "Wrong size on GameBelongingsCoin_GetCoinAll");
static_assert(offsetof(GameBelongingsCoin_GetCoinAll, ReturnValue) == 0x000000, "Member 'GameBelongingsCoin_GetCoinAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.GetCoinMenuAutoEquip
// 0x0001 (0x0001 - 0x0000)
struct GameBelongingsCoin_GetCoinMenuAutoEquip final
{
public:
	ECoinAutoEquip                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_GetCoinMenuAutoEquip) == 0x000001, "Wrong alignment on GameBelongingsCoin_GetCoinMenuAutoEquip");
static_assert(sizeof(GameBelongingsCoin_GetCoinMenuAutoEquip) == 0x000001, "Wrong size on GameBelongingsCoin_GetCoinMenuAutoEquip");
static_assert(offsetof(GameBelongingsCoin_GetCoinMenuAutoEquip, ReturnValue) == 0x000000, "Member 'GameBelongingsCoin_GetCoinMenuAutoEquip::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.GetCoinMenuFilter
// 0x0010 (0x0010 - 0x0000)
struct GameBelongingsCoin_GetCoinMenuFilter final
{
public:
	TArray<ECoinFilter>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_GetCoinMenuFilter) == 0x000008, "Wrong alignment on GameBelongingsCoin_GetCoinMenuFilter");
static_assert(sizeof(GameBelongingsCoin_GetCoinMenuFilter) == 0x000010, "Wrong size on GameBelongingsCoin_GetCoinMenuFilter");
static_assert(offsetof(GameBelongingsCoin_GetCoinMenuFilter, ReturnValue) == 0x000000, "Member 'GameBelongingsCoin_GetCoinMenuFilter::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsCoin.GetCoinMenuSort
// 0x0001 (0x0001 - 0x0000)
struct GameBelongingsCoin_GetCoinMenuSort final
{
public:
	ECoinSort                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsCoin_GetCoinMenuSort) == 0x000001, "Wrong alignment on GameBelongingsCoin_GetCoinMenuSort");
static_assert(sizeof(GameBelongingsCoin_GetCoinMenuSort) == 0x000001, "Wrong size on GameBelongingsCoin_GetCoinMenuSort");
static_assert(offsetof(GameBelongingsCoin_GetCoinMenuSort, ReturnValue) == 0x000000, "Member 'GameBelongingsCoin_GetCoinMenuSort::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnergyMaterialControlComponent.AddEnergyValue
// 0x0004 (0x0004 - 0x0000)
struct EnergyMaterialControlComponent_AddEnergyValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnergyMaterialControlComponent_AddEnergyValue) == 0x000004, "Wrong alignment on EnergyMaterialControlComponent_AddEnergyValue");
static_assert(sizeof(EnergyMaterialControlComponent_AddEnergyValue) == 0x000004, "Wrong size on EnergyMaterialControlComponent_AddEnergyValue");
static_assert(offsetof(EnergyMaterialControlComponent_AddEnergyValue, Value) == 0x000000, "Member 'EnergyMaterialControlComponent_AddEnergyValue::Value' has a wrong offset!");

// Function DarwinGame.EnergyMaterialControlComponent.SetEnergyValue
// 0x0004 (0x0004 - 0x0000)
struct EnergyMaterialControlComponent_SetEnergyValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnergyMaterialControlComponent_SetEnergyValue) == 0x000004, "Wrong alignment on EnergyMaterialControlComponent_SetEnergyValue");
static_assert(sizeof(EnergyMaterialControlComponent_SetEnergyValue) == 0x000004, "Wrong size on EnergyMaterialControlComponent_SetEnergyValue");
static_assert(offsetof(EnergyMaterialControlComponent_SetEnergyValue, Value) == 0x000000, "Member 'EnergyMaterialControlComponent_SetEnergyValue::Value' has a wrong offset!");

// Function DarwinGame.EnergyMaterialControlComponent.ToRelease
// 0x0004 (0x0004 - 0x0000)
struct EnergyMaterialControlComponent_ToRelease final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnergyMaterialControlComponent_ToRelease) == 0x000004, "Wrong alignment on EnergyMaterialControlComponent_ToRelease");
static_assert(sizeof(EnergyMaterialControlComponent_ToRelease) == 0x000004, "Wrong size on EnergyMaterialControlComponent_ToRelease");
static_assert(offsetof(EnergyMaterialControlComponent_ToRelease, Time) == 0x000000, "Member 'EnergyMaterialControlComponent_ToRelease::Time' has a wrong offset!");

// Function DarwinGame.EnergyMaterialControlComponent.ToSeal
// 0x0004 (0x0004 - 0x0000)
struct EnergyMaterialControlComponent_ToSeal final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnergyMaterialControlComponent_ToSeal) == 0x000004, "Wrong alignment on EnergyMaterialControlComponent_ToSeal");
static_assert(sizeof(EnergyMaterialControlComponent_ToSeal) == 0x000004, "Wrong size on EnergyMaterialControlComponent_ToSeal");
static_assert(offsetof(EnergyMaterialControlComponent_ToSeal, Time) == 0x000000, "Member 'EnergyMaterialControlComponent_ToSeal::Time' has a wrong offset!");

// Function DarwinGame.EffectBase.ChangePhase
// 0x0001 (0x0001 - 0x0000)
struct EffectBase_ChangePhase final
{
public:
	EEffectProgress                               NextPhase_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_ChangePhase) == 0x000001, "Wrong alignment on EffectBase_ChangePhase");
static_assert(sizeof(EffectBase_ChangePhase) == 0x000001, "Wrong size on EffectBase_ChangePhase");
static_assert(offsetof(EffectBase_ChangePhase, NextPhase_0) == 0x000000, "Member 'EffectBase_ChangePhase::NextPhase_0' has a wrong offset!");

// Function DarwinGame.EffectBase.ChangePhaseTrail
// 0x0028 (0x0028 - 0x0000)
struct EffectBase_ChangePhaseTrail final
{
public:
	EEffectProgress                               NextPhase_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   soket_A;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   soket_B;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               Mode;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_ChangePhaseTrail) == 0x000008, "Wrong alignment on EffectBase_ChangePhaseTrail");
static_assert(sizeof(EffectBase_ChangePhaseTrail) == 0x000028, "Wrong size on EffectBase_ChangePhaseTrail");
static_assert(offsetof(EffectBase_ChangePhaseTrail, NextPhase_0) == 0x000000, "Member 'EffectBase_ChangePhaseTrail::NextPhase_0' has a wrong offset!");
static_assert(offsetof(EffectBase_ChangePhaseTrail, Parent) == 0x000008, "Member 'EffectBase_ChangePhaseTrail::Parent' has a wrong offset!");
static_assert(offsetof(EffectBase_ChangePhaseTrail, soket_A) == 0x000010, "Member 'EffectBase_ChangePhaseTrail::soket_A' has a wrong offset!");
static_assert(offsetof(EffectBase_ChangePhaseTrail, soket_B) == 0x000018, "Member 'EffectBase_ChangePhaseTrail::soket_B' has a wrong offset!");
static_assert(offsetof(EffectBase_ChangePhaseTrail, Mode) == 0x000020, "Member 'EffectBase_ChangePhaseTrail::Mode' has a wrong offset!");
static_assert(offsetof(EffectBase_ChangePhaseTrail, Width) == 0x000024, "Member 'EffectBase_ChangePhaseTrail::Width' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinAttachToActor
// 0x0018 (0x0018 - 0x0000)
struct EffectBase_DarwinAttachToActor final
{
public:
	class AActor*                                 Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDarwinCoordRule                              scale_rule;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EffectBase_DarwinAttachToActor) == 0x000008, "Wrong alignment on EffectBase_DarwinAttachToActor");
static_assert(sizeof(EffectBase_DarwinAttachToActor) == 0x000018, "Wrong size on EffectBase_DarwinAttachToActor");
static_assert(offsetof(EffectBase_DarwinAttachToActor, Parent) == 0x000000, "Member 'EffectBase_DarwinAttachToActor::Parent' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinAttachToActor, socket) == 0x000008, "Member 'EffectBase_DarwinAttachToActor::socket' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinAttachToActor, scale_rule) == 0x000010, "Member 'EffectBase_DarwinAttachToActor::scale_rule' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinAttachToComponent
// 0x0018 (0x0018 - 0x0000)
struct EffectBase_DarwinAttachToComponent final
{
public:
	class USceneComponent*                        Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDarwinCoordRule                              scale_rule;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EffectBase_DarwinAttachToComponent) == 0x000008, "Wrong alignment on EffectBase_DarwinAttachToComponent");
static_assert(sizeof(EffectBase_DarwinAttachToComponent) == 0x000018, "Wrong size on EffectBase_DarwinAttachToComponent");
static_assert(offsetof(EffectBase_DarwinAttachToComponent, Parent) == 0x000000, "Member 'EffectBase_DarwinAttachToComponent::Parent' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinAttachToComponent, socket) == 0x000008, "Member 'EffectBase_DarwinAttachToComponent::socket' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinAttachToComponent, scale_rule) == 0x000010, "Member 'EffectBase_DarwinAttachToComponent::scale_rule' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetLocation
// 0x0010 (0x0010 - 0x0000)
struct EffectBase_DarwinSetLocation final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetLocation) == 0x000004, "Wrong alignment on EffectBase_DarwinSetLocation");
static_assert(sizeof(EffectBase_DarwinSetLocation) == 0x000010, "Wrong size on EffectBase_DarwinSetLocation");
static_assert(offsetof(EffectBase_DarwinSetLocation, Rule) == 0x000000, "Member 'EffectBase_DarwinSetLocation::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetLocation, Location) == 0x000004, "Member 'EffectBase_DarwinSetLocation::Location' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetLocationAndRotator
// 0x001C (0x001C - 0x0000)
struct EffectBase_DarwinSetLocationAndRotator final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetLocationAndRotator) == 0x000004, "Wrong alignment on EffectBase_DarwinSetLocationAndRotator");
static_assert(sizeof(EffectBase_DarwinSetLocationAndRotator) == 0x00001C, "Wrong size on EffectBase_DarwinSetLocationAndRotator");
static_assert(offsetof(EffectBase_DarwinSetLocationAndRotator, Rule) == 0x000000, "Member 'EffectBase_DarwinSetLocationAndRotator::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetLocationAndRotator, Location) == 0x000004, "Member 'EffectBase_DarwinSetLocationAndRotator::Location' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetLocationAndRotator, Rotator) == 0x000010, "Member 'EffectBase_DarwinSetLocationAndRotator::Rotator' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetLocationAndScale
// 0x001C (0x001C - 0x0000)
struct EffectBase_DarwinSetLocationAndScale final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetLocationAndScale) == 0x000004, "Wrong alignment on EffectBase_DarwinSetLocationAndScale");
static_assert(sizeof(EffectBase_DarwinSetLocationAndScale) == 0x00001C, "Wrong size on EffectBase_DarwinSetLocationAndScale");
static_assert(offsetof(EffectBase_DarwinSetLocationAndScale, Rule) == 0x000000, "Member 'EffectBase_DarwinSetLocationAndScale::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetLocationAndScale, Location) == 0x000004, "Member 'EffectBase_DarwinSetLocationAndScale::Location' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetLocationAndScale, Scale) == 0x000010, "Member 'EffectBase_DarwinSetLocationAndScale::Scale' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetRotator
// 0x0010 (0x0010 - 0x0000)
struct EffectBase_DarwinSetRotator final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotator;                                           // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetRotator) == 0x000004, "Wrong alignment on EffectBase_DarwinSetRotator");
static_assert(sizeof(EffectBase_DarwinSetRotator) == 0x000010, "Wrong size on EffectBase_DarwinSetRotator");
static_assert(offsetof(EffectBase_DarwinSetRotator, Rule) == 0x000000, "Member 'EffectBase_DarwinSetRotator::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetRotator, Rotator) == 0x000004, "Member 'EffectBase_DarwinSetRotator::Rotator' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetRotatorAndScale
// 0x001C (0x001C - 0x0000)
struct EffectBase_DarwinSetRotatorAndScale final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotator;                                           // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetRotatorAndScale) == 0x000004, "Wrong alignment on EffectBase_DarwinSetRotatorAndScale");
static_assert(sizeof(EffectBase_DarwinSetRotatorAndScale) == 0x00001C, "Wrong size on EffectBase_DarwinSetRotatorAndScale");
static_assert(offsetof(EffectBase_DarwinSetRotatorAndScale, Rule) == 0x000000, "Member 'EffectBase_DarwinSetRotatorAndScale::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetRotatorAndScale, Rotator) == 0x000004, "Member 'EffectBase_DarwinSetRotatorAndScale::Rotator' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetRotatorAndScale, Scale) == 0x000010, "Member 'EffectBase_DarwinSetRotatorAndScale::Scale' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetScale
// 0x0010 (0x0010 - 0x0000)
struct EffectBase_DarwinSetScale final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetScale) == 0x000004, "Wrong alignment on EffectBase_DarwinSetScale");
static_assert(sizeof(EffectBase_DarwinSetScale) == 0x000010, "Wrong size on EffectBase_DarwinSetScale");
static_assert(offsetof(EffectBase_DarwinSetScale, Rule) == 0x000000, "Member 'EffectBase_DarwinSetScale::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetScale, Scale) == 0x000004, "Member 'EffectBase_DarwinSetScale::Scale' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetScaleFromSize
// 0x0002 (0x0002 - 0x0000)
struct EffectBase_DarwinSetScaleFromSize final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 SizeID;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetScaleFromSize) == 0x000001, "Wrong alignment on EffectBase_DarwinSetScaleFromSize");
static_assert(sizeof(EffectBase_DarwinSetScaleFromSize) == 0x000002, "Wrong size on EffectBase_DarwinSetScaleFromSize");
static_assert(offsetof(EffectBase_DarwinSetScaleFromSize, Rule) == 0x000000, "Member 'EffectBase_DarwinSetScaleFromSize::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetScaleFromSize, SizeID) == 0x000001, "Member 'EffectBase_DarwinSetScaleFromSize::SizeID' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetTransform
// 0x0028 (0x0028 - 0x0000)
struct EffectBase_DarwinSetTransform final
{
public:
	EDarwinCoordRule                              Rule;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetTransform) == 0x000004, "Wrong alignment on EffectBase_DarwinSetTransform");
static_assert(sizeof(EffectBase_DarwinSetTransform) == 0x000028, "Wrong size on EffectBase_DarwinSetTransform");
static_assert(offsetof(EffectBase_DarwinSetTransform, Rule) == 0x000000, "Member 'EffectBase_DarwinSetTransform::Rule' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetTransform, Location) == 0x000004, "Member 'EffectBase_DarwinSetTransform::Location' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetTransform, Rotator) == 0x000010, "Member 'EffectBase_DarwinSetTransform::Rotator' has a wrong offset!");
static_assert(offsetof(EffectBase_DarwinSetTransform, Scale) == 0x00001C, "Member 'EffectBase_DarwinSetTransform::Scale' has a wrong offset!");

// Function DarwinGame.EffectBase.DarwinSetUsingAbsoluteRotation
// 0x0001 (0x0001 - 0x0000)
struct EffectBase_DarwinSetUsingAbsoluteRotation final
{
public:
	bool                                          IsAbsoluteRotation;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_DarwinSetUsingAbsoluteRotation) == 0x000001, "Wrong alignment on EffectBase_DarwinSetUsingAbsoluteRotation");
static_assert(sizeof(EffectBase_DarwinSetUsingAbsoluteRotation) == 0x000001, "Wrong size on EffectBase_DarwinSetUsingAbsoluteRotation");
static_assert(offsetof(EffectBase_DarwinSetUsingAbsoluteRotation, IsAbsoluteRotation) == 0x000000, "Member 'EffectBase_DarwinSetUsingAbsoluteRotation::IsAbsoluteRotation' has a wrong offset!");

// Function DarwinGame.EffectBase.NextPhaseTrail
// 0x0020 (0x0020 - 0x0000)
struct EffectBase_NextPhaseTrail final
{
public:
	class USceneComponent*                        Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   soket_A;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   soket_B;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               Mode;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_NextPhaseTrail) == 0x000008, "Wrong alignment on EffectBase_NextPhaseTrail");
static_assert(sizeof(EffectBase_NextPhaseTrail) == 0x000020, "Wrong size on EffectBase_NextPhaseTrail");
static_assert(offsetof(EffectBase_NextPhaseTrail, Parent) == 0x000000, "Member 'EffectBase_NextPhaseTrail::Parent' has a wrong offset!");
static_assert(offsetof(EffectBase_NextPhaseTrail, soket_A) == 0x000008, "Member 'EffectBase_NextPhaseTrail::soket_A' has a wrong offset!");
static_assert(offsetof(EffectBase_NextPhaseTrail, soket_B) == 0x000010, "Member 'EffectBase_NextPhaseTrail::soket_B' has a wrong offset!");
static_assert(offsetof(EffectBase_NextPhaseTrail, Mode) == 0x000018, "Member 'EffectBase_NextPhaseTrail::Mode' has a wrong offset!");
static_assert(offsetof(EffectBase_NextPhaseTrail, Width) == 0x00001C, "Member 'EffectBase_NextPhaseTrail::Width' has a wrong offset!");

// Function DarwinGame.EffectBase.ParticleDelayPlay
// 0x0010 (0x0010 - 0x0000)
struct EffectBase_ParticleDelayPlay final
{
public:
	struct FTimerHandle                           Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExtendParticleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_ParticleDelayPlay) == 0x000008, "Wrong alignment on EffectBase_ParticleDelayPlay");
static_assert(sizeof(EffectBase_ParticleDelayPlay) == 0x000010, "Wrong size on EffectBase_ParticleDelayPlay");
static_assert(offsetof(EffectBase_ParticleDelayPlay, Handle) == 0x000000, "Member 'EffectBase_ParticleDelayPlay::Handle' has a wrong offset!");
static_assert(offsetof(EffectBase_ParticleDelayPlay, Component) == 0x000008, "Member 'EffectBase_ParticleDelayPlay::Component' has a wrong offset!");

// Function DarwinGame.EffectBase.Pause
// 0x0001 (0x0001 - 0x0000)
struct EffectBase_Pause final
{
public:
	bool                                          isPause;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_Pause) == 0x000001, "Wrong alignment on EffectBase_Pause");
static_assert(sizeof(EffectBase_Pause) == 0x000001, "Wrong size on EffectBase_Pause");
static_assert(offsetof(EffectBase_Pause, isPause) == 0x000000, "Member 'EffectBase_Pause::isPause' has a wrong offset!");

// Function DarwinGame.EffectBase.PauseEmit
// 0x0001 (0x0001 - 0x0000)
struct EffectBase_PauseEmit final
{
public:
	bool                                          isPause;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_PauseEmit) == 0x000001, "Wrong alignment on EffectBase_PauseEmit");
static_assert(sizeof(EffectBase_PauseEmit) == 0x000001, "Wrong size on EffectBase_PauseEmit");
static_assert(offsetof(EffectBase_PauseEmit, isPause) == 0x000000, "Member 'EffectBase_PauseEmit::isPause' has a wrong offset!");

// Function DarwinGame.EffectBase.PlaySound
// 0x0008 (0x0008 - 0x0000)
struct EffectBase_PlaySound final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_PlaySound) == 0x000004, "Wrong alignment on EffectBase_PlaySound");
static_assert(sizeof(EffectBase_PlaySound) == 0x000008, "Wrong size on EffectBase_PlaySound");
static_assert(offsetof(EffectBase_PlaySound, EffectId) == 0x000000, "Member 'EffectBase_PlaySound::EffectId' has a wrong offset!");

// Function DarwinGame.EffectBase.PlayTrail
// 0x0020 (0x0020 - 0x0000)
struct EffectBase_PlayTrail final
{
public:
	class USceneComponent*                        Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   soket_A;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   soket_B;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               Mode;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_PlayTrail) == 0x000008, "Wrong alignment on EffectBase_PlayTrail");
static_assert(sizeof(EffectBase_PlayTrail) == 0x000020, "Wrong size on EffectBase_PlayTrail");
static_assert(offsetof(EffectBase_PlayTrail, Parent) == 0x000000, "Member 'EffectBase_PlayTrail::Parent' has a wrong offset!");
static_assert(offsetof(EffectBase_PlayTrail, soket_A) == 0x000008, "Member 'EffectBase_PlayTrail::soket_A' has a wrong offset!");
static_assert(offsetof(EffectBase_PlayTrail, soket_B) == 0x000010, "Member 'EffectBase_PlayTrail::soket_B' has a wrong offset!");
static_assert(offsetof(EffectBase_PlayTrail, Mode) == 0x000018, "Member 'EffectBase_PlayTrail::Mode' has a wrong offset!");
static_assert(offsetof(EffectBase_PlayTrail, Width) == 0x00001C, "Member 'EffectBase_PlayTrail::Width' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamSourcePoint
// 0x0014 (0x0014 - 0x0000)
struct EffectBase_SetBeamSourcePoint final
{
public:
	int32                                         EmitterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewSourcePoint;                                    // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamSourcePoint) == 0x000004, "Wrong alignment on EffectBase_SetBeamSourcePoint");
static_assert(sizeof(EffectBase_SetBeamSourcePoint) == 0x000014, "Wrong size on EffectBase_SetBeamSourcePoint");
static_assert(offsetof(EffectBase_SetBeamSourcePoint, EmitterIndex) == 0x000000, "Member 'EffectBase_SetBeamSourcePoint::EmitterIndex' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamSourcePoint, NewSourcePoint) == 0x000004, "Member 'EffectBase_SetBeamSourcePoint::NewSourcePoint' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamSourcePoint, SourceIndex) == 0x000010, "Member 'EffectBase_SetBeamSourcePoint::SourceIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamSourcePointAllEmitters
// 0x0010 (0x0010 - 0x0000)
struct EffectBase_SetBeamSourcePointAllEmitters final
{
public:
	struct FVector                                NewSourcePoint;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamSourcePointAllEmitters) == 0x000004, "Wrong alignment on EffectBase_SetBeamSourcePointAllEmitters");
static_assert(sizeof(EffectBase_SetBeamSourcePointAllEmitters) == 0x000010, "Wrong size on EffectBase_SetBeamSourcePointAllEmitters");
static_assert(offsetof(EffectBase_SetBeamSourcePointAllEmitters, NewSourcePoint) == 0x000000, "Member 'EffectBase_SetBeamSourcePointAllEmitters::NewSourcePoint' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamSourcePointAllEmitters, SourceIndex) == 0x00000C, "Member 'EffectBase_SetBeamSourcePointAllEmitters::SourceIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamSourceStrength
// 0x000C (0x000C - 0x0000)
struct EffectBase_SetBeamSourceStrength final
{
public:
	int32                                         EmitterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewSourceStrength;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamSourceStrength) == 0x000004, "Wrong alignment on EffectBase_SetBeamSourceStrength");
static_assert(sizeof(EffectBase_SetBeamSourceStrength) == 0x00000C, "Wrong size on EffectBase_SetBeamSourceStrength");
static_assert(offsetof(EffectBase_SetBeamSourceStrength, EmitterIndex) == 0x000000, "Member 'EffectBase_SetBeamSourceStrength::EmitterIndex' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamSourceStrength, NewSourceStrength) == 0x000004, "Member 'EffectBase_SetBeamSourceStrength::NewSourceStrength' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamSourceStrength, SourceIndex) == 0x000008, "Member 'EffectBase_SetBeamSourceStrength::SourceIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamSourceTangent
// 0x0014 (0x0014 - 0x0000)
struct EffectBase_SetBeamSourceTangent final
{
public:
	int32                                         EmitterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewTangentPoint;                                   // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamSourceTangent) == 0x000004, "Wrong alignment on EffectBase_SetBeamSourceTangent");
static_assert(sizeof(EffectBase_SetBeamSourceTangent) == 0x000014, "Wrong size on EffectBase_SetBeamSourceTangent");
static_assert(offsetof(EffectBase_SetBeamSourceTangent, EmitterIndex) == 0x000000, "Member 'EffectBase_SetBeamSourceTangent::EmitterIndex' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamSourceTangent, NewTangentPoint) == 0x000004, "Member 'EffectBase_SetBeamSourceTangent::NewTangentPoint' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamSourceTangent, SourceIndex) == 0x000010, "Member 'EffectBase_SetBeamSourceTangent::SourceIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamTargetPoint
// 0x0014 (0x0014 - 0x0000)
struct EffectBase_SetBeamTargetPoint final
{
public:
	int32                                         EmitterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewTargetPoint;                                    // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamTargetPoint) == 0x000004, "Wrong alignment on EffectBase_SetBeamTargetPoint");
static_assert(sizeof(EffectBase_SetBeamTargetPoint) == 0x000014, "Wrong size on EffectBase_SetBeamTargetPoint");
static_assert(offsetof(EffectBase_SetBeamTargetPoint, EmitterIndex) == 0x000000, "Member 'EffectBase_SetBeamTargetPoint::EmitterIndex' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamTargetPoint, NewTargetPoint) == 0x000004, "Member 'EffectBase_SetBeamTargetPoint::NewTargetPoint' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamTargetPoint, TargetIndex) == 0x000010, "Member 'EffectBase_SetBeamTargetPoint::TargetIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamTargetPointAllEmitters
// 0x0010 (0x0010 - 0x0000)
struct EffectBase_SetBeamTargetPointAllEmitters final
{
public:
	struct FVector                                NewTargetPoint;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamTargetPointAllEmitters) == 0x000004, "Wrong alignment on EffectBase_SetBeamTargetPointAllEmitters");
static_assert(sizeof(EffectBase_SetBeamTargetPointAllEmitters) == 0x000010, "Wrong size on EffectBase_SetBeamTargetPointAllEmitters");
static_assert(offsetof(EffectBase_SetBeamTargetPointAllEmitters, NewTargetPoint) == 0x000000, "Member 'EffectBase_SetBeamTargetPointAllEmitters::NewTargetPoint' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamTargetPointAllEmitters, TargetIndex) == 0x00000C, "Member 'EffectBase_SetBeamTargetPointAllEmitters::TargetIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamTargetStrength
// 0x000C (0x000C - 0x0000)
struct EffectBase_SetBeamTargetStrength final
{
public:
	int32                                         EmitterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTargetStrength;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamTargetStrength) == 0x000004, "Wrong alignment on EffectBase_SetBeamTargetStrength");
static_assert(sizeof(EffectBase_SetBeamTargetStrength) == 0x00000C, "Wrong size on EffectBase_SetBeamTargetStrength");
static_assert(offsetof(EffectBase_SetBeamTargetStrength, EmitterIndex) == 0x000000, "Member 'EffectBase_SetBeamTargetStrength::EmitterIndex' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamTargetStrength, NewTargetStrength) == 0x000004, "Member 'EffectBase_SetBeamTargetStrength::NewTargetStrength' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamTargetStrength, TargetIndex) == 0x000008, "Member 'EffectBase_SetBeamTargetStrength::TargetIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.SetBeamTargetTangent
// 0x0014 (0x0014 - 0x0000)
struct EffectBase_SetBeamTargetTangent final
{
public:
	int32                                         EmitterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewTangentPoint;                                   // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_SetBeamTargetTangent) == 0x000004, "Wrong alignment on EffectBase_SetBeamTargetTangent");
static_assert(sizeof(EffectBase_SetBeamTargetTangent) == 0x000014, "Wrong size on EffectBase_SetBeamTargetTangent");
static_assert(offsetof(EffectBase_SetBeamTargetTangent, EmitterIndex) == 0x000000, "Member 'EffectBase_SetBeamTargetTangent::EmitterIndex' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamTargetTangent, NewTangentPoint) == 0x000004, "Member 'EffectBase_SetBeamTargetTangent::NewTangentPoint' has a wrong offset!");
static_assert(offsetof(EffectBase_SetBeamTargetTangent, TargetIndex) == 0x000010, "Member 'EffectBase_SetBeamTargetTangent::TargetIndex' has a wrong offset!");

// Function DarwinGame.EffectBase.GetCurrentPhase
// 0x0001 (0x0001 - 0x0000)
struct EffectBase_GetCurrentPhase final
{
public:
	EEffectProgress                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_GetCurrentPhase) == 0x000001, "Wrong alignment on EffectBase_GetCurrentPhase");
static_assert(sizeof(EffectBase_GetCurrentPhase) == 0x000001, "Wrong size on EffectBase_GetCurrentPhase");
static_assert(offsetof(EffectBase_GetCurrentPhase, ReturnValue) == 0x000000, "Member 'EffectBase_GetCurrentPhase::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectBase.GetEffectID
// 0x0008 (0x0008 - 0x0000)
struct EffectBase_GetEffectID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_GetEffectID) == 0x000004, "Wrong alignment on EffectBase_GetEffectID");
static_assert(sizeof(EffectBase_GetEffectID) == 0x000008, "Wrong size on EffectBase_GetEffectID");
static_assert(offsetof(EffectBase_GetEffectID, ReturnValue) == 0x000000, "Member 'EffectBase_GetEffectID::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectBase.GetPhasePlayComplete
// 0x0001 (0x0001 - 0x0000)
struct EffectBase_GetPhasePlayComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_GetPhasePlayComplete) == 0x000001, "Wrong alignment on EffectBase_GetPhasePlayComplete");
static_assert(sizeof(EffectBase_GetPhasePlayComplete) == 0x000001, "Wrong size on EffectBase_GetPhasePlayComplete");
static_assert(offsetof(EffectBase_GetPhasePlayComplete, ReturnValue) == 0x000000, "Member 'EffectBase_GetPhasePlayComplete::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectBase.IsComplete
// 0x0001 (0x0001 - 0x0000)
struct EffectBase_IsComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectBase_IsComplete) == 0x000001, "Wrong alignment on EffectBase_IsComplete");
static_assert(sizeof(EffectBase_IsComplete) == 0x000001, "Wrong size on EffectBase_IsComplete");
static_assert(offsetof(EffectBase_IsComplete, ReturnValue) == 0x000000, "Member 'EffectBase_IsComplete::ReturnValue' has a wrong offset!");

// Function DarwinGame.UICharAdd_Base.IsPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct UICharAdd_Base_IsPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICharAdd_Base_IsPressedDecide) == 0x000001, "Wrong alignment on UICharAdd_Base_IsPressedDecide");
static_assert(sizeof(UICharAdd_Base_IsPressedDecide) == 0x000001, "Wrong size on UICharAdd_Base_IsPressedDecide");
static_assert(offsetof(UICharAdd_Base_IsPressedDecide, ReturnValue) == 0x000000, "Member 'UICharAdd_Base_IsPressedDecide::ReturnValue' has a wrong offset!");

// Function DarwinGame.UICharAdd_Base.SetNpc
// 0x000C (0x000C - 0x0000)
struct UICharAdd_Base_SetNpc final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamForce                               Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UICharAdd_Base_SetNpc) == 0x000004, "Wrong alignment on UICharAdd_Base_SetNpc");
static_assert(sizeof(UICharAdd_Base_SetNpc) == 0x00000C, "Wrong size on UICharAdd_Base_SetNpc");
static_assert(offsetof(UICharAdd_Base_SetNpc, NpcID) == 0x000000, "Member 'UICharAdd_Base_SetNpc::NpcID' has a wrong offset!");
static_assert(offsetof(UICharAdd_Base_SetNpc, Team) == 0x000008, "Member 'UICharAdd_Base_SetNpc::Team' has a wrong offset!");

// Function DarwinGame.EmoteFaceDataTable.GetFaceParameter
// 0x0010 (0x0010 - 0x0000)
struct EmoteFaceDataTable_GetFaceParameter final
{
public:
	EEmoteFaceType                                FaceType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteFace                             outFace;                                           // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEmoteFaceSetting                      outSetting;                                        // 0x0008(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EmoteFaceDataTable_GetFaceParameter) == 0x000004, "Wrong alignment on EmoteFaceDataTable_GetFaceParameter");
static_assert(sizeof(EmoteFaceDataTable_GetFaceParameter) == 0x000010, "Wrong size on EmoteFaceDataTable_GetFaceParameter");
static_assert(offsetof(EmoteFaceDataTable_GetFaceParameter, FaceType) == 0x000000, "Member 'EmoteFaceDataTable_GetFaceParameter::FaceType' has a wrong offset!");
static_assert(offsetof(EmoteFaceDataTable_GetFaceParameter, outFace) == 0x000004, "Member 'EmoteFaceDataTable_GetFaceParameter::outFace' has a wrong offset!");
static_assert(offsetof(EmoteFaceDataTable_GetFaceParameter, outSetting) == 0x000008, "Member 'EmoteFaceDataTable_GetFaceParameter::outSetting' has a wrong offset!");
static_assert(offsetof(EmoteFaceDataTable_GetFaceParameter, ReturnValue) == 0x00000C, "Member 'EmoteFaceDataTable_GetFaceParameter::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldActionAbility.SetTurnAngle
// 0x0004 (0x0004 - 0x0000)
struct FieldActionAbility_SetTurnAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldActionAbility_SetTurnAngle) == 0x000004, "Wrong alignment on FieldActionAbility_SetTurnAngle");
static_assert(sizeof(FieldActionAbility_SetTurnAngle) == 0x000004, "Wrong size on FieldActionAbility_SetTurnAngle");
static_assert(offsetof(FieldActionAbility_SetTurnAngle, Angle) == 0x000000, "Member 'FieldActionAbility_SetTurnAngle::Angle' has a wrong offset!");

// Function DarwinGame.FieldActionAbility.StartSevenStoneDirection
// 0x0001 (0x0001 - 0x0000)
struct FieldActionAbility_StartSevenStoneDirection final
{
public:
	ESevenStoneDirectionType                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldActionAbility_StartSevenStoneDirection) == 0x000001, "Wrong alignment on FieldActionAbility_StartSevenStoneDirection");
static_assert(sizeof(FieldActionAbility_StartSevenStoneDirection) == 0x000001, "Wrong size on FieldActionAbility_StartSevenStoneDirection");
static_assert(offsetof(FieldActionAbility_StartSevenStoneDirection, Type) == 0x000000, "Member 'FieldActionAbility_StartSevenStoneDirection::Type' has a wrong offset!");

// Function DarwinGame.FieldActionAbility.GetParkourData
// 0x002C (0x002C - 0x0000)
struct FieldActionAbility_GetParkourData final
{
public:
	struct FParkour                               ReturnValue;                                       // 0x0000(0x002C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldActionAbility_GetParkourData) == 0x000004, "Wrong alignment on FieldActionAbility_GetParkourData");
static_assert(sizeof(FieldActionAbility_GetParkourData) == 0x00002C, "Wrong size on FieldActionAbility_GetParkourData");
static_assert(offsetof(FieldActionAbility_GetParkourData, ReturnValue) == 0x000000, "Member 'FieldActionAbility_GetParkourData::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldActionAbility.GetTurnRotation
// 0x000C (0x000C - 0x0000)
struct FieldActionAbility_GetTurnRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldActionAbility_GetTurnRotation) == 0x000004, "Wrong alignment on FieldActionAbility_GetTurnRotation");
static_assert(sizeof(FieldActionAbility_GetTurnRotation) == 0x00000C, "Wrong size on FieldActionAbility_GetTurnRotation");
static_assert(offsetof(FieldActionAbility_GetTurnRotation, ReturnValue) == 0x000000, "Member 'FieldActionAbility_GetTurnRotation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldActionAbility.IsDirectRotationAction
// 0x0001 (0x0001 - 0x0000)
struct FieldActionAbility_IsDirectRotationAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldActionAbility_IsDirectRotationAction) == 0x000001, "Wrong alignment on FieldActionAbility_IsDirectRotationAction");
static_assert(sizeof(FieldActionAbility_IsDirectRotationAction) == 0x000001, "Wrong size on FieldActionAbility_IsDirectRotationAction");
static_assert(offsetof(FieldActionAbility_IsDirectRotationAction, ReturnValue) == 0x000000, "Member 'FieldActionAbility_IsDirectRotationAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldActionAbility.IsRequiredRotationAction
// 0x0001 (0x0001 - 0x0000)
struct FieldActionAbility_IsRequiredRotationAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldActionAbility_IsRequiredRotationAction) == 0x000001, "Wrong alignment on FieldActionAbility_IsRequiredRotationAction");
static_assert(sizeof(FieldActionAbility_IsRequiredRotationAction) == 0x000001, "Wrong size on FieldActionAbility_IsRequiredRotationAction");
static_assert(offsetof(FieldActionAbility_IsRequiredRotationAction, ReturnValue) == 0x000000, "Member 'FieldActionAbility_IsRequiredRotationAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleSystemComponent.DeleteAttackCollision
// 0x0010 (0x0010 - 0x0000)
struct BattleSystemComponent_DeleteAttackCollision final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleSystemComponent_DeleteAttackCollision) == 0x000008, "Wrong alignment on BattleSystemComponent_DeleteAttackCollision");
static_assert(sizeof(BattleSystemComponent_DeleteAttackCollision) == 0x000010, "Wrong size on BattleSystemComponent_DeleteAttackCollision");
static_assert(offsetof(BattleSystemComponent_DeleteAttackCollision, OrderId) == 0x000000, "Member 'BattleSystemComponent_DeleteAttackCollision::OrderId' has a wrong offset!");

// Function DarwinGame.BattleSystemComponent.GenerateShootAttackCollision
// 0x0060 (0x0060 - 0x0000)
struct BattleSystemComponent_GenerateShootAttackCollision final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackCollisionID;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGameplayEffectContainerSpec     Spec;                                              // 0x0020(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AAttackCollisionBase*                   ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleSystemComponent_GenerateShootAttackCollision) == 0x000008, "Wrong alignment on BattleSystemComponent_GenerateShootAttackCollision");
static_assert(sizeof(BattleSystemComponent_GenerateShootAttackCollision) == 0x000060, "Wrong size on BattleSystemComponent_GenerateShootAttackCollision");
static_assert(offsetof(BattleSystemComponent_GenerateShootAttackCollision, Target) == 0x000000, "Member 'BattleSystemComponent_GenerateShootAttackCollision::Target' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GenerateShootAttackCollision, actionDetailID) == 0x000008, "Member 'BattleSystemComponent_GenerateShootAttackCollision::actionDetailID' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GenerateShootAttackCollision, AttackCollisionID) == 0x000010, "Member 'BattleSystemComponent_GenerateShootAttackCollision::AttackCollisionID' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GenerateShootAttackCollision, Spec) == 0x000020, "Member 'BattleSystemComponent_GenerateShootAttackCollision::Spec' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GenerateShootAttackCollision, ReturnValue) == 0x000058, "Member 'BattleSystemComponent_GenerateShootAttackCollision::ReturnValue' has a wrong offset!");

// Function DarwinGame.BattleSystemComponent.GenerateTouchAttackCollision
// 0x0058 (0x0058 - 0x0000)
struct BattleSystemComponent_GenerateTouchAttackCollision final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackCollisionID;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGameplayEffectContainerSpec     Spec;                                              // 0x0020(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleSystemComponent_GenerateTouchAttackCollision) == 0x000008, "Wrong alignment on BattleSystemComponent_GenerateTouchAttackCollision");
static_assert(sizeof(BattleSystemComponent_GenerateTouchAttackCollision) == 0x000058, "Wrong size on BattleSystemComponent_GenerateTouchAttackCollision");
static_assert(offsetof(BattleSystemComponent_GenerateTouchAttackCollision, Target) == 0x000000, "Member 'BattleSystemComponent_GenerateTouchAttackCollision::Target' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GenerateTouchAttackCollision, actionDetailID) == 0x000008, "Member 'BattleSystemComponent_GenerateTouchAttackCollision::actionDetailID' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GenerateTouchAttackCollision, AttackCollisionID) == 0x000010, "Member 'BattleSystemComponent_GenerateTouchAttackCollision::AttackCollisionID' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GenerateTouchAttackCollision, Spec) == 0x000020, "Member 'BattleSystemComponent_GenerateTouchAttackCollision::Spec' has a wrong offset!");

// Function DarwinGame.BattleSystemComponent.GetAttackCollisionId
// 0x0018 (0x0018 - 0x0000)
struct BattleSystemComponent_GetAttackCollisionId final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         outUniqueCollisionID;                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleSystemComponent_GetAttackCollisionId) == 0x000008, "Wrong alignment on BattleSystemComponent_GetAttackCollisionId");
static_assert(sizeof(BattleSystemComponent_GetAttackCollisionId) == 0x000018, "Wrong size on BattleSystemComponent_GetAttackCollisionId");
static_assert(offsetof(BattleSystemComponent_GetAttackCollisionId, OrderId) == 0x000000, "Member 'BattleSystemComponent_GetAttackCollisionId::OrderId' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GetAttackCollisionId, outUniqueCollisionID) == 0x000010, "Member 'BattleSystemComponent_GetAttackCollisionId::outUniqueCollisionID' has a wrong offset!");
static_assert(offsetof(BattleSystemComponent_GetAttackCollisionId, ReturnValue) == 0x000014, "Member 'BattleSystemComponent_GetAttackCollisionId::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetInstance final
{
public:
	class UFieldManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetInstance) == 0x000008, "Wrong alignment on FieldManager_GetInstance");
static_assert(sizeof(FieldManager_GetInstance) == 0x000008, "Wrong size on FieldManager_GetInstance");
static_assert(offsetof(FieldManager_GetInstance, ReturnValue) == 0x000000, "Member 'FieldManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.SpawnRivalTeamFlag
// 0x001C (0x001C - 0x0000)
struct FieldManager_SpawnRivalTeamFlag final
{
public:
	ERivalTeamForce                               Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_SpawnRivalTeamFlag) == 0x000004, "Wrong alignment on FieldManager_SpawnRivalTeamFlag");
static_assert(sizeof(FieldManager_SpawnRivalTeamFlag) == 0x00001C, "Wrong size on FieldManager_SpawnRivalTeamFlag");
static_assert(offsetof(FieldManager_SpawnRivalTeamFlag, Force) == 0x000000, "Member 'FieldManager_SpawnRivalTeamFlag::Force' has a wrong offset!");
static_assert(offsetof(FieldManager_SpawnRivalTeamFlag, Location) == 0x000004, "Member 'FieldManager_SpawnRivalTeamFlag::Location' has a wrong offset!");
static_assert(offsetof(FieldManager_SpawnRivalTeamFlag, Rotation) == 0x000010, "Member 'FieldManager_SpawnRivalTeamFlag::Rotation' has a wrong offset!");

// Function DarwinGame.FieldManager.GetAllyBattleInformation
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetAllyBattleInformation final
{
public:
	class UBattleInformation*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetAllyBattleInformation) == 0x000008, "Wrong alignment on FieldManager_GetAllyBattleInformation");
static_assert(sizeof(FieldManager_GetAllyBattleInformation) == 0x000008, "Wrong size on FieldManager_GetAllyBattleInformation");
static_assert(offsetof(FieldManager_GetAllyBattleInformation, ReturnValue) == 0x000000, "Member 'FieldManager_GetAllyBattleInformation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetArtifactManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetArtifactManager final
{
public:
	class UArtifactManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetArtifactManager) == 0x000008, "Wrong alignment on FieldManager_GetArtifactManager");
static_assert(sizeof(FieldManager_GetArtifactManager) == 0x000008, "Wrong size on FieldManager_GetArtifactManager");
static_assert(offsetof(FieldManager_GetArtifactManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetArtifactManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetBattleDirector
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetBattleDirector final
{
public:
	class UBattleDirector*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetBattleDirector) == 0x000008, "Wrong alignment on FieldManager_GetBattleDirector");
static_assert(sizeof(FieldManager_GetBattleDirector) == 0x000008, "Wrong size on FieldManager_GetBattleDirector");
static_assert(offsetof(FieldManager_GetBattleDirector, ReturnValue) == 0x000000, "Member 'FieldManager_GetBattleDirector::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetCollectionPointManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetCollectionPointManager final
{
public:
	class UCollectionPointManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetCollectionPointManager) == 0x000008, "Wrong alignment on FieldManager_GetCollectionPointManager");
static_assert(sizeof(FieldManager_GetCollectionPointManager) == 0x000008, "Wrong size on FieldManager_GetCollectionPointManager");
static_assert(offsetof(FieldManager_GetCollectionPointManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetCollectionPointManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetDungeonManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetDungeonManager final
{
public:
	class UDungeonManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetDungeonManager) == 0x000008, "Wrong alignment on FieldManager_GetDungeonManager");
static_assert(sizeof(FieldManager_GetDungeonManager) == 0x000008, "Wrong size on FieldManager_GetDungeonManager");
static_assert(offsetof(FieldManager_GetDungeonManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetDungeonManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetEnemyBattleInformation
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetEnemyBattleInformation final
{
public:
	class UBattleInformation*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetEnemyBattleInformation) == 0x000008, "Wrong alignment on FieldManager_GetEnemyBattleInformation");
static_assert(sizeof(FieldManager_GetEnemyBattleInformation) == 0x000008, "Wrong size on FieldManager_GetEnemyBattleInformation");
static_assert(offsetof(FieldManager_GetEnemyBattleInformation, ReturnValue) == 0x000000, "Member 'FieldManager_GetEnemyBattleInformation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetEnemySpawnManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetEnemySpawnManager final
{
public:
	class UEnemySpawnManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetEnemySpawnManager) == 0x000008, "Wrong alignment on FieldManager_GetEnemySpawnManager");
static_assert(sizeof(FieldManager_GetEnemySpawnManager) == 0x000008, "Wrong size on FieldManager_GetEnemySpawnManager");
static_assert(offsetof(FieldManager_GetEnemySpawnManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetEnemySpawnManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetEnvironmentManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetEnvironmentManager final
{
public:
	class UEnvironmentManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetEnvironmentManager) == 0x000008, "Wrong alignment on FieldManager_GetEnvironmentManager");
static_assert(sizeof(FieldManager_GetEnvironmentManager) == 0x000008, "Wrong size on FieldManager_GetEnvironmentManager");
static_assert(offsetof(FieldManager_GetEnvironmentManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetEnvironmentManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetFieldAreaManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetFieldAreaManager final
{
public:
	class UFieldAreaManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetFieldAreaManager) == 0x000008, "Wrong alignment on FieldManager_GetFieldAreaManager");
static_assert(sizeof(FieldManager_GetFieldAreaManager) == 0x000008, "Wrong size on FieldManager_GetFieldAreaManager");
static_assert(offsetof(FieldManager_GetFieldAreaManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetFieldAreaManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetFieldObjectManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetFieldObjectManager final
{
public:
	class UFieldObjectManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetFieldObjectManager) == 0x000008, "Wrong alignment on FieldManager_GetFieldObjectManager");
static_assert(sizeof(FieldManager_GetFieldObjectManager) == 0x000008, "Wrong size on FieldManager_GetFieldObjectManager");
static_assert(offsetof(FieldManager_GetFieldObjectManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetFieldObjectManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetForcedBattleAreaManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetForcedBattleAreaManager final
{
public:
	class UForcedBattleAreaManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetForcedBattleAreaManager) == 0x000008, "Wrong alignment on FieldManager_GetForcedBattleAreaManager");
static_assert(sizeof(FieldManager_GetForcedBattleAreaManager) == 0x000008, "Wrong size on FieldManager_GetForcedBattleAreaManager");
static_assert(offsetof(FieldManager_GetForcedBattleAreaManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetForcedBattleAreaManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetGameScriptManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetGameScriptManager final
{
public:
	class UGameScriptManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetGameScriptManager) == 0x000008, "Wrong alignment on FieldManager_GetGameScriptManager");
static_assert(sizeof(FieldManager_GetGameScriptManager) == 0x000008, "Wrong size on FieldManager_GetGameScriptManager");
static_assert(offsetof(FieldManager_GetGameScriptManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetGameScriptManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetMonsterBTTaskExecuter
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetMonsterBTTaskExecuter final
{
public:
	class UMonsterBTTaskExecuter*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetMonsterBTTaskExecuter) == 0x000008, "Wrong alignment on FieldManager_GetMonsterBTTaskExecuter");
static_assert(sizeof(FieldManager_GetMonsterBTTaskExecuter) == 0x000008, "Wrong size on FieldManager_GetMonsterBTTaskExecuter");
static_assert(offsetof(FieldManager_GetMonsterBTTaskExecuter, ReturnValue) == 0x000000, "Member 'FieldManager_GetMonsterBTTaskExecuter::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetMonsterServiceArranger
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetMonsterServiceArranger final
{
public:
	class UMonsterServiceArranger*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetMonsterServiceArranger) == 0x000008, "Wrong alignment on FieldManager_GetMonsterServiceArranger");
static_assert(sizeof(FieldManager_GetMonsterServiceArranger) == 0x000008, "Wrong size on FieldManager_GetMonsterServiceArranger");
static_assert(offsetof(FieldManager_GetMonsterServiceArranger, ReturnValue) == 0x000000, "Member 'FieldManager_GetMonsterServiceArranger::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetNPCManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetNPCManager final
{
public:
	class UNPCManager*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetNPCManager) == 0x000008, "Wrong alignment on FieldManager_GetNPCManager");
static_assert(sizeof(FieldManager_GetNPCManager) == 0x000008, "Wrong size on FieldManager_GetNPCManager");
static_assert(offsetof(FieldManager_GetNPCManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetNPCManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetOutbreakQuestPointManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetOutbreakQuestPointManager final
{
public:
	class UOutbreakQuestPointManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetOutbreakQuestPointManager) == 0x000008, "Wrong alignment on FieldManager_GetOutbreakQuestPointManager");
static_assert(sizeof(FieldManager_GetOutbreakQuestPointManager) == 0x000008, "Wrong size on FieldManager_GetOutbreakQuestPointManager");
static_assert(offsetof(FieldManager_GetOutbreakQuestPointManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetOutbreakQuestPointManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetPlayer
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetPlayer final
{
public:
	class AGameCharacter*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetPlayer) == 0x000008, "Wrong alignment on FieldManager_GetPlayer");
static_assert(sizeof(FieldManager_GetPlayer) == 0x000008, "Wrong size on FieldManager_GetPlayer");
static_assert(offsetof(FieldManager_GetPlayer, ReturnValue) == 0x000000, "Member 'FieldManager_GetPlayer::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetTargetObjectManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetTargetObjectManager final
{
public:
	class UTargetObjectManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetTargetObjectManager) == 0x000008, "Wrong alignment on FieldManager_GetTargetObjectManager");
static_assert(sizeof(FieldManager_GetTargetObjectManager) == 0x000008, "Wrong size on FieldManager_GetTargetObjectManager");
static_assert(offsetof(FieldManager_GetTargetObjectManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetTargetObjectManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.GetWorldTimeManager
// 0x0008 (0x0008 - 0x0000)
struct FieldManager_GetWorldTimeManager final
{
public:
	class UWorldTimeManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_GetWorldTimeManager) == 0x000008, "Wrong alignment on FieldManager_GetWorldTimeManager");
static_assert(sizeof(FieldManager_GetWorldTimeManager) == 0x000008, "Wrong size on FieldManager_GetWorldTimeManager");
static_assert(offsetof(FieldManager_GetWorldTimeManager, ReturnValue) == 0x000000, "Member 'FieldManager_GetWorldTimeManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldManager.IsPulledOutRivalTeamFlag
// 0x0001 (0x0001 - 0x0000)
struct FieldManager_IsPulledOutRivalTeamFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldManager_IsPulledOutRivalTeamFlag) == 0x000001, "Wrong alignment on FieldManager_IsPulledOutRivalTeamFlag");
static_assert(sizeof(FieldManager_IsPulledOutRivalTeamFlag) == 0x000001, "Wrong size on FieldManager_IsPulledOutRivalTeamFlag");
static_assert(offsetof(FieldManager_IsPulledOutRivalTeamFlag, ReturnValue) == 0x000000, "Member 'FieldManager_IsPulledOutRivalTeamFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.DungeonGimmickBoss.OnEnemyMonsterSpawned
// 0x0008 (0x0008 - 0x0000)
struct DungeonGimmickBoss_OnEnemyMonsterSpawned final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DungeonGimmickBoss_OnEnemyMonsterSpawned) == 0x000008, "Wrong alignment on DungeonGimmickBoss_OnEnemyMonsterSpawned");
static_assert(sizeof(DungeonGimmickBoss_OnEnemyMonsterSpawned) == 0x000008, "Wrong size on DungeonGimmickBoss_OnEnemyMonsterSpawned");
static_assert(offsetof(DungeonGimmickBoss_OnEnemyMonsterSpawned, Monster) == 0x000000, "Member 'DungeonGimmickBoss_OnEnemyMonsterSpawned::Monster' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.HandleEnteringArtifactAreaEvent
// 0x000C (0x000C - 0x0000)
struct ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent final
{
public:
	EArtifactType                                 ArtifactType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNear;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAddEmphasis;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UniID;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent) == 0x000004, "Wrong alignment on ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent");
static_assert(sizeof(ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent) == 0x00000C, "Wrong size on ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent");
static_assert(offsetof(ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent, ArtifactType) == 0x000000, "Member 'ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent::ArtifactType' has a wrong offset!");
static_assert(offsetof(ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent, IsNear) == 0x000001, "Member 'ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent::IsNear' has a wrong offset!");
static_assert(offsetof(ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent, IsAddEmphasis) == 0x000002, "Member 'ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent::IsAddEmphasis' has a wrong offset!");
static_assert(offsetof(ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent, UniID) == 0x000004, "Member 'ObjectCommunicationInterface_HandleEnteringArtifactAreaEvent::UniID' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.HandleGetArtifactEvent
// 0x0028 (0x0028 - 0x0000)
struct ObjectCommunicationInterface_HandleGetArtifactEvent final
{
public:
	struct FGetArtifactEventStruct                Info;                                              // 0x0000(0x0020)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectCommunicationInterface_HandleGetArtifactEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_HandleGetArtifactEvent");
static_assert(sizeof(ObjectCommunicationInterface_HandleGetArtifactEvent) == 0x000028, "Wrong size on ObjectCommunicationInterface_HandleGetArtifactEvent");
static_assert(offsetof(ObjectCommunicationInterface_HandleGetArtifactEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_HandleGetArtifactEvent::Info' has a wrong offset!");
static_assert(offsetof(ObjectCommunicationInterface_HandleGetArtifactEvent, ReturnValue) == 0x000020, "Member 'ObjectCommunicationInterface_HandleGetArtifactEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveCallEvent
// 0x0058 (0x0058 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveCallEvent final
{
public:
	struct FCallEventStruct                       Info;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveCallEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnReceiveCallEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveCallEvent) == 0x000058, "Wrong size on ObjectCommunicationInterface_OnReceiveCallEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveCallEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveCallEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveEvent
// 0x0020 (0x0020 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveEvent final
{
public:
	struct FEventStruct                           Info;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnReceiveEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveEvent) == 0x000020, "Wrong size on ObjectCommunicationInterface_OnReceiveEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveFieldActionEvent
// 0x0018 (0x0018 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveFieldActionEvent final
{
public:
	struct FFieldActionEventStruct                Info;                                              // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveFieldActionEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnReceiveFieldActionEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveFieldActionEvent) == 0x000018, "Wrong size on ObjectCommunicationInterface_OnReceiveFieldActionEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveFieldActionEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveFieldActionEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveGetCoinEvent
// 0x0020 (0x0020 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveGetCoinEvent final
{
public:
	struct FGetCoinEventStruct                    Info;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveGetCoinEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnReceiveGetCoinEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveGetCoinEvent) == 0x000020, "Wrong size on ObjectCommunicationInterface_OnReceiveGetCoinEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveGetCoinEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveGetCoinEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveGetItemEvent
// 0x00A8 (0x00A8 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveGetItemEvent final
{
public:
	struct FGetItemEventStruct                    Info;                                              // 0x0000(0x00A8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveGetItemEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnReceiveGetItemEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveGetItemEvent) == 0x0000A8, "Wrong size on ObjectCommunicationInterface_OnReceiveGetItemEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveGetItemEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveGetItemEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveLiftEvent
// 0x0050 (0x0050 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveLiftEvent final
{
public:
	struct FLiftEventStruct                       Info;                                              // 0x0000(0x0050)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveLiftEvent) == 0x000010, "Wrong alignment on ObjectCommunicationInterface_OnReceiveLiftEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveLiftEvent) == 0x000050, "Wrong size on ObjectCommunicationInterface_OnReceiveLiftEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveLiftEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveLiftEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveRideEvent
// 0x0018 (0x0018 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveRideEvent final
{
public:
	struct FRideEventStruct                       Info;                                              // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveRideEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnReceiveRideEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveRideEvent) == 0x000018, "Wrong size on ObjectCommunicationInterface_OnReceiveRideEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveRideEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveRideEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnReceiveStealEvent
// 0x0020 (0x0020 - 0x0000)
struct ObjectCommunicationInterface_OnReceiveStealEvent final
{
public:
	struct FStealEventStruct                      Info;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnReceiveStealEvent) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnReceiveStealEvent");
static_assert(sizeof(ObjectCommunicationInterface_OnReceiveStealEvent) == 0x000020, "Wrong size on ObjectCommunicationInterface_OnReceiveStealEvent");
static_assert(offsetof(ObjectCommunicationInterface_OnReceiveStealEvent, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnReceiveStealEvent::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.OnRecieveReactionAfterSearch
// 0x0010 (0x0010 - 0x0000)
struct ObjectCommunicationInterface_OnRecieveReactionAfterSearch final
{
public:
	struct FAfterSearchEventStruct                Info;                                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_OnRecieveReactionAfterSearch) == 0x000008, "Wrong alignment on ObjectCommunicationInterface_OnRecieveReactionAfterSearch");
static_assert(sizeof(ObjectCommunicationInterface_OnRecieveReactionAfterSearch) == 0x000010, "Wrong size on ObjectCommunicationInterface_OnRecieveReactionAfterSearch");
static_assert(offsetof(ObjectCommunicationInterface_OnRecieveReactionAfterSearch, Info) == 0x000000, "Member 'ObjectCommunicationInterface_OnRecieveReactionAfterSearch::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.RegisterFieldTerrainInfo
// 0x002C (0x002C - 0x0000)
struct ObjectCommunicationInterface_RegisterFieldTerrainInfo final
{
public:
	EFieldTerrainType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_FieldTerrainInfo                   Info;                                              // 0x0004(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_RegisterFieldTerrainInfo) == 0x000004, "Wrong alignment on ObjectCommunicationInterface_RegisterFieldTerrainInfo");
static_assert(sizeof(ObjectCommunicationInterface_RegisterFieldTerrainInfo) == 0x00002C, "Wrong size on ObjectCommunicationInterface_RegisterFieldTerrainInfo");
static_assert(offsetof(ObjectCommunicationInterface_RegisterFieldTerrainInfo, Type) == 0x000000, "Member 'ObjectCommunicationInterface_RegisterFieldTerrainInfo::Type' has a wrong offset!");
static_assert(offsetof(ObjectCommunicationInterface_RegisterFieldTerrainInfo, Info) == 0x000004, "Member 'ObjectCommunicationInterface_RegisterFieldTerrainInfo::Info' has a wrong offset!");

// Function DarwinGame.ObjectCommunicationInterface.UnRegisterFieldTerrainInfo
// 0x0001 (0x0001 - 0x0000)
struct ObjectCommunicationInterface_UnRegisterFieldTerrainInfo final
{
public:
	EFieldTerrainType                             Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectCommunicationInterface_UnRegisterFieldTerrainInfo) == 0x000001, "Wrong alignment on ObjectCommunicationInterface_UnRegisterFieldTerrainInfo");
static_assert(sizeof(ObjectCommunicationInterface_UnRegisterFieldTerrainInfo) == 0x000001, "Wrong size on ObjectCommunicationInterface_UnRegisterFieldTerrainInfo");
static_assert(offsetof(ObjectCommunicationInterface_UnRegisterFieldTerrainInfo, Type) == 0x000000, "Member 'ObjectCommunicationInterface_UnRegisterFieldTerrainInfo::Type' has a wrong offset!");

// Function DarwinGame.BoardSceneCapture.GetMonster
// 0x0008 (0x0008 - 0x0000)
struct BoardSceneCapture_GetMonster final
{
public:
	class AMonster*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoardSceneCapture_GetMonster) == 0x000008, "Wrong alignment on BoardSceneCapture_GetMonster");
static_assert(sizeof(BoardSceneCapture_GetMonster) == 0x000008, "Wrong size on BoardSceneCapture_GetMonster");
static_assert(offsetof(BoardSceneCapture_GetMonster, ReturnValue) == 0x000000, "Member 'BoardSceneCapture_GetMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.BoardSceneCapture.GetPlayer
// 0x0008 (0x0008 - 0x0000)
struct BoardSceneCapture_GetPlayer final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoardSceneCapture_GetPlayer) == 0x000008, "Wrong alignment on BoardSceneCapture_GetPlayer");
static_assert(sizeof(BoardSceneCapture_GetPlayer) == 0x000008, "Wrong size on BoardSceneCapture_GetPlayer");
static_assert(offsetof(BoardSceneCapture_GetPlayer, ReturnValue) == 0x000000, "Member 'BoardSceneCapture_GetPlayer::ReturnValue' has a wrong offset!");

// Function DarwinGame.OutbreakQuestRevengeBattle.SpawnRevengeMonsterCallBack
// 0x0008 (0x0008 - 0x0000)
struct OutbreakQuestRevengeBattle_SpawnRevengeMonsterCallBack final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutbreakQuestRevengeBattle_SpawnRevengeMonsterCallBack) == 0x000008, "Wrong alignment on OutbreakQuestRevengeBattle_SpawnRevengeMonsterCallBack");
static_assert(sizeof(OutbreakQuestRevengeBattle_SpawnRevengeMonsterCallBack) == 0x000008, "Wrong size on OutbreakQuestRevengeBattle_SpawnRevengeMonsterCallBack");
static_assert(offsetof(OutbreakQuestRevengeBattle_SpawnRevengeMonsterCallBack, Monster) == 0x000000, "Member 'OutbreakQuestRevengeBattle_SpawnRevengeMonsterCallBack::Monster' has a wrong offset!");

// Function DarwinGame.ObjectUtilInterface.GetObjectID
// 0x0008 (0x0008 - 0x0000)
struct ObjectUtilInterface_GetObjectID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectUtilInterface_GetObjectID) == 0x000004, "Wrong alignment on ObjectUtilInterface_GetObjectID");
static_assert(sizeof(ObjectUtilInterface_GetObjectID) == 0x000008, "Wrong size on ObjectUtilInterface_GetObjectID");
static_assert(offsetof(ObjectUtilInterface_GetObjectID, ReturnValue) == 0x000000, "Member 'ObjectUtilInterface_GetObjectID::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinCamera.LimitRotationAndUpdate
// 0x000C (0x000C - 0x0000)
struct DarwinCamera_LimitRotationAndUpdate final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_LimitRotationAndUpdate) == 0x000004, "Wrong alignment on DarwinCamera_LimitRotationAndUpdate");
static_assert(sizeof(DarwinCamera_LimitRotationAndUpdate) == 0x00000C, "Wrong size on DarwinCamera_LimitRotationAndUpdate");
static_assert(offsetof(DarwinCamera_LimitRotationAndUpdate, Rotation) == 0x000000, "Member 'DarwinCamera_LimitRotationAndUpdate::Rotation' has a wrong offset!");

// Function DarwinGame.DarwinCamera.RequestCameraTransition
// 0x0040 (0x0040 - 0x0000)
struct DarwinCamera_RequestCameraTransition final
{
public:
	struct FDarwinViewBlendRequestParam           BlendRequest;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDarwinCameraResetParam                ResetParam;                                        // 0x0024(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_RequestCameraTransition) == 0x000004, "Wrong alignment on DarwinCamera_RequestCameraTransition");
static_assert(sizeof(DarwinCamera_RequestCameraTransition) == 0x000040, "Wrong size on DarwinCamera_RequestCameraTransition");
static_assert(offsetof(DarwinCamera_RequestCameraTransition, BlendRequest) == 0x000000, "Member 'DarwinCamera_RequestCameraTransition::BlendRequest' has a wrong offset!");
static_assert(offsetof(DarwinCamera_RequestCameraTransition, ResetParam) == 0x000024, "Member 'DarwinCamera_RequestCameraTransition::ResetParam' has a wrong offset!");

// Function DarwinGame.DarwinCamera.RequestCameraTransitionByMoveLinear
// 0x0030 (0x0030 - 0x0000)
struct DarwinCamera_RequestCameraTransitionByMoveLinear final
{
public:
	class AActor*                                 StartTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewBlendRateType                            Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDarwinCameraResetParam                ResetParam;                                        // 0x0010(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendRateEaseExpo;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_RequestCameraTransitionByMoveLinear) == 0x000008, "Wrong alignment on DarwinCamera_RequestCameraTransitionByMoveLinear");
static_assert(sizeof(DarwinCamera_RequestCameraTransitionByMoveLinear) == 0x000030, "Wrong size on DarwinCamera_RequestCameraTransitionByMoveLinear");
static_assert(offsetof(DarwinCamera_RequestCameraTransitionByMoveLinear, StartTarget) == 0x000000, "Member 'DarwinCamera_RequestCameraTransitionByMoveLinear::StartTarget' has a wrong offset!");
static_assert(offsetof(DarwinCamera_RequestCameraTransitionByMoveLinear, Type) == 0x000008, "Member 'DarwinCamera_RequestCameraTransitionByMoveLinear::Type' has a wrong offset!");
static_assert(offsetof(DarwinCamera_RequestCameraTransitionByMoveLinear, BlendTime) == 0x00000C, "Member 'DarwinCamera_RequestCameraTransitionByMoveLinear::BlendTime' has a wrong offset!");
static_assert(offsetof(DarwinCamera_RequestCameraTransitionByMoveLinear, ResetParam) == 0x000010, "Member 'DarwinCamera_RequestCameraTransitionByMoveLinear::ResetParam' has a wrong offset!");
static_assert(offsetof(DarwinCamera_RequestCameraTransitionByMoveLinear, BlendRateEaseExpo) == 0x00002C, "Member 'DarwinCamera_RequestCameraTransitionByMoveLinear::BlendRateEaseExpo' has a wrong offset!");

// Function DarwinGame.DarwinCamera.ResetCamera
// 0x001C (0x001C - 0x0000)
struct DarwinCamera_ResetCamera final
{
public:
	struct FDarwinCameraResetParam                ResetParam;                                        // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_ResetCamera) == 0x000004, "Wrong alignment on DarwinCamera_ResetCamera");
static_assert(sizeof(DarwinCamera_ResetCamera) == 0x00001C, "Wrong size on DarwinCamera_ResetCamera");
static_assert(offsetof(DarwinCamera_ResetCamera, ResetParam) == 0x000000, "Member 'DarwinCamera_ResetCamera::ResetParam' has a wrong offset!");

// Function DarwinGame.DarwinCamera.ResetWithKeepPosition
// 0x000C (0x000C - 0x0000)
struct DarwinCamera_ResetWithKeepPosition final
{
public:
	struct FVector                                keepPosition;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_ResetWithKeepPosition) == 0x000004, "Wrong alignment on DarwinCamera_ResetWithKeepPosition");
static_assert(sizeof(DarwinCamera_ResetWithKeepPosition) == 0x00000C, "Wrong size on DarwinCamera_ResetWithKeepPosition");
static_assert(offsetof(DarwinCamera_ResetWithKeepPosition, keepPosition) == 0x000000, "Member 'DarwinCamera_ResetWithKeepPosition::keepPosition' has a wrong offset!");

// Function DarwinGame.DarwinCamera.ResetWithKeepRotation
// 0x000C (0x000C - 0x0000)
struct DarwinCamera_ResetWithKeepRotation final
{
public:
	struct FRotator                               keepRotation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_ResetWithKeepRotation) == 0x000004, "Wrong alignment on DarwinCamera_ResetWithKeepRotation");
static_assert(sizeof(DarwinCamera_ResetWithKeepRotation) == 0x00000C, "Wrong size on DarwinCamera_ResetWithKeepRotation");
static_assert(offsetof(DarwinCamera_ResetWithKeepRotation, keepRotation) == 0x000000, "Member 'DarwinCamera_ResetWithKeepRotation::keepRotation' has a wrong offset!");

// Function DarwinGame.DarwinCamera.SetBoomLength
// 0x0004 (0x0004 - 0x0000)
struct DarwinCamera_SetBoomLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_SetBoomLength) == 0x000004, "Wrong alignment on DarwinCamera_SetBoomLength");
static_assert(sizeof(DarwinCamera_SetBoomLength) == 0x000004, "Wrong size on DarwinCamera_SetBoomLength");
static_assert(offsetof(DarwinCamera_SetBoomLength, Length) == 0x000000, "Member 'DarwinCamera_SetBoomLength::Length' has a wrong offset!");

// Function DarwinGame.DarwinCamera.SetCameraAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct DarwinCamera_SetCameraAspectRatio final
{
public:
	float                                         AspectRatio;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_SetCameraAspectRatio) == 0x000004, "Wrong alignment on DarwinCamera_SetCameraAspectRatio");
static_assert(sizeof(DarwinCamera_SetCameraAspectRatio) == 0x000004, "Wrong size on DarwinCamera_SetCameraAspectRatio");
static_assert(offsetof(DarwinCamera_SetCameraAspectRatio, AspectRatio) == 0x000000, "Member 'DarwinCamera_SetCameraAspectRatio::AspectRatio' has a wrong offset!");

// Function DarwinGame.DarwinCamera.SetCameraFOV
// 0x0004 (0x0004 - 0x0000)
struct DarwinCamera_SetCameraFOV final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_SetCameraFOV) == 0x000004, "Wrong alignment on DarwinCamera_SetCameraFOV");
static_assert(sizeof(DarwinCamera_SetCameraFOV) == 0x000004, "Wrong size on DarwinCamera_SetCameraFOV");
static_assert(offsetof(DarwinCamera_SetCameraFOV, FOV) == 0x000000, "Member 'DarwinCamera_SetCameraFOV::FOV' has a wrong offset!");

// Function DarwinGame.DarwinCamera.SetObstacleJudgeRadius
// 0x0004 (0x0004 - 0x0000)
struct DarwinCamera_SetObstacleJudgeRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_SetObstacleJudgeRadius) == 0x000004, "Wrong alignment on DarwinCamera_SetObstacleJudgeRadius");
static_assert(sizeof(DarwinCamera_SetObstacleJudgeRadius) == 0x000004, "Wrong size on DarwinCamera_SetObstacleJudgeRadius");
static_assert(offsetof(DarwinCamera_SetObstacleJudgeRadius, Radius) == 0x000000, "Member 'DarwinCamera_SetObstacleJudgeRadius::Radius' has a wrong offset!");

// Function DarwinGame.DarwinCamera.ShowCameraInfo
// 0x0001 (0x0001 - 0x0000)
struct DarwinCamera_ShowCameraInfo final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_ShowCameraInfo) == 0x000001, "Wrong alignment on DarwinCamera_ShowCameraInfo");
static_assert(sizeof(DarwinCamera_ShowCameraInfo) == 0x000001, "Wrong size on DarwinCamera_ShowCameraInfo");
static_assert(offsetof(DarwinCamera_ShowCameraInfo, bEnd) == 0x000000, "Member 'DarwinCamera_ShowCameraInfo::bEnd' has a wrong offset!");

// Function DarwinGame.DarwinCamera.SwitchPostProcess
// 0x0002 (0x0002 - 0x0000)
struct DarwinCamera_SwitchPostProcess final
{
public:
	ECameraPostProcessType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          on;                                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_SwitchPostProcess) == 0x000001, "Wrong alignment on DarwinCamera_SwitchPostProcess");
static_assert(sizeof(DarwinCamera_SwitchPostProcess) == 0x000002, "Wrong size on DarwinCamera_SwitchPostProcess");
static_assert(offsetof(DarwinCamera_SwitchPostProcess, Type) == 0x000000, "Member 'DarwinCamera_SwitchPostProcess::Type' has a wrong offset!");
static_assert(offsetof(DarwinCamera_SwitchPostProcess, on) == 0x000001, "Member 'DarwinCamera_SwitchPostProcess::on' has a wrong offset!");

// Function DarwinGame.DarwinCamera.Zoom
// 0x0020 (0x0020 - 0x0000)
struct DarwinCamera_Zoom final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterapSpeed;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_Zoom) == 0x000004, "Wrong alignment on DarwinCamera_Zoom");
static_assert(sizeof(DarwinCamera_Zoom) == 0x000020, "Wrong size on DarwinCamera_Zoom");
static_assert(offsetof(DarwinCamera_Zoom, Location) == 0x000000, "Member 'DarwinCamera_Zoom::Location' has a wrong offset!");
static_assert(offsetof(DarwinCamera_Zoom, Rotation) == 0x00000C, "Member 'DarwinCamera_Zoom::Rotation' has a wrong offset!");
static_assert(offsetof(DarwinCamera_Zoom, Length) == 0x000018, "Member 'DarwinCamera_Zoom::Length' has a wrong offset!");
static_assert(offsetof(DarwinCamera_Zoom, InterapSpeed) == 0x00001C, "Member 'DarwinCamera_Zoom::InterapSpeed' has a wrong offset!");

// Function DarwinGame.DarwinCamera.GetBoomLength
// 0x0004 (0x0004 - 0x0000)
struct DarwinCamera_GetBoomLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCamera_GetBoomLength) == 0x000004, "Wrong alignment on DarwinCamera_GetBoomLength");
static_assert(sizeof(DarwinCamera_GetBoomLength) == 0x000004, "Wrong size on DarwinCamera_GetBoomLength");
static_assert(offsetof(DarwinCamera_GetBoomLength, ReturnValue) == 0x000000, "Member 'DarwinCamera_GetBoomLength::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIHeader_01.SetHeaderType
// 0x0008 (0x0008 - 0x0000)
struct UIHeader_01_SetHeaderType final
{
public:
	class FName                                   HeaderType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHeader_01_SetHeaderType) == 0x000004, "Wrong alignment on UIHeader_01_SetHeaderType");
static_assert(sizeof(UIHeader_01_SetHeaderType) == 0x000008, "Wrong size on UIHeader_01_SetHeaderType");
static_assert(offsetof(UIHeader_01_SetHeaderType, HeaderType) == 0x000000, "Member 'UIHeader_01_SetHeaderType::HeaderType' has a wrong offset!");

// Function DarwinGame.UIHeader_01.SetName
// 0x0018 (0x0018 - 0x0000)
struct UIHeader_01_SetName final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHeader_01_SetName) == 0x000008, "Wrong alignment on UIHeader_01_SetName");
static_assert(sizeof(UIHeader_01_SetName) == 0x000018, "Wrong size on UIHeader_01_SetName");
static_assert(offsetof(UIHeader_01_SetName, Name_0) == 0x000000, "Member 'UIHeader_01_SetName::Name_0' has a wrong offset!");

// Function DarwinGame.BossGimmicks.HitGimmickCheck
// 0x0010 (0x0010 - 0x0000)
struct BossGimmicks_HitGimmickCheck final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BossGimmicks_HitGimmickCheck) == 0x000004, "Wrong alignment on BossGimmicks_HitGimmickCheck");
static_assert(sizeof(BossGimmicks_HitGimmickCheck) == 0x000010, "Wrong size on BossGimmicks_HitGimmickCheck");
static_assert(offsetof(BossGimmicks_HitGimmickCheck, Location) == 0x000000, "Member 'BossGimmicks_HitGimmickCheck::Location' has a wrong offset!");
static_assert(offsetof(BossGimmicks_HitGimmickCheck, Radius) == 0x00000C, "Member 'BossGimmicks_HitGimmickCheck::Radius' has a wrong offset!");

// Function DarwinGame.ForcedBattleAreaBase.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct ForcedBattleAreaBase_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForcedBattleAreaBase_OnBeginOverlap) == 0x000008, "Wrong alignment on ForcedBattleAreaBase_OnBeginOverlap");
static_assert(sizeof(ForcedBattleAreaBase_OnBeginOverlap) == 0x0000A8, "Wrong size on ForcedBattleAreaBase_OnBeginOverlap");
static_assert(offsetof(ForcedBattleAreaBase_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'ForcedBattleAreaBase_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaBase_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ForcedBattleAreaBase_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaBase_OnBeginOverlap, OtherComp) == 0x000010, "Member 'ForcedBattleAreaBase_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaBase_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'ForcedBattleAreaBase_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaBase_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'ForcedBattleAreaBase_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaBase_OnBeginOverlap, SweepResult) == 0x000020, "Member 'ForcedBattleAreaBase_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.UIField_TacticsWord.Input_Button_Down_Implementation
// 0x0001 (0x0001 - 0x0000)
struct UIField_TacticsWord_Input_Button_Down_Implementation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_TacticsWord_Input_Button_Down_Implementation) == 0x000001, "Wrong alignment on UIField_TacticsWord_Input_Button_Down_Implementation");
static_assert(sizeof(UIField_TacticsWord_Input_Button_Down_Implementation) == 0x000001, "Wrong size on UIField_TacticsWord_Input_Button_Down_Implementation");
static_assert(offsetof(UIField_TacticsWord_Input_Button_Down_Implementation, ReturnValue) == 0x000000, "Member 'UIField_TacticsWord_Input_Button_Down_Implementation::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_TacticsWord.Input_Button_Up_Implementation
// 0x0001 (0x0001 - 0x0000)
struct UIField_TacticsWord_Input_Button_Up_Implementation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_TacticsWord_Input_Button_Up_Implementation) == 0x000001, "Wrong alignment on UIField_TacticsWord_Input_Button_Up_Implementation");
static_assert(sizeof(UIField_TacticsWord_Input_Button_Up_Implementation) == 0x000001, "Wrong size on UIField_TacticsWord_Input_Button_Up_Implementation");
static_assert(offsetof(UIField_TacticsWord_Input_Button_Up_Implementation, ReturnValue) == 0x000000, "Member 'UIField_TacticsWord_Input_Button_Up_Implementation::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.GetDisplayItemNum
// 0x0004 (0x0004 - 0x0000)
struct BPDebugMenuInterface_GetDisplayItemNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_GetDisplayItemNum) == 0x000004, "Wrong alignment on BPDebugMenuInterface_GetDisplayItemNum");
static_assert(sizeof(BPDebugMenuInterface_GetDisplayItemNum) == 0x000004, "Wrong size on BPDebugMenuInterface_GetDisplayItemNum");
static_assert(offsetof(BPDebugMenuInterface_GetDisplayItemNum, ReturnValue) == 0x000000, "Member 'BPDebugMenuInterface_GetDisplayItemNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.GetFontHeight
// 0x0004 (0x0004 - 0x0000)
struct BPDebugMenuInterface_GetFontHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_GetFontHeight) == 0x000004, "Wrong alignment on BPDebugMenuInterface_GetFontHeight");
static_assert(sizeof(BPDebugMenuInterface_GetFontHeight) == 0x000004, "Wrong size on BPDebugMenuInterface_GetFontHeight");
static_assert(offsetof(BPDebugMenuInterface_GetFontHeight, ReturnValue) == 0x000000, "Member 'BPDebugMenuInterface_GetFontHeight::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.GetFontWidth
// 0x0004 (0x0004 - 0x0000)
struct BPDebugMenuInterface_GetFontWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_GetFontWidth) == 0x000004, "Wrong alignment on BPDebugMenuInterface_GetFontWidth");
static_assert(sizeof(BPDebugMenuInterface_GetFontWidth) == 0x000004, "Wrong size on BPDebugMenuInterface_GetFontWidth");
static_assert(offsetof(BPDebugMenuInterface_GetFontWidth, ReturnValue) == 0x000000, "Member 'BPDebugMenuInterface_GetFontWidth::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.GetItemNameLayout
// 0x0030 (0x0030 - 0x0000)
struct BPDebugMenuInterface_GetItemNameLayout final
{
public:
	int32                                         displayNo;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_GetItemNameLayout) == 0x000008, "Wrong alignment on BPDebugMenuInterface_GetItemNameLayout");
static_assert(sizeof(BPDebugMenuInterface_GetItemNameLayout) == 0x000030, "Wrong size on BPDebugMenuInterface_GetItemNameLayout");
static_assert(offsetof(BPDebugMenuInterface_GetItemNameLayout, displayNo) == 0x000000, "Member 'BPDebugMenuInterface_GetItemNameLayout::displayNo' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemNameLayout, Text) == 0x000008, "Member 'BPDebugMenuInterface_GetItemNameLayout::Text' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemNameLayout, X) == 0x000018, "Member 'BPDebugMenuInterface_GetItemNameLayout::X' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemNameLayout, Y) == 0x00001C, "Member 'BPDebugMenuInterface_GetItemNameLayout::Y' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemNameLayout, Color) == 0x000020, "Member 'BPDebugMenuInterface_GetItemNameLayout::Color' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.GetItemValueLayout
// 0x0030 (0x0030 - 0x0000)
struct BPDebugMenuInterface_GetItemValueLayout final
{
public:
	int32                                         displayNo;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_GetItemValueLayout) == 0x000008, "Wrong alignment on BPDebugMenuInterface_GetItemValueLayout");
static_assert(sizeof(BPDebugMenuInterface_GetItemValueLayout) == 0x000030, "Wrong size on BPDebugMenuInterface_GetItemValueLayout");
static_assert(offsetof(BPDebugMenuInterface_GetItemValueLayout, displayNo) == 0x000000, "Member 'BPDebugMenuInterface_GetItemValueLayout::displayNo' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemValueLayout, Text) == 0x000008, "Member 'BPDebugMenuInterface_GetItemValueLayout::Text' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemValueLayout, X) == 0x000018, "Member 'BPDebugMenuInterface_GetItemValueLayout::X' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemValueLayout, Y) == 0x00001C, "Member 'BPDebugMenuInterface_GetItemValueLayout::Y' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetItemValueLayout, Color) == 0x000020, "Member 'BPDebugMenuInterface_GetItemValueLayout::Color' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.GetScrollLayout
// 0x0028 (0x0028 - 0x0000)
struct BPDebugMenuInterface_GetScrollLayout final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_GetScrollLayout) == 0x000008, "Wrong alignment on BPDebugMenuInterface_GetScrollLayout");
static_assert(sizeof(BPDebugMenuInterface_GetScrollLayout) == 0x000028, "Wrong size on BPDebugMenuInterface_GetScrollLayout");
static_assert(offsetof(BPDebugMenuInterface_GetScrollLayout, Text) == 0x000000, "Member 'BPDebugMenuInterface_GetScrollLayout::Text' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetScrollLayout, X) == 0x000010, "Member 'BPDebugMenuInterface_GetScrollLayout::X' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetScrollLayout, Y) == 0x000014, "Member 'BPDebugMenuInterface_GetScrollLayout::Y' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetScrollLayout, Color) == 0x000018, "Member 'BPDebugMenuInterface_GetScrollLayout::Color' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.GetTitleLayout
// 0x0028 (0x0028 - 0x0000)
struct BPDebugMenuInterface_GetTitleLayout final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_GetTitleLayout) == 0x000008, "Wrong alignment on BPDebugMenuInterface_GetTitleLayout");
static_assert(sizeof(BPDebugMenuInterface_GetTitleLayout) == 0x000028, "Wrong size on BPDebugMenuInterface_GetTitleLayout");
static_assert(offsetof(BPDebugMenuInterface_GetTitleLayout, Text) == 0x000000, "Member 'BPDebugMenuInterface_GetTitleLayout::Text' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetTitleLayout, X) == 0x000010, "Member 'BPDebugMenuInterface_GetTitleLayout::X' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetTitleLayout, Y) == 0x000014, "Member 'BPDebugMenuInterface_GetTitleLayout::Y' has a wrong offset!");
static_assert(offsetof(BPDebugMenuInterface_GetTitleLayout, Color) == 0x000018, "Member 'BPDebugMenuInterface_GetTitleLayout::Color' has a wrong offset!");

// Function DarwinGame.BPDebugMenuInterface.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct BPDebugMenuInterface_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPDebugMenuInterface_IsFinished) == 0x000001, "Wrong alignment on BPDebugMenuInterface_IsFinished");
static_assert(sizeof(BPDebugMenuInterface_IsFinished) == 0x000001, "Wrong size on BPDebugMenuInterface_IsFinished");
static_assert(offsetof(BPDebugMenuInterface_IsFinished, ReturnValue) == 0x000000, "Member 'BPDebugMenuInterface_IsFinished::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetBattleTableRowId
// 0x0004 (0x0004 - 0x0000)
struct BPFDebugParamInterface_GetBattleTableRowId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetBattleTableRowId) == 0x000004, "Wrong alignment on BPFDebugParamInterface_GetBattleTableRowId");
static_assert(sizeof(BPFDebugParamInterface_GetBattleTableRowId) == 0x000004, "Wrong size on BPFDebugParamInterface_GetBattleTableRowId");
static_assert(offsetof(BPFDebugParamInterface_GetBattleTableRowId, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetBattleTableRowId::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetFastTravelId
// 0x0004 (0x0004 - 0x0000)
struct BPFDebugParamInterface_GetFastTravelId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetFastTravelId) == 0x000004, "Wrong alignment on BPFDebugParamInterface_GetFastTravelId");
static_assert(sizeof(BPFDebugParamInterface_GetFastTravelId) == 0x000004, "Wrong size on BPFDebugParamInterface_GetFastTravelId");
static_assert(offsetof(BPFDebugParamInterface_GetFastTravelId, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetFastTravelId::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetFastTravelLocation
// 0x000C (0x000C - 0x0000)
struct BPFDebugParamInterface_GetFastTravelLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetFastTravelLocation) == 0x000004, "Wrong alignment on BPFDebugParamInterface_GetFastTravelLocation");
static_assert(sizeof(BPFDebugParamInterface_GetFastTravelLocation) == 0x00000C, "Wrong size on BPFDebugParamInterface_GetFastTravelLocation");
static_assert(offsetof(BPFDebugParamInterface_GetFastTravelLocation, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetFastTravelLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetFriendMonsterSpawnDisable
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetFriendMonsterSpawnDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetFriendMonsterSpawnDisable) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetFriendMonsterSpawnDisable");
static_assert(sizeof(BPFDebugParamInterface_GetFriendMonsterSpawnDisable) == 0x000001, "Wrong size on BPFDebugParamInterface_GetFriendMonsterSpawnDisable");
static_assert(offsetof(BPFDebugParamInterface_GetFriendMonsterSpawnDisable, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetFriendMonsterSpawnDisable::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsActiveWipeCamera
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsActiveWipeCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsActiveWipeCamera) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsActiveWipeCamera");
static_assert(sizeof(BPFDebugParamInterface_GetIsActiveWipeCamera) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsActiveWipeCamera");
static_assert(offsetof(BPFDebugParamInterface_GetIsActiveWipeCamera, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsActiveWipeCamera::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsBattleMotionCheck
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsBattleMotionCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsBattleMotionCheck) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsBattleMotionCheck");
static_assert(sizeof(BPFDebugParamInterface_GetIsBattleMotionCheck) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsBattleMotionCheck");
static_assert(offsetof(BPFDebugParamInterface_GetIsBattleMotionCheck, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsBattleMotionCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsDispLookAtTargetInfo
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsDispLookAtTargetInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsDispLookAtTargetInfo) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsDispLookAtTargetInfo");
static_assert(sizeof(BPFDebugParamInterface_GetIsDispLookAtTargetInfo) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsDispLookAtTargetInfo");
static_assert(offsetof(BPFDebugParamInterface_GetIsDispLookAtTargetInfo, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsDispLookAtTargetInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsFastTravel
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsFastTravel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsFastTravel) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsFastTravel");
static_assert(sizeof(BPFDebugParamInterface_GetIsFastTravel) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsFastTravel");
static_assert(offsetof(BPFDebugParamInterface_GetIsFastTravel, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsFastTravel::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsHiddenFieldComment
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsHiddenFieldComment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsHiddenFieldComment) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsHiddenFieldComment");
static_assert(sizeof(BPFDebugParamInterface_GetIsHiddenFieldComment) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsHiddenFieldComment");
static_assert(offsetof(BPFDebugParamInterface_GetIsHiddenFieldComment, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsHiddenFieldComment::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsLockCameraRelativeLocation
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsLockCameraRelativeLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsLockCameraRelativeLocation) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsLockCameraRelativeLocation");
static_assert(sizeof(BPFDebugParamInterface_GetIsLockCameraRelativeLocation) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsLockCameraRelativeLocation");
static_assert(offsetof(BPFDebugParamInterface_GetIsLockCameraRelativeLocation, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsLockCameraRelativeLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsSlowdownTest
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsSlowdownTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsSlowdownTest) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsSlowdownTest");
static_assert(sizeof(BPFDebugParamInterface_GetIsSlowdownTest) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsSlowdownTest");
static_assert(offsetof(BPFDebugParamInterface_GetIsSlowdownTest, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsSlowdownTest::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsSwitchCameraController
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsSwitchCameraController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsSwitchCameraController) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsSwitchCameraController");
static_assert(sizeof(BPFDebugParamInterface_GetIsSwitchCameraController) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsSwitchCameraController");
static_assert(offsetof(BPFDebugParamInterface_GetIsSwitchCameraController, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsSwitchCameraController::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetIsSwitchTargetMarkerController
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetIsSwitchTargetMarkerController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetIsSwitchTargetMarkerController) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetIsSwitchTargetMarkerController");
static_assert(sizeof(BPFDebugParamInterface_GetIsSwitchTargetMarkerController) == 0x000001, "Wrong size on BPFDebugParamInterface_GetIsSwitchTargetMarkerController");
static_assert(offsetof(BPFDebugParamInterface_GetIsSwitchTargetMarkerController, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetIsSwitchTargetMarkerController::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetNextLevelPathOfTitle
// 0x0008 (0x0008 - 0x0000)
struct BPFDebugParamInterface_GetNextLevelPathOfTitle final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetNextLevelPathOfTitle) == 0x000004, "Wrong alignment on BPFDebugParamInterface_GetNextLevelPathOfTitle");
static_assert(sizeof(BPFDebugParamInterface_GetNextLevelPathOfTitle) == 0x000008, "Wrong size on BPFDebugParamInterface_GetNextLevelPathOfTitle");
static_assert(offsetof(BPFDebugParamInterface_GetNextLevelPathOfTitle, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetNextLevelPathOfTitle::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetTargetBoneId
// 0x0004 (0x0004 - 0x0000)
struct BPFDebugParamInterface_GetTargetBoneId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetTargetBoneId) == 0x000004, "Wrong alignment on BPFDebugParamInterface_GetTargetBoneId");
static_assert(sizeof(BPFDebugParamInterface_GetTargetBoneId) == 0x000004, "Wrong size on BPFDebugParamInterface_GetTargetBoneId");
static_assert(offsetof(BPFDebugParamInterface_GetTargetBoneId, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetTargetBoneId::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetTargetRowId
// 0x0004 (0x0004 - 0x0000)
struct BPFDebugParamInterface_GetTargetRowId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetTargetRowId) == 0x000004, "Wrong alignment on BPFDebugParamInterface_GetTargetRowId");
static_assert(sizeof(BPFDebugParamInterface_GetTargetRowId) == 0x000004, "Wrong size on BPFDebugParamInterface_GetTargetRowId");
static_assert(offsetof(BPFDebugParamInterface_GetTargetRowId, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetTargetRowId::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetTriggerChangeFocusTarget
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetTriggerChangeFocusTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetTriggerChangeFocusTarget) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetTriggerChangeFocusTarget");
static_assert(sizeof(BPFDebugParamInterface_GetTriggerChangeFocusTarget) == 0x000001, "Wrong size on BPFDebugParamInterface_GetTriggerChangeFocusTarget");
static_assert(offsetof(BPFDebugParamInterface_GetTriggerChangeFocusTarget, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetTriggerChangeFocusTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetTriggerModelChange
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetTriggerModelChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetTriggerModelChange) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetTriggerModelChange");
static_assert(sizeof(BPFDebugParamInterface_GetTriggerModelChange) == 0x000001, "Wrong size on BPFDebugParamInterface_GetTriggerModelChange");
static_assert(offsetof(BPFDebugParamInterface_GetTriggerModelChange, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetTriggerModelChange::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.GetTriggerOpenWarpMenu
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_GetTriggerOpenWarpMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_GetTriggerOpenWarpMenu) == 0x000001, "Wrong alignment on BPFDebugParamInterface_GetTriggerOpenWarpMenu");
static_assert(sizeof(BPFDebugParamInterface_GetTriggerOpenWarpMenu) == 0x000001, "Wrong size on BPFDebugParamInterface_GetTriggerOpenWarpMenu");
static_assert(offsetof(BPFDebugParamInterface_GetTriggerOpenWarpMenu, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_GetTriggerOpenWarpMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.OutputLogExecAnimNotifyState
// 0x0010 (0x0010 - 0x0000)
struct BPFDebugParamInterface_OutputLogExecAnimNotifyState final
{
public:
	class FString                                 AnimNotifyText;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_OutputLogExecAnimNotifyState) == 0x000008, "Wrong alignment on BPFDebugParamInterface_OutputLogExecAnimNotifyState");
static_assert(sizeof(BPFDebugParamInterface_OutputLogExecAnimNotifyState) == 0x000010, "Wrong size on BPFDebugParamInterface_OutputLogExecAnimNotifyState");
static_assert(offsetof(BPFDebugParamInterface_OutputLogExecAnimNotifyState, AnimNotifyText) == 0x000000, "Member 'BPFDebugParamInterface_OutputLogExecAnimNotifyState::AnimNotifyText' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.SetFastTravelId
// 0x0004 (0x0004 - 0x0000)
struct BPFDebugParamInterface_SetFastTravelId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_SetFastTravelId) == 0x000004, "Wrong alignment on BPFDebugParamInterface_SetFastTravelId");
static_assert(sizeof(BPFDebugParamInterface_SetFastTravelId) == 0x000004, "Wrong size on BPFDebugParamInterface_SetFastTravelId");
static_assert(offsetof(BPFDebugParamInterface_SetFastTravelId, ID) == 0x000000, "Member 'BPFDebugParamInterface_SetFastTravelId::ID' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.SetFastTravelLocation
// 0x000C (0x000C - 0x0000)
struct BPFDebugParamInterface_SetFastTravelLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_SetFastTravelLocation) == 0x000004, "Wrong alignment on BPFDebugParamInterface_SetFastTravelLocation");
static_assert(sizeof(BPFDebugParamInterface_SetFastTravelLocation) == 0x00000C, "Wrong size on BPFDebugParamInterface_SetFastTravelLocation");
static_assert(offsetof(BPFDebugParamInterface_SetFastTravelLocation, Location) == 0x000000, "Member 'BPFDebugParamInterface_SetFastTravelLocation::Location' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.SetIsFastTravel
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_SetIsFastTravel final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_SetIsFastTravel) == 0x000001, "Wrong alignment on BPFDebugParamInterface_SetIsFastTravel");
static_assert(sizeof(BPFDebugParamInterface_SetIsFastTravel) == 0x000001, "Wrong size on BPFDebugParamInterface_SetIsFastTravel");
static_assert(offsetof(BPFDebugParamInterface_SetIsFastTravel, Value) == 0x000000, "Member 'BPFDebugParamInterface_SetIsFastTravel::Value' has a wrong offset!");

// Function DarwinGame.BPFDebugParamInterface.UseFieldCommentHiddenFlag
// 0x0001 (0x0001 - 0x0000)
struct BPFDebugParamInterface_UseFieldCommentHiddenFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFDebugParamInterface_UseFieldCommentHiddenFlag) == 0x000001, "Wrong alignment on BPFDebugParamInterface_UseFieldCommentHiddenFlag");
static_assert(sizeof(BPFDebugParamInterface_UseFieldCommentHiddenFlag) == 0x000001, "Wrong size on BPFDebugParamInterface_UseFieldCommentHiddenFlag");
static_assert(offsetof(BPFDebugParamInterface_UseFieldCommentHiddenFlag, ReturnValue) == 0x000000, "Member 'BPFDebugParamInterface_UseFieldCommentHiddenFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.BreathMagicBase.OnParticleCollisionHit
// 0x0050 (0x0050 - 0x0000)
struct BreathMagicBase_OnParticleCollisionHit final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleTime;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreathMagicBase_OnParticleCollisionHit) == 0x000008, "Wrong alignment on BreathMagicBase_OnParticleCollisionHit");
static_assert(sizeof(BreathMagicBase_OnParticleCollisionHit) == 0x000050, "Wrong size on BreathMagicBase_OnParticleCollisionHit");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, EventName) == 0x000000, "Member 'BreathMagicBase_OnParticleCollisionHit::EventName' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, EmitterTime) == 0x000008, "Member 'BreathMagicBase_OnParticleCollisionHit::EmitterTime' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, ParticleTime) == 0x00000C, "Member 'BreathMagicBase_OnParticleCollisionHit::ParticleTime' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, Location) == 0x000010, "Member 'BreathMagicBase_OnParticleCollisionHit::Location' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, Velocity) == 0x00001C, "Member 'BreathMagicBase_OnParticleCollisionHit::Velocity' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, Direction) == 0x000028, "Member 'BreathMagicBase_OnParticleCollisionHit::Direction' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, Normal) == 0x000034, "Member 'BreathMagicBase_OnParticleCollisionHit::Normal' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, BoneName) == 0x000040, "Member 'BreathMagicBase_OnParticleCollisionHit::BoneName' has a wrong offset!");
static_assert(offsetof(BreathMagicBase_OnParticleCollisionHit, PhysMat) == 0x000048, "Member 'BreathMagicBase_OnParticleCollisionHit::PhysMat' has a wrong offset!");

// Function DarwinGame.UIField_WinLogbox.SetDataCharacter
// 0x0030 (0x0030 - 0x0000)
struct UIField_WinLogbox_SetDataCharacter final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Unique;                                            // 0x0010(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinLogbox_SetDataCharacter) == 0x000008, "Wrong alignment on UIField_WinLogbox_SetDataCharacter");
static_assert(sizeof(UIField_WinLogbox_SetDataCharacter) == 0x000030, "Wrong size on UIField_WinLogbox_SetDataCharacter");
static_assert(offsetof(UIField_WinLogbox_SetDataCharacter, Key) == 0x000000, "Member 'UIField_WinLogbox_SetDataCharacter::Key' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataCharacter, ID) == 0x000008, "Member 'UIField_WinLogbox_SetDataCharacter::ID' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataCharacter, Unique) == 0x000010, "Member 'UIField_WinLogbox_SetDataCharacter::Unique' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataCharacter, Value) == 0x000028, "Member 'UIField_WinLogbox_SetDataCharacter::Value' has a wrong offset!");

// Function DarwinGame.UIField_WinLogbox.SetDataCoin
// 0x0040 (0x0040 - 0x0000)
struct UIField_WinLogbox_SetDataCoin final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_CoinParam                          CoinParam;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Unique;                                            // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinLogbox_SetDataCoin) == 0x000008, "Wrong alignment on UIField_WinLogbox_SetDataCoin");
static_assert(sizeof(UIField_WinLogbox_SetDataCoin) == 0x000040, "Wrong size on UIField_WinLogbox_SetDataCoin");
static_assert(offsetof(UIField_WinLogbox_SetDataCoin, Key) == 0x000000, "Member 'UIField_WinLogbox_SetDataCoin::Key' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataCoin, CoinParam) == 0x000008, "Member 'UIField_WinLogbox_SetDataCoin::CoinParam' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataCoin, Unique) == 0x000020, "Member 'UIField_WinLogbox_SetDataCoin::Unique' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataCoin, Value) == 0x000038, "Member 'UIField_WinLogbox_SetDataCoin::Value' has a wrong offset!");

// Function DarwinGame.UIField_WinLogbox.SetDataFood
// 0x0030 (0x0030 - 0x0000)
struct UIField_WinLogbox_SetDataFood final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FoodEffectId;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Unique;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinLogbox_SetDataFood) == 0x000008, "Wrong alignment on UIField_WinLogbox_SetDataFood");
static_assert(sizeof(UIField_WinLogbox_SetDataFood) == 0x000030, "Wrong size on UIField_WinLogbox_SetDataFood");
static_assert(offsetof(UIField_WinLogbox_SetDataFood, Key) == 0x000000, "Member 'UIField_WinLogbox_SetDataFood::Key' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataFood, FoodEffectId) == 0x000008, "Member 'UIField_WinLogbox_SetDataFood::FoodEffectId' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataFood, Unique) == 0x000010, "Member 'UIField_WinLogbox_SetDataFood::Unique' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataFood, Value) == 0x000028, "Member 'UIField_WinLogbox_SetDataFood::Value' has a wrong offset!");

// Function DarwinGame.UIField_WinLogbox.SetDataItem
// 0x0030 (0x0030 - 0x0000)
struct UIField_WinLogbox_SetDataItem final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Unique;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinLogbox_SetDataItem) == 0x000008, "Wrong alignment on UIField_WinLogbox_SetDataItem");
static_assert(sizeof(UIField_WinLogbox_SetDataItem) == 0x000030, "Wrong size on UIField_WinLogbox_SetDataItem");
static_assert(offsetof(UIField_WinLogbox_SetDataItem, Key) == 0x000000, "Member 'UIField_WinLogbox_SetDataItem::Key' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataItem, ID) == 0x000008, "Member 'UIField_WinLogbox_SetDataItem::ID' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataItem, Unique) == 0x000010, "Member 'UIField_WinLogbox_SetDataItem::Unique' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataItem, Value) == 0x000028, "Member 'UIField_WinLogbox_SetDataItem::Value' has a wrong offset!");

// Function DarwinGame.UIField_WinLogbox.SetDataQuest
// 0x0030 (0x0030 - 0x0000)
struct UIField_WinLogbox_SetDataQuest final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Unique;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsOpenQuestConfirmation;                        // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinLogbox_SetDataQuest) == 0x000008, "Wrong alignment on UIField_WinLogbox_SetDataQuest");
static_assert(sizeof(UIField_WinLogbox_SetDataQuest) == 0x000030, "Wrong size on UIField_WinLogbox_SetDataQuest");
static_assert(offsetof(UIField_WinLogbox_SetDataQuest, Key) == 0x000000, "Member 'UIField_WinLogbox_SetDataQuest::Key' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataQuest, QuestID) == 0x000008, "Member 'UIField_WinLogbox_SetDataQuest::QuestID' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataQuest, Unique) == 0x000010, "Member 'UIField_WinLogbox_SetDataQuest::Unique' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataQuest, Value) == 0x000028, "Member 'UIField_WinLogbox_SetDataQuest::Value' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataQuest, bInIsOpenQuestConfirmation) == 0x00002C, "Member 'UIField_WinLogbox_SetDataQuest::bInIsOpenQuestConfirmation' has a wrong offset!");

// Function DarwinGame.UIField_WinLogbox.SetDataSimple
// 0x0028 (0x0028 - 0x0000)
struct UIField_WinLogbox_SetDataSimple final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Unique;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinLogbox_SetDataSimple) == 0x000008, "Wrong alignment on UIField_WinLogbox_SetDataSimple");
static_assert(sizeof(UIField_WinLogbox_SetDataSimple) == 0x000028, "Wrong size on UIField_WinLogbox_SetDataSimple");
static_assert(offsetof(UIField_WinLogbox_SetDataSimple, Key) == 0x000000, "Member 'UIField_WinLogbox_SetDataSimple::Key' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataSimple, Unique) == 0x000008, "Member 'UIField_WinLogbox_SetDataSimple::Unique' has a wrong offset!");
static_assert(offsetof(UIField_WinLogbox_SetDataSimple, Value) == 0x000020, "Member 'UIField_WinLogbox_SetDataSimple::Value' has a wrong offset!");

// Function DarwinGame.BTTask_GazePlayer.CheckGazeMotion
// 0x0010 (0x0010 - 0x0000)
struct BTTask_GazePlayer_CheckGazeMotion final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BTTask_GazePlayer_CheckGazeMotion) == 0x000008, "Wrong alignment on BTTask_GazePlayer_CheckGazeMotion");
static_assert(sizeof(BTTask_GazePlayer_CheckGazeMotion) == 0x000010, "Wrong size on BTTask_GazePlayer_CheckGazeMotion");
static_assert(offsetof(BTTask_GazePlayer_CheckGazeMotion, Monster) == 0x000000, "Member 'BTTask_GazePlayer_CheckGazeMotion::Monster' has a wrong offset!");
static_assert(offsetof(BTTask_GazePlayer_CheckGazeMotion, ReturnValue) == 0x000008, "Member 'BTTask_GazePlayer_CheckGazeMotion::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIEstimatePerformanceBase.GetRotateProcessVec
// 0x0010 (0x0010 - 0x0000)
struct UIEstimatePerformanceBase_GetRotateProcessVec final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEstimatePerformanceBase_GetRotateProcessVec) == 0x000004, "Wrong alignment on UIEstimatePerformanceBase_GetRotateProcessVec");
static_assert(sizeof(UIEstimatePerformanceBase_GetRotateProcessVec) == 0x000010, "Wrong size on UIEstimatePerformanceBase_GetRotateProcessVec");
static_assert(offsetof(UIEstimatePerformanceBase_GetRotateProcessVec, InTime) == 0x000000, "Member 'UIEstimatePerformanceBase_GetRotateProcessVec::InTime' has a wrong offset!");
static_assert(offsetof(UIEstimatePerformanceBase_GetRotateProcessVec, ReturnValue) == 0x000004, "Member 'UIEstimatePerformanceBase_GetRotateProcessVec::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIEstimatePerformanceBase.GetRotateProcessYaw
// 0x0008 (0x0008 - 0x0000)
struct UIEstimatePerformanceBase_GetRotateProcessYaw final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEstimatePerformanceBase_GetRotateProcessYaw) == 0x000004, "Wrong alignment on UIEstimatePerformanceBase_GetRotateProcessYaw");
static_assert(sizeof(UIEstimatePerformanceBase_GetRotateProcessYaw) == 0x000008, "Wrong size on UIEstimatePerformanceBase_GetRotateProcessYaw");
static_assert(offsetof(UIEstimatePerformanceBase_GetRotateProcessYaw, InTime) == 0x000000, "Member 'UIEstimatePerformanceBase_GetRotateProcessYaw::InTime' has a wrong offset!");
static_assert(offsetof(UIEstimatePerformanceBase_GetRotateProcessYaw, ReturnValue) == 0x000004, "Member 'UIEstimatePerformanceBase_GetRotateProcessYaw::ReturnValue' has a wrong offset!");

// Function DarwinGame.DailyQuestFunctionLibrary.OrderQuest
// 0x0014 (0x0014 - 0x0000)
struct DailyQuestFunctionLibrary_OrderQuest final
{
public:
	int32                                         RealYear;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealMonth;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealDay;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealHour;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealMinute;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyQuestFunctionLibrary_OrderQuest) == 0x000004, "Wrong alignment on DailyQuestFunctionLibrary_OrderQuest");
static_assert(sizeof(DailyQuestFunctionLibrary_OrderQuest) == 0x000014, "Wrong size on DailyQuestFunctionLibrary_OrderQuest");
static_assert(offsetof(DailyQuestFunctionLibrary_OrderQuest, RealYear) == 0x000000, "Member 'DailyQuestFunctionLibrary_OrderQuest::RealYear' has a wrong offset!");
static_assert(offsetof(DailyQuestFunctionLibrary_OrderQuest, RealMonth) == 0x000004, "Member 'DailyQuestFunctionLibrary_OrderQuest::RealMonth' has a wrong offset!");
static_assert(offsetof(DailyQuestFunctionLibrary_OrderQuest, RealDay) == 0x000008, "Member 'DailyQuestFunctionLibrary_OrderQuest::RealDay' has a wrong offset!");
static_assert(offsetof(DailyQuestFunctionLibrary_OrderQuest, RealHour) == 0x00000C, "Member 'DailyQuestFunctionLibrary_OrderQuest::RealHour' has a wrong offset!");
static_assert(offsetof(DailyQuestFunctionLibrary_OrderQuest, RealMinute) == 0x000010, "Member 'DailyQuestFunctionLibrary_OrderQuest::RealMinute' has a wrong offset!");

// Function DarwinGame.FieldObjectDataTable.GetAreaType
// 0x000C (0x000C - 0x0000)
struct FieldObjectDataTable_GetAreaType final
{
public:
	class FName                                   AssortID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     ReturnValue;                                       // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldObjectDataTable_GetAreaType) == 0x000004, "Wrong alignment on FieldObjectDataTable_GetAreaType");
static_assert(sizeof(FieldObjectDataTable_GetAreaType) == 0x00000C, "Wrong size on FieldObjectDataTable_GetAreaType");
static_assert(offsetof(FieldObjectDataTable_GetAreaType, AssortID) == 0x000000, "Member 'FieldObjectDataTable_GetAreaType::AssortID' has a wrong offset!");
static_assert(offsetof(FieldObjectDataTable_GetAreaType, ReturnValue) == 0x000008, "Member 'FieldObjectDataTable_GetAreaType::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectDataTable.GetEventID
// 0x0010 (0x0010 - 0x0000)
struct FieldObjectDataTable_GetEventID final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectDataTable_GetEventID) == 0x000004, "Wrong alignment on FieldObjectDataTable_GetEventID");
static_assert(sizeof(FieldObjectDataTable_GetEventID) == 0x000010, "Wrong size on FieldObjectDataTable_GetEventID");
static_assert(offsetof(FieldObjectDataTable_GetEventID, RowName) == 0x000000, "Member 'FieldObjectDataTable_GetEventID::RowName' has a wrong offset!");
static_assert(offsetof(FieldObjectDataTable_GetEventID, ReturnValue) == 0x000008, "Member 'FieldObjectDataTable_GetEventID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ExpDataTable.GetRequiredExp
// 0x000C (0x000C - 0x0000)
struct ExpDataTable_GetRequiredExp final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowthType;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExpDataTable_GetRequiredExp) == 0x000004, "Wrong alignment on ExpDataTable_GetRequiredExp");
static_assert(sizeof(ExpDataTable_GetRequiredExp) == 0x00000C, "Wrong size on ExpDataTable_GetRequiredExp");
static_assert(offsetof(ExpDataTable_GetRequiredExp, Level) == 0x000000, "Member 'ExpDataTable_GetRequiredExp::Level' has a wrong offset!");
static_assert(offsetof(ExpDataTable_GetRequiredExp, GrowthType) == 0x000004, "Member 'ExpDataTable_GetRequiredExp::GrowthType' has a wrong offset!");
static_assert(offsetof(ExpDataTable_GetRequiredExp, ReturnValue) == 0x000008, "Member 'ExpDataTable_GetRequiredExp::ReturnValue' has a wrong offset!");

// Function DarwinGame.AdditionalDamageExecution.CalculateDamage
// 0x0028 (0x0028 - 0x0000)
struct AdditionalDamageExecution_CalculateDamage final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAdditionalDamageParam                 Request;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdditionalDamageExecution_CalculateDamage) == 0x000008, "Wrong alignment on AdditionalDamageExecution_CalculateDamage");
static_assert(sizeof(AdditionalDamageExecution_CalculateDamage) == 0x000028, "Wrong size on AdditionalDamageExecution_CalculateDamage");
static_assert(offsetof(AdditionalDamageExecution_CalculateDamage, Target) == 0x000000, "Member 'AdditionalDamageExecution_CalculateDamage::Target' has a wrong offset!");
static_assert(offsetof(AdditionalDamageExecution_CalculateDamage, Request) == 0x000008, "Member 'AdditionalDamageExecution_CalculateDamage::Request' has a wrong offset!");
static_assert(offsetof(AdditionalDamageExecution_CalculateDamage, Damage) == 0x000020, "Member 'AdditionalDamageExecution_CalculateDamage::Damage' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.AddArtifact
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_AddArtifact final
{
public:
	int32                                         ArtifactID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_AddArtifact) == 0x000004, "Wrong alignment on ScriptEventBase_AddArtifact");
static_assert(sizeof(ScriptEventBase_AddArtifact) == 0x00000C, "Wrong size on ScriptEventBase_AddArtifact");
static_assert(offsetof(ScriptEventBase_AddArtifact, ArtifactID) == 0x000000, "Member 'ScriptEventBase_AddArtifact::ArtifactID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_AddArtifact, AreaID) == 0x000004, "Member 'ScriptEventBase_AddArtifact::AreaID' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.AddPartyMember
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_AddPartyMember final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_AddPartyMember) == 0x000004, "Wrong alignment on ScriptEventBase_AddPartyMember");
static_assert(sizeof(ScriptEventBase_AddPartyMember) == 0x000004, "Wrong size on ScriptEventBase_AddPartyMember");
static_assert(offsetof(ScriptEventBase_AddPartyMember, UniqueId) == 0x000000, "Member 'ScriptEventBase_AddPartyMember::UniqueId' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.CallEventObjectDoEnd
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_CallEventObjectDoEnd final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_CallEventObjectDoEnd) == 0x000004, "Wrong alignment on ScriptEventBase_CallEventObjectDoEnd");
static_assert(sizeof(ScriptEventBase_CallEventObjectDoEnd) == 0x000008, "Wrong size on ScriptEventBase_CallEventObjectDoEnd");
static_assert(offsetof(ScriptEventBase_CallEventObjectDoEnd, EventID) == 0x000000, "Member 'ScriptEventBase_CallEventObjectDoEnd::EventID' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.CallEventObjectDoStart
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_CallEventObjectDoStart final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_CallEventObjectDoStart) == 0x000004, "Wrong alignment on ScriptEventBase_CallEventObjectDoStart");
static_assert(sizeof(ScriptEventBase_CallEventObjectDoStart) == 0x000008, "Wrong size on ScriptEventBase_CallEventObjectDoStart");
static_assert(offsetof(ScriptEventBase_CallEventObjectDoStart, EventID) == 0x000000, "Member 'ScriptEventBase_CallEventObjectDoStart::EventID' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.EndingAutoSave
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_EndingAutoSave final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_EndingAutoSave) == 0x000008, "Wrong alignment on ScriptEventBase_EndingAutoSave");
static_assert(sizeof(ScriptEventBase_EndingAutoSave) == 0x000008, "Wrong size on ScriptEventBase_EndingAutoSave");
static_assert(offsetof(ScriptEventBase_EndingAutoSave, Texture) == 0x000000, "Member 'ScriptEventBase_EndingAutoSave::Texture' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.GetPCChangeTalkID
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_GetPCChangeTalkID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_GetPCChangeTalkID) == 0x000004, "Wrong alignment on ScriptEventBase_GetPCChangeTalkID");
static_assert(sizeof(ScriptEventBase_GetPCChangeTalkID) == 0x000008, "Wrong size on ScriptEventBase_GetPCChangeTalkID");
static_assert(offsetof(ScriptEventBase_GetPCChangeTalkID, ReturnValue) == 0x000000, "Member 'ScriptEventBase_GetPCChangeTalkID::ReturnValue' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.HasArtifact
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_HasArtifact final
{
public:
	int32                                         ArtifactID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptEventBase_HasArtifact) == 0x000004, "Wrong alignment on ScriptEventBase_HasArtifact");
static_assert(sizeof(ScriptEventBase_HasArtifact) == 0x000008, "Wrong size on ScriptEventBase_HasArtifact");
static_assert(offsetof(ScriptEventBase_HasArtifact, ArtifactID) == 0x000000, "Member 'ScriptEventBase_HasArtifact::ArtifactID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_HasArtifact, ReturnValue) == 0x000004, "Member 'ScriptEventBase_HasArtifact::ReturnValue' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.IsNpcLoading
// 0x0001 (0x0001 - 0x0000)
struct ScriptEventBase_IsNpcLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_IsNpcLoading) == 0x000001, "Wrong alignment on ScriptEventBase_IsNpcLoading");
static_assert(sizeof(ScriptEventBase_IsNpcLoading) == 0x000001, "Wrong size on ScriptEventBase_IsNpcLoading");
static_assert(offsetof(ScriptEventBase_IsNpcLoading, ReturnValue) == 0x000000, "Member 'ScriptEventBase_IsNpcLoading::ReturnValue' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.LoadPlanEvent
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_LoadPlanEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_LoadPlanEvent) == 0x000004, "Wrong alignment on ScriptEventBase_LoadPlanEvent");
static_assert(sizeof(ScriptEventBase_LoadPlanEvent) == 0x000008, "Wrong size on ScriptEventBase_LoadPlanEvent");
static_assert(offsetof(ScriptEventBase_LoadPlanEvent, EventID) == 0x000000, "Member 'ScriptEventBase_LoadPlanEvent::EventID' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.MoveInverseSideFromEventActor
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_MoveInverseSideFromEventActor final
{
public:
	float                                         MoveTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_MoveInverseSideFromEventActor) == 0x000004, "Wrong alignment on ScriptEventBase_MoveInverseSideFromEventActor");
static_assert(sizeof(ScriptEventBase_MoveInverseSideFromEventActor) == 0x000008, "Wrong size on ScriptEventBase_MoveInverseSideFromEventActor");
static_assert(offsetof(ScriptEventBase_MoveInverseSideFromEventActor, MoveTime) == 0x000000, "Member 'ScriptEventBase_MoveInverseSideFromEventActor::MoveTime' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_MoveInverseSideFromEventActor, NextSectionNum) == 0x000004, "Member 'ScriptEventBase_MoveInverseSideFromEventActor::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenArtifactRepositoryUI
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_OpenArtifactRepositoryUI final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenArtifactRepositoryUI) == 0x000004, "Wrong alignment on ScriptEventBase_OpenArtifactRepositoryUI");
static_assert(sizeof(ScriptEventBase_OpenArtifactRepositoryUI) == 0x000004, "Wrong size on ScriptEventBase_OpenArtifactRepositoryUI");
static_assert(offsetof(ScriptEventBase_OpenArtifactRepositoryUI, NextSectionNum) == 0x000000, "Member 'ScriptEventBase_OpenArtifactRepositoryUI::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenDialogWindow
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_OpenDialogWindow final
{
public:
	class FName                                   DaialogTextID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenDialogWindow) == 0x000004, "Wrong alignment on ScriptEventBase_OpenDialogWindow");
static_assert(sizeof(ScriptEventBase_OpenDialogWindow) == 0x00000C, "Wrong size on ScriptEventBase_OpenDialogWindow");
static_assert(offsetof(ScriptEventBase_OpenDialogWindow, DaialogTextID) == 0x000000, "Member 'ScriptEventBase_OpenDialogWindow::DaialogTextID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenDialogWindow, NextSectionNum) == 0x000008, "Member 'ScriptEventBase_OpenDialogWindow::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenFacilityMenu
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_OpenFacilityMenu final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenFacilityMenu) == 0x000004, "Wrong alignment on ScriptEventBase_OpenFacilityMenu");
static_assert(sizeof(ScriptEventBase_OpenFacilityMenu) == 0x000004, "Wrong size on ScriptEventBase_OpenFacilityMenu");
static_assert(offsetof(ScriptEventBase_OpenFacilityMenu, NextSectionNum) == 0x000000, "Member 'ScriptEventBase_OpenFacilityMenu::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenGroupDialogUI
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_OpenGroupDialogUI final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenGroupDialogUI) == 0x000004, "Wrong alignment on ScriptEventBase_OpenGroupDialogUI");
static_assert(sizeof(ScriptEventBase_OpenGroupDialogUI) == 0x000004, "Wrong size on ScriptEventBase_OpenGroupDialogUI");
static_assert(offsetof(ScriptEventBase_OpenGroupDialogUI, NextSectionNum) == 0x000000, "Member 'ScriptEventBase_OpenGroupDialogUI::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenLithographyUI
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_OpenLithographyUI final
{
public:
	class FName                                   MessageID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenLithographyUI) == 0x000004, "Wrong alignment on ScriptEventBase_OpenLithographyUI");
static_assert(sizeof(ScriptEventBase_OpenLithographyUI) == 0x00000C, "Wrong size on ScriptEventBase_OpenLithographyUI");
static_assert(offsetof(ScriptEventBase_OpenLithographyUI, MessageID) == 0x000000, "Member 'ScriptEventBase_OpenLithographyUI::MessageID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenLithographyUI, NextSectionNum) == 0x000008, "Member 'ScriptEventBase_OpenLithographyUI::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenMainMenuQuest
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_OpenMainMenuQuest final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenMainMenuQuest) == 0x000004, "Wrong alignment on ScriptEventBase_OpenMainMenuQuest");
static_assert(sizeof(ScriptEventBase_OpenMainMenuQuest) == 0x000004, "Wrong size on ScriptEventBase_OpenMainMenuQuest");
static_assert(offsetof(ScriptEventBase_OpenMainMenuQuest, NextSectionNum) == 0x000000, "Member 'ScriptEventBase_OpenMainMenuQuest::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenNewItemTips
// 0x0010 (0x0010 - 0x0000)
struct ScriptEventBase_OpenNewItemTips final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstTimeAddItem;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptEventBase_OpenNewItemTips) == 0x000004, "Wrong alignment on ScriptEventBase_OpenNewItemTips");
static_assert(sizeof(ScriptEventBase_OpenNewItemTips) == 0x000010, "Wrong size on ScriptEventBase_OpenNewItemTips");
static_assert(offsetof(ScriptEventBase_OpenNewItemTips, ItemId) == 0x000000, "Member 'ScriptEventBase_OpenNewItemTips::ItemId' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenNewItemTips, NextSectionNum) == 0x000008, "Member 'ScriptEventBase_OpenNewItemTips::NextSectionNum' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenNewItemTips, IsFirstTimeAddItem) == 0x00000C, "Member 'ScriptEventBase_OpenNewItemTips::IsFirstTimeAddItem' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenPCChangeUI
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_OpenPCChangeUI final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenPCChangeUI) == 0x000004, "Wrong alignment on ScriptEventBase_OpenPCChangeUI");
static_assert(sizeof(ScriptEventBase_OpenPCChangeUI) == 0x000004, "Wrong size on ScriptEventBase_OpenPCChangeUI");
static_assert(offsetof(ScriptEventBase_OpenPCChangeUI, NextSectionNum) == 0x000000, "Member 'ScriptEventBase_OpenPCChangeUI::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenQuestOrderUI
// 0x0028 (0x0028 - 0x0000)
struct ScriptEventBase_OpenQuestOrderUI final
{
public:
	TArray<class FName>                           QuestIdList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcID;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsParentDisplay;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextSectionNum;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNewOrderQuest;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClearedDisplay;                                 // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptEventBase_OpenQuestOrderUI) == 0x000008, "Wrong alignment on ScriptEventBase_OpenQuestOrderUI");
static_assert(sizeof(ScriptEventBase_OpenQuestOrderUI) == 0x000028, "Wrong size on ScriptEventBase_OpenQuestOrderUI");
static_assert(offsetof(ScriptEventBase_OpenQuestOrderUI, QuestIdList) == 0x000000, "Member 'ScriptEventBase_OpenQuestOrderUI::QuestIdList' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenQuestOrderUI, NpcID) == 0x000010, "Member 'ScriptEventBase_OpenQuestOrderUI::NpcID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenQuestOrderUI, bIsParentDisplay) == 0x000018, "Member 'ScriptEventBase_OpenQuestOrderUI::bIsParentDisplay' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenQuestOrderUI, NextSectionNum) == 0x00001C, "Member 'ScriptEventBase_OpenQuestOrderUI::NextSectionNum' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenQuestOrderUI, bIsNewOrderQuest) == 0x000020, "Member 'ScriptEventBase_OpenQuestOrderUI::bIsNewOrderQuest' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenQuestOrderUI, bIsClearedDisplay) == 0x000021, "Member 'ScriptEventBase_OpenQuestOrderUI::bIsClearedDisplay' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenQuestRewardWindow
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_OpenQuestRewardWindow final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenQuestRewardWindow) == 0x000004, "Wrong alignment on ScriptEventBase_OpenQuestRewardWindow");
static_assert(sizeof(ScriptEventBase_OpenQuestRewardWindow) == 0x00000C, "Wrong size on ScriptEventBase_OpenQuestRewardWindow");
static_assert(offsetof(ScriptEventBase_OpenQuestRewardWindow, QuestID) == 0x000000, "Member 'ScriptEventBase_OpenQuestRewardWindow::QuestID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenQuestRewardWindow, NextSectionNum) == 0x000008, "Member 'ScriptEventBase_OpenQuestRewardWindow::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenShopUI
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_OpenShopUI final
{
public:
	ETradePlace                                   ShopType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextSectionNum;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenShopUI) == 0x000004, "Wrong alignment on ScriptEventBase_OpenShopUI");
static_assert(sizeof(ScriptEventBase_OpenShopUI) == 0x000008, "Wrong size on ScriptEventBase_OpenShopUI");
static_assert(offsetof(ScriptEventBase_OpenShopUI, ShopType) == 0x000000, "Member 'ScriptEventBase_OpenShopUI::ShopType' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenShopUI, NextSectionNum) == 0x000004, "Member 'ScriptEventBase_OpenShopUI::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenStaffRoll
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_OpenStaffRoll final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenStaffRoll) == 0x000004, "Wrong alignment on ScriptEventBase_OpenStaffRoll");
static_assert(sizeof(ScriptEventBase_OpenStaffRoll) == 0x000004, "Wrong size on ScriptEventBase_OpenStaffRoll");
static_assert(offsetof(ScriptEventBase_OpenStaffRoll, NextSectionNum) == 0x000000, "Member 'ScriptEventBase_OpenStaffRoll::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenTips
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_OpenTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenTips) == 0x000004, "Wrong alignment on ScriptEventBase_OpenTips");
static_assert(sizeof(ScriptEventBase_OpenTips) == 0x00000C, "Wrong size on ScriptEventBase_OpenTips");
static_assert(offsetof(ScriptEventBase_OpenTips, TipsID) == 0x000000, "Member 'ScriptEventBase_OpenTips::TipsID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_OpenTips, NextSectionNum) == 0x000008, "Member 'ScriptEventBase_OpenTips::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.OpenTreasureAppraiseUI
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_OpenTreasureAppraiseUI final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_OpenTreasureAppraiseUI) == 0x000004, "Wrong alignment on ScriptEventBase_OpenTreasureAppraiseUI");
static_assert(sizeof(ScriptEventBase_OpenTreasureAppraiseUI) == 0x000004, "Wrong size on ScriptEventBase_OpenTreasureAppraiseUI");
static_assert(offsetof(ScriptEventBase_OpenTreasureAppraiseUI, NextSectionNum) == 0x000000, "Member 'ScriptEventBase_OpenTreasureAppraiseUI::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.PlayIE
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_PlayIE final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_PlayIE) == 0x000004, "Wrong alignment on ScriptEventBase_PlayIE");
static_assert(sizeof(ScriptEventBase_PlayIE) == 0x00000C, "Wrong size on ScriptEventBase_PlayIE");
static_assert(offsetof(ScriptEventBase_PlayIE, EventID) == 0x000000, "Member 'ScriptEventBase_PlayIE::EventID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_PlayIE, NextSectionNum) == 0x000008, "Member 'ScriptEventBase_PlayIE::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.PlaySequencerEvent
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_PlaySequencerEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSectionNum;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_PlaySequencerEvent) == 0x000004, "Wrong alignment on ScriptEventBase_PlaySequencerEvent");
static_assert(sizeof(ScriptEventBase_PlaySequencerEvent) == 0x00000C, "Wrong size on ScriptEventBase_PlaySequencerEvent");
static_assert(offsetof(ScriptEventBase_PlaySequencerEvent, EventID) == 0x000000, "Member 'ScriptEventBase_PlaySequencerEvent::EventID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_PlaySequencerEvent, NextSectionNum) == 0x000008, "Member 'ScriptEventBase_PlaySequencerEvent::NextSectionNum' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.RemoveAllPartyMember
// 0x0010 (0x0010 - 0x0000)
struct ScriptEventBase_RemoveAllPartyMember final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_RemoveAllPartyMember) == 0x000008, "Wrong alignment on ScriptEventBase_RemoveAllPartyMember");
static_assert(sizeof(ScriptEventBase_RemoveAllPartyMember) == 0x000010, "Wrong size on ScriptEventBase_RemoveAllPartyMember");
static_assert(offsetof(ScriptEventBase_RemoveAllPartyMember, ReturnValue) == 0x000000, "Member 'ScriptEventBase_RemoveAllPartyMember::ReturnValue' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.RequestBaseAreaBattleEvent
// 0x000C (0x000C - 0x0000)
struct ScriptEventBase_RequestBaseAreaBattleEvent final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptEventBase_RequestBaseAreaBattleEvent) == 0x000004, "Wrong alignment on ScriptEventBase_RequestBaseAreaBattleEvent");
static_assert(sizeof(ScriptEventBase_RequestBaseAreaBattleEvent) == 0x00000C, "Wrong size on ScriptEventBase_RequestBaseAreaBattleEvent");
static_assert(offsetof(ScriptEventBase_RequestBaseAreaBattleEvent, QuestID) == 0x000000, "Member 'ScriptEventBase_RequestBaseAreaBattleEvent::QuestID' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_RequestBaseAreaBattleEvent, ReturnValue) == 0x000008, "Member 'ScriptEventBase_RequestBaseAreaBattleEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.ResetPlayerAndCameraTransform
// 0x0050 (0x0050 - 0x0000)
struct ScriptEventBase_ResetPlayerAndCameraTransform final
{
public:
	struct FTransform                             playerTransform;                                   // 0x0000(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          isTeleport;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDarwinCameraResetParam                resetCameraParam;                                  // 0x0034(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_ResetPlayerAndCameraTransform) == 0x000010, "Wrong alignment on ScriptEventBase_ResetPlayerAndCameraTransform");
static_assert(sizeof(ScriptEventBase_ResetPlayerAndCameraTransform) == 0x000050, "Wrong size on ScriptEventBase_ResetPlayerAndCameraTransform");
static_assert(offsetof(ScriptEventBase_ResetPlayerAndCameraTransform, playerTransform) == 0x000000, "Member 'ScriptEventBase_ResetPlayerAndCameraTransform::playerTransform' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_ResetPlayerAndCameraTransform, isTeleport) == 0x000030, "Member 'ScriptEventBase_ResetPlayerAndCameraTransform::isTeleport' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_ResetPlayerAndCameraTransform, resetCameraParam) == 0x000034, "Member 'ScriptEventBase_ResetPlayerAndCameraTransform::resetCameraParam' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.SetCandidateMonsterInfo
// 0x0010 (0x0010 - 0x0000)
struct ScriptEventBase_SetCandidateMonsterInfo final
{
public:
	class FName                                   MonsterId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterNum;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwrite;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptEventBase_SetCandidateMonsterInfo) == 0x000004, "Wrong alignment on ScriptEventBase_SetCandidateMonsterInfo");
static_assert(sizeof(ScriptEventBase_SetCandidateMonsterInfo) == 0x000010, "Wrong size on ScriptEventBase_SetCandidateMonsterInfo");
static_assert(offsetof(ScriptEventBase_SetCandidateMonsterInfo, MonsterId) == 0x000000, "Member 'ScriptEventBase_SetCandidateMonsterInfo::MonsterId' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_SetCandidateMonsterInfo, MonsterNum) == 0x000008, "Member 'ScriptEventBase_SetCandidateMonsterInfo::MonsterNum' has a wrong offset!");
static_assert(offsetof(ScriptEventBase_SetCandidateMonsterInfo, IsOverwrite) == 0x00000C, "Member 'ScriptEventBase_SetCandidateMonsterInfo::IsOverwrite' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.SetMyTreasure
// 0x0004 (0x0004 - 0x0000)
struct ScriptEventBase_SetMyTreasure final
{
public:
	int32                                         ArtifactID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_SetMyTreasure) == 0x000004, "Wrong alignment on ScriptEventBase_SetMyTreasure");
static_assert(sizeof(ScriptEventBase_SetMyTreasure) == 0x000004, "Wrong size on ScriptEventBase_SetMyTreasure");
static_assert(offsetof(ScriptEventBase_SetMyTreasure, ArtifactID) == 0x000000, "Member 'ScriptEventBase_SetMyTreasure::ArtifactID' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.SetSelectFastTravelID
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_SetSelectFastTravelID final
{
public:
	class FName                                   FastTravelID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_SetSelectFastTravelID) == 0x000004, "Wrong alignment on ScriptEventBase_SetSelectFastTravelID");
static_assert(sizeof(ScriptEventBase_SetSelectFastTravelID) == 0x000008, "Wrong size on ScriptEventBase_SetSelectFastTravelID");
static_assert(offsetof(ScriptEventBase_SetSelectFastTravelID, FastTravelID) == 0x000000, "Member 'ScriptEventBase_SetSelectFastTravelID::FastTravelID' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.UnLoadEvent
// 0x0008 (0x0008 - 0x0000)
struct ScriptEventBase_UnLoadEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_UnLoadEvent) == 0x000004, "Wrong alignment on ScriptEventBase_UnLoadEvent");
static_assert(sizeof(ScriptEventBase_UnLoadEvent) == 0x000008, "Wrong size on ScriptEventBase_UnLoadEvent");
static_assert(offsetof(ScriptEventBase_UnLoadEvent, EventID) == 0x000000, "Member 'ScriptEventBase_UnLoadEvent::EventID' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.UpdateMyTreasure
// 0x0001 (0x0001 - 0x0000)
struct ScriptEventBase_UpdateMyTreasure final
{
public:
	bool                                          IsSoundOn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_UpdateMyTreasure) == 0x000001, "Wrong alignment on ScriptEventBase_UpdateMyTreasure");
static_assert(sizeof(ScriptEventBase_UpdateMyTreasure) == 0x000001, "Wrong size on ScriptEventBase_UpdateMyTreasure");
static_assert(offsetof(ScriptEventBase_UpdateMyTreasure, IsSoundOn) == 0x000000, "Member 'ScriptEventBase_UpdateMyTreasure::IsSoundOn' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.IsDispatchPartner
// 0x0001 (0x0001 - 0x0000)
struct ScriptEventBase_IsDispatchPartner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_IsDispatchPartner) == 0x000001, "Wrong alignment on ScriptEventBase_IsDispatchPartner");
static_assert(sizeof(ScriptEventBase_IsDispatchPartner) == 0x000001, "Wrong size on ScriptEventBase_IsDispatchPartner");
static_assert(offsetof(ScriptEventBase_IsDispatchPartner, ReturnValue) == 0x000000, "Member 'ScriptEventBase_IsDispatchPartner::ReturnValue' has a wrong offset!");

// Function DarwinGame.ScriptEventBase.IsLoadingNpcAsset
// 0x0001 (0x0001 - 0x0000)
struct ScriptEventBase_IsLoadingNpcAsset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScriptEventBase_IsLoadingNpcAsset) == 0x000001, "Wrong alignment on ScriptEventBase_IsLoadingNpcAsset");
static_assert(sizeof(ScriptEventBase_IsLoadingNpcAsset) == 0x000001, "Wrong size on ScriptEventBase_IsLoadingNpcAsset");
static_assert(offsetof(ScriptEventBase_IsLoadingNpcAsset, ReturnValue) == 0x000000, "Member 'ScriptEventBase_IsLoadingNpcAsset::ReturnValue' has a wrong offset!");

// Function DarwinGame.NetworkPersonEvent.SetEndReplicaTalkEvent
// 0x0001 (0x0001 - 0x0000)
struct NetworkPersonEvent_SetEndReplicaTalkEvent final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkPersonEvent_SetEndReplicaTalkEvent) == 0x000001, "Wrong alignment on NetworkPersonEvent_SetEndReplicaTalkEvent");
static_assert(sizeof(NetworkPersonEvent_SetEndReplicaTalkEvent) == 0x000001, "Wrong size on NetworkPersonEvent_SetEndReplicaTalkEvent");
static_assert(offsetof(NetworkPersonEvent_SetEndReplicaTalkEvent, flg) == 0x000000, "Member 'NetworkPersonEvent_SetEndReplicaTalkEvent::flg' has a wrong offset!");

// Function DarwinGame.NetworkPersonEvent.SetTreasureHideUpDLCountFlg
// 0x0001 (0x0001 - 0x0000)
struct NetworkPersonEvent_SetTreasureHideUpDLCountFlg final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkPersonEvent_SetTreasureHideUpDLCountFlg) == 0x000001, "Wrong alignment on NetworkPersonEvent_SetTreasureHideUpDLCountFlg");
static_assert(sizeof(NetworkPersonEvent_SetTreasureHideUpDLCountFlg) == 0x000001, "Wrong size on NetworkPersonEvent_SetTreasureHideUpDLCountFlg");
static_assert(offsetof(NetworkPersonEvent_SetTreasureHideUpDLCountFlg, flg) == 0x000000, "Member 'NetworkPersonEvent_SetTreasureHideUpDLCountFlg::flg' has a wrong offset!");

// Function DarwinGame.NetworkPersonEvent.GetDipronUIDeleteNpcFlag
// 0x0001 (0x0001 - 0x0000)
struct NetworkPersonEvent_GetDipronUIDeleteNpcFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkPersonEvent_GetDipronUIDeleteNpcFlag) == 0x000001, "Wrong alignment on NetworkPersonEvent_GetDipronUIDeleteNpcFlag");
static_assert(sizeof(NetworkPersonEvent_GetDipronUIDeleteNpcFlag) == 0x000001, "Wrong size on NetworkPersonEvent_GetDipronUIDeleteNpcFlag");
static_assert(offsetof(NetworkPersonEvent_GetDipronUIDeleteNpcFlag, ReturnValue) == 0x000000, "Member 'NetworkPersonEvent_GetDipronUIDeleteNpcFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.NetworkPersonEvent.GetEndReplicaTalkEvent
// 0x0001 (0x0001 - 0x0000)
struct NetworkPersonEvent_GetEndReplicaTalkEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkPersonEvent_GetEndReplicaTalkEvent) == 0x000001, "Wrong alignment on NetworkPersonEvent_GetEndReplicaTalkEvent");
static_assert(sizeof(NetworkPersonEvent_GetEndReplicaTalkEvent) == 0x000001, "Wrong size on NetworkPersonEvent_GetEndReplicaTalkEvent");
static_assert(offsetof(NetworkPersonEvent_GetEndReplicaTalkEvent, ReturnValue) == 0x000000, "Member 'NetworkPersonEvent_GetEndReplicaTalkEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.NetworkPersonEvent.GetIsOpenedReplicaTips
// 0x0001 (0x0001 - 0x0000)
struct NetworkPersonEvent_GetIsOpenedReplicaTips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkPersonEvent_GetIsOpenedReplicaTips) == 0x000001, "Wrong alignment on NetworkPersonEvent_GetIsOpenedReplicaTips");
static_assert(sizeof(NetworkPersonEvent_GetIsOpenedReplicaTips) == 0x000001, "Wrong size on NetworkPersonEvent_GetIsOpenedReplicaTips");
static_assert(offsetof(NetworkPersonEvent_GetIsOpenedReplicaTips, ReturnValue) == 0x000000, "Member 'NetworkPersonEvent_GetIsOpenedReplicaTips::ReturnValue' has a wrong offset!");

// Function DarwinGame.NetworkPersonEvent.GetTreasureHideUpDLCountFlg
// 0x0001 (0x0001 - 0x0000)
struct NetworkPersonEvent_GetTreasureHideUpDLCountFlg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkPersonEvent_GetTreasureHideUpDLCountFlg) == 0x000001, "Wrong alignment on NetworkPersonEvent_GetTreasureHideUpDLCountFlg");
static_assert(sizeof(NetworkPersonEvent_GetTreasureHideUpDLCountFlg) == 0x000001, "Wrong size on NetworkPersonEvent_GetTreasureHideUpDLCountFlg");
static_assert(offsetof(NetworkPersonEvent_GetTreasureHideUpDLCountFlg, ReturnValue) == 0x000000, "Member 'NetworkPersonEvent_GetTreasureHideUpDLCountFlg::ReturnValue' has a wrong offset!");

// Function DarwinGame.NetworkManagementSceneCapture.CopyCameraSettingsToAllSceneCapture
// 0x0018 (0x0018 - 0x0000)
struct NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture final
{
public:
	class UCameraComponent*                       SrcCamera;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               Dst1;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               Dst2;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture) == 0x000008, "Wrong alignment on NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture");
static_assert(sizeof(NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture) == 0x000018, "Wrong size on NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture");
static_assert(offsetof(NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture, SrcCamera) == 0x000000, "Member 'NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture::SrcCamera' has a wrong offset!");
static_assert(offsetof(NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture, Dst1) == 0x000008, "Member 'NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture::Dst1' has a wrong offset!");
static_assert(offsetof(NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture, Dst2) == 0x000010, "Member 'NetworkManagementSceneCapture_CopyCameraSettingsToAllSceneCapture::Dst2' has a wrong offset!");

// Function DarwinGame.NetworkManagementSceneCapture.GetMonster
// 0x0008 (0x0008 - 0x0000)
struct NetworkManagementSceneCapture_GetMonster final
{
public:
	class AMonster*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkManagementSceneCapture_GetMonster) == 0x000008, "Wrong alignment on NetworkManagementSceneCapture_GetMonster");
static_assert(sizeof(NetworkManagementSceneCapture_GetMonster) == 0x000008, "Wrong size on NetworkManagementSceneCapture_GetMonster");
static_assert(offsetof(NetworkManagementSceneCapture_GetMonster, ReturnValue) == 0x000000, "Member 'NetworkManagementSceneCapture_GetMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterAssetManagerBase.IsCompletedLoad
// 0x000C (0x000C - 0x0000)
struct CharacterAssetManagerBase_IsCompletedLoad final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAssetManagerBase_IsCompletedLoad) == 0x000004, "Wrong alignment on CharacterAssetManagerBase_IsCompletedLoad");
static_assert(sizeof(CharacterAssetManagerBase_IsCompletedLoad) == 0x00000C, "Wrong size on CharacterAssetManagerBase_IsCompletedLoad");
static_assert(offsetof(CharacterAssetManagerBase_IsCompletedLoad, ID) == 0x000000, "Member 'CharacterAssetManagerBase_IsCompletedLoad::ID' has a wrong offset!");
static_assert(offsetof(CharacterAssetManagerBase_IsCompletedLoad, ReturnValue) == 0x000008, "Member 'CharacterAssetManagerBase_IsCompletedLoad::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterAssetManagerBase.IsLoading
// 0x000C (0x000C - 0x0000)
struct CharacterAssetManagerBase_IsLoading final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAssetManagerBase_IsLoading) == 0x000004, "Wrong alignment on CharacterAssetManagerBase_IsLoading");
static_assert(sizeof(CharacterAssetManagerBase_IsLoading) == 0x00000C, "Wrong size on CharacterAssetManagerBase_IsLoading");
static_assert(offsetof(CharacterAssetManagerBase_IsLoading, ID) == 0x000000, "Member 'CharacterAssetManagerBase_IsLoading::ID' has a wrong offset!");
static_assert(offsetof(CharacterAssetManagerBase_IsLoading, ReturnValue) == 0x000008, "Member 'CharacterAssetManagerBase_IsLoading::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterAssetManagerBase.RequestASyncLoadActor
// 0x0018 (0x0018 - 0x0000)
struct CharacterAssetManagerBase_RequestASyncLoadActor final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class FName ID)>               onEvent;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAssetManagerBase_RequestASyncLoadActor) == 0x000004, "Wrong alignment on CharacterAssetManagerBase_RequestASyncLoadActor");
static_assert(sizeof(CharacterAssetManagerBase_RequestASyncLoadActor) == 0x000018, "Wrong size on CharacterAssetManagerBase_RequestASyncLoadActor");
static_assert(offsetof(CharacterAssetManagerBase_RequestASyncLoadActor, ID) == 0x000000, "Member 'CharacterAssetManagerBase_RequestASyncLoadActor::ID' has a wrong offset!");
static_assert(offsetof(CharacterAssetManagerBase_RequestASyncLoadActor, onEvent) == 0x000008, "Member 'CharacterAssetManagerBase_RequestASyncLoadActor::onEvent' has a wrong offset!");

// Function DarwinGame.CharacterAssetManagerBase.Unload
// 0x0008 (0x0008 - 0x0000)
struct CharacterAssetManagerBase_Unload final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAssetManagerBase_Unload) == 0x000004, "Wrong alignment on CharacterAssetManagerBase_Unload");
static_assert(sizeof(CharacterAssetManagerBase_Unload) == 0x000008, "Wrong size on CharacterAssetManagerBase_Unload");
static_assert(offsetof(CharacterAssetManagerBase_Unload, ID) == 0x000000, "Member 'CharacterAssetManagerBase_Unload::ID' has a wrong offset!");

// Function DarwinGame.NPCAssetManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct NPCAssetManager_GetInstance final
{
public:
	class UNPCAssetManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAssetManager_GetInstance) == 0x000008, "Wrong alignment on NPCAssetManager_GetInstance");
static_assert(sizeof(NPCAssetManager_GetInstance) == 0x000008, "Wrong size on NPCAssetManager_GetInstance");
static_assert(offsetof(NPCAssetManager_GetInstance, ReturnValue) == 0x000000, "Member 'NPCAssetManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAssetManager.GetNPCAssetArray
// 0x0018 (0x0018 - 0x0000)
struct NPCAssetManager_GetNPCAssetArray final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAssetManager_GetNPCAssetArray) == 0x000008, "Wrong alignment on NPCAssetManager_GetNPCAssetArray");
static_assert(sizeof(NPCAssetManager_GetNPCAssetArray) == 0x000018, "Wrong size on NPCAssetManager_GetNPCAssetArray");
static_assert(offsetof(NPCAssetManager_GetNPCAssetArray, ID) == 0x000000, "Member 'NPCAssetManager_GetNPCAssetArray::ID' has a wrong offset!");
static_assert(offsetof(NPCAssetManager_GetNPCAssetArray, ReturnValue) == 0x000008, "Member 'NPCAssetManager_GetNPCAssetArray::ReturnValue' has a wrong offset!");

// Function DarwinGame.NonActionHealExecutionBase.CalculateHeal
// 0x0028 (0x0028 - 0x0000)
struct NonActionHealExecutionBase_CalculateHeal final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_HealRequest                        Request;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Heal;                                              // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NonActionHealExecutionBase_CalculateHeal) == 0x000008, "Wrong alignment on NonActionHealExecutionBase_CalculateHeal");
static_assert(sizeof(NonActionHealExecutionBase_CalculateHeal) == 0x000028, "Wrong size on NonActionHealExecutionBase_CalculateHeal");
static_assert(offsetof(NonActionHealExecutionBase_CalculateHeal, Target) == 0x000000, "Member 'NonActionHealExecutionBase_CalculateHeal::Target' has a wrong offset!");
static_assert(offsetof(NonActionHealExecutionBase_CalculateHeal, Request) == 0x000008, "Member 'NonActionHealExecutionBase_CalculateHeal::Request' has a wrong offset!");
static_assert(offsetof(NonActionHealExecutionBase_CalculateHeal, Heal) == 0x000020, "Member 'NonActionHealExecutionBase_CalculateHeal::Heal' has a wrong offset!");

// Function DarwinGame.ObjectReactionInterface.BindEventCalledWhileAccess
// 0x0018 (0x0018 - 0x0000)
struct ObjectReactionInterface_BindEventCalledWhileAccess final
{
public:
	struct FEventCalledWhileAccess                Event;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectReactionInterface_BindEventCalledWhileAccess) == 0x000008, "Wrong alignment on ObjectReactionInterface_BindEventCalledWhileAccess");
static_assert(sizeof(ObjectReactionInterface_BindEventCalledWhileAccess) == 0x000018, "Wrong size on ObjectReactionInterface_BindEventCalledWhileAccess");
static_assert(offsetof(ObjectReactionInterface_BindEventCalledWhileAccess, Event) == 0x000000, "Member 'ObjectReactionInterface_BindEventCalledWhileAccess::Event' has a wrong offset!");

// Function DarwinGame.ObjectReactionInterface.GetObjectReactionTypeWithCaution
// 0x0002 (0x0002 - 0x0000)
struct ObjectReactionInterface_GetObjectReactionTypeWithCaution final
{
public:
	EObjectReactionType                           ReactionType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputGuideCaution                            CautionType;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectReactionInterface_GetObjectReactionTypeWithCaution) == 0x000001, "Wrong alignment on ObjectReactionInterface_GetObjectReactionTypeWithCaution");
static_assert(sizeof(ObjectReactionInterface_GetObjectReactionTypeWithCaution) == 0x000002, "Wrong size on ObjectReactionInterface_GetObjectReactionTypeWithCaution");
static_assert(offsetof(ObjectReactionInterface_GetObjectReactionTypeWithCaution, ReactionType) == 0x000000, "Member 'ObjectReactionInterface_GetObjectReactionTypeWithCaution::ReactionType' has a wrong offset!");
static_assert(offsetof(ObjectReactionInterface_GetObjectReactionTypeWithCaution, CautionType) == 0x000001, "Member 'ObjectReactionInterface_GetObjectReactionTypeWithCaution::CautionType' has a wrong offset!");

// Function DarwinGame.ObjectReactionInterface.HandleAimEvent
// 0x0001 (0x0001 - 0x0000)
struct ObjectReactionInterface_HandleAimEvent final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectReactionInterface_HandleAimEvent) == 0x000001, "Wrong alignment on ObjectReactionInterface_HandleAimEvent");
static_assert(sizeof(ObjectReactionInterface_HandleAimEvent) == 0x000001, "Wrong size on ObjectReactionInterface_HandleAimEvent");
static_assert(offsetof(ObjectReactionInterface_HandleAimEvent, End) == 0x000000, "Member 'ObjectReactionInterface_HandleAimEvent::End' has a wrong offset!");

// Function DarwinGame.ObjectReactionInterface.HandleShakeEvent
// 0x000C (0x000C - 0x0000)
struct ObjectReactionInterface_HandleShakeEvent final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectReactionInterface_HandleShakeEvent) == 0x000004, "Wrong alignment on ObjectReactionInterface_HandleShakeEvent");
static_assert(sizeof(ObjectReactionInterface_HandleShakeEvent) == 0x00000C, "Wrong size on ObjectReactionInterface_HandleShakeEvent");
static_assert(offsetof(ObjectReactionInterface_HandleShakeEvent, HitLocation) == 0x000000, "Member 'ObjectReactionInterface_HandleShakeEvent::HitLocation' has a wrong offset!");

// Function DarwinGame.ObjectReactionInterface.OnReceiveHit
// 0x0010 (0x0010 - 0x0000)
struct ObjectReactionInterface_OnReceiveHit final
{
public:
	EObjectEffectionEnum                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectReactionInterface_OnReceiveHit) == 0x000008, "Wrong alignment on ObjectReactionInterface_OnReceiveHit");
static_assert(sizeof(ObjectReactionInterface_OnReceiveHit) == 0x000010, "Wrong size on ObjectReactionInterface_OnReceiveHit");
static_assert(offsetof(ObjectReactionInterface_OnReceiveHit, Type) == 0x000000, "Member 'ObjectReactionInterface_OnReceiveHit::Type' has a wrong offset!");
static_assert(offsetof(ObjectReactionInterface_OnReceiveHit, Instigator) == 0x000008, "Member 'ObjectReactionInterface_OnReceiveHit::Instigator' has a wrong offset!");

// Function DarwinGame.DarwinCheatManager.DumpClusterOutsideRefs
// 0x0010 (0x0010 - 0x0000)
struct DarwinCheatManager_DumpClusterOutsideRefs final
{
public:
	class FString                                 ClusterName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinCheatManager_DumpClusterOutsideRefs) == 0x000008, "Wrong alignment on DarwinCheatManager_DumpClusterOutsideRefs");
static_assert(sizeof(DarwinCheatManager_DumpClusterOutsideRefs) == 0x000010, "Wrong size on DarwinCheatManager_DumpClusterOutsideRefs");
static_assert(offsetof(DarwinCheatManager_DumpClusterOutsideRefs, ClusterName) == 0x000000, "Member 'DarwinCheatManager_DumpClusterOutsideRefs::ClusterName' has a wrong offset!");

// Function DarwinGame.DungeonPointNest.OnBeginOverlapEffectCollision
// 0x00A8 (0x00A8 - 0x0000)
struct DungeonPointNest_OnBeginOverlapEffectCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DungeonPointNest_OnBeginOverlapEffectCollision) == 0x000008, "Wrong alignment on DungeonPointNest_OnBeginOverlapEffectCollision");
static_assert(sizeof(DungeonPointNest_OnBeginOverlapEffectCollision) == 0x0000A8, "Wrong size on DungeonPointNest_OnBeginOverlapEffectCollision");
static_assert(offsetof(DungeonPointNest_OnBeginOverlapEffectCollision, OverlappedComp) == 0x000000, "Member 'DungeonPointNest_OnBeginOverlapEffectCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnBeginOverlapEffectCollision, OtherActor) == 0x000008, "Member 'DungeonPointNest_OnBeginOverlapEffectCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnBeginOverlapEffectCollision, OtherComp) == 0x000010, "Member 'DungeonPointNest_OnBeginOverlapEffectCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnBeginOverlapEffectCollision, OtherBodyIndex) == 0x000018, "Member 'DungeonPointNest_OnBeginOverlapEffectCollision::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnBeginOverlapEffectCollision, bFromSweep) == 0x00001C, "Member 'DungeonPointNest_OnBeginOverlapEffectCollision::bFromSweep' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnBeginOverlapEffectCollision, SweepResult) == 0x000020, "Member 'DungeonPointNest_OnBeginOverlapEffectCollision::SweepResult' has a wrong offset!");

// Function DarwinGame.DungeonPointNest.OnEndOverlapEffectCollision
// 0x0020 (0x0020 - 0x0000)
struct DungeonPointNest_OnEndOverlapEffectCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DungeonPointNest_OnEndOverlapEffectCollision) == 0x000008, "Wrong alignment on DungeonPointNest_OnEndOverlapEffectCollision");
static_assert(sizeof(DungeonPointNest_OnEndOverlapEffectCollision) == 0x000020, "Wrong size on DungeonPointNest_OnEndOverlapEffectCollision");
static_assert(offsetof(DungeonPointNest_OnEndOverlapEffectCollision, OverlappedComp) == 0x000000, "Member 'DungeonPointNest_OnEndOverlapEffectCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnEndOverlapEffectCollision, OtherActor) == 0x000008, "Member 'DungeonPointNest_OnEndOverlapEffectCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnEndOverlapEffectCollision, OtherComp) == 0x000010, "Member 'DungeonPointNest_OnEndOverlapEffectCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(DungeonPointNest_OnEndOverlapEffectCollision, OtherBodyIndex) == 0x000018, "Member 'DungeonPointNest_OnEndOverlapEffectCollision::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.QuicksandBase.GetQuicksandDMI
// 0x0008 (0x0008 - 0x0000)
struct QuicksandBase_GetQuicksandDMI final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuicksandBase_GetQuicksandDMI) == 0x000008, "Wrong alignment on QuicksandBase_GetQuicksandDMI");
static_assert(sizeof(QuicksandBase_GetQuicksandDMI) == 0x000008, "Wrong size on QuicksandBase_GetQuicksandDMI");
static_assert(offsetof(QuicksandBase_GetQuicksandDMI, ReturnValue) == 0x000000, "Member 'QuicksandBase_GetQuicksandDMI::ReturnValue' has a wrong offset!");

// Function DarwinGame.DungeonGimmickMonster.OnEnemyMonsterSpawned
// 0x0008 (0x0008 - 0x0000)
struct DungeonGimmickMonster_OnEnemyMonsterSpawned final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DungeonGimmickMonster_OnEnemyMonsterSpawned) == 0x000008, "Wrong alignment on DungeonGimmickMonster_OnEnemyMonsterSpawned");
static_assert(sizeof(DungeonGimmickMonster_OnEnemyMonsterSpawned) == 0x000008, "Wrong size on DungeonGimmickMonster_OnEnemyMonsterSpawned");
static_assert(offsetof(DungeonGimmickMonster_OnEnemyMonsterSpawned, Monster) == 0x000000, "Member 'DungeonGimmickMonster_OnEnemyMonsterSpawned::Monster' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.ChangeCurrentApertureWithResolution
// 0x0008 (0x0008 - 0x0000)
struct EventFunctionLibrary_ChangeCurrentApertureWithResolution final
{
public:
	class UCineCameraComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_ChangeCurrentApertureWithResolution) == 0x000008, "Wrong alignment on EventFunctionLibrary_ChangeCurrentApertureWithResolution");
static_assert(sizeof(EventFunctionLibrary_ChangeCurrentApertureWithResolution) == 0x000008, "Wrong size on EventFunctionLibrary_ChangeCurrentApertureWithResolution");
static_assert(offsetof(EventFunctionLibrary_ChangeCurrentApertureWithResolution, Component) == 0x000000, "Member 'EventFunctionLibrary_ChangeCurrentApertureWithResolution::Component' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetCecilyTextData
// 0x0020 (0x0020 - 0x0000)
struct EventFunctionLibrary_GetCecilyTextData final
{
public:
	struct FST_CecilyTextData                     ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_GetCecilyTextData) == 0x000008, "Wrong alignment on EventFunctionLibrary_GetCecilyTextData");
static_assert(sizeof(EventFunctionLibrary_GetCecilyTextData) == 0x000020, "Wrong size on EventFunctionLibrary_GetCecilyTextData");
static_assert(offsetof(EventFunctionLibrary_GetCecilyTextData, ReturnValue) == 0x000000, "Member 'EventFunctionLibrary_GetCecilyTextData::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetEpisodeProgress
// 0x0008 (0x0008 - 0x0000)
struct EventFunctionLibrary_GetEpisodeProgress final
{
public:
	EEpisodeType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_GetEpisodeProgress) == 0x000004, "Wrong alignment on EventFunctionLibrary_GetEpisodeProgress");
static_assert(sizeof(EventFunctionLibrary_GetEpisodeProgress) == 0x000008, "Wrong size on EventFunctionLibrary_GetEpisodeProgress");
static_assert(offsetof(EventFunctionLibrary_GetEpisodeProgress, Type) == 0x000000, "Member 'EventFunctionLibrary_GetEpisodeProgress::Type' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetEpisodeProgress, ReturnValue) == 0x000004, "Member 'EventFunctionLibrary_GetEpisodeProgress::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetEventFukidashiColor
// 0x000C (0x000C - 0x0000)
struct EventFunctionLibrary_GetEventFukidashiColor final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkFukidashiColor                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventFunctionLibrary_GetEventFukidashiColor) == 0x000004, "Wrong alignment on EventFunctionLibrary_GetEventFukidashiColor");
static_assert(sizeof(EventFunctionLibrary_GetEventFukidashiColor) == 0x00000C, "Wrong size on EventFunctionLibrary_GetEventFukidashiColor");
static_assert(offsetof(EventFunctionLibrary_GetEventFukidashiColor, EventID) == 0x000000, "Member 'EventFunctionLibrary_GetEventFukidashiColor::EventID' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetEventFukidashiColor, ReturnValue) == 0x000008, "Member 'EventFunctionLibrary_GetEventFukidashiColor::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetGroundLocation
// 0x0020 (0x0020 - 0x0000)
struct EventFunctionLibrary_GetGroundLocation final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_GetGroundLocation) == 0x000008, "Wrong alignment on EventFunctionLibrary_GetGroundLocation");
static_assert(sizeof(EventFunctionLibrary_GetGroundLocation) == 0x000020, "Wrong size on EventFunctionLibrary_GetGroundLocation");
static_assert(offsetof(EventFunctionLibrary_GetGroundLocation, Character) == 0x000000, "Member 'EventFunctionLibrary_GetGroundLocation::Character' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetGroundLocation, Location) == 0x000008, "Member 'EventFunctionLibrary_GetGroundLocation::Location' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetGroundLocation, ReturnValue) == 0x000014, "Member 'EventFunctionLibrary_GetGroundLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetLocationFromNavimesh
// 0x001C (0x001C - 0x0000)
struct EventFunctionLibrary_GetLocationFromNavimesh final
{
public:
	struct FVector                                FromLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NaviLocation;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRaw;                                             // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventFunctionLibrary_GetLocationFromNavimesh) == 0x000004, "Wrong alignment on EventFunctionLibrary_GetLocationFromNavimesh");
static_assert(sizeof(EventFunctionLibrary_GetLocationFromNavimesh) == 0x00001C, "Wrong size on EventFunctionLibrary_GetLocationFromNavimesh");
static_assert(offsetof(EventFunctionLibrary_GetLocationFromNavimesh, FromLocation) == 0x000000, "Member 'EventFunctionLibrary_GetLocationFromNavimesh::FromLocation' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetLocationFromNavimesh, NaviLocation) == 0x00000C, "Member 'EventFunctionLibrary_GetLocationFromNavimesh::NaviLocation' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetLocationFromNavimesh, IsRaw) == 0x000018, "Member 'EventFunctionLibrary_GetLocationFromNavimesh::IsRaw' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetLocationFromNavimesh, ReturnValue) == 0x000019, "Member 'EventFunctionLibrary_GetLocationFromNavimesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetPCChangeTalkID
// 0x000C (0x000C - 0x0000)
struct EventFunctionLibrary_GetPCChangeTalkID final
{
public:
	bool                                          IsBefore;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_GetPCChangeTalkID) == 0x000004, "Wrong alignment on EventFunctionLibrary_GetPCChangeTalkID");
static_assert(sizeof(EventFunctionLibrary_GetPCChangeTalkID) == 0x00000C, "Wrong size on EventFunctionLibrary_GetPCChangeTalkID");
static_assert(offsetof(EventFunctionLibrary_GetPCChangeTalkID, IsBefore) == 0x000000, "Member 'EventFunctionLibrary_GetPCChangeTalkID::IsBefore' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetPCChangeTalkID, ReturnValue) == 0x000004, "Member 'EventFunctionLibrary_GetPCChangeTalkID::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetStationObject
// 0x0008 (0x0008 - 0x0000)
struct EventFunctionLibrary_GetStationObject final
{
public:
	class AStationBase*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_GetStationObject) == 0x000008, "Wrong alignment on EventFunctionLibrary_GetStationObject");
static_assert(sizeof(EventFunctionLibrary_GetStationObject) == 0x000008, "Wrong size on EventFunctionLibrary_GetStationObject");
static_assert(offsetof(EventFunctionLibrary_GetStationObject, ReturnValue) == 0x000000, "Member 'EventFunctionLibrary_GetStationObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.GetStationReleaseEventID
// 0x0010 (0x0010 - 0x0000)
struct EventFunctionLibrary_GetStationReleaseEventID final
{
public:
	class FName                                   StationID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_GetStationReleaseEventID) == 0x000004, "Wrong alignment on EventFunctionLibrary_GetStationReleaseEventID");
static_assert(sizeof(EventFunctionLibrary_GetStationReleaseEventID) == 0x000010, "Wrong size on EventFunctionLibrary_GetStationReleaseEventID");
static_assert(offsetof(EventFunctionLibrary_GetStationReleaseEventID, StationID) == 0x000000, "Member 'EventFunctionLibrary_GetStationReleaseEventID::StationID' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_GetStationReleaseEventID, ReturnValue) == 0x000008, "Member 'EventFunctionLibrary_GetStationReleaseEventID::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.HasAllGetSevenStone
// 0x0001 (0x0001 - 0x0000)
struct EventFunctionLibrary_HasAllGetSevenStone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_HasAllGetSevenStone) == 0x000001, "Wrong alignment on EventFunctionLibrary_HasAllGetSevenStone");
static_assert(sizeof(EventFunctionLibrary_HasAllGetSevenStone) == 0x000001, "Wrong size on EventFunctionLibrary_HasAllGetSevenStone");
static_assert(offsetof(EventFunctionLibrary_HasAllGetSevenStone, ReturnValue) == 0x000000, "Member 'EventFunctionLibrary_HasAllGetSevenStone::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.IsEventTestFlag
// 0x0001 (0x0001 - 0x0000)
struct EventFunctionLibrary_IsEventTestFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_IsEventTestFlag) == 0x000001, "Wrong alignment on EventFunctionLibrary_IsEventTestFlag");
static_assert(sizeof(EventFunctionLibrary_IsEventTestFlag) == 0x000001, "Wrong size on EventFunctionLibrary_IsEventTestFlag");
static_assert(offsetof(EventFunctionLibrary_IsEventTestFlag, ReturnValue) == 0x000000, "Member 'EventFunctionLibrary_IsEventTestFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.IsSkippableEvent
// 0x000C (0x000C - 0x0000)
struct EventFunctionLibrary_IsSkippableEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventFunctionLibrary_IsSkippableEvent) == 0x000004, "Wrong alignment on EventFunctionLibrary_IsSkippableEvent");
static_assert(sizeof(EventFunctionLibrary_IsSkippableEvent) == 0x00000C, "Wrong size on EventFunctionLibrary_IsSkippableEvent");
static_assert(offsetof(EventFunctionLibrary_IsSkippableEvent, EventID) == 0x000000, "Member 'EventFunctionLibrary_IsSkippableEvent::EventID' has a wrong offset!");
static_assert(offsetof(EventFunctionLibrary_IsSkippableEvent, ReturnValue) == 0x000008, "Member 'EventFunctionLibrary_IsSkippableEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventFunctionLibrary.SetHideVolcaGigarss
// 0x0001 (0x0001 - 0x0000)
struct EventFunctionLibrary_SetHideVolcaGigarss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventFunctionLibrary_SetHideVolcaGigarss) == 0x000001, "Wrong alignment on EventFunctionLibrary_SetHideVolcaGigarss");
static_assert(sizeof(EventFunctionLibrary_SetHideVolcaGigarss) == 0x000001, "Wrong size on EventFunctionLibrary_SetHideVolcaGigarss");
static_assert(offsetof(EventFunctionLibrary_SetHideVolcaGigarss, ReturnValue) == 0x000000, "Member 'EventFunctionLibrary_SetHideVolcaGigarss::ReturnValue' has a wrong offset!");

// Function DarwinGame.BTTaskBlueprintDarwin.ReceiveFinished
// 0x0010 (0x0010 - 0x0000)
struct BTTaskBlueprintDarwin_ReceiveFinished final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTaskBlueprintDarwin_ReceiveFinished) == 0x000008, "Wrong alignment on BTTaskBlueprintDarwin_ReceiveFinished");
static_assert(sizeof(BTTaskBlueprintDarwin_ReceiveFinished) == 0x000010, "Wrong size on BTTaskBlueprintDarwin_ReceiveFinished");
static_assert(offsetof(BTTaskBlueprintDarwin_ReceiveFinished, OwnerController) == 0x000000, "Member 'BTTaskBlueprintDarwin_ReceiveFinished::OwnerController' has a wrong offset!");
static_assert(offsetof(BTTaskBlueprintDarwin_ReceiveFinished, ControlledPawn) == 0x000008, "Member 'BTTaskBlueprintDarwin_ReceiveFinished::ControlledPawn' has a wrong offset!");

// Function DarwinGame.GameDataNPC.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataNPC_Clone final
{
public:
	class UGameDataNPC*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataNPC_Clone) == 0x000008, "Wrong alignment on GameDataNPC_Clone");
static_assert(sizeof(GameDataNPC_Clone) == 0x000008, "Wrong size on GameDataNPC_Clone");
static_assert(offsetof(GameDataNPC_Clone, ReturnValue) == 0x000000, "Member 'GameDataNPC_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataNPC.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataNPC_Overwrite final
{
public:
	class UGameDataNPC*                           game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataNPC_Overwrite) == 0x000008, "Wrong alignment on GameDataNPC_Overwrite");
static_assert(sizeof(GameDataNPC_Overwrite) == 0x000008, "Wrong size on GameDataNPC_Overwrite");
static_assert(offsetof(GameDataNPC_Overwrite, game_data) == 0x000000, "Member 'GameDataNPC_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.RivalTeamStampManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct RivalTeamStampManager_GetInstance final
{
public:
	class URivalTeamStampManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamStampManager_GetInstance) == 0x000008, "Wrong alignment on RivalTeamStampManager_GetInstance");
static_assert(sizeof(RivalTeamStampManager_GetInstance) == 0x000008, "Wrong size on RivalTeamStampManager_GetInstance");
static_assert(offsetof(RivalTeamStampManager_GetInstance, ReturnValue) == 0x000000, "Member 'RivalTeamStampManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.ResidentDataManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct ResidentDataManager_GetInstance final
{
public:
	class UResidentDataManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResidentDataManager_GetInstance) == 0x000008, "Wrong alignment on ResidentDataManager_GetInstance");
static_assert(sizeof(ResidentDataManager_GetInstance) == 0x000008, "Wrong size on ResidentDataManager_GetInstance");
static_assert(offsetof(ResidentDataManager_GetInstance, ReturnValue) == 0x000000, "Member 'ResidentDataManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.BulletPath.Clone
// 0x0008 (0x0008 - 0x0000)
struct BulletPath_Clone final
{
public:
	class ABulletPath*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletPath_Clone) == 0x000008, "Wrong alignment on BulletPath_Clone");
static_assert(sizeof(BulletPath_Clone) == 0x000008, "Wrong size on BulletPath_Clone");
static_assert(offsetof(BulletPath_Clone, ReturnValue) == 0x000000, "Member 'BulletPath_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.BulletPath.SetPathPoint
// 0x0030 (0x0030 - 0x0000)
struct BulletPath_SetPathPoint final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartTangent;                                      // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndTangent;                                        // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletPath_SetPathPoint) == 0x000004, "Wrong alignment on BulletPath_SetPathPoint");
static_assert(sizeof(BulletPath_SetPathPoint) == 0x000030, "Wrong size on BulletPath_SetPathPoint");
static_assert(offsetof(BulletPath_SetPathPoint, Start) == 0x000000, "Member 'BulletPath_SetPathPoint::Start' has a wrong offset!");
static_assert(offsetof(BulletPath_SetPathPoint, End) == 0x00000C, "Member 'BulletPath_SetPathPoint::End' has a wrong offset!");
static_assert(offsetof(BulletPath_SetPathPoint, StartTangent) == 0x000018, "Member 'BulletPath_SetPathPoint::StartTangent' has a wrong offset!");
static_assert(offsetof(BulletPath_SetPathPoint, EndTangent) == 0x000024, "Member 'BulletPath_SetPathPoint::EndTangent' has a wrong offset!");

// Function DarwinGame.CagecartDoorBase.AllOpenToClose
// 0x0001 (0x0001 - 0x0000)
struct CagecartDoorBase_AllOpenToClose final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CagecartDoorBase_AllOpenToClose) == 0x000001, "Wrong alignment on CagecartDoorBase_AllOpenToClose");
static_assert(sizeof(CagecartDoorBase_AllOpenToClose) == 0x000001, "Wrong size on CagecartDoorBase_AllOpenToClose");
static_assert(offsetof(CagecartDoorBase_AllOpenToClose, IsSkip) == 0x000000, "Member 'CagecartDoorBase_AllOpenToClose::IsSkip' has a wrong offset!");

// Function DarwinGame.CagecartDoorBase.AllOpenToHalfOpen
// 0x0001 (0x0001 - 0x0000)
struct CagecartDoorBase_AllOpenToHalfOpen final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CagecartDoorBase_AllOpenToHalfOpen) == 0x000001, "Wrong alignment on CagecartDoorBase_AllOpenToHalfOpen");
static_assert(sizeof(CagecartDoorBase_AllOpenToHalfOpen) == 0x000001, "Wrong size on CagecartDoorBase_AllOpenToHalfOpen");
static_assert(offsetof(CagecartDoorBase_AllOpenToHalfOpen, IsSkip) == 0x000000, "Member 'CagecartDoorBase_AllOpenToHalfOpen::IsSkip' has a wrong offset!");

// Function DarwinGame.CagecartDoorBase.CloseToAllOpen
// 0x0001 (0x0001 - 0x0000)
struct CagecartDoorBase_CloseToAllOpen final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CagecartDoorBase_CloseToAllOpen) == 0x000001, "Wrong alignment on CagecartDoorBase_CloseToAllOpen");
static_assert(sizeof(CagecartDoorBase_CloseToAllOpen) == 0x000001, "Wrong size on CagecartDoorBase_CloseToAllOpen");
static_assert(offsetof(CagecartDoorBase_CloseToAllOpen, IsSkip) == 0x000000, "Member 'CagecartDoorBase_CloseToAllOpen::IsSkip' has a wrong offset!");

// Function DarwinGame.CagecartDoorBase.CloseToHalfOpen
// 0x0001 (0x0001 - 0x0000)
struct CagecartDoorBase_CloseToHalfOpen final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CagecartDoorBase_CloseToHalfOpen) == 0x000001, "Wrong alignment on CagecartDoorBase_CloseToHalfOpen");
static_assert(sizeof(CagecartDoorBase_CloseToHalfOpen) == 0x000001, "Wrong size on CagecartDoorBase_CloseToHalfOpen");
static_assert(offsetof(CagecartDoorBase_CloseToHalfOpen, IsSkip) == 0x000000, "Member 'CagecartDoorBase_CloseToHalfOpen::IsSkip' has a wrong offset!");

// Function DarwinGame.CagecartDoorBase.HalfOpenToAllOpen
// 0x0001 (0x0001 - 0x0000)
struct CagecartDoorBase_HalfOpenToAllOpen final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CagecartDoorBase_HalfOpenToAllOpen) == 0x000001, "Wrong alignment on CagecartDoorBase_HalfOpenToAllOpen");
static_assert(sizeof(CagecartDoorBase_HalfOpenToAllOpen) == 0x000001, "Wrong size on CagecartDoorBase_HalfOpenToAllOpen");
static_assert(offsetof(CagecartDoorBase_HalfOpenToAllOpen, IsSkip) == 0x000000, "Member 'CagecartDoorBase_HalfOpenToAllOpen::IsSkip' has a wrong offset!");

// Function DarwinGame.CagecartDoorBase.HalfOpenToClose
// 0x0001 (0x0001 - 0x0000)
struct CagecartDoorBase_HalfOpenToClose final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CagecartDoorBase_HalfOpenToClose) == 0x000001, "Wrong alignment on CagecartDoorBase_HalfOpenToClose");
static_assert(sizeof(CagecartDoorBase_HalfOpenToClose) == 0x000001, "Wrong size on CagecartDoorBase_HalfOpenToClose");
static_assert(offsetof(CagecartDoorBase_HalfOpenToClose, IsSkip) == 0x000000, "Member 'CagecartDoorBase_HalfOpenToClose::IsSkip' has a wrong offset!");

// Function DarwinGame.CagecartDoorBase.InitializeState
// 0x0008 (0x0008 - 0x0000)
struct CagecartDoorBase_InitializeState final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CagecartDoorBase_InitializeState) == 0x000004, "Wrong alignment on CagecartDoorBase_InitializeState");
static_assert(sizeof(CagecartDoorBase_InitializeState) == 0x000008, "Wrong size on CagecartDoorBase_InitializeState");
static_assert(offsetof(CagecartDoorBase_InitializeState, ID) == 0x000000, "Member 'CagecartDoorBase_InitializeState::ID' has a wrong offset!");

// Function DarwinGame.UISign_Fukidashi.SetBalloonData
// 0x0001 (0x0001 - 0x0000)
struct UISign_Fukidashi_SetBalloonData final
{
public:
	EFukidashiEnum                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_Fukidashi_SetBalloonData) == 0x000001, "Wrong alignment on UISign_Fukidashi_SetBalloonData");
static_assert(sizeof(UISign_Fukidashi_SetBalloonData) == 0x000001, "Wrong size on UISign_Fukidashi_SetBalloonData");
static_assert(offsetof(UISign_Fukidashi_SetBalloonData, Type) == 0x000000, "Member 'UISign_Fukidashi_SetBalloonData::Type' has a wrong offset!");

// Function DarwinGame.UISign_Fukidashi.SetBalloonDataAdvance
// 0x0002 (0x0002 - 0x0000)
struct UISign_Fukidashi_SetBalloonDataAdvance final
{
public:
	ETalkFukidashiType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkFukidashiColor                           Color;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_Fukidashi_SetBalloonDataAdvance) == 0x000001, "Wrong alignment on UISign_Fukidashi_SetBalloonDataAdvance");
static_assert(sizeof(UISign_Fukidashi_SetBalloonDataAdvance) == 0x000002, "Wrong size on UISign_Fukidashi_SetBalloonDataAdvance");
static_assert(offsetof(UISign_Fukidashi_SetBalloonDataAdvance, Type) == 0x000000, "Member 'UISign_Fukidashi_SetBalloonDataAdvance::Type' has a wrong offset!");
static_assert(offsetof(UISign_Fukidashi_SetBalloonDataAdvance, Color) == 0x000001, "Member 'UISign_Fukidashi_SetBalloonDataAdvance::Color' has a wrong offset!");

// Function DarwinGame.UISign_Fukidashi.SetFukidashiData
// 0x0028 (0x0028 - 0x0000)
struct UISign_Fukidashi_SetFukidashiData final
{
public:
	EFukidashiEnum                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FukidashiText;                                     // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         CloseTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISign_Fukidashi_SetFukidashiData) == 0x000008, "Wrong alignment on UISign_Fukidashi_SetFukidashiData");
static_assert(sizeof(UISign_Fukidashi_SetFukidashiData) == 0x000028, "Wrong size on UISign_Fukidashi_SetFukidashiData");
static_assert(offsetof(UISign_Fukidashi_SetFukidashiData, Type) == 0x000000, "Member 'UISign_Fukidashi_SetFukidashiData::Type' has a wrong offset!");
static_assert(offsetof(UISign_Fukidashi_SetFukidashiData, FukidashiText) == 0x000008, "Member 'UISign_Fukidashi_SetFukidashiData::FukidashiText' has a wrong offset!");
static_assert(offsetof(UISign_Fukidashi_SetFukidashiData, CloseTime) == 0x000020, "Member 'UISign_Fukidashi_SetFukidashiData::CloseTime' has a wrong offset!");

// Function DarwinGame.UISign_Fukidashi.SetFukidashiDataAdvance
// 0x0018 (0x0018 - 0x0000)
struct UISign_Fukidashi_SetFukidashiDataAdvance final
{
public:
	class FString                                 FukidashiText;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkFukidashiType                            Type;                                              // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkFukidashiColor                           Color;                                             // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISign_Fukidashi_SetFukidashiDataAdvance) == 0x000008, "Wrong alignment on UISign_Fukidashi_SetFukidashiDataAdvance");
static_assert(sizeof(UISign_Fukidashi_SetFukidashiDataAdvance) == 0x000018, "Wrong size on UISign_Fukidashi_SetFukidashiDataAdvance");
static_assert(offsetof(UISign_Fukidashi_SetFukidashiDataAdvance, FukidashiText) == 0x000000, "Member 'UISign_Fukidashi_SetFukidashiDataAdvance::FukidashiText' has a wrong offset!");
static_assert(offsetof(UISign_Fukidashi_SetFukidashiDataAdvance, CloseTime) == 0x000010, "Member 'UISign_Fukidashi_SetFukidashiDataAdvance::CloseTime' has a wrong offset!");
static_assert(offsetof(UISign_Fukidashi_SetFukidashiDataAdvance, Type) == 0x000014, "Member 'UISign_Fukidashi_SetFukidashiDataAdvance::Type' has a wrong offset!");
static_assert(offsetof(UISign_Fukidashi_SetFukidashiDataAdvance, Color) == 0x000015, "Member 'UISign_Fukidashi_SetFukidashiDataAdvance::Color' has a wrong offset!");

// Function DarwinGame.EventTrigger.SetEventIDToEventSender
// 0x0008 (0x0008 - 0x0000)
struct EventTrigger_SetEventIDToEventSender final
{
public:
	class FName                                   event_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_SetEventIDToEventSender) == 0x000004, "Wrong alignment on EventTrigger_SetEventIDToEventSender");
static_assert(sizeof(EventTrigger_SetEventIDToEventSender) == 0x000008, "Wrong size on EventTrigger_SetEventIDToEventSender");
static_assert(offsetof(EventTrigger_SetEventIDToEventSender, event_id) == 0x000000, "Member 'EventTrigger_SetEventIDToEventSender::event_id' has a wrong offset!");

// Function DarwinGame.EventTrigger.SetHitBoxSideNormal
// 0x000C (0x000C - 0x0000)
struct EventTrigger_SetHitBoxSideNormal final
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_SetHitBoxSideNormal) == 0x000004, "Wrong alignment on EventTrigger_SetHitBoxSideNormal");
static_assert(sizeof(EventTrigger_SetHitBoxSideNormal) == 0x00000C, "Wrong size on EventTrigger_SetHitBoxSideNormal");
static_assert(offsetof(EventTrigger_SetHitBoxSideNormal, Normal) == 0x000000, "Member 'EventTrigger_SetHitBoxSideNormal::Normal' has a wrong offset!");

// Function DarwinGame.EventTrigger.SetIsOverlapEvent
// 0x0001 (0x0001 - 0x0000)
struct EventTrigger_SetIsOverlapEvent final
{
public:
	bool                                          isOverlap;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_SetIsOverlapEvent) == 0x000001, "Wrong alignment on EventTrigger_SetIsOverlapEvent");
static_assert(sizeof(EventTrigger_SetIsOverlapEvent) == 0x000001, "Wrong size on EventTrigger_SetIsOverlapEvent");
static_assert(offsetof(EventTrigger_SetIsOverlapEvent, isOverlap) == 0x000000, "Member 'EventTrigger_SetIsOverlapEvent::isOverlap' has a wrong offset!");

// Function DarwinGame.EventTrigger.SetOverlapActorLocation
// 0x000C (0x000C - 0x0000)
struct EventTrigger_SetOverlapActorLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_SetOverlapActorLocation) == 0x000004, "Wrong alignment on EventTrigger_SetOverlapActorLocation");
static_assert(sizeof(EventTrigger_SetOverlapActorLocation) == 0x00000C, "Wrong size on EventTrigger_SetOverlapActorLocation");
static_assert(offsetof(EventTrigger_SetOverlapActorLocation, Location) == 0x000000, "Member 'EventTrigger_SetOverlapActorLocation::Location' has a wrong offset!");

// Function DarwinGame.EventTrigger.SetOverlapActorMovementVector
// 0x000C (0x000C - 0x0000)
struct EventTrigger_SetOverlapActorMovementVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_SetOverlapActorMovementVector) == 0x000004, "Wrong alignment on EventTrigger_SetOverlapActorMovementVector");
static_assert(sizeof(EventTrigger_SetOverlapActorMovementVector) == 0x00000C, "Wrong size on EventTrigger_SetOverlapActorMovementVector");
static_assert(offsetof(EventTrigger_SetOverlapActorMovementVector, Vector) == 0x000000, "Member 'EventTrigger_SetOverlapActorMovementVector::Vector' has a wrong offset!");

// Function DarwinGame.EventTrigger.CanPlayEventUniqueCondition
// 0x000C (0x000C - 0x0000)
struct EventTrigger_CanPlayEventUniqueCondition final
{
public:
	class FName                                   event_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventTrigger_CanPlayEventUniqueCondition) == 0x000004, "Wrong alignment on EventTrigger_CanPlayEventUniqueCondition");
static_assert(sizeof(EventTrigger_CanPlayEventUniqueCondition) == 0x00000C, "Wrong size on EventTrigger_CanPlayEventUniqueCondition");
static_assert(offsetof(EventTrigger_CanPlayEventUniqueCondition, event_id) == 0x000000, "Member 'EventTrigger_CanPlayEventUniqueCondition::event_id' has a wrong offset!");
static_assert(offsetof(EventTrigger_CanPlayEventUniqueCondition, ReturnValue) == 0x000008, "Member 'EventTrigger_CanPlayEventUniqueCondition::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventTrigger.Debug_IsNotPlayEvent
// 0x0001 (0x0001 - 0x0000)
struct EventTrigger_Debug_IsNotPlayEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_Debug_IsNotPlayEvent) == 0x000001, "Wrong alignment on EventTrigger_Debug_IsNotPlayEvent");
static_assert(sizeof(EventTrigger_Debug_IsNotPlayEvent) == 0x000001, "Wrong size on EventTrigger_Debug_IsNotPlayEvent");
static_assert(offsetof(EventTrigger_Debug_IsNotPlayEvent, ReturnValue) == 0x000000, "Member 'EventTrigger_Debug_IsNotPlayEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.ForceApplyDitherParam
// 0x0004 (0x0004 - 0x0000)
struct DitheringComponent_ForceApplyDitherParam final
{
public:
	float                                         ForceAlpha;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_ForceApplyDitherParam) == 0x000004, "Wrong alignment on DitheringComponent_ForceApplyDitherParam");
static_assert(sizeof(DitheringComponent_ForceApplyDitherParam) == 0x000004, "Wrong size on DitheringComponent_ForceApplyDitherParam");
static_assert(offsetof(DitheringComponent_ForceApplyDitherParam, ForceAlpha) == 0x000000, "Member 'DitheringComponent_ForceApplyDitherParam::ForceAlpha' has a wrong offset!");

// Function DarwinGame.DitheringComponent.GetAttachedChildren
// 0x0010 (0x0010 - 0x0000)
struct DitheringComponent_GetAttachedChildren final
{
public:
	TArray<class UDitheringComponent*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_GetAttachedChildren) == 0x000008, "Wrong alignment on DitheringComponent_GetAttachedChildren");
static_assert(sizeof(DitheringComponent_GetAttachedChildren) == 0x000010, "Wrong size on DitheringComponent_GetAttachedChildren");
static_assert(offsetof(DitheringComponent_GetAttachedChildren, ReturnValue) == 0x000000, "Member 'DitheringComponent_GetAttachedChildren::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct DitheringComponent_GetMesh final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_GetMesh) == 0x000008, "Wrong alignment on DitheringComponent_GetMesh");
static_assert(sizeof(DitheringComponent_GetMesh) == 0x000008, "Wrong size on DitheringComponent_GetMesh");
static_assert(offsetof(DitheringComponent_GetMesh, ReturnValue) == 0x000000, "Member 'DitheringComponent_GetMesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct DitheringComponent_SetAlpha final
{
public:
	float                                         Alpha_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_SetAlpha) == 0x000004, "Wrong alignment on DitheringComponent_SetAlpha");
static_assert(sizeof(DitheringComponent_SetAlpha) == 0x000004, "Wrong size on DitheringComponent_SetAlpha");
static_assert(offsetof(DitheringComponent_SetAlpha, Alpha_0) == 0x000000, "Member 'DitheringComponent_SetAlpha::Alpha_0' has a wrong offset!");

// Function DarwinGame.DitheringComponent.SetDirty
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_SetDirty final
{
public:
	bool                                          dirty;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_SetDirty) == 0x000001, "Wrong alignment on DitheringComponent_SetDirty");
static_assert(sizeof(DitheringComponent_SetDirty) == 0x000001, "Wrong size on DitheringComponent_SetDirty");
static_assert(offsetof(DitheringComponent_SetDirty, dirty) == 0x000000, "Member 'DitheringComponent_SetDirty::dirty' has a wrong offset!");

// Function DarwinGame.DitheringComponent.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_SetEnable final
{
public:
	bool                                          enable_0;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_SetEnable) == 0x000001, "Wrong alignment on DitheringComponent_SetEnable");
static_assert(sizeof(DitheringComponent_SetEnable) == 0x000001, "Wrong size on DitheringComponent_SetEnable");
static_assert(offsetof(DitheringComponent_SetEnable, enable_0) == 0x000000, "Member 'DitheringComponent_SetEnable::enable_0' has a wrong offset!");

// Function DarwinGame.DitheringComponent.SetFadeEnable
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_SetFadeEnable final
{
public:
	bool                                          enable_0;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_SetFadeEnable) == 0x000001, "Wrong alignment on DitheringComponent_SetFadeEnable");
static_assert(sizeof(DitheringComponent_SetFadeEnable) == 0x000001, "Wrong size on DitheringComponent_SetFadeEnable");
static_assert(offsetof(DitheringComponent_SetFadeEnable, enable_0) == 0x000000, "Member 'DitheringComponent_SetFadeEnable::enable_0' has a wrong offset!");

// Function DarwinGame.DitheringComponent.SetOffset
// 0x0004 (0x0004 - 0x0000)
struct DitheringComponent_SetOffset final
{
public:
	int32                                         Offset_0;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_SetOffset) == 0x000004, "Wrong alignment on DitheringComponent_SetOffset");
static_assert(sizeof(DitheringComponent_SetOffset) == 0x000004, "Wrong size on DitheringComponent_SetOffset");
static_assert(offsetof(DitheringComponent_SetOffset, Offset_0) == 0x000000, "Member 'DitheringComponent_SetOffset::Offset_0' has a wrong offset!");

// Function DarwinGame.DitheringComponent.CheckTickDisable
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_CheckTickDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_CheckTickDisable) == 0x000001, "Wrong alignment on DitheringComponent_CheckTickDisable");
static_assert(sizeof(DitheringComponent_CheckTickDisable) == 0x000001, "Wrong size on DitheringComponent_CheckTickDisable");
static_assert(offsetof(DitheringComponent_CheckTickDisable, ReturnValue) == 0x000000, "Member 'DitheringComponent_CheckTickDisable::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct DitheringComponent_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_GetAlpha) == 0x000004, "Wrong alignment on DitheringComponent_GetAlpha");
static_assert(sizeof(DitheringComponent_GetAlpha) == 0x000004, "Wrong size on DitheringComponent_GetAlpha");
static_assert(offsetof(DitheringComponent_GetAlpha, ReturnValue) == 0x000000, "Member 'DitheringComponent_GetAlpha::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.GetDirty
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_GetDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_GetDirty) == 0x000001, "Wrong alignment on DitheringComponent_GetDirty");
static_assert(sizeof(DitheringComponent_GetDirty) == 0x000001, "Wrong size on DitheringComponent_GetDirty");
static_assert(offsetof(DitheringComponent_GetDirty, ReturnValue) == 0x000000, "Member 'DitheringComponent_GetDirty::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.GetEnable
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_GetEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_GetEnable) == 0x000001, "Wrong alignment on DitheringComponent_GetEnable");
static_assert(sizeof(DitheringComponent_GetEnable) == 0x000001, "Wrong size on DitheringComponent_GetEnable");
static_assert(offsetof(DitheringComponent_GetEnable, ReturnValue) == 0x000000, "Member 'DitheringComponent_GetEnable::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.GetFadeEnable
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_GetFadeEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_GetFadeEnable) == 0x000001, "Wrong alignment on DitheringComponent_GetFadeEnable");
static_assert(sizeof(DitheringComponent_GetFadeEnable) == 0x000001, "Wrong size on DitheringComponent_GetFadeEnable");
static_assert(offsetof(DitheringComponent_GetFadeEnable, ReturnValue) == 0x000000, "Member 'DitheringComponent_GetFadeEnable::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringComponent.IsDithering
// 0x0001 (0x0001 - 0x0000)
struct DitheringComponent_IsDithering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringComponent_IsDithering) == 0x000001, "Wrong alignment on DitheringComponent_IsDithering");
static_assert(sizeof(DitheringComponent_IsDithering) == 0x000001, "Wrong size on DitheringComponent_IsDithering");
static_assert(offsetof(DitheringComponent_IsDithering, ReturnValue) == 0x000000, "Member 'DitheringComponent_IsDithering::ReturnValue' has a wrong offset!");

// Function DarwinGame.SwitchDitheringComponent.CalcAlpha
// 0x0008 (0x0008 - 0x0000)
struct SwitchDitheringComponent_CalcAlpha final
{
public:
	bool                                          switchEnable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchDitheringComponent_CalcAlpha) == 0x000004, "Wrong alignment on SwitchDitheringComponent_CalcAlpha");
static_assert(sizeof(SwitchDitheringComponent_CalcAlpha) == 0x000008, "Wrong size on SwitchDitheringComponent_CalcAlpha");
static_assert(offsetof(SwitchDitheringComponent_CalcAlpha, switchEnable) == 0x000000, "Member 'SwitchDitheringComponent_CalcAlpha::switchEnable' has a wrong offset!");
static_assert(offsetof(SwitchDitheringComponent_CalcAlpha, ReturnValue) == 0x000004, "Member 'SwitchDitheringComponent_CalcAlpha::ReturnValue' has a wrong offset!");

// Function DarwinGame.SwitchDitheringComponent.SetSwitchAlphaEnable
// 0x0001 (0x0001 - 0x0000)
struct SwitchDitheringComponent_SetSwitchAlphaEnable final
{
public:
	bool                                          switchEnable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchDitheringComponent_SetSwitchAlphaEnable) == 0x000001, "Wrong alignment on SwitchDitheringComponent_SetSwitchAlphaEnable");
static_assert(sizeof(SwitchDitheringComponent_SetSwitchAlphaEnable) == 0x000001, "Wrong size on SwitchDitheringComponent_SetSwitchAlphaEnable");
static_assert(offsetof(SwitchDitheringComponent_SetSwitchAlphaEnable, switchEnable) == 0x000000, "Member 'SwitchDitheringComponent_SetSwitchAlphaEnable::switchEnable' has a wrong offset!");

// Function DarwinGame.SwitchDitheringComponent.GetSwitchAlpha
// 0x0004 (0x0004 - 0x0000)
struct SwitchDitheringComponent_GetSwitchAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchDitheringComponent_GetSwitchAlpha) == 0x000004, "Wrong alignment on SwitchDitheringComponent_GetSwitchAlpha");
static_assert(sizeof(SwitchDitheringComponent_GetSwitchAlpha) == 0x000004, "Wrong size on SwitchDitheringComponent_GetSwitchAlpha");
static_assert(offsetof(SwitchDitheringComponent_GetSwitchAlpha, ReturnValue) == 0x000000, "Member 'SwitchDitheringComponent_GetSwitchAlpha::ReturnValue' has a wrong offset!");

// Function DarwinGame.SceneCaptureUtility.SpawnCapture
// 0x0038 (0x0038 - 0x0000)
struct SceneCaptureUtility_SpawnCapture final
{
public:
	TSoftClassPtr<class UClass>                   Capture;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASceneCaptureBase*                      ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureUtility_SpawnCapture) == 0x000008, "Wrong alignment on SceneCaptureUtility_SpawnCapture");
static_assert(sizeof(SceneCaptureUtility_SpawnCapture) == 0x000038, "Wrong size on SceneCaptureUtility_SpawnCapture");
static_assert(offsetof(SceneCaptureUtility_SpawnCapture, Capture) == 0x000000, "Member 'SceneCaptureUtility_SpawnCapture::Capture' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnCapture, RenderTarget) == 0x000028, "Member 'SceneCaptureUtility_SpawnCapture::RenderTarget' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnCapture, ReturnValue) == 0x000030, "Member 'SceneCaptureUtility_SpawnCapture::ReturnValue' has a wrong offset!");

// Function DarwinGame.SceneCaptureUtility.SpawnCaptureLight
// 0x0040 (0x0040 - 0x0000)
struct SceneCaptureUtility_SpawnCaptureLight final
{
public:
	TSoftClassPtr<class UClass>                   DirectionalLight;                                  // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureUtility_SpawnCaptureLight) == 0x000008, "Wrong alignment on SceneCaptureUtility_SpawnCaptureLight");
static_assert(sizeof(SceneCaptureUtility_SpawnCaptureLight) == 0x000040, "Wrong size on SceneCaptureUtility_SpawnCaptureLight");
static_assert(offsetof(SceneCaptureUtility_SpawnCaptureLight, DirectionalLight) == 0x000000, "Member 'SceneCaptureUtility_SpawnCaptureLight::DirectionalLight' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnCaptureLight, Rotation) == 0x000028, "Member 'SceneCaptureUtility_SpawnCaptureLight::Rotation' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnCaptureLight, ReturnValue) == 0x000038, "Member 'SceneCaptureUtility_SpawnCaptureLight::ReturnValue' has a wrong offset!");

// Function DarwinGame.SceneCaptureUtility.SpawnCaptureLightActor
// 0x0030 (0x0030 - 0x0000)
struct SceneCaptureUtility_SpawnCaptureLightActor final
{
public:
	TSoftClassPtr<class UClass>                   Light;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureUtility_SpawnCaptureLightActor) == 0x000008, "Wrong alignment on SceneCaptureUtility_SpawnCaptureLightActor");
static_assert(sizeof(SceneCaptureUtility_SpawnCaptureLightActor) == 0x000030, "Wrong size on SceneCaptureUtility_SpawnCaptureLightActor");
static_assert(offsetof(SceneCaptureUtility_SpawnCaptureLightActor, Light) == 0x000000, "Member 'SceneCaptureUtility_SpawnCaptureLightActor::Light' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnCaptureLightActor, ReturnValue) == 0x000028, "Member 'SceneCaptureUtility_SpawnCaptureLightActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.SceneCaptureUtility.SpawnTwoCameraCapture
// 0x0040 (0x0040 - 0x0000)
struct SceneCaptureUtility_SpawnTwoCameraCapture final
{
public:
	TSoftClassPtr<class UClass>                   Capture;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 SubRenderTarge;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASceneCaptureBase*                      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureUtility_SpawnTwoCameraCapture) == 0x000008, "Wrong alignment on SceneCaptureUtility_SpawnTwoCameraCapture");
static_assert(sizeof(SceneCaptureUtility_SpawnTwoCameraCapture) == 0x000040, "Wrong size on SceneCaptureUtility_SpawnTwoCameraCapture");
static_assert(offsetof(SceneCaptureUtility_SpawnTwoCameraCapture, Capture) == 0x000000, "Member 'SceneCaptureUtility_SpawnTwoCameraCapture::Capture' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnTwoCameraCapture, RenderTarget) == 0x000028, "Member 'SceneCaptureUtility_SpawnTwoCameraCapture::RenderTarget' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnTwoCameraCapture, SubRenderTarge) == 0x000030, "Member 'SceneCaptureUtility_SpawnTwoCameraCapture::SubRenderTarge' has a wrong offset!");
static_assert(offsetof(SceneCaptureUtility_SpawnTwoCameraCapture, ReturnValue) == 0x000038, "Member 'SceneCaptureUtility_SpawnTwoCameraCapture::ReturnValue' has a wrong offset!");

// Function DarwinGame.CameraInterface.AssistMode
// 0x0018 (0x0018 - 0x0000)
struct CameraInterface_AssistMode final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        TargetToAim;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraInterface_AssistMode) == 0x000008, "Wrong alignment on CameraInterface_AssistMode");
static_assert(sizeof(CameraInterface_AssistMode) == 0x000018, "Wrong size on CameraInterface_AssistMode");
static_assert(offsetof(CameraInterface_AssistMode, bEnd) == 0x000000, "Member 'CameraInterface_AssistMode::bEnd' has a wrong offset!");
static_assert(offsetof(CameraInterface_AssistMode, TargetToAim) == 0x000008, "Member 'CameraInterface_AssistMode::TargetToAim' has a wrong offset!");
static_assert(offsetof(CameraInterface_AssistMode, ReturnValue) == 0x000010, "Member 'CameraInterface_AssistMode::ReturnValue' has a wrong offset!");

// Function DarwinGame.CameraInterface.BattleMode
// 0x0001 (0x0001 - 0x0000)
struct CameraInterface_BattleMode final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraInterface_BattleMode) == 0x000001, "Wrong alignment on CameraInterface_BattleMode");
static_assert(sizeof(CameraInterface_BattleMode) == 0x000001, "Wrong size on CameraInterface_BattleMode");
static_assert(offsetof(CameraInterface_BattleMode, bEnd) == 0x000000, "Member 'CameraInterface_BattleMode::bEnd' has a wrong offset!");

// Function DarwinGame.CameraInterface.ChangeState
// 0x0008 (0x0008 - 0x0000)
struct CameraInterface_ChangeState final
{
public:
	struct FGameplayTag                           NextStateTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraInterface_ChangeState) == 0x000004, "Wrong alignment on CameraInterface_ChangeState");
static_assert(sizeof(CameraInterface_ChangeState) == 0x000008, "Wrong size on CameraInterface_ChangeState");
static_assert(offsetof(CameraInterface_ChangeState, NextStateTag) == 0x000000, "Member 'CameraInterface_ChangeState::NextStateTag' has a wrong offset!");

// Function DarwinGame.CameraInterface.DirectionMode
// 0x0002 (0x0002 - 0x0000)
struct CameraInterface_DirectionMode final
{
public:
	bool                                          bEnd;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraDirectionType                          Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraInterface_DirectionMode) == 0x000001, "Wrong alignment on CameraInterface_DirectionMode");
static_assert(sizeof(CameraInterface_DirectionMode) == 0x000002, "Wrong size on CameraInterface_DirectionMode");
static_assert(offsetof(CameraInterface_DirectionMode, bEnd) == 0x000000, "Member 'CameraInterface_DirectionMode::bEnd' has a wrong offset!");
static_assert(offsetof(CameraInterface_DirectionMode, Type) == 0x000001, "Member 'CameraInterface_DirectionMode::Type' has a wrong offset!");

// Function DarwinGame.CameraInterface.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct CameraInterface_GetCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraInterface_GetCamera) == 0x000008, "Wrong alignment on CameraInterface_GetCamera");
static_assert(sizeof(CameraInterface_GetCamera) == 0x000008, "Wrong size on CameraInterface_GetCamera");
static_assert(offsetof(CameraInterface_GetCamera, ReturnValue) == 0x000000, "Member 'CameraInterface_GetCamera::ReturnValue' has a wrong offset!");

// Function DarwinGame.PointEnvironmentSoundBase.SetCurrentPatternID
// 0x0001 (0x0001 - 0x0000)
struct PointEnvironmentSoundBase_SetCurrentPatternID final
{
public:
	EEnvironmentSoundPatternID                    ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PointEnvironmentSoundBase_SetCurrentPatternID) == 0x000001, "Wrong alignment on PointEnvironmentSoundBase_SetCurrentPatternID");
static_assert(sizeof(PointEnvironmentSoundBase_SetCurrentPatternID) == 0x000001, "Wrong size on PointEnvironmentSoundBase_SetCurrentPatternID");
static_assert(offsetof(PointEnvironmentSoundBase_SetCurrentPatternID, ID) == 0x000000, "Member 'PointEnvironmentSoundBase_SetCurrentPatternID::ID' has a wrong offset!");

// Function DarwinGame.RiverEnvSound.OnSoundActiveRangeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RiverEnvSound_OnSoundActiveRangeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverEnvSound_OnSoundActiveRangeBeginOverlap) == 0x000008, "Wrong alignment on RiverEnvSound_OnSoundActiveRangeBeginOverlap");
static_assert(sizeof(RiverEnvSound_OnSoundActiveRangeBeginOverlap) == 0x0000A8, "Wrong size on RiverEnvSound_OnSoundActiveRangeBeginOverlap");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeBeginOverlap, OverlappedComp) == 0x000000, "Member 'RiverEnvSound_OnSoundActiveRangeBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeBeginOverlap, OtherActor) == 0x000008, "Member 'RiverEnvSound_OnSoundActiveRangeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeBeginOverlap, OtherComp) == 0x000010, "Member 'RiverEnvSound_OnSoundActiveRangeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RiverEnvSound_OnSoundActiveRangeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeBeginOverlap, bFromSweep) == 0x00001C, "Member 'RiverEnvSound_OnSoundActiveRangeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeBeginOverlap, SweepResult) == 0x000020, "Member 'RiverEnvSound_OnSoundActiveRangeBeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.RiverEnvSound.OnSoundActiveRangeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RiverEnvSound_OnSoundActiveRangeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RiverEnvSound_OnSoundActiveRangeEndOverlap) == 0x000008, "Wrong alignment on RiverEnvSound_OnSoundActiveRangeEndOverlap");
static_assert(sizeof(RiverEnvSound_OnSoundActiveRangeEndOverlap) == 0x000020, "Wrong size on RiverEnvSound_OnSoundActiveRangeEndOverlap");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeEndOverlap, OverlappedComp) == 0x000000, "Member 'RiverEnvSound_OnSoundActiveRangeEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeEndOverlap, OtherActor) == 0x000008, "Member 'RiverEnvSound_OnSoundActiveRangeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeEndOverlap, OtherComp) == 0x000010, "Member 'RiverEnvSound_OnSoundActiveRangeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RiverEnvSound_OnSoundActiveRangeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RiverEnvSound_OnSoundActiveRangeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.ChangeAreaTriggerBase.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ChangeAreaTriggerBase_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChangeAreaTriggerBase_OnBeginOverlap) == 0x000008, "Wrong alignment on ChangeAreaTriggerBase_OnBeginOverlap");
static_assert(sizeof(ChangeAreaTriggerBase_OnBeginOverlap) == 0x000010, "Wrong size on ChangeAreaTriggerBase_OnBeginOverlap");
static_assert(offsetof(ChangeAreaTriggerBase_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'ChangeAreaTriggerBase_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ChangeAreaTriggerBase_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ChangeAreaTriggerBase_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function DarwinGame.ChangeAreaTriggerBase.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ChangeAreaTriggerBase_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChangeAreaTriggerBase_OnEndOverlap) == 0x000008, "Wrong alignment on ChangeAreaTriggerBase_OnEndOverlap");
static_assert(sizeof(ChangeAreaTriggerBase_OnEndOverlap) == 0x000010, "Wrong size on ChangeAreaTriggerBase_OnEndOverlap");
static_assert(offsetof(ChangeAreaTriggerBase_OnEndOverlap, OverlappedActor) == 0x000000, "Member 'ChangeAreaTriggerBase_OnEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ChangeAreaTriggerBase_OnEndOverlap, OtherActor) == 0x000008, "Member 'ChangeAreaTriggerBase_OnEndOverlap::OtherActor' has a wrong offset!");

// Function DarwinGame.GameDataQuest.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataQuest_Clone final
{
public:
	class UGameDataQuest*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataQuest_Clone) == 0x000008, "Wrong alignment on GameDataQuest_Clone");
static_assert(sizeof(GameDataQuest_Clone) == 0x000008, "Wrong size on GameDataQuest_Clone");
static_assert(offsetof(GameDataQuest_Clone, ReturnValue) == 0x000000, "Member 'GameDataQuest_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataQuest.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataQuest_Overwrite final
{
public:
	class UGameDataQuest*                         game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataQuest_Overwrite) == 0x000008, "Wrong alignment on GameDataQuest_Overwrite");
static_assert(sizeof(GameDataQuest_Overwrite) == 0x000008, "Wrong size on GameDataQuest_Overwrite");
static_assert(offsetof(GameDataQuest_Overwrite, game_data) == 0x000000, "Member 'GameDataQuest_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.EndCurveMove
// 0x0001 (0x0001 - 0x0000)
struct SwitchCollisionMovementComponent_EndCurveMove final
{
public:
	bool                                          bLoop;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_EndCurveMove) == 0x000001, "Wrong alignment on SwitchCollisionMovementComponent_EndCurveMove");
static_assert(sizeof(SwitchCollisionMovementComponent_EndCurveMove) == 0x000001, "Wrong size on SwitchCollisionMovementComponent_EndCurveMove");
static_assert(offsetof(SwitchCollisionMovementComponent_EndCurveMove, bLoop) == 0x000000, "Member 'SwitchCollisionMovementComponent_EndCurveMove::bLoop' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.SetCurveMoveEnabled
// 0x0001 (0x0001 - 0x0000)
struct SwitchCollisionMovementComponent_SetCurveMoveEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_SetCurveMoveEnabled) == 0x000001, "Wrong alignment on SwitchCollisionMovementComponent_SetCurveMoveEnabled");
static_assert(sizeof(SwitchCollisionMovementComponent_SetCurveMoveEnabled) == 0x000001, "Wrong size on SwitchCollisionMovementComponent_SetCurveMoveEnabled");
static_assert(offsetof(SwitchCollisionMovementComponent_SetCurveMoveEnabled, Enabled) == 0x000000, "Member 'SwitchCollisionMovementComponent_SetCurveMoveEnabled::Enabled' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.SetDirectionOFRootMotion
// 0x000C (0x000C - 0x0000)
struct SwitchCollisionMovementComponent_SetDirectionOFRootMotion final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_SetDirectionOFRootMotion) == 0x000004, "Wrong alignment on SwitchCollisionMovementComponent_SetDirectionOFRootMotion");
static_assert(sizeof(SwitchCollisionMovementComponent_SetDirectionOFRootMotion) == 0x00000C, "Wrong size on SwitchCollisionMovementComponent_SetDirectionOFRootMotion");
static_assert(offsetof(SwitchCollisionMovementComponent_SetDirectionOFRootMotion, Direction) == 0x000000, "Member 'SwitchCollisionMovementComponent_SetDirectionOFRootMotion::Direction' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.SetFallStartLocation
// 0x000C (0x000C - 0x0000)
struct SwitchCollisionMovementComponent_SetFallStartLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_SetFallStartLocation) == 0x000004, "Wrong alignment on SwitchCollisionMovementComponent_SetFallStartLocation");
static_assert(sizeof(SwitchCollisionMovementComponent_SetFallStartLocation) == 0x00000C, "Wrong size on SwitchCollisionMovementComponent_SetFallStartLocation");
static_assert(offsetof(SwitchCollisionMovementComponent_SetFallStartLocation, Location) == 0x000000, "Member 'SwitchCollisionMovementComponent_SetFallStartLocation::Location' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.SetMoveOnCurve
// 0x0001 (0x0001 - 0x0000)
struct SwitchCollisionMovementComponent_SetMoveOnCurve final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_SetMoveOnCurve) == 0x000001, "Wrong alignment on SwitchCollisionMovementComponent_SetMoveOnCurve");
static_assert(sizeof(SwitchCollisionMovementComponent_SetMoveOnCurve) == 0x000001, "Wrong size on SwitchCollisionMovementComponent_SetMoveOnCurve");
static_assert(offsetof(SwitchCollisionMovementComponent_SetMoveOnCurve, Flag) == 0x000000, "Member 'SwitchCollisionMovementComponent_SetMoveOnCurve::Flag' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.SetMoveValue
// 0x0004 (0x0004 - 0x0000)
struct SwitchCollisionMovementComponent_SetMoveValue final
{
public:
	float                                         MoveValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_SetMoveValue) == 0x000004, "Wrong alignment on SwitchCollisionMovementComponent_SetMoveValue");
static_assert(sizeof(SwitchCollisionMovementComponent_SetMoveValue) == 0x000004, "Wrong size on SwitchCollisionMovementComponent_SetMoveValue");
static_assert(offsetof(SwitchCollisionMovementComponent_SetMoveValue, MoveValue) == 0x000000, "Member 'SwitchCollisionMovementComponent_SetMoveValue::MoveValue' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.SetOverrideRootMotionVelocity
// 0x0001 (0x0001 - 0x0000)
struct SwitchCollisionMovementComponent_SetOverrideRootMotionVelocity final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_SetOverrideRootMotionVelocity) == 0x000001, "Wrong alignment on SwitchCollisionMovementComponent_SetOverrideRootMotionVelocity");
static_assert(sizeof(SwitchCollisionMovementComponent_SetOverrideRootMotionVelocity) == 0x000001, "Wrong size on SwitchCollisionMovementComponent_SetOverrideRootMotionVelocity");
static_assert(offsetof(SwitchCollisionMovementComponent_SetOverrideRootMotionVelocity, Flag) == 0x000000, "Member 'SwitchCollisionMovementComponent_SetOverrideRootMotionVelocity::Flag' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.CalculateJumpZVelocity
// 0x0004 (0x0004 - 0x0000)
struct SwitchCollisionMovementComponent_CalculateJumpZVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_CalculateJumpZVelocity) == 0x000004, "Wrong alignment on SwitchCollisionMovementComponent_CalculateJumpZVelocity");
static_assert(sizeof(SwitchCollisionMovementComponent_CalculateJumpZVelocity) == 0x000004, "Wrong size on SwitchCollisionMovementComponent_CalculateJumpZVelocity");
static_assert(offsetof(SwitchCollisionMovementComponent_CalculateJumpZVelocity, ReturnValue) == 0x000000, "Member 'SwitchCollisionMovementComponent_CalculateJumpZVelocity::ReturnValue' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.GetCurrentSinkValue
// 0x0004 (0x0004 - 0x0000)
struct SwitchCollisionMovementComponent_GetCurrentSinkValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_GetCurrentSinkValue) == 0x000004, "Wrong alignment on SwitchCollisionMovementComponent_GetCurrentSinkValue");
static_assert(sizeof(SwitchCollisionMovementComponent_GetCurrentSinkValue) == 0x000004, "Wrong size on SwitchCollisionMovementComponent_GetCurrentSinkValue");
static_assert(offsetof(SwitchCollisionMovementComponent_GetCurrentSinkValue, ReturnValue) == 0x000000, "Member 'SwitchCollisionMovementComponent_GetCurrentSinkValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.IsActionableBurial
// 0x0001 (0x0001 - 0x0000)
struct SwitchCollisionMovementComponent_IsActionableBurial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_IsActionableBurial) == 0x000001, "Wrong alignment on SwitchCollisionMovementComponent_IsActionableBurial");
static_assert(sizeof(SwitchCollisionMovementComponent_IsActionableBurial) == 0x000001, "Wrong size on SwitchCollisionMovementComponent_IsActionableBurial");
static_assert(offsetof(SwitchCollisionMovementComponent_IsActionableBurial, ReturnValue) == 0x000000, "Member 'SwitchCollisionMovementComponent_IsActionableBurial::ReturnValue' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.IsMovingOnCurve
// 0x0001 (0x0001 - 0x0000)
struct SwitchCollisionMovementComponent_IsMovingOnCurve final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_IsMovingOnCurve) == 0x000001, "Wrong alignment on SwitchCollisionMovementComponent_IsMovingOnCurve");
static_assert(sizeof(SwitchCollisionMovementComponent_IsMovingOnCurve) == 0x000001, "Wrong size on SwitchCollisionMovementComponent_IsMovingOnCurve");
static_assert(offsetof(SwitchCollisionMovementComponent_IsMovingOnCurve, ReturnValue) == 0x000000, "Member 'SwitchCollisionMovementComponent_IsMovingOnCurve::ReturnValue' has a wrong offset!");

// Function DarwinGame.SwitchCollisionMovementComponent.IsSinking
// 0x0001 (0x0001 - 0x0000)
struct SwitchCollisionMovementComponent_IsSinking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitchCollisionMovementComponent_IsSinking) == 0x000001, "Wrong alignment on SwitchCollisionMovementComponent_IsSinking");
static_assert(sizeof(SwitchCollisionMovementComponent_IsSinking) == 0x000001, "Wrong size on SwitchCollisionMovementComponent_IsSinking");
static_assert(offsetof(SwitchCollisionMovementComponent_IsSinking, ReturnValue) == 0x000000, "Member 'SwitchCollisionMovementComponent_IsSinking::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmojiIconDataTable.GetEmojiIcon
// 0x0020 (0x0020 - 0x0000)
struct EmojiIconDataTable_GetEmojiIcon final
{
public:
	class FName                                   emojiId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_EmojiIconData                      emojiIcon;                                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmojiIconDataTable_GetEmojiIcon) == 0x000008, "Wrong alignment on EmojiIconDataTable_GetEmojiIcon");
static_assert(sizeof(EmojiIconDataTable_GetEmojiIcon) == 0x000020, "Wrong size on EmojiIconDataTable_GetEmojiIcon");
static_assert(offsetof(EmojiIconDataTable_GetEmojiIcon, emojiId) == 0x000000, "Member 'EmojiIconDataTable_GetEmojiIcon::emojiId' has a wrong offset!");
static_assert(offsetof(EmojiIconDataTable_GetEmojiIcon, emojiIcon) == 0x000008, "Member 'EmojiIconDataTable_GetEmojiIcon::emojiIcon' has a wrong offset!");

// Function DarwinGame.EmojiIconDataTable.GetEmojiPlatformIcon
// 0x0058 (0x0058 - 0x0000)
struct EmojiIconDataTable_GetEmojiPlatformIcon final
{
public:
	class FName                                   emojiId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_ResourceInputIcons                 emojiIcon;                                         // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         GetCurrentKeyMap;                                  // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EmojiIconDataTable_GetEmojiPlatformIcon) == 0x000008, "Wrong alignment on EmojiIconDataTable_GetEmojiPlatformIcon");
static_assert(sizeof(EmojiIconDataTable_GetEmojiPlatformIcon) == 0x000058, "Wrong size on EmojiIconDataTable_GetEmojiPlatformIcon");
static_assert(offsetof(EmojiIconDataTable_GetEmojiPlatformIcon, emojiId) == 0x000000, "Member 'EmojiIconDataTable_GetEmojiPlatformIcon::emojiId' has a wrong offset!");
static_assert(offsetof(EmojiIconDataTable_GetEmojiPlatformIcon, emojiIcon) == 0x000008, "Member 'EmojiIconDataTable_GetEmojiPlatformIcon::emojiIcon' has a wrong offset!");
static_assert(offsetof(EmojiIconDataTable_GetEmojiPlatformIcon, GetCurrentKeyMap) == 0x000050, "Member 'EmojiIconDataTable_GetEmojiPlatformIcon::GetCurrentKeyMap' has a wrong offset!");

// Function DarwinGame.UIField_WinTutorial.SetData
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinTutorial_SetData final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinTutorial_SetData) == 0x000004, "Wrong alignment on UIField_WinTutorial_SetData");
static_assert(sizeof(UIField_WinTutorial_SetData) == 0x000008, "Wrong size on UIField_WinTutorial_SetData");
static_assert(offsetof(UIField_WinTutorial_SetData, TableName) == 0x000000, "Member 'UIField_WinTutorial_SetData::TableName' has a wrong offset!");

// Function DarwinGame.UIField_WinTutorial.SetTextData
// 0x0018 (0x0018 - 0x0000)
struct UIField_WinTutorial_SetTextData final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinTutorial_SetTextData) == 0x000008, "Wrong alignment on UIField_WinTutorial_SetTextData");
static_assert(sizeof(UIField_WinTutorial_SetTextData) == 0x000018, "Wrong size on UIField_WinTutorial_SetTextData");
static_assert(offsetof(UIField_WinTutorial_SetTextData, Text) == 0x000000, "Member 'UIField_WinTutorial_SetTextData::Text' has a wrong offset!");

// Function DarwinGame.DataTableExportLibrary.ConvertRotaterToCSVString
// 0x0020 (0x0020 - 0x0000)
struct DataTableExportLibrary_ConvertRotaterToCSVString final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableExportLibrary_ConvertRotaterToCSVString) == 0x000008, "Wrong alignment on DataTableExportLibrary_ConvertRotaterToCSVString");
static_assert(sizeof(DataTableExportLibrary_ConvertRotaterToCSVString) == 0x000020, "Wrong size on DataTableExportLibrary_ConvertRotaterToCSVString");
static_assert(offsetof(DataTableExportLibrary_ConvertRotaterToCSVString, Rotator) == 0x000000, "Member 'DataTableExportLibrary_ConvertRotaterToCSVString::Rotator' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_ConvertRotaterToCSVString, ReturnValue) == 0x000010, "Member 'DataTableExportLibrary_ConvertRotaterToCSVString::ReturnValue' has a wrong offset!");

// Function DarwinGame.DataTableExportLibrary.ConvertVectorToCSVString
// 0x0020 (0x0020 - 0x0000)
struct DataTableExportLibrary_ConvertVectorToCSVString final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableExportLibrary_ConvertVectorToCSVString) == 0x000008, "Wrong alignment on DataTableExportLibrary_ConvertVectorToCSVString");
static_assert(sizeof(DataTableExportLibrary_ConvertVectorToCSVString) == 0x000020, "Wrong size on DataTableExportLibrary_ConvertVectorToCSVString");
static_assert(offsetof(DataTableExportLibrary_ConvertVectorToCSVString, Vector) == 0x000000, "Member 'DataTableExportLibrary_ConvertVectorToCSVString::Vector' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_ConvertVectorToCSVString, ReturnValue) == 0x000010, "Member 'DataTableExportLibrary_ConvertVectorToCSVString::ReturnValue' has a wrong offset!");

// Function DarwinGame.DataTableExportLibrary.CreateDataTableCSVHeader
// 0x0018 (0x0018 - 0x0000)
struct DataTableExportLibrary_CreateDataTableCSVHeader final
{
public:
	class UScriptStruct*                          ExportDataTableStruct;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableExportLibrary_CreateDataTableCSVHeader) == 0x000008, "Wrong alignment on DataTableExportLibrary_CreateDataTableCSVHeader");
static_assert(sizeof(DataTableExportLibrary_CreateDataTableCSVHeader) == 0x000018, "Wrong size on DataTableExportLibrary_CreateDataTableCSVHeader");
static_assert(offsetof(DataTableExportLibrary_CreateDataTableCSVHeader, ExportDataTableStruct) == 0x000000, "Member 'DataTableExportLibrary_CreateDataTableCSVHeader::ExportDataTableStruct' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateDataTableCSVHeader, ReturnValue) == 0x000008, "Member 'DataTableExportLibrary_CreateDataTableCSVHeader::ReturnValue' has a wrong offset!");

// Function DarwinGame.DataTableExportLibrary.CreateLocationAndRotationCSVLine
// 0x0030 (0x0030 - 0x0000)
struct DataTableExportLibrary_CreateLocationAndRotationCSVLine final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 CsvLine;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableExportLibrary_CreateLocationAndRotationCSVLine) == 0x000008, "Wrong alignment on DataTableExportLibrary_CreateLocationAndRotationCSVLine");
static_assert(sizeof(DataTableExportLibrary_CreateLocationAndRotationCSVLine) == 0x000030, "Wrong size on DataTableExportLibrary_CreateLocationAndRotationCSVLine");
static_assert(offsetof(DataTableExportLibrary_CreateLocationAndRotationCSVLine, ID) == 0x000000, "Member 'DataTableExportLibrary_CreateLocationAndRotationCSVLine::ID' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateLocationAndRotationCSVLine, Position) == 0x000008, "Member 'DataTableExportLibrary_CreateLocationAndRotationCSVLine::Position' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateLocationAndRotationCSVLine, Rotation) == 0x000014, "Member 'DataTableExportLibrary_CreateLocationAndRotationCSVLine::Rotation' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateLocationAndRotationCSVLine, CsvLine) == 0x000020, "Member 'DataTableExportLibrary_CreateLocationAndRotationCSVLine::CsvLine' has a wrong offset!");

// Function DarwinGame.DataTableExportLibrary.CreatePointCSVLine
// 0x0040 (0x0040 - 0x0000)
struct DataTableExportLibrary_CreatePointCSVLine final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CsvLine;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableExportLibrary_CreatePointCSVLine) == 0x000008, "Wrong alignment on DataTableExportLibrary_CreatePointCSVLine");
static_assert(sizeof(DataTableExportLibrary_CreatePointCSVLine) == 0x000040, "Wrong size on DataTableExportLibrary_CreatePointCSVLine");
static_assert(offsetof(DataTableExportLibrary_CreatePointCSVLine, ID) == 0x000000, "Member 'DataTableExportLibrary_CreatePointCSVLine::ID' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreatePointCSVLine, Position) == 0x000008, "Member 'DataTableExportLibrary_CreatePointCSVLine::Position' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreatePointCSVLine, Rotation) == 0x000014, "Member 'DataTableExportLibrary_CreatePointCSVLine::Rotation' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreatePointCSVLine, Scale) == 0x000020, "Member 'DataTableExportLibrary_CreatePointCSVLine::Scale' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreatePointCSVLine, CsvLine) == 0x000030, "Member 'DataTableExportLibrary_CreatePointCSVLine::CsvLine' has a wrong offset!");

// Function DarwinGame.DataTableExportLibrary.CreateQuestDestinationRectCSVLine
// 0x0050 (0x0050 - 0x0000)
struct DataTableExportLibrary_CreateQuestDestinationRectCSVLine final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestDestinationRectShapeType                Type;                                              // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AreaID;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandom;                                          // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CsvLine;                                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine) == 0x000008, "Wrong alignment on DataTableExportLibrary_CreateQuestDestinationRectCSVLine");
static_assert(sizeof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine) == 0x000050, "Wrong size on DataTableExportLibrary_CreateQuestDestinationRectCSVLine");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, ID) == 0x000000, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::ID' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, Location) == 0x000008, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::Location' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, Rotation) == 0x000014, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::Rotation' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, Size) == 0x000020, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::Size' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, Type) == 0x00002C, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::Type' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, AreaID) == 0x000030, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::AreaID' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, IsRandom) == 0x000038, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::IsRandom' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_CreateQuestDestinationRectCSVLine, CsvLine) == 0x000040, "Member 'DataTableExportLibrary_CreateQuestDestinationRectCSVLine::CsvLine' has a wrong offset!");

// Function DarwinGame.DataTableExportLibrary.FillDataTableFromCSVString
// 0x0028 (0x0028 - 0x0000)
struct DataTableExportLibrary_FillDataTableFromCSVString final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CSVHeader;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CSVRowData;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataTableExportLibrary_FillDataTableFromCSVString) == 0x000008, "Wrong alignment on DataTableExportLibrary_FillDataTableFromCSVString");
static_assert(sizeof(DataTableExportLibrary_FillDataTableFromCSVString) == 0x000028, "Wrong size on DataTableExportLibrary_FillDataTableFromCSVString");
static_assert(offsetof(DataTableExportLibrary_FillDataTableFromCSVString, DataTable) == 0x000000, "Member 'DataTableExportLibrary_FillDataTableFromCSVString::DataTable' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_FillDataTableFromCSVString, CSVHeader) == 0x000008, "Member 'DataTableExportLibrary_FillDataTableFromCSVString::CSVHeader' has a wrong offset!");
static_assert(offsetof(DataTableExportLibrary_FillDataTableFromCSVString, CSVRowData) == 0x000018, "Member 'DataTableExportLibrary_FillDataTableFromCSVString::CSVRowData' has a wrong offset!");

// Function DarwinGame.CharacterAssetManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct CharacterAssetManager_GetInstance final
{
public:
	class UCharacterAssetManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAssetManager_GetInstance) == 0x000008, "Wrong alignment on CharacterAssetManager_GetInstance");
static_assert(sizeof(CharacterAssetManager_GetInstance) == 0x000008, "Wrong size on CharacterAssetManager_GetInstance");
static_assert(offsetof(CharacterAssetManager_GetInstance, ReturnValue) == 0x000000, "Member 'CharacterAssetManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterAssetManager.RequestCommonASyncLoadActor
// 0x00E0 (0x00E0 - 0x0000)
struct CharacterAssetManager_RequestCommonASyncLoadActor final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommonSpawnParam                      spawnParam;                                        // 0x0010(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class FName ID, struct FCommonSpawnParam& spawnParam)> onEvent;                                           // 0x00D0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAssetManager_RequestCommonASyncLoadActor) == 0x000010, "Wrong alignment on CharacterAssetManager_RequestCommonASyncLoadActor");
static_assert(sizeof(CharacterAssetManager_RequestCommonASyncLoadActor) == 0x0000E0, "Wrong size on CharacterAssetManager_RequestCommonASyncLoadActor");
static_assert(offsetof(CharacterAssetManager_RequestCommonASyncLoadActor, ID) == 0x000000, "Member 'CharacterAssetManager_RequestCommonASyncLoadActor::ID' has a wrong offset!");
static_assert(offsetof(CharacterAssetManager_RequestCommonASyncLoadActor, spawnParam) == 0x000010, "Member 'CharacterAssetManager_RequestCommonASyncLoadActor::spawnParam' has a wrong offset!");
static_assert(offsetof(CharacterAssetManager_RequestCommonASyncLoadActor, onEvent) == 0x0000D0, "Member 'CharacterAssetManager_RequestCommonASyncLoadActor::onEvent' has a wrong offset!");

// Function DarwinGame.CharacterAssetManager.RequestSimpleASyncLoadActor
// 0x0050 (0x0050 - 0x0000)
struct CharacterAssetManager_RequestSimpleASyncLoadActor final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class FName ID, struct FTransform& Transform)> onEvent;                                           // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAssetManager_RequestSimpleASyncLoadActor) == 0x000010, "Wrong alignment on CharacterAssetManager_RequestSimpleASyncLoadActor");
static_assert(sizeof(CharacterAssetManager_RequestSimpleASyncLoadActor) == 0x000050, "Wrong size on CharacterAssetManager_RequestSimpleASyncLoadActor");
static_assert(offsetof(CharacterAssetManager_RequestSimpleASyncLoadActor, ID) == 0x000000, "Member 'CharacterAssetManager_RequestSimpleASyncLoadActor::ID' has a wrong offset!");
static_assert(offsetof(CharacterAssetManager_RequestSimpleASyncLoadActor, Transform) == 0x000010, "Member 'CharacterAssetManager_RequestSimpleASyncLoadActor::Transform' has a wrong offset!");
static_assert(offsetof(CharacterAssetManager_RequestSimpleASyncLoadActor, onEvent) == 0x000040, "Member 'CharacterAssetManager_RequestSimpleASyncLoadActor::onEvent' has a wrong offset!");

// Function DarwinGame.GameDataStation.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataStation_Clone final
{
public:
	class UGameDataStation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStation_Clone) == 0x000008, "Wrong alignment on GameDataStation_Clone");
static_assert(sizeof(GameDataStation_Clone) == 0x000008, "Wrong size on GameDataStation_Clone");
static_assert(offsetof(GameDataStation_Clone, ReturnValue) == 0x000000, "Member 'GameDataStation_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStation.ExistElevator
// 0x000C (0x000C - 0x0000)
struct GameDataStation_ExistElevator final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStation_ExistElevator) == 0x000004, "Wrong alignment on GameDataStation_ExistElevator");
static_assert(sizeof(GameDataStation_ExistElevator) == 0x00000C, "Wrong size on GameDataStation_ExistElevator");
static_assert(offsetof(GameDataStation_ExistElevator, ID) == 0x000000, "Member 'GameDataStation_ExistElevator::ID' has a wrong offset!");
static_assert(offsetof(GameDataStation_ExistElevator, ReturnValue) == 0x000008, "Member 'GameDataStation_ExistElevator::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStation.GetConsoleLocation
// 0x0014 (0x0014 - 0x0000)
struct GameDataStation_GetConsoleLocation final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStation_GetConsoleLocation) == 0x000004, "Wrong alignment on GameDataStation_GetConsoleLocation");
static_assert(sizeof(GameDataStation_GetConsoleLocation) == 0x000014, "Wrong size on GameDataStation_GetConsoleLocation");
static_assert(offsetof(GameDataStation_GetConsoleLocation, ID) == 0x000000, "Member 'GameDataStation_GetConsoleLocation::ID' has a wrong offset!");
static_assert(offsetof(GameDataStation_GetConsoleLocation, ReturnValue) == 0x000008, "Member 'GameDataStation_GetConsoleLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStation.GetElevatorLocation
// 0x0014 (0x0014 - 0x0000)
struct GameDataStation_GetElevatorLocation final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStation_GetElevatorLocation) == 0x000004, "Wrong alignment on GameDataStation_GetElevatorLocation");
static_assert(sizeof(GameDataStation_GetElevatorLocation) == 0x000014, "Wrong size on GameDataStation_GetElevatorLocation");
static_assert(offsetof(GameDataStation_GetElevatorLocation, ID) == 0x000000, "Member 'GameDataStation_GetElevatorLocation::ID' has a wrong offset!");
static_assert(offsetof(GameDataStation_GetElevatorLocation, ReturnValue) == 0x000008, "Member 'GameDataStation_GetElevatorLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStation.GetStationLocation
// 0x0014 (0x0014 - 0x0000)
struct GameDataStation_GetStationLocation final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStation_GetStationLocation) == 0x000004, "Wrong alignment on GameDataStation_GetStationLocation");
static_assert(sizeof(GameDataStation_GetStationLocation) == 0x000014, "Wrong size on GameDataStation_GetStationLocation");
static_assert(offsetof(GameDataStation_GetStationLocation, ID) == 0x000000, "Member 'GameDataStation_GetStationLocation::ID' has a wrong offset!");
static_assert(offsetof(GameDataStation_GetStationLocation, ReturnValue) == 0x000008, "Member 'GameDataStation_GetStationLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStation.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataStation_Overwrite final
{
public:
	class UGameDataStation*                       game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStation_Overwrite) == 0x000008, "Wrong alignment on GameDataStation_Overwrite");
static_assert(sizeof(GameDataStation_Overwrite) == 0x000008, "Wrong size on GameDataStation_Overwrite");
static_assert(offsetof(GameDataStation_Overwrite, game_data) == 0x000000, "Member 'GameDataStation_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.TargetObjectManager.SpawnTargetObjectFromArea
// 0x0001 (0x0001 - 0x0000)
struct TargetObjectManager_SpawnTargetObjectFromArea final
{
public:
	EAreaType                                     AreaType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetObjectManager_SpawnTargetObjectFromArea) == 0x000001, "Wrong alignment on TargetObjectManager_SpawnTargetObjectFromArea");
static_assert(sizeof(TargetObjectManager_SpawnTargetObjectFromArea) == 0x000001, "Wrong size on TargetObjectManager_SpawnTargetObjectFromArea");
static_assert(offsetof(TargetObjectManager_SpawnTargetObjectFromArea, AreaType) == 0x000000, "Member 'TargetObjectManager_SpawnTargetObjectFromArea::AreaType' has a wrong offset!");

// Function DarwinGame.DebugLauncherActor.UpdateInput
// 0x00E0 (0x00E0 - 0x0000)
struct DebugLauncherActor_UpdateInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamePaused;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyInput                              KeyInput;                                          // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FKeyInput                              OutKeyInput;                                       // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FEventReply                            Output;                                            // 0x0028(0x00B8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugLauncherActor_UpdateInput) == 0x000008, "Wrong alignment on DebugLauncherActor_UpdateInput");
static_assert(sizeof(DebugLauncherActor_UpdateInput) == 0x0000E0, "Wrong size on DebugLauncherActor_UpdateInput");
static_assert(offsetof(DebugLauncherActor_UpdateInput, DeltaTime) == 0x000000, "Member 'DebugLauncherActor_UpdateInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(DebugLauncherActor_UpdateInput, bGamePaused) == 0x000004, "Member 'DebugLauncherActor_UpdateInput::bGamePaused' has a wrong offset!");
static_assert(offsetof(DebugLauncherActor_UpdateInput, KeyInput) == 0x000008, "Member 'DebugLauncherActor_UpdateInput::KeyInput' has a wrong offset!");
static_assert(offsetof(DebugLauncherActor_UpdateInput, OutKeyInput) == 0x000018, "Member 'DebugLauncherActor_UpdateInput::OutKeyInput' has a wrong offset!");
static_assert(offsetof(DebugLauncherActor_UpdateInput, Output) == 0x000028, "Member 'DebugLauncherActor_UpdateInput::Output' has a wrong offset!");

// Function DarwinGame.DebugLauncherActor.IsActive
// 0x0001 (0x0001 - 0x0000)
struct DebugLauncherActor_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugLauncherActor_IsActive) == 0x000001, "Wrong alignment on DebugLauncherActor_IsActive");
static_assert(sizeof(DebugLauncherActor_IsActive) == 0x000001, "Wrong size on DebugLauncherActor_IsActive");
static_assert(offsetof(DebugLauncherActor_IsActive, ReturnValue) == 0x000000, "Member 'DebugLauncherActor_IsActive::ReturnValue' has a wrong offset!");

// Function DarwinGame.DebugLauncherActor.IsIdle
// 0x0001 (0x0001 - 0x0000)
struct DebugLauncherActor_IsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugLauncherActor_IsIdle) == 0x000001, "Wrong alignment on DebugLauncherActor_IsIdle");
static_assert(sizeof(DebugLauncherActor_IsIdle) == 0x000001, "Wrong size on DebugLauncherActor_IsIdle");
static_assert(offsetof(DebugLauncherActor_IsIdle, ReturnValue) == 0x000000, "Member 'DebugLauncherActor_IsIdle::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.CalcFloorStatus
// 0x0030 (0x0030 - 0x0000)
struct CharacterCalculationFunctionLibrary_CalcFloorStatus final
{
public:
	struct FST_Status                             Status;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_CalcFloorStatus) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_CalcFloorStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_CalcFloorStatus) == 0x000030, "Wrong size on CharacterCalculationFunctionLibrary_CalcFloorStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalcFloorStatus, Status) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_CalcFloorStatus::Status' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalcFloorStatus, ReturnValue) == 0x000018, "Member 'CharacterCalculationFunctionLibrary_CalcFloorStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.CalculateAttributeStatus
// 0x0068 (0x0068 - 0x0000)
struct CharacterCalculationFunctionLibrary_CalculateAttributeStatus final
{
public:
	struct FST_Status                             outAttributePercentage;                            // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      AttributeList;                                     // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_CalculateAttributeStatus) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_CalculateAttributeStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_CalculateAttributeStatus) == 0x000068, "Wrong size on CharacterCalculationFunctionLibrary_CalculateAttributeStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateAttributeStatus, outAttributePercentage) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_CalculateAttributeStatus::outAttributePercentage' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateAttributeStatus, AttributeList) == 0x000018, "Member 'CharacterCalculationFunctionLibrary_CalculateAttributeStatus::AttributeList' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.CalculateCoinStatus
// 0x0048 (0x0048 - 0x0000)
struct CharacterCalculationFunctionLibrary_CalculateCoinStatus final
{
public:
	struct FFeatureEffectStatusResult             outResult;                                         // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FST_CoinData>                   Coins;                                             // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_CalculateCoinStatus) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_CalculateCoinStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_CalculateCoinStatus) == 0x000048, "Wrong size on CharacterCalculationFunctionLibrary_CalculateCoinStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateCoinStatus, outResult) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_CalculateCoinStatus::outResult' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateCoinStatus, Coins) == 0x000038, "Member 'CharacterCalculationFunctionLibrary_CalculateCoinStatus::Coins' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.CalculateFeatureStatus
// 0x0050 (0x0050 - 0x0000)
struct CharacterCalculationFunctionLibrary_CalculateFeatureStatus final
{
public:
	struct FFeatureEffectStatusResult             outResult;                                         // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FFeaturePossessionInfo>         Features;                                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMainPartyMonster;                                // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_CalculateFeatureStatus) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_CalculateFeatureStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_CalculateFeatureStatus) == 0x000050, "Wrong size on CharacterCalculationFunctionLibrary_CalculateFeatureStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateFeatureStatus, outResult) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_CalculateFeatureStatus::outResult' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateFeatureStatus, Features) == 0x000038, "Member 'CharacterCalculationFunctionLibrary_CalculateFeatureStatus::Features' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateFeatureStatus, IsMainPartyMonster) == 0x000048, "Member 'CharacterCalculationFunctionLibrary_CalculateFeatureStatus::IsMainPartyMonster' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.CalculateFoodStatus
// 0x0050 (0x0050 - 0x0000)
struct CharacterCalculationFunctionLibrary_CalculateFoodStatus final
{
public:
	struct FFoodEffectStatusResult                outFoodResult;                                     // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FoodList;                                          // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_CalculateFoodStatus) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_CalculateFoodStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_CalculateFoodStatus) == 0x000050, "Wrong size on CharacterCalculationFunctionLibrary_CalculateFoodStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateFoodStatus, outFoodResult) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_CalculateFoodStatus::outFoodResult' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateFoodStatus, KindId) == 0x000038, "Member 'CharacterCalculationFunctionLibrary_CalculateFoodStatus::KindId' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_CalculateFoodStatus, FoodList) == 0x000040, "Member 'CharacterCalculationFunctionLibrary_CalculateFoodStatus::FoodList' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetAdvanceStatus_FriendMonster
// 0x0200 (0x0200 - 0x0000)
struct CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster final
{
public:
	struct FGameDataFriendMonster                 dataFriend;                                        // 0x0000(0x01E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isMaxHp;                                           // 0x01E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Status                             ReturnValue;                                       // 0x01E4(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster) == 0x000200, "Wrong size on CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster, dataFriend) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster::dataFriend' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster, isMaxHp) == 0x0001E0, "Member 'CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster::isMaxHp' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster, ReturnValue) == 0x0001E4, "Member 'CharacterCalculationFunctionLibrary_GetAdvanceStatus_FriendMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetBaseStatus
// 0x003C (0x003C - 0x0000)
struct CharacterCalculationFunctionLibrary_GetBaseStatus final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             IndividualValue;                                   // 0x000C(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             ReturnValue;                                       // 0x0024(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetBaseStatus) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_GetBaseStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetBaseStatus) == 0x00003C, "Wrong size on CharacterCalculationFunctionLibrary_GetBaseStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetBaseStatus, KindId) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetBaseStatus::KindId' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetBaseStatus, Level) == 0x000008, "Member 'CharacterCalculationFunctionLibrary_GetBaseStatus::Level' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetBaseStatus, IndividualValue) == 0x00000C, "Member 'CharacterCalculationFunctionLibrary_GetBaseStatus::IndividualValue' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetBaseStatus, ReturnValue) == 0x000024, "Member 'CharacterCalculationFunctionLibrary_GetBaseStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetCorrectedStandardStatus
// 0x0054 (0x0054 - 0x0000)
struct CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             levelRate;                                         // 0x000C(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             Value;                                             // 0x0024(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             ReturnValue;                                       // 0x003C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus) == 0x000054, "Wrong size on CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus, KindId) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus::KindId' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus, Level) == 0x000008, "Member 'CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus::Level' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus, levelRate) == 0x00000C, "Member 'CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus::levelRate' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus, Value) == 0x000024, "Member 'CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus::Value' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus, ReturnValue) == 0x00003C, "Member 'CharacterCalculationFunctionLibrary_GetCorrectedStandardStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetDungeonStatus
// 0x0058 (0x0058 - 0x0000)
struct CharacterCalculationFunctionLibrary_GetDungeonStatus final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterType                                  MonsterType;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Status                             levelRate;                                         // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             Value;                                             // 0x0028(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetDungeonStatus) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_GetDungeonStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetDungeonStatus) == 0x000058, "Wrong size on CharacterCalculationFunctionLibrary_GetDungeonStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetDungeonStatus, KindId) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetDungeonStatus::KindId' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetDungeonStatus, Level) == 0x000008, "Member 'CharacterCalculationFunctionLibrary_GetDungeonStatus::Level' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetDungeonStatus, MonsterType) == 0x00000C, "Member 'CharacterCalculationFunctionLibrary_GetDungeonStatus::MonsterType' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetDungeonStatus, levelRate) == 0x000010, "Member 'CharacterCalculationFunctionLibrary_GetDungeonStatus::levelRate' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetDungeonStatus, Value) == 0x000028, "Member 'CharacterCalculationFunctionLibrary_GetDungeonStatus::Value' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetDungeonStatus, ReturnValue) == 0x000040, "Member 'CharacterCalculationFunctionLibrary_GetDungeonStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetIndividualStatus
// 0x0018 (0x0018 - 0x0000)
struct CharacterCalculationFunctionLibrary_GetIndividualStatus final
{
public:
	struct FST_Status                             ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetIndividualStatus) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_GetIndividualStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetIndividualStatus) == 0x000018, "Wrong size on CharacterCalculationFunctionLibrary_GetIndividualStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetIndividualStatus, ReturnValue) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetIndividualStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetStandardStatus
// 0x0024 (0x0024 - 0x0000)
struct CharacterCalculationFunctionLibrary_GetStandardStatus final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             ReturnValue;                                       // 0x000C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetStandardStatus) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_GetStandardStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetStandardStatus) == 0x000024, "Wrong size on CharacterCalculationFunctionLibrary_GetStandardStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStandardStatus, KindId) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetStandardStatus::KindId' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStandardStatus, Level) == 0x000008, "Member 'CharacterCalculationFunctionLibrary_GetStandardStatus::Level' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStandardStatus, ReturnValue) == 0x00000C, "Member 'CharacterCalculationFunctionLibrary_GetStandardStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetStatus
// 0x00F8 (0x00F8 - 0x0000)
struct CharacterCalculationFunctionLibrary_GetStatus final
{
public:
	struct FST_Status                             AdvanceStatus;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFeatureEffectStatusResult             CoinStatus;                                        // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFeatureEffectStatusResult             conditionalFeature;                                // 0x0050(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFoodEffectStatusResult                FoodStatus;                                        // 0x0088(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FST_Status                             AttributePercentage;                               // 0x00C0(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          isBelongToAlly;                                    // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Status                             ReturnValue;                                       // 0x00DC(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetStatus) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_GetStatus");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetStatus) == 0x0000F8, "Wrong size on CharacterCalculationFunctionLibrary_GetStatus");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus, AdvanceStatus) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetStatus::AdvanceStatus' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus, CoinStatus) == 0x000018, "Member 'CharacterCalculationFunctionLibrary_GetStatus::CoinStatus' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus, conditionalFeature) == 0x000050, "Member 'CharacterCalculationFunctionLibrary_GetStatus::conditionalFeature' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus, FoodStatus) == 0x000088, "Member 'CharacterCalculationFunctionLibrary_GetStatus::FoodStatus' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus, AttributePercentage) == 0x0000C0, "Member 'CharacterCalculationFunctionLibrary_GetStatus::AttributePercentage' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus, isBelongToAlly) == 0x0000D8, "Member 'CharacterCalculationFunctionLibrary_GetStatus::isBelongToAlly' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus, ReturnValue) == 0x0000DC, "Member 'CharacterCalculationFunctionLibrary_GetStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.GetStatus_FriendMonster
// 0x0200 (0x0200 - 0x0000)
struct CharacterCalculationFunctionLibrary_GetStatus_FriendMonster final
{
public:
	struct FGameDataFriendMonster                 dataFriend;                                        // 0x0000(0x01E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isMaxHp;                                           // 0x01E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Status                             ReturnValue;                                       // 0x01E4(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_GetStatus_FriendMonster) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_GetStatus_FriendMonster");
static_assert(sizeof(CharacterCalculationFunctionLibrary_GetStatus_FriendMonster) == 0x000200, "Wrong size on CharacterCalculationFunctionLibrary_GetStatus_FriendMonster");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus_FriendMonster, dataFriend) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_GetStatus_FriendMonster::dataFriend' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus_FriendMonster, isMaxHp) == 0x0001E0, "Member 'CharacterCalculationFunctionLibrary_GetStatus_FriendMonster::isMaxHp' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_GetStatus_FriendMonster, ReturnValue) == 0x0001E4, "Member 'CharacterCalculationFunctionLibrary_GetStatus_FriendMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.IsMainParty
// 0x01E8 (0x01E8 - 0x0000)
struct CharacterCalculationFunctionLibrary_IsMainParty final
{
public:
	struct FGameDataFriendMonster                 friendMonster;                                     // 0x0000(0x01E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_IsMainParty) == 0x000008, "Wrong alignment on CharacterCalculationFunctionLibrary_IsMainParty");
static_assert(sizeof(CharacterCalculationFunctionLibrary_IsMainParty) == 0x0001E8, "Wrong size on CharacterCalculationFunctionLibrary_IsMainParty");
static_assert(offsetof(CharacterCalculationFunctionLibrary_IsMainParty, friendMonster) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_IsMainParty::friendMonster' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_IsMainParty, ReturnValue) == 0x0001E0, "Member 'CharacterCalculationFunctionLibrary_IsMainParty::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.TakeBreakFriendMonsterDataBase
// 0x0004 (0x0004 - 0x0000)
struct CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterDataBase final
{
public:
	int32                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterDataBase) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterDataBase");
static_assert(sizeof(CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterDataBase) == 0x000004, "Wrong size on CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterDataBase");
static_assert(offsetof(CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterDataBase, Percentage) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterDataBase::Percentage' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.TakeBreakFriendMonsterOnly
// 0x0008 (0x0008 - 0x0000)
struct CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly final
{
public:
	int32                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUIAnim;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly");
static_assert(sizeof(CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly) == 0x000008, "Wrong size on CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly");
static_assert(offsetof(CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly, Percentage) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly::Percentage' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly, IsUIAnim) == 0x000004, "Member 'CharacterCalculationFunctionLibrary_TakeBreakFriendMonsterOnly::IsUIAnim' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.TakeBreakPlayerOnly
// 0x0008 (0x0008 - 0x0000)
struct CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly final
{
public:
	int32                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUIAnim;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly");
static_assert(sizeof(CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly) == 0x000008, "Wrong size on CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly");
static_assert(offsetof(CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly, Percentage) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly::Percentage' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly, IsUIAnim) == 0x000004, "Member 'CharacterCalculationFunctionLibrary_TakeBreakPlayerOnly::IsUIAnim' has a wrong offset!");

// Function DarwinGame.CharacterCalculationFunctionLibrary.TakeBreakPlayerSide
// 0x0008 (0x0008 - 0x0000)
struct CharacterCalculationFunctionLibrary_TakeBreakPlayerSide final
{
public:
	int32                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUIAnim;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCalculationFunctionLibrary_TakeBreakPlayerSide) == 0x000004, "Wrong alignment on CharacterCalculationFunctionLibrary_TakeBreakPlayerSide");
static_assert(sizeof(CharacterCalculationFunctionLibrary_TakeBreakPlayerSide) == 0x000008, "Wrong size on CharacterCalculationFunctionLibrary_TakeBreakPlayerSide");
static_assert(offsetof(CharacterCalculationFunctionLibrary_TakeBreakPlayerSide, Percentage) == 0x000000, "Member 'CharacterCalculationFunctionLibrary_TakeBreakPlayerSide::Percentage' has a wrong offset!");
static_assert(offsetof(CharacterCalculationFunctionLibrary_TakeBreakPlayerSide, IsUIAnim) == 0x000004, "Member 'CharacterCalculationFunctionLibrary_TakeBreakPlayerSide::IsUIAnim' has a wrong offset!");

// Function DarwinGame.SaveGameFunctionLibrary.ExecuteAllSave
// 0x0001 (0x0001 - 0x0000)
struct SaveGameFunctionLibrary_ExecuteAllSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameFunctionLibrary_ExecuteAllSave) == 0x000001, "Wrong alignment on SaveGameFunctionLibrary_ExecuteAllSave");
static_assert(sizeof(SaveGameFunctionLibrary_ExecuteAllSave) == 0x000001, "Wrong size on SaveGameFunctionLibrary_ExecuteAllSave");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteAllSave, ReturnValue) == 0x000000, "Member 'SaveGameFunctionLibrary_ExecuteAllSave::ReturnValue' has a wrong offset!");

// Function DarwinGame.SaveGameFunctionLibrary.ExecuteAutoSave
// 0x0001 (0x0001 - 0x0000)
struct SaveGameFunctionLibrary_ExecuteAutoSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameFunctionLibrary_ExecuteAutoSave) == 0x000001, "Wrong alignment on SaveGameFunctionLibrary_ExecuteAutoSave");
static_assert(sizeof(SaveGameFunctionLibrary_ExecuteAutoSave) == 0x000001, "Wrong size on SaveGameFunctionLibrary_ExecuteAutoSave");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteAutoSave, ReturnValue) == 0x000000, "Member 'SaveGameFunctionLibrary_ExecuteAutoSave::ReturnValue' has a wrong offset!");

// Function DarwinGame.SaveGameFunctionLibrary.ExecuteAutoSaveLocation
// 0x0030 (0x0030 - 0x0000)
struct SaveGameFunctionLibrary_ExecuteAutoSaveLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EPersistentLevelID                            persisten_level_id;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveGameFunctionLibrary_ExecuteAutoSaveLocation) == 0x000008, "Wrong alignment on SaveGameFunctionLibrary_ExecuteAutoSaveLocation");
static_assert(sizeof(SaveGameFunctionLibrary_ExecuteAutoSaveLocation) == 0x000030, "Wrong size on SaveGameFunctionLibrary_ExecuteAutoSaveLocation");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteAutoSaveLocation, Location) == 0x000000, "Member 'SaveGameFunctionLibrary_ExecuteAutoSaveLocation::Location' has a wrong offset!");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteAutoSaveLocation, Rotation) == 0x00000C, "Member 'SaveGameFunctionLibrary_ExecuteAutoSaveLocation::Rotation' has a wrong offset!");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteAutoSaveLocation, persisten_level_id) == 0x000018, "Member 'SaveGameFunctionLibrary_ExecuteAutoSaveLocation::persisten_level_id' has a wrong offset!");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteAutoSaveLocation, Texture) == 0x000020, "Member 'SaveGameFunctionLibrary_ExecuteAutoSaveLocation::Texture' has a wrong offset!");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteAutoSaveLocation, ReturnValue) == 0x000028, "Member 'SaveGameFunctionLibrary_ExecuteAutoSaveLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.SaveGameFunctionLibrary.ExecuteCommonSave
// 0x0001 (0x0001 - 0x0000)
struct SaveGameFunctionLibrary_ExecuteCommonSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameFunctionLibrary_ExecuteCommonSave) == 0x000001, "Wrong alignment on SaveGameFunctionLibrary_ExecuteCommonSave");
static_assert(sizeof(SaveGameFunctionLibrary_ExecuteCommonSave) == 0x000001, "Wrong size on SaveGameFunctionLibrary_ExecuteCommonSave");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteCommonSave, ReturnValue) == 0x000000, "Member 'SaveGameFunctionLibrary_ExecuteCommonSave::ReturnValue' has a wrong offset!");

// Function DarwinGame.SaveGameFunctionLibrary.ExecuteManualSave
// 0x0001 (0x0001 - 0x0000)
struct SaveGameFunctionLibrary_ExecuteManualSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameFunctionLibrary_ExecuteManualSave) == 0x000001, "Wrong alignment on SaveGameFunctionLibrary_ExecuteManualSave");
static_assert(sizeof(SaveGameFunctionLibrary_ExecuteManualSave) == 0x000001, "Wrong size on SaveGameFunctionLibrary_ExecuteManualSave");
static_assert(offsetof(SaveGameFunctionLibrary_ExecuteManualSave, ReturnValue) == 0x000000, "Member 'SaveGameFunctionLibrary_ExecuteManualSave::ReturnValue' has a wrong offset!");

// Function DarwinGame.SaveGameFunctionLibrary.IsAutoSaveNow
// 0x0001 (0x0001 - 0x0000)
struct SaveGameFunctionLibrary_IsAutoSaveNow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameFunctionLibrary_IsAutoSaveNow) == 0x000001, "Wrong alignment on SaveGameFunctionLibrary_IsAutoSaveNow");
static_assert(sizeof(SaveGameFunctionLibrary_IsAutoSaveNow) == 0x000001, "Wrong size on SaveGameFunctionLibrary_IsAutoSaveNow");
static_assert(offsetof(SaveGameFunctionLibrary_IsAutoSaveNow, ReturnValue) == 0x000000, "Member 'SaveGameFunctionLibrary_IsAutoSaveNow::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIEvent_FullScreenImageBase.SetData
// 0x0008 (0x0008 - 0x0000)
struct UIEvent_FullScreenImageBase_SetData final
{
public:
	class FName                                   ImageKey;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEvent_FullScreenImageBase_SetData) == 0x000004, "Wrong alignment on UIEvent_FullScreenImageBase_SetData");
static_assert(sizeof(UIEvent_FullScreenImageBase_SetData) == 0x000008, "Wrong size on UIEvent_FullScreenImageBase_SetData");
static_assert(offsetof(UIEvent_FullScreenImageBase_SetData, ImageKey) == 0x000000, "Member 'UIEvent_FullScreenImageBase_SetData::ImageKey' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.AddPlayerMoney
// 0x0004 (0x0004 - 0x0000)
struct CharacterFunctionLibrary_AddPlayerMoney final
{
public:
	int32                                         Money;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_AddPlayerMoney) == 0x000004, "Wrong alignment on CharacterFunctionLibrary_AddPlayerMoney");
static_assert(sizeof(CharacterFunctionLibrary_AddPlayerMoney) == 0x000004, "Wrong size on CharacterFunctionLibrary_AddPlayerMoney");
static_assert(offsetof(CharacterFunctionLibrary_AddPlayerMoney, Money) == 0x000000, "Member 'CharacterFunctionLibrary_AddPlayerMoney::Money' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.ChangePlayer
// 0x0008 (0x0008 - 0x0000)
struct CharacterFunctionLibrary_ChangePlayer final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_ChangePlayer) == 0x000004, "Wrong alignment on CharacterFunctionLibrary_ChangePlayer");
static_assert(sizeof(CharacterFunctionLibrary_ChangePlayer) == 0x000008, "Wrong size on CharacterFunctionLibrary_ChangePlayer");
static_assert(offsetof(CharacterFunctionLibrary_ChangePlayer, KindId) == 0x000000, "Member 'CharacterFunctionLibrary_ChangePlayer::KindId' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.FindActionDetailIDByActionOverViewID
// 0x0018 (0x0018 - 0x0000)
struct CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID final
{
public:
	class FName                                   ActionOverviewID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID");
static_assert(sizeof(CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID) == 0x000018, "Wrong size on CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID");
static_assert(offsetof(CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID, ActionOverviewID) == 0x000000, "Member 'CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID::ActionOverviewID' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID, ReturnValue) == 0x000008, "Member 'CharacterFunctionLibrary_FindActionDetailIDByActionOverViewID::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.GetBrave
// 0x0010 (0x0010 - 0x0000)
struct CharacterFunctionLibrary_GetBrave final
{
public:
	TArray<EBraveReason>                          BraveReasons;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_GetBrave) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_GetBrave");
static_assert(sizeof(CharacterFunctionLibrary_GetBrave) == 0x000010, "Wrong size on CharacterFunctionLibrary_GetBrave");
static_assert(offsetof(CharacterFunctionLibrary_GetBrave, BraveReasons) == 0x000000, "Member 'CharacterFunctionLibrary_GetBrave::BraveReasons' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.GetHostilityRegisterType
// 0x0010 (0x0010 - 0x0000)
struct CharacterFunctionLibrary_GetHostilityRegisterType final
{
public:
	class AGPACharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterFunctionLibrary_GetHostilityRegisterType) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_GetHostilityRegisterType");
static_assert(sizeof(CharacterFunctionLibrary_GetHostilityRegisterType) == 0x000010, "Wrong size on CharacterFunctionLibrary_GetHostilityRegisterType");
static_assert(offsetof(CharacterFunctionLibrary_GetHostilityRegisterType, Character) == 0x000000, "Member 'CharacterFunctionLibrary_GetHostilityRegisterType::Character' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_GetHostilityRegisterType, ReturnValue) == 0x000008, "Member 'CharacterFunctionLibrary_GetHostilityRegisterType::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.GetRegisterType
// 0x0010 (0x0010 - 0x0000)
struct CharacterFunctionLibrary_GetRegisterType final
{
public:
	class AGPACharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterFunctionLibrary_GetRegisterType) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_GetRegisterType");
static_assert(sizeof(CharacterFunctionLibrary_GetRegisterType) == 0x000010, "Wrong size on CharacterFunctionLibrary_GetRegisterType");
static_assert(offsetof(CharacterFunctionLibrary_GetRegisterType, Character) == 0x000000, "Member 'CharacterFunctionLibrary_GetRegisterType::Character' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_GetRegisterType, ReturnValue) == 0x000008, "Member 'CharacterFunctionLibrary_GetRegisterType::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.IsGroupMate
// 0x0018 (0x0018 - 0x0000)
struct CharacterFunctionLibrary_IsGroupMate final
{
public:
	class AGPACharacter*                          character00;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          character01;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterFunctionLibrary_IsGroupMate) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_IsGroupMate");
static_assert(sizeof(CharacterFunctionLibrary_IsGroupMate) == 0x000018, "Wrong size on CharacterFunctionLibrary_IsGroupMate");
static_assert(offsetof(CharacterFunctionLibrary_IsGroupMate, character00) == 0x000000, "Member 'CharacterFunctionLibrary_IsGroupMate::character00' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_IsGroupMate, character01) == 0x000008, "Member 'CharacterFunctionLibrary_IsGroupMate::character01' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_IsGroupMate, ReturnValue) == 0x000010, "Member 'CharacterFunctionLibrary_IsGroupMate::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.MakeEmoteBlinkOverwriteOption
// 0x0008 (0x0008 - 0x0000)
struct CharacterFunctionLibrary_MakeEmoteBlinkOverwriteOption final
{
public:
	class UEmoteBlinkOverwriteOption*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_MakeEmoteBlinkOverwriteOption) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_MakeEmoteBlinkOverwriteOption");
static_assert(sizeof(CharacterFunctionLibrary_MakeEmoteBlinkOverwriteOption) == 0x000008, "Wrong size on CharacterFunctionLibrary_MakeEmoteBlinkOverwriteOption");
static_assert(offsetof(CharacterFunctionLibrary_MakeEmoteBlinkOverwriteOption, ReturnValue) == 0x000000, "Member 'CharacterFunctionLibrary_MakeEmoteBlinkOverwriteOption::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.MakeEmoteRuntimeOption
// 0x0008 (0x0008 - 0x0000)
struct CharacterFunctionLibrary_MakeEmoteRuntimeOption final
{
public:
	class UEmoteRuntimeOption*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_MakeEmoteRuntimeOption) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_MakeEmoteRuntimeOption");
static_assert(sizeof(CharacterFunctionLibrary_MakeEmoteRuntimeOption) == 0x000008, "Wrong size on CharacterFunctionLibrary_MakeEmoteRuntimeOption");
static_assert(offsetof(CharacterFunctionLibrary_MakeEmoteRuntimeOption, ReturnValue) == 0x000000, "Member 'CharacterFunctionLibrary_MakeEmoteRuntimeOption::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.MakeEmoteStampOverwriteOption
// 0x0008 (0x0008 - 0x0000)
struct CharacterFunctionLibrary_MakeEmoteStampOverwriteOption final
{
public:
	class UEmoteStampOverwriteOption*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_MakeEmoteStampOverwriteOption) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_MakeEmoteStampOverwriteOption");
static_assert(sizeof(CharacterFunctionLibrary_MakeEmoteStampOverwriteOption) == 0x000008, "Wrong size on CharacterFunctionLibrary_MakeEmoteStampOverwriteOption");
static_assert(offsetof(CharacterFunctionLibrary_MakeEmoteStampOverwriteOption, ReturnValue) == 0x000000, "Member 'CharacterFunctionLibrary_MakeEmoteStampOverwriteOption::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterFunctionLibrary.MakeEmoteVocalizeOverwriteOption
// 0x0008 (0x0008 - 0x0000)
struct CharacterFunctionLibrary_MakeEmoteVocalizeOverwriteOption final
{
public:
	class UEmoteVocalizeOverwriteOption*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterFunctionLibrary_MakeEmoteVocalizeOverwriteOption) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_MakeEmoteVocalizeOverwriteOption");
static_assert(sizeof(CharacterFunctionLibrary_MakeEmoteVocalizeOverwriteOption) == 0x000008, "Wrong size on CharacterFunctionLibrary_MakeEmoteVocalizeOverwriteOption");
static_assert(offsetof(CharacterFunctionLibrary_MakeEmoteVocalizeOverwriteOption, ReturnValue) == 0x000000, "Member 'CharacterFunctionLibrary_MakeEmoteVocalizeOverwriteOption::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInputInterface.ComboKeyAction
// 0x0002 (0x0002 - 0x0000)
struct CharacterInputInterface_ComboKeyAction final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInputInterface_ComboKeyAction) == 0x000001, "Wrong alignment on CharacterInputInterface_ComboKeyAction");
static_assert(sizeof(CharacterInputInterface_ComboKeyAction) == 0x000002, "Wrong size on CharacterInputInterface_ComboKeyAction");
static_assert(offsetof(CharacterInputInterface_ComboKeyAction, Key) == 0x000000, "Member 'CharacterInputInterface_ComboKeyAction::Key' has a wrong offset!");
static_assert(offsetof(CharacterInputInterface_ComboKeyAction, ReturnValue) == 0x000001, "Member 'CharacterInputInterface_ComboKeyAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInputInterface.FilterFaceButtonInputs
// 0x0002 (0x0002 - 0x0000)
struct CharacterInputInterface_FilterFaceButtonInputs final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInputInterface_FilterFaceButtonInputs) == 0x000001, "Wrong alignment on CharacterInputInterface_FilterFaceButtonInputs");
static_assert(sizeof(CharacterInputInterface_FilterFaceButtonInputs) == 0x000002, "Wrong size on CharacterInputInterface_FilterFaceButtonInputs");
static_assert(offsetof(CharacterInputInterface_FilterFaceButtonInputs, Key) == 0x000000, "Member 'CharacterInputInterface_FilterFaceButtonInputs::Key' has a wrong offset!");
static_assert(offsetof(CharacterInputInterface_FilterFaceButtonInputs, ReturnValue) == 0x000001, "Member 'CharacterInputInterface_FilterFaceButtonInputs::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInputInterface.Move
// 0x000C (0x000C - 0x0000)
struct CharacterInputInterface_Move final
{
public:
	struct FVector                                Input;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInputInterface_Move) == 0x000004, "Wrong alignment on CharacterInputInterface_Move");
static_assert(sizeof(CharacterInputInterface_Move) == 0x00000C, "Wrong size on CharacterInputInterface_Move");
static_assert(offsetof(CharacterInputInterface_Move, Input) == 0x000000, "Member 'CharacterInputInterface_Move::Input' has a wrong offset!");

// Function DarwinGame.CharacterInputInterface.Rotate
// 0x000C (0x000C - 0x0000)
struct CharacterInputInterface_Rotate final
{
public:
	struct FVector                                Input;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInputInterface_Rotate) == 0x000004, "Wrong alignment on CharacterInputInterface_Rotate");
static_assert(sizeof(CharacterInputInterface_Rotate) == 0x00000C, "Wrong size on CharacterInputInterface_Rotate");
static_assert(offsetof(CharacterInputInterface_Rotate, Input) == 0x000000, "Member 'CharacterInputInterface_Rotate::Input' has a wrong offset!");

// Function DarwinGame.CharacterInputInterface.TakeAction
// 0x000C (0x000C - 0x0000)
struct CharacterInputInterface_TakeAction final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelease;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInputInterface_TakeAction) == 0x000004, "Wrong alignment on CharacterInputInterface_TakeAction");
static_assert(sizeof(CharacterInputInterface_TakeAction) == 0x00000C, "Wrong size on CharacterInputInterface_TakeAction");
static_assert(offsetof(CharacterInputInterface_TakeAction, Tag) == 0x000000, "Member 'CharacterInputInterface_TakeAction::Tag' has a wrong offset!");
static_assert(offsetof(CharacterInputInterface_TakeAction, bRelease) == 0x000008, "Member 'CharacterInputInterface_TakeAction::bRelease' has a wrong offset!");

// Function DarwinGame.CharacterInterface.Aim
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_Aim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_Aim) == 0x000001, "Wrong alignment on CharacterInterface_Aim");
static_assert(sizeof(CharacterInterface_Aim) == 0x000001, "Wrong size on CharacterInterface_Aim");
static_assert(offsetof(CharacterInterface_Aim, End) == 0x000000, "Member 'CharacterInterface_Aim::End' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ApplyAttribute
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_ApplyAttribute final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLevel;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ApplyAttribute) == 0x000004, "Wrong alignment on CharacterInterface_ApplyAttribute");
static_assert(sizeof(CharacterInterface_ApplyAttribute) == 0x00000C, "Wrong size on CharacterInterface_ApplyAttribute");
static_assert(offsetof(CharacterInterface_ApplyAttribute, AttributeID) == 0x000000, "Member 'CharacterInterface_ApplyAttribute::AttributeID' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyAttribute, AddLevel) == 0x000008, "Member 'CharacterInterface_ApplyAttribute::AddLevel' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ApplyAttributeGameplayEffect
// 0x0014 (0x0014 - 0x0000)
struct CharacterInterface_ApplyAttributeGameplayEffect final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ApplyAttributeGameplayEffect) == 0x000004, "Wrong alignment on CharacterInterface_ApplyAttributeGameplayEffect");
static_assert(sizeof(CharacterInterface_ApplyAttributeGameplayEffect) == 0x000014, "Wrong size on CharacterInterface_ApplyAttributeGameplayEffect");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffect, AttributeID) == 0x000000, "Member 'CharacterInterface_ApplyAttributeGameplayEffect::AttributeID' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffect, Level) == 0x000008, "Member 'CharacterInterface_ApplyAttributeGameplayEffect::Level' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffect, ReturnValue) == 0x00000C, "Member 'CharacterInterface_ApplyAttributeGameplayEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ApplyAttributeGameplayEffectWithLotteryData
// 0x0038 (0x0038 - 0x0000)
struct CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData final
{
public:
	class AGPACharacter*                          Sorce;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeID;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLotteryAttributeParam                 Lottery;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData) == 0x000008, "Wrong alignment on CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData");
static_assert(sizeof(CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData) == 0x000038, "Wrong size on CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData, Sorce) == 0x000000, "Member 'CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData::Sorce' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData, AttributeID) == 0x000008, "Member 'CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData::AttributeID' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData, Level) == 0x000010, "Member 'CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData::Level' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData, Lottery) == 0x000018, "Member 'CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData::Lottery' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData, ReturnValue) == 0x000030, "Member 'CharacterInterface_ApplyAttributeGameplayEffectWithLotteryData::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ApplyDeathGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct CharacterInterface_ApplyDeathGameplayEffect final
{
public:
	struct FDeadCause                             Cause;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ApplyDeathGameplayEffect) == 0x000004, "Wrong alignment on CharacterInterface_ApplyDeathGameplayEffect");
static_assert(sizeof(CharacterInterface_ApplyDeathGameplayEffect) == 0x000010, "Wrong size on CharacterInterface_ApplyDeathGameplayEffect");
static_assert(offsetof(CharacterInterface_ApplyDeathGameplayEffect, Cause) == 0x000000, "Member 'CharacterInterface_ApplyDeathGameplayEffect::Cause' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ApplyDeathGameplayEffect, ReturnValue) == 0x000008, "Member 'CharacterInterface_ApplyDeathGameplayEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.CancelAbility
// 0x0020 (0x0020 - 0x0000)
struct CharacterInterface_CancelAbility final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_CancelAbility) == 0x000008, "Wrong alignment on CharacterInterface_CancelAbility");
static_assert(sizeof(CharacterInterface_CancelAbility) == 0x000020, "Wrong size on CharacterInterface_CancelAbility");
static_assert(offsetof(CharacterInterface_CancelAbility, Tags) == 0x000000, "Member 'CharacterInterface_CancelAbility::Tags' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ChangeAbnormalState
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_ChangeAbnormalState final
{
public:
	struct FGameplayTag                           NextAbnormalStateTag;                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_ChangeAbnormalState) == 0x000004, "Wrong alignment on CharacterInterface_ChangeAbnormalState");
static_assert(sizeof(CharacterInterface_ChangeAbnormalState) == 0x00000C, "Wrong size on CharacterInterface_ChangeAbnormalState");
static_assert(offsetof(CharacterInterface_ChangeAbnormalState, NextAbnormalStateTag) == 0x000000, "Member 'CharacterInterface_ChangeAbnormalState::NextAbnormalStateTag' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ChangeAbnormalState, End) == 0x000008, "Member 'CharacterInterface_ChangeAbnormalState::End' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ChangeActionState
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_ChangeActionState final
{
public:
	struct FGameplayTag                           NextActionStateTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ChangeActionState) == 0x000004, "Wrong alignment on CharacterInterface_ChangeActionState");
static_assert(sizeof(CharacterInterface_ChangeActionState) == 0x000008, "Wrong size on CharacterInterface_ChangeActionState");
static_assert(offsetof(CharacterInterface_ChangeActionState, NextActionStateTag) == 0x000000, "Member 'CharacterInterface_ChangeActionState::NextActionStateTag' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ChangeActionStateWithResult
// 0x0038 (0x0038 - 0x0000)
struct CharacterInterface_ChangeActionStateWithResult final
{
public:
	struct FGameplayTag                           NextActionStateTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionResult                          ActionResult;                                      // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ChangeActionStateWithResult) == 0x000004, "Wrong alignment on CharacterInterface_ChangeActionStateWithResult");
static_assert(sizeof(CharacterInterface_ChangeActionStateWithResult) == 0x000038, "Wrong size on CharacterInterface_ChangeActionStateWithResult");
static_assert(offsetof(CharacterInterface_ChangeActionStateWithResult, NextActionStateTag) == 0x000000, "Member 'CharacterInterface_ChangeActionStateWithResult::NextActionStateTag' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ChangeActionStateWithResult, ActionResult) == 0x000008, "Member 'CharacterInterface_ChangeActionStateWithResult::ActionResult' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ChangeMoveState
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_ChangeMoveState final
{
public:
	struct FGameplayTag                           NextMoveStateTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ChangeMoveState) == 0x000004, "Wrong alignment on CharacterInterface_ChangeMoveState");
static_assert(sizeof(CharacterInterface_ChangeMoveState) == 0x000008, "Wrong size on CharacterInterface_ChangeMoveState");
static_assert(offsetof(CharacterInterface_ChangeMoveState, NextMoveStateTag) == 0x000000, "Member 'CharacterInterface_ChangeMoveState::NextMoveStateTag' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ChangeOpeMode
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_ChangeOpeMode final
{
public:
	EOperationModeEnum                            Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ChangeOpeMode) == 0x000001, "Wrong alignment on CharacterInterface_ChangeOpeMode");
static_assert(sizeof(CharacterInterface_ChangeOpeMode) == 0x000001, "Wrong size on CharacterInterface_ChangeOpeMode");
static_assert(offsetof(CharacterInterface_ChangeOpeMode, Mode) == 0x000000, "Member 'CharacterInterface_ChangeOpeMode::Mode' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ChangeStatus
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_ChangeStatus final
{
public:
	int32                                         BitMask;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_ChangeStatus) == 0x000004, "Wrong alignment on CharacterInterface_ChangeStatus");
static_assert(sizeof(CharacterInterface_ChangeStatus) == 0x000008, "Wrong size on CharacterInterface_ChangeStatus");
static_assert(offsetof(CharacterInterface_ChangeStatus, BitMask) == 0x000000, "Member 'CharacterInterface_ChangeStatus::BitMask' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ChangeStatus, End) == 0x000004, "Member 'CharacterInterface_ChangeStatus::End' has a wrong offset!");

// Function DarwinGame.CharacterInterface.CloseLinkMenu
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_CloseLinkMenu final
{
public:
	ELinkType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_CloseLinkMenu) == 0x000001, "Wrong alignment on CharacterInterface_CloseLinkMenu");
static_assert(sizeof(CharacterInterface_CloseLinkMenu) == 0x000001, "Wrong size on CharacterInterface_CloseLinkMenu");
static_assert(offsetof(CharacterInterface_CloseLinkMenu, Type) == 0x000000, "Member 'CharacterInterface_CloseLinkMenu::Type' has a wrong offset!");

// Function DarwinGame.CharacterInterface.DebugMoveMode
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_DebugMoveMode final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_DebugMoveMode) == 0x000001, "Wrong alignment on CharacterInterface_DebugMoveMode");
static_assert(sizeof(CharacterInterface_DebugMoveMode) == 0x000001, "Wrong size on CharacterInterface_DebugMoveMode");
static_assert(offsetof(CharacterInterface_DebugMoveMode, on) == 0x000000, "Member 'CharacterInterface_DebugMoveMode::on' has a wrong offset!");

// Function DarwinGame.CharacterInterface.DetachEffect
// 0x0010 (0x0010 - 0x0000)
struct CharacterInterface_DetachEffect final
{
public:
	class FString                                 HandleID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_DetachEffect) == 0x000008, "Wrong alignment on CharacterInterface_DetachEffect");
static_assert(sizeof(CharacterInterface_DetachEffect) == 0x000010, "Wrong size on CharacterInterface_DetachEffect");
static_assert(offsetof(CharacterInterface_DetachEffect, HandleID) == 0x000000, "Member 'CharacterInterface_DetachEffect::HandleID' has a wrong offset!");

// Function DarwinGame.CharacterInterface.EndLink
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_EndLink final
{
public:
	bool                                          bCanceled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_EndLink) == 0x000001, "Wrong alignment on CharacterInterface_EndLink");
static_assert(sizeof(CharacterInterface_EndLink) == 0x000001, "Wrong size on CharacterInterface_EndLink");
static_assert(offsetof(CharacterInterface_EndLink, bCanceled) == 0x000000, "Member 'CharacterInterface_EndLink::bCanceled' has a wrong offset!");

// Function DarwinGame.CharacterInterface.Equip
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_Equip final
{
public:
	class FName                                   equipmentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       SocketName;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_Equip) == 0x000004, "Wrong alignment on CharacterInterface_Equip");
static_assert(sizeof(CharacterInterface_Equip) == 0x00000C, "Wrong size on CharacterInterface_Equip");
static_assert(offsetof(CharacterInterface_Equip, equipmentName) == 0x000000, "Member 'CharacterInterface_Equip::equipmentName' has a wrong offset!");
static_assert(offsetof(CharacterInterface_Equip, SocketName) == 0x000008, "Member 'CharacterInterface_Equip::SocketName' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ExecuteAbility
// 0x0028 (0x0028 - 0x0000)
struct CharacterInterface_ExecuteAbility final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_ExecuteAbility) == 0x000008, "Wrong alignment on CharacterInterface_ExecuteAbility");
static_assert(sizeof(CharacterInterface_ExecuteAbility) == 0x000028, "Wrong size on CharacterInterface_ExecuteAbility");
static_assert(offsetof(CharacterInterface_ExecuteAbility, Tags) == 0x000000, "Member 'CharacterInterface_ExecuteAbility::Tags' has a wrong offset!");
static_assert(offsetof(CharacterInterface_ExecuteAbility, ReturnValue) == 0x000020, "Member 'CharacterInterface_ExecuteAbility::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ExecuteLinkAction
// 0x0004 (0x0004 - 0x0000)
struct CharacterInterface_ExecuteLinkAction final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ExecuteLinkAction) == 0x000004, "Wrong alignment on CharacterInterface_ExecuteLinkAction");
static_assert(sizeof(CharacterInterface_ExecuteLinkAction) == 0x000004, "Wrong size on CharacterInterface_ExecuteLinkAction");
static_assert(offsetof(CharacterInterface_ExecuteLinkAction, Index_0) == 0x000000, "Member 'CharacterInterface_ExecuteLinkAction::Index_0' has a wrong offset!");

// Function DarwinGame.CharacterInterface.FastTravel
// 0x0004 (0x0004 - 0x0000)
struct CharacterInterface_FastTravel final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_FastTravel) == 0x000004, "Wrong alignment on CharacterInterface_FastTravel");
static_assert(sizeof(CharacterInterface_FastTravel) == 0x000004, "Wrong size on CharacterInterface_FastTravel");
static_assert(offsetof(CharacterInterface_FastTravel, ID) == 0x000000, "Member 'CharacterInterface_FastTravel::ID' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetNickName
// 0x0018 (0x0018 - 0x0000)
struct CharacterInterface_GetNickName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetNickName) == 0x000008, "Wrong alignment on CharacterInterface_GetNickName");
static_assert(sizeof(CharacterInterface_GetNickName) == 0x000018, "Wrong size on CharacterInterface_GetNickName");
static_assert(offsetof(CharacterInterface_GetNickName, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetNickName::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetOriginID
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetOriginID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetOriginID) == 0x000004, "Wrong alignment on CharacterInterface_GetOriginID");
static_assert(sizeof(CharacterInterface_GetOriginID) == 0x000008, "Wrong size on CharacterInterface_GetOriginID");
static_assert(offsetof(CharacterInterface_GetOriginID, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetOriginID::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetOwningTags
// 0x0020 (0x0020 - 0x0000)
struct CharacterInterface_GetOwningTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetOwningTags) == 0x000008, "Wrong alignment on CharacterInterface_GetOwningTags");
static_assert(sizeof(CharacterInterface_GetOwningTags) == 0x000020, "Wrong size on CharacterInterface_GetOwningTags");
static_assert(offsetof(CharacterInterface_GetOwningTags, Tags) == 0x000000, "Member 'CharacterInterface_GetOwningTags::Tags' has a wrong offset!");

// Function DarwinGame.CharacterInterface.HasAttribute
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_HasAttribute final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_HasAttribute) == 0x000004, "Wrong alignment on CharacterInterface_HasAttribute");
static_assert(sizeof(CharacterInterface_HasAttribute) == 0x00000C, "Wrong size on CharacterInterface_HasAttribute");
static_assert(offsetof(CharacterInterface_HasAttribute, AttributeID) == 0x000000, "Member 'CharacterInterface_HasAttribute::AttributeID' has a wrong offset!");
static_assert(offsetof(CharacterInterface_HasAttribute, ReturnValue) == 0x000008, "Member 'CharacterInterface_HasAttribute::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.HasTag
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_HasTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_HasTag) == 0x000004, "Wrong alignment on CharacterInterface_HasTag");
static_assert(sizeof(CharacterInterface_HasTag) == 0x00000C, "Wrong size on CharacterInterface_HasTag");
static_assert(offsetof(CharacterInterface_HasTag, Tag) == 0x000000, "Member 'CharacterInterface_HasTag::Tag' has a wrong offset!");
static_assert(offsetof(CharacterInterface_HasTag, ReturnValue) == 0x000008, "Member 'CharacterInterface_HasTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.HoldWeapon
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_HoldWeapon final
{
public:
	class FName                                   equipmentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_HoldWeapon) == 0x000004, "Wrong alignment on CharacterInterface_HoldWeapon");
static_assert(sizeof(CharacterInterface_HoldWeapon) == 0x00000C, "Wrong size on CharacterInterface_HoldWeapon");
static_assert(offsetof(CharacterInterface_HoldWeapon, equipmentName) == 0x000000, "Member 'CharacterInterface_HoldWeapon::equipmentName' has a wrong offset!");
static_assert(offsetof(CharacterInterface_HoldWeapon, End) == 0x000008, "Member 'CharacterInterface_HoldWeapon::End' has a wrong offset!");

// Function DarwinGame.CharacterInterface.IsAbilityRunning
// 0x0028 (0x0028 - 0x0000)
struct CharacterInterface_IsAbilityRunning final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_IsAbilityRunning) == 0x000008, "Wrong alignment on CharacterInterface_IsAbilityRunning");
static_assert(sizeof(CharacterInterface_IsAbilityRunning) == 0x000028, "Wrong size on CharacterInterface_IsAbilityRunning");
static_assert(offsetof(CharacterInterface_IsAbilityRunning, Tags) == 0x000000, "Member 'CharacterInterface_IsAbilityRunning::Tags' has a wrong offset!");
static_assert(offsetof(CharacterInterface_IsAbilityRunning, ReturnValue) == 0x000020, "Member 'CharacterInterface_IsAbilityRunning::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.IsLinkMenuOpened
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_IsLinkMenuOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_IsLinkMenuOpened) == 0x000001, "Wrong alignment on CharacterInterface_IsLinkMenuOpened");
static_assert(sizeof(CharacterInterface_IsLinkMenuOpened) == 0x000001, "Wrong size on CharacterInterface_IsLinkMenuOpened");
static_assert(offsetof(CharacterInterface_IsLinkMenuOpened, ReturnValue) == 0x000000, "Member 'CharacterInterface_IsLinkMenuOpened::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.Launch
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_Launch final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_Launch) == 0x000004, "Wrong alignment on CharacterInterface_Launch");
static_assert(sizeof(CharacterInterface_Launch) == 0x00000C, "Wrong size on CharacterInterface_Launch");
static_assert(offsetof(CharacterInterface_Launch, Velocity) == 0x000000, "Member 'CharacterInterface_Launch::Velocity' has a wrong offset!");

// Function DarwinGame.CharacterInterface.OpenLinkMenu
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_OpenLinkMenu final
{
public:
	ELinkType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_OpenLinkMenu) == 0x000001, "Wrong alignment on CharacterInterface_OpenLinkMenu");
static_assert(sizeof(CharacterInterface_OpenLinkMenu) == 0x000001, "Wrong size on CharacterInterface_OpenLinkMenu");
static_assert(offsetof(CharacterInterface_OpenLinkMenu, Type) == 0x000000, "Member 'CharacterInterface_OpenLinkMenu::Type' has a wrong offset!");

// Function DarwinGame.CharacterInterface.PlayParticle
// 0x0030 (0x0030 - 0x0000)
struct CharacterInterface_PlayParticle final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socke;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttached;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HandleID;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_PlayParticle) == 0x000008, "Wrong alignment on CharacterInterface_PlayParticle");
static_assert(sizeof(CharacterInterface_PlayParticle) == 0x000030, "Wrong size on CharacterInterface_PlayParticle");
static_assert(offsetof(CharacterInterface_PlayParticle, EffectId) == 0x000000, "Member 'CharacterInterface_PlayParticle::EffectId' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayParticle, Socke) == 0x000008, "Member 'CharacterInterface_PlayParticle::Socke' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayParticle, IsAttached) == 0x000010, "Member 'CharacterInterface_PlayParticle::IsAttached' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayParticle, HandleID) == 0x000018, "Member 'CharacterInterface_PlayParticle::HandleID' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayParticle, ReturnValue) == 0x000028, "Member 'CharacterInterface_PlayParticle::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.PlayTrail
// 0x0038 (0x0038 - 0x0000)
struct CharacterInterface_PlayTrail final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstSocket;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocket;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               ScaleMode;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HandleID;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_PlayTrail) == 0x000008, "Wrong alignment on CharacterInterface_PlayTrail");
static_assert(sizeof(CharacterInterface_PlayTrail) == 0x000038, "Wrong size on CharacterInterface_PlayTrail");
static_assert(offsetof(CharacterInterface_PlayTrail, EffectId) == 0x000000, "Member 'CharacterInterface_PlayTrail::EffectId' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayTrail, FirstSocket) == 0x000008, "Member 'CharacterInterface_PlayTrail::FirstSocket' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayTrail, SecondSocket) == 0x000010, "Member 'CharacterInterface_PlayTrail::SecondSocket' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayTrail, ScaleMode) == 0x000018, "Member 'CharacterInterface_PlayTrail::ScaleMode' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayTrail, HandleID) == 0x000020, "Member 'CharacterInterface_PlayTrail::HandleID' has a wrong offset!");
static_assert(offsetof(CharacterInterface_PlayTrail, ReturnValue) == 0x000030, "Member 'CharacterInterface_PlayTrail::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ReadyToShot
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_ReadyToShot final
{
public:
	bool                                          Complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ReadyToShot) == 0x000001, "Wrong alignment on CharacterInterface_ReadyToShot");
static_assert(sizeof(CharacterInterface_ReadyToShot) == 0x000001, "Wrong size on CharacterInterface_ReadyToShot");
static_assert(offsetof(CharacterInterface_ReadyToShot, Complete) == 0x000000, "Member 'CharacterInterface_ReadyToShot::Complete' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ReleaseAttribute
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_ReleaseAttribute final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ReleaseAttribute) == 0x000004, "Wrong alignment on CharacterInterface_ReleaseAttribute");
static_assert(sizeof(CharacterInterface_ReleaseAttribute) == 0x000008, "Wrong size on CharacterInterface_ReleaseAttribute");
static_assert(offsetof(CharacterInterface_ReleaseAttribute, AttributeID) == 0x000000, "Member 'CharacterInterface_ReleaseAttribute::AttributeID' has a wrong offset!");

// Function DarwinGame.CharacterInterface.ResetRotation
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_ResetRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_ResetRotation) == 0x000004, "Wrong alignment on CharacterInterface_ResetRotation");
static_assert(sizeof(CharacterInterface_ResetRotation) == 0x00000C, "Wrong size on CharacterInterface_ResetRotation");
static_assert(offsetof(CharacterInterface_ResetRotation, NewRotation) == 0x000000, "Member 'CharacterInterface_ResetRotation::NewRotation' has a wrong offset!");

// Function DarwinGame.CharacterInterface.SetPauseAllAttribute
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_SetPauseAllAttribute final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_SetPauseAllAttribute) == 0x000001, "Wrong alignment on CharacterInterface_SetPauseAllAttribute");
static_assert(sizeof(CharacterInterface_SetPauseAllAttribute) == 0x000001, "Wrong size on CharacterInterface_SetPauseAllAttribute");
static_assert(offsetof(CharacterInterface_SetPauseAllAttribute, Pause) == 0x000000, "Member 'CharacterInterface_SetPauseAllAttribute::Pause' has a wrong offset!");

// Function DarwinGame.CharacterInterface.SetReadyWeapon
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_SetReadyWeapon final
{
public:
	class FName                                   equipmentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ready;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_SetReadyWeapon) == 0x000004, "Wrong alignment on CharacterInterface_SetReadyWeapon");
static_assert(sizeof(CharacterInterface_SetReadyWeapon) == 0x00000C, "Wrong size on CharacterInterface_SetReadyWeapon");
static_assert(offsetof(CharacterInterface_SetReadyWeapon, equipmentName) == 0x000000, "Member 'CharacterInterface_SetReadyWeapon::equipmentName' has a wrong offset!");
static_assert(offsetof(CharacterInterface_SetReadyWeapon, Ready) == 0x000008, "Member 'CharacterInterface_SetReadyWeapon::Ready' has a wrong offset!");

// Function DarwinGame.CharacterInterface.SwitchToBattleMode
// 0x0002 (0x0002 - 0x0000)
struct CharacterInterface_SwitchToBattleMode final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipMotion;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_SwitchToBattleMode) == 0x000001, "Wrong alignment on CharacterInterface_SwitchToBattleMode");
static_assert(sizeof(CharacterInterface_SwitchToBattleMode) == 0x000002, "Wrong size on CharacterInterface_SwitchToBattleMode");
static_assert(offsetof(CharacterInterface_SwitchToBattleMode, IsEnd) == 0x000000, "Member 'CharacterInterface_SwitchToBattleMode::IsEnd' has a wrong offset!");
static_assert(offsetof(CharacterInterface_SwitchToBattleMode, SkipMotion) == 0x000001, "Member 'CharacterInterface_SwitchToBattleMode::SkipMotion' has a wrong offset!");

// Function DarwinGame.CharacterInterface.SwitchToCutSceneMode
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_SwitchToCutSceneMode final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_SwitchToCutSceneMode) == 0x000001, "Wrong alignment on CharacterInterface_SwitchToCutSceneMode");
static_assert(sizeof(CharacterInterface_SwitchToCutSceneMode) == 0x000001, "Wrong size on CharacterInterface_SwitchToCutSceneMode");
static_assert(offsetof(CharacterInterface_SwitchToCutSceneMode, IsEnd) == 0x000000, "Member 'CharacterInterface_SwitchToCutSceneMode::IsEnd' has a wrong offset!");

// Function DarwinGame.CharacterInterface.Talk
// 0x0010 (0x0010 - 0x0000)
struct CharacterInterface_Talk final
{
public:
	class AActor*                                 Partner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCameraEnabled;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnd;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_Talk) == 0x000008, "Wrong alignment on CharacterInterface_Talk");
static_assert(sizeof(CharacterInterface_Talk) == 0x000010, "Wrong size on CharacterInterface_Talk");
static_assert(offsetof(CharacterInterface_Talk, Partner) == 0x000000, "Member 'CharacterInterface_Talk::Partner' has a wrong offset!");
static_assert(offsetof(CharacterInterface_Talk, IsCameraEnabled) == 0x000008, "Member 'CharacterInterface_Talk::IsCameraEnabled' has a wrong offset!");
static_assert(offsetof(CharacterInterface_Talk, IsEnd) == 0x000009, "Member 'CharacterInterface_Talk::IsEnd' has a wrong offset!");

// Function DarwinGame.CharacterInterface.CanChangeToSpecifiedState
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_CanChangeToSpecifiedState final
{
public:
	struct FGameplayTag                           NextMoveStateTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInterface_CanChangeToSpecifiedState) == 0x000004, "Wrong alignment on CharacterInterface_CanChangeToSpecifiedState");
static_assert(sizeof(CharacterInterface_CanChangeToSpecifiedState) == 0x00000C, "Wrong size on CharacterInterface_CanChangeToSpecifiedState");
static_assert(offsetof(CharacterInterface_CanChangeToSpecifiedState, NextMoveStateTag) == 0x000000, "Member 'CharacterInterface_CanChangeToSpecifiedState::NextMoveStateTag' has a wrong offset!");
static_assert(offsetof(CharacterInterface_CanChangeToSpecifiedState, ReturnValue) == 0x000008, "Member 'CharacterInterface_CanChangeToSpecifiedState::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetAnimInstance) == 0x000008, "Wrong alignment on CharacterInterface_GetAnimInstance");
static_assert(sizeof(CharacterInterface_GetAnimInstance) == 0x000008, "Wrong size on CharacterInterface_GetAnimInstance");
static_assert(offsetof(CharacterInterface_GetAnimInstance, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetControlRot
// 0x000C (0x000C - 0x0000)
struct CharacterInterface_GetControlRot final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetControlRot) == 0x000004, "Wrong alignment on CharacterInterface_GetControlRot");
static_assert(sizeof(CharacterInterface_GetControlRot) == 0x00000C, "Wrong size on CharacterInterface_GetControlRot");
static_assert(offsetof(CharacterInterface_GetControlRot, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetControlRot::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetCurrentActionStateTag
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetCurrentActionStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetCurrentActionStateTag) == 0x000004, "Wrong alignment on CharacterInterface_GetCurrentActionStateTag");
static_assert(sizeof(CharacterInterface_GetCurrentActionStateTag) == 0x000008, "Wrong size on CharacterInterface_GetCurrentActionStateTag");
static_assert(offsetof(CharacterInterface_GetCurrentActionStateTag, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetCurrentActionStateTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetCurrentMoveStateTag
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetCurrentMoveStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetCurrentMoveStateTag) == 0x000004, "Wrong alignment on CharacterInterface_GetCurrentMoveStateTag");
static_assert(sizeof(CharacterInterface_GetCurrentMoveStateTag) == 0x000008, "Wrong size on CharacterInterface_GetCurrentMoveStateTag");
static_assert(offsetof(CharacterInterface_GetCurrentMoveStateTag, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetCurrentMoveStateTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetCurrentStateTag
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetCurrentStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetCurrentStateTag) == 0x000004, "Wrong alignment on CharacterInterface_GetCurrentStateTag");
static_assert(sizeof(CharacterInterface_GetCurrentStateTag) == 0x000008, "Wrong size on CharacterInterface_GetCurrentStateTag");
static_assert(offsetof(CharacterInterface_GetCurrentStateTag, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetCurrentStateTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetEquipment
// 0x0010 (0x0010 - 0x0000)
struct CharacterInterface_GetEquipment final
{
public:
	class FName                                   equipmentName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetEquipment) == 0x000008, "Wrong alignment on CharacterInterface_GetEquipment");
static_assert(sizeof(CharacterInterface_GetEquipment) == 0x000010, "Wrong size on CharacterInterface_GetEquipment");
static_assert(offsetof(CharacterInterface_GetEquipment, equipmentName) == 0x000000, "Member 'CharacterInterface_GetEquipment::equipmentName' has a wrong offset!");
static_assert(offsetof(CharacterInterface_GetEquipment, ReturnValue) == 0x000008, "Member 'CharacterInterface_GetEquipment::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetEquipments
// 0x0010 (0x0010 - 0x0000)
struct CharacterInterface_GetEquipments final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetEquipments) == 0x000008, "Wrong alignment on CharacterInterface_GetEquipments");
static_assert(sizeof(CharacterInterface_GetEquipments) == 0x000010, "Wrong size on CharacterInterface_GetEquipments");
static_assert(offsetof(CharacterInterface_GetEquipments, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetEquipments::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetLinkType
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_GetLinkType final
{
public:
	ELinkType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetLinkType) == 0x000001, "Wrong alignment on CharacterInterface_GetLinkType");
static_assert(sizeof(CharacterInterface_GetLinkType) == 0x000001, "Wrong size on CharacterInterface_GetLinkType");
static_assert(offsetof(CharacterInterface_GetLinkType, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetLinkType::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetPrevStateTag
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetPrevStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetPrevStateTag) == 0x000004, "Wrong alignment on CharacterInterface_GetPrevStateTag");
static_assert(sizeof(CharacterInterface_GetPrevStateTag) == 0x000008, "Wrong size on CharacterInterface_GetPrevStateTag");
static_assert(offsetof(CharacterInterface_GetPrevStateTag, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetPrevStateTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetReadyWeapon
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetReadyWeapon final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetReadyWeapon) == 0x000008, "Wrong alignment on CharacterInterface_GetReadyWeapon");
static_assert(sizeof(CharacterInterface_GetReadyWeapon) == 0x000008, "Wrong size on CharacterInterface_GetReadyWeapon");
static_assert(offsetof(CharacterInterface_GetReadyWeapon, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetReadyWeapon::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetTarget
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetTarget) == 0x000008, "Wrong alignment on CharacterInterface_GetTarget");
static_assert(sizeof(CharacterInterface_GetTarget) == 0x000008, "Wrong size on CharacterInterface_GetTarget");
static_assert(offsetof(CharacterInterface_GetTarget, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.GetTargetToInteract
// 0x0008 (0x0008 - 0x0000)
struct CharacterInterface_GetTargetToInteract final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_GetTargetToInteract) == 0x000008, "Wrong alignment on CharacterInterface_GetTargetToInteract");
static_assert(sizeof(CharacterInterface_GetTargetToInteract) == 0x000008, "Wrong size on CharacterInterface_GetTargetToInteract");
static_assert(offsetof(CharacterInterface_GetTargetToInteract, ReturnValue) == 0x000000, "Member 'CharacterInterface_GetTargetToInteract::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_IsAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_IsAiming) == 0x000001, "Wrong alignment on CharacterInterface_IsAiming");
static_assert(sizeof(CharacterInterface_IsAiming) == 0x000001, "Wrong size on CharacterInterface_IsAiming");
static_assert(offsetof(CharacterInterface_IsAiming, ReturnValue) == 0x000000, "Member 'CharacterInterface_IsAiming::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterInterface.IsReadyToShot
// 0x0001 (0x0001 - 0x0000)
struct CharacterInterface_IsReadyToShot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInterface_IsReadyToShot) == 0x000001, "Wrong alignment on CharacterInterface_IsReadyToShot");
static_assert(sizeof(CharacterInterface_IsReadyToShot) == 0x000001, "Wrong size on CharacterInterface_IsReadyToShot");
static_assert(offsetof(CharacterInterface_IsReadyToShot, ReturnValue) == 0x000000, "Member 'CharacterInterface_IsReadyToShot::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterMovementFunctionLibrary.DrawActor
// 0x0020 (0x0020 - 0x0000)
struct CharacterMovementFunctionLibrary_DrawActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DrawPoint;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterMovementFunctionLibrary_DrawActor) == 0x000008, "Wrong alignment on CharacterMovementFunctionLibrary_DrawActor");
static_assert(sizeof(CharacterMovementFunctionLibrary_DrawActor) == 0x000020, "Wrong size on CharacterMovementFunctionLibrary_DrawActor");
static_assert(offsetof(CharacterMovementFunctionLibrary_DrawActor, Actor) == 0x000000, "Member 'CharacterMovementFunctionLibrary_DrawActor::Actor' has a wrong offset!");
static_assert(offsetof(CharacterMovementFunctionLibrary_DrawActor, DrawPoint) == 0x000008, "Member 'CharacterMovementFunctionLibrary_DrawActor::DrawPoint' has a wrong offset!");
static_assert(offsetof(CharacterMovementFunctionLibrary_DrawActor, Scale) == 0x000014, "Member 'CharacterMovementFunctionLibrary_DrawActor::Scale' has a wrong offset!");
static_assert(offsetof(CharacterMovementFunctionLibrary_DrawActor, DeltaTime) == 0x000018, "Member 'CharacterMovementFunctionLibrary_DrawActor::DeltaTime' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.ChangeOperationMode
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_ChangeOperationMode final
{
public:
	EOperationModeEnum                            Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_ChangeOperationMode) == 0x000001, "Wrong alignment on CharacterMovementInterface_ChangeOperationMode");
static_assert(sizeof(CharacterMovementInterface_ChangeOperationMode) == 0x000001, "Wrong size on CharacterMovementInterface_ChangeOperationMode");
static_assert(offsetof(CharacterMovementInterface_ChangeOperationMode, Mode) == 0x000000, "Member 'CharacterMovementInterface_ChangeOperationMode::Mode' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.GetFallingAltitude
// 0x0004 (0x0004 - 0x0000)
struct CharacterMovementInterface_GetFallingAltitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_GetFallingAltitude) == 0x000004, "Wrong alignment on CharacterMovementInterface_GetFallingAltitude");
static_assert(sizeof(CharacterMovementInterface_GetFallingAltitude) == 0x000004, "Wrong size on CharacterMovementInterface_GetFallingAltitude");
static_assert(offsetof(CharacterMovementInterface_GetFallingAltitude, ReturnValue) == 0x000000, "Member 'CharacterMovementInterface_GetFallingAltitude::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnAim
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnAim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnAim) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnAim");
static_assert(sizeof(CharacterMovementInterface_OnAim) == 0x000001, "Wrong size on CharacterMovementInterface_OnAim");
static_assert(offsetof(CharacterMovementInterface_OnAim, End) == 0x000000, "Member 'CharacterMovementInterface_OnAim::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnBattle
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnBattle final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnBattle) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnBattle");
static_assert(sizeof(CharacterMovementInterface_OnBattle) == 0x000001, "Wrong size on CharacterMovementInterface_OnBattle");
static_assert(offsetof(CharacterMovementInterface_OnBattle, End) == 0x000000, "Member 'CharacterMovementInterface_OnBattle::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnClimb
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnClimb final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnClimb) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnClimb");
static_assert(sizeof(CharacterMovementInterface_OnClimb) == 0x000001, "Wrong size on CharacterMovementInterface_OnClimb");
static_assert(offsetof(CharacterMovementInterface_OnClimb, End) == 0x000000, "Member 'CharacterMovementInterface_OnClimb::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnClimbMove
// 0x0008 (0x0008 - 0x0000)
struct CharacterMovementInterface_OnClimbMove final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnClimbMove) == 0x000004, "Wrong alignment on CharacterMovementInterface_OnClimbMove");
static_assert(sizeof(CharacterMovementInterface_OnClimbMove) == 0x000008, "Wrong size on CharacterMovementInterface_OnClimbMove");
static_assert(offsetof(CharacterMovementInterface_OnClimbMove, Time) == 0x000000, "Member 'CharacterMovementInterface_OnClimbMove::Time' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterface_OnClimbMove, Alpha) == 0x000004, "Member 'CharacterMovementInterface_OnClimbMove::Alpha' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnCrouch
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnCrouch final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnCrouch) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnCrouch");
static_assert(sizeof(CharacterMovementInterface_OnCrouch) == 0x000001, "Wrong size on CharacterMovementInterface_OnCrouch");
static_assert(offsetof(CharacterMovementInterface_OnCrouch, End) == 0x000000, "Member 'CharacterMovementInterface_OnCrouch::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnDead
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnDead final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnDead) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnDead");
static_assert(sizeof(CharacterMovementInterface_OnDead) == 0x000001, "Wrong size on CharacterMovementInterface_OnDead");
static_assert(offsetof(CharacterMovementInterface_OnDead, End) == 0x000000, "Member 'CharacterMovementInterface_OnDead::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnHop
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnHop final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnHop) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnHop");
static_assert(sizeof(CharacterMovementInterface_OnHop) == 0x000001, "Wrong size on CharacterMovementInterface_OnHop");
static_assert(offsetof(CharacterMovementInterface_OnHop, End) == 0x000000, "Member 'CharacterMovementInterface_OnHop::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnHopMove
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnHopMove final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnHopMove) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnHopMove");
static_assert(sizeof(CharacterMovementInterface_OnHopMove) == 0x000001, "Wrong size on CharacterMovementInterface_OnHopMove");
static_assert(offsetof(CharacterMovementInterface_OnHopMove, End) == 0x000000, "Member 'CharacterMovementInterface_OnHopMove::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnLock
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnLock final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnLock) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnLock");
static_assert(sizeof(CharacterMovementInterface_OnLock) == 0x000001, "Wrong size on CharacterMovementInterface_OnLock");
static_assert(offsetof(CharacterMovementInterface_OnLock, End) == 0x000000, "Member 'CharacterMovementInterface_OnLock::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnMove
// 0x000C (0x000C - 0x0000)
struct CharacterMovementInterface_OnMove final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnMove) == 0x000004, "Wrong alignment on CharacterMovementInterface_OnMove");
static_assert(sizeof(CharacterMovementInterface_OnMove) == 0x00000C, "Wrong size on CharacterMovementInterface_OnMove");
static_assert(offsetof(CharacterMovementInterface_OnMove, Axis) == 0x000000, "Member 'CharacterMovementInterface_OnMove::Axis' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterface_OnMove, Direction) == 0x000004, "Member 'CharacterMovementInterface_OnMove::Direction' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterface_OnMove, PlayRate) == 0x000008, "Member 'CharacterMovementInterface_OnMove::PlayRate' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnRide
// 0x0010 (0x0010 - 0x0000)
struct CharacterMovementInterface_OnRide final
{
public:
	class UAnimSequence*                          RideAnim;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterMovementInterface_OnRide) == 0x000008, "Wrong alignment on CharacterMovementInterface_OnRide");
static_assert(sizeof(CharacterMovementInterface_OnRide) == 0x000010, "Wrong size on CharacterMovementInterface_OnRide");
static_assert(offsetof(CharacterMovementInterface_OnRide, RideAnim) == 0x000000, "Member 'CharacterMovementInterface_OnRide::RideAnim' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterface_OnRide, End) == 0x000008, "Member 'CharacterMovementInterface_OnRide::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnSlope
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnSlope final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnSlope) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnSlope");
static_assert(sizeof(CharacterMovementInterface_OnSlope) == 0x000001, "Wrong size on CharacterMovementInterface_OnSlope");
static_assert(offsetof(CharacterMovementInterface_OnSlope, End) == 0x000000, "Member 'CharacterMovementInterface_OnSlope::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnStealCharge
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnStealCharge final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnStealCharge) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnStealCharge");
static_assert(sizeof(CharacterMovementInterface_OnStealCharge) == 0x000001, "Wrong size on CharacterMovementInterface_OnStealCharge");
static_assert(offsetof(CharacterMovementInterface_OnStealCharge, End) == 0x000000, "Member 'CharacterMovementInterface_OnStealCharge::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnStealMove
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnStealMove final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnStealMove) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnStealMove");
static_assert(sizeof(CharacterMovementInterface_OnStealMove) == 0x000001, "Wrong size on CharacterMovementInterface_OnStealMove");
static_assert(offsetof(CharacterMovementInterface_OnStealMove, End) == 0x000000, "Member 'CharacterMovementInterface_OnStealMove::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnSwim
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnSwim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnSwim) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnSwim");
static_assert(sizeof(CharacterMovementInterface_OnSwim) == 0x000001, "Wrong size on CharacterMovementInterface_OnSwim");
static_assert(offsetof(CharacterMovementInterface_OnSwim, End) == 0x000000, "Member 'CharacterMovementInterface_OnSwim::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.OnTalk
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterface_OnTalk final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_OnTalk) == 0x000001, "Wrong alignment on CharacterMovementInterface_OnTalk");
static_assert(sizeof(CharacterMovementInterface_OnTalk) == 0x000001, "Wrong size on CharacterMovementInterface_OnTalk");
static_assert(offsetof(CharacterMovementInterface_OnTalk, End) == 0x000000, "Member 'CharacterMovementInterface_OnTalk::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterface.GetAltitudeThreshold
// 0x0008 (0x0008 - 0x0000)
struct CharacterMovementInterface_GetAltitudeThreshold final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterface_GetAltitudeThreshold) == 0x000004, "Wrong alignment on CharacterMovementInterface_GetAltitudeThreshold");
static_assert(sizeof(CharacterMovementInterface_GetAltitudeThreshold) == 0x000008, "Wrong size on CharacterMovementInterface_GetAltitudeThreshold");
static_assert(offsetof(CharacterMovementInterface_GetAltitudeThreshold, ReturnValue) == 0x000000, "Member 'CharacterMovementInterface_GetAltitudeThreshold::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Aim
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_Aim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Aim) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_Aim");
static_assert(sizeof(CharacterMovementInterfaceForABP_Aim) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_Aim");
static_assert(offsetof(CharacterMovementInterfaceForABP_Aim, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Aim::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.BattleMode
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_BattleMode final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_BattleMode) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_BattleMode");
static_assert(sizeof(CharacterMovementInterfaceForABP_BattleMode) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_BattleMode");
static_assert(offsetof(CharacterMovementInterfaceForABP_BattleMode, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_BattleMode::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Climb
// 0x00C0 (0x00C0 - 0x0000)
struct CharacterMovementInterfaceForABP_Climb final
{
public:
	struct FTransform                             LHand;                                             // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             RHand;                                             // 0x0030(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             LFoot;                                             // 0x0060(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             RFoot;                                             // 0x0090(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Climb) == 0x000010, "Wrong alignment on CharacterMovementInterfaceForABP_Climb");
static_assert(sizeof(CharacterMovementInterfaceForABP_Climb) == 0x0000C0, "Wrong size on CharacterMovementInterfaceForABP_Climb");
static_assert(offsetof(CharacterMovementInterfaceForABP_Climb, LHand) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Climb::LHand' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Climb, RHand) == 0x000030, "Member 'CharacterMovementInterfaceForABP_Climb::RHand' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Climb, LFoot) == 0x000060, "Member 'CharacterMovementInterfaceForABP_Climb::LFoot' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Climb, RFoot) == 0x000090, "Member 'CharacterMovementInterfaceForABP_Climb::RFoot' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Dead
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_Dead final
{
public:
	bool                                          FaceUp;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Dead) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_Dead");
static_assert(sizeof(CharacterMovementInterfaceForABP_Dead) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_Dead");
static_assert(offsetof(CharacterMovementInterfaceForABP_Dead, FaceUp) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Dead::FaceUp' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Dive
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_Dive final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Dive) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_Dive");
static_assert(sizeof(CharacterMovementInterfaceForABP_Dive) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_Dive");
static_assert(offsetof(CharacterMovementInterfaceForABP_Dive, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Dive::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Equip
// 0x0002 (0x0002 - 0x0000)
struct CharacterMovementInterfaceForABP_Equip final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayMotion;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Equip) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_Equip");
static_assert(sizeof(CharacterMovementInterfaceForABP_Equip) == 0x000002, "Wrong size on CharacterMovementInterfaceForABP_Equip");
static_assert(offsetof(CharacterMovementInterfaceForABP_Equip, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Equip::End' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Equip, PlayMotion) == 0x000001, "Member 'CharacterMovementInterfaceForABP_Equip::PlayMotion' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.EquipSlingShot
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_EquipSlingShot final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_EquipSlingShot) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_EquipSlingShot");
static_assert(sizeof(CharacterMovementInterfaceForABP_EquipSlingShot) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_EquipSlingShot");
static_assert(offsetof(CharacterMovementInterfaceForABP_EquipSlingShot, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_EquipSlingShot::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.FieldLinkMode
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_FieldLinkMode final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_FieldLinkMode) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_FieldLinkMode");
static_assert(sizeof(CharacterMovementInterfaceForABP_FieldLinkMode) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_FieldLinkMode");
static_assert(offsetof(CharacterMovementInterfaceForABP_FieldLinkMode, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_FieldLinkMode::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.IsDiving
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_IsDiving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_IsDiving) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_IsDiving");
static_assert(sizeof(CharacterMovementInterfaceForABP_IsDiving) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_IsDiving");
static_assert(offsetof(CharacterMovementInterfaceForABP_IsDiving, ReturnValue) == 0x000000, "Member 'CharacterMovementInterfaceForABP_IsDiving::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Jump
// 0x0004 (0x0004 - 0x0000)
struct CharacterMovementInterfaceForABP_Jump final
{
public:
	float                                         Foot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Jump) == 0x000004, "Wrong alignment on CharacterMovementInterfaceForABP_Jump");
static_assert(sizeof(CharacterMovementInterfaceForABP_Jump) == 0x000004, "Wrong size on CharacterMovementInterfaceForABP_Jump");
static_assert(offsetof(CharacterMovementInterfaceForABP_Jump, Foot) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Jump::Foot' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Land
// 0x0010 (0x0010 - 0x0000)
struct CharacterMovementInterfaceForABP_Land final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamaged;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterMovementInterfaceForABP_Land) == 0x000004, "Wrong alignment on CharacterMovementInterfaceForABP_Land");
static_assert(sizeof(CharacterMovementInterfaceForABP_Land) == 0x000010, "Wrong size on CharacterMovementInterfaceForABP_Land");
static_assert(offsetof(CharacterMovementInterfaceForABP_Land, Speed) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Land::Speed' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Land, Direction) == 0x000004, "Member 'CharacterMovementInterfaceForABP_Land::Direction' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Land, PlayRate) == 0x000008, "Member 'CharacterMovementInterfaceForABP_Land::PlayRate' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Land, bDamaged) == 0x00000C, "Member 'CharacterMovementInterfaceForABP_Land::bDamaged' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Look
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_Look final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Look) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_Look");
static_assert(sizeof(CharacterMovementInterfaceForABP_Look) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_Look");
static_assert(offsetof(CharacterMovementInterfaceForABP_Look, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Look::End' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Move
// 0x000C (0x000C - 0x0000)
struct CharacterMovementInterfaceForABP_Move final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Move) == 0x000004, "Wrong alignment on CharacterMovementInterfaceForABP_Move");
static_assert(sizeof(CharacterMovementInterfaceForABP_Move) == 0x00000C, "Wrong size on CharacterMovementInterfaceForABP_Move");
static_assert(offsetof(CharacterMovementInterfaceForABP_Move, Axis) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Move::Axis' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Move, Direction) == 0x000004, "Member 'CharacterMovementInterfaceForABP_Move::Direction' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_Move, PlayRate) == 0x000008, "Member 'CharacterMovementInterfaceForABP_Move::PlayRate' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.SetExcursion
// 0x0008 (0x0008 - 0x0000)
struct CharacterMovementInterfaceForABP_SetExcursion final
{
public:
	float                                         Hip;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Neck;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_SetExcursion) == 0x000004, "Wrong alignment on CharacterMovementInterfaceForABP_SetExcursion");
static_assert(sizeof(CharacterMovementInterfaceForABP_SetExcursion) == 0x000008, "Wrong size on CharacterMovementInterfaceForABP_SetExcursion");
static_assert(offsetof(CharacterMovementInterfaceForABP_SetExcursion, Hip) == 0x000000, "Member 'CharacterMovementInterfaceForABP_SetExcursion::Hip' has a wrong offset!");
static_assert(offsetof(CharacterMovementInterfaceForABP_SetExcursion, Neck) == 0x000004, "Member 'CharacterMovementInterfaceForABP_SetExcursion::Neck' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.StartParkour
// 0x0004 (0x0004 - 0x0000)
struct CharacterMovementInterfaceForABP_StartParkour final
{
public:
	float                                         Foot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_StartParkour) == 0x000004, "Wrong alignment on CharacterMovementInterfaceForABP_StartParkour");
static_assert(sizeof(CharacterMovementInterfaceForABP_StartParkour) == 0x000004, "Wrong size on CharacterMovementInterfaceForABP_StartParkour");
static_assert(offsetof(CharacterMovementInterfaceForABP_StartParkour, Foot) == 0x000000, "Member 'CharacterMovementInterfaceForABP_StartParkour::Foot' has a wrong offset!");

// Function DarwinGame.CharacterMovementInterfaceForABP.Swim
// 0x0001 (0x0001 - 0x0000)
struct CharacterMovementInterfaceForABP_Swim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMovementInterfaceForABP_Swim) == 0x000001, "Wrong alignment on CharacterMovementInterfaceForABP_Swim");
static_assert(sizeof(CharacterMovementInterfaceForABP_Swim) == 0x000001, "Wrong size on CharacterMovementInterfaceForABP_Swim");
static_assert(offsetof(CharacterMovementInterfaceForABP_Swim, End) == 0x000000, "Member 'CharacterMovementInterfaceForABP_Swim::End' has a wrong offset!");

// Function DarwinGame.NoEntryAreaBase.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct NoEntryAreaBase_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoEntryAreaBase_OnBeginOverlap) == 0x000008, "Wrong alignment on NoEntryAreaBase_OnBeginOverlap");
static_assert(sizeof(NoEntryAreaBase_OnBeginOverlap) == 0x0000A8, "Wrong size on NoEntryAreaBase_OnBeginOverlap");
static_assert(offsetof(NoEntryAreaBase_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'NoEntryAreaBase_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnBeginOverlap, OtherActor) == 0x000008, "Member 'NoEntryAreaBase_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnBeginOverlap, OtherComp) == 0x000010, "Member 'NoEntryAreaBase_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'NoEntryAreaBase_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'NoEntryAreaBase_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnBeginOverlap, SweepResult) == 0x000020, "Member 'NoEntryAreaBase_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.NoEntryAreaBase.OnCheckLanding
// 0x0008 (0x0008 - 0x0000)
struct NoEntryAreaBase_OnCheckLanding final
{
public:
	class AActor*                                 PlayerActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoEntryAreaBase_OnCheckLanding) == 0x000008, "Wrong alignment on NoEntryAreaBase_OnCheckLanding");
static_assert(sizeof(NoEntryAreaBase_OnCheckLanding) == 0x000008, "Wrong size on NoEntryAreaBase_OnCheckLanding");
static_assert(offsetof(NoEntryAreaBase_OnCheckLanding, PlayerActor) == 0x000000, "Member 'NoEntryAreaBase_OnCheckLanding::PlayerActor' has a wrong offset!");

// Function DarwinGame.NoEntryAreaBase.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct NoEntryAreaBase_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NoEntryAreaBase_OnEndOverlap) == 0x000008, "Wrong alignment on NoEntryAreaBase_OnEndOverlap");
static_assert(sizeof(NoEntryAreaBase_OnEndOverlap) == 0x000020, "Wrong size on NoEntryAreaBase_OnEndOverlap");
static_assert(offsetof(NoEntryAreaBase_OnEndOverlap, OverlappedComp) == 0x000000, "Member 'NoEntryAreaBase_OnEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnEndOverlap, OtherActor) == 0x000008, "Member 'NoEntryAreaBase_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnEndOverlap, OtherComp) == 0x000010, "Member 'NoEntryAreaBase_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NoEntryAreaBase_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'NoEntryAreaBase_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.TreasureBoxBase.EffectiveRangeCheck
// 0x0010 (0x0010 - 0x0000)
struct TreasureBoxBase_EffectiveRangeCheck final
{
public:
	class APlayerCameraManager*                   cameraManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorSizeLength;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TreasureBoxBase_EffectiveRangeCheck) == 0x000008, "Wrong alignment on TreasureBoxBase_EffectiveRangeCheck");
static_assert(sizeof(TreasureBoxBase_EffectiveRangeCheck) == 0x000010, "Wrong size on TreasureBoxBase_EffectiveRangeCheck");
static_assert(offsetof(TreasureBoxBase_EffectiveRangeCheck, cameraManager) == 0x000000, "Member 'TreasureBoxBase_EffectiveRangeCheck::cameraManager' has a wrong offset!");
static_assert(offsetof(TreasureBoxBase_EffectiveRangeCheck, ActorSizeLength) == 0x000008, "Member 'TreasureBoxBase_EffectiveRangeCheck::ActorSizeLength' has a wrong offset!");

// Function DarwinGame.TreasureBoxBase.GetRootBoxMesh
// 0x0008 (0x0008 - 0x0000)
struct TreasureBoxBase_GetRootBoxMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TreasureBoxBase_GetRootBoxMesh) == 0x000008, "Wrong alignment on TreasureBoxBase_GetRootBoxMesh");
static_assert(sizeof(TreasureBoxBase_GetRootBoxMesh) == 0x000008, "Wrong size on TreasureBoxBase_GetRootBoxMesh");
static_assert(offsetof(TreasureBoxBase_GetRootBoxMesh, ReturnValue) == 0x000000, "Member 'TreasureBoxBase_GetRootBoxMesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.Aim
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_Aim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_Aim) == 0x000001, "Wrong alignment on DarwinAnimInstance_Aim");
static_assert(sizeof(DarwinAnimInstance_Aim) == 0x000001, "Wrong size on DarwinAnimInstance_Aim");
static_assert(offsetof(DarwinAnimInstance_Aim, End) == 0x000000, "Member 'DarwinAnimInstance_Aim::End' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.ChangeAnimState
// 0x0008 (0x0008 - 0x0000)
struct DarwinAnimInstance_ChangeAnimState final
{
public:
	struct FGameplayTag                           State;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_ChangeAnimState) == 0x000004, "Wrong alignment on DarwinAnimInstance_ChangeAnimState");
static_assert(sizeof(DarwinAnimInstance_ChangeAnimState) == 0x000008, "Wrong size on DarwinAnimInstance_ChangeAnimState");
static_assert(offsetof(DarwinAnimInstance_ChangeAnimState, State) == 0x000000, "Member 'DarwinAnimInstance_ChangeAnimState::State' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.ChangeState
// 0x000C (0x000C - 0x0000)
struct DarwinAnimInstance_ChangeState final
{
public:
	struct FGameplayTag                           State;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinAnimInstance_ChangeState) == 0x000004, "Wrong alignment on DarwinAnimInstance_ChangeState");
static_assert(sizeof(DarwinAnimInstance_ChangeState) == 0x00000C, "Wrong size on DarwinAnimInstance_ChangeState");
static_assert(offsetof(DarwinAnimInstance_ChangeState, State) == 0x000000, "Member 'DarwinAnimInstance_ChangeState::State' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_ChangeState, End) == 0x000008, "Member 'DarwinAnimInstance_ChangeState::End' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.Dive
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_Dive final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_Dive) == 0x000001, "Wrong alignment on DarwinAnimInstance_Dive");
static_assert(sizeof(DarwinAnimInstance_Dive) == 0x000001, "Wrong size on DarwinAnimInstance_Dive");
static_assert(offsetof(DarwinAnimInstance_Dive, End) == 0x000000, "Member 'DarwinAnimInstance_Dive::End' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetEcologicalState
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_GetEcologicalState final
{
public:
	EEcologicalState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetEcologicalState) == 0x000001, "Wrong alignment on DarwinAnimInstance_GetEcologicalState");
static_assert(sizeof(DarwinAnimInstance_GetEcologicalState) == 0x000001, "Wrong size on DarwinAnimInstance_GetEcologicalState");
static_assert(offsetof(DarwinAnimInstance_GetEcologicalState, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_GetEcologicalState::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.HasTag
// 0x000C (0x000C - 0x0000)
struct DarwinAnimInstance_HasTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinAnimInstance_HasTag) == 0x000004, "Wrong alignment on DarwinAnimInstance_HasTag");
static_assert(sizeof(DarwinAnimInstance_HasTag) == 0x00000C, "Wrong size on DarwinAnimInstance_HasTag");
static_assert(offsetof(DarwinAnimInstance_HasTag, Tag) == 0x000000, "Member 'DarwinAnimInstance_HasTag::Tag' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_HasTag, ReturnValue) == 0x000008, "Member 'DarwinAnimInstance_HasTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsEcoSleepGetup
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsEcoSleepGetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsEcoSleepGetup) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsEcoSleepGetup");
static_assert(sizeof(DarwinAnimInstance_IsEcoSleepGetup) == 0x000001, "Wrong size on DarwinAnimInstance_IsEcoSleepGetup");
static_assert(offsetof(DarwinAnimInstance_IsEcoSleepGetup, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsEcoSleepGetup::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.Move
// 0x000C (0x000C - 0x0000)
struct DarwinAnimInstance_Move final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_Move) == 0x000004, "Wrong alignment on DarwinAnimInstance_Move");
static_assert(sizeof(DarwinAnimInstance_Move) == 0x00000C, "Wrong size on DarwinAnimInstance_Move");
static_assert(offsetof(DarwinAnimInstance_Move, Axis) == 0x000000, "Member 'DarwinAnimInstance_Move::Axis' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_Move, Direction) == 0x000004, "Member 'DarwinAnimInstance_Move::Direction' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_Move, PlayRate) == 0x000008, "Member 'DarwinAnimInstance_Move::PlayRate' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.NotifyEmoteBodyEnd
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_NotifyEmoteBodyEnd final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_NotifyEmoteBodyEnd) == 0x000001, "Wrong alignment on DarwinAnimInstance_NotifyEmoteBodyEnd");
static_assert(sizeof(DarwinAnimInstance_NotifyEmoteBodyEnd) == 0x000001, "Wrong size on DarwinAnimInstance_NotifyEmoteBodyEnd");
static_assert(offsetof(DarwinAnimInstance_NotifyEmoteBodyEnd, Group) == 0x000000, "Member 'DarwinAnimInstance_NotifyEmoteBodyEnd::Group' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.OnMontageStart
// 0x0008 (0x0008 - 0x0000)
struct DarwinAnimInstance_OnMontageStart final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_OnMontageStart) == 0x000008, "Wrong alignment on DarwinAnimInstance_OnMontageStart");
static_assert(sizeof(DarwinAnimInstance_OnMontageStart) == 0x000008, "Wrong size on DarwinAnimInstance_OnMontageStart");
static_assert(offsetof(DarwinAnimInstance_OnMontageStart, Montage) == 0x000000, "Member 'DarwinAnimInstance_OnMontageStart::Montage' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.SetLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_SetLookAtEnable final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_SetLookAtEnable) == 0x000001, "Wrong alignment on DarwinAnimInstance_SetLookAtEnable");
static_assert(sizeof(DarwinAnimInstance_SetLookAtEnable) == 0x000001, "Wrong size on DarwinAnimInstance_SetLookAtEnable");
static_assert(offsetof(DarwinAnimInstance_SetLookAtEnable, enable) == 0x000000, "Member 'DarwinAnimInstance_SetLookAtEnable::enable' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.SetLookAtTarget
// 0x000C (0x000C - 0x0000)
struct DarwinAnimInstance_SetLookAtTarget final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_SetLookAtTarget) == 0x000004, "Wrong alignment on DarwinAnimInstance_SetLookAtTarget");
static_assert(sizeof(DarwinAnimInstance_SetLookAtTarget) == 0x00000C, "Wrong size on DarwinAnimInstance_SetLookAtTarget");
static_assert(offsetof(DarwinAnimInstance_SetLookAtTarget, TargetLocation) == 0x000000, "Member 'DarwinAnimInstance_SetLookAtTarget::TargetLocation' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.SetupEcologicalGestureAnimation
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_SetupEcologicalGestureAnimation final
{
public:
	EEcoGestureAnimDataID                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_SetupEcologicalGestureAnimation) == 0x000001, "Wrong alignment on DarwinAnimInstance_SetupEcologicalGestureAnimation");
static_assert(sizeof(DarwinAnimInstance_SetupEcologicalGestureAnimation) == 0x000001, "Wrong size on DarwinAnimInstance_SetupEcologicalGestureAnimation");
static_assert(offsetof(DarwinAnimInstance_SetupEcologicalGestureAnimation, ID) == 0x000000, "Member 'DarwinAnimInstance_SetupEcologicalGestureAnimation::ID' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetBodyEmoteSetting
// 0x0014 (0x0014 - 0x0000)
struct DarwinAnimInstance_GetBodyEmoteSetting final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteBodyMotionSetting                ReturnValue;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetBodyEmoteSetting) == 0x000004, "Wrong alignment on DarwinAnimInstance_GetBodyEmoteSetting");
static_assert(sizeof(DarwinAnimInstance_GetBodyEmoteSetting) == 0x000014, "Wrong size on DarwinAnimInstance_GetBodyEmoteSetting");
static_assert(offsetof(DarwinAnimInstance_GetBodyEmoteSetting, Group) == 0x000000, "Member 'DarwinAnimInstance_GetBodyEmoteSetting::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_GetBodyEmoteSetting, ReturnValue) == 0x000004, "Member 'DarwinAnimInstance_GetBodyEmoteSetting::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetEmoteBodyInfo
// 0x0040 (0x0040 - 0x0000)
struct DarwinAnimInstance_GetEmoteBodyInfo final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteBodyMotionInfo                   ReturnValue;                                       // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetEmoteBodyInfo) == 0x000008, "Wrong alignment on DarwinAnimInstance_GetEmoteBodyInfo");
static_assert(sizeof(DarwinAnimInstance_GetEmoteBodyInfo) == 0x000040, "Wrong size on DarwinAnimInstance_GetEmoteBodyInfo");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyInfo, Group) == 0x000000, "Member 'DarwinAnimInstance_GetEmoteBodyInfo::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyInfo, ReturnValue) == 0x000008, "Member 'DarwinAnimInstance_GetEmoteBodyInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetEmoteBodyPhaseAnim
// 0x0010 (0x0010 - 0x0000)
struct DarwinAnimInstance_GetEmoteBodyPhaseAnim final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteBodyMotionPhase                         phase;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetEmoteBodyPhaseAnim) == 0x000008, "Wrong alignment on DarwinAnimInstance_GetEmoteBodyPhaseAnim");
static_assert(sizeof(DarwinAnimInstance_GetEmoteBodyPhaseAnim) == 0x000010, "Wrong size on DarwinAnimInstance_GetEmoteBodyPhaseAnim");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyPhaseAnim, Group) == 0x000000, "Member 'DarwinAnimInstance_GetEmoteBodyPhaseAnim::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyPhaseAnim, phase) == 0x000001, "Member 'DarwinAnimInstance_GetEmoteBodyPhaseAnim::phase' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyPhaseAnim, ReturnValue) == 0x000008, "Member 'DarwinAnimInstance_GetEmoteBodyPhaseAnim::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetEmoteBodyPhaseAnimFromMotionRequest
// 0x0040 (0x0040 - 0x0000)
struct DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest final
{
public:
	struct FEmoteBodyMotionRequest                Request;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EEmoteBodyMotionPhase                         phase;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest) == 0x000008, "Wrong alignment on DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest");
static_assert(sizeof(DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest) == 0x000040, "Wrong size on DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest, Request) == 0x000000, "Member 'DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest::Request' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest, phase) == 0x000030, "Member 'DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest::phase' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest, ReturnValue) == 0x000038, "Member 'DarwinAnimInstance_GetEmoteBodyPhaseAnimFromMotionRequest::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetLookAtParamHead
// 0x0018 (0x0018 - 0x0000)
struct DarwinAnimInstance_GetLookAtParamHead final
{
public:
	struct FST_LookAtParams                       ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetLookAtParamHead) == 0x000004, "Wrong alignment on DarwinAnimInstance_GetLookAtParamHead");
static_assert(sizeof(DarwinAnimInstance_GetLookAtParamHead) == 0x000018, "Wrong size on DarwinAnimInstance_GetLookAtParamHead");
static_assert(offsetof(DarwinAnimInstance_GetLookAtParamHead, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_GetLookAtParamHead::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetLookAtParamSpine
// 0x0018 (0x0018 - 0x0000)
struct DarwinAnimInstance_GetLookAtParamSpine final
{
public:
	struct FST_LookAtParams                       ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetLookAtParamSpine) == 0x000004, "Wrong alignment on DarwinAnimInstance_GetLookAtParamSpine");
static_assert(sizeof(DarwinAnimInstance_GetLookAtParamSpine) == 0x000018, "Wrong size on DarwinAnimInstance_GetLookAtParamSpine");
static_assert(offsetof(DarwinAnimInstance_GetLookAtParamSpine, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_GetLookAtParamSpine::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.GetRootMode
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_GetRootMode final
{
public:
	ERootMotionMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_GetRootMode) == 0x000001, "Wrong alignment on DarwinAnimInstance_GetRootMode");
static_assert(sizeof(DarwinAnimInstance_GetRootMode) == 0x000001, "Wrong size on DarwinAnimInstance_GetRootMode");
static_assert(offsetof(DarwinAnimInstance_GetRootMode, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_GetRootMode::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.HasAbnormalAnimationTag
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_HasAbnormalAnimationTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_HasAbnormalAnimationTag) == 0x000001, "Wrong alignment on DarwinAnimInstance_HasAbnormalAnimationTag");
static_assert(sizeof(DarwinAnimInstance_HasAbnormalAnimationTag) == 0x000001, "Wrong size on DarwinAnimInstance_HasAbnormalAnimationTag");
static_assert(offsetof(DarwinAnimInstance_HasAbnormalAnimationTag, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_HasAbnormalAnimationTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.HasEndTrigger
// 0x0002 (0x0002 - 0x0000)
struct DarwinAnimInstance_HasEndTrigger final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_HasEndTrigger) == 0x000001, "Wrong alignment on DarwinAnimInstance_HasEndTrigger");
static_assert(sizeof(DarwinAnimInstance_HasEndTrigger) == 0x000002, "Wrong size on DarwinAnimInstance_HasEndTrigger");
static_assert(offsetof(DarwinAnimInstance_HasEndTrigger, Group) == 0x000000, "Member 'DarwinAnimInstance_HasEndTrigger::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_HasEndTrigger, ReturnValue) == 0x000001, "Member 'DarwinAnimInstance_HasEndTrigger::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsAbnormal
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsAbnormal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsAbnormal) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsAbnormal");
static_assert(sizeof(DarwinAnimInstance_IsAbnormal) == 0x000001, "Wrong size on DarwinAnimInstance_IsAbnormal");
static_assert(offsetof(DarwinAnimInstance_IsAbnormal, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsAbnormal::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsBeginBodyEmotePhase
// 0x0003 (0x0003 - 0x0000)
struct DarwinAnimInstance_IsBeginBodyEmotePhase final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteBodyMotionPhase                         phase;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsBeginBodyEmotePhase) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsBeginBodyEmotePhase");
static_assert(sizeof(DarwinAnimInstance_IsBeginBodyEmotePhase) == 0x000003, "Wrong size on DarwinAnimInstance_IsBeginBodyEmotePhase");
static_assert(offsetof(DarwinAnimInstance_IsBeginBodyEmotePhase, Group) == 0x000000, "Member 'DarwinAnimInstance_IsBeginBodyEmotePhase::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsBeginBodyEmotePhase, phase) == 0x000001, "Member 'DarwinAnimInstance_IsBeginBodyEmotePhase::phase' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsBeginBodyEmotePhase, ReturnValue) == 0x000002, "Member 'DarwinAnimInstance_IsBeginBodyEmotePhase::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsDead
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsDead) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsDead");
static_assert(sizeof(DarwinAnimInstance_IsDead) == 0x000001, "Wrong size on DarwinAnimInstance_IsDead");
static_assert(offsetof(DarwinAnimInstance_IsDead, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsDead::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsEcoSleep
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsEcoSleep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsEcoSleep) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsEcoSleep");
static_assert(sizeof(DarwinAnimInstance_IsEcoSleep) == 0x000001, "Wrong size on DarwinAnimInstance_IsEcoSleep");
static_assert(offsetof(DarwinAnimInstance_IsEcoSleep, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsEcoSleep::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsEquipping
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsEquipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsEquipping) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsEquipping");
static_assert(sizeof(DarwinAnimInstance_IsEquipping) == 0x000001, "Wrong size on DarwinAnimInstance_IsEquipping");
static_assert(offsetof(DarwinAnimInstance_IsEquipping, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsEquipping::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsParalysis
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsParalysis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsParalysis) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsParalysis");
static_assert(sizeof(DarwinAnimInstance_IsParalysis) == 0x000001, "Wrong size on DarwinAnimInstance_IsParalysis");
static_assert(offsetof(DarwinAnimInstance_IsParalysis, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsParalysis::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsPlayEmoteBody_Inner
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsPlayEmoteBody_Inner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsPlayEmoteBody_Inner) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsPlayEmoteBody_Inner");
static_assert(sizeof(DarwinAnimInstance_IsPlayEmoteBody_Inner) == 0x000001, "Wrong size on DarwinAnimInstance_IsPlayEmoteBody_Inner");
static_assert(offsetof(DarwinAnimInstance_IsPlayEmoteBody_Inner, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsPlayEmoteBody_Inner::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsSleep
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsSleep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsSleep) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsSleep");
static_assert(sizeof(DarwinAnimInstance_IsSleep) == 0x000001, "Wrong size on DarwinAnimInstance_IsSleep");
static_assert(offsetof(DarwinAnimInstance_IsSleep, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsSleep::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsStun
// 0x0001 (0x0001 - 0x0000)
struct DarwinAnimInstance_IsStun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsStun) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsStun");
static_assert(sizeof(DarwinAnimInstance_IsStun) == 0x000001, "Wrong size on DarwinAnimInstance_IsStun");
static_assert(offsetof(DarwinAnimInstance_IsStun, ReturnValue) == 0x000000, "Member 'DarwinAnimInstance_IsStun::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsTriggerEmoteBodyEndToIdle
// 0x0010 (0x0010 - 0x0000)
struct DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         boarder;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle) == 0x000004, "Wrong alignment on DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle");
static_assert(sizeof(DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle) == 0x000010, "Wrong size on DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle, Group) == 0x000000, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle, RemainingTime) == 0x000004, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle::RemainingTime' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle, boarder) == 0x000008, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle::boarder' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle, ReturnValue) == 0x00000C, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyEndToIdle::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsTriggerEmoteBodyLoopToEnd
// 0x0002 (0x0002 - 0x0000)
struct DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd");
static_assert(sizeof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd) == 0x000002, "Wrong size on DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd, Group) == 0x000000, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd, ReturnValue) == 0x000001, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyLoopToEnd::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsTriggerEmoteBodyLoopToIdle
// 0x0002 (0x0002 - 0x0000)
struct DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle");
static_assert(sizeof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle) == 0x000002, "Wrong size on DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle, Group) == 0x000000, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle, ReturnValue) == 0x000001, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyLoopToIdle::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsTriggerEmoteBodyStartToIdle
// 0x0002 (0x0002 - 0x0000)
struct DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle");
static_assert(sizeof(DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle) == 0x000002, "Wrong size on DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle, Group) == 0x000000, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle, ReturnValue) == 0x000001, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyStartToIdle::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsTriggerEmoteBodyStartToLoop
// 0x0010 (0x0010 - 0x0000)
struct DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         boarder;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop) == 0x000004, "Wrong alignment on DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop");
static_assert(sizeof(DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop) == 0x000010, "Wrong size on DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop, Group) == 0x000000, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop, RemainingTime) == 0x000004, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop::RemainingTime' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop, boarder) == 0x000008, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop::boarder' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop, ReturnValue) == 0x00000C, "Member 'DarwinAnimInstance_IsTriggerEmoteBodyStartToLoop::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinAnimInstance.IsValidEmoteBodyAnim
// 0x0003 (0x0003 - 0x0000)
struct DarwinAnimInstance_IsValidEmoteBodyAnim final
{
public:
	EEmoteMotionSwitch                            Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteBodyMotionPhase                         phase;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinAnimInstance_IsValidEmoteBodyAnim) == 0x000001, "Wrong alignment on DarwinAnimInstance_IsValidEmoteBodyAnim");
static_assert(sizeof(DarwinAnimInstance_IsValidEmoteBodyAnim) == 0x000003, "Wrong size on DarwinAnimInstance_IsValidEmoteBodyAnim");
static_assert(offsetof(DarwinAnimInstance_IsValidEmoteBodyAnim, Group) == 0x000000, "Member 'DarwinAnimInstance_IsValidEmoteBodyAnim::Group' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsValidEmoteBodyAnim, phase) == 0x000001, "Member 'DarwinAnimInstance_IsValidEmoteBodyAnim::phase' has a wrong offset!");
static_assert(offsetof(DarwinAnimInstance_IsValidEmoteBodyAnim, ReturnValue) == 0x000002, "Member 'DarwinAnimInstance_IsValidEmoteBodyAnim::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCCSAnimInstance.SetLookAtActor
// 0x0008 (0x0008 - 0x0000)
struct NPCCSAnimInstance_SetLookAtActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCCSAnimInstance_SetLookAtActor) == 0x000008, "Wrong alignment on NPCCSAnimInstance_SetLookAtActor");
static_assert(sizeof(NPCCSAnimInstance_SetLookAtActor) == 0x000008, "Wrong size on NPCCSAnimInstance_SetLookAtActor");
static_assert(offsetof(NPCCSAnimInstance_SetLookAtActor, TargetActor) == 0x000000, "Member 'NPCCSAnimInstance_SetLookAtActor::TargetActor' has a wrong offset!");

// Function DarwinGame.NPCCSAnimInstance.SetTargetLook
// 0x0001 (0x0001 - 0x0000)
struct NPCCSAnimInstance_SetTargetLook final
{
public:
	bool                                          IsLookStart;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCCSAnimInstance_SetTargetLook) == 0x000001, "Wrong alignment on NPCCSAnimInstance_SetTargetLook");
static_assert(sizeof(NPCCSAnimInstance_SetTargetLook) == 0x000001, "Wrong size on NPCCSAnimInstance_SetTargetLook");
static_assert(offsetof(NPCCSAnimInstance_SetTargetLook, IsLookStart) == 0x000000, "Member 'NPCCSAnimInstance_SetTargetLook::IsLookStart' has a wrong offset!");

// Function DarwinGame.CharacterStateInterfaceForABP.ChangeAnimState
// 0x0008 (0x0008 - 0x0000)
struct CharacterStateInterfaceForABP_ChangeAnimState final
{
public:
	struct FGameplayTag                           State;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStateInterfaceForABP_ChangeAnimState) == 0x000004, "Wrong alignment on CharacterStateInterfaceForABP_ChangeAnimState");
static_assert(sizeof(CharacterStateInterfaceForABP_ChangeAnimState) == 0x000008, "Wrong size on CharacterStateInterfaceForABP_ChangeAnimState");
static_assert(offsetof(CharacterStateInterfaceForABP_ChangeAnimState, State) == 0x000000, "Member 'CharacterStateInterfaceForABP_ChangeAnimState::State' has a wrong offset!");

// Function DarwinGame.CharacterStateInterfaceForABP.ChangeState
// 0x000C (0x000C - 0x0000)
struct CharacterStateInterfaceForABP_ChangeState final
{
public:
	struct FGameplayTag                           State;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterStateInterfaceForABP_ChangeState) == 0x000004, "Wrong alignment on CharacterStateInterfaceForABP_ChangeState");
static_assert(sizeof(CharacterStateInterfaceForABP_ChangeState) == 0x00000C, "Wrong size on CharacterStateInterfaceForABP_ChangeState");
static_assert(offsetof(CharacterStateInterfaceForABP_ChangeState, State) == 0x000000, "Member 'CharacterStateInterfaceForABP_ChangeState::State' has a wrong offset!");
static_assert(offsetof(CharacterStateInterfaceForABP_ChangeState, End) == 0x000008, "Member 'CharacterStateInterfaceForABP_ChangeState::End' has a wrong offset!");

// Function DarwinGame.CharacterStateInterfaceForABP.HasTag
// 0x000C (0x000C - 0x0000)
struct CharacterStateInterfaceForABP_HasTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterStateInterfaceForABP_HasTag) == 0x000004, "Wrong alignment on CharacterStateInterfaceForABP_HasTag");
static_assert(sizeof(CharacterStateInterfaceForABP_HasTag) == 0x00000C, "Wrong size on CharacterStateInterfaceForABP_HasTag");
static_assert(offsetof(CharacterStateInterfaceForABP_HasTag, Tag) == 0x000000, "Member 'CharacterStateInterfaceForABP_HasTag::Tag' has a wrong offset!");
static_assert(offsetof(CharacterStateInterfaceForABP_HasTag, ReturnValue) == 0x000008, "Member 'CharacterStateInterfaceForABP_HasTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringInterface.AddSlaveDithering
// 0x0008 (0x0008 - 0x0000)
struct DitheringInterface_AddSlaveDithering final
{
public:
	class UDitheringComponent*                    slave;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringInterface_AddSlaveDithering) == 0x000008, "Wrong alignment on DitheringInterface_AddSlaveDithering");
static_assert(sizeof(DitheringInterface_AddSlaveDithering) == 0x000008, "Wrong size on DitheringInterface_AddSlaveDithering");
static_assert(offsetof(DitheringInterface_AddSlaveDithering, slave) == 0x000000, "Member 'DitheringInterface_AddSlaveDithering::slave' has a wrong offset!");

// Function DarwinGame.DitheringInterface.GetDithering
// 0x0008 (0x0008 - 0x0000)
struct DitheringInterface_GetDithering final
{
public:
	class UDitheringComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringInterface_GetDithering) == 0x000008, "Wrong alignment on DitheringInterface_GetDithering");
static_assert(sizeof(DitheringInterface_GetDithering) == 0x000008, "Wrong size on DitheringInterface_GetDithering");
static_assert(offsetof(DitheringInterface_GetDithering, ReturnValue) == 0x000000, "Member 'DitheringInterface_GetDithering::ReturnValue' has a wrong offset!");

// Function DarwinGame.DitheringInterface.ReleaseSlaveDithering
// 0x0008 (0x0008 - 0x0000)
struct DitheringInterface_ReleaseSlaveDithering final
{
public:
	class UDitheringComponent*                    slave;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DitheringInterface_ReleaseSlaveDithering) == 0x000008, "Wrong alignment on DitheringInterface_ReleaseSlaveDithering");
static_assert(sizeof(DitheringInterface_ReleaseSlaveDithering) == 0x000008, "Wrong size on DitheringInterface_ReleaseSlaveDithering");
static_assert(offsetof(DitheringInterface_ReleaseSlaveDithering, slave) == 0x000000, "Member 'DitheringInterface_ReleaseSlaveDithering::slave' has a wrong offset!");

// Function DarwinGame.CharacterSystemLibrary.GetStandActorLocation
// 0x0018 (0x0018 - 0x0000)
struct CharacterSystemLibrary_GetStandActorLocation final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandLocation;                                     // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSystemLibrary_GetStandActorLocation) == 0x000008, "Wrong alignment on CharacterSystemLibrary_GetStandActorLocation");
static_assert(sizeof(CharacterSystemLibrary_GetStandActorLocation) == 0x000018, "Wrong size on CharacterSystemLibrary_GetStandActorLocation");
static_assert(offsetof(CharacterSystemLibrary_GetStandActorLocation, Target) == 0x000000, "Member 'CharacterSystemLibrary_GetStandActorLocation::Target' has a wrong offset!");
static_assert(offsetof(CharacterSystemLibrary_GetStandActorLocation, StandLocation) == 0x000008, "Member 'CharacterSystemLibrary_GetStandActorLocation::StandLocation' has a wrong offset!");
static_assert(offsetof(CharacterSystemLibrary_GetStandActorLocation, ReturnValue) == 0x000014, "Member 'CharacterSystemLibrary_GetStandActorLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterSystemLibrary.IsLeftFootFront
// 0x0010 (0x0010 - 0x0000)
struct CharacterSystemLibrary_IsLeftFootFront final
{
public:
	class AGameCharacter*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSystemLibrary_IsLeftFootFront) == 0x000008, "Wrong alignment on CharacterSystemLibrary_IsLeftFootFront");
static_assert(sizeof(CharacterSystemLibrary_IsLeftFootFront) == 0x000010, "Wrong size on CharacterSystemLibrary_IsLeftFootFront");
static_assert(offsetof(CharacterSystemLibrary_IsLeftFootFront, Target) == 0x000000, "Member 'CharacterSystemLibrary_IsLeftFootFront::Target' has a wrong offset!");
static_assert(offsetof(CharacterSystemLibrary_IsLeftFootFront, ReturnValue) == 0x000008, "Member 'CharacterSystemLibrary_IsLeftFootFront::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterSystemLibrary.IsStandable
// 0x0010 (0x0010 - 0x0000)
struct CharacterSystemLibrary_IsStandable final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSystemLibrary_IsStandable) == 0x000008, "Wrong alignment on CharacterSystemLibrary_IsStandable");
static_assert(sizeof(CharacterSystemLibrary_IsStandable) == 0x000010, "Wrong size on CharacterSystemLibrary_IsStandable");
static_assert(offsetof(CharacterSystemLibrary_IsStandable, Target) == 0x000000, "Member 'CharacterSystemLibrary_IsStandable::Target' has a wrong offset!");
static_assert(offsetof(CharacterSystemLibrary_IsStandable, ReturnValue) == 0x000008, "Member 'CharacterSystemLibrary_IsStandable::ReturnValue' has a wrong offset!");

// Function DarwinGame.CharacterSystemLibrary.IsSuccessSection
// 0x000C (0x000C - 0x0000)
struct CharacterSystemLibrary_IsSuccessSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSystemLibrary_IsSuccessSection) == 0x000004, "Wrong alignment on CharacterSystemLibrary_IsSuccessSection");
static_assert(sizeof(CharacterSystemLibrary_IsSuccessSection) == 0x00000C, "Wrong size on CharacterSystemLibrary_IsSuccessSection");
static_assert(offsetof(CharacterSystemLibrary_IsSuccessSection, SectionName) == 0x000000, "Member 'CharacterSystemLibrary_IsSuccessSection::SectionName' has a wrong offset!");
static_assert(offsetof(CharacterSystemLibrary_IsSuccessSection, ReturnValue) == 0x000008, "Member 'CharacterSystemLibrary_IsSuccessSection::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinGameplayCue.GetActionDetailID
// 0x00C8 (0x00C8 - 0x0000)
struct DarwinGameplayCue_GetActionDetailID final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinGameplayCue_GetActionDetailID) == 0x000008, "Wrong alignment on DarwinGameplayCue_GetActionDetailID");
static_assert(sizeof(DarwinGameplayCue_GetActionDetailID) == 0x0000C8, "Wrong size on DarwinGameplayCue_GetActionDetailID");
static_assert(offsetof(DarwinGameplayCue_GetActionDetailID, MyTarget) == 0x000000, "Member 'DarwinGameplayCue_GetActionDetailID::MyTarget' has a wrong offset!");
static_assert(offsetof(DarwinGameplayCue_GetActionDetailID, Parameters) == 0x000008, "Member 'DarwinGameplayCue_GetActionDetailID::Parameters' has a wrong offset!");
static_assert(offsetof(DarwinGameplayCue_GetActionDetailID, ReturnValue) == 0x0000C0, "Member 'DarwinGameplayCue_GetActionDetailID::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinGameplayCue.SetAbnormalStateTag
// 0x0008 (0x0008 - 0x0000)
struct DarwinGameplayCue_SetAbnormalStateTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinGameplayCue_SetAbnormalStateTag) == 0x000004, "Wrong alignment on DarwinGameplayCue_SetAbnormalStateTag");
static_assert(sizeof(DarwinGameplayCue_SetAbnormalStateTag) == 0x000008, "Wrong size on DarwinGameplayCue_SetAbnormalStateTag");
static_assert(offsetof(DarwinGameplayCue_SetAbnormalStateTag, Tag) == 0x000000, "Member 'DarwinGameplayCue_SetAbnormalStateTag::Tag' has a wrong offset!");

// Function DarwinGame.DarwinGameplayCue.SetIsChangeMotion
// 0x0001 (0x0001 - 0x0000)
struct DarwinGameplayCue_SetIsChangeMotion final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinGameplayCue_SetIsChangeMotion) == 0x000001, "Wrong alignment on DarwinGameplayCue_SetIsChangeMotion");
static_assert(sizeof(DarwinGameplayCue_SetIsChangeMotion) == 0x000001, "Wrong size on DarwinGameplayCue_SetIsChangeMotion");
static_assert(offsetof(DarwinGameplayCue_SetIsChangeMotion, flg) == 0x000000, "Member 'DarwinGameplayCue_SetIsChangeMotion::flg' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.AddBelongingsCoin
// 0x0020 (0x0020 - 0x0000)
struct CoinBlueprintFunctionLibrary_AddBelongingsCoin final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_AddBelongingsCoin) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_AddBelongingsCoin");
static_assert(sizeof(CoinBlueprintFunctionLibrary_AddBelongingsCoin) == 0x000020, "Wrong size on CoinBlueprintFunctionLibrary_AddBelongingsCoin");
static_assert(offsetof(CoinBlueprintFunctionLibrary_AddBelongingsCoin, CoinParam) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_AddBelongingsCoin::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_AddBelongingsCoin, ReturnValue) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_AddBelongingsCoin::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.CoinBaseNameOf
// 0x0030 (0x0030 - 0x0000)
struct CoinBlueprintFunctionLibrary_CoinBaseNameOf final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinBlueprintFunctionLibrary_CoinBaseNameOf) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_CoinBaseNameOf");
static_assert(sizeof(CoinBlueprintFunctionLibrary_CoinBaseNameOf) == 0x000030, "Wrong size on CoinBlueprintFunctionLibrary_CoinBaseNameOf");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CoinBaseNameOf, CoinParam) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_CoinBaseNameOf::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CoinBaseNameOf, ReturnValue) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_CoinBaseNameOf::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.CreateCoin
// 0x0028 (0x0028 - 0x0000)
struct CoinBlueprintFunctionLibrary_CreateCoin final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_CoinParam                          CoinParam;                                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          isRarityUp;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_CreateCoin) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_CreateCoin");
static_assert(sizeof(CoinBlueprintFunctionLibrary_CreateCoin) == 0x000028, "Wrong size on CoinBlueprintFunctionLibrary_CreateCoin");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoin, Level) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_CreateCoin::Level' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoin, KindId) == 0x000004, "Member 'CoinBlueprintFunctionLibrary_CreateCoin::KindId' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoin, CoinParam) == 0x000008, "Member 'CoinBlueprintFunctionLibrary_CreateCoin::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoin, isRarityUp) == 0x000020, "Member 'CoinBlueprintFunctionLibrary_CreateCoin::isRarityUp' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoin, ReturnValue) == 0x000021, "Member 'CoinBlueprintFunctionLibrary_CreateCoin::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.CreateCoinFixed
// 0x0028 (0x0028 - 0x0000)
struct CoinBlueprintFunctionLibrary_CreateCoinFixed final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CoinParam                          CoinParam;                                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_CreateCoinFixed) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_CreateCoinFixed");
static_assert(sizeof(CoinBlueprintFunctionLibrary_CreateCoinFixed) == 0x000028, "Wrong size on CoinBlueprintFunctionLibrary_CreateCoinFixed");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoinFixed, ID) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_CreateCoinFixed::ID' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoinFixed, CoinParam) == 0x000008, "Member 'CoinBlueprintFunctionLibrary_CreateCoinFixed::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoinFixed, ReturnValue) == 0x000020, "Member 'CoinBlueprintFunctionLibrary_CreateCoinFixed::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.CreateCoinFixedGroup
// 0x0020 (0x0020 - 0x0000)
struct CoinBlueprintFunctionLibrary_CreateCoinFixedGroup final
{
public:
	int32                                         GroupID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_CoinParam>                  CoinParamArray;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_CreateCoinFixedGroup) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_CreateCoinFixedGroup");
static_assert(sizeof(CoinBlueprintFunctionLibrary_CreateCoinFixedGroup) == 0x000020, "Wrong size on CoinBlueprintFunctionLibrary_CreateCoinFixedGroup");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoinFixedGroup, GroupID) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_CreateCoinFixedGroup::GroupID' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoinFixedGroup, CoinParamArray) == 0x000008, "Member 'CoinBlueprintFunctionLibrary_CreateCoinFixedGroup::CoinParamArray' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_CreateCoinFixedGroup, ReturnValue) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_CreateCoinFixedGroup::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinAttributeType
// 0x0020 (0x0020 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinAttributeType final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EResistanceType                               ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinAttributeType) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinAttributeType");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinAttributeType) == 0x000020, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinAttributeType");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinAttributeType, CoinParam) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinAttributeType::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinAttributeType, ReturnValue) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_GetCoinAttributeType::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinFeatureIconId
// 0x0010 (0x0010 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinFeatureIconId final
{
public:
	struct FST_CoinFeature                        CoinFeature;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinFeatureIconId) == 0x000004, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinFeatureIconId");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinFeatureIconId) == 0x000010, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinFeatureIconId");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinFeatureIconId, CoinFeature) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinFeatureIconId::CoinFeature' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinFeatureIconId, ReturnValue) == 0x00000C, "Member 'CoinBlueprintFunctionLibrary_GetCoinFeatureIconId::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinIconTypes
// 0x0020 (0x0020 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinIconTypes final
{
public:
	struct FST_CoinFeature                        CoinFeature;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinIconTypes) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinIconTypes");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinIconTypes) == 0x000020, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinIconTypes");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinIconTypes, CoinFeature) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinIconTypes::CoinFeature' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinIconTypes, ReturnValue) == 0x000010, "Member 'CoinBlueprintFunctionLibrary_GetCoinIconTypes::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinIsPlayEquipAnim
// 0x0010 (0x0010 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim final
{
public:
	struct FST_CoinFeature                        CoinFeature;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim) == 0x000004, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim) == 0x000010, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim, CoinFeature) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim::CoinFeature' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim, ReturnValue) == 0x00000C, "Member 'CoinBlueprintFunctionLibrary_GetCoinIsPlayEquipAnim::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinListName
// 0x0038 (0x0038 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinListName final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Name_0;                                            // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          IsEnableIndefSgl;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinListName) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinListName");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinListName) == 0x000038, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinListName");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinListName, CoinParam) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinListName::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinListName, Name_0) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_GetCoinListName::Name_0' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinListName, IsEnableIndefSgl) == 0x000030, "Member 'CoinBlueprintFunctionLibrary_GetCoinListName::IsEnableIndefSgl' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinName
// 0x0038 (0x0038 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinName final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Name_0;                                            // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          IsEnableIndefSgl;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinName) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinName");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinName) == 0x000038, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinName");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinName, CoinParam) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinName::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinName, Name_0) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_GetCoinName::Name_0' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinName, IsEnableIndefSgl) == 0x000030, "Member 'CoinBlueprintFunctionLibrary_GetCoinName::IsEnableIndefSgl' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinName50Order
// 0x0020 (0x0020 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinName50Order final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinName50Order) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinName50Order");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinName50Order) == 0x000020, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinName50Order");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinName50Order, CoinParam) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinName50Order::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinName50Order, ReturnValue) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_GetCoinName50Order::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinParamType
// 0x0020 (0x0020 - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinParamType final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EStatusParamType                              ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinParamType) == 0x000008, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinParamType");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinParamType) == 0x000020, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinParamType");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinParamType, CoinParam) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinParamType::CoinParam' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinParamType, ReturnValue) == 0x000018, "Member 'CoinBlueprintFunctionLibrary_GetCoinParamType::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.GetCoinRarityIcon
// 0x000C (0x000C - 0x0000)
struct CoinBlueprintFunctionLibrary_GetCoinRarityIcon final
{
public:
	ECoinRarity                                   Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinBlueprintFunctionLibrary_GetCoinRarityIcon) == 0x000004, "Wrong alignment on CoinBlueprintFunctionLibrary_GetCoinRarityIcon");
static_assert(sizeof(CoinBlueprintFunctionLibrary_GetCoinRarityIcon) == 0x00000C, "Wrong size on CoinBlueprintFunctionLibrary_GetCoinRarityIcon");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinRarityIcon, Rarity) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_GetCoinRarityIcon::Rarity' has a wrong offset!");
static_assert(offsetof(CoinBlueprintFunctionLibrary_GetCoinRarityIcon, ReturnValue) == 0x000004, "Member 'CoinBlueprintFunctionLibrary_GetCoinRarityIcon::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinBlueprintFunctionLibrary.RemoveBelongingsCoin
// 0x0004 (0x0004 - 0x0000)
struct CoinBlueprintFunctionLibrary_RemoveBelongingsCoin final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinBlueprintFunctionLibrary_RemoveBelongingsCoin) == 0x000004, "Wrong alignment on CoinBlueprintFunctionLibrary_RemoveBelongingsCoin");
static_assert(sizeof(CoinBlueprintFunctionLibrary_RemoveBelongingsCoin) == 0x000004, "Wrong size on CoinBlueprintFunctionLibrary_RemoveBelongingsCoin");
static_assert(offsetof(CoinBlueprintFunctionLibrary_RemoveBelongingsCoin, Uid) == 0x000000, "Member 'CoinBlueprintFunctionLibrary_RemoveBelongingsCoin::Uid' has a wrong offset!");

// Function DarwinGame.UIFacilityFoodItem.GetIsLuxuryFoodId
// 0x000C (0x000C - 0x0000)
struct UIFacilityFoodItem_GetIsLuxuryFoodId final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFacilityFoodItem_GetIsLuxuryFoodId) == 0x000004, "Wrong alignment on UIFacilityFoodItem_GetIsLuxuryFoodId");
static_assert(sizeof(UIFacilityFoodItem_GetIsLuxuryFoodId) == 0x00000C, "Wrong size on UIFacilityFoodItem_GetIsLuxuryFoodId");
static_assert(offsetof(UIFacilityFoodItem_GetIsLuxuryFoodId, ItemId) == 0x000000, "Member 'UIFacilityFoodItem_GetIsLuxuryFoodId::ItemId' has a wrong offset!");
static_assert(offsetof(UIFacilityFoodItem_GetIsLuxuryFoodId, ReturnValue) == 0x000008, "Member 'UIFacilityFoodItem_GetIsLuxuryFoodId::ReturnValue' has a wrong offset!");

// Function DarwinGame.CoinObjectBase.Initialize
// 0x0018 (0x0018 - 0x0000)
struct CoinObjectBase_Initialize final
{
public:
	struct FST_CoinParam                          Param;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinObjectBase_Initialize) == 0x000008, "Wrong alignment on CoinObjectBase_Initialize");
static_assert(sizeof(CoinObjectBase_Initialize) == 0x000018, "Wrong size on CoinObjectBase_Initialize");
static_assert(offsetof(CoinObjectBase_Initialize, Param) == 0x000000, "Member 'CoinObjectBase_Initialize::Param' has a wrong offset!");

// Function DarwinGame.CoinObjectBase.GetCoinParam
// 0x0018 (0x0018 - 0x0000)
struct CoinObjectBase_GetCoinParam final
{
public:
	struct FST_CoinParam                          ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinObjectBase_GetCoinParam) == 0x000008, "Wrong alignment on CoinObjectBase_GetCoinParam");
static_assert(sizeof(CoinObjectBase_GetCoinParam) == 0x000018, "Wrong size on CoinObjectBase_GetCoinParam");
static_assert(offsetof(CoinObjectBase_GetCoinParam, ReturnValue) == 0x000000, "Member 'CoinObjectBase_GetCoinParam::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIGlut_IconRange.SetDataUid
// 0x0018 (0x0018 - 0x0000)
struct UIGlut_IconRange_SetDataUid final
{
public:
	TArray<class FName>                           InItemIdList;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InUid;                                             // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIGlut_IconRange_SetDataUid) == 0x000008, "Wrong alignment on UIGlut_IconRange_SetDataUid");
static_assert(sizeof(UIGlut_IconRange_SetDataUid) == 0x000018, "Wrong size on UIGlut_IconRange_SetDataUid");
static_assert(offsetof(UIGlut_IconRange_SetDataUid, InItemIdList) == 0x000000, "Member 'UIGlut_IconRange_SetDataUid::InItemIdList' has a wrong offset!");
static_assert(offsetof(UIGlut_IconRange_SetDataUid, InUid) == 0x000010, "Member 'UIGlut_IconRange_SetDataUid::InUid' has a wrong offset!");

// Function DarwinGame.QuestManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_GetInstance final
{
public:
	class UQuestManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetInstance) == 0x000008, "Wrong alignment on QuestManager_GetInstance");
static_assert(sizeof(QuestManager_GetInstance) == 0x000008, "Wrong size on QuestManager_GetInstance");
static_assert(offsetof(QuestManager_GetInstance, ReturnValue) == 0x000000, "Member 'QuestManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.AddQuestDestinationRect
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_AddQuestDestinationRect final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_AddQuestDestinationRect) == 0x000004, "Wrong alignment on QuestManager_AddQuestDestinationRect");
static_assert(sizeof(QuestManager_AddQuestDestinationRect) == 0x000010, "Wrong size on QuestManager_AddQuestDestinationRect");
static_assert(offsetof(QuestManager_AddQuestDestinationRect, ID) == 0x000000, "Member 'QuestManager_AddQuestDestinationRect::ID' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestDestinationRect, QuestID) == 0x000008, "Member 'QuestManager_AddQuestDestinationRect::QuestID' has a wrong offset!");

// Function DarwinGame.QuestManager.AddQuestDestinationRectList
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_AddQuestDestinationRectList final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_AddQuestDestinationRectList) == 0x000008, "Wrong alignment on QuestManager_AddQuestDestinationRectList");
static_assert(sizeof(QuestManager_AddQuestDestinationRectList) == 0x000010, "Wrong size on QuestManager_AddQuestDestinationRectList");
static_assert(offsetof(QuestManager_AddQuestDestinationRectList, ID) == 0x000000, "Member 'QuestManager_AddQuestDestinationRectList::ID' has a wrong offset!");
static_assert(offsetof(QuestManager_AddQuestDestinationRectList, Object) == 0x000008, "Member 'QuestManager_AddQuestDestinationRectList::Object' has a wrong offset!");

// Function DarwinGame.QuestManager.CancelDailyQuest
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_CancelDailyQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_CancelDailyQuest) == 0x000004, "Wrong alignment on QuestManager_CancelDailyQuest");
static_assert(sizeof(QuestManager_CancelDailyQuest) == 0x000008, "Wrong size on QuestManager_CancelDailyQuest");
static_assert(offsetof(QuestManager_CancelDailyQuest, QuestID) == 0x000000, "Member 'QuestManager_CancelDailyQuest::QuestID' has a wrong offset!");

// Function DarwinGame.QuestManager.ClearQuest
// 0x000C (0x000C - 0x0000)
struct QuestManager_ClearQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpenClearUI;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_ClearQuest) == 0x000004, "Wrong alignment on QuestManager_ClearQuest");
static_assert(sizeof(QuestManager_ClearQuest) == 0x00000C, "Wrong size on QuestManager_ClearQuest");
static_assert(offsetof(QuestManager_ClearQuest, QuestID) == 0x000000, "Member 'QuestManager_ClearQuest::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_ClearQuest, IsOpenClearUI) == 0x000008, "Member 'QuestManager_ClearQuest::IsOpenClearUI' has a wrong offset!");

// Function DarwinGame.QuestManager.GainFieldLink
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_GainFieldLink final
{
public:
	EFieldLinkType                                Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GainFieldLink) == 0x000004, "Wrong alignment on QuestManager_GainFieldLink");
static_assert(sizeof(QuestManager_GainFieldLink) == 0x000008, "Wrong size on QuestManager_GainFieldLink");
static_assert(offsetof(QuestManager_GainFieldLink, Type) == 0x000000, "Member 'QuestManager_GainFieldLink::Type' has a wrong offset!");
static_assert(offsetof(QuestManager_GainFieldLink, Num) == 0x000004, "Member 'QuestManager_GainFieldLink::Num' has a wrong offset!");

// Function DarwinGame.QuestManager.GainGold
// 0x0004 (0x0004 - 0x0000)
struct QuestManager_GainGold final
{
public:
	int32                                         GainGold_0;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GainGold) == 0x000004, "Wrong alignment on QuestManager_GainGold");
static_assert(sizeof(QuestManager_GainGold) == 0x000004, "Wrong size on QuestManager_GainGold");
static_assert(offsetof(QuestManager_GainGold, GainGold_0) == 0x000000, "Member 'QuestManager_GainGold::GainGold_0' has a wrong offset!");

// Function DarwinGame.QuestManager.GainKillMonster
// 0x000C (0x000C - 0x0000)
struct QuestManager_GainKillMonster final
{
public:
	class FName                                   MonsterParameterId;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GainKillMonster) == 0x000004, "Wrong alignment on QuestManager_GainKillMonster");
static_assert(sizeof(QuestManager_GainKillMonster) == 0x00000C, "Wrong size on QuestManager_GainKillMonster");
static_assert(offsetof(QuestManager_GainKillMonster, MonsterParameterId) == 0x000000, "Member 'QuestManager_GainKillMonster::MonsterParameterId' has a wrong offset!");
static_assert(offsetof(QuestManager_GainKillMonster, Num) == 0x000008, "Member 'QuestManager_GainKillMonster::Num' has a wrong offset!");

// Function DarwinGame.QuestManager.GainMonsterVisionNum
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_GainMonsterVisionNum final
{
public:
	EAreaType                                     Area;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GainMonsterVisionNum) == 0x000004, "Wrong alignment on QuestManager_GainMonsterVisionNum");
static_assert(sizeof(QuestManager_GainMonsterVisionNum) == 0x000008, "Wrong size on QuestManager_GainMonsterVisionNum");
static_assert(offsetof(QuestManager_GainMonsterVisionNum, Area) == 0x000000, "Member 'QuestManager_GainMonsterVisionNum::Area' has a wrong offset!");
static_assert(offsetof(QuestManager_GainMonsterVisionNum, Num) == 0x000004, "Member 'QuestManager_GainMonsterVisionNum::Num' has a wrong offset!");

// Function DarwinGame.QuestManager.GainPlayerActionNum
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_GainPlayerActionNum final
{
public:
	EQuestClearPlayerActionType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GainPlayerActionNum) == 0x000004, "Wrong alignment on QuestManager_GainPlayerActionNum");
static_assert(sizeof(QuestManager_GainPlayerActionNum) == 0x000008, "Wrong size on QuestManager_GainPlayerActionNum");
static_assert(offsetof(QuestManager_GainPlayerActionNum, Type) == 0x000000, "Member 'QuestManager_GainPlayerActionNum::Type' has a wrong offset!");
static_assert(offsetof(QuestManager_GainPlayerActionNum, Num) == 0x000004, "Member 'QuestManager_GainPlayerActionNum::Num' has a wrong offset!");

// Function DarwinGame.QuestManager.GainTeamCommand
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_GainTeamCommand final
{
public:
	EQuestClearTEamCommandType                    Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GainTeamCommand) == 0x000004, "Wrong alignment on QuestManager_GainTeamCommand");
static_assert(sizeof(QuestManager_GainTeamCommand) == 0x000008, "Wrong size on QuestManager_GainTeamCommand");
static_assert(offsetof(QuestManager_GainTeamCommand, Type) == 0x000000, "Member 'QuestManager_GainTeamCommand::Type' has a wrong offset!");
static_assert(offsetof(QuestManager_GainTeamCommand, Num) == 0x000004, "Member 'QuestManager_GainTeamCommand::Num' has a wrong offset!");

// Function DarwinGame.QuestManager.GetActiveChildQuestIDs
// 0x0018 (0x0018 - 0x0000)
struct QuestManager_GetActiveChildQuestIDs final
{
public:
	class FName                                   ParentQuestID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetActiveChildQuestIDs) == 0x000008, "Wrong alignment on QuestManager_GetActiveChildQuestIDs");
static_assert(sizeof(QuestManager_GetActiveChildQuestIDs) == 0x000018, "Wrong size on QuestManager_GetActiveChildQuestIDs");
static_assert(offsetof(QuestManager_GetActiveChildQuestIDs, ParentQuestID) == 0x000000, "Member 'QuestManager_GetActiveChildQuestIDs::ParentQuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetActiveChildQuestIDs, ReturnValue) == 0x000008, "Member 'QuestManager_GetActiveChildQuestIDs::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetActiveParentQuestIDs
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetActiveParentQuestIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetActiveParentQuestIDs) == 0x000008, "Wrong alignment on QuestManager_GetActiveParentQuestIDs");
static_assert(sizeof(QuestManager_GetActiveParentQuestIDs) == 0x000010, "Wrong size on QuestManager_GetActiveParentQuestIDs");
static_assert(offsetof(QuestManager_GetActiveParentQuestIDs, ReturnValue) == 0x000000, "Member 'QuestManager_GetActiveParentQuestIDs::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetClearedQuestIDs
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetClearedQuestIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetClearedQuestIDs) == 0x000008, "Wrong alignment on QuestManager_GetClearedQuestIDs");
static_assert(sizeof(QuestManager_GetClearedQuestIDs) == 0x000010, "Wrong size on QuestManager_GetClearedQuestIDs");
static_assert(offsetof(QuestManager_GetClearedQuestIDs, ReturnValue) == 0x000000, "Member 'QuestManager_GetClearedQuestIDs::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetOpenQuestIDs
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetOpenQuestIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetOpenQuestIDs) == 0x000008, "Wrong alignment on QuestManager_GetOpenQuestIDs");
static_assert(sizeof(QuestManager_GetOpenQuestIDs) == 0x000010, "Wrong size on QuestManager_GetOpenQuestIDs");
static_assert(offsetof(QuestManager_GetOpenQuestIDs, ReturnValue) == 0x000000, "Member 'QuestManager_GetOpenQuestIDs::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetOrderQuestIDs
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetOrderQuestIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetOrderQuestIDs) == 0x000008, "Wrong alignment on QuestManager_GetOrderQuestIDs");
static_assert(sizeof(QuestManager_GetOrderQuestIDs) == 0x000010, "Wrong size on QuestManager_GetOrderQuestIDs");
static_assert(offsetof(QuestManager_GetOrderQuestIDs, ReturnValue) == 0x000000, "Member 'QuestManager_GetOrderQuestIDs::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestBaseAreaBattleData
// 0x0038 (0x0038 - 0x0000)
struct QuestManager_GetQuestBaseAreaBattleData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestBaseAreaBattleData            QuestBaseArea;                                     // 0x0010(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestBaseAreaBattleData) == 0x000008, "Wrong alignment on QuestManager_GetQuestBaseAreaBattleData");
static_assert(sizeof(QuestManager_GetQuestBaseAreaBattleData) == 0x000038, "Wrong size on QuestManager_GetQuestBaseAreaBattleData");
static_assert(offsetof(QuestManager_GetQuestBaseAreaBattleData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestBaseAreaBattleData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestBaseAreaBattleData, Result) == 0x000008, "Member 'QuestManager_GetQuestBaseAreaBattleData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestBaseAreaBattleData, QuestBaseArea) == 0x000010, "Member 'QuestManager_GetQuestBaseAreaBattleData::QuestBaseArea' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestClearJudgeData
// 0x0160 (0x0160 - 0x0000)
struct QuestManager_GetQuestClearJudgeData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListClear                     QuestClear;                                        // 0x0010(0x0150)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestClearJudgeData) == 0x000008, "Wrong alignment on QuestManager_GetQuestClearJudgeData");
static_assert(sizeof(QuestManager_GetQuestClearJudgeData) == 0x000160, "Wrong size on QuestManager_GetQuestClearJudgeData");
static_assert(offsetof(QuestManager_GetQuestClearJudgeData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestClearJudgeData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestClearJudgeData, Result) == 0x000008, "Member 'QuestManager_GetQuestClearJudgeData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestClearJudgeData, QuestClear) == 0x000010, "Member 'QuestManager_GetQuestClearJudgeData::QuestClear' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestClearRandomTableData
// 0x0030 (0x0030 - 0x0000)
struct QuestManager_GetQuestClearRandomTableData final
{
public:
	class FName                                   TableId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListClearRandomTable          QuestClearRandomTable;                             // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestClearRandomTableData) == 0x000008, "Wrong alignment on QuestManager_GetQuestClearRandomTableData");
static_assert(sizeof(QuestManager_GetQuestClearRandomTableData) == 0x000030, "Wrong size on QuestManager_GetQuestClearRandomTableData");
static_assert(offsetof(QuestManager_GetQuestClearRandomTableData, TableId) == 0x000000, "Member 'QuestManager_GetQuestClearRandomTableData::TableId' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestClearRandomTableData, Result) == 0x000008, "Member 'QuestManager_GetQuestClearRandomTableData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestClearRandomTableData, QuestClearRandomTable) == 0x000010, "Member 'QuestManager_GetQuestClearRandomTableData::QuestClearRandomTable' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestDestinationRects
// 0x0050 (0x0050 - 0x0000)
struct QuestManager_GetQuestDestinationRects final
{
public:
	TMap<class FName, class UObject*>             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestDestinationRects) == 0x000008, "Wrong alignment on QuestManager_GetQuestDestinationRects");
static_assert(sizeof(QuestManager_GetQuestDestinationRects) == 0x000050, "Wrong size on QuestManager_GetQuestDestinationRects");
static_assert(offsetof(QuestManager_GetQuestDestinationRects, ReturnValue) == 0x000000, "Member 'QuestManager_GetQuestDestinationRects::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestEmergencyData
// 0x0020 (0x0020 - 0x0000)
struct QuestManager_GetQuestEmergencyData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestEmergencyData                 Emergency;                                         // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestEmergencyData) == 0x000008, "Wrong alignment on QuestManager_GetQuestEmergencyData");
static_assert(sizeof(QuestManager_GetQuestEmergencyData) == 0x000020, "Wrong size on QuestManager_GetQuestEmergencyData");
static_assert(offsetof(QuestManager_GetQuestEmergencyData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestEmergencyData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestEmergencyData, Result) == 0x000008, "Member 'QuestManager_GetQuestEmergencyData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestEmergencyData, Emergency) == 0x000010, "Member 'QuestManager_GetQuestEmergencyData::Emergency' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestListData
// 0x00F0 (0x00F0 - 0x0000)
struct QuestManager_GetQuestListData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListDataInfo                  QuestData;                                         // 0x0010(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestListData) == 0x000008, "Wrong alignment on QuestManager_GetQuestListData");
static_assert(sizeof(QuestManager_GetQuestListData) == 0x0000F0, "Wrong size on QuestManager_GetQuestListData");
static_assert(offsetof(QuestManager_GetQuestListData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestListData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestListData, Result) == 0x000008, "Member 'QuestManager_GetQuestListData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestListData, QuestData) == 0x000010, "Member 'QuestManager_GetQuestListData::QuestData' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestOpenJudgeData
// 0x0110 (0x0110 - 0x0000)
struct QuestManager_GetQuestOpenJudgeData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListOpen                      QuestOpen;                                         // 0x0010(0x0100)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestOpenJudgeData) == 0x000008, "Wrong alignment on QuestManager_GetQuestOpenJudgeData");
static_assert(sizeof(QuestManager_GetQuestOpenJudgeData) == 0x000110, "Wrong size on QuestManager_GetQuestOpenJudgeData");
static_assert(offsetof(QuestManager_GetQuestOpenJudgeData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestOpenJudgeData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestOpenJudgeData, Result) == 0x000008, "Member 'QuestManager_GetQuestOpenJudgeData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestOpenJudgeData, QuestOpen) == 0x000010, "Member 'QuestManager_GetQuestOpenJudgeData::QuestOpen' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestOrderJudgeData
// 0x0030 (0x0030 - 0x0000)
struct QuestManager_GetQuestOrderJudgeData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListOrder                     QuestOrder;                                        // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestOrderJudgeData) == 0x000008, "Wrong alignment on QuestManager_GetQuestOrderJudgeData");
static_assert(sizeof(QuestManager_GetQuestOrderJudgeData) == 0x000030, "Wrong size on QuestManager_GetQuestOrderJudgeData");
static_assert(offsetof(QuestManager_GetQuestOrderJudgeData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestOrderJudgeData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestOrderJudgeData, Result) == 0x000008, "Member 'QuestManager_GetQuestOrderJudgeData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestOrderJudgeData, QuestOrder) == 0x000010, "Member 'QuestManager_GetQuestOrderJudgeData::QuestOrder' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestPointData
// 0x0028 (0x0028 - 0x0000)
struct QuestManager_GetQuestPointData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListPoint                     QuestPoint;                                        // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestPointData) == 0x000008, "Wrong alignment on QuestManager_GetQuestPointData");
static_assert(sizeof(QuestManager_GetQuestPointData) == 0x000028, "Wrong size on QuestManager_GetQuestPointData");
static_assert(offsetof(QuestManager_GetQuestPointData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestPointData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestPointData, Result) == 0x000008, "Member 'QuestManager_GetQuestPointData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestPointData, QuestPoint) == 0x000010, "Member 'QuestManager_GetQuestPointData::QuestPoint' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestRewardData
// 0x0118 (0x0118 - 0x0000)
struct QuestManager_GetQuestRewardData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListReward                    QuestReward;                                       // 0x0010(0x0108)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestRewardData) == 0x000008, "Wrong alignment on QuestManager_GetQuestRewardData");
static_assert(sizeof(QuestManager_GetQuestRewardData) == 0x000118, "Wrong size on QuestManager_GetQuestRewardData");
static_assert(offsetof(QuestManager_GetQuestRewardData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestRewardData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestRewardData, Result) == 0x000008, "Member 'QuestManager_GetQuestRewardData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestRewardData, QuestReward) == 0x000010, "Member 'QuestManager_GetQuestRewardData::QuestReward' has a wrong offset!");

// Function DarwinGame.QuestManager.OpenQuest
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_OpenQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_OpenQuest) == 0x000004, "Wrong alignment on QuestManager_OpenQuest");
static_assert(sizeof(QuestManager_OpenQuest) == 0x000008, "Wrong size on QuestManager_OpenQuest");
static_assert(offsetof(QuestManager_OpenQuest, QuestID) == 0x000000, "Member 'QuestManager_OpenQuest::QuestID' has a wrong offset!");

// Function DarwinGame.QuestManager.OrderQuest
// 0x000C (0x000C - 0x0000)
struct QuestManager_OrderQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpenOrderUI;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSetNewMark;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_OrderQuest) == 0x000004, "Wrong alignment on QuestManager_OrderQuest");
static_assert(sizeof(QuestManager_OrderQuest) == 0x00000C, "Wrong size on QuestManager_OrderQuest");
static_assert(offsetof(QuestManager_OrderQuest, QuestID) == 0x000000, "Member 'QuestManager_OrderQuest::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_OrderQuest, IsOpenOrderUI) == 0x000008, "Member 'QuestManager_OrderQuest::IsOpenOrderUI' has a wrong offset!");
static_assert(offsetof(QuestManager_OrderQuest, IsSetNewMark) == 0x000009, "Member 'QuestManager_OrderQuest::IsSetNewMark' has a wrong offset!");
static_assert(offsetof(QuestManager_OrderQuest, ReturnValue) == 0x00000A, "Member 'QuestManager_OrderQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.RemoveQuestDestinationRects
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_RemoveQuestDestinationRects final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_RemoveQuestDestinationRects) == 0x000004, "Wrong alignment on QuestManager_RemoveQuestDestinationRects");
static_assert(sizeof(QuestManager_RemoveQuestDestinationRects) == 0x000008, "Wrong size on QuestManager_RemoveQuestDestinationRects");
static_assert(offsetof(QuestManager_RemoveQuestDestinationRects, ID) == 0x000000, "Member 'QuestManager_RemoveQuestDestinationRects::ID' has a wrong offset!");

// Function DarwinGame.QuestManager.SetOrderedDailyQuest
// 0x0008 (0x0008 - 0x0000)
struct QuestManager_SetOrderedDailyQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_SetOrderedDailyQuest) == 0x000004, "Wrong alignment on QuestManager_SetOrderedDailyQuest");
static_assert(sizeof(QuestManager_SetOrderedDailyQuest) == 0x000008, "Wrong size on QuestManager_SetOrderedDailyQuest");
static_assert(offsetof(QuestManager_SetOrderedDailyQuest, QuestID) == 0x000000, "Member 'QuestManager_SetOrderedDailyQuest::QuestID' has a wrong offset!");

// Function DarwinGame.QuestManager.SetSelectedQuestID
// 0x000C (0x000C - 0x0000)
struct QuestManager_SetSelectedQuestID final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMain;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_SetSelectedQuestID) == 0x000004, "Wrong alignment on QuestManager_SetSelectedQuestID");
static_assert(sizeof(QuestManager_SetSelectedQuestID) == 0x00000C, "Wrong size on QuestManager_SetSelectedQuestID");
static_assert(offsetof(QuestManager_SetSelectedQuestID, QuestID) == 0x000000, "Member 'QuestManager_SetSelectedQuestID::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_SetSelectedQuestID, IsMain) == 0x000008, "Member 'QuestManager_SetSelectedQuestID::IsMain' has a wrong offset!");

// Function DarwinGame.QuestManager.UpdateQuestCount
// 0x000C (0x000C - 0x0000)
struct QuestManager_UpdateQuestCount final
{
public:
	EQuestClearJudgeType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_UpdateQuestCount) == 0x000004, "Wrong alignment on QuestManager_UpdateQuestCount");
static_assert(sizeof(QuestManager_UpdateQuestCount) == 0x00000C, "Wrong size on QuestManager_UpdateQuestCount");
static_assert(offsetof(QuestManager_UpdateQuestCount, Type) == 0x000000, "Member 'QuestManager_UpdateQuestCount::Type' has a wrong offset!");
static_assert(offsetof(QuestManager_UpdateQuestCount, ID) == 0x000004, "Member 'QuestManager_UpdateQuestCount::ID' has a wrong offset!");

// Function DarwinGame.QuestManager.GetOrderDailyQuestIDs
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetOrderDailyQuestIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetOrderDailyQuestIDs) == 0x000008, "Wrong alignment on QuestManager_GetOrderDailyQuestIDs");
static_assert(sizeof(QuestManager_GetOrderDailyQuestIDs) == 0x000010, "Wrong size on QuestManager_GetOrderDailyQuestIDs");
static_assert(offsetof(QuestManager_GetOrderDailyQuestIDs, ReturnValue) == 0x000000, "Member 'QuestManager_GetOrderDailyQuestIDs::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetOrderDailyQuestIDsWithoutAll
// 0x0010 (0x0010 - 0x0000)
struct QuestManager_GetOrderDailyQuestIDsWithoutAll final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetOrderDailyQuestIDsWithoutAll) == 0x000008, "Wrong alignment on QuestManager_GetOrderDailyQuestIDsWithoutAll");
static_assert(sizeof(QuestManager_GetOrderDailyQuestIDsWithoutAll) == 0x000010, "Wrong size on QuestManager_GetOrderDailyQuestIDsWithoutAll");
static_assert(offsetof(QuestManager_GetOrderDailyQuestIDsWithoutAll, ReturnValue) == 0x000000, "Member 'QuestManager_GetOrderDailyQuestIDsWithoutAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestListTextData
// 0x0138 (0x0138 - 0x0000)
struct QuestManager_GetQuestListTextData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestListTextDataInfo              QuestTextData;                                     // 0x0010(0x0128)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetQuestListTextData) == 0x000008, "Wrong alignment on QuestManager_GetQuestListTextData");
static_assert(sizeof(QuestManager_GetQuestListTextData) == 0x000138, "Wrong size on QuestManager_GetQuestListTextData");
static_assert(offsetof(QuestManager_GetQuestListTextData, QuestID) == 0x000000, "Member 'QuestManager_GetQuestListTextData::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestListTextData, Result) == 0x000008, "Member 'QuestManager_GetQuestListTextData::Result' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestListTextData, QuestTextData) == 0x000010, "Member 'QuestManager_GetQuestListTextData::QuestTextData' has a wrong offset!");

// Function DarwinGame.QuestManager.GetQuestState
// 0x000C (0x000C - 0x0000)
struct QuestManager_GetQuestState final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_GetQuestState) == 0x000004, "Wrong alignment on QuestManager_GetQuestState");
static_assert(sizeof(QuestManager_GetQuestState) == 0x00000C, "Wrong size on QuestManager_GetQuestState");
static_assert(offsetof(QuestManager_GetQuestState, QuestID) == 0x000000, "Member 'QuestManager_GetQuestState::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_GetQuestState, ReturnValue) == 0x000008, "Member 'QuestManager_GetQuestState::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.GetSelectedQuestID
// 0x000C (0x000C - 0x0000)
struct QuestManager_GetSelectedQuestID final
{
public:
	bool                                          IsMain;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_GetSelectedQuestID) == 0x000004, "Wrong alignment on QuestManager_GetSelectedQuestID");
static_assert(sizeof(QuestManager_GetSelectedQuestID) == 0x00000C, "Wrong size on QuestManager_GetSelectedQuestID");
static_assert(offsetof(QuestManager_GetSelectedQuestID, IsMain) == 0x000000, "Member 'QuestManager_GetSelectedQuestID::IsMain' has a wrong offset!");
static_assert(offsetof(QuestManager_GetSelectedQuestID, ReturnValue) == 0x000004, "Member 'QuestManager_GetSelectedQuestID::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.IsActiveQuest
// 0x000C (0x000C - 0x0000)
struct QuestManager_IsActiveQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestManager_IsActiveQuest) == 0x000004, "Wrong alignment on QuestManager_IsActiveQuest");
static_assert(sizeof(QuestManager_IsActiveQuest) == 0x00000C, "Wrong size on QuestManager_IsActiveQuest");
static_assert(offsetof(QuestManager_IsActiveQuest, QuestID) == 0x000000, "Member 'QuestManager_IsActiveQuest::QuestID' has a wrong offset!");
static_assert(offsetof(QuestManager_IsActiveQuest, ReturnValue) == 0x000008, "Member 'QuestManager_IsActiveQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.QuestManager.IsAllClearDailyQuestWithoutAll
// 0x0001 (0x0001 - 0x0000)
struct QuestManager_IsAllClearDailyQuestWithoutAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestManager_IsAllClearDailyQuestWithoutAll) == 0x000001, "Wrong alignment on QuestManager_IsAllClearDailyQuestWithoutAll");
static_assert(sizeof(QuestManager_IsAllClearDailyQuestWithoutAll) == 0x000001, "Wrong size on QuestManager_IsAllClearDailyQuestWithoutAll");
static_assert(offsetof(QuestManager_IsAllClearDailyQuestWithoutAll, ReturnValue) == 0x000000, "Member 'QuestManager_IsAllClearDailyQuestWithoutAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.DungeonGimmickPiller.GetGimmick
// 0x0008 (0x0008 - 0x0000)
struct DungeonGimmickPiller_GetGimmick final
{
public:
	class ADungeonPiller*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DungeonGimmickPiller_GetGimmick) == 0x000008, "Wrong alignment on DungeonGimmickPiller_GetGimmick");
static_assert(sizeof(DungeonGimmickPiller_GetGimmick) == 0x000008, "Wrong size on DungeonGimmickPiller_GetGimmick");
static_assert(offsetof(DungeonGimmickPiller_GetGimmick, ReturnValue) == 0x000000, "Member 'DungeonGimmickPiller_GetGimmick::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollectionPointObjectBase.EffectiveRangeCheck
// 0x0010 (0x0010 - 0x0000)
struct CollectionPointObjectBase_EffectiveRangeCheck final
{
public:
	class APlayerCameraManager*                   cameraManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorSizeLength;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectionPointObjectBase_EffectiveRangeCheck) == 0x000008, "Wrong alignment on CollectionPointObjectBase_EffectiveRangeCheck");
static_assert(sizeof(CollectionPointObjectBase_EffectiveRangeCheck) == 0x000010, "Wrong size on CollectionPointObjectBase_EffectiveRangeCheck");
static_assert(offsetof(CollectionPointObjectBase_EffectiveRangeCheck, cameraManager) == 0x000000, "Member 'CollectionPointObjectBase_EffectiveRangeCheck::cameraManager' has a wrong offset!");
static_assert(offsetof(CollectionPointObjectBase_EffectiveRangeCheck, ActorSizeLength) == 0x000008, "Member 'CollectionPointObjectBase_EffectiveRangeCheck::ActorSizeLength' has a wrong offset!");

// Function DarwinGame.CollectionPointObjectBase.GetCollectionPointID
// 0x0008 (0x0008 - 0x0000)
struct CollectionPointObjectBase_GetCollectionPointID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionPointObjectBase_GetCollectionPointID) == 0x000004, "Wrong alignment on CollectionPointObjectBase_GetCollectionPointID");
static_assert(sizeof(CollectionPointObjectBase_GetCollectionPointID) == 0x000008, "Wrong size on CollectionPointObjectBase_GetCollectionPointID");
static_assert(offsetof(CollectionPointObjectBase_GetCollectionPointID, ReturnValue) == 0x000000, "Member 'CollectionPointObjectBase_GetCollectionPointID::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollectionPointObjectBase.OnChangeState
// 0x0002 (0x0002 - 0x0000)
struct CollectionPointObjectBase_OnChangeState final
{
public:
	ECollectionPointState                         State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFadeSkip;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionPointObjectBase_OnChangeState) == 0x000001, "Wrong alignment on CollectionPointObjectBase_OnChangeState");
static_assert(sizeof(CollectionPointObjectBase_OnChangeState) == 0x000002, "Wrong size on CollectionPointObjectBase_OnChangeState");
static_assert(offsetof(CollectionPointObjectBase_OnChangeState, State) == 0x000000, "Member 'CollectionPointObjectBase_OnChangeState::State' has a wrong offset!");
static_assert(offsetof(CollectionPointObjectBase_OnChangeState, IsFadeSkip) == 0x000001, "Member 'CollectionPointObjectBase_OnChangeState::IsFadeSkip' has a wrong offset!");

// Function DarwinGame.CollectionPointObjectBase.GetAfterMesh
// 0x0008 (0x0008 - 0x0000)
struct CollectionPointObjectBase_GetAfterMesh final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionPointObjectBase_GetAfterMesh) == 0x000008, "Wrong alignment on CollectionPointObjectBase_GetAfterMesh");
static_assert(sizeof(CollectionPointObjectBase_GetAfterMesh) == 0x000008, "Wrong size on CollectionPointObjectBase_GetAfterMesh");
static_assert(offsetof(CollectionPointObjectBase_GetAfterMesh, ReturnValue) == 0x000000, "Member 'CollectionPointObjectBase_GetAfterMesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollectionPointObjectBase.GetBeforeMesh
// 0x0008 (0x0008 - 0x0000)
struct CollectionPointObjectBase_GetBeforeMesh final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionPointObjectBase_GetBeforeMesh) == 0x000008, "Wrong alignment on CollectionPointObjectBase_GetBeforeMesh");
static_assert(sizeof(CollectionPointObjectBase_GetBeforeMesh) == 0x000008, "Wrong size on CollectionPointObjectBase_GetBeforeMesh");
static_assert(offsetof(CollectionPointObjectBase_GetBeforeMesh, ReturnValue) == 0x000000, "Member 'CollectionPointObjectBase_GetBeforeMesh::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollisionManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct CollisionManager_GetInstance final
{
public:
	class UCollisionManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionManager_GetInstance) == 0x000008, "Wrong alignment on CollisionManager_GetInstance");
static_assert(sizeof(CollisionManager_GetInstance) == 0x000008, "Wrong size on CollisionManager_GetInstance");
static_assert(offsetof(CollisionManager_GetInstance, ReturnValue) == 0x000000, "Member 'CollisionManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollisionManager.CreateShootAttackCollision
// 0x0018 (0x0018 - 0x0000)
struct CollisionManager_CreateShootAttackCollision final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OrderId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAttackCollisionBase*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionManager_CreateShootAttackCollision) == 0x000008, "Wrong alignment on CollisionManager_CreateShootAttackCollision");
static_assert(sizeof(CollisionManager_CreateShootAttackCollision) == 0x000018, "Wrong size on CollisionManager_CreateShootAttackCollision");
static_assert(offsetof(CollisionManager_CreateShootAttackCollision, actionDetailID) == 0x000000, "Member 'CollisionManager_CreateShootAttackCollision::actionDetailID' has a wrong offset!");
static_assert(offsetof(CollisionManager_CreateShootAttackCollision, OrderId) == 0x000008, "Member 'CollisionManager_CreateShootAttackCollision::OrderId' has a wrong offset!");
static_assert(offsetof(CollisionManager_CreateShootAttackCollision, ReturnValue) == 0x000010, "Member 'CollisionManager_CreateShootAttackCollision::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollisionManager.CreateTouchAttackCollision
// 0x0088 (0x0088 - 0x0000)
struct CollisionManager_CreateTouchAttackCollision final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_TouchAttackCollision               Param;                                             // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AAttackCollisionBase*                   ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionManager_CreateTouchAttackCollision) == 0x000008, "Wrong alignment on CollisionManager_CreateTouchAttackCollision");
static_assert(sizeof(CollisionManager_CreateTouchAttackCollision) == 0x000088, "Wrong size on CollisionManager_CreateTouchAttackCollision");
static_assert(offsetof(CollisionManager_CreateTouchAttackCollision, actionDetailID) == 0x000000, "Member 'CollisionManager_CreateTouchAttackCollision::actionDetailID' has a wrong offset!");
static_assert(offsetof(CollisionManager_CreateTouchAttackCollision, Param) == 0x000008, "Member 'CollisionManager_CreateTouchAttackCollision::Param' has a wrong offset!");
static_assert(offsetof(CollisionManager_CreateTouchAttackCollision, ReturnValue) == 0x000080, "Member 'CollisionManager_CreateTouchAttackCollision::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollisionManager.GetAttackCollisionData
// 0x0010 (0x0010 - 0x0000)
struct CollisionManager_GetAttackCollisionData final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttackCollisionData*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionManager_GetAttackCollisionData) == 0x000008, "Wrong alignment on CollisionManager_GetAttackCollisionData");
static_assert(sizeof(CollisionManager_GetAttackCollisionData) == 0x000010, "Wrong size on CollisionManager_GetAttackCollisionData");
static_assert(offsetof(CollisionManager_GetAttackCollisionData, UniqueId) == 0x000000, "Member 'CollisionManager_GetAttackCollisionData::UniqueId' has a wrong offset!");
static_assert(offsetof(CollisionManager_GetAttackCollisionData, ReturnValue) == 0x000008, "Member 'CollisionManager_GetAttackCollisionData::ReturnValue' has a wrong offset!");

// Function DarwinGame.CollisionManager.ReleaseRequest
// 0x0008 (0x0008 - 0x0000)
struct CollisionManager_ReleaseRequest final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          calledAC;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionManager_ReleaseRequest) == 0x000004, "Wrong alignment on CollisionManager_ReleaseRequest");
static_assert(sizeof(CollisionManager_ReleaseRequest) == 0x000008, "Wrong size on CollisionManager_ReleaseRequest");
static_assert(offsetof(CollisionManager_ReleaseRequest, UniqueId) == 0x000000, "Member 'CollisionManager_ReleaseRequest::UniqueId' has a wrong offset!");
static_assert(offsetof(CollisionManager_ReleaseRequest, calledAC) == 0x000004, "Member 'CollisionManager_ReleaseRequest::calledAC' has a wrong offset!");

// Function DarwinGame.CollisionManager.RemoveAttackData
// 0x0004 (0x0004 - 0x0000)
struct CollisionManager_RemoveAttackData final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionManager_RemoveAttackData) == 0x000004, "Wrong alignment on CollisionManager_RemoveAttackData");
static_assert(sizeof(CollisionManager_RemoveAttackData) == 0x000004, "Wrong size on CollisionManager_RemoveAttackData");
static_assert(offsetof(CollisionManager_RemoveAttackData, UniqueId) == 0x000000, "Member 'CollisionManager_RemoveAttackData::UniqueId' has a wrong offset!");

// Function DarwinGame.CollisionManager.ReserveRequest
// 0x0004 (0x0004 - 0x0000)
struct CollisionManager_ReserveRequest final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionManager_ReserveRequest) == 0x000004, "Wrong alignment on CollisionManager_ReserveRequest");
static_assert(sizeof(CollisionManager_ReserveRequest) == 0x000004, "Wrong size on CollisionManager_ReserveRequest");
static_assert(offsetof(CollisionManager_ReserveRequest, UniqueId) == 0x000000, "Member 'CollisionManager_ReserveRequest::UniqueId' has a wrong offset!");

// Function DarwinGame.CollisionManager.ReturnCollision
// 0x0008 (0x0008 - 0x0000)
struct CollisionManager_ReturnCollision final
{
public:
	class AAttackCollisionBase*                   collision;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionManager_ReturnCollision) == 0x000008, "Wrong alignment on CollisionManager_ReturnCollision");
static_assert(sizeof(CollisionManager_ReturnCollision) == 0x000008, "Wrong size on CollisionManager_ReturnCollision");
static_assert(offsetof(CollisionManager_ReturnCollision, collision) == 0x000000, "Member 'CollisionManager_ReturnCollision::collision' has a wrong offset!");

// Function DarwinGame.CommonEmoteSettingDataTable.GetFaceType
// 0x0002 (0x0002 - 0x0000)
struct CommonEmoteSettingDataTable_GetFaceType final
{
public:
	EEmoteType                                    emoteType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteFaceType                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonEmoteSettingDataTable_GetFaceType) == 0x000001, "Wrong alignment on CommonEmoteSettingDataTable_GetFaceType");
static_assert(sizeof(CommonEmoteSettingDataTable_GetFaceType) == 0x000002, "Wrong size on CommonEmoteSettingDataTable_GetFaceType");
static_assert(offsetof(CommonEmoteSettingDataTable_GetFaceType, emoteType) == 0x000000, "Member 'CommonEmoteSettingDataTable_GetFaceType::emoteType' has a wrong offset!");
static_assert(offsetof(CommonEmoteSettingDataTable_GetFaceType, ReturnValue) == 0x000001, "Member 'CommonEmoteSettingDataTable_GetFaceType::ReturnValue' has a wrong offset!");

// Function DarwinGame.CommonEmoteSettingDataTable.GetStampParameter
// 0x0010 (0x0010 - 0x0000)
struct CommonEmoteSettingDataTable_GetStampParameter final
{
public:
	EEmoteType                                    emoteType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStampIconType                                outIconType;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteStampSetting                     outSetting;                                        // 0x0004(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonEmoteSettingDataTable_GetStampParameter) == 0x000004, "Wrong alignment on CommonEmoteSettingDataTable_GetStampParameter");
static_assert(sizeof(CommonEmoteSettingDataTable_GetStampParameter) == 0x000010, "Wrong size on CommonEmoteSettingDataTable_GetStampParameter");
static_assert(offsetof(CommonEmoteSettingDataTable_GetStampParameter, emoteType) == 0x000000, "Member 'CommonEmoteSettingDataTable_GetStampParameter::emoteType' has a wrong offset!");
static_assert(offsetof(CommonEmoteSettingDataTable_GetStampParameter, outIconType) == 0x000001, "Member 'CommonEmoteSettingDataTable_GetStampParameter::outIconType' has a wrong offset!");
static_assert(offsetof(CommonEmoteSettingDataTable_GetStampParameter, outSetting) == 0x000004, "Member 'CommonEmoteSettingDataTable_GetStampParameter::outSetting' has a wrong offset!");
static_assert(offsetof(CommonEmoteSettingDataTable_GetStampParameter, ReturnValue) == 0x00000C, "Member 'CommonEmoteSettingDataTable_GetStampParameter::ReturnValue' has a wrong offset!");

// Function DarwinGame.CommunicationComponent.FieldSearch
// 0x0008 (0x0008 - 0x0000)
struct CommunicationComponent_FieldSearch final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommunicationComponent_FieldSearch) == 0x000004, "Wrong alignment on CommunicationComponent_FieldSearch");
static_assert(sizeof(CommunicationComponent_FieldSearch) == 0x000008, "Wrong size on CommunicationComponent_FieldSearch");
static_assert(offsetof(CommunicationComponent_FieldSearch, Range) == 0x000000, "Member 'CommunicationComponent_FieldSearch::Range' has a wrong offset!");
static_assert(offsetof(CommunicationComponent_FieldSearch, Time) == 0x000004, "Member 'CommunicationComponent_FieldSearch::Time' has a wrong offset!");

// Function DarwinGame.CommunicationComponent.SearchArtifact
// 0x0018 (0x0018 - 0x0000)
struct CommunicationComponent_SearchArtifact final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommunicationComponent_SearchArtifact) == 0x000004, "Wrong alignment on CommunicationComponent_SearchArtifact");
static_assert(sizeof(CommunicationComponent_SearchArtifact) == 0x000018, "Wrong size on CommunicationComponent_SearchArtifact");
static_assert(offsetof(CommunicationComponent_SearchArtifact, Center) == 0x000000, "Member 'CommunicationComponent_SearchArtifact::Center' has a wrong offset!");
static_assert(offsetof(CommunicationComponent_SearchArtifact, Range) == 0x00000C, "Member 'CommunicationComponent_SearchArtifact::Range' has a wrong offset!");
static_assert(offsetof(CommunicationComponent_SearchArtifact, Time) == 0x000010, "Member 'CommunicationComponent_SearchArtifact::Time' has a wrong offset!");
static_assert(offsetof(CommunicationComponent_SearchArtifact, Brightness) == 0x000014, "Member 'CommunicationComponent_SearchArtifact::Brightness' has a wrong offset!");

// Function DarwinGame.CustomEquipmentFunctionLibrary.AddRivalTeamEquipment
// 0x0010 (0x0010 - 0x0000)
struct CustomEquipmentFunctionLibrary_AddRivalTeamEquipment final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamForce                               Force;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeader;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomEquipmentFunctionLibrary_AddRivalTeamEquipment) == 0x000008, "Wrong alignment on CustomEquipmentFunctionLibrary_AddRivalTeamEquipment");
static_assert(sizeof(CustomEquipmentFunctionLibrary_AddRivalTeamEquipment) == 0x000010, "Wrong size on CustomEquipmentFunctionLibrary_AddRivalTeamEquipment");
static_assert(offsetof(CustomEquipmentFunctionLibrary_AddRivalTeamEquipment, Target) == 0x000000, "Member 'CustomEquipmentFunctionLibrary_AddRivalTeamEquipment::Target' has a wrong offset!");
static_assert(offsetof(CustomEquipmentFunctionLibrary_AddRivalTeamEquipment, Force) == 0x000008, "Member 'CustomEquipmentFunctionLibrary_AddRivalTeamEquipment::Force' has a wrong offset!");
static_assert(offsetof(CustomEquipmentFunctionLibrary_AddRivalTeamEquipment, bIsLeader) == 0x000009, "Member 'CustomEquipmentFunctionLibrary_AddRivalTeamEquipment::bIsLeader' has a wrong offset!");

// Function DarwinGame.CustomEquipmentFunctionLibrary.ChangeCustomEquipment
// 0x0028 (0x0028 - 0x0000)
struct CustomEquipmentFunctionLibrary_ChangeCustomEquipment final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomEquipmentInfomation             Info;                                              // 0x0008(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomEquipmentFunctionLibrary_ChangeCustomEquipment) == 0x000008, "Wrong alignment on CustomEquipmentFunctionLibrary_ChangeCustomEquipment");
static_assert(sizeof(CustomEquipmentFunctionLibrary_ChangeCustomEquipment) == 0x000028, "Wrong size on CustomEquipmentFunctionLibrary_ChangeCustomEquipment");
static_assert(offsetof(CustomEquipmentFunctionLibrary_ChangeCustomEquipment, Target) == 0x000000, "Member 'CustomEquipmentFunctionLibrary_ChangeCustomEquipment::Target' has a wrong offset!");
static_assert(offsetof(CustomEquipmentFunctionLibrary_ChangeCustomEquipment, Info) == 0x000008, "Member 'CustomEquipmentFunctionLibrary_ChangeCustomEquipment::Info' has a wrong offset!");

// Function DarwinGame.CustomEquipmentFunctionLibrary.ChangeCustomMaterial
// 0x0010 (0x0010 - 0x0000)
struct CustomEquipmentFunctionLibrary_ChangeCustomMaterial final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipmentFunctionLibrary_ChangeCustomMaterial) == 0x000008, "Wrong alignment on CustomEquipmentFunctionLibrary_ChangeCustomMaterial");
static_assert(sizeof(CustomEquipmentFunctionLibrary_ChangeCustomMaterial) == 0x000010, "Wrong size on CustomEquipmentFunctionLibrary_ChangeCustomMaterial");
static_assert(offsetof(CustomEquipmentFunctionLibrary_ChangeCustomMaterial, Target) == 0x000000, "Member 'CustomEquipmentFunctionLibrary_ChangeCustomMaterial::Target' has a wrong offset!");
static_assert(offsetof(CustomEquipmentFunctionLibrary_ChangeCustomMaterial, KindId) == 0x000008, "Member 'CustomEquipmentFunctionLibrary_ChangeCustomMaterial::KindId' has a wrong offset!");

// Function DarwinGame.CustomEquipmentFunctionLibrary.GenerateCustomEquipment
// 0x0030 (0x0030 - 0x0000)
struct CustomEquipmentFunctionLibrary_GenerateCustomEquipment final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_MonsterCustomEquipmentData         Equipment;                                         // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipmentFunctionLibrary_GenerateCustomEquipment) == 0x000008, "Wrong alignment on CustomEquipmentFunctionLibrary_GenerateCustomEquipment");
static_assert(sizeof(CustomEquipmentFunctionLibrary_GenerateCustomEquipment) == 0x000030, "Wrong size on CustomEquipmentFunctionLibrary_GenerateCustomEquipment");
static_assert(offsetof(CustomEquipmentFunctionLibrary_GenerateCustomEquipment, Target) == 0x000000, "Member 'CustomEquipmentFunctionLibrary_GenerateCustomEquipment::Target' has a wrong offset!");
static_assert(offsetof(CustomEquipmentFunctionLibrary_GenerateCustomEquipment, Equipment) == 0x000008, "Member 'CustomEquipmentFunctionLibrary_GenerateCustomEquipment::Equipment' has a wrong offset!");

// Function DarwinGame.CustomEquipmentFunctionLibrary.LotteryRivalTeamEquipment
// 0x0008 (0x0008 - 0x0000)
struct CustomEquipmentFunctionLibrary_LotteryRivalTeamEquipment final
{
public:
	class AMonster*                               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEquipmentFunctionLibrary_LotteryRivalTeamEquipment) == 0x000008, "Wrong alignment on CustomEquipmentFunctionLibrary_LotteryRivalTeamEquipment");
static_assert(sizeof(CustomEquipmentFunctionLibrary_LotteryRivalTeamEquipment) == 0x000008, "Wrong size on CustomEquipmentFunctionLibrary_LotteryRivalTeamEquipment");
static_assert(offsetof(CustomEquipmentFunctionLibrary_LotteryRivalTeamEquipment, Target) == 0x000000, "Member 'CustomEquipmentFunctionLibrary_LotteryRivalTeamEquipment::Target' has a wrong offset!");

// Function DarwinGame.DamageCollisionComponent.AddTask
// 0x0010 (0x0010 - 0x0000)
struct DamageCollisionComponent_AddTask final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamageCollisionTask*                   Task;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageCollisionComponent_AddTask) == 0x000008, "Wrong alignment on DamageCollisionComponent_AddTask");
static_assert(sizeof(DamageCollisionComponent_AddTask) == 0x000010, "Wrong size on DamageCollisionComponent_AddTask");
static_assert(offsetof(DamageCollisionComponent_AddTask, Key) == 0x000000, "Member 'DamageCollisionComponent_AddTask::Key' has a wrong offset!");
static_assert(offsetof(DamageCollisionComponent_AddTask, Task) == 0x000008, "Member 'DamageCollisionComponent_AddTask::Task' has a wrong offset!");

// Function DarwinGame.DamageCollisionComponent.RemoveTask
// 0x0004 (0x0004 - 0x0000)
struct DamageCollisionComponent_RemoveTask final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageCollisionComponent_RemoveTask) == 0x000004, "Wrong alignment on DamageCollisionComponent_RemoveTask");
static_assert(sizeof(DamageCollisionComponent_RemoveTask) == 0x000004, "Wrong size on DamageCollisionComponent_RemoveTask");
static_assert(offsetof(DamageCollisionComponent_RemoveTask, Key) == 0x000000, "Member 'DamageCollisionComponent_RemoveTask::Key' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsTypeHide
// 0x0002 (0x0002 - 0x0000)
struct DamageElementInterface_IsTypeHide final
{
public:
	ECollisionHiddenType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsTypeHide) == 0x000001, "Wrong alignment on DamageElementInterface_IsTypeHide");
static_assert(sizeof(DamageElementInterface_IsTypeHide) == 0x000002, "Wrong size on DamageElementInterface_IsTypeHide");
static_assert(offsetof(DamageElementInterface_IsTypeHide, Type) == 0x000000, "Member 'DamageElementInterface_IsTypeHide::Type' has a wrong offset!");
static_assert(offsetof(DamageElementInterface_IsTypeHide, ReturnValue) == 0x000001, "Member 'DamageElementInterface_IsTypeHide::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.SetEnableWeakPoint
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_SetEnableWeakPoint final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_SetEnableWeakPoint) == 0x000001, "Wrong alignment on DamageElementInterface_SetEnableWeakPoint");
static_assert(sizeof(DamageElementInterface_SetEnableWeakPoint) == 0x000001, "Wrong size on DamageElementInterface_SetEnableWeakPoint");
static_assert(offsetof(DamageElementInterface_SetEnableWeakPoint, enable) == 0x000000, "Member 'DamageElementInterface_SetEnableWeakPoint::enable' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.SetHide
// 0x0002 (0x0002 - 0x0000)
struct DamageElementInterface_SetHide final
{
public:
	ECollisionHiddenType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hide;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_SetHide) == 0x000001, "Wrong alignment on DamageElementInterface_SetHide");
static_assert(sizeof(DamageElementInterface_SetHide) == 0x000002, "Wrong size on DamageElementInterface_SetHide");
static_assert(offsetof(DamageElementInterface_SetHide, Type) == 0x000000, "Member 'DamageElementInterface_SetHide::Type' has a wrong offset!");
static_assert(offsetof(DamageElementInterface_SetHide, hide) == 0x000001, "Member 'DamageElementInterface_SetHide::hide' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.GetAimWeight
// 0x0004 (0x0004 - 0x0000)
struct DamageElementInterface_GetAimWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_GetAimWeight) == 0x000004, "Wrong alignment on DamageElementInterface_GetAimWeight");
static_assert(sizeof(DamageElementInterface_GetAimWeight) == 0x000004, "Wrong size on DamageElementInterface_GetAimWeight");
static_assert(offsetof(DamageElementInterface_GetAimWeight, ReturnValue) == 0x000000, "Member 'DamageElementInterface_GetAimWeight::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.GetDamageRate
// 0x0004 (0x0004 - 0x0000)
struct DamageElementInterface_GetDamageRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_GetDamageRate) == 0x000004, "Wrong alignment on DamageElementInterface_GetDamageRate");
static_assert(sizeof(DamageElementInterface_GetDamageRate) == 0x000004, "Wrong size on DamageElementInterface_GetDamageRate");
static_assert(offsetof(DamageElementInterface_GetDamageRate, ReturnValue) == 0x000000, "Member 'DamageElementInterface_GetDamageRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsCenterPoint
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_IsCenterPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsCenterPoint) == 0x000001, "Wrong alignment on DamageElementInterface_IsCenterPoint");
static_assert(sizeof(DamageElementInterface_IsCenterPoint) == 0x000001, "Wrong size on DamageElementInterface_IsCenterPoint");
static_assert(offsetof(DamageElementInterface_IsCenterPoint, ReturnValue) == 0x000000, "Member 'DamageElementInterface_IsCenterPoint::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsEnableWeakPoint
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_IsEnableWeakPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsEnableWeakPoint) == 0x000001, "Wrong alignment on DamageElementInterface_IsEnableWeakPoint");
static_assert(sizeof(DamageElementInterface_IsEnableWeakPoint) == 0x000001, "Wrong size on DamageElementInterface_IsEnableWeakPoint");
static_assert(offsetof(DamageElementInterface_IsEnableWeakPoint, ReturnValue) == 0x000000, "Member 'DamageElementInterface_IsEnableWeakPoint::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsIgnoreAimSelectableList
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_IsIgnoreAimSelectableList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsIgnoreAimSelectableList) == 0x000001, "Wrong alignment on DamageElementInterface_IsIgnoreAimSelectableList");
static_assert(sizeof(DamageElementInterface_IsIgnoreAimSelectableList) == 0x000001, "Wrong size on DamageElementInterface_IsIgnoreAimSelectableList");
static_assert(offsetof(DamageElementInterface_IsIgnoreAimSelectableList, ReturnValue) == 0x000000, "Member 'DamageElementInterface_IsIgnoreAimSelectableList::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsMustAimed
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_IsMustAimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsMustAimed) == 0x000001, "Wrong alignment on DamageElementInterface_IsMustAimed");
static_assert(sizeof(DamageElementInterface_IsMustAimed) == 0x000001, "Wrong size on DamageElementInterface_IsMustAimed");
static_assert(offsetof(DamageElementInterface_IsMustAimed, ReturnValue) == 0x000000, "Member 'DamageElementInterface_IsMustAimed::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsNeverTargeted
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_IsNeverTargeted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsNeverTargeted) == 0x000001, "Wrong alignment on DamageElementInterface_IsNeverTargeted");
static_assert(sizeof(DamageElementInterface_IsNeverTargeted) == 0x000001, "Wrong size on DamageElementInterface_IsNeverTargeted");
static_assert(offsetof(DamageElementInterface_IsNeverTargeted, ReturnValue) == 0x000000, "Member 'DamageElementInterface_IsNeverTargeted::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsNotAbleToPenetrate
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_IsNotAbleToPenetrate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsNotAbleToPenetrate) == 0x000001, "Wrong alignment on DamageElementInterface_IsNotAbleToPenetrate");
static_assert(sizeof(DamageElementInterface_IsNotAbleToPenetrate) == 0x000001, "Wrong size on DamageElementInterface_IsNotAbleToPenetrate");
static_assert(offsetof(DamageElementInterface_IsNotAbleToPenetrate, ReturnValue) == 0x000000, "Member 'DamageElementInterface_IsNotAbleToPenetrate::ReturnValue' has a wrong offset!");

// Function DarwinGame.DamageElementInterface.IsWeakPoint
// 0x0001 (0x0001 - 0x0000)
struct DamageElementInterface_IsWeakPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamageElementInterface_IsWeakPoint) == 0x000001, "Wrong alignment on DamageElementInterface_IsWeakPoint");
static_assert(sizeof(DamageElementInterface_IsWeakPoint) == 0x000001, "Wrong size on DamageElementInterface_IsWeakPoint");
static_assert(offsetof(DamageElementInterface_IsWeakPoint, ReturnValue) == 0x000000, "Member 'DamageElementInterface_IsWeakPoint::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinEventFlagDefinition.IsDebugEventEnableFlag
// 0x0001 (0x0001 - 0x0000)
struct DarwinEventFlagDefinition_IsDebugEventEnableFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinEventFlagDefinition_IsDebugEventEnableFlag) == 0x000001, "Wrong alignment on DarwinEventFlagDefinition_IsDebugEventEnableFlag");
static_assert(sizeof(DarwinEventFlagDefinition_IsDebugEventEnableFlag) == 0x000001, "Wrong size on DarwinEventFlagDefinition_IsDebugEventEnableFlag");
static_assert(offsetof(DarwinEventFlagDefinition_IsDebugEventEnableFlag, ReturnValue) == 0x000000, "Member 'DarwinEventFlagDefinition_IsDebugEventEnableFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinEventFlagDefinition.SetDebugEventEnableFlag
// 0x0001 (0x0001 - 0x0000)
struct DarwinEventFlagDefinition_SetDebugEventEnableFlag final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinEventFlagDefinition_SetDebugEventEnableFlag) == 0x000001, "Wrong alignment on DarwinEventFlagDefinition_SetDebugEventEnableFlag");
static_assert(sizeof(DarwinEventFlagDefinition_SetDebugEventEnableFlag) == 0x000001, "Wrong size on DarwinEventFlagDefinition_SetDebugEventEnableFlag");
static_assert(offsetof(DarwinEventFlagDefinition_SetDebugEventEnableFlag, flg) == 0x000000, "Member 'DarwinEventFlagDefinition_SetDebugEventEnableFlag::flg' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.SetCharacterCustomEquip
// 0x0018 (0x0018 - 0x0000)
struct DarwinLevelSequenceDirector_SetCharacterCustomEquip final
{
public:
	class AGPACharacter*                          GPACharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomEquipmentKind                          CustomKind;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdditionalEquipment;                               // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdditionalMaterial;                                // 0x0012(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamForce                               RivalTeamForce;                                    // 0x0013(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeader;                                          // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_SetCharacterCustomEquip) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_SetCharacterCustomEquip");
static_assert(sizeof(DarwinLevelSequenceDirector_SetCharacterCustomEquip) == 0x000018, "Wrong size on DarwinLevelSequenceDirector_SetCharacterCustomEquip");
static_assert(offsetof(DarwinLevelSequenceDirector_SetCharacterCustomEquip, GPACharacter) == 0x000000, "Member 'DarwinLevelSequenceDirector_SetCharacterCustomEquip::GPACharacter' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_SetCharacterCustomEquip, KindId) == 0x000008, "Member 'DarwinLevelSequenceDirector_SetCharacterCustomEquip::KindId' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_SetCharacterCustomEquip, CustomKind) == 0x000010, "Member 'DarwinLevelSequenceDirector_SetCharacterCustomEquip::CustomKind' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_SetCharacterCustomEquip, AdditionalEquipment) == 0x000011, "Member 'DarwinLevelSequenceDirector_SetCharacterCustomEquip::AdditionalEquipment' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_SetCharacterCustomEquip, AdditionalMaterial) == 0x000012, "Member 'DarwinLevelSequenceDirector_SetCharacterCustomEquip::AdditionalMaterial' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_SetCharacterCustomEquip, RivalTeamForce) == 0x000013, "Member 'DarwinLevelSequenceDirector_SetCharacterCustomEquip::RivalTeamForce' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_SetCharacterCustomEquip, IsLeader) == 0x000014, "Member 'DarwinLevelSequenceDirector_SetCharacterCustomEquip::IsLeader' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.AddLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_AddLookAtTarget final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_AddLookAtTarget) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_AddLookAtTarget");
static_assert(sizeof(DarwinLevelSequenceDirector_AddLookAtTarget) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_AddLookAtTarget");
static_assert(offsetof(DarwinLevelSequenceDirector_AddLookAtTarget, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_AddLookAtTarget::Character' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.ChangeFacial
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_ChangeFacial final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteType                                    Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_ChangeFacial) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_ChangeFacial");
static_assert(sizeof(DarwinLevelSequenceDirector_ChangeFacial) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_ChangeFacial");
static_assert(offsetof(DarwinLevelSequenceDirector_ChangeFacial, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_ChangeFacial::Character' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_ChangeFacial, Type) == 0x000008, "Member 'DarwinLevelSequenceDirector_ChangeFacial::Type' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.CheckAndOpenTips
// 0x000C (0x000C - 0x0000)
struct DarwinLevelSequenceDirector_CheckAndOpenTips final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_CheckAndOpenTips) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_CheckAndOpenTips");
static_assert(sizeof(DarwinLevelSequenceDirector_CheckAndOpenTips) == 0x00000C, "Wrong size on DarwinLevelSequenceDirector_CheckAndOpenTips");
static_assert(offsetof(DarwinLevelSequenceDirector_CheckAndOpenTips, ItemId) == 0x000000, "Member 'DarwinLevelSequenceDirector_CheckAndOpenTips::ItemId' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_CheckAndOpenTips, ReturnValue) == 0x000008, "Member 'DarwinLevelSequenceDirector_CheckAndOpenTips::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.CheckBonFireIsActive
// 0x000C (0x000C - 0x0000)
struct DarwinLevelSequenceDirector_CheckBonFireIsActive final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_CheckBonFireIsActive) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_CheckBonFireIsActive");
static_assert(sizeof(DarwinLevelSequenceDirector_CheckBonFireIsActive) == 0x00000C, "Wrong size on DarwinLevelSequenceDirector_CheckBonFireIsActive");
static_assert(offsetof(DarwinLevelSequenceDirector_CheckBonFireIsActive, ItemId) == 0x000000, "Member 'DarwinLevelSequenceDirector_CheckBonFireIsActive::ItemId' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_CheckBonFireIsActive, ReturnValue) == 0x000008, "Member 'DarwinLevelSequenceDirector_CheckBonFireIsActive::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.CreateTextID
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_CreateTextID final
{
public:
	struct FDrawTextInfo                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_CreateTextID) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_CreateTextID");
static_assert(sizeof(DarwinLevelSequenceDirector_CreateTextID) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_CreateTextID");
static_assert(offsetof(DarwinLevelSequenceDirector_CreateTextID, ReturnValue) == 0x000000, "Member 'DarwinLevelSequenceDirector_CreateTextID::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.DarwinResetBindings
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_DarwinResetBindings final
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_DarwinResetBindings) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_DarwinResetBindings");
static_assert(sizeof(DarwinLevelSequenceDirector_DarwinResetBindings) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_DarwinResetBindings");
static_assert(offsetof(DarwinLevelSequenceDirector_DarwinResetBindings, LevelSequenceActor) == 0x000000, "Member 'DarwinLevelSequenceDirector_DarwinResetBindings::LevelSequenceActor' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.DisplayMovie
// 0x000C (0x000C - 0x0000)
struct DarwinLevelSequenceDirector_DisplayMovie final
{
public:
	class FName                                   movieName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_DisplayMovie) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_DisplayMovie");
static_assert(sizeof(DarwinLevelSequenceDirector_DisplayMovie) == 0x00000C, "Wrong size on DarwinLevelSequenceDirector_DisplayMovie");
static_assert(offsetof(DarwinLevelSequenceDirector_DisplayMovie, movieName) == 0x000000, "Member 'DarwinLevelSequenceDirector_DisplayMovie::movieName' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_DisplayMovie, IsLoop) == 0x000008, "Member 'DarwinLevelSequenceDirector_DisplayMovie::IsLoop' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.DisplayNpcNickName
// 0x000C (0x000C - 0x0000)
struct DarwinLevelSequenceDirector_DisplayNpcNickName final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAnotherLayout;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_DisplayNpcNickName) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_DisplayNpcNickName");
static_assert(sizeof(DarwinLevelSequenceDirector_DisplayNpcNickName) == 0x00000C, "Wrong size on DarwinLevelSequenceDirector_DisplayNpcNickName");
static_assert(offsetof(DarwinLevelSequenceDirector_DisplayNpcNickName, NpcID) == 0x000000, "Member 'DarwinLevelSequenceDirector_DisplayNpcNickName::NpcID' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_DisplayNpcNickName, IsAnotherLayout) == 0x000008, "Member 'DarwinLevelSequenceDirector_DisplayNpcNickName::IsAnotherLayout' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.DisplayPicture
// 0x000C (0x000C - 0x0000)
struct DarwinLevelSequenceDirector_DisplayPicture final
{
public:
	class FName                                   PictureID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverMovieUI;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_DisplayPicture) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_DisplayPicture");
static_assert(sizeof(DarwinLevelSequenceDirector_DisplayPicture) == 0x00000C, "Wrong size on DarwinLevelSequenceDirector_DisplayPicture");
static_assert(offsetof(DarwinLevelSequenceDirector_DisplayPicture, PictureID) == 0x000000, "Member 'DarwinLevelSequenceDirector_DisplayPicture::PictureID' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_DisplayPicture, IsOverMovieUI) == 0x000008, "Member 'DarwinLevelSequenceDirector_DisplayPicture::IsOverMovieUI' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.FadeInMovie
// 0x0004 (0x0004 - 0x0000)
struct DarwinLevelSequenceDirector_FadeInMovie final
{
public:
	float                                         second;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_FadeInMovie) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_FadeInMovie");
static_assert(sizeof(DarwinLevelSequenceDirector_FadeInMovie) == 0x000004, "Wrong size on DarwinLevelSequenceDirector_FadeInMovie");
static_assert(offsetof(DarwinLevelSequenceDirector_FadeInMovie, second) == 0x000000, "Member 'DarwinLevelSequenceDirector_FadeInMovie::second' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.FadeOutMovie
// 0x0004 (0x0004 - 0x0000)
struct DarwinLevelSequenceDirector_FadeOutMovie final
{
public:
	float                                         second;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_FadeOutMovie) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_FadeOutMovie");
static_assert(sizeof(DarwinLevelSequenceDirector_FadeOutMovie) == 0x000004, "Wrong size on DarwinLevelSequenceDirector_FadeOutMovie");
static_assert(offsetof(DarwinLevelSequenceDirector_FadeOutMovie, second) == 0x000000, "Member 'DarwinLevelSequenceDirector_FadeOutMovie::second' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.HideCharactersForPlayer
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_HideCharactersForPlayer final
{
public:
	class ALevelSequenceActor*                    rootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_HideCharactersForPlayer) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_HideCharactersForPlayer");
static_assert(sizeof(DarwinLevelSequenceDirector_HideCharactersForPlayer) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_HideCharactersForPlayer");
static_assert(offsetof(DarwinLevelSequenceDirector_HideCharactersForPlayer, rootActor) == 0x000000, "Member 'DarwinLevelSequenceDirector_HideCharactersForPlayer::rootActor' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.HideDefaultRebindCharacters
// 0x0058 (0x0058 - 0x0000)
struct DarwinLevelSequenceDirector_HideDefaultRebindCharacters final
{
public:
	class ALevelSequenceActor*                    rootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FST_SequencerRebindOrder> rebindOders;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_HideDefaultRebindCharacters) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_HideDefaultRebindCharacters");
static_assert(sizeof(DarwinLevelSequenceDirector_HideDefaultRebindCharacters) == 0x000058, "Wrong size on DarwinLevelSequenceDirector_HideDefaultRebindCharacters");
static_assert(offsetof(DarwinLevelSequenceDirector_HideDefaultRebindCharacters, rootActor) == 0x000000, "Member 'DarwinLevelSequenceDirector_HideDefaultRebindCharacters::rootActor' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_HideDefaultRebindCharacters, rebindOders) == 0x000008, "Member 'DarwinLevelSequenceDirector_HideDefaultRebindCharacters::rebindOders' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.IsFindBindingTag
// 0x0020 (0x0020 - 0x0000)
struct DarwinLevelSequenceDirector_IsFindBindingTag final
{
public:
	class ALevelSequenceActor*                    rootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CheckTag;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_IsFindBindingTag) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_IsFindBindingTag");
static_assert(sizeof(DarwinLevelSequenceDirector_IsFindBindingTag) == 0x000020, "Wrong size on DarwinLevelSequenceDirector_IsFindBindingTag");
static_assert(offsetof(DarwinLevelSequenceDirector_IsFindBindingTag, rootActor) == 0x000000, "Member 'DarwinLevelSequenceDirector_IsFindBindingTag::rootActor' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_IsFindBindingTag, CheckTag) == 0x000008, "Member 'DarwinLevelSequenceDirector_IsFindBindingTag::CheckTag' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_IsFindBindingTag, ReturnValue) == 0x000018, "Member 'DarwinLevelSequenceDirector_IsFindBindingTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.IsOpenWaitUI
// 0x0001 (0x0001 - 0x0000)
struct DarwinLevelSequenceDirector_IsOpenWaitUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_IsOpenWaitUI) == 0x000001, "Wrong alignment on DarwinLevelSequenceDirector_IsOpenWaitUI");
static_assert(sizeof(DarwinLevelSequenceDirector_IsOpenWaitUI) == 0x000001, "Wrong size on DarwinLevelSequenceDirector_IsOpenWaitUI");
static_assert(offsetof(DarwinLevelSequenceDirector_IsOpenWaitUI, ReturnValue) == 0x000000, "Member 'DarwinLevelSequenceDirector_IsOpenWaitUI::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.JumpToMarkedFrame
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_JumpToMarkedFrame final
{
public:
	class FString                                 InLabel;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_JumpToMarkedFrame) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_JumpToMarkedFrame");
static_assert(sizeof(DarwinLevelSequenceDirector_JumpToMarkedFrame) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_JumpToMarkedFrame");
static_assert(offsetof(DarwinLevelSequenceDirector_JumpToMarkedFrame, InLabel) == 0x000000, "Member 'DarwinLevelSequenceDirector_JumpToMarkedFrame::InLabel' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.OpenLithographyUI
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_OpenLithographyUI final
{
public:
	class FName                                   MessageID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_OpenLithographyUI) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_OpenLithographyUI");
static_assert(sizeof(DarwinLevelSequenceDirector_OpenLithographyUI) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_OpenLithographyUI");
static_assert(offsetof(DarwinLevelSequenceDirector_OpenLithographyUI, MessageID) == 0x000000, "Member 'DarwinLevelSequenceDirector_OpenLithographyUI::MessageID' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.OpenQuestRewardWindow
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_OpenQuestRewardWindow final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_OpenQuestRewardWindow) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_OpenQuestRewardWindow");
static_assert(sizeof(DarwinLevelSequenceDirector_OpenQuestRewardWindow) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_OpenQuestRewardWindow");
static_assert(offsetof(DarwinLevelSequenceDirector_OpenQuestRewardWindow, QuestID) == 0x000000, "Member 'DarwinLevelSequenceDirector_OpenQuestRewardWindow::QuestID' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.PauseCharacters
// 0x0004 (0x0004 - 0x0000)
struct DarwinLevelSequenceDirector_PauseCharacters final
{
public:
	float                                         blendFrame;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_PauseCharacters) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_PauseCharacters");
static_assert(sizeof(DarwinLevelSequenceDirector_PauseCharacters) == 0x000004, "Wrong size on DarwinLevelSequenceDirector_PauseCharacters");
static_assert(offsetof(DarwinLevelSequenceDirector_PauseCharacters, blendFrame) == 0x000000, "Member 'DarwinLevelSequenceDirector_PauseCharacters::blendFrame' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.PlayBlink
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_PlayBlink final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteBlinkType                               Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_PlayBlink) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_PlayBlink");
static_assert(sizeof(DarwinLevelSequenceDirector_PlayBlink) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_PlayBlink");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayBlink, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_PlayBlink::Character' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayBlink, Type) == 0x000008, "Member 'DarwinLevelSequenceDirector_PlayBlink::Type' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayBlink, BlendTime) == 0x00000C, "Member 'DarwinLevelSequenceDirector_PlayBlink::BlendTime' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.PlayEmoteBody
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_PlayEmoteBody final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteType                                    Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_PlayEmoteBody) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_PlayEmoteBody");
static_assert(sizeof(DarwinLevelSequenceDirector_PlayEmoteBody) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_PlayEmoteBody");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayEmoteBody, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_PlayEmoteBody::Character' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayEmoteBody, Type) == 0x000008, "Member 'DarwinLevelSequenceDirector_PlayEmoteBody::Type' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.PlayUIOneShot
// 0x0018 (0x0018 - 0x0000)
struct DarwinLevelSequenceDirector_PlayUIOneShot final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UIName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_PlayUIOneShot) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_PlayUIOneShot");
static_assert(sizeof(DarwinLevelSequenceDirector_PlayUIOneShot) == 0x000018, "Wrong size on DarwinLevelSequenceDirector_PlayUIOneShot");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayUIOneShot, EventID) == 0x000000, "Member 'DarwinLevelSequenceDirector_PlayUIOneShot::EventID' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayUIOneShot, UIName) == 0x000008, "Member 'DarwinLevelSequenceDirector_PlayUIOneShot::UIName' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayUIOneShot, FadeTime) == 0x000010, "Member 'DarwinLevelSequenceDirector_PlayUIOneShot::FadeTime' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayUIOneShot, ReturnValue) == 0x000014, "Member 'DarwinLevelSequenceDirector_PlayUIOneShot::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.PlayVocalize
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_PlayVocalize final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteVocalizeType                            Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_PlayVocalize) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_PlayVocalize");
static_assert(sizeof(DarwinLevelSequenceDirector_PlayVocalize) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_PlayVocalize");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayVocalize, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_PlayVocalize::Character' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayVocalize, Type) == 0x000008, "Member 'DarwinLevelSequenceDirector_PlayVocalize::Type' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PlayVocalize, BlendTime) == 0x00000C, "Member 'DarwinLevelSequenceDirector_PlayVocalize::BlendTime' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.PrepareMovie
// 0x000C (0x000C - 0x0000)
struct DarwinLevelSequenceDirector_PrepareMovie final
{
public:
	class FName                                   movieName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_PrepareMovie) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_PrepareMovie");
static_assert(sizeof(DarwinLevelSequenceDirector_PrepareMovie) == 0x00000C, "Wrong size on DarwinLevelSequenceDirector_PrepareMovie");
static_assert(offsetof(DarwinLevelSequenceDirector_PrepareMovie, movieName) == 0x000000, "Member 'DarwinLevelSequenceDirector_PrepareMovie::movieName' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_PrepareMovie, IsLoop) == 0x000008, "Member 'DarwinLevelSequenceDirector_PrepareMovie::IsLoop' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.RebindCharacters
// 0x0058 (0x0058 - 0x0000)
struct DarwinLevelSequenceDirector_RebindCharacters final
{
public:
	class ALevelSequenceActor*                    rootActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FST_SequencerRebindOrder> rebindOders;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_RebindCharacters) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_RebindCharacters");
static_assert(sizeof(DarwinLevelSequenceDirector_RebindCharacters) == 0x000058, "Wrong size on DarwinLevelSequenceDirector_RebindCharacters");
static_assert(offsetof(DarwinLevelSequenceDirector_RebindCharacters, rootActor) == 0x000000, "Member 'DarwinLevelSequenceDirector_RebindCharacters::rootActor' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_RebindCharacters, rebindOders) == 0x000008, "Member 'DarwinLevelSequenceDirector_RebindCharacters::rebindOders' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.ResumeCharacters
// 0x0004 (0x0004 - 0x0000)
struct DarwinLevelSequenceDirector_ResumeCharacters final
{
public:
	float                                         blendFrame;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_ResumeCharacters) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_ResumeCharacters");
static_assert(sizeof(DarwinLevelSequenceDirector_ResumeCharacters) == 0x000004, "Wrong size on DarwinLevelSequenceDirector_ResumeCharacters");
static_assert(offsetof(DarwinLevelSequenceDirector_ResumeCharacters, blendFrame) == 0x000000, "Member 'DarwinLevelSequenceDirector_ResumeCharacters::blendFrame' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.SetEnableFootIK
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_SetEnableFootIK final
{
public:
	class AGameCharacter*                         TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetFlag;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarwinLevelSequenceDirector_SetEnableFootIK) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_SetEnableFootIK");
static_assert(sizeof(DarwinLevelSequenceDirector_SetEnableFootIK) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_SetEnableFootIK");
static_assert(offsetof(DarwinLevelSequenceDirector_SetEnableFootIK, TargetCharacter) == 0x000000, "Member 'DarwinLevelSequenceDirector_SetEnableFootIK::TargetCharacter' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_SetEnableFootIK, bSetFlag) == 0x000008, "Member 'DarwinLevelSequenceDirector_SetEnableFootIK::bSetFlag' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.SetEnableFootIKAll
// 0x0001 (0x0001 - 0x0000)
struct DarwinLevelSequenceDirector_SetEnableFootIKAll final
{
public:
	bool                                          bSetFlag;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_SetEnableFootIKAll) == 0x000001, "Wrong alignment on DarwinLevelSequenceDirector_SetEnableFootIKAll");
static_assert(sizeof(DarwinLevelSequenceDirector_SetEnableFootIKAll) == 0x000001, "Wrong size on DarwinLevelSequenceDirector_SetEnableFootIKAll");
static_assert(offsetof(DarwinLevelSequenceDirector_SetEnableFootIKAll, bSetFlag) == 0x000000, "Member 'DarwinLevelSequenceDirector_SetEnableFootIKAll::bSetFlag' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.SetRendringMode
// 0x0001 (0x0001 - 0x0000)
struct DarwinLevelSequenceDirector_SetRendringMode final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_SetRendringMode) == 0x000001, "Wrong alignment on DarwinLevelSequenceDirector_SetRendringMode");
static_assert(sizeof(DarwinLevelSequenceDirector_SetRendringMode) == 0x000001, "Wrong size on DarwinLevelSequenceDirector_SetRendringMode");
static_assert(offsetof(DarwinLevelSequenceDirector_SetRendringMode, Flag) == 0x000000, "Member 'DarwinLevelSequenceDirector_SetRendringMode::Flag' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.SetVocalizeSyncDrawText
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_SetVocalizeSyncDrawText final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_SetVocalizeSyncDrawText) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_SetVocalizeSyncDrawText");
static_assert(sizeof(DarwinLevelSequenceDirector_SetVocalizeSyncDrawText) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_SetVocalizeSyncDrawText");
static_assert(offsetof(DarwinLevelSequenceDirector_SetVocalizeSyncDrawText, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_SetVocalizeSyncDrawText::Character' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.StopBlink
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_StopBlink final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_StopBlink) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_StopBlink");
static_assert(sizeof(DarwinLevelSequenceDirector_StopBlink) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_StopBlink");
static_assert(offsetof(DarwinLevelSequenceDirector_StopBlink, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_StopBlink::Character' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.StopEmoteBody
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_StopEmoteBody final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_StopEmoteBody) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_StopEmoteBody");
static_assert(sizeof(DarwinLevelSequenceDirector_StopEmoteBody) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_StopEmoteBody");
static_assert(offsetof(DarwinLevelSequenceDirector_StopEmoteBody, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_StopEmoteBody::Character' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.StopVocalize
// 0x0008 (0x0008 - 0x0000)
struct DarwinLevelSequenceDirector_StopVocalize final
{
public:
	class AGameCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_StopVocalize) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_StopVocalize");
static_assert(sizeof(DarwinLevelSequenceDirector_StopVocalize) == 0x000008, "Wrong size on DarwinLevelSequenceDirector_StopVocalize");
static_assert(offsetof(DarwinLevelSequenceDirector_StopVocalize, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_StopVocalize::Character' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.UpdateAnimTrack
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_UpdateAnimTrack final
{
public:
	const class AGameCharacter*                   Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_UpdateAnimTrack) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_UpdateAnimTrack");
static_assert(sizeof(DarwinLevelSequenceDirector_UpdateAnimTrack) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_UpdateAnimTrack");
static_assert(offsetof(DarwinLevelSequenceDirector_UpdateAnimTrack, Character) == 0x000000, "Member 'DarwinLevelSequenceDirector_UpdateAnimTrack::Character' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_UpdateAnimTrack, ActorName) == 0x000008, "Member 'DarwinLevelSequenceDirector_UpdateAnimTrack::ActorName' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.UpdateAnimTrackFromMesh
// 0x0010 (0x0010 - 0x0000)
struct DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh final
{
public:
	const class USkeletalMeshComponent*           Mesh;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh) == 0x000008, "Wrong alignment on DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh");
static_assert(sizeof(DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh) == 0x000010, "Wrong size on DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh");
static_assert(offsetof(DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh, Mesh) == 0x000000, "Member 'DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh::Mesh' has a wrong offset!");
static_assert(offsetof(DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh, ActorName) == 0x000008, "Member 'DarwinLevelSequenceDirector_UpdateAnimTrackFromMesh::ActorName' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.FrameRate
// 0x0004 (0x0004 - 0x0000)
struct DarwinLevelSequenceDirector_FrameRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_FrameRate) == 0x000004, "Wrong alignment on DarwinLevelSequenceDirector_FrameRate");
static_assert(sizeof(DarwinLevelSequenceDirector_FrameRate) == 0x000004, "Wrong size on DarwinLevelSequenceDirector_FrameRate");
static_assert(offsetof(DarwinLevelSequenceDirector_FrameRate, ReturnValue) == 0x000000, "Member 'DarwinLevelSequenceDirector_FrameRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.IsOpenBoardMenuMessageWindow
// 0x0001 (0x0001 - 0x0000)
struct DarwinLevelSequenceDirector_IsOpenBoardMenuMessageWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_IsOpenBoardMenuMessageWindow) == 0x000001, "Wrong alignment on DarwinLevelSequenceDirector_IsOpenBoardMenuMessageWindow");
static_assert(sizeof(DarwinLevelSequenceDirector_IsOpenBoardMenuMessageWindow) == 0x000001, "Wrong size on DarwinLevelSequenceDirector_IsOpenBoardMenuMessageWindow");
static_assert(offsetof(DarwinLevelSequenceDirector_IsOpenBoardMenuMessageWindow, ReturnValue) == 0x000000, "Member 'DarwinLevelSequenceDirector_IsOpenBoardMenuMessageWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.DarwinLevelSequenceDirector.IsOpenNetworkReturnMessageWindow
// 0x0001 (0x0001 - 0x0000)
struct DarwinLevelSequenceDirector_IsOpenNetworkReturnMessageWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarwinLevelSequenceDirector_IsOpenNetworkReturnMessageWindow) == 0x000001, "Wrong alignment on DarwinLevelSequenceDirector_IsOpenNetworkReturnMessageWindow");
static_assert(sizeof(DarwinLevelSequenceDirector_IsOpenNetworkReturnMessageWindow) == 0x000001, "Wrong size on DarwinLevelSequenceDirector_IsOpenNetworkReturnMessageWindow");
static_assert(offsetof(DarwinLevelSequenceDirector_IsOpenNetworkReturnMessageWindow, ReturnValue) == 0x000000, "Member 'DarwinLevelSequenceDirector_IsOpenNetworkReturnMessageWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.DebugEventRectActor.SetMaterialColorToEventType
// 0x0002 (0x0002 - 0x0000)
struct DebugEventRectActor_SetMaterialColorToEventType final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMoveForce;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugEventRectActor_SetMaterialColorToEventType) == 0x000001, "Wrong alignment on DebugEventRectActor_SetMaterialColorToEventType");
static_assert(sizeof(DebugEventRectActor_SetMaterialColorToEventType) == 0x000002, "Wrong size on DebugEventRectActor_SetMaterialColorToEventType");
static_assert(offsetof(DebugEventRectActor_SetMaterialColorToEventType, IsActive) == 0x000000, "Member 'DebugEventRectActor_SetMaterialColorToEventType::IsActive' has a wrong offset!");
static_assert(offsetof(DebugEventRectActor_SetMaterialColorToEventType, IsMoveForce) == 0x000001, "Member 'DebugEventRectActor_SetMaterialColorToEventType::IsMoveForce' has a wrong offset!");

// Function DarwinGame.ParamDataAsset.AddParamValue
// 0x0020 (0x0020 - 0x0000)
struct ParamDataAsset_AddParamValue final
{
public:
	class FName                                   ListName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndexName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParamDataAsset_AddParamValue) == 0x000004, "Wrong alignment on ParamDataAsset_AddParamValue");
static_assert(sizeof(ParamDataAsset_AddParamValue) == 0x000020, "Wrong size on ParamDataAsset_AddParamValue");
static_assert(offsetof(ParamDataAsset_AddParamValue, ListName) == 0x000000, "Member 'ParamDataAsset_AddParamValue::ListName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_AddParamValue, IndexName) == 0x000008, "Member 'ParamDataAsset_AddParamValue::IndexName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_AddParamValue, ParamName) == 0x000010, "Member 'ParamDataAsset_AddParamValue::ParamName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_AddParamValue, AddValue) == 0x000018, "Member 'ParamDataAsset_AddParamValue::AddValue' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_AddParamValue, ReturnValue) == 0x00001C, "Member 'ParamDataAsset_AddParamValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.ParamDataAsset.GetParamValue
// 0x001C (0x001C - 0x0000)
struct ParamDataAsset_GetParamValue final
{
public:
	class FName                                   ListName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndexName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParamDataAsset_GetParamValue) == 0x000004, "Wrong alignment on ParamDataAsset_GetParamValue");
static_assert(sizeof(ParamDataAsset_GetParamValue) == 0x00001C, "Wrong size on ParamDataAsset_GetParamValue");
static_assert(offsetof(ParamDataAsset_GetParamValue, ListName) == 0x000000, "Member 'ParamDataAsset_GetParamValue::ListName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_GetParamValue, IndexName) == 0x000008, "Member 'ParamDataAsset_GetParamValue::IndexName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_GetParamValue, ParamName) == 0x000010, "Member 'ParamDataAsset_GetParamValue::ParamName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_GetParamValue, ReturnValue) == 0x000018, "Member 'ParamDataAsset_GetParamValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.ParamDataAsset.ResetValue
// 0x001C (0x001C - 0x0000)
struct ParamDataAsset_ResetValue final
{
public:
	class FName                                   ListName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IndexName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParamDataAsset_ResetValue) == 0x000004, "Wrong alignment on ParamDataAsset_ResetValue");
static_assert(sizeof(ParamDataAsset_ResetValue) == 0x00001C, "Wrong size on ParamDataAsset_ResetValue");
static_assert(offsetof(ParamDataAsset_ResetValue, ListName) == 0x000000, "Member 'ParamDataAsset_ResetValue::ListName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_ResetValue, IndexName) == 0x000008, "Member 'ParamDataAsset_ResetValue::IndexName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_ResetValue, ParamName) == 0x000010, "Member 'ParamDataAsset_ResetValue::ParamName' has a wrong offset!");
static_assert(offsetof(ParamDataAsset_ResetValue, ReturnValue) == 0x000018, "Member 'ParamDataAsset_ResetValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.DesertGimmick.BossHit
// 0x0090 (0x0090 - 0x0000)
struct DesertGimmick_BossHit final
{
public:
	class AMonsterBoss*                           Boss;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Result;                                            // 0x0008(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DesertGimmick_BossHit) == 0x000008, "Wrong alignment on DesertGimmick_BossHit");
static_assert(sizeof(DesertGimmick_BossHit) == 0x000090, "Wrong size on DesertGimmick_BossHit");
static_assert(offsetof(DesertGimmick_BossHit, Boss) == 0x000000, "Member 'DesertGimmick_BossHit::Boss' has a wrong offset!");
static_assert(offsetof(DesertGimmick_BossHit, Result) == 0x000008, "Member 'DesertGimmick_BossHit::Result' has a wrong offset!");

// Function DarwinGame.DesertGimmick.GetBossHitResult
// 0x0088 (0x0088 - 0x0000)
struct DesertGimmick_GetBossHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DesertGimmick_GetBossHitResult) == 0x000004, "Wrong alignment on DesertGimmick_GetBossHitResult");
static_assert(sizeof(DesertGimmick_GetBossHitResult) == 0x000088, "Wrong size on DesertGimmick_GetBossHitResult");
static_assert(offsetof(DesertGimmick_GetBossHitResult, ReturnValue) == 0x000000, "Member 'DesertGimmick_GetBossHitResult::ReturnValue' has a wrong offset!");

// Function DarwinGame.DesertGimmick.GetHitBoss
// 0x0008 (0x0008 - 0x0000)
struct DesertGimmick_GetHitBoss final
{
public:
	class AMonsterBoss*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DesertGimmick_GetHitBoss) == 0x000008, "Wrong alignment on DesertGimmick_GetHitBoss");
static_assert(sizeof(DesertGimmick_GetHitBoss) == 0x000008, "Wrong size on DesertGimmick_GetHitBoss");
static_assert(offsetof(DesertGimmick_GetHitBoss, ReturnValue) == 0x000000, "Member 'DesertGimmick_GetHitBoss::ReturnValue' has a wrong offset!");

// Function DarwinGame.DesertGimmick.GimmickBreakEffect
// 0x0001 (0x0001 - 0x0000)
struct DesertGimmick_GimmickBreakEffect final
{
public:
	bool                                          destroy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DesertGimmick_GimmickBreakEffect) == 0x000001, "Wrong alignment on DesertGimmick_GimmickBreakEffect");
static_assert(sizeof(DesertGimmick_GimmickBreakEffect) == 0x000001, "Wrong size on DesertGimmick_GimmickBreakEffect");
static_assert(offsetof(DesertGimmick_GimmickBreakEffect, destroy) == 0x000000, "Member 'DesertGimmick_GimmickBreakEffect::destroy' has a wrong offset!");

// Function DarwinGame.DesertGimmick.HitCheckCylindrical
// 0x002C (0x002C - 0x0000)
struct DesertGimmick_HitCheckCylindrical final
{
public:
	struct FVector                                attacklocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         attackradius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         attackhalfheight;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetradius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targethalfheight;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DesertGimmick_HitCheckCylindrical) == 0x000004, "Wrong alignment on DesertGimmick_HitCheckCylindrical");
static_assert(sizeof(DesertGimmick_HitCheckCylindrical) == 0x00002C, "Wrong size on DesertGimmick_HitCheckCylindrical");
static_assert(offsetof(DesertGimmick_HitCheckCylindrical, attacklocation) == 0x000000, "Member 'DesertGimmick_HitCheckCylindrical::attacklocation' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckCylindrical, attackradius) == 0x00000C, "Member 'DesertGimmick_HitCheckCylindrical::attackradius' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckCylindrical, attackhalfheight) == 0x000010, "Member 'DesertGimmick_HitCheckCylindrical::attackhalfheight' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckCylindrical, TargetLocation) == 0x000014, "Member 'DesertGimmick_HitCheckCylindrical::TargetLocation' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckCylindrical, targetradius) == 0x000020, "Member 'DesertGimmick_HitCheckCylindrical::targetradius' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckCylindrical, targethalfheight) == 0x000024, "Member 'DesertGimmick_HitCheckCylindrical::targethalfheight' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckCylindrical, ReturnValue) == 0x000028, "Member 'DesertGimmick_HitCheckCylindrical::ReturnValue' has a wrong offset!");

// Function DarwinGame.DesertGimmick.HitCheckUnderGround
// 0x0024 (0x0024 - 0x0000)
struct DesertGimmick_HitCheckUnderGround final
{
public:
	struct FVector                                attacklocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         attackradius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetradius;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DesertGimmick_HitCheckUnderGround) == 0x000004, "Wrong alignment on DesertGimmick_HitCheckUnderGround");
static_assert(sizeof(DesertGimmick_HitCheckUnderGround) == 0x000024, "Wrong size on DesertGimmick_HitCheckUnderGround");
static_assert(offsetof(DesertGimmick_HitCheckUnderGround, attacklocation) == 0x000000, "Member 'DesertGimmick_HitCheckUnderGround::attacklocation' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckUnderGround, attackradius) == 0x00000C, "Member 'DesertGimmick_HitCheckUnderGround::attackradius' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckUnderGround, TargetLocation) == 0x000010, "Member 'DesertGimmick_HitCheckUnderGround::TargetLocation' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckUnderGround, targetradius) == 0x00001C, "Member 'DesertGimmick_HitCheckUnderGround::targetradius' has a wrong offset!");
static_assert(offsetof(DesertGimmick_HitCheckUnderGround, ReturnValue) == 0x000020, "Member 'DesertGimmick_HitCheckUnderGround::ReturnValue' has a wrong offset!");

// Function DarwinGame.DesertGimmick.IsBossHit
// 0x0001 (0x0001 - 0x0000)
struct DesertGimmick_IsBossHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DesertGimmick_IsBossHit) == 0x000001, "Wrong alignment on DesertGimmick_IsBossHit");
static_assert(sizeof(DesertGimmick_IsBossHit) == 0x000001, "Wrong size on DesertGimmick_IsBossHit");
static_assert(offsetof(DesertGimmick_IsBossHit, ReturnValue) == 0x000000, "Member 'DesertGimmick_IsBossHit::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIFieldActionGauge.SetGuideType
// 0x0001 (0x0001 - 0x0000)
struct UIFieldActionGauge_SetGuideType final
{
public:
	EInputGuideType                               GuideType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFieldActionGauge_SetGuideType) == 0x000001, "Wrong alignment on UIFieldActionGauge_SetGuideType");
static_assert(sizeof(UIFieldActionGauge_SetGuideType) == 0x000001, "Wrong size on UIFieldActionGauge_SetGuideType");
static_assert(offsetof(UIFieldActionGauge_SetGuideType, GuideType) == 0x000000, "Member 'UIFieldActionGauge_SetGuideType::GuideType' has a wrong offset!");

// Function DarwinGame.UIFieldActionGauge.SetPercent
// 0x0008 (0x0008 - 0x0000)
struct UIFieldActionGauge_SetPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasInput;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFieldActionGauge_SetPercent) == 0x000004, "Wrong alignment on UIFieldActionGauge_SetPercent");
static_assert(sizeof(UIFieldActionGauge_SetPercent) == 0x000008, "Wrong size on UIFieldActionGauge_SetPercent");
static_assert(offsetof(UIFieldActionGauge_SetPercent, Percent) == 0x000000, "Member 'UIFieldActionGauge_SetPercent::Percent' has a wrong offset!");
static_assert(offsetof(UIFieldActionGauge_SetPercent, HasInput) == 0x000004, "Member 'UIFieldActionGauge_SetPercent::HasInput' has a wrong offset!");

// Function DarwinGame.DungeonGimmickNPC.InitNPC
// 0x0008 (0x0008 - 0x0000)
struct DungeonGimmickNPC_InitNPC final
{
public:
	class ANPCBase*                               NpcObj;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DungeonGimmickNPC_InitNPC) == 0x000008, "Wrong alignment on DungeonGimmickNPC_InitNPC");
static_assert(sizeof(DungeonGimmickNPC_InitNPC) == 0x000008, "Wrong size on DungeonGimmickNPC_InitNPC");
static_assert(offsetof(DungeonGimmickNPC_InitNPC, NpcObj) == 0x000000, "Member 'DungeonGimmickNPC_InitNPC::NpcObj' has a wrong offset!");

// Function DarwinGame.DungeonStarScar.GetCoreStaticMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct DungeonStarScar_GetCoreStaticMeshComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DungeonStarScar_GetCoreStaticMeshComponent) == 0x000008, "Wrong alignment on DungeonStarScar_GetCoreStaticMeshComponent");
static_assert(sizeof(DungeonStarScar_GetCoreStaticMeshComponent) == 0x000008, "Wrong size on DungeonStarScar_GetCoreStaticMeshComponent");
static_assert(offsetof(DungeonStarScar_GetCoreStaticMeshComponent, ReturnValue) == 0x000000, "Member 'DungeonStarScar_GetCoreStaticMeshComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectBlueprintFunctionLibrary.SetAutoDestory
// 0x0010 (0x0010 - 0x0000)
struct EffectBlueprintFunctionLibrary_SetAutoDestory final
{
public:
	class UParticleSystemComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAutoDestory;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EffectBlueprintFunctionLibrary_SetAutoDestory) == 0x000008, "Wrong alignment on EffectBlueprintFunctionLibrary_SetAutoDestory");
static_assert(sizeof(EffectBlueprintFunctionLibrary_SetAutoDestory) == 0x000010, "Wrong size on EffectBlueprintFunctionLibrary_SetAutoDestory");
static_assert(offsetof(EffectBlueprintFunctionLibrary_SetAutoDestory, Component) == 0x000000, "Member 'EffectBlueprintFunctionLibrary_SetAutoDestory::Component' has a wrong offset!");
static_assert(offsetof(EffectBlueprintFunctionLibrary_SetAutoDestory, isAutoDestory) == 0x000008, "Member 'EffectBlueprintFunctionLibrary_SetAutoDestory::isAutoDestory' has a wrong offset!");

// Function DarwinGame.EffectManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct EffectManager_GetInstance final
{
public:
	class UEffectManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_GetInstance) == 0x000008, "Wrong alignment on EffectManager_GetInstance");
static_assert(sizeof(EffectManager_GetInstance) == 0x000008, "Wrong size on EffectManager_GetInstance");
static_assert(offsetof(EffectManager_GetInstance, ReturnValue) == 0x000000, "Member 'EffectManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.ReturnEffect
// 0x0008 (0x0008 - 0x0000)
struct EffectManager_ReturnEffect final
{
public:
	class AEffectBase*                            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_ReturnEffect) == 0x000008, "Wrong alignment on EffectManager_ReturnEffect");
static_assert(sizeof(EffectManager_ReturnEffect) == 0x000008, "Wrong size on EffectManager_ReturnEffect");
static_assert(offsetof(EffectManager_ReturnEffect, Effect) == 0x000000, "Member 'EffectManager_ReturnEffect::Effect' has a wrong offset!");

// Function DarwinGame.EffectManager.SearchEffectClass
// 0x0030 (0x0030 - 0x0000)
struct EffectManager_SearchEffectClass final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SearchEffectClass) == 0x000008, "Wrong alignment on EffectManager_SearchEffectClass");
static_assert(sizeof(EffectManager_SearchEffectClass) == 0x000030, "Wrong size on EffectManager_SearchEffectClass");
static_assert(offsetof(EffectManager_SearchEffectClass, ID) == 0x000000, "Member 'EffectManager_SearchEffectClass::ID' has a wrong offset!");
static_assert(offsetof(EffectManager_SearchEffectClass, ReturnValue) == 0x000008, "Member 'EffectManager_SearchEffectClass::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SearchPresetCount
// 0x000C (0x000C - 0x0000)
struct EffectManager_SearchPresetCount final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SearchPresetCount) == 0x000004, "Wrong alignment on EffectManager_SearchPresetCount");
static_assert(sizeof(EffectManager_SearchPresetCount) == 0x00000C, "Wrong size on EffectManager_SearchPresetCount");
static_assert(offsetof(EffectManager_SearchPresetCount, ID) == 0x000000, "Member 'EffectManager_SearchPresetCount::ID' has a wrong offset!");
static_assert(offsetof(EffectManager_SearchPresetCount, ReturnValue) == 0x000008, "Member 'EffectManager_SearchPresetCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SetMonsterEffect
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SetMonsterEffect final
{
public:
	class AEffectBase*                            monsterEffect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectDataTableID                            EffectType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          MonsterType;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          leave;                                             // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EffectManager_SetMonsterEffect) == 0x000008, "Wrong alignment on EffectManager_SetMonsterEffect");
static_assert(sizeof(EffectManager_SetMonsterEffect) == 0x000010, "Wrong size on EffectManager_SetMonsterEffect");
static_assert(offsetof(EffectManager_SetMonsterEffect, monsterEffect) == 0x000000, "Member 'EffectManager_SetMonsterEffect::monsterEffect' has a wrong offset!");
static_assert(offsetof(EffectManager_SetMonsterEffect, EffectType) == 0x000008, "Member 'EffectManager_SetMonsterEffect::EffectType' has a wrong offset!");
static_assert(offsetof(EffectManager_SetMonsterEffect, MonsterType) == 0x000009, "Member 'EffectManager_SetMonsterEffect::MonsterType' has a wrong offset!");
static_assert(offsetof(EffectManager_SetMonsterEffect, leave) == 0x00000A, "Member 'EffectManager_SetMonsterEffect::leave' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnAttachActor
// 0x0048 (0x0048 - 0x0000)
struct EffectManager_SpawnAttachActor final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                local_location;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               local_rotation;                                    // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                local_scale;                                       // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnAttachActor) == 0x000008, "Wrong alignment on EffectManager_SpawnAttachActor");
static_assert(sizeof(EffectManager_SpawnAttachActor) == 0x000048, "Wrong size on EffectManager_SpawnAttachActor");
static_assert(offsetof(EffectManager_SpawnAttachActor, ID) == 0x000000, "Member 'EffectManager_SpawnAttachActor::ID' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachActor, Parent) == 0x000008, "Member 'EffectManager_SpawnAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachActor, socket) == 0x000010, "Member 'EffectManager_SpawnAttachActor::socket' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachActor, local_location) == 0x000018, "Member 'EffectManager_SpawnAttachActor::local_location' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachActor, local_rotation) == 0x000024, "Member 'EffectManager_SpawnAttachActor::local_rotation' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachActor, local_scale) == 0x000030, "Member 'EffectManager_SpawnAttachActor::local_scale' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachActor, ReturnValue) == 0x000040, "Member 'EffectManager_SpawnAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnAttachComponent
// 0x0048 (0x0048 - 0x0000)
struct EffectManager_SpawnAttachComponent final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                local_location;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               local_rotation;                                    // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                local_scale;                                       // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnAttachComponent) == 0x000008, "Wrong alignment on EffectManager_SpawnAttachComponent");
static_assert(sizeof(EffectManager_SpawnAttachComponent) == 0x000048, "Wrong size on EffectManager_SpawnAttachComponent");
static_assert(offsetof(EffectManager_SpawnAttachComponent, ID) == 0x000000, "Member 'EffectManager_SpawnAttachComponent::ID' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachComponent, Parent) == 0x000008, "Member 'EffectManager_SpawnAttachComponent::Parent' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachComponent, socket) == 0x000010, "Member 'EffectManager_SpawnAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachComponent, local_location) == 0x000018, "Member 'EffectManager_SpawnAttachComponent::local_location' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachComponent, local_rotation) == 0x000024, "Member 'EffectManager_SpawnAttachComponent::local_rotation' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachComponent, local_scale) == 0x000030, "Member 'EffectManager_SpawnAttachComponent::local_scale' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttachComponent, ReturnValue) == 0x000040, "Member 'EffectManager_SpawnAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnAttackMagic
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnAttackMagic final
{
public:
	EAttackMagicEffectID                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicGradeEffectID                           Gragde;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicShotPhaseEffectID                       phase;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnAttackMagic) == 0x000008, "Wrong alignment on EffectManager_SpawnAttackMagic");
static_assert(sizeof(EffectManager_SpawnAttackMagic) == 0x000010, "Wrong size on EffectManager_SpawnAttackMagic");
static_assert(offsetof(EffectManager_SpawnAttackMagic, Type) == 0x000000, "Member 'EffectManager_SpawnAttackMagic::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttackMagic, Gragde) == 0x000001, "Member 'EffectManager_SpawnAttackMagic::Gragde' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttackMagic, phase) == 0x000002, "Member 'EffectManager_SpawnAttackMagic::phase' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnAttackMagic, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnAttackMagic::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnBattleCommon
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnBattleCommon final
{
public:
	EBattleCommonEffectID                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 Size;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnBattleCommon) == 0x000008, "Wrong alignment on EffectManager_SpawnBattleCommon");
static_assert(sizeof(EffectManager_SpawnBattleCommon) == 0x000010, "Wrong size on EffectManager_SpawnBattleCommon");
static_assert(offsetof(EffectManager_SpawnBattleCommon, Type) == 0x000000, "Member 'EffectManager_SpawnBattleCommon::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnBattleCommon, Size) == 0x000001, "Member 'EffectManager_SpawnBattleCommon::Size' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnBattleCommon, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnBattleCommon::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnBlessMove
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnBlessMove final
{
public:
	EBlessMoveEffectID                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicGradeEffectID                           Gragde;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlessMovePhaseEffectID                       phase;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnBlessMove) == 0x000008, "Wrong alignment on EffectManager_SpawnBlessMove");
static_assert(sizeof(EffectManager_SpawnBlessMove) == 0x000010, "Wrong size on EffectManager_SpawnBlessMove");
static_assert(offsetof(EffectManager_SpawnBlessMove, Type) == 0x000000, "Member 'EffectManager_SpawnBlessMove::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnBlessMove, Gragde) == 0x000001, "Member 'EffectManager_SpawnBlessMove::Gragde' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnBlessMove, phase) == 0x000002, "Member 'EffectManager_SpawnBlessMove::phase' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnBlessMove, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnBlessMove::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnBoss
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnBoss final
{
public:
	EBossEffectID                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKindEffectID                                 Kind;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnBoss) == 0x000008, "Wrong alignment on EffectManager_SpawnBoss");
static_assert(sizeof(EffectManager_SpawnBoss) == 0x000010, "Wrong size on EffectManager_SpawnBoss");
static_assert(offsetof(EffectManager_SpawnBoss, Type) == 0x000000, "Member 'EffectManager_SpawnBoss::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnBoss, Kind) == 0x000001, "Member 'EffectManager_SpawnBoss::Kind' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnBoss, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnBoss::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnCharacterCommon
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnCharacterCommon final
{
public:
	ECharacterCommonEffectID                      Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 Size;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnCharacterCommon) == 0x000008, "Wrong alignment on EffectManager_SpawnCharacterCommon");
static_assert(sizeof(EffectManager_SpawnCharacterCommon) == 0x000010, "Wrong size on EffectManager_SpawnCharacterCommon");
static_assert(offsetof(EffectManager_SpawnCharacterCommon, Type) == 0x000000, "Member 'EffectManager_SpawnCharacterCommon::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnCharacterCommon, Size) == 0x000001, "Member 'EffectManager_SpawnCharacterCommon::Size' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnCharacterCommon, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnCharacterCommon::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnDamage
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnDamage final
{
public:
	EDamageEffectID                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 Size;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnDamage) == 0x000008, "Wrong alignment on EffectManager_SpawnDamage");
static_assert(sizeof(EffectManager_SpawnDamage) == 0x000010, "Wrong size on EffectManager_SpawnDamage");
static_assert(offsetof(EffectManager_SpawnDamage, Type) == 0x000000, "Member 'EffectManager_SpawnDamage::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnDamage, Size) == 0x000001, "Member 'EffectManager_SpawnDamage::Size' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnDamage, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnDamage::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnEffect
// 0x0038 (0x0038 - 0x0000)
struct EffectManager_SpawnEffect final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                world_location;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               world_rotation;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                world_scale;                                       // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnEffect) == 0x000008, "Wrong alignment on EffectManager_SpawnEffect");
static_assert(sizeof(EffectManager_SpawnEffect) == 0x000038, "Wrong size on EffectManager_SpawnEffect");
static_assert(offsetof(EffectManager_SpawnEffect, ID) == 0x000000, "Member 'EffectManager_SpawnEffect::ID' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnEffect, world_location) == 0x000008, "Member 'EffectManager_SpawnEffect::world_location' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnEffect, world_rotation) == 0x000014, "Member 'EffectManager_SpawnEffect::world_rotation' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnEffect, world_scale) == 0x000020, "Member 'EffectManager_SpawnEffect::world_scale' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnEffect, ReturnValue) == 0x000030, "Member 'EffectManager_SpawnEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnEmotion
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnEmotion final
{
public:
	EEmotionEffectID                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 Size;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnEmotion) == 0x000008, "Wrong alignment on EffectManager_SpawnEmotion");
static_assert(sizeof(EffectManager_SpawnEmotion) == 0x000010, "Wrong size on EffectManager_SpawnEmotion");
static_assert(offsetof(EffectManager_SpawnEmotion, Type) == 0x000000, "Member 'EffectManager_SpawnEmotion::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnEmotion, Size) == 0x000001, "Member 'EffectManager_SpawnEmotion::Size' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnEmotion, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnEmotion::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnFootSmoke
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnFootSmoke final
{
public:
	EPhysicalSurfaceEffectTypeID                  SurfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootSmokeActionEffectTypeID                  Pattern;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnFootSmoke) == 0x000008, "Wrong alignment on EffectManager_SpawnFootSmoke");
static_assert(sizeof(EffectManager_SpawnFootSmoke) == 0x000010, "Wrong size on EffectManager_SpawnFootSmoke");
static_assert(offsetof(EffectManager_SpawnFootSmoke, SurfaceType) == 0x000000, "Member 'EffectManager_SpawnFootSmoke::SurfaceType' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnFootSmoke, Pattern) == 0x000001, "Member 'EffectManager_SpawnFootSmoke::Pattern' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnFootSmoke, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnFootSmoke::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnFootTerrain
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnFootTerrain final
{
public:
	EFootTerrainTypeID                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootSmokeActionEffectTypeID                  Pattern;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnFootTerrain) == 0x000008, "Wrong alignment on EffectManager_SpawnFootTerrain");
static_assert(sizeof(EffectManager_SpawnFootTerrain) == 0x000010, "Wrong size on EffectManager_SpawnFootTerrain");
static_assert(offsetof(EffectManager_SpawnFootTerrain, Type) == 0x000000, "Member 'EffectManager_SpawnFootTerrain::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnFootTerrain, Pattern) == 0x000001, "Member 'EffectManager_SpawnFootTerrain::Pattern' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnFootTerrain, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnFootTerrain::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnObjectBreak
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnObjectBreak final
{
public:
	EObjectBreakEffectID                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnObjectBreak) == 0x000008, "Wrong alignment on EffectManager_SpawnObjectBreak");
static_assert(sizeof(EffectManager_SpawnObjectBreak) == 0x000010, "Wrong size on EffectManager_SpawnObjectBreak");
static_assert(offsetof(EffectManager_SpawnObjectBreak, Type) == 0x000000, "Member 'EffectManager_SpawnObjectBreak::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnObjectBreak, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnObjectBreak::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnObjectCommon
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnObjectCommon final
{
public:
	EObjectCommonEffectID                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectPatternID                              Pattern;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnObjectCommon) == 0x000008, "Wrong alignment on EffectManager_SpawnObjectCommon");
static_assert(sizeof(EffectManager_SpawnObjectCommon) == 0x000010, "Wrong size on EffectManager_SpawnObjectCommon");
static_assert(offsetof(EffectManager_SpawnObjectCommon, Type) == 0x000000, "Member 'EffectManager_SpawnObjectCommon::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnObjectCommon, Pattern) == 0x000001, "Member 'EffectManager_SpawnObjectCommon::Pattern' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnObjectCommon, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnObjectCommon::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnSelfBuff
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnSelfBuff final
{
public:
	ESelfBuffEffectID                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 Size;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnSelfBuff) == 0x000008, "Wrong alignment on EffectManager_SpawnSelfBuff");
static_assert(sizeof(EffectManager_SpawnSelfBuff) == 0x000010, "Wrong size on EffectManager_SpawnSelfBuff");
static_assert(offsetof(EffectManager_SpawnSelfBuff, Type) == 0x000000, "Member 'EffectManager_SpawnSelfBuff::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSelfBuff, Size) == 0x000001, "Member 'EffectManager_SpawnSelfBuff::Size' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSelfBuff, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnSelfBuff::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnSkill
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnSkill final
{
public:
	ESkillEffectID                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKindEffectID                                 Kind;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicShotPhaseEffectID                       phase;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnSkill) == 0x000008, "Wrong alignment on EffectManager_SpawnSkill");
static_assert(sizeof(EffectManager_SpawnSkill) == 0x000010, "Wrong size on EffectManager_SpawnSkill");
static_assert(offsetof(EffectManager_SpawnSkill, Type) == 0x000000, "Member 'EffectManager_SpawnSkill::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSkill, Kind) == 0x000001, "Member 'EffectManager_SpawnSkill::Kind' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSkill, phase) == 0x000002, "Member 'EffectManager_SpawnSkill::phase' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSkill, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnSkill::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnSkillChain
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnSkillChain final
{
public:
	ESkillChainEffectID                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillChainPhaseEffectID                      phase;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnSkillChain) == 0x000008, "Wrong alignment on EffectManager_SpawnSkillChain");
static_assert(sizeof(EffectManager_SpawnSkillChain) == 0x000010, "Wrong size on EffectManager_SpawnSkillChain");
static_assert(offsetof(EffectManager_SpawnSkillChain, Type) == 0x000000, "Member 'EffectManager_SpawnSkillChain::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSkillChain, phase) == 0x000001, "Member 'EffectManager_SpawnSkillChain::phase' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSkillChain, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnSkillChain::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnSlingshot
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnSlingshot final
{
public:
	ESlingshotEffectID                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicGradeEffectID                           Gragde;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnSlingshot) == 0x000008, "Wrong alignment on EffectManager_SpawnSlingshot");
static_assert(sizeof(EffectManager_SpawnSlingshot) == 0x000010, "Wrong size on EffectManager_SpawnSlingshot");
static_assert(offsetof(EffectManager_SpawnSlingshot, Type) == 0x000000, "Member 'EffectManager_SpawnSlingshot::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSlingshot, Gragde) == 0x000001, "Member 'EffectManager_SpawnSlingshot::Gragde' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSlingshot, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnSlingshot::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnStatus
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnStatus final
{
public:
	EStatusEffectID                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 Size;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnStatus) == 0x000008, "Wrong alignment on EffectManager_SpawnStatus");
static_assert(sizeof(EffectManager_SpawnStatus) == 0x000010, "Wrong size on EffectManager_SpawnStatus");
static_assert(offsetof(EffectManager_SpawnStatus, Type) == 0x000000, "Member 'EffectManager_SpawnStatus::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnStatus, Size) == 0x000001, "Member 'EffectManager_SpawnStatus::Size' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnStatus, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnSupportMagic
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnSupportMagic final
{
public:
	ESupportMagicEffectID                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicGradeEffectID                           Gragde;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicShotPhaseEffectID                       phase;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnSupportMagic) == 0x000008, "Wrong alignment on EffectManager_SpawnSupportMagic");
static_assert(sizeof(EffectManager_SpawnSupportMagic) == 0x000010, "Wrong size on EffectManager_SpawnSupportMagic");
static_assert(offsetof(EffectManager_SpawnSupportMagic, Type) == 0x000000, "Member 'EffectManager_SpawnSupportMagic::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSupportMagic, Gragde) == 0x000001, "Member 'EffectManager_SpawnSupportMagic::Gragde' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSupportMagic, phase) == 0x000002, "Member 'EffectManager_SpawnSupportMagic::phase' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSupportMagic, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnSupportMagic::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.SpawnSupportMagicHit
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_SpawnSupportMagicHit final
{
public:
	ESupportMagicEffectID                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicGradeEffectID                           Gragde;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicShotPhaseEffectID                       phase;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 SizeID;                                            // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEffectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_SpawnSupportMagicHit) == 0x000008, "Wrong alignment on EffectManager_SpawnSupportMagicHit");
static_assert(sizeof(EffectManager_SpawnSupportMagicHit) == 0x000010, "Wrong size on EffectManager_SpawnSupportMagicHit");
static_assert(offsetof(EffectManager_SpawnSupportMagicHit, Type) == 0x000000, "Member 'EffectManager_SpawnSupportMagicHit::Type' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSupportMagicHit, Gragde) == 0x000001, "Member 'EffectManager_SpawnSupportMagicHit::Gragde' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSupportMagicHit, phase) == 0x000002, "Member 'EffectManager_SpawnSupportMagicHit::phase' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSupportMagicHit, SizeID) == 0x000003, "Member 'EffectManager_SpawnSupportMagicHit::SizeID' has a wrong offset!");
static_assert(offsetof(EffectManager_SpawnSupportMagicHit, ReturnValue) == 0x000008, "Member 'EffectManager_SpawnSupportMagicHit::ReturnValue' has a wrong offset!");

// Function DarwinGame.EffectManager.GetKey
// 0x0010 (0x0010 - 0x0000)
struct EffectManager_GetKey final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectManager_GetKey) == 0x000008, "Wrong alignment on EffectManager_GetKey");
static_assert(sizeof(EffectManager_GetKey) == 0x000010, "Wrong size on EffectManager_GetKey");
static_assert(offsetof(EffectManager_GetKey, ReturnValue) == 0x000000, "Member 'EffectManager_GetKey::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteFaceComponent.IsPlayEmoteBlink
// 0x0002 (0x0002 - 0x0000)
struct EmoteFaceComponent_IsPlayEmoteBlink final
{
public:
	bool                                          bCheckApplyRate;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteFaceComponent_IsPlayEmoteBlink) == 0x000001, "Wrong alignment on EmoteFaceComponent_IsPlayEmoteBlink");
static_assert(sizeof(EmoteFaceComponent_IsPlayEmoteBlink) == 0x000002, "Wrong size on EmoteFaceComponent_IsPlayEmoteBlink");
static_assert(offsetof(EmoteFaceComponent_IsPlayEmoteBlink, bCheckApplyRate) == 0x000000, "Member 'EmoteFaceComponent_IsPlayEmoteBlink::bCheckApplyRate' has a wrong offset!");
static_assert(offsetof(EmoteFaceComponent_IsPlayEmoteBlink, ReturnValue) == 0x000001, "Member 'EmoteFaceComponent_IsPlayEmoteBlink::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteFaceComponent.IsPlayEmoteVocalize
// 0x0002 (0x0002 - 0x0000)
struct EmoteFaceComponent_IsPlayEmoteVocalize final
{
public:
	bool                                          bCheckApplyRate;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteFaceComponent_IsPlayEmoteVocalize) == 0x000001, "Wrong alignment on EmoteFaceComponent_IsPlayEmoteVocalize");
static_assert(sizeof(EmoteFaceComponent_IsPlayEmoteVocalize) == 0x000002, "Wrong size on EmoteFaceComponent_IsPlayEmoteVocalize");
static_assert(offsetof(EmoteFaceComponent_IsPlayEmoteVocalize, bCheckApplyRate) == 0x000000, "Member 'EmoteFaceComponent_IsPlayEmoteVocalize::bCheckApplyRate' has a wrong offset!");
static_assert(offsetof(EmoteFaceComponent_IsPlayEmoteVocalize, ReturnValue) == 0x000001, "Member 'EmoteFaceComponent_IsPlayEmoteVocalize::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteFaceComponent.PlayEmoteBlink
// 0x0008 (0x0008 - 0x0000)
struct EmoteFaceComponent_PlayEmoteBlink final
{
public:
	struct FEmoteBlinkSetting                     BlinkType;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteFaceComponent_PlayEmoteBlink) == 0x000004, "Wrong alignment on EmoteFaceComponent_PlayEmoteBlink");
static_assert(sizeof(EmoteFaceComponent_PlayEmoteBlink) == 0x000008, "Wrong size on EmoteFaceComponent_PlayEmoteBlink");
static_assert(offsetof(EmoteFaceComponent_PlayEmoteBlink, BlinkType) == 0x000000, "Member 'EmoteFaceComponent_PlayEmoteBlink::BlinkType' has a wrong offset!");

// Function DarwinGame.EmoteFaceComponent.PlayEmoteFace
// 0x0010 (0x0010 - 0x0000)
struct EmoteFaceComponent_PlayEmoteFace final
{
public:
	EEmoteFaceType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEmoteFaceOverwriteOption*              Option;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteFaceComponent_PlayEmoteFace) == 0x000008, "Wrong alignment on EmoteFaceComponent_PlayEmoteFace");
static_assert(sizeof(EmoteFaceComponent_PlayEmoteFace) == 0x000010, "Wrong size on EmoteFaceComponent_PlayEmoteFace");
static_assert(offsetof(EmoteFaceComponent_PlayEmoteFace, Type) == 0x000000, "Member 'EmoteFaceComponent_PlayEmoteFace::Type' has a wrong offset!");
static_assert(offsetof(EmoteFaceComponent_PlayEmoteFace, Option) == 0x000008, "Member 'EmoteFaceComponent_PlayEmoteFace::Option' has a wrong offset!");

// Function DarwinGame.EmoteFaceComponent.PlayEmoteVocalize
// 0x0008 (0x0008 - 0x0000)
struct EmoteFaceComponent_PlayEmoteVocalize final
{
public:
	struct FEmoteVocalizeSetting                  BlinkType;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteFaceComponent_PlayEmoteVocalize) == 0x000004, "Wrong alignment on EmoteFaceComponent_PlayEmoteVocalize");
static_assert(sizeof(EmoteFaceComponent_PlayEmoteVocalize) == 0x000008, "Wrong size on EmoteFaceComponent_PlayEmoteVocalize");
static_assert(offsetof(EmoteFaceComponent_PlayEmoteVocalize, BlinkType) == 0x000000, "Member 'EmoteFaceComponent_PlayEmoteVocalize::BlinkType' has a wrong offset!");

// Function DarwinGame.EmoteFaceComponent.SetEnableApplyEmoteFace
// 0x0001 (0x0001 - 0x0000)
struct EmoteFaceComponent_SetEnableApplyEmoteFace final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteFaceComponent_SetEnableApplyEmoteFace) == 0x000001, "Wrong alignment on EmoteFaceComponent_SetEnableApplyEmoteFace");
static_assert(sizeof(EmoteFaceComponent_SetEnableApplyEmoteFace) == 0x000001, "Wrong size on EmoteFaceComponent_SetEnableApplyEmoteFace");
static_assert(offsetof(EmoteFaceComponent_SetEnableApplyEmoteFace, enable) == 0x000000, "Member 'EmoteFaceComponent_SetEnableApplyEmoteFace::enable' has a wrong offset!");

// Function DarwinGame.EmoteFaceComponent.IsPlayEmoteFace
// 0x0002 (0x0002 - 0x0000)
struct EmoteFaceComponent_IsPlayEmoteFace final
{
public:
	bool                                          bCheckApplyRate;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteFaceComponent_IsPlayEmoteFace) == 0x000001, "Wrong alignment on EmoteFaceComponent_IsPlayEmoteFace");
static_assert(sizeof(EmoteFaceComponent_IsPlayEmoteFace) == 0x000002, "Wrong size on EmoteFaceComponent_IsPlayEmoteFace");
static_assert(offsetof(EmoteFaceComponent_IsPlayEmoteFace, bCheckApplyRate) == 0x000000, "Member 'EmoteFaceComponent_IsPlayEmoteFace::bCheckApplyRate' has a wrong offset!");
static_assert(offsetof(EmoteFaceComponent_IsPlayEmoteFace, ReturnValue) == 0x000001, "Member 'EmoteFaceComponent_IsPlayEmoteFace::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.GetCurrentEmoteBodyRequest
// 0x0030 (0x0030 - 0x0000)
struct EmoteInterfaceForABP_GetCurrentEmoteBodyRequest final
{
public:
	struct FEmoteBodyMotionRequest                ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_GetCurrentEmoteBodyRequest) == 0x000008, "Wrong alignment on EmoteInterfaceForABP_GetCurrentEmoteBodyRequest");
static_assert(sizeof(EmoteInterfaceForABP_GetCurrentEmoteBodyRequest) == 0x000030, "Wrong size on EmoteInterfaceForABP_GetCurrentEmoteBodyRequest");
static_assert(offsetof(EmoteInterfaceForABP_GetCurrentEmoteBodyRequest, ReturnValue) == 0x000000, "Member 'EmoteInterfaceForABP_GetCurrentEmoteBodyRequest::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.GetEnableApplyEmoteFace
// 0x0001 (0x0001 - 0x0000)
struct EmoteInterfaceForABP_GetEnableApplyEmoteFace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_GetEnableApplyEmoteFace) == 0x000001, "Wrong alignment on EmoteInterfaceForABP_GetEnableApplyEmoteFace");
static_assert(sizeof(EmoteInterfaceForABP_GetEnableApplyEmoteFace) == 0x000001, "Wrong size on EmoteInterfaceForABP_GetEnableApplyEmoteFace");
static_assert(offsetof(EmoteInterfaceForABP_GetEnableApplyEmoteFace, ReturnValue) == 0x000000, "Member 'EmoteInterfaceForABP_GetEnableApplyEmoteFace::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.RequestEmoteBody
// 0x0030 (0x0030 - 0x0000)
struct EmoteInterfaceForABP_RequestEmoteBody final
{
public:
	struct FEmoteBodyMotionRequest                Request;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_RequestEmoteBody) == 0x000008, "Wrong alignment on EmoteInterfaceForABP_RequestEmoteBody");
static_assert(sizeof(EmoteInterfaceForABP_RequestEmoteBody) == 0x000030, "Wrong size on EmoteInterfaceForABP_RequestEmoteBody");
static_assert(offsetof(EmoteInterfaceForABP_RequestEmoteBody, Request) == 0x000000, "Member 'EmoteInterfaceForABP_RequestEmoteBody::Request' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteBlinkBlendRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteBlinkBlendRate final
{
public:
	float                                         BlendRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteBlinkBlendRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteBlinkBlendRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteBlinkBlendRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteBlinkBlendRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteBlinkBlendRate, BlendRate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteBlinkBlendRate::BlendRate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteBlinkNextData
// 0x0010 (0x0010 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteBlinkNextData final
{
public:
	struct FEmoteBlinkData                        BlinkData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteBlinkNextData) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteBlinkNextData");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteBlinkNextData) == 0x000010, "Wrong size on EmoteInterfaceForABP_SetEmoteBlinkNextData");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteBlinkNextData, BlinkData) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteBlinkNextData::BlinkData' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteBlinkNextRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteBlinkNextRate final
{
public:
	float                                         BlinkRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteBlinkNextRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteBlinkNextRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteBlinkNextRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteBlinkNextRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteBlinkNextRate, BlinkRate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteBlinkNextRate::BlinkRate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteBlinkNowData
// 0x0010 (0x0010 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteBlinkNowData final
{
public:
	struct FEmoteBlinkData                        BlinkData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteBlinkNowData) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteBlinkNowData");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteBlinkNowData) == 0x000010, "Wrong size on EmoteInterfaceForABP_SetEmoteBlinkNowData");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteBlinkNowData, BlinkData) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteBlinkNowData::BlinkData' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteBlinkNowRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteBlinkNowRate final
{
public:
	float                                         BlinkRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteBlinkNowRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteBlinkNowRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteBlinkNowRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteBlinkNowRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteBlinkNowRate, BlinkRate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteBlinkNowRate::BlinkRate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteFaceApplyRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteFaceApplyRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteFaceApplyRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteFaceApplyRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteFaceApplyRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteFaceApplyRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteFaceApplyRate, Rate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteFaceApplyRate::Rate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteFacialAnim
// 0x0008 (0x0008 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteFacialAnim final
{
public:
	class UAnimSequence*                          FacialAnim;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteFacialAnim) == 0x000008, "Wrong alignment on EmoteInterfaceForABP_SetEmoteFacialAnim");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteFacialAnim) == 0x000008, "Wrong size on EmoteInterfaceForABP_SetEmoteFacialAnim");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteFacialAnim, FacialAnim) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteFacialAnim::FacialAnim' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteFacialBlendRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteFacialBlendRate final
{
public:
	float                                         BlendRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteFacialBlendRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteFacialBlendRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteFacialBlendRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteFacialBlendRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteFacialBlendRate, BlendRate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteFacialBlendRate::BlendRate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteFacialNextData
// 0x000C (0x000C - 0x0000)
struct EmoteInterfaceForABP_SetEmoteFacialNextData final
{
public:
	struct FEmoteFacialRequestData                FacialData;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteFacialNextData) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteFacialNextData");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteFacialNextData) == 0x00000C, "Wrong size on EmoteInterfaceForABP_SetEmoteFacialNextData");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteFacialNextData, FacialData) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteFacialNextData::FacialData' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteFacialNowData
// 0x000C (0x000C - 0x0000)
struct EmoteInterfaceForABP_SetEmoteFacialNowData final
{
public:
	struct FEmoteFacialRequestData                FacialData;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteFacialNowData) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteFacialNowData");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteFacialNowData) == 0x00000C, "Wrong size on EmoteInterfaceForABP_SetEmoteFacialNowData");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteFacialNowData, FacialData) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteFacialNowData::FacialData' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteVocalizeBlendRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteVocalizeBlendRate final
{
public:
	float                                         BlendRate;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteVocalizeBlendRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteVocalizeBlendRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteVocalizeBlendRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteVocalizeBlendRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteVocalizeBlendRate, BlendRate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteVocalizeBlendRate::BlendRate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteVocalizeNextData
// 0x0010 (0x0010 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteVocalizeNextData final
{
public:
	struct FEmoteVocalizeAnimData                 VocalizeData;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteVocalizeNextData) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteVocalizeNextData");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteVocalizeNextData) == 0x000010, "Wrong size on EmoteInterfaceForABP_SetEmoteVocalizeNextData");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteVocalizeNextData, VocalizeData) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteVocalizeNextData::VocalizeData' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteVocalizeNextRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteVocalizeNextRate final
{
public:
	float                                         VocalizeRate;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteVocalizeNextRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteVocalizeNextRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteVocalizeNextRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteVocalizeNextRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteVocalizeNextRate, VocalizeRate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteVocalizeNextRate::VocalizeRate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteVocalizeNowData
// 0x0010 (0x0010 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteVocalizeNowData final
{
public:
	struct FEmoteVocalizeAnimData                 VocalizeData;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteVocalizeNowData) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteVocalizeNowData");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteVocalizeNowData) == 0x000010, "Wrong size on EmoteInterfaceForABP_SetEmoteVocalizeNowData");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteVocalizeNowData, VocalizeData) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteVocalizeNowData::VocalizeData' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEmoteVocalizeNowRate
// 0x0004 (0x0004 - 0x0000)
struct EmoteInterfaceForABP_SetEmoteVocalizeNowRate final
{
public:
	float                                         VocalizeRate;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEmoteVocalizeNowRate) == 0x000004, "Wrong alignment on EmoteInterfaceForABP_SetEmoteVocalizeNowRate");
static_assert(sizeof(EmoteInterfaceForABP_SetEmoteVocalizeNowRate) == 0x000004, "Wrong size on EmoteInterfaceForABP_SetEmoteVocalizeNowRate");
static_assert(offsetof(EmoteInterfaceForABP_SetEmoteVocalizeNowRate, VocalizeRate) == 0x000000, "Member 'EmoteInterfaceForABP_SetEmoteVocalizeNowRate::VocalizeRate' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.SetEnableApplyEmoteFace
// 0x0001 (0x0001 - 0x0000)
struct EmoteInterfaceForABP_SetEnableApplyEmoteFace final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_SetEnableApplyEmoteFace) == 0x000001, "Wrong alignment on EmoteInterfaceForABP_SetEnableApplyEmoteFace");
static_assert(sizeof(EmoteInterfaceForABP_SetEnableApplyEmoteFace) == 0x000001, "Wrong size on EmoteInterfaceForABP_SetEnableApplyEmoteFace");
static_assert(offsetof(EmoteInterfaceForABP_SetEnableApplyEmoteFace, enable) == 0x000000, "Member 'EmoteInterfaceForABP_SetEnableApplyEmoteFace::enable' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.HasEmoteFacialAnimData
// 0x0001 (0x0001 - 0x0000)
struct EmoteInterfaceForABP_HasEmoteFacialAnimData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_HasEmoteFacialAnimData) == 0x000001, "Wrong alignment on EmoteInterfaceForABP_HasEmoteFacialAnimData");
static_assert(sizeof(EmoteInterfaceForABP_HasEmoteFacialAnimData) == 0x000001, "Wrong size on EmoteInterfaceForABP_HasEmoteFacialAnimData");
static_assert(offsetof(EmoteInterfaceForABP_HasEmoteFacialAnimData, ReturnValue) == 0x000000, "Member 'EmoteInterfaceForABP_HasEmoteFacialAnimData::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.HasValidEmoteFacialAnim
// 0x0002 (0x0002 - 0x0000)
struct EmoteInterfaceForABP_HasValidEmoteFacialAnim final
{
public:
	EEmoteFaceType                                FaceType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteFaceValidType                           ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_HasValidEmoteFacialAnim) == 0x000001, "Wrong alignment on EmoteInterfaceForABP_HasValidEmoteFacialAnim");
static_assert(sizeof(EmoteInterfaceForABP_HasValidEmoteFacialAnim) == 0x000002, "Wrong size on EmoteInterfaceForABP_HasValidEmoteFacialAnim");
static_assert(offsetof(EmoteInterfaceForABP_HasValidEmoteFacialAnim, FaceType) == 0x000000, "Member 'EmoteInterfaceForABP_HasValidEmoteFacialAnim::FaceType' has a wrong offset!");
static_assert(offsetof(EmoteInterfaceForABP_HasValidEmoteFacialAnim, ReturnValue) == 0x000001, "Member 'EmoteInterfaceForABP_HasValidEmoteFacialAnim::ReturnValue' has a wrong offset!");

// Function DarwinGame.EmoteInterfaceForABP.IsPlayEmoteBody
// 0x0001 (0x0001 - 0x0000)
struct EmoteInterfaceForABP_IsPlayEmoteBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteInterfaceForABP_IsPlayEmoteBody) == 0x000001, "Wrong alignment on EmoteInterfaceForABP_IsPlayEmoteBody");
static_assert(sizeof(EmoteInterfaceForABP_IsPlayEmoteBody) == 0x000001, "Wrong size on EmoteInterfaceForABP_IsPlayEmoteBody");
static_assert(offsetof(EmoteInterfaceForABP_IsPlayEmoteBody, ReturnValue) == 0x000000, "Member 'EmoteInterfaceForABP_IsPlayEmoteBody::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnGeneratorForStar.SetStarID
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnGeneratorForStar_SetStarID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnGeneratorForStar_SetStarID) == 0x000004, "Wrong alignment on EnemySpawnGeneratorForStar_SetStarID");
static_assert(sizeof(EnemySpawnGeneratorForStar_SetStarID) == 0x000008, "Wrong size on EnemySpawnGeneratorForStar_SetStarID");
static_assert(offsetof(EnemySpawnGeneratorForStar_SetStarID, ID) == 0x000000, "Member 'EnemySpawnGeneratorForStar_SetStarID::ID' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.AddGenerator
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnManager_AddGenerator final
{
public:
	class UEnemySpawnGeneratorBase*               Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_AddGenerator) == 0x000008, "Wrong alignment on EnemySpawnManager_AddGenerator");
static_assert(sizeof(EnemySpawnManager_AddGenerator) == 0x000008, "Wrong size on EnemySpawnManager_AddGenerator");
static_assert(offsetof(EnemySpawnManager_AddGenerator, Generator) == 0x000000, "Member 'EnemySpawnManager_AddGenerator::Generator' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.ChangeEventFlagCallBack
// 0x0002 (0x0002 - 0x0000)
struct EnemySpawnManager_ChangeEventFlagCallBack final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChanged;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_ChangeEventFlagCallBack) == 0x000001, "Wrong alignment on EnemySpawnManager_ChangeEventFlagCallBack");
static_assert(sizeof(EnemySpawnManager_ChangeEventFlagCallBack) == 0x000002, "Wrong size on EnemySpawnManager_ChangeEventFlagCallBack");
static_assert(offsetof(EnemySpawnManager_ChangeEventFlagCallBack, bEnable) == 0x000000, "Member 'EnemySpawnManager_ChangeEventFlagCallBack::bEnable' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_ChangeEventFlagCallBack, bIsChanged) == 0x000001, "Member 'EnemySpawnManager_ChangeEventFlagCallBack::bIsChanged' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.NoticeDead
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnManager_NoticeDead final
{
public:
	class FName                                   SpawnPointID;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_NoticeDead) == 0x000004, "Wrong alignment on EnemySpawnManager_NoticeDead");
static_assert(sizeof(EnemySpawnManager_NoticeDead) == 0x000008, "Wrong size on EnemySpawnManager_NoticeDead");
static_assert(offsetof(EnemySpawnManager_NoticeDead, SpawnPointID) == 0x000000, "Member 'EnemySpawnManager_NoticeDead::SpawnPointID' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.RemoveGenerator
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawnManager_RemoveGenerator final
{
public:
	const class UEnemySpawnGeneratorBase*         Generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_RemoveGenerator) == 0x000008, "Wrong alignment on EnemySpawnManager_RemoveGenerator");
static_assert(sizeof(EnemySpawnManager_RemoveGenerator) == 0x000008, "Wrong size on EnemySpawnManager_RemoveGenerator");
static_assert(offsetof(EnemySpawnManager_RemoveGenerator, Generator) == 0x000000, "Member 'EnemySpawnManager_RemoveGenerator::Generator' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.RequestSpawnDefenceBattleMonsters
// 0x002C (0x002C - 0x0000)
struct EnemySpawnManager_RequestSpawnDefenceBattleMonsters final
{
public:
	struct FVector                                spawnPoint;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnRadius;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamForce                               Force;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         weaveCount;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxWeaveCount;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AMonsterBase* deaded)>   end_func;                                          // 0x001C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters) == 0x000004, "Wrong alignment on EnemySpawnManager_RequestSpawnDefenceBattleMonsters");
static_assert(sizeof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters) == 0x00002C, "Wrong size on EnemySpawnManager_RequestSpawnDefenceBattleMonsters");
static_assert(offsetof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters, spawnPoint) == 0x000000, "Member 'EnemySpawnManager_RequestSpawnDefenceBattleMonsters::spawnPoint' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters, SpawnRadius) == 0x00000C, "Member 'EnemySpawnManager_RequestSpawnDefenceBattleMonsters::SpawnRadius' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters, Force) == 0x000010, "Member 'EnemySpawnManager_RequestSpawnDefenceBattleMonsters::Force' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters, weaveCount) == 0x000014, "Member 'EnemySpawnManager_RequestSpawnDefenceBattleMonsters::weaveCount' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters, maxWeaveCount) == 0x000018, "Member 'EnemySpawnManager_RequestSpawnDefenceBattleMonsters::maxWeaveCount' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnDefenceBattleMonsters, end_func) == 0x00001C, "Member 'EnemySpawnManager_RequestSpawnDefenceBattleMonsters::end_func' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.RequestSpawnRevengeMonster
// 0x003C (0x003C - 0x0000)
struct EnemySpawnManager_RequestSpawnRevengeMonster final
{
public:
	struct FVector                                spawnPoint;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnRadius;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleID;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subtract;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AMonsterBase* spawned)>  begin_func;                                        // 0x001C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class AMonsterBase* deaded)>   end_func;                                          // 0x002C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_RequestSpawnRevengeMonster) == 0x000004, "Wrong alignment on EnemySpawnManager_RequestSpawnRevengeMonster");
static_assert(sizeof(EnemySpawnManager_RequestSpawnRevengeMonster) == 0x00003C, "Wrong size on EnemySpawnManager_RequestSpawnRevengeMonster");
static_assert(offsetof(EnemySpawnManager_RequestSpawnRevengeMonster, spawnPoint) == 0x000000, "Member 'EnemySpawnManager_RequestSpawnRevengeMonster::spawnPoint' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnRevengeMonster, SpawnRadius) == 0x00000C, "Member 'EnemySpawnManager_RequestSpawnRevengeMonster::SpawnRadius' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnRevengeMonster, BattleID) == 0x000010, "Member 'EnemySpawnManager_RequestSpawnRevengeMonster::BattleID' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnRevengeMonster, Subtract) == 0x000018, "Member 'EnemySpawnManager_RequestSpawnRevengeMonster::Subtract' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnRevengeMonster, begin_func) == 0x00001C, "Member 'EnemySpawnManager_RequestSpawnRevengeMonster::begin_func' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_RequestSpawnRevengeMonster, end_func) == 0x00002C, "Member 'EnemySpawnManager_RequestSpawnRevengeMonster::end_func' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.SetSpawnAndDistanceCheckSkip
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnManager_SetSpawnAndDistanceCheckSkip final
{
public:
	bool                                          skipFlag;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_SetSpawnAndDistanceCheckSkip) == 0x000001, "Wrong alignment on EnemySpawnManager_SetSpawnAndDistanceCheckSkip");
static_assert(sizeof(EnemySpawnManager_SetSpawnAndDistanceCheckSkip) == 0x000001, "Wrong size on EnemySpawnManager_SetSpawnAndDistanceCheckSkip");
static_assert(offsetof(EnemySpawnManager_SetSpawnAndDistanceCheckSkip, skipFlag) == 0x000000, "Member 'EnemySpawnManager_SetSpawnAndDistanceCheckSkip::skipFlag' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.SetSpawnSkip
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnManager_SetSpawnSkip final
{
public:
	bool                                          skipFlag;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_SetSpawnSkip) == 0x000001, "Wrong alignment on EnemySpawnManager_SetSpawnSkip");
static_assert(sizeof(EnemySpawnManager_SetSpawnSkip) == 0x000001, "Wrong size on EnemySpawnManager_SetSpawnSkip");
static_assert(offsetof(EnemySpawnManager_SetSpawnSkip, skipFlag) == 0x000000, "Member 'EnemySpawnManager_SetSpawnSkip::skipFlag' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.SpawnImmediately
// 0x000C (0x000C - 0x0000)
struct EnemySpawnManager_SpawnImmediately final
{
public:
	class FName                                   SpawnPointID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnemySpawnManager_SpawnImmediately) == 0x000004, "Wrong alignment on EnemySpawnManager_SpawnImmediately");
static_assert(sizeof(EnemySpawnManager_SpawnImmediately) == 0x00000C, "Wrong size on EnemySpawnManager_SpawnImmediately");
static_assert(offsetof(EnemySpawnManager_SpawnImmediately, SpawnPointID) == 0x000000, "Member 'EnemySpawnManager_SpawnImmediately::SpawnPointID' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_SpawnImmediately, enable) == 0x000008, "Member 'EnemySpawnManager_SpawnImmediately::enable' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.HasActiveMonsters
// 0x000C (0x000C - 0x0000)
struct EnemySpawnManager_HasActiveMonsters final
{
public:
	class FName                                   SpawnPointID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnemySpawnManager_HasActiveMonsters) == 0x000004, "Wrong alignment on EnemySpawnManager_HasActiveMonsters");
static_assert(sizeof(EnemySpawnManager_HasActiveMonsters) == 0x00000C, "Wrong size on EnemySpawnManager_HasActiveMonsters");
static_assert(offsetof(EnemySpawnManager_HasActiveMonsters, SpawnPointID) == 0x000000, "Member 'EnemySpawnManager_HasActiveMonsters::SpawnPointID' has a wrong offset!");
static_assert(offsetof(EnemySpawnManager_HasActiveMonsters, ReturnValue) == 0x000008, "Member 'EnemySpawnManager_HasActiveMonsters::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnemySpawnManager.IsSpawnSkip
// 0x0001 (0x0001 - 0x0000)
struct EnemySpawnManager_IsSpawnSkip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawnManager_IsSpawnSkip) == 0x000001, "Wrong alignment on EnemySpawnManager_IsSpawnSkip");
static_assert(sizeof(EnemySpawnManager_IsSpawnSkip) == 0x000001, "Wrong size on EnemySpawnManager_IsSpawnSkip");
static_assert(offsetof(EnemySpawnManager_IsSpawnSkip, ReturnValue) == 0x000000, "Member 'EnemySpawnManager_IsSpawnSkip::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentBlueprintFunctionLibrary.EaseLinearColor
// 0x0038 (0x0038 - 0x0000)
struct EnvironmentBlueprintFunctionLibrary_EaseLinearColor final
{
public:
	struct FLinearColor                           ParamA;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParamB;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentBlueprintFunctionLibrary_EaseLinearColor) == 0x000004, "Wrong alignment on EnvironmentBlueprintFunctionLibrary_EaseLinearColor");
static_assert(sizeof(EnvironmentBlueprintFunctionLibrary_EaseLinearColor) == 0x000038, "Wrong size on EnvironmentBlueprintFunctionLibrary_EaseLinearColor");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseLinearColor, ParamA) == 0x000000, "Member 'EnvironmentBlueprintFunctionLibrary_EaseLinearColor::ParamA' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseLinearColor, ParamB) == 0x000010, "Member 'EnvironmentBlueprintFunctionLibrary_EaseLinearColor::ParamB' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseLinearColor, Alpha) == 0x000020, "Member 'EnvironmentBlueprintFunctionLibrary_EaseLinearColor::Alpha' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseLinearColor, EasingFunc) == 0x000024, "Member 'EnvironmentBlueprintFunctionLibrary_EaseLinearColor::EasingFunc' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseLinearColor, ReturnValue) == 0x000028, "Member 'EnvironmentBlueprintFunctionLibrary_EaseLinearColor::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentBlueprintFunctionLibrary.EaseVector4
// 0x0040 (0x0040 - 0x0000)
struct EnvironmentBlueprintFunctionLibrary_EaseVector4 final
{
public:
	struct FVector4                               ParamA;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ParamB;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0xB];                                       // 0x0025(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentBlueprintFunctionLibrary_EaseVector4) == 0x000010, "Wrong alignment on EnvironmentBlueprintFunctionLibrary_EaseVector4");
static_assert(sizeof(EnvironmentBlueprintFunctionLibrary_EaseVector4) == 0x000040, "Wrong size on EnvironmentBlueprintFunctionLibrary_EaseVector4");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseVector4, ParamA) == 0x000000, "Member 'EnvironmentBlueprintFunctionLibrary_EaseVector4::ParamA' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseVector4, ParamB) == 0x000010, "Member 'EnvironmentBlueprintFunctionLibrary_EaseVector4::ParamB' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseVector4, Alpha) == 0x000020, "Member 'EnvironmentBlueprintFunctionLibrary_EaseVector4::Alpha' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseVector4, EasingFunc) == 0x000024, "Member 'EnvironmentBlueprintFunctionLibrary_EaseVector4::EasingFunc' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_EaseVector4, ReturnValue) == 0x000030, "Member 'EnvironmentBlueprintFunctionLibrary_EaseVector4::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentBlueprintFunctionLibrary.GetCurveColorValue
// 0x0020 (0x0020 - 0x0000)
struct EnvironmentBlueprintFunctionLibrary_GetCurveColorValue final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      CurveFloat;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentBlueprintFunctionLibrary_GetCurveColorValue) == 0x000008, "Wrong alignment on EnvironmentBlueprintFunctionLibrary_GetCurveColorValue");
static_assert(sizeof(EnvironmentBlueprintFunctionLibrary_GetCurveColorValue) == 0x000020, "Wrong size on EnvironmentBlueprintFunctionLibrary_GetCurveColorValue");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveColorValue, Alpha) == 0x000000, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveColorValue::Alpha' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveColorValue, CurveFloat) == 0x000008, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveColorValue::CurveFloat' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveColorValue, ReturnValue) == 0x000010, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveColorValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentBlueprintFunctionLibrary.GetCurveFloatValue
// 0x0018 (0x0018 - 0x0000)
struct EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveFloat;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue) == 0x000008, "Wrong alignment on EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue");
static_assert(sizeof(EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue) == 0x000018, "Wrong size on EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue, Alpha) == 0x000000, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue::Alpha' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue, CurveFloat) == 0x000008, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue::CurveFloat' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue, ReturnValue) == 0x000010, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveFloatValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentBlueprintFunctionLibrary.GetCurveVectorValue
// 0x0020 (0x0020 - 0x0000)
struct EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CurveFloat;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue) == 0x000008, "Wrong alignment on EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue");
static_assert(sizeof(EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue) == 0x000020, "Wrong size on EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue, Alpha) == 0x000000, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue::Alpha' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue, CurveFloat) == 0x000008, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue::CurveFloat' has a wrong offset!");
static_assert(offsetof(EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue, ReturnValue) == 0x000010, "Member 'EnvironmentBlueprintFunctionLibrary_GetCurveVectorValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentManager.ChangeEnvironment
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentManager_ChangeEnvironment final
{
public:
	class FName                                   EnvironmentID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentManager_ChangeEnvironment) == 0x000004, "Wrong alignment on EnvironmentManager_ChangeEnvironment");
static_assert(sizeof(EnvironmentManager_ChangeEnvironment) == 0x000008, "Wrong size on EnvironmentManager_ChangeEnvironment");
static_assert(offsetof(EnvironmentManager_ChangeEnvironment, EnvironmentID) == 0x000000, "Member 'EnvironmentManager_ChangeEnvironment::EnvironmentID' has a wrong offset!");

// Function DarwinGame.EnvironmentManager.ChangeEnvironmentFromEvent
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentManager_ChangeEnvironmentFromEvent final
{
public:
	class FName                                   EnvironmentID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentManager_ChangeEnvironmentFromEvent) == 0x000004, "Wrong alignment on EnvironmentManager_ChangeEnvironmentFromEvent");
static_assert(sizeof(EnvironmentManager_ChangeEnvironmentFromEvent) == 0x000008, "Wrong size on EnvironmentManager_ChangeEnvironmentFromEvent");
static_assert(offsetof(EnvironmentManager_ChangeEnvironmentFromEvent, EnvironmentID) == 0x000000, "Member 'EnvironmentManager_ChangeEnvironmentFromEvent::EnvironmentID' has a wrong offset!");

// Function DarwinGame.EnvironmentManager.GetEnvironmentObject
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentManager_GetEnvironmentObject final
{
public:
	class AEnvironmentObject*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentManager_GetEnvironmentObject) == 0x000008, "Wrong alignment on EnvironmentManager_GetEnvironmentObject");
static_assert(sizeof(EnvironmentManager_GetEnvironmentObject) == 0x000008, "Wrong size on EnvironmentManager_GetEnvironmentObject");
static_assert(offsetof(EnvironmentManager_GetEnvironmentObject, ReturnValue) == 0x000000, "Member 'EnvironmentManager_GetEnvironmentObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.EnvironmentManager.SetSkyEnable
// 0x0001 (0x0001 - 0x0000)
struct EnvironmentManager_SetSkyEnable final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentManager_SetSkyEnable) == 0x000001, "Wrong alignment on EnvironmentManager_SetSkyEnable");
static_assert(sizeof(EnvironmentManager_SetSkyEnable) == 0x000001, "Wrong size on EnvironmentManager_SetSkyEnable");
static_assert(offsetof(EnvironmentManager_SetSkyEnable, Flag) == 0x000000, "Member 'EnvironmentManager_SetSkyEnable::Flag' has a wrong offset!");

// Function DarwinGame.EnvironmentManager.GetEnvironmentType
// 0x0001 (0x0001 - 0x0000)
struct EnvironmentManager_GetEnvironmentType final
{
public:
	EEnvironmentType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentManager_GetEnvironmentType) == 0x000001, "Wrong alignment on EnvironmentManager_GetEnvironmentType");
static_assert(sizeof(EnvironmentManager_GetEnvironmentType) == 0x000001, "Wrong size on EnvironmentManager_GetEnvironmentType");
static_assert(offsetof(EnvironmentManager_GetEnvironmentType, ReturnValue) == 0x000000, "Member 'EnvironmentManager_GetEnvironmentType::ReturnValue' has a wrong offset!");

// Function DarwinGame.EstimateSequenceSceneCapture.GetCoinsActor
// 0x0008 (0x0008 - 0x0000)
struct EstimateSequenceSceneCapture_GetCoinsActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EstimateSequenceSceneCapture_GetCoinsActor) == 0x000008, "Wrong alignment on EstimateSequenceSceneCapture_GetCoinsActor");
static_assert(sizeof(EstimateSequenceSceneCapture_GetCoinsActor) == 0x000008, "Wrong size on EstimateSequenceSceneCapture_GetCoinsActor");
static_assert(offsetof(EstimateSequenceSceneCapture_GetCoinsActor, ReturnValue) == 0x000000, "Member 'EstimateSequenceSceneCapture_GetCoinsActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.EstimateSequenceSceneCapture.GetEstimateCaptureComponent
// 0x0008 (0x0008 - 0x0000)
struct EstimateSequenceSceneCapture_GetEstimateCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EstimateSequenceSceneCapture_GetEstimateCaptureComponent) == 0x000008, "Wrong alignment on EstimateSequenceSceneCapture_GetEstimateCaptureComponent");
static_assert(sizeof(EstimateSequenceSceneCapture_GetEstimateCaptureComponent) == 0x000008, "Wrong size on EstimateSequenceSceneCapture_GetEstimateCaptureComponent");
static_assert(offsetof(EstimateSequenceSceneCapture_GetEstimateCaptureComponent, ReturnValue) == 0x000000, "Member 'EstimateSequenceSceneCapture_GetEstimateCaptureComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.EstimateSequenceSceneCapture.GetPanelActor
// 0x0008 (0x0008 - 0x0000)
struct EstimateSequenceSceneCapture_GetPanelActor final
{
public:
	class AStaticMeshActor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EstimateSequenceSceneCapture_GetPanelActor) == 0x000008, "Wrong alignment on EstimateSequenceSceneCapture_GetPanelActor");
static_assert(sizeof(EstimateSequenceSceneCapture_GetPanelActor) == 0x000008, "Wrong size on EstimateSequenceSceneCapture_GetPanelActor");
static_assert(offsetof(EstimateSequenceSceneCapture_GetPanelActor, ReturnValue) == 0x000000, "Member 'EstimateSequenceSceneCapture_GetPanelActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.EstimateSequenceSceneCapture.GetSequenceData
// 0x0010 (0x0010 - 0x0000)
struct EstimateSequenceSceneCapture_GetSequenceData final
{
public:
	TArray<struct FST_EstimateSequenceData>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EstimateSequenceSceneCapture_GetSequenceData) == 0x000008, "Wrong alignment on EstimateSequenceSceneCapture_GetSequenceData");
static_assert(sizeof(EstimateSequenceSceneCapture_GetSequenceData) == 0x000010, "Wrong size on EstimateSequenceSceneCapture_GetSequenceData");
static_assert(offsetof(EstimateSequenceSceneCapture_GetSequenceData, ReturnValue) == 0x000000, "Member 'EstimateSequenceSceneCapture_GetSequenceData::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventCrashableComponent.ComponentOnReceiveEventBP
// 0x0028 (0x0028 - 0x0000)
struct EventCrashableComponent_ComponentOnReceiveEventBP final
{
public:
	struct FEventStruct                           Info;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class AFieldObjectBase*                       Parent;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCrashableComponent_ComponentOnReceiveEventBP) == 0x000008, "Wrong alignment on EventCrashableComponent_ComponentOnReceiveEventBP");
static_assert(sizeof(EventCrashableComponent_ComponentOnReceiveEventBP) == 0x000028, "Wrong size on EventCrashableComponent_ComponentOnReceiveEventBP");
static_assert(offsetof(EventCrashableComponent_ComponentOnReceiveEventBP, Info) == 0x000000, "Member 'EventCrashableComponent_ComponentOnReceiveEventBP::Info' has a wrong offset!");
static_assert(offsetof(EventCrashableComponent_ComponentOnReceiveEventBP, Parent) == 0x000020, "Member 'EventCrashableComponent_ComponentOnReceiveEventBP::Parent' has a wrong offset!");

// Function DarwinGame.EventExecuter.DestoryScriptEvent
// 0x0008 (0x0008 - 0x0000)
struct EventExecuter_DestoryScriptEvent final
{
public:
	class FName                                   ScriptEventID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventExecuter_DestoryScriptEvent) == 0x000004, "Wrong alignment on EventExecuter_DestoryScriptEvent");
static_assert(sizeof(EventExecuter_DestoryScriptEvent) == 0x000008, "Wrong size on EventExecuter_DestoryScriptEvent");
static_assert(offsetof(EventExecuter_DestoryScriptEvent, ScriptEventID) == 0x000000, "Member 'EventExecuter_DestoryScriptEvent::ScriptEventID' has a wrong offset!");

// Function DarwinGame.EventExecuter.ExecuteEvent
// 0x0018 (0x0018 - 0x0000)
struct EventExecuter_ExecuteEvent final
{
public:
	struct FST_EventData                          EventData;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventExecuter_ExecuteEvent) == 0x000004, "Wrong alignment on EventExecuter_ExecuteEvent");
static_assert(sizeof(EventExecuter_ExecuteEvent) == 0x000018, "Wrong size on EventExecuter_ExecuteEvent");
static_assert(offsetof(EventExecuter_ExecuteEvent, EventData) == 0x000000, "Member 'EventExecuter_ExecuteEvent::EventData' has a wrong offset!");

// Function DarwinGame.EventExecuter.GetCurrentEventType
// 0x0001 (0x0001 - 0x0000)
struct EventExecuter_GetCurrentEventType final
{
public:
	EEventType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventExecuter_GetCurrentEventType) == 0x000001, "Wrong alignment on EventExecuter_GetCurrentEventType");
static_assert(sizeof(EventExecuter_GetCurrentEventType) == 0x000001, "Wrong size on EventExecuter_GetCurrentEventType");
static_assert(offsetof(EventExecuter_GetCurrentEventType, ReturnValue) == 0x000000, "Member 'EventExecuter_GetCurrentEventType::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventExecuter.PlayScriptEvent
// 0x0008 (0x0008 - 0x0000)
struct EventExecuter_PlayScriptEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventExecuter_PlayScriptEvent) == 0x000004, "Wrong alignment on EventExecuter_PlayScriptEvent");
static_assert(sizeof(EventExecuter_PlayScriptEvent) == 0x000008, "Wrong size on EventExecuter_PlayScriptEvent");
static_assert(offsetof(EventExecuter_PlayScriptEvent, EventID) == 0x000000, "Member 'EventExecuter_PlayScriptEvent::EventID' has a wrong offset!");

// Function DarwinGame.EventExecuter.ReceiveSelectResult
// 0x0004 (0x0004 - 0x0000)
struct EventExecuter_ReceiveSelectResult final
{
public:
	int32                                         SelectIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventExecuter_ReceiveSelectResult) == 0x000004, "Wrong alignment on EventExecuter_ReceiveSelectResult");
static_assert(sizeof(EventExecuter_ReceiveSelectResult) == 0x000004, "Wrong size on EventExecuter_ReceiveSelectResult");
static_assert(offsetof(EventExecuter_ReceiveSelectResult, SelectIndex) == 0x000000, "Member 'EventExecuter_ReceiveSelectResult::SelectIndex' has a wrong offset!");

// Function DarwinGame.EventExecuter.GetPlayingScriptEvent
// 0x0008 (0x0008 - 0x0000)
struct EventExecuter_GetPlayingScriptEvent final
{
public:
	class AScriptEventBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventExecuter_GetPlayingScriptEvent) == 0x000008, "Wrong alignment on EventExecuter_GetPlayingScriptEvent");
static_assert(sizeof(EventExecuter_GetPlayingScriptEvent) == 0x000008, "Wrong size on EventExecuter_GetPlayingScriptEvent");
static_assert(offsetof(EventExecuter_GetPlayingScriptEvent, ReturnValue) == 0x000000, "Member 'EventExecuter_GetPlayingScriptEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventLoader.IsAlredyAddLoadPlanEventList
// 0x000C (0x000C - 0x0000)
struct EventLoader_IsAlredyAddLoadPlanEventList final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventLoader_IsAlredyAddLoadPlanEventList) == 0x000004, "Wrong alignment on EventLoader_IsAlredyAddLoadPlanEventList");
static_assert(sizeof(EventLoader_IsAlredyAddLoadPlanEventList) == 0x00000C, "Wrong size on EventLoader_IsAlredyAddLoadPlanEventList");
static_assert(offsetof(EventLoader_IsAlredyAddLoadPlanEventList, EventID) == 0x000000, "Member 'EventLoader_IsAlredyAddLoadPlanEventList::EventID' has a wrong offset!");
static_assert(offsetof(EventLoader_IsAlredyAddLoadPlanEventList, ReturnValue) == 0x000008, "Member 'EventLoader_IsAlredyAddLoadPlanEventList::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventLoader.StackLoadPlanEvent
// 0x0008 (0x0008 - 0x0000)
struct EventLoader_StackLoadPlanEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventLoader_StackLoadPlanEvent) == 0x000004, "Wrong alignment on EventLoader_StackLoadPlanEvent");
static_assert(sizeof(EventLoader_StackLoadPlanEvent) == 0x000008, "Wrong size on EventLoader_StackLoadPlanEvent");
static_assert(offsetof(EventLoader_StackLoadPlanEvent, EventID) == 0x000000, "Member 'EventLoader_StackLoadPlanEvent::EventID' has a wrong offset!");

// Function DarwinGame.EventLoader.UnLoadEventAsset
// 0x0008 (0x0008 - 0x0000)
struct EventLoader_UnLoadEventAsset final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventLoader_UnLoadEventAsset) == 0x000004, "Wrong alignment on EventLoader_UnLoadEventAsset");
static_assert(sizeof(EventLoader_UnLoadEventAsset) == 0x000008, "Wrong size on EventLoader_UnLoadEventAsset");
static_assert(offsetof(EventLoader_UnLoadEventAsset, EventID) == 0x000000, "Member 'EventLoader_UnLoadEventAsset::EventID' has a wrong offset!");

// Function DarwinGame.EventLoader.GetCreateLevelSequence
// 0x0018 (0x0018 - 0x0000)
struct EventLoader_GetCreateLevelSequence final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALevelSequenceActor*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventLoader_GetCreateLevelSequence) == 0x000008, "Wrong alignment on EventLoader_GetCreateLevelSequence");
static_assert(sizeof(EventLoader_GetCreateLevelSequence) == 0x000018, "Wrong size on EventLoader_GetCreateLevelSequence");
static_assert(offsetof(EventLoader_GetCreateLevelSequence, EventID) == 0x000000, "Member 'EventLoader_GetCreateLevelSequence::EventID' has a wrong offset!");
static_assert(offsetof(EventLoader_GetCreateLevelSequence, ReturnValue) == 0x000008, "Member 'EventLoader_GetCreateLevelSequence::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventLoader.GetUIOneShotID
// 0x0014 (0x0014 - 0x0000)
struct EventLoader_GetUIOneShotID final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UIName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventLoader_GetUIOneShotID) == 0x000004, "Wrong alignment on EventLoader_GetUIOneShotID");
static_assert(sizeof(EventLoader_GetUIOneShotID) == 0x000014, "Wrong size on EventLoader_GetUIOneShotID");
static_assert(offsetof(EventLoader_GetUIOneShotID, EventID) == 0x000000, "Member 'EventLoader_GetUIOneShotID::EventID' has a wrong offset!");
static_assert(offsetof(EventLoader_GetUIOneShotID, UIName) == 0x000008, "Member 'EventLoader_GetUIOneShotID::UIName' has a wrong offset!");
static_assert(offsetof(EventLoader_GetUIOneShotID, ReturnValue) == 0x000010, "Member 'EventLoader_GetUIOneShotID::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventLoader.IsLoadCompleteEventAsset
// 0x000C (0x000C - 0x0000)
struct EventLoader_IsLoadCompleteEventAsset final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventLoader_IsLoadCompleteEventAsset) == 0x000004, "Wrong alignment on EventLoader_IsLoadCompleteEventAsset");
static_assert(sizeof(EventLoader_IsLoadCompleteEventAsset) == 0x00000C, "Wrong size on EventLoader_IsLoadCompleteEventAsset");
static_assert(offsetof(EventLoader_IsLoadCompleteEventAsset, EventID) == 0x000000, "Member 'EventLoader_IsLoadCompleteEventAsset::EventID' has a wrong offset!");
static_assert(offsetof(EventLoader_IsLoadCompleteEventAsset, ReturnValue) == 0x000008, "Member 'EventLoader_IsLoadCompleteEventAsset::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventLoader.IsLoadSuccessEventAsset
// 0x000C (0x000C - 0x0000)
struct EventLoader_IsLoadSuccessEventAsset final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventLoader_IsLoadSuccessEventAsset) == 0x000004, "Wrong alignment on EventLoader_IsLoadSuccessEventAsset");
static_assert(sizeof(EventLoader_IsLoadSuccessEventAsset) == 0x00000C, "Wrong size on EventLoader_IsLoadSuccessEventAsset");
static_assert(offsetof(EventLoader_IsLoadSuccessEventAsset, EventID) == 0x000000, "Member 'EventLoader_IsLoadSuccessEventAsset::EventID' has a wrong offset!");
static_assert(offsetof(EventLoader_IsLoadSuccessEventAsset, ReturnValue) == 0x000008, "Member 'EventLoader_IsLoadSuccessEventAsset::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventLoader.LogUIOneShotData
// 0x0008 (0x0008 - 0x0000)
struct EventLoader_LogUIOneShotData final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventLoader_LogUIOneShotData) == 0x000004, "Wrong alignment on EventLoader_LogUIOneShotData");
static_assert(sizeof(EventLoader_LogUIOneShotData) == 0x000008, "Wrong size on EventLoader_LogUIOneShotData");
static_assert(offsetof(EventLoader_LogUIOneShotData, EventID) == 0x000000, "Member 'EventLoader_LogUIOneShotData::EventID' has a wrong offset!");

// Function DarwinGame.EventMonsterSpawnedCallback.OnSpawnedMonster
// 0x0008 (0x0008 - 0x0000)
struct EventMonsterSpawnedCallback_OnSpawnedMonster final
{
public:
	class AMonsterBase*                           spawned;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMonsterSpawnedCallback_OnSpawnedMonster) == 0x000008, "Wrong alignment on EventMonsterSpawnedCallback_OnSpawnedMonster");
static_assert(sizeof(EventMonsterSpawnedCallback_OnSpawnedMonster) == 0x000008, "Wrong size on EventMonsterSpawnedCallback_OnSpawnedMonster");
static_assert(offsetof(EventMonsterSpawnedCallback_OnSpawnedMonster, spawned) == 0x000000, "Member 'EventMonsterSpawnedCallback_OnSpawnedMonster::spawned' has a wrong offset!");

// Function DarwinGame.EventSender.CallForceMoveEvent
// 0x0018 (0x0018 - 0x0000)
struct EventSender_CallForceMoveEvent final
{
public:
	class FName                                   CallEventID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovePostion;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSender_CallForceMoveEvent) == 0x000004, "Wrong alignment on EventSender_CallForceMoveEvent");
static_assert(sizeof(EventSender_CallForceMoveEvent) == 0x000018, "Wrong size on EventSender_CallForceMoveEvent");
static_assert(offsetof(EventSender_CallForceMoveEvent, CallEventID) == 0x000000, "Member 'EventSender_CallForceMoveEvent::CallEventID' has a wrong offset!");
static_assert(offsetof(EventSender_CallForceMoveEvent, MovePostion) == 0x000008, "Member 'EventSender_CallForceMoveEvent::MovePostion' has a wrong offset!");
static_assert(offsetof(EventSender_CallForceMoveEvent, MoveTime) == 0x000014, "Member 'EventSender_CallForceMoveEvent::MoveTime' has a wrong offset!");

// Function DarwinGame.EventSender.GetEventID
// 0x0008 (0x0008 - 0x0000)
struct EventSender_GetEventID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSender_GetEventID) == 0x000004, "Wrong alignment on EventSender_GetEventID");
static_assert(sizeof(EventSender_GetEventID) == 0x000008, "Wrong size on EventSender_GetEventID");
static_assert(offsetof(EventSender_GetEventID, ReturnValue) == 0x000000, "Member 'EventSender_GetEventID::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSender.SetActiveEvent
// 0x0001 (0x0001 - 0x0000)
struct EventSender_SetActiveEvent final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSender_SetActiveEvent) == 0x000001, "Wrong alignment on EventSender_SetActiveEvent");
static_assert(sizeof(EventSender_SetActiveEvent) == 0x000001, "Wrong size on EventSender_SetActiveEvent");
static_assert(offsetof(EventSender_SetActiveEvent, Active) == 0x000000, "Member 'EventSender_SetActiveEvent::Active' has a wrong offset!");

// Function DarwinGame.EventSender.SetEventID
// 0x0008 (0x0008 - 0x0000)
struct EventSender_SetEventID final
{
public:
	class FName                                   event_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSender_SetEventID) == 0x000004, "Wrong alignment on EventSender_SetEventID");
static_assert(sizeof(EventSender_SetEventID) == 0x000008, "Wrong size on EventSender_SetEventID");
static_assert(offsetof(EventSender_SetEventID, event_id) == 0x000000, "Member 'EventSender_SetEventID::event_id' has a wrong offset!");

// Function DarwinGame.EventSender.SetSendEventID
// 0x0008 (0x0008 - 0x0000)
struct EventSender_SetSendEventID final
{
public:
	class FName                                   SendEventID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSender_SetSendEventID) == 0x000004, "Wrong alignment on EventSender_SetSendEventID");
static_assert(sizeof(EventSender_SetSendEventID) == 0x000008, "Wrong size on EventSender_SetSendEventID");
static_assert(offsetof(EventSender_SetSendEventID, SendEventID) == 0x000000, "Member 'EventSender_SetSendEventID::SendEventID' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetInstance final
{
public:
	class UEventSystemManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetInstance) == 0x000008, "Wrong alignment on EventSystemManager_GetInstance");
static_assert(sizeof(EventSystemManager_GetInstance) == 0x000008, "Wrong size on EventSystemManager_GetInstance");
static_assert(offsetof(EventSystemManager_GetInstance, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetEventExecuter
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetEventExecuter final
{
public:
	class UEventExecuter*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetEventExecuter) == 0x000008, "Wrong alignment on EventSystemManager_GetEventExecuter");
static_assert(sizeof(EventSystemManager_GetEventExecuter) == 0x000008, "Wrong size on EventSystemManager_GetEventExecuter");
static_assert(offsetof(EventSystemManager_GetEventExecuter, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetEventExecuter::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetEventManager
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetEventManager final
{
public:
	class UEventManager*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetEventManager) == 0x000008, "Wrong alignment on EventSystemManager_GetEventManager");
static_assert(sizeof(EventSystemManager_GetEventManager) == 0x000008, "Wrong size on EventSystemManager_GetEventManager");
static_assert(offsetof(EventSystemManager_GetEventManager, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetEventManager::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetEventSystemManagerActor
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetEventSystemManagerActor final
{
public:
	class AEventSystemManagerActor*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetEventSystemManagerActor) == 0x000008, "Wrong alignment on EventSystemManager_GetEventSystemManagerActor");
static_assert(sizeof(EventSystemManager_GetEventSystemManagerActor) == 0x000008, "Wrong size on EventSystemManager_GetEventSystemManagerActor");
static_assert(offsetof(EventSystemManager_GetEventSystemManagerActor, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetEventSystemManagerActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetSequencerController
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetSequencerController final
{
public:
	class USequencerController*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetSequencerController) == 0x000008, "Wrong alignment on EventSystemManager_GetSequencerController");
static_assert(sizeof(EventSystemManager_GetSequencerController) == 0x000008, "Wrong size on EventSystemManager_GetSequencerController");
static_assert(offsetof(EventSystemManager_GetSequencerController, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetSequencerController::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.SetCSSkipDone
// 0x0001 (0x0001 - 0x0000)
struct EventSystemManager_SetCSSkipDone final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_SetCSSkipDone) == 0x000001, "Wrong alignment on EventSystemManager_SetCSSkipDone");
static_assert(sizeof(EventSystemManager_SetCSSkipDone) == 0x000001, "Wrong size on EventSystemManager_SetCSSkipDone");
static_assert(offsetof(EventSystemManager_SetCSSkipDone, Flag) == 0x000000, "Member 'EventSystemManager_SetCSSkipDone::Flag' has a wrong offset!");

// Function DarwinGame.EventSystemManager.SetCSSkipVisible
// 0x0001 (0x0001 - 0x0000)
struct EventSystemManager_SetCSSkipVisible final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_SetCSSkipVisible) == 0x000001, "Wrong alignment on EventSystemManager_SetCSSkipVisible");
static_assert(sizeof(EventSystemManager_SetCSSkipVisible) == 0x000001, "Wrong size on EventSystemManager_SetCSSkipVisible");
static_assert(offsetof(EventSystemManager_SetCSSkipVisible, Flag) == 0x000000, "Member 'EventSystemManager_SetCSSkipVisible::Flag' has a wrong offset!");

// Function DarwinGame.EventSystemManager.SetPlayEvent
// 0x0001 (0x0001 - 0x0000)
struct EventSystemManager_SetPlayEvent final
{
public:
	bool                                          Play;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_SetPlayEvent) == 0x000001, "Wrong alignment on EventSystemManager_SetPlayEvent");
static_assert(sizeof(EventSystemManager_SetPlayEvent) == 0x000001, "Wrong size on EventSystemManager_SetPlayEvent");
static_assert(offsetof(EventSystemManager_SetPlayEvent, Play) == 0x000000, "Member 'EventSystemManager_SetPlayEvent::Play' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetEventDataBase
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetEventDataBase final
{
public:
	class UEventDataBase*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetEventDataBase) == 0x000008, "Wrong alignment on EventSystemManager_GetEventDataBase");
static_assert(sizeof(EventSystemManager_GetEventDataBase) == 0x000008, "Wrong size on EventSystemManager_GetEventDataBase");
static_assert(offsetof(EventSystemManager_GetEventDataBase, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetEventDataBase::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetEventLoader
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetEventLoader final
{
public:
	class UEventLoader*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetEventLoader) == 0x000008, "Wrong alignment on EventSystemManager_GetEventLoader");
static_assert(sizeof(EventSystemManager_GetEventLoader) == 0x000008, "Wrong size on EventSystemManager_GetEventLoader");
static_assert(offsetof(EventSystemManager_GetEventLoader, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetEventLoader::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetGameProgress
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetGameProgress final
{
public:
	class UGameProgress*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetGameProgress) == 0x000008, "Wrong alignment on EventSystemManager_GetGameProgress");
static_assert(sizeof(EventSystemManager_GetGameProgress) == 0x000008, "Wrong size on EventSystemManager_GetGameProgress");
static_assert(offsetof(EventSystemManager_GetGameProgress, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetGameProgress::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetPCChangeBeforeTalkEventData
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetPCChangeBeforeTalkEventData final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetPCChangeBeforeTalkEventData) == 0x000008, "Wrong alignment on EventSystemManager_GetPCChangeBeforeTalkEventData");
static_assert(sizeof(EventSystemManager_GetPCChangeBeforeTalkEventData) == 0x000008, "Wrong size on EventSystemManager_GetPCChangeBeforeTalkEventData");
static_assert(offsetof(EventSystemManager_GetPCChangeBeforeTalkEventData, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetPCChangeBeforeTalkEventData::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetPCChangeTalkEventData
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetPCChangeTalkEventData final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetPCChangeTalkEventData) == 0x000008, "Wrong alignment on EventSystemManager_GetPCChangeTalkEventData");
static_assert(sizeof(EventSystemManager_GetPCChangeTalkEventData) == 0x000008, "Wrong size on EventSystemManager_GetPCChangeTalkEventData");
static_assert(offsetof(EventSystemManager_GetPCChangeTalkEventData, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetPCChangeTalkEventData::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.GetTalkEventSystem
// 0x0008 (0x0008 - 0x0000)
struct EventSystemManager_GetTalkEventSystem final
{
public:
	class UTalkEventSystem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_GetTalkEventSystem) == 0x000008, "Wrong alignment on EventSystemManager_GetTalkEventSystem");
static_assert(sizeof(EventSystemManager_GetTalkEventSystem) == 0x000008, "Wrong size on EventSystemManager_GetTalkEventSystem");
static_assert(offsetof(EventSystemManager_GetTalkEventSystem, ReturnValue) == 0x000000, "Member 'EventSystemManager_GetTalkEventSystem::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.IsCSSkipDone
// 0x0001 (0x0001 - 0x0000)
struct EventSystemManager_IsCSSkipDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_IsCSSkipDone) == 0x000001, "Wrong alignment on EventSystemManager_IsCSSkipDone");
static_assert(sizeof(EventSystemManager_IsCSSkipDone) == 0x000001, "Wrong size on EventSystemManager_IsCSSkipDone");
static_assert(offsetof(EventSystemManager_IsCSSkipDone, ReturnValue) == 0x000000, "Member 'EventSystemManager_IsCSSkipDone::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.IsCSSkipVisible
// 0x0001 (0x0001 - 0x0000)
struct EventSystemManager_IsCSSkipVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_IsCSSkipVisible) == 0x000001, "Wrong alignment on EventSystemManager_IsCSSkipVisible");
static_assert(sizeof(EventSystemManager_IsCSSkipVisible) == 0x000001, "Wrong size on EventSystemManager_IsCSSkipVisible");
static_assert(offsetof(EventSystemManager_IsCSSkipVisible, ReturnValue) == 0x000000, "Member 'EventSystemManager_IsCSSkipVisible::ReturnValue' has a wrong offset!");

// Function DarwinGame.EventSystemManager.IsPlayEvent
// 0x0001 (0x0001 - 0x0000)
struct EventSystemManager_IsPlayEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSystemManager_IsPlayEvent) == 0x000001, "Wrong alignment on EventSystemManager_IsPlayEvent");
static_assert(sizeof(EventSystemManager_IsPlayEvent) == 0x000001, "Wrong size on EventSystemManager_IsPlayEvent");
static_assert(offsetof(EventSystemManager_IsPlayEvent, ReturnValue) == 0x000000, "Member 'EventSystemManager_IsPlayEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIShot_WinStatus.GetListIndexFunc
// 0x0008 (0x0008 - 0x0000)
struct UIShot_WinStatus_GetListIndexFunc final
{
public:
	int32                                         OutCategoryIndex;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutGroupIndex;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_WinStatus_GetListIndexFunc) == 0x000004, "Wrong alignment on UIShot_WinStatus_GetListIndexFunc");
static_assert(sizeof(UIShot_WinStatus_GetListIndexFunc) == 0x000008, "Wrong size on UIShot_WinStatus_GetListIndexFunc");
static_assert(offsetof(UIShot_WinStatus_GetListIndexFunc, OutCategoryIndex) == 0x000000, "Member 'UIShot_WinStatus_GetListIndexFunc::OutCategoryIndex' has a wrong offset!");
static_assert(offsetof(UIShot_WinStatus_GetListIndexFunc, OutGroupIndex) == 0x000004, "Member 'UIShot_WinStatus_GetListIndexFunc::OutGroupIndex' has a wrong offset!");

// Function DarwinGame.UIShot_WinStatus.SetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct UIShot_WinStatus_SetSelectIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_WinStatus_SetSelectIndex) == 0x000004, "Wrong alignment on UIShot_WinStatus_SetSelectIndex");
static_assert(sizeof(UIShot_WinStatus_SetSelectIndex) == 0x000004, "Wrong size on UIShot_WinStatus_SetSelectIndex");
static_assert(offsetof(UIShot_WinStatus_SetSelectIndex, InIndex) == 0x000000, "Member 'UIShot_WinStatus_SetSelectIndex::InIndex' has a wrong offset!");

// Function DarwinGame.UIShot_WinStatus.SetSelectModeFunc
// 0x0001 (0x0001 - 0x0000)
struct UIShot_WinStatus_SetSelectModeFunc final
{
public:
	bool                                          bInIsSelectMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_WinStatus_SetSelectModeFunc) == 0x000001, "Wrong alignment on UIShot_WinStatus_SetSelectModeFunc");
static_assert(sizeof(UIShot_WinStatus_SetSelectModeFunc) == 0x000001, "Wrong size on UIShot_WinStatus_SetSelectModeFunc");
static_assert(offsetof(UIShot_WinStatus_SetSelectModeFunc, bInIsSelectMode) == 0x000000, "Member 'UIShot_WinStatus_SetSelectModeFunc::bInIsSelectMode' has a wrong offset!");

// Function DarwinGame.UIShot_WinStatus.GetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct UIShot_WinStatus_GetSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_WinStatus_GetSelectIndex) == 0x000004, "Wrong alignment on UIShot_WinStatus_GetSelectIndex");
static_assert(sizeof(UIShot_WinStatus_GetSelectIndex) == 0x000004, "Wrong size on UIShot_WinStatus_GetSelectIndex");
static_assert(offsetof(UIShot_WinStatus_GetSelectIndex, ReturnValue) == 0x000000, "Member 'UIShot_WinStatus_GetSelectIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIShot_WinStatus.GetSelectMode
// 0x0001 (0x0001 - 0x0000)
struct UIShot_WinStatus_GetSelectMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_WinStatus_GetSelectMode) == 0x000001, "Wrong alignment on UIShot_WinStatus_GetSelectMode");
static_assert(sizeof(UIShot_WinStatus_GetSelectMode) == 0x000001, "Wrong size on UIShot_WinStatus_GetSelectMode");
static_assert(offsetof(UIShot_WinStatus_GetSelectMode, ReturnValue) == 0x000000, "Member 'UIShot_WinStatus_GetSelectMode::ReturnValue' has a wrong offset!");

// Function DarwinGame.FastTravelComponent.OnMove
// 0x0004 (0x0004 - 0x0000)
struct FastTravelComponent_OnMove final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastTravelComponent_OnMove) == 0x000004, "Wrong alignment on FastTravelComponent_OnMove");
static_assert(sizeof(FastTravelComponent_OnMove) == 0x000004, "Wrong size on FastTravelComponent_OnMove");
static_assert(offsetof(FastTravelComponent_OnMove, ID) == 0x000000, "Member 'FastTravelComponent_OnMove::ID' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.CheckEffectValue
// 0x0014 (0x0014 - 0x0000)
struct FeatureDataTable_CheckEffectValue final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         outputValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureDataTable_CheckEffectValue) == 0x000004, "Wrong alignment on FeatureDataTable_CheckEffectValue");
static_assert(sizeof(FeatureDataTable_CheckEffectValue) == 0x000014, "Wrong size on FeatureDataTable_CheckEffectValue");
static_assert(offsetof(FeatureDataTable_CheckEffectValue, ID) == 0x000000, "Member 'FeatureDataTable_CheckEffectValue::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_CheckEffectValue, Level) == 0x000008, "Member 'FeatureDataTable_CheckEffectValue::Level' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_CheckEffectValue, outputValue) == 0x00000C, "Member 'FeatureDataTable_CheckEffectValue::outputValue' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_CheckEffectValue, ReturnValue) == 0x000010, "Member 'FeatureDataTable_CheckEffectValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.GetEffectPositionType
// 0x000C (0x000C - 0x0000)
struct FeatureDataTable_GetEffectPositionType final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFeaturePositionType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureDataTable_GetEffectPositionType) == 0x000004, "Wrong alignment on FeatureDataTable_GetEffectPositionType");
static_assert(sizeof(FeatureDataTable_GetEffectPositionType) == 0x00000C, "Wrong size on FeatureDataTable_GetEffectPositionType");
static_assert(offsetof(FeatureDataTable_GetEffectPositionType, ID) == 0x000000, "Member 'FeatureDataTable_GetEffectPositionType::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetEffectPositionType, ReturnValue) == 0x000008, "Member 'FeatureDataTable_GetEffectPositionType::ReturnValue' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.GetEffectStatusParamType
// 0x000C (0x000C - 0x0000)
struct FeatureDataTable_GetEffectStatusParamType final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusParamType                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureDataTable_GetEffectStatusParamType) == 0x000004, "Wrong alignment on FeatureDataTable_GetEffectStatusParamType");
static_assert(sizeof(FeatureDataTable_GetEffectStatusParamType) == 0x00000C, "Wrong size on FeatureDataTable_GetEffectStatusParamType");
static_assert(offsetof(FeatureDataTable_GetEffectStatusParamType, ID) == 0x000000, "Member 'FeatureDataTable_GetEffectStatusParamType::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetEffectStatusParamType, ReturnValue) == 0x000008, "Member 'FeatureDataTable_GetEffectStatusParamType::ReturnValue' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.GetEffectValue
// 0x0010 (0x0010 - 0x0000)
struct FeatureDataTable_GetEffectValue final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeatureDataTable_GetEffectValue) == 0x000004, "Wrong alignment on FeatureDataTable_GetEffectValue");
static_assert(sizeof(FeatureDataTable_GetEffectValue) == 0x000010, "Wrong size on FeatureDataTable_GetEffectValue");
static_assert(offsetof(FeatureDataTable_GetEffectValue, ID) == 0x000000, "Member 'FeatureDataTable_GetEffectValue::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetEffectValue, Level) == 0x000008, "Member 'FeatureDataTable_GetEffectValue::Level' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetEffectValue, ReturnValue) == 0x00000C, "Member 'FeatureDataTable_GetEffectValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.GetFeatureCondition
// 0x0038 (0x0038 - 0x0000)
struct FeatureDataTable_GetFeatureCondition final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Condition                          Condition;                                         // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeatureDataTable_GetFeatureCondition) == 0x000008, "Wrong alignment on FeatureDataTable_GetFeatureCondition");
static_assert(sizeof(FeatureDataTable_GetFeatureCondition) == 0x000038, "Wrong size on FeatureDataTable_GetFeatureCondition");
static_assert(offsetof(FeatureDataTable_GetFeatureCondition, ID) == 0x000000, "Member 'FeatureDataTable_GetFeatureCondition::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetFeatureCondition, Condition) == 0x000008, "Member 'FeatureDataTable_GetFeatureCondition::Condition' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.GetFeatureEffect
// 0x0050 (0x0050 - 0x0000)
struct FeatureDataTable_GetFeatureEffect final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_FeatureEffect                      Output;                                            // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureDataTable_GetFeatureEffect) == 0x000008, "Wrong alignment on FeatureDataTable_GetFeatureEffect");
static_assert(sizeof(FeatureDataTable_GetFeatureEffect) == 0x000050, "Wrong size on FeatureDataTable_GetFeatureEffect");
static_assert(offsetof(FeatureDataTable_GetFeatureEffect, ID) == 0x000000, "Member 'FeatureDataTable_GetFeatureEffect::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetFeatureEffect, Output) == 0x000008, "Member 'FeatureDataTable_GetFeatureEffect::Output' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetFeatureEffect, ReturnValue) == 0x000048, "Member 'FeatureDataTable_GetFeatureEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.GetFeatureEffectType
// 0x000C (0x000C - 0x0000)
struct FeatureDataTable_GetFeatureEffectType final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFeatureEffectType                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureDataTable_GetFeatureEffectType) == 0x000004, "Wrong alignment on FeatureDataTable_GetFeatureEffectType");
static_assert(sizeof(FeatureDataTable_GetFeatureEffectType) == 0x00000C, "Wrong size on FeatureDataTable_GetFeatureEffectType");
static_assert(offsetof(FeatureDataTable_GetFeatureEffectType, ID) == 0x000000, "Member 'FeatureDataTable_GetFeatureEffectType::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetFeatureEffectType, ReturnValue) == 0x000008, "Member 'FeatureDataTable_GetFeatureEffectType::ReturnValue' has a wrong offset!");

// Function DarwinGame.FeatureDataTable.GetFeatureSystemType
// 0x000C (0x000C - 0x0000)
struct FeatureDataTable_GetFeatureSystemType final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFeatureSystemType                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureDataTable_GetFeatureSystemType) == 0x000004, "Wrong alignment on FeatureDataTable_GetFeatureSystemType");
static_assert(sizeof(FeatureDataTable_GetFeatureSystemType) == 0x00000C, "Wrong size on FeatureDataTable_GetFeatureSystemType");
static_assert(offsetof(FeatureDataTable_GetFeatureSystemType, ID) == 0x000000, "Member 'FeatureDataTable_GetFeatureSystemType::ID' has a wrong offset!");
static_assert(offsetof(FeatureDataTable_GetFeatureSystemType, ReturnValue) == 0x000008, "Member 'FeatureDataTable_GetFeatureSystemType::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldBlueprintFunctionLibrary.AddHISMComponent
// 0x0010 (0x0010 - 0x0000)
struct FieldBlueprintFunctionLibrary_AddHISMComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHierarchicalInstancedStaticMeshComponent* ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldBlueprintFunctionLibrary_AddHISMComponent) == 0x000008, "Wrong alignment on FieldBlueprintFunctionLibrary_AddHISMComponent");
static_assert(sizeof(FieldBlueprintFunctionLibrary_AddHISMComponent) == 0x000010, "Wrong size on FieldBlueprintFunctionLibrary_AddHISMComponent");
static_assert(offsetof(FieldBlueprintFunctionLibrary_AddHISMComponent, Actor) == 0x000000, "Member 'FieldBlueprintFunctionLibrary_AddHISMComponent::Actor' has a wrong offset!");
static_assert(offsetof(FieldBlueprintFunctionLibrary_AddHISMComponent, ReturnValue) == 0x000008, "Member 'FieldBlueprintFunctionLibrary_AddHISMComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldBlueprintFunctionLibrary.GetLevelNameWithActor
// 0x0018 (0x0018 - 0x0000)
struct FieldBlueprintFunctionLibrary_GetLevelNameWithActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isGet;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldBlueprintFunctionLibrary_GetLevelNameWithActor) == 0x000008, "Wrong alignment on FieldBlueprintFunctionLibrary_GetLevelNameWithActor");
static_assert(sizeof(FieldBlueprintFunctionLibrary_GetLevelNameWithActor) == 0x000018, "Wrong size on FieldBlueprintFunctionLibrary_GetLevelNameWithActor");
static_assert(offsetof(FieldBlueprintFunctionLibrary_GetLevelNameWithActor, TargetActor) == 0x000000, "Member 'FieldBlueprintFunctionLibrary_GetLevelNameWithActor::TargetActor' has a wrong offset!");
static_assert(offsetof(FieldBlueprintFunctionLibrary_GetLevelNameWithActor, isGet) == 0x000008, "Member 'FieldBlueprintFunctionLibrary_GetLevelNameWithActor::isGet' has a wrong offset!");
static_assert(offsetof(FieldBlueprintFunctionLibrary_GetLevelNameWithActor, ReturnValue) == 0x00000C, "Member 'FieldBlueprintFunctionLibrary_GetLevelNameWithActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldBlueprintFunctionLibrary.GetViewportLocation
// 0x0018 (0x0018 - 0x0000)
struct FieldBlueprintFunctionLibrary_GetViewportLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldBlueprintFunctionLibrary_GetViewportLocation) == 0x000008, "Wrong alignment on FieldBlueprintFunctionLibrary_GetViewportLocation");
static_assert(sizeof(FieldBlueprintFunctionLibrary_GetViewportLocation) == 0x000018, "Wrong size on FieldBlueprintFunctionLibrary_GetViewportLocation");
static_assert(offsetof(FieldBlueprintFunctionLibrary_GetViewportLocation, WorldContextObject) == 0x000000, "Member 'FieldBlueprintFunctionLibrary_GetViewportLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FieldBlueprintFunctionLibrary_GetViewportLocation, ReturnValue) == 0x000008, "Member 'FieldBlueprintFunctionLibrary_GetViewportLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_IconQuestLine.SetData
// 0x0030 (0x0030 - 0x0000)
struct UIField_IconQuestLine_SetData final
{
public:
	class FText                                   InQuestName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InQuestTypeName;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconQuestLine_SetData) == 0x000008, "Wrong alignment on UIField_IconQuestLine_SetData");
static_assert(sizeof(UIField_IconQuestLine_SetData) == 0x000030, "Wrong size on UIField_IconQuestLine_SetData");
static_assert(offsetof(UIField_IconQuestLine_SetData, InQuestName) == 0x000000, "Member 'UIField_IconQuestLine_SetData::InQuestName' has a wrong offset!");
static_assert(offsetof(UIField_IconQuestLine_SetData, InQuestTypeName) == 0x000018, "Member 'UIField_IconQuestLine_SetData::InQuestTypeName' has a wrong offset!");

// Function DarwinGame.UIField_IconQuestLine.SetQuestID
// 0x0008 (0x0008 - 0x0000)
struct UIField_IconQuestLine_SetQuestID final
{
public:
	class FName                                   InQuestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconQuestLine_SetQuestID) == 0x000004, "Wrong alignment on UIField_IconQuestLine_SetQuestID");
static_assert(sizeof(UIField_IconQuestLine_SetQuestID) == 0x000008, "Wrong size on UIField_IconQuestLine_SetQuestID");
static_assert(offsetof(UIField_IconQuestLine_SetQuestID, InQuestID) == 0x000000, "Member 'UIField_IconQuestLine_SetQuestID::InQuestID' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageComposite.SetBelongType
// 0x0008 (0x0008 - 0x0000)
struct UISign_IconDamageComposite_SetBelongType final
{
public:
	struct FGameplayTag                           Belong;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconDamageComposite_SetBelongType) == 0x000004, "Wrong alignment on UISign_IconDamageComposite_SetBelongType");
static_assert(sizeof(UISign_IconDamageComposite_SetBelongType) == 0x000008, "Wrong size on UISign_IconDamageComposite_SetBelongType");
static_assert(offsetof(UISign_IconDamageComposite_SetBelongType, Belong) == 0x000000, "Member 'UISign_IconDamageComposite_SetBelongType::Belong' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageComposite.SetCriticalType
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconDamageComposite_SetCriticalType final
{
public:
	EDamageCriticalType                           CriticalType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconDamageComposite_SetCriticalType) == 0x000001, "Wrong alignment on UISign_IconDamageComposite_SetCriticalType");
static_assert(sizeof(UISign_IconDamageComposite_SetCriticalType) == 0x000001, "Wrong size on UISign_IconDamageComposite_SetCriticalType");
static_assert(offsetof(UISign_IconDamageComposite_SetCriticalType, CriticalType) == 0x000000, "Member 'UISign_IconDamageComposite_SetCriticalType::CriticalType' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageComposite.SetDamageValue
// 0x0004 (0x0004 - 0x0000)
struct UISign_IconDamageComposite_SetDamageValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconDamageComposite_SetDamageValue) == 0x000004, "Wrong alignment on UISign_IconDamageComposite_SetDamageValue");
static_assert(sizeof(UISign_IconDamageComposite_SetDamageValue) == 0x000004, "Wrong size on UISign_IconDamageComposite_SetDamageValue");
static_assert(offsetof(UISign_IconDamageComposite_SetDamageValue, Value) == 0x000000, "Member 'UISign_IconDamageComposite_SetDamageValue::Value' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageComposite.SetData
// 0x001C (0x001C - 0x0000)
struct UISign_IconDamageComposite_SetData final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Belong;                                            // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageCriticalType                           CriticalType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageSizeType                               SizeType;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISign_IconDamageComposite_SetData) == 0x000004, "Wrong alignment on UISign_IconDamageComposite_SetData");
static_assert(sizeof(UISign_IconDamageComposite_SetData) == 0x00001C, "Wrong size on UISign_IconDamageComposite_SetData");
static_assert(offsetof(UISign_IconDamageComposite_SetData, Value) == 0x000000, "Member 'UISign_IconDamageComposite_SetData::Value' has a wrong offset!");
static_assert(offsetof(UISign_IconDamageComposite_SetData, Belong) == 0x000004, "Member 'UISign_IconDamageComposite_SetData::Belong' has a wrong offset!");
static_assert(offsetof(UISign_IconDamageComposite_SetData, TargetLocation) == 0x00000C, "Member 'UISign_IconDamageComposite_SetData::TargetLocation' has a wrong offset!");
static_assert(offsetof(UISign_IconDamageComposite_SetData, CriticalType) == 0x000018, "Member 'UISign_IconDamageComposite_SetData::CriticalType' has a wrong offset!");
static_assert(offsetof(UISign_IconDamageComposite_SetData, SizeType) == 0x000019, "Member 'UISign_IconDamageComposite_SetData::SizeType' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageComposite.SetSizeType
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconDamageComposite_SetSizeType final
{
public:
	EDamageSizeType                               SizeType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconDamageComposite_SetSizeType) == 0x000001, "Wrong alignment on UISign_IconDamageComposite_SetSizeType");
static_assert(sizeof(UISign_IconDamageComposite_SetSizeType) == 0x000001, "Wrong size on UISign_IconDamageComposite_SetSizeType");
static_assert(offsetof(UISign_IconDamageComposite_SetSizeType, SizeType) == 0x000000, "Member 'UISign_IconDamageComposite_SetSizeType::SizeType' has a wrong offset!");

// Function DarwinGame.FieldObjectBlueprintFunctionLibrary.CalcDropLaunchVelocity
// 0x002C (0x002C - 0x0000)
struct FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity final
{
public:
	int32                                         min_dis;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         max_dis;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         min_height;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         max_height;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               base_rotator;                                      // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity) == 0x000004, "Wrong alignment on FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity");
static_assert(sizeof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity) == 0x00002C, "Wrong size on FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity, min_dis) == 0x000000, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity::min_dis' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity, max_dis) == 0x000004, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity::max_dis' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity, min_height) == 0x000008, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity::min_height' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity, max_height) == 0x00000C, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity::max_height' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity, Range) == 0x000010, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity::Range' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity, base_rotator) == 0x000014, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity::base_rotator' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity, ReturnValue) == 0x000020, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocity::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectBlueprintFunctionLibrary.CalcDropLaunchVelocityFromAngle
// 0x0020 (0x0020 - 0x0000)
struct FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Azimuth;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AzimuthRange;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Elevation;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElevationRange;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle) == 0x000004, "Wrong alignment on FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle");
static_assert(sizeof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle) == 0x000020, "Wrong size on FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle, Strength) == 0x000000, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle::Strength' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle, Azimuth) == 0x000004, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle::Azimuth' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle, AzimuthRange) == 0x000008, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle::AzimuthRange' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle, Elevation) == 0x00000C, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle::Elevation' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle, ElevationRange) == 0x000010, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle::ElevationRange' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle, ReturnValue) == 0x000014, "Member 'FieldObjectBlueprintFunctionLibrary_CalcDropLaunchVelocityFromAngle::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectBlueprintFunctionLibrary.CheckEventClearFromEventID
// 0x000C (0x000C - 0x0000)
struct FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCheckOR;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID) == 0x000004, "Wrong alignment on FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID");
static_assert(sizeof(FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID) == 0x00000C, "Wrong size on FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID, EventID) == 0x000000, "Member 'FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID::EventID' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID, IsCheckOR) == 0x000008, "Member 'FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID::IsCheckOR' has a wrong offset!");
static_assert(offsetof(FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID, ReturnValue) == 0x000009, "Member 'FieldObjectBlueprintFunctionLibrary_CheckEventClearFromEventID::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropCoinFromCoinParamAttachActor
// 0x0078 (0x0078 - 0x0000)
struct FieldObjectManager_DropCoinFromCoinParamAttachActor final
{
public:
	struct FST_CoinParam                          CoinData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0048(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0054(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0060(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropCoinFromCoinParamAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_DropCoinFromCoinParamAttachActor");
static_assert(sizeof(FieldObjectManager_DropCoinFromCoinParamAttachActor) == 0x000078, "Wrong size on FieldObjectManager_DropCoinFromCoinParamAttachActor");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, CoinData) == 0x000000, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::CoinData' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, LaunchVelocity) == 0x000018, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, IgnoreActors) == 0x000028, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, Parent) == 0x000038, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, socket) == 0x000040, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, LocalLocation) == 0x000048, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, LocalRotation) == 0x000054, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, LocalScale) == 0x000060, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachActor, ReturnValue) == 0x000070, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropCoinFromCoinParamAttachComponent
// 0x0078 (0x0078 - 0x0000)
struct FieldObjectManager_DropCoinFromCoinParamAttachComponent final
{
public:
	struct FST_CoinParam                          CoinData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Componnet;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0048(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0054(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0060(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropCoinFromCoinParamAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_DropCoinFromCoinParamAttachComponent");
static_assert(sizeof(FieldObjectManager_DropCoinFromCoinParamAttachComponent) == 0x000078, "Wrong size on FieldObjectManager_DropCoinFromCoinParamAttachComponent");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, CoinData) == 0x000000, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::CoinData' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, LaunchVelocity) == 0x000018, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, IgnoreActors) == 0x000028, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, Componnet) == 0x000038, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, socket) == 0x000040, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, LocalLocation) == 0x000048, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, LocalRotation) == 0x000054, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, LocalScale) == 0x000060, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromCoinParamAttachComponent, ReturnValue) == 0x000070, "Member 'FieldObjectManager_DropCoinFromCoinParamAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropCoinFromMonsterInfo
// 0x0058 (0x0058 - 0x0000)
struct FieldObjectManager_DropCoinFromMonsterInfo final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0034(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0040(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropCoinFromMonsterInfo) == 0x000008, "Wrong alignment on FieldObjectManager_DropCoinFromMonsterInfo");
static_assert(sizeof(FieldObjectManager_DropCoinFromMonsterInfo) == 0x000058, "Wrong size on FieldObjectManager_DropCoinFromMonsterInfo");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, Level) == 0x000000, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::Level' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, KindId) == 0x000004, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::KindId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, LaunchVelocity) == 0x000008, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, IgnoreActors) == 0x000018, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, WorldLocation) == 0x000028, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, WorldRotation) == 0x000034, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, WorldScale) == 0x000040, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfo, ReturnValue) == 0x000050, "Member 'FieldObjectManager_DropCoinFromMonsterInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropCoinFromMonsterInfoAttachActor
// 0x0068 (0x0068 - 0x0000)
struct FieldObjectManager_DropCoinFromMonsterInfoAttachActor final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0044(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0050(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_DropCoinFromMonsterInfoAttachActor");
static_assert(sizeof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor) == 0x000068, "Wrong size on FieldObjectManager_DropCoinFromMonsterInfoAttachActor");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, Level) == 0x000000, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::Level' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, KindId) == 0x000004, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::KindId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, LaunchVelocity) == 0x000008, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, IgnoreActors) == 0x000018, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, Parent) == 0x000028, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, socket) == 0x000030, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, LocalLocation) == 0x000038, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, LocalRotation) == 0x000044, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, LocalScale) == 0x000050, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachActor, ReturnValue) == 0x000060, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropCoinFromMonsterInfoAttachComponent
// 0x0068 (0x0068 - 0x0000)
struct FieldObjectManager_DropCoinFromMonsterInfoAttachComponent final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Componnet;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0044(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0050(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_DropCoinFromMonsterInfoAttachComponent");
static_assert(sizeof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent) == 0x000068, "Wrong size on FieldObjectManager_DropCoinFromMonsterInfoAttachComponent");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, Level) == 0x000000, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::Level' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, KindId) == 0x000004, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::KindId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, LaunchVelocity) == 0x000008, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, IgnoreActors) == 0x000018, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, Componnet) == 0x000028, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, socket) == 0x000030, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, LocalLocation) == 0x000038, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, LocalRotation) == 0x000044, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, LocalScale) == 0x000050, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropCoinFromMonsterInfoAttachComponent, ReturnValue) == 0x000060, "Member 'FieldObjectManager_DropCoinFromMonsterInfoAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropItem
// 0x0058 (0x0058 - 0x0000)
struct FieldObjectManager_DropItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0034(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0040(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADropItemObject*                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropItem) == 0x000008, "Wrong alignment on FieldObjectManager_DropItem");
static_assert(sizeof(FieldObjectManager_DropItem) == 0x000058, "Wrong size on FieldObjectManager_DropItem");
static_assert(offsetof(FieldObjectManager_DropItem, ItemId) == 0x000000, "Member 'FieldObjectManager_DropItem::ItemId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItem, ItemCount) == 0x000008, "Member 'FieldObjectManager_DropItem::ItemCount' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItem, LaunchVelocity) == 0x00000C, "Member 'FieldObjectManager_DropItem::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItem, IgnoreActors) == 0x000018, "Member 'FieldObjectManager_DropItem::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItem, WorldLocation) == 0x000028, "Member 'FieldObjectManager_DropItem::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItem, WorldRotation) == 0x000034, "Member 'FieldObjectManager_DropItem::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItem, WorldScale) == 0x000040, "Member 'FieldObjectManager_DropItem::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItem, ReturnValue) == 0x000050, "Member 'FieldObjectManager_DropItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropItemAttachActor
// 0x0068 (0x0068 - 0x0000)
struct FieldObjectManager_DropItemAttachActor final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0044(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0050(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADropItemObject*                        ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropItemAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_DropItemAttachActor");
static_assert(sizeof(FieldObjectManager_DropItemAttachActor) == 0x000068, "Wrong size on FieldObjectManager_DropItemAttachActor");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, ItemId) == 0x000000, "Member 'FieldObjectManager_DropItemAttachActor::ItemId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, ItemCount) == 0x000008, "Member 'FieldObjectManager_DropItemAttachActor::ItemCount' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, LaunchVelocity) == 0x00000C, "Member 'FieldObjectManager_DropItemAttachActor::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, IgnoreActors) == 0x000018, "Member 'FieldObjectManager_DropItemAttachActor::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, Parent) == 0x000028, "Member 'FieldObjectManager_DropItemAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, socket) == 0x000030, "Member 'FieldObjectManager_DropItemAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, LocalLocation) == 0x000038, "Member 'FieldObjectManager_DropItemAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, LocalRotation) == 0x000044, "Member 'FieldObjectManager_DropItemAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, LocalScale) == 0x000050, "Member 'FieldObjectManager_DropItemAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachActor, ReturnValue) == 0x000060, "Member 'FieldObjectManager_DropItemAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropItemAttachComponent
// 0x0068 (0x0068 - 0x0000)
struct FieldObjectManager_DropItemAttachComponent final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Componnet;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0044(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0050(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADropItemObject*                        ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropItemAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_DropItemAttachComponent");
static_assert(sizeof(FieldObjectManager_DropItemAttachComponent) == 0x000068, "Wrong size on FieldObjectManager_DropItemAttachComponent");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, ItemId) == 0x000000, "Member 'FieldObjectManager_DropItemAttachComponent::ItemId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, ItemCount) == 0x000008, "Member 'FieldObjectManager_DropItemAttachComponent::ItemCount' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, LaunchVelocity) == 0x00000C, "Member 'FieldObjectManager_DropItemAttachComponent::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, IgnoreActors) == 0x000018, "Member 'FieldObjectManager_DropItemAttachComponent::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, Componnet) == 0x000028, "Member 'FieldObjectManager_DropItemAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, socket) == 0x000030, "Member 'FieldObjectManager_DropItemAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, LocalLocation) == 0x000038, "Member 'FieldObjectManager_DropItemAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, LocalRotation) == 0x000044, "Member 'FieldObjectManager_DropItemAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, LocalScale) == 0x000050, "Member 'FieldObjectManager_DropItemAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropItemAttachComponent, ReturnValue) == 0x000060, "Member 'FieldObjectManager_DropItemAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropTreasureMap
// 0x0050 (0x0050 - 0x0000)
struct FieldObjectManager_DropTreasureMap final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATreasureMapObjectBase*                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropTreasureMap) == 0x000008, "Wrong alignment on FieldObjectManager_DropTreasureMap");
static_assert(sizeof(FieldObjectManager_DropTreasureMap) == 0x000050, "Wrong size on FieldObjectManager_DropTreasureMap");
static_assert(offsetof(FieldObjectManager_DropTreasureMap, LaunchVelocity) == 0x000000, "Member 'FieldObjectManager_DropTreasureMap::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMap, IgnoreActors) == 0x000010, "Member 'FieldObjectManager_DropTreasureMap::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMap, WorldLocation) == 0x000020, "Member 'FieldObjectManager_DropTreasureMap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMap, WorldRotation) == 0x00002C, "Member 'FieldObjectManager_DropTreasureMap::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMap, WorldScale) == 0x000038, "Member 'FieldObjectManager_DropTreasureMap::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMap, ReturnValue) == 0x000048, "Member 'FieldObjectManager_DropTreasureMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropTreasureMapAttachActor
// 0x0060 (0x0060 - 0x0000)
struct FieldObjectManager_DropTreasureMapAttachActor final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x003C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0048(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATreasureMapObjectBase*                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropTreasureMapAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_DropTreasureMapAttachActor");
static_assert(sizeof(FieldObjectManager_DropTreasureMapAttachActor) == 0x000060, "Wrong size on FieldObjectManager_DropTreasureMapAttachActor");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, LaunchVelocity) == 0x000000, "Member 'FieldObjectManager_DropTreasureMapAttachActor::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, IgnoreActors) == 0x000010, "Member 'FieldObjectManager_DropTreasureMapAttachActor::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, Parent) == 0x000020, "Member 'FieldObjectManager_DropTreasureMapAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, socket) == 0x000028, "Member 'FieldObjectManager_DropTreasureMapAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, LocalLocation) == 0x000030, "Member 'FieldObjectManager_DropTreasureMapAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, LocalRotation) == 0x00003C, "Member 'FieldObjectManager_DropTreasureMapAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, LocalScale) == 0x000048, "Member 'FieldObjectManager_DropTreasureMapAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachActor, ReturnValue) == 0x000058, "Member 'FieldObjectManager_DropTreasureMapAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.DropTreasureMapAttachComponent
// 0x0060 (0x0060 - 0x0000)
struct FieldObjectManager_DropTreasureMapAttachComponent final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Componnet;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x003C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0048(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATreasureMapObjectBase*                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_DropTreasureMapAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_DropTreasureMapAttachComponent");
static_assert(sizeof(FieldObjectManager_DropTreasureMapAttachComponent) == 0x000060, "Wrong size on FieldObjectManager_DropTreasureMapAttachComponent");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, LaunchVelocity) == 0x000000, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, IgnoreActors) == 0x000010, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::IgnoreActors' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, Componnet) == 0x000020, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, socket) == 0x000028, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, LocalLocation) == 0x000030, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, LocalRotation) == 0x00003C, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, LocalScale) == 0x000048, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_DropTreasureMapAttachComponent, ReturnValue) == 0x000058, "Member 'FieldObjectManager_DropTreasureMapAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.GetActorClass
// 0x0030 (0x0030 - 0x0000)
struct FieldObjectManager_GetActorClass final
{
public:
	ESpawnFieldObjectID                           ID;                                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_GetActorClass) == 0x000008, "Wrong alignment on FieldObjectManager_GetActorClass");
static_assert(sizeof(FieldObjectManager_GetActorClass) == 0x000030, "Wrong size on FieldObjectManager_GetActorClass");
static_assert(offsetof(FieldObjectManager_GetActorClass, ID) == 0x000000, "Member 'FieldObjectManager_GetActorClass::ID' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_GetActorClass, ReturnValue) == 0x000008, "Member 'FieldObjectManager_GetActorClass::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.GetSpawnArtifactList
// 0x0010 (0x0010 - 0x0000)
struct FieldObjectManager_GetSpawnArtifactList final
{
public:
	TArray<class AArtifactObjectBase*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_GetSpawnArtifactList) == 0x000008, "Wrong alignment on FieldObjectManager_GetSpawnArtifactList");
static_assert(sizeof(FieldObjectManager_GetSpawnArtifactList) == 0x000010, "Wrong size on FieldObjectManager_GetSpawnArtifactList");
static_assert(offsetof(FieldObjectManager_GetSpawnArtifactList, ReturnValue) == 0x000000, "Member 'FieldObjectManager_GetSpawnArtifactList::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.GetTrainObject
// 0x0008 (0x0008 - 0x0000)
struct FieldObjectManager_GetTrainObject final
{
public:
	class ATrainBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_GetTrainObject) == 0x000008, "Wrong alignment on FieldObjectManager_GetTrainObject");
static_assert(sizeof(FieldObjectManager_GetTrainObject) == 0x000008, "Wrong size on FieldObjectManager_GetTrainObject");
static_assert(offsetof(FieldObjectManager_GetTrainObject, ReturnValue) == 0x000000, "Member 'FieldObjectManager_GetTrainObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.ReflectionReleaseStatus
// 0x000C (0x000C - 0x0000)
struct FieldObjectManager_ReflectionReleaseStatus final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRelease;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSkip;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOtherSkip;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldObjectManager_ReflectionReleaseStatus) == 0x000004, "Wrong alignment on FieldObjectManager_ReflectionReleaseStatus");
static_assert(sizeof(FieldObjectManager_ReflectionReleaseStatus) == 0x00000C, "Wrong size on FieldObjectManager_ReflectionReleaseStatus");
static_assert(offsetof(FieldObjectManager_ReflectionReleaseStatus, ID) == 0x000000, "Member 'FieldObjectManager_ReflectionReleaseStatus::ID' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_ReflectionReleaseStatus, IsRelease) == 0x000008, "Member 'FieldObjectManager_ReflectionReleaseStatus::IsRelease' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_ReflectionReleaseStatus, IsSkip) == 0x000009, "Member 'FieldObjectManager_ReflectionReleaseStatus::IsSkip' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_ReflectionReleaseStatus, IsOtherSkip) == 0x00000A, "Member 'FieldObjectManager_ReflectionReleaseStatus::IsOtherSkip' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnAttachActor
// 0x0048 (0x0048 - 0x0000)
struct FieldObjectManager_SpawnAttachActor final
{
public:
	ESpawnFieldObjectID                           ID;                                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0024(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFieldObjectBase*                       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnAttachActor");
static_assert(sizeof(FieldObjectManager_SpawnAttachActor) == 0x000048, "Wrong size on FieldObjectManager_SpawnAttachActor");
static_assert(offsetof(FieldObjectManager_SpawnAttachActor, ID) == 0x000000, "Member 'FieldObjectManager_SpawnAttachActor::ID' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachActor, Parent) == 0x000008, "Member 'FieldObjectManager_SpawnAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachActor, socket) == 0x000010, "Member 'FieldObjectManager_SpawnAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachActor, LocalLocation) == 0x000018, "Member 'FieldObjectManager_SpawnAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachActor, LocalRotation) == 0x000024, "Member 'FieldObjectManager_SpawnAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachActor, LocalScale) == 0x000030, "Member 'FieldObjectManager_SpawnAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachActor, ReturnValue) == 0x000040, "Member 'FieldObjectManager_SpawnAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnAttachComponent
// 0x0048 (0x0048 - 0x0000)
struct FieldObjectManager_SpawnAttachComponent final
{
public:
	ESpawnFieldObjectID                           ID;                                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Componnet;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0024(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFieldObjectBase*                       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnAttachComponent");
static_assert(sizeof(FieldObjectManager_SpawnAttachComponent) == 0x000048, "Wrong size on FieldObjectManager_SpawnAttachComponent");
static_assert(offsetof(FieldObjectManager_SpawnAttachComponent, ID) == 0x000000, "Member 'FieldObjectManager_SpawnAttachComponent::ID' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachComponent, Componnet) == 0x000008, "Member 'FieldObjectManager_SpawnAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachComponent, socket) == 0x000010, "Member 'FieldObjectManager_SpawnAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachComponent, LocalLocation) == 0x000018, "Member 'FieldObjectManager_SpawnAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachComponent, LocalRotation) == 0x000024, "Member 'FieldObjectManager_SpawnAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachComponent, LocalScale) == 0x000030, "Member 'FieldObjectManager_SpawnAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnAttachComponent, ReturnValue) == 0x000040, "Member 'FieldObjectManager_SpawnAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnCoinFromCoinParam
// 0x0048 (0x0048 - 0x0000)
struct FieldObjectManager_SpawnCoinFromCoinParam final
{
public:
	struct FST_CoinParam                          CoinData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0024(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnCoinFromCoinParam) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnCoinFromCoinParam");
static_assert(sizeof(FieldObjectManager_SpawnCoinFromCoinParam) == 0x000048, "Wrong size on FieldObjectManager_SpawnCoinFromCoinParam");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParam, CoinData) == 0x000000, "Member 'FieldObjectManager_SpawnCoinFromCoinParam::CoinData' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParam, WorldLocation) == 0x000018, "Member 'FieldObjectManager_SpawnCoinFromCoinParam::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParam, WorldRotation) == 0x000024, "Member 'FieldObjectManager_SpawnCoinFromCoinParam::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParam, WorldScale) == 0x000030, "Member 'FieldObjectManager_SpawnCoinFromCoinParam::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParam, ReturnValue) == 0x000040, "Member 'FieldObjectManager_SpawnCoinFromCoinParam::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnCoinFromCoinParamAttachActor
// 0x0058 (0x0058 - 0x0000)
struct FieldObjectManager_SpawnCoinFromCoinParamAttachActor final
{
public:
	struct FST_CoinParam                          CoinData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0034(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0040(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnCoinFromCoinParamAttachActor");
static_assert(sizeof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor) == 0x000058, "Wrong size on FieldObjectManager_SpawnCoinFromCoinParamAttachActor");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor, CoinData) == 0x000000, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachActor::CoinData' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor, Parent) == 0x000018, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor, socket) == 0x000020, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor, LocalLocation) == 0x000028, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor, LocalRotation) == 0x000034, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor, LocalScale) == 0x000040, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachActor, ReturnValue) == 0x000050, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnCoinFromCoinParamAttachComponent
// 0x0058 (0x0058 - 0x0000)
struct FieldObjectManager_SpawnCoinFromCoinParamAttachComponent final
{
public:
	struct FST_CoinParam                          CoinData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USceneComponent*                        Componnet;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0034(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0040(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnCoinFromCoinParamAttachComponent");
static_assert(sizeof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent) == 0x000058, "Wrong size on FieldObjectManager_SpawnCoinFromCoinParamAttachComponent");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent, CoinData) == 0x000000, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachComponent::CoinData' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent, Componnet) == 0x000018, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent, socket) == 0x000020, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent, LocalLocation) == 0x000028, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent, LocalRotation) == 0x000034, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent, LocalScale) == 0x000040, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromCoinParamAttachComponent, ReturnValue) == 0x000050, "Member 'FieldObjectManager_SpawnCoinFromCoinParamAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnCoinFromMonsterInfo
// 0x0038 (0x0038 - 0x0000)
struct FieldObjectManager_SpawnCoinFromMonsterInfo final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnCoinFromMonsterInfo) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnCoinFromMonsterInfo");
static_assert(sizeof(FieldObjectManager_SpawnCoinFromMonsterInfo) == 0x000038, "Wrong size on FieldObjectManager_SpawnCoinFromMonsterInfo");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfo, Level) == 0x000000, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfo::Level' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfo, KindId) == 0x000004, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfo::KindId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfo, WorldLocation) == 0x000008, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfo::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfo, WorldRotation) == 0x000014, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfo::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfo, WorldScale) == 0x000020, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfo::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfo, ReturnValue) == 0x000030, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnCoinFromMonsterInfoAttachActor
// 0x0048 (0x0048 - 0x0000)
struct FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0024(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor");
static_assert(sizeof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor) == 0x000048, "Wrong size on FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, Level) == 0x000000, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::Level' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, KindId) == 0x000004, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::KindId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, Parent) == 0x000008, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, socket) == 0x000010, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, LocalLocation) == 0x000018, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, LocalRotation) == 0x000024, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, LocalScale) == 0x000030, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor, ReturnValue) == 0x000040, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnCoinFromMonsterInfoAttachComponent
// 0x0048 (0x0048 - 0x0000)
struct FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Componnet;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x0024(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACoinObjectBase*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent");
static_assert(sizeof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent) == 0x000048, "Wrong size on FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, Level) == 0x000000, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::Level' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, KindId) == 0x000004, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::KindId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, Componnet) == 0x000008, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, socket) == 0x000010, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, LocalLocation) == 0x000018, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, LocalRotation) == 0x000024, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, LocalScale) == 0x000030, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent, ReturnValue) == 0x000040, "Member 'FieldObjectManager_SpawnCoinFromMonsterInfoAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnFieldObject
// 0x0030 (0x0030 - 0x0000)
struct FieldObjectManager_SpawnFieldObject final
{
public:
	ESpawnFieldObjectID                           ID;                                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFieldObjectBase*                       ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnFieldObject) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnFieldObject");
static_assert(sizeof(FieldObjectManager_SpawnFieldObject) == 0x000030, "Wrong size on FieldObjectManager_SpawnFieldObject");
static_assert(offsetof(FieldObjectManager_SpawnFieldObject, ID) == 0x000000, "Member 'FieldObjectManager_SpawnFieldObject::ID' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnFieldObject, WorldLocation) == 0x000004, "Member 'FieldObjectManager_SpawnFieldObject::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnFieldObject, WorldRotation) == 0x000010, "Member 'FieldObjectManager_SpawnFieldObject::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnFieldObject, WorldScale) == 0x00001C, "Member 'FieldObjectManager_SpawnFieldObject::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnFieldObject, ReturnValue) == 0x000028, "Member 'FieldObjectManager_SpawnFieldObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnItem
// 0x0038 (0x0038 - 0x0000)
struct FieldObjectManager_SpawnItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0024(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItemObjectBase*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnItem) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnItem");
static_assert(sizeof(FieldObjectManager_SpawnItem) == 0x000038, "Wrong size on FieldObjectManager_SpawnItem");
static_assert(offsetof(FieldObjectManager_SpawnItem, ItemId) == 0x000000, "Member 'FieldObjectManager_SpawnItem::ItemId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItem, ItemCount) == 0x000008, "Member 'FieldObjectManager_SpawnItem::ItemCount' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItem, WorldLocation) == 0x00000C, "Member 'FieldObjectManager_SpawnItem::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItem, WorldRotation) == 0x000018, "Member 'FieldObjectManager_SpawnItem::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItem, WorldScale) == 0x000024, "Member 'FieldObjectManager_SpawnItem::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItem, ReturnValue) == 0x000030, "Member 'FieldObjectManager_SpawnItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnItemAttachActor
// 0x0050 (0x0050 - 0x0000)
struct FieldObjectManager_SpawnItemAttachActor final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Parent;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItemObjectBase*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnItemAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnItemAttachActor");
static_assert(sizeof(FieldObjectManager_SpawnItemAttachActor) == 0x000050, "Wrong size on FieldObjectManager_SpawnItemAttachActor");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, ItemId) == 0x000000, "Member 'FieldObjectManager_SpawnItemAttachActor::ItemId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, ItemCount) == 0x000008, "Member 'FieldObjectManager_SpawnItemAttachActor::ItemCount' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, Parent) == 0x000010, "Member 'FieldObjectManager_SpawnItemAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, socket) == 0x000018, "Member 'FieldObjectManager_SpawnItemAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, LocalLocation) == 0x000020, "Member 'FieldObjectManager_SpawnItemAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, LocalRotation) == 0x00002C, "Member 'FieldObjectManager_SpawnItemAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, LocalScale) == 0x000038, "Member 'FieldObjectManager_SpawnItemAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachActor, ReturnValue) == 0x000048, "Member 'FieldObjectManager_SpawnItemAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnItemAttachComponent
// 0x0050 (0x0050 - 0x0000)
struct FieldObjectManager_SpawnItemAttachComponent final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Componnet;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0038(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AItemObjectBase*                        ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnItemAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnItemAttachComponent");
static_assert(sizeof(FieldObjectManager_SpawnItemAttachComponent) == 0x000050, "Wrong size on FieldObjectManager_SpawnItemAttachComponent");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, ItemId) == 0x000000, "Member 'FieldObjectManager_SpawnItemAttachComponent::ItemId' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, ItemCount) == 0x000008, "Member 'FieldObjectManager_SpawnItemAttachComponent::ItemCount' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, Componnet) == 0x000010, "Member 'FieldObjectManager_SpawnItemAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, socket) == 0x000018, "Member 'FieldObjectManager_SpawnItemAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, LocalLocation) == 0x000020, "Member 'FieldObjectManager_SpawnItemAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, LocalRotation) == 0x00002C, "Member 'FieldObjectManager_SpawnItemAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, LocalScale) == 0x000038, "Member 'FieldObjectManager_SpawnItemAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnItemAttachComponent, ReturnValue) == 0x000048, "Member 'FieldObjectManager_SpawnItemAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnPushWave
// 0x0048 (0x0048 - 0x0000)
struct FieldObjectManager_SpawnPushWave final
{
public:
	struct FVector                                Size;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplitNum;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0024(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APushWaveBase*                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnPushWave) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnPushWave");
static_assert(sizeof(FieldObjectManager_SpawnPushWave) == 0x000048, "Wrong size on FieldObjectManager_SpawnPushWave");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, Size) == 0x000000, "Member 'FieldObjectManager_SpawnPushWave::Size' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, SplitNum) == 0x00000C, "Member 'FieldObjectManager_SpawnPushWave::SplitNum' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, Speed) == 0x000010, "Member 'FieldObjectManager_SpawnPushWave::Speed' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, Distance) == 0x000014, "Member 'FieldObjectManager_SpawnPushWave::Distance' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, WorldLocation) == 0x000018, "Member 'FieldObjectManager_SpawnPushWave::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, WorldRotation) == 0x000024, "Member 'FieldObjectManager_SpawnPushWave::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, WorldScale) == 0x000030, "Member 'FieldObjectManager_SpawnPushWave::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnPushWave, ReturnValue) == 0x000040, "Member 'FieldObjectManager_SpawnPushWave::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnTreasureMap
// 0x0030 (0x0030 - 0x0000)
struct FieldObjectManager_SpawnTreasureMap final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WorldScale;                                        // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATreasureMapObjectBase*                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnTreasureMap) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnTreasureMap");
static_assert(sizeof(FieldObjectManager_SpawnTreasureMap) == 0x000030, "Wrong size on FieldObjectManager_SpawnTreasureMap");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMap, WorldLocation) == 0x000000, "Member 'FieldObjectManager_SpawnTreasureMap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMap, WorldRotation) == 0x00000C, "Member 'FieldObjectManager_SpawnTreasureMap::WorldRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMap, WorldScale) == 0x000018, "Member 'FieldObjectManager_SpawnTreasureMap::WorldScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMap, ReturnValue) == 0x000028, "Member 'FieldObjectManager_SpawnTreasureMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnTreasureMapAttachActor
// 0x0040 (0x0040 - 0x0000)
struct FieldObjectManager_SpawnTreasureMapAttachActor final
{
public:
	class AActor*                                 Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATreasureMapObjectBase*                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnTreasureMapAttachActor) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnTreasureMapAttachActor");
static_assert(sizeof(FieldObjectManager_SpawnTreasureMapAttachActor) == 0x000040, "Wrong size on FieldObjectManager_SpawnTreasureMapAttachActor");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachActor, Parent) == 0x000000, "Member 'FieldObjectManager_SpawnTreasureMapAttachActor::Parent' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachActor, socket) == 0x000008, "Member 'FieldObjectManager_SpawnTreasureMapAttachActor::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachActor, LocalLocation) == 0x000010, "Member 'FieldObjectManager_SpawnTreasureMapAttachActor::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachActor, LocalRotation) == 0x00001C, "Member 'FieldObjectManager_SpawnTreasureMapAttachActor::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachActor, LocalScale) == 0x000028, "Member 'FieldObjectManager_SpawnTreasureMapAttachActor::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachActor, ReturnValue) == 0x000038, "Member 'FieldObjectManager_SpawnTreasureMapAttachActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.SpawnTreasureMapAttachComponent
// 0x0040 (0x0040 - 0x0000)
struct FieldObjectManager_SpawnTreasureMapAttachComponent final
{
public:
	class USceneComponent*                        Componnet;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotation;                                     // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LocalScale;                                        // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATreasureMapObjectBase*                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_SpawnTreasureMapAttachComponent) == 0x000008, "Wrong alignment on FieldObjectManager_SpawnTreasureMapAttachComponent");
static_assert(sizeof(FieldObjectManager_SpawnTreasureMapAttachComponent) == 0x000040, "Wrong size on FieldObjectManager_SpawnTreasureMapAttachComponent");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachComponent, Componnet) == 0x000000, "Member 'FieldObjectManager_SpawnTreasureMapAttachComponent::Componnet' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachComponent, socket) == 0x000008, "Member 'FieldObjectManager_SpawnTreasureMapAttachComponent::socket' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachComponent, LocalLocation) == 0x000010, "Member 'FieldObjectManager_SpawnTreasureMapAttachComponent::LocalLocation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachComponent, LocalRotation) == 0x00001C, "Member 'FieldObjectManager_SpawnTreasureMapAttachComponent::LocalRotation' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachComponent, LocalScale) == 0x000028, "Member 'FieldObjectManager_SpawnTreasureMapAttachComponent::LocalScale' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_SpawnTreasureMapAttachComponent, ReturnValue) == 0x000038, "Member 'FieldObjectManager_SpawnTreasureMapAttachComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldObjectManager.FindObject
// 0x0010 (0x0010 - 0x0000)
struct FieldObjectManager_FindObject final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFieldObjectBase*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldObjectManager_FindObject) == 0x000008, "Wrong alignment on FieldObjectManager_FindObject");
static_assert(sizeof(FieldObjectManager_FindObject) == 0x000010, "Wrong size on FieldObjectManager_FindObject");
static_assert(offsetof(FieldObjectManager_FindObject, ID) == 0x000000, "Member 'FieldObjectManager_FindObject::ID' has a wrong offset!");
static_assert(offsetof(FieldObjectManager_FindObject, ReturnValue) == 0x000008, "Member 'FieldObjectManager_FindObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldStuntInterface.IsAllowClimbing
// 0x0001 (0x0001 - 0x0000)
struct FieldStuntInterface_IsAllowClimbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldStuntInterface_IsAllowClimbing) == 0x000001, "Wrong alignment on FieldStuntInterface_IsAllowClimbing");
static_assert(sizeof(FieldStuntInterface_IsAllowClimbing) == 0x000001, "Wrong size on FieldStuntInterface_IsAllowClimbing");
static_assert(offsetof(FieldStuntInterface_IsAllowClimbing, ReturnValue) == 0x000000, "Member 'FieldStuntInterface_IsAllowClimbing::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldStuntInterface.IsAllowParkour
// 0x0001 (0x0001 - 0x0000)
struct FieldStuntInterface_IsAllowParkour final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldStuntInterface_IsAllowParkour) == 0x000001, "Wrong alignment on FieldStuntInterface_IsAllowParkour");
static_assert(sizeof(FieldStuntInterface_IsAllowParkour) == 0x000001, "Wrong size on FieldStuntInterface_IsAllowParkour");
static_assert(offsetof(FieldStuntInterface_IsAllowParkour, ReturnValue) == 0x000000, "Member 'FieldStuntInterface_IsAllowParkour::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldTerrainInterface.OnReceiveHitByTerrain
// 0x0090 (0x0090 - 0x0000)
struct FieldTerrainInterface_OnReceiveHitByTerrain final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldTerrainInterface_OnReceiveHitByTerrain) == 0x000008, "Wrong alignment on FieldTerrainInterface_OnReceiveHitByTerrain");
static_assert(sizeof(FieldTerrainInterface_OnReceiveHitByTerrain) == 0x000090, "Wrong size on FieldTerrainInterface_OnReceiveHitByTerrain");
static_assert(offsetof(FieldTerrainInterface_OnReceiveHitByTerrain, OtherActor) == 0x000000, "Member 'FieldTerrainInterface_OnReceiveHitByTerrain::OtherActor' has a wrong offset!");
static_assert(offsetof(FieldTerrainInterface_OnReceiveHitByTerrain, Hit) == 0x000008, "Member 'FieldTerrainInterface_OnReceiveHitByTerrain::Hit' has a wrong offset!");

// Function DarwinGame.FieldTerrainInterface.SetForceSpeed
// 0x0004 (0x0004 - 0x0000)
struct FieldTerrainInterface_SetForceSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldTerrainInterface_SetForceSpeed) == 0x000004, "Wrong alignment on FieldTerrainInterface_SetForceSpeed");
static_assert(sizeof(FieldTerrainInterface_SetForceSpeed) == 0x000004, "Wrong size on FieldTerrainInterface_SetForceSpeed");
static_assert(offsetof(FieldTerrainInterface_SetForceSpeed, Speed) == 0x000000, "Member 'FieldTerrainInterface_SetForceSpeed::Speed' has a wrong offset!");

// Function DarwinGame.FieldTerrainInterface.SetWorking
// 0x0001 (0x0001 - 0x0000)
struct FieldTerrainInterface_SetWorking final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldTerrainInterface_SetWorking) == 0x000001, "Wrong alignment on FieldTerrainInterface_SetWorking");
static_assert(sizeof(FieldTerrainInterface_SetWorking) == 0x000001, "Wrong size on FieldTerrainInterface_SetWorking");
static_assert(offsetof(FieldTerrainInterface_SetWorking, State) == 0x000000, "Member 'FieldTerrainInterface_SetWorking::State' has a wrong offset!");

// Function DarwinGame.FieldTerrainInterface.GetTerrainType
// 0x0001 (0x0001 - 0x0000)
struct FieldTerrainInterface_GetTerrainType final
{
public:
	EFieldTerrainType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldTerrainInterface_GetTerrainType) == 0x000001, "Wrong alignment on FieldTerrainInterface_GetTerrainType");
static_assert(sizeof(FieldTerrainInterface_GetTerrainType) == 0x000001, "Wrong size on FieldTerrainInterface_GetTerrainType");
static_assert(offsetof(FieldTerrainInterface_GetTerrainType, ReturnValue) == 0x000000, "Member 'FieldTerrainInterface_GetTerrainType::ReturnValue' has a wrong offset!");

// Function DarwinGame.FieldTerrainInterface.IsWorking
// 0x0001 (0x0001 - 0x0000)
struct FieldTerrainInterface_IsWorking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldTerrainInterface_IsWorking) == 0x000001, "Wrong alignment on FieldTerrainInterface_IsWorking");
static_assert(sizeof(FieldTerrainInterface_IsWorking) == 0x000001, "Wrong size on FieldTerrainInterface_IsWorking");
static_assert(offsetof(FieldTerrainInterface_IsWorking, ReturnValue) == 0x000000, "Member 'FieldTerrainInterface_IsWorking::ReturnValue' has a wrong offset!");

// Function DarwinGame.FlexibleDoorOpenAnimInstance.IsBackOpenAndPlayAnimation
// 0x0001 (0x0001 - 0x0000)
struct FlexibleDoorOpenAnimInstance_IsBackOpenAndPlayAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlexibleDoorOpenAnimInstance_IsBackOpenAndPlayAnimation) == 0x000001, "Wrong alignment on FlexibleDoorOpenAnimInstance_IsBackOpenAndPlayAnimation");
static_assert(sizeof(FlexibleDoorOpenAnimInstance_IsBackOpenAndPlayAnimation) == 0x000001, "Wrong size on FlexibleDoorOpenAnimInstance_IsBackOpenAndPlayAnimation");
static_assert(offsetof(FlexibleDoorOpenAnimInstance_IsBackOpenAndPlayAnimation, ReturnValue) == 0x000000, "Member 'FlexibleDoorOpenAnimInstance_IsBackOpenAndPlayAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FlexibleDoorOpenAnimInstance.IsBackOpenAndSkipAnimation
// 0x0001 (0x0001 - 0x0000)
struct FlexibleDoorOpenAnimInstance_IsBackOpenAndSkipAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlexibleDoorOpenAnimInstance_IsBackOpenAndSkipAnimation) == 0x000001, "Wrong alignment on FlexibleDoorOpenAnimInstance_IsBackOpenAndSkipAnimation");
static_assert(sizeof(FlexibleDoorOpenAnimInstance_IsBackOpenAndSkipAnimation) == 0x000001, "Wrong size on FlexibleDoorOpenAnimInstance_IsBackOpenAndSkipAnimation");
static_assert(offsetof(FlexibleDoorOpenAnimInstance_IsBackOpenAndSkipAnimation, ReturnValue) == 0x000000, "Member 'FlexibleDoorOpenAnimInstance_IsBackOpenAndSkipAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FlexibleDoorOpenAnimInstance.IsCloseAndPlayAnimation
// 0x0001 (0x0001 - 0x0000)
struct FlexibleDoorOpenAnimInstance_IsCloseAndPlayAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlexibleDoorOpenAnimInstance_IsCloseAndPlayAnimation) == 0x000001, "Wrong alignment on FlexibleDoorOpenAnimInstance_IsCloseAndPlayAnimation");
static_assert(sizeof(FlexibleDoorOpenAnimInstance_IsCloseAndPlayAnimation) == 0x000001, "Wrong size on FlexibleDoorOpenAnimInstance_IsCloseAndPlayAnimation");
static_assert(offsetof(FlexibleDoorOpenAnimInstance_IsCloseAndPlayAnimation, ReturnValue) == 0x000000, "Member 'FlexibleDoorOpenAnimInstance_IsCloseAndPlayAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FlexibleDoorOpenAnimInstance.IsCloseAndSkipAnimation
// 0x0001 (0x0001 - 0x0000)
struct FlexibleDoorOpenAnimInstance_IsCloseAndSkipAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlexibleDoorOpenAnimInstance_IsCloseAndSkipAnimation) == 0x000001, "Wrong alignment on FlexibleDoorOpenAnimInstance_IsCloseAndSkipAnimation");
static_assert(sizeof(FlexibleDoorOpenAnimInstance_IsCloseAndSkipAnimation) == 0x000001, "Wrong size on FlexibleDoorOpenAnimInstance_IsCloseAndSkipAnimation");
static_assert(offsetof(FlexibleDoorOpenAnimInstance_IsCloseAndSkipAnimation, ReturnValue) == 0x000000, "Member 'FlexibleDoorOpenAnimInstance_IsCloseAndSkipAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FlexibleDoorOpenAnimInstance.IsFrontOpenAndPlayAnimation
// 0x0001 (0x0001 - 0x0000)
struct FlexibleDoorOpenAnimInstance_IsFrontOpenAndPlayAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlexibleDoorOpenAnimInstance_IsFrontOpenAndPlayAnimation) == 0x000001, "Wrong alignment on FlexibleDoorOpenAnimInstance_IsFrontOpenAndPlayAnimation");
static_assert(sizeof(FlexibleDoorOpenAnimInstance_IsFrontOpenAndPlayAnimation) == 0x000001, "Wrong size on FlexibleDoorOpenAnimInstance_IsFrontOpenAndPlayAnimation");
static_assert(offsetof(FlexibleDoorOpenAnimInstance_IsFrontOpenAndPlayAnimation, ReturnValue) == 0x000000, "Member 'FlexibleDoorOpenAnimInstance_IsFrontOpenAndPlayAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.FlexibleDoorOpenAnimInstance.IsFrontOpenAndSkipAnimation
// 0x0001 (0x0001 - 0x0000)
struct FlexibleDoorOpenAnimInstance_IsFrontOpenAndSkipAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlexibleDoorOpenAnimInstance_IsFrontOpenAndSkipAnimation) == 0x000001, "Wrong alignment on FlexibleDoorOpenAnimInstance_IsFrontOpenAndSkipAnimation");
static_assert(sizeof(FlexibleDoorOpenAnimInstance_IsFrontOpenAndSkipAnimation) == 0x000001, "Wrong size on FlexibleDoorOpenAnimInstance_IsFrontOpenAndSkipAnimation");
static_assert(offsetof(FlexibleDoorOpenAnimInstance_IsFrontOpenAndSkipAnimation, ReturnValue) == 0x000000, "Member 'FlexibleDoorOpenAnimInstance_IsFrontOpenAndSkipAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.ForcedBattleAreaManager.Spawn
// 0x0028 (0x0028 - 0x0000)
struct ForcedBattleAreaManager_Spawn final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AForcedBattleAreaBase*                  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForcedBattleAreaManager_Spawn) == 0x000008, "Wrong alignment on ForcedBattleAreaManager_Spawn");
static_assert(sizeof(ForcedBattleAreaManager_Spawn) == 0x000028, "Wrong size on ForcedBattleAreaManager_Spawn");
static_assert(offsetof(ForcedBattleAreaManager_Spawn, ID) == 0x000000, "Member 'ForcedBattleAreaManager_Spawn::ID' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaManager_Spawn, Location) == 0x000008, "Member 'ForcedBattleAreaManager_Spawn::Location' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaManager_Spawn, Rotation) == 0x000014, "Member 'ForcedBattleAreaManager_Spawn::Rotation' has a wrong offset!");
static_assert(offsetof(ForcedBattleAreaManager_Spawn, ReturnValue) == 0x000020, "Member 'ForcedBattleAreaManager_Spawn::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIStation_ContentWin.SetData
// 0x0018 (0x0018 - 0x0000)
struct UIStation_ContentWin_SetData final
{
public:
	EAreaType                                     InFocusArea;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PartyUids;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStation_ContentWin_SetData) == 0x000008, "Wrong alignment on UIStation_ContentWin_SetData");
static_assert(sizeof(UIStation_ContentWin_SetData) == 0x000018, "Wrong size on UIStation_ContentWin_SetData");
static_assert(offsetof(UIStation_ContentWin_SetData, InFocusArea) == 0x000000, "Member 'UIStation_ContentWin_SetData::InFocusArea' has a wrong offset!");
static_assert(offsetof(UIStation_ContentWin_SetData, PartyUids) == 0x000008, "Member 'UIStation_ContentWin_SetData::PartyUids' has a wrong offset!");

// Function DarwinGame.UITalk_WinStatus.ChoiceSetData
// 0x0070 (0x0070 - 0x0000)
struct UITalk_WinStatus_ChoiceSetData final
{
public:
	struct FChoiceWindowData                      Data;                                              // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
	bool                                          DirectMessage;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITalk_WinStatus_ChoiceSetData) == 0x000008, "Wrong alignment on UITalk_WinStatus_ChoiceSetData");
static_assert(sizeof(UITalk_WinStatus_ChoiceSetData) == 0x000070, "Wrong size on UITalk_WinStatus_ChoiceSetData");
static_assert(offsetof(UITalk_WinStatus_ChoiceSetData, Data) == 0x000000, "Member 'UITalk_WinStatus_ChoiceSetData::Data' has a wrong offset!");
static_assert(offsetof(UITalk_WinStatus_ChoiceSetData, DirectMessage) == 0x000068, "Member 'UITalk_WinStatus_ChoiceSetData::DirectMessage' has a wrong offset!");

// Function DarwinGame.UITalk_WinStatus.SetSystemTextDataFromBP
// 0x0018 (0x0018 - 0x0000)
struct UITalk_WinStatus_SetSystemTextDataFromBP final
{
public:
	class FString                                 messageText;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InputReset;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITalk_WinStatus_SetSystemTextDataFromBP) == 0x000008, "Wrong alignment on UITalk_WinStatus_SetSystemTextDataFromBP");
static_assert(sizeof(UITalk_WinStatus_SetSystemTextDataFromBP) == 0x000018, "Wrong size on UITalk_WinStatus_SetSystemTextDataFromBP");
static_assert(offsetof(UITalk_WinStatus_SetSystemTextDataFromBP, messageText) == 0x000000, "Member 'UITalk_WinStatus_SetSystemTextDataFromBP::messageText' has a wrong offset!");
static_assert(offsetof(UITalk_WinStatus_SetSystemTextDataFromBP, InputReset) == 0x000010, "Member 'UITalk_WinStatus_SetSystemTextDataFromBP::InputReset' has a wrong offset!");

// Function DarwinGame.FrameRateUtils.AdjustValueBasedOnFPS
// 0x000C (0x000C - 0x0000)
struct FrameRateUtils_AdjustValueBasedOnFPS final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrameRateUtils_AdjustValueBasedOnFPS) == 0x000004, "Wrong alignment on FrameRateUtils_AdjustValueBasedOnFPS");
static_assert(sizeof(FrameRateUtils_AdjustValueBasedOnFPS) == 0x00000C, "Wrong size on FrameRateUtils_AdjustValueBasedOnFPS");
static_assert(offsetof(FrameRateUtils_AdjustValueBasedOnFPS, Value) == 0x000000, "Member 'FrameRateUtils_AdjustValueBasedOnFPS::Value' has a wrong offset!");
static_assert(offsetof(FrameRateUtils_AdjustValueBasedOnFPS, DeltaTime) == 0x000004, "Member 'FrameRateUtils_AdjustValueBasedOnFPS::DeltaTime' has a wrong offset!");
static_assert(offsetof(FrameRateUtils_AdjustValueBasedOnFPS, ReturnValue) == 0x000008, "Member 'FrameRateUtils_AdjustValueBasedOnFPS::ReturnValue' has a wrong offset!");

// Function DarwinGame.FrameRateUtils.GetFrameCountMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FrameRateUtils_GetFrameCountMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrameRateUtils_GetFrameCountMultiplier) == 0x000004, "Wrong alignment on FrameRateUtils_GetFrameCountMultiplier");
static_assert(sizeof(FrameRateUtils_GetFrameCountMultiplier) == 0x000004, "Wrong size on FrameRateUtils_GetFrameCountMultiplier");
static_assert(offsetof(FrameRateUtils_GetFrameCountMultiplier, ReturnValue) == 0x000000, "Member 'FrameRateUtils_GetFrameCountMultiplier::ReturnValue' has a wrong offset!");

// Function DarwinGame.FriendPositionManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct FriendPositionManager_GetInstance final
{
public:
	class UFriendPositionManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendPositionManager_GetInstance) == 0x000008, "Wrong alignment on FriendPositionManager_GetInstance");
static_assert(sizeof(FriendPositionManager_GetInstance) == 0x000008, "Wrong size on FriendPositionManager_GetInstance");
static_assert(offsetof(FriendPositionManager_GetInstance, ReturnValue) == 0x000000, "Member 'FriendPositionManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.AddItem
// 0x0010 (0x0010 - 0x0000)
struct GameBelongingsItem_AddItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForceOpenItemGetUI;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBelongingsItem_AddItem) == 0x000004, "Wrong alignment on GameBelongingsItem_AddItem");
static_assert(sizeof(GameBelongingsItem_AddItem) == 0x000010, "Wrong size on GameBelongingsItem_AddItem");
static_assert(offsetof(GameBelongingsItem_AddItem, ItemId) == 0x000000, "Member 'GameBelongingsItem_AddItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameBelongingsItem_AddItem, Num) == 0x000008, "Member 'GameBelongingsItem_AddItem::Num' has a wrong offset!");
static_assert(offsetof(GameBelongingsItem_AddItem, bIsForceOpenItemGetUI) == 0x00000C, "Member 'GameBelongingsItem_AddItem::bIsForceOpenItemGetUI' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameBelongingsItem_Clone final
{
public:
	class UGameBelongingsItem*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsItem_Clone) == 0x000008, "Wrong alignment on GameBelongingsItem_Clone");
static_assert(sizeof(GameBelongingsItem_Clone) == 0x000008, "Wrong size on GameBelongingsItem_Clone");
static_assert(offsetof(GameBelongingsItem_Clone, ReturnValue) == 0x000000, "Member 'GameBelongingsItem_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameBelongingsItem_Overwrite final
{
public:
	class UGameBelongingsItem*                    game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsItem_Overwrite) == 0x000008, "Wrong alignment on GameBelongingsItem_Overwrite");
static_assert(sizeof(GameBelongingsItem_Overwrite) == 0x000008, "Wrong size on GameBelongingsItem_Overwrite");
static_assert(offsetof(GameBelongingsItem_Overwrite, game_data) == 0x000000, "Member 'GameBelongingsItem_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.RemoveItem
// 0x000C (0x000C - 0x0000)
struct GameBelongingsItem_RemoveItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsItem_RemoveItem) == 0x000004, "Wrong alignment on GameBelongingsItem_RemoveItem");
static_assert(sizeof(GameBelongingsItem_RemoveItem) == 0x00000C, "Wrong size on GameBelongingsItem_RemoveItem");
static_assert(offsetof(GameBelongingsItem_RemoveItem, ItemId) == 0x000000, "Member 'GameBelongingsItem_RemoveItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameBelongingsItem_RemoveItem, Num) == 0x000008, "Member 'GameBelongingsItem_RemoveItem::Num' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.GetCapacity
// 0x000C (0x000C - 0x0000)
struct GameBelongingsItem_GetCapacity final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsItem_GetCapacity) == 0x000004, "Wrong alignment on GameBelongingsItem_GetCapacity");
static_assert(sizeof(GameBelongingsItem_GetCapacity) == 0x00000C, "Wrong size on GameBelongingsItem_GetCapacity");
static_assert(offsetof(GameBelongingsItem_GetCapacity, ItemId) == 0x000000, "Member 'GameBelongingsItem_GetCapacity::ItemId' has a wrong offset!");
static_assert(offsetof(GameBelongingsItem_GetCapacity, ReturnValue) == 0x000008, "Member 'GameBelongingsItem_GetCapacity::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.GetItem
// 0x000C (0x000C - 0x0000)
struct GameBelongingsItem_GetItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsItem_GetItem) == 0x000004, "Wrong alignment on GameBelongingsItem_GetItem");
static_assert(sizeof(GameBelongingsItem_GetItem) == 0x00000C, "Wrong size on GameBelongingsItem_GetItem");
static_assert(offsetof(GameBelongingsItem_GetItem, ItemId) == 0x000000, "Member 'GameBelongingsItem_GetItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameBelongingsItem_GetItem, ReturnValue) == 0x000008, "Member 'GameBelongingsItem_GetItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.GetItemAll
// 0x0050 (0x0050 - 0x0000)
struct GameBelongingsItem_GetItemAll final
{
public:
	TMap<class FName, struct FGameDataItem>       ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsItem_GetItemAll) == 0x000008, "Wrong alignment on GameBelongingsItem_GetItemAll");
static_assert(sizeof(GameBelongingsItem_GetItemAll) == 0x000050, "Wrong size on GameBelongingsItem_GetItemAll");
static_assert(offsetof(GameBelongingsItem_GetItemAll, ReturnValue) == 0x000000, "Member 'GameBelongingsItem_GetItemAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.GetLimit
// 0x000C (0x000C - 0x0000)
struct GameBelongingsItem_GetLimit final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameBelongingsItem_GetLimit) == 0x000004, "Wrong alignment on GameBelongingsItem_GetLimit");
static_assert(sizeof(GameBelongingsItem_GetLimit) == 0x00000C, "Wrong size on GameBelongingsItem_GetLimit");
static_assert(offsetof(GameBelongingsItem_GetLimit, ItemId) == 0x000000, "Member 'GameBelongingsItem_GetLimit::ItemId' has a wrong offset!");
static_assert(offsetof(GameBelongingsItem_GetLimit, ReturnValue) == 0x000008, "Member 'GameBelongingsItem_GetLimit::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameBelongingsItem.IsCollectedItem
// 0x000C (0x000C - 0x0000)
struct GameBelongingsItem_IsCollectedItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameBelongingsItem_IsCollectedItem) == 0x000004, "Wrong alignment on GameBelongingsItem_IsCollectedItem");
static_assert(sizeof(GameBelongingsItem_IsCollectedItem) == 0x00000C, "Wrong size on GameBelongingsItem_IsCollectedItem");
static_assert(offsetof(GameBelongingsItem_IsCollectedItem, ItemId) == 0x000000, "Member 'GameBelongingsItem_IsCollectedItem::ItemId' has a wrong offset!");
static_assert(offsetof(GameBelongingsItem_IsCollectedItem, ReturnValue) == 0x000008, "Member 'GameBelongingsItem_IsCollectedItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetWindowName
// 0x000C (0x000C - 0x0000)
struct TextWidget_GetWindowName final
{
public:
	ETextWindow                                   Window;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetWindowName) == 0x000004, "Wrong alignment on TextWidget_GetWindowName");
static_assert(sizeof(TextWidget_GetWindowName) == 0x00000C, "Wrong size on TextWidget_GetWindowName");
static_assert(offsetof(TextWidget_GetWindowName, Window) == 0x000000, "Member 'TextWidget_GetWindowName::Window' has a wrong offset!");
static_assert(offsetof(TextWidget_GetWindowName, ReturnValue) == 0x000004, "Member 'TextWidget_GetWindowName::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.AddTextBlock
// 0x0110 (0x0110 - 0x0000)
struct TextWidget_AddTextBlock final
{
public:
	ETextWindow                                   InWindow;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           InCanvasPanel;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMainBlock;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextFontData                          InMainFontData;                                    // 0x0018(0x0078)(Parm, NativeAccessSpecifierPublic)
	int32                                         InRubyBlock;                                       // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextFontData                          InRubyFontData;                                    // 0x0098(0x0078)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_AddTextBlock) == 0x000008, "Wrong alignment on TextWidget_AddTextBlock");
static_assert(sizeof(TextWidget_AddTextBlock) == 0x000110, "Wrong size on TextWidget_AddTextBlock");
static_assert(offsetof(TextWidget_AddTextBlock, InWindow) == 0x000000, "Member 'TextWidget_AddTextBlock::InWindow' has a wrong offset!");
static_assert(offsetof(TextWidget_AddTextBlock, InCanvasPanel) == 0x000008, "Member 'TextWidget_AddTextBlock::InCanvasPanel' has a wrong offset!");
static_assert(offsetof(TextWidget_AddTextBlock, InMainBlock) == 0x000010, "Member 'TextWidget_AddTextBlock::InMainBlock' has a wrong offset!");
static_assert(offsetof(TextWidget_AddTextBlock, InMainFontData) == 0x000018, "Member 'TextWidget_AddTextBlock::InMainFontData' has a wrong offset!");
static_assert(offsetof(TextWidget_AddTextBlock, InRubyBlock) == 0x000090, "Member 'TextWidget_AddTextBlock::InRubyBlock' has a wrong offset!");
static_assert(offsetof(TextWidget_AddTextBlock, InRubyFontData) == 0x000098, "Member 'TextWidget_AddTextBlock::InRubyFontData' has a wrong offset!");

// Function DarwinGame.TextWidget.InitChoice
// 0x0004 (0x0004 - 0x0000)
struct TextWidget_InitChoice final
{
public:
	int32                                         InItemNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_InitChoice) == 0x000004, "Wrong alignment on TextWidget_InitChoice");
static_assert(sizeof(TextWidget_InitChoice) == 0x000004, "Wrong size on TextWidget_InitChoice");
static_assert(offsetof(TextWidget_InitChoice, InItemNum) == 0x000000, "Member 'TextWidget_InitChoice::InItemNum' has a wrong offset!");

// Function DarwinGame.TextWidget.LoadIcon
// 0x0010 (0x0010 - 0x0000)
struct TextWidget_LoadIcon final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_LoadIcon) == 0x000008, "Wrong alignment on TextWidget_LoadIcon");
static_assert(sizeof(TextWidget_LoadIcon) == 0x000010, "Wrong size on TextWidget_LoadIcon");
static_assert(offsetof(TextWidget_LoadIcon, InName) == 0x000000, "Member 'TextWidget_LoadIcon::InName' has a wrong offset!");
static_assert(offsetof(TextWidget_LoadIcon, ReturnValue) == 0x000008, "Member 'TextWidget_LoadIcon::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.SetChoiceWindowData
// 0x0068 (0x0068 - 0x0000)
struct TextWidget_SetChoiceWindowData final
{
public:
	struct FChoiceWindowData                      InChoiceWindowData;                                // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetChoiceWindowData) == 0x000008, "Wrong alignment on TextWidget_SetChoiceWindowData");
static_assert(sizeof(TextWidget_SetChoiceWindowData) == 0x000068, "Wrong size on TextWidget_SetChoiceWindowData");
static_assert(offsetof(TextWidget_SetChoiceWindowData, InChoiceWindowData) == 0x000000, "Member 'TextWidget_SetChoiceWindowData::InChoiceWindowData' has a wrong offset!");

// Function DarwinGame.TextWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct TextWidget_SetData final
{
public:
	class UTextWidgetData*                        InTextEvent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetData) == 0x000008, "Wrong alignment on TextWidget_SetData");
static_assert(sizeof(TextWidget_SetData) == 0x000008, "Wrong size on TextWidget_SetData");
static_assert(offsetof(TextWidget_SetData, InTextEvent) == 0x000000, "Member 'TextWidget_SetData::InTextEvent' has a wrong offset!");

// Function DarwinGame.TextWidget.SetIndent
// 0x0004 (0x0004 - 0x0000)
struct TextWidget_SetIndent final
{
public:
	float                                         InputIndent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetIndent) == 0x000004, "Wrong alignment on TextWidget_SetIndent");
static_assert(sizeof(TextWidget_SetIndent) == 0x000004, "Wrong size on TextWidget_SetIndent");
static_assert(offsetof(TextWidget_SetIndent, InputIndent) == 0x000000, "Member 'TextWidget_SetIndent::InputIndent' has a wrong offset!");

// Function DarwinGame.TextWidget.SetMainFontColor
// 0x0010 (0x0010 - 0x0000)
struct TextWidget_SetMainFontColor final
{
public:
	struct FLinearColor                           InLinearColor;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetMainFontColor) == 0x000004, "Wrong alignment on TextWidget_SetMainFontColor");
static_assert(sizeof(TextWidget_SetMainFontColor) == 0x000010, "Wrong size on TextWidget_SetMainFontColor");
static_assert(offsetof(TextWidget_SetMainFontColor, InLinearColor) == 0x000000, "Member 'TextWidget_SetMainFontColor::InLinearColor' has a wrong offset!");

// Function DarwinGame.TextWidget.SetMainShadowColor
// 0x0010 (0x0010 - 0x0000)
struct TextWidget_SetMainShadowColor final
{
public:
	struct FLinearColor                           InLinearColor;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetMainShadowColor) == 0x000004, "Wrong alignment on TextWidget_SetMainShadowColor");
static_assert(sizeof(TextWidget_SetMainShadowColor) == 0x000010, "Wrong size on TextWidget_SetMainShadowColor");
static_assert(offsetof(TextWidget_SetMainShadowColor, InLinearColor) == 0x000000, "Member 'TextWidget_SetMainShadowColor::InLinearColor' has a wrong offset!");

// Function DarwinGame.TextWidget.SetMainShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct TextWidget_SetMainShadowOffset final
{
public:
	struct FVector2D                              InOffset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetMainShadowOffset) == 0x000004, "Wrong alignment on TextWidget_SetMainShadowOffset");
static_assert(sizeof(TextWidget_SetMainShadowOffset) == 0x000008, "Wrong size on TextWidget_SetMainShadowOffset");
static_assert(offsetof(TextWidget_SetMainShadowOffset, InOffset) == 0x000000, "Member 'TextWidget_SetMainShadowOffset::InOffset' has a wrong offset!");

// Function DarwinGame.TextWidget.SetOutlineColor
// 0x0010 (0x0010 - 0x0000)
struct TextWidget_SetOutlineColor final
{
public:
	struct FLinearColor                           InLinearColor;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetOutlineColor) == 0x000004, "Wrong alignment on TextWidget_SetOutlineColor");
static_assert(sizeof(TextWidget_SetOutlineColor) == 0x000010, "Wrong size on TextWidget_SetOutlineColor");
static_assert(offsetof(TextWidget_SetOutlineColor, InLinearColor) == 0x000000, "Member 'TextWidget_SetOutlineColor::InLinearColor' has a wrong offset!");

// Function DarwinGame.TextWidget.SetOutlineSize
// 0x0004 (0x0004 - 0x0000)
struct TextWidget_SetOutlineSize final
{
public:
	int32                                         InSize;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetOutlineSize) == 0x000004, "Wrong alignment on TextWidget_SetOutlineSize");
static_assert(sizeof(TextWidget_SetOutlineSize) == 0x000004, "Wrong size on TextWidget_SetOutlineSize");
static_assert(offsetof(TextWidget_SetOutlineSize, InSize) == 0x000000, "Member 'TextWidget_SetOutlineSize::InSize' has a wrong offset!");

// Function DarwinGame.TextWidget.SetPause
// 0x0001 (0x0001 - 0x0000)
struct TextWidget_SetPause final
{
public:
	bool                                          InPause;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetPause) == 0x000001, "Wrong alignment on TextWidget_SetPause");
static_assert(sizeof(TextWidget_SetPause) == 0x000001, "Wrong size on TextWidget_SetPause");
static_assert(offsetof(TextWidget_SetPause, InPause) == 0x000000, "Member 'TextWidget_SetPause::InPause' has a wrong offset!");

// Function DarwinGame.TextWidget.SetRubyFontColor
// 0x0010 (0x0010 - 0x0000)
struct TextWidget_SetRubyFontColor final
{
public:
	struct FLinearColor                           InLinearColor;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetRubyFontColor) == 0x000004, "Wrong alignment on TextWidget_SetRubyFontColor");
static_assert(sizeof(TextWidget_SetRubyFontColor) == 0x000010, "Wrong size on TextWidget_SetRubyFontColor");
static_assert(offsetof(TextWidget_SetRubyFontColor, InLinearColor) == 0x000000, "Member 'TextWidget_SetRubyFontColor::InLinearColor' has a wrong offset!");

// Function DarwinGame.TextWidget.Update
// 0x0004 (0x0004 - 0x0000)
struct TextWidget_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_Update) == 0x000004, "Wrong alignment on TextWidget_Update");
static_assert(sizeof(TextWidget_Update) == 0x000004, "Wrong size on TextWidget_Update");
static_assert(offsetof(TextWidget_Update, DeltaTime) == 0x000000, "Member 'TextWidget_Update::DeltaTime' has a wrong offset!");

// Function DarwinGame.TextWidget.CheckChoice
// 0x0001 (0x0001 - 0x0000)
struct TextWidget_CheckChoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_CheckChoice) == 0x000001, "Wrong alignment on TextWidget_CheckChoice");
static_assert(sizeof(TextWidget_CheckChoice) == 0x000001, "Wrong size on TextWidget_CheckChoice");
static_assert(offsetof(TextWidget_CheckChoice, ReturnValue) == 0x000000, "Member 'TextWidget_CheckChoice::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.CheckUse
// 0x000C (0x000C - 0x0000)
struct TextWidget_CheckUse final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextWidget_CheckUse) == 0x000004, "Wrong alignment on TextWidget_CheckUse");
static_assert(sizeof(TextWidget_CheckUse) == 0x00000C, "Wrong size on TextWidget_CheckUse");
static_assert(offsetof(TextWidget_CheckUse, InName) == 0x000000, "Member 'TextWidget_CheckUse::InName' has a wrong offset!");
static_assert(offsetof(TextWidget_CheckUse, ReturnValue) == 0x000008, "Member 'TextWidget_CheckUse::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetChoiceWindowData
// 0x0068 (0x0068 - 0x0000)
struct TextWidget_GetChoiceWindowData final
{
public:
	struct FChoiceWindowData                      ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetChoiceWindowData) == 0x000008, "Wrong alignment on TextWidget_GetChoiceWindowData");
static_assert(sizeof(TextWidget_GetChoiceWindowData) == 0x000068, "Wrong size on TextWidget_GetChoiceWindowData");
static_assert(offsetof(TextWidget_GetChoiceWindowData, ReturnValue) == 0x000000, "Member 'TextWidget_GetChoiceWindowData::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetIconTexture
// 0x0008 (0x0008 - 0x0000)
struct TextWidget_GetIconTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetIconTexture) == 0x000008, "Wrong alignment on TextWidget_GetIconTexture");
static_assert(sizeof(TextWidget_GetIconTexture) == 0x000008, "Wrong size on TextWidget_GetIconTexture");
static_assert(offsetof(TextWidget_GetIconTexture, ReturnValue) == 0x000000, "Member 'TextWidget_GetIconTexture::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetIsSystemMessage
// 0x0001 (0x0001 - 0x0000)
struct TextWidget_GetIsSystemMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetIsSystemMessage) == 0x000001, "Wrong alignment on TextWidget_GetIsSystemMessage");
static_assert(sizeof(TextWidget_GetIsSystemMessage) == 0x000001, "Wrong size on TextWidget_GetIsSystemMessage");
static_assert(offsetof(TextWidget_GetIsSystemMessage, ReturnValue) == 0x000000, "Member 'TextWidget_GetIsSystemMessage::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetMainFontInfo
// 0x0050 (0x0050 - 0x0000)
struct TextWidget_GetMainFontInfo final
{
public:
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetMainFontInfo) == 0x000008, "Wrong alignment on TextWidget_GetMainFontInfo");
static_assert(sizeof(TextWidget_GetMainFontInfo) == 0x000050, "Wrong size on TextWidget_GetMainFontInfo");
static_assert(offsetof(TextWidget_GetMainFontInfo, ReturnValue) == 0x000000, "Member 'TextWidget_GetMainFontInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetMainShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct TextWidget_GetMainShadowOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetMainShadowOffset) == 0x000004, "Wrong alignment on TextWidget_GetMainShadowOffset");
static_assert(sizeof(TextWidget_GetMainShadowOffset) == 0x000008, "Wrong size on TextWidget_GetMainShadowOffset");
static_assert(offsetof(TextWidget_GetMainShadowOffset, ReturnValue) == 0x000000, "Member 'TextWidget_GetMainShadowOffset::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetRubyFontSize
// 0x0004 (0x0004 - 0x0000)
struct TextWidget_GetRubyFontSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetRubyFontSize) == 0x000004, "Wrong alignment on TextWidget_GetRubyFontSize");
static_assert(sizeof(TextWidget_GetRubyFontSize) == 0x000004, "Wrong size on TextWidget_GetRubyFontSize");
static_assert(offsetof(TextWidget_GetRubyFontSize, ReturnValue) == 0x000000, "Member 'TextWidget_GetRubyFontSize::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetTalkerID
// 0x0008 (0x0008 - 0x0000)
struct TextWidget_GetTalkerID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetTalkerID) == 0x000004, "Wrong alignment on TextWidget_GetTalkerID");
static_assert(sizeof(TextWidget_GetTalkerID) == 0x000008, "Wrong size on TextWidget_GetTalkerID");
static_assert(offsetof(TextWidget_GetTalkerID, ReturnValue) == 0x000000, "Member 'TextWidget_GetTalkerID::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.GetUsedTextAreaSize
// 0x000C (0x000C - 0x0000)
struct TextWidget_GetUsedTextAreaSize final
{
public:
	ETextWindow                                   InWindow;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetUsedTextAreaSize) == 0x000004, "Wrong alignment on TextWidget_GetUsedTextAreaSize");
static_assert(sizeof(TextWidget_GetUsedTextAreaSize) == 0x00000C, "Wrong size on TextWidget_GetUsedTextAreaSize");
static_assert(offsetof(TextWidget_GetUsedTextAreaSize, InWindow) == 0x000000, "Member 'TextWidget_GetUsedTextAreaSize::InWindow' has a wrong offset!");
static_assert(offsetof(TextWidget_GetUsedTextAreaSize, ReturnValue) == 0x000004, "Member 'TextWidget_GetUsedTextAreaSize::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.IsEndRollOut
// 0x0001 (0x0001 - 0x0000)
struct TextWidget_IsEndRollOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_IsEndRollOut) == 0x000001, "Wrong alignment on TextWidget_IsEndRollOut");
static_assert(sizeof(TextWidget_IsEndRollOut) == 0x000001, "Wrong size on TextWidget_IsEndRollOut");
static_assert(offsetof(TextWidget_IsEndRollOut, ReturnValue) == 0x000000, "Member 'TextWidget_IsEndRollOut::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.IsLastPage
// 0x0001 (0x0001 - 0x0000)
struct TextWidget_IsLastPage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_IsLastPage) == 0x000001, "Wrong alignment on TextWidget_IsLastPage");
static_assert(sizeof(TextWidget_IsLastPage) == 0x000001, "Wrong size on TextWidget_IsLastPage");
static_assert(offsetof(TextWidget_IsLastPage, ReturnValue) == 0x000000, "Member 'TextWidget_IsLastPage::ReturnValue' has a wrong offset!");

// Function DarwinGame.TextWidget.IsTextEventCompleted
// 0x0001 (0x0001 - 0x0000)
struct TextWidget_IsTextEventCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_IsTextEventCompleted) == 0x000001, "Wrong alignment on TextWidget_IsTextEventCompleted");
static_assert(sizeof(TextWidget_IsTextEventCompleted) == 0x000001, "Wrong size on TextWidget_IsTextEventCompleted");
static_assert(offsetof(TextWidget_IsTextEventCompleted, ReturnValue) == 0x000000, "Member 'TextWidget_IsTextEventCompleted::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataAddOnContent.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataAddOnContent_Clone final
{
public:
	class UGameDataAddOnContent*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataAddOnContent_Clone) == 0x000008, "Wrong alignment on GameDataAddOnContent_Clone");
static_assert(sizeof(GameDataAddOnContent_Clone) == 0x000008, "Wrong size on GameDataAddOnContent_Clone");
static_assert(offsetof(GameDataAddOnContent_Clone, ReturnValue) == 0x000000, "Member 'GameDataAddOnContent_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataAddOnContent.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataAddOnContent_Overwrite final
{
public:
	class UGameDataAddOnContent*                  game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataAddOnContent_Overwrite) == 0x000008, "Wrong alignment on GameDataAddOnContent_Overwrite");
static_assert(sizeof(GameDataAddOnContent_Overwrite) == 0x000008, "Wrong size on GameDataAddOnContent_Overwrite");
static_assert(offsetof(GameDataAddOnContent_Overwrite, game_data) == 0x000000, "Member 'GameDataAddOnContent_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.TimerReportManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct TimerReportManager_GetInstance final
{
public:
	class UTimerReportManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerReportManager_GetInstance) == 0x000008, "Wrong alignment on TimerReportManager_GetInstance");
static_assert(sizeof(TimerReportManager_GetInstance) == 0x000008, "Wrong size on TimerReportManager_GetInstance");
static_assert(offsetof(TimerReportManager_GetInstance, ReturnValue) == 0x000000, "Member 'TimerReportManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.AddReleaseArea
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_AddReleaseArea final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_AddReleaseArea) == 0x000004, "Wrong alignment on GameDataArea_AddReleaseArea");
static_assert(sizeof(GameDataArea_AddReleaseArea) == 0x000008, "Wrong size on GameDataArea_AddReleaseArea");
static_assert(offsetof(GameDataArea_AddReleaseArea, ID) == 0x000000, "Member 'GameDataArea_AddReleaseArea::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.AddVisitArea
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_AddVisitArea final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_AddVisitArea) == 0x000004, "Wrong alignment on GameDataArea_AddVisitArea");
static_assert(sizeof(GameDataArea_AddVisitArea) == 0x000008, "Wrong size on GameDataArea_AddVisitArea");
static_assert(offsetof(GameDataArea_AddVisitArea, ID) == 0x000000, "Member 'GameDataArea_AddVisitArea::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_Clone final
{
public:
	class UGameDataArea*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_Clone) == 0x000008, "Wrong alignment on GameDataArea_Clone");
static_assert(sizeof(GameDataArea_Clone) == 0x000008, "Wrong size on GameDataArea_Clone");
static_assert(offsetof(GameDataArea_Clone, ReturnValue) == 0x000000, "Member 'GameDataArea_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_Overwrite final
{
public:
	class UGameDataArea*                          GameData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_Overwrite) == 0x000008, "Wrong alignment on GameDataArea_Overwrite");
static_assert(sizeof(GameDataArea_Overwrite) == 0x000008, "Wrong size on GameDataArea_Overwrite");
static_assert(offsetof(GameDataArea_Overwrite, GameData) == 0x000000, "Member 'GameDataArea_Overwrite::GameData' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetAreaType
// 0x0001 (0x0001 - 0x0000)
struct GameDataArea_SetAreaType final
{
public:
	EAreaType                                     Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetAreaType) == 0x000001, "Wrong alignment on GameDataArea_SetAreaType");
static_assert(sizeof(GameDataArea_SetAreaType) == 0x000001, "Wrong size on GameDataArea_SetAreaType");
static_assert(offsetof(GameDataArea_SetAreaType, Type) == 0x000000, "Member 'GameDataArea_SetAreaType::Type' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetDistrictID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetDistrictID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetDistrictID) == 0x000004, "Wrong alignment on GameDataArea_SetDistrictID");
static_assert(sizeof(GameDataArea_SetDistrictID) == 0x000008, "Wrong size on GameDataArea_SetDistrictID");
static_assert(offsetof(GameDataArea_SetDistrictID, ID) == 0x000000, "Member 'GameDataArea_SetDistrictID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetEnvironmentID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetEnvironmentID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetEnvironmentID) == 0x000004, "Wrong alignment on GameDataArea_SetEnvironmentID");
static_assert(sizeof(GameDataArea_SetEnvironmentID) == 0x000008, "Wrong size on GameDataArea_SetEnvironmentID");
static_assert(offsetof(GameDataArea_SetEnvironmentID, ID) == 0x000000, "Member 'GameDataArea_SetEnvironmentID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetPointID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetPointID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetPointID) == 0x000004, "Wrong alignment on GameDataArea_SetPointID");
static_assert(sizeof(GameDataArea_SetPointID) == 0x000008, "Wrong size on GameDataArea_SetPointID");
static_assert(offsetof(GameDataArea_SetPointID, ID) == 0x000000, "Member 'GameDataArea_SetPointID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetPrevDistrictID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetPrevDistrictID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetPrevDistrictID) == 0x000004, "Wrong alignment on GameDataArea_SetPrevDistrictID");
static_assert(sizeof(GameDataArea_SetPrevDistrictID) == 0x000008, "Wrong size on GameDataArea_SetPrevDistrictID");
static_assert(offsetof(GameDataArea_SetPrevDistrictID, ID) == 0x000000, "Member 'GameDataArea_SetPrevDistrictID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetPrevPointID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetPrevPointID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetPrevPointID) == 0x000004, "Wrong alignment on GameDataArea_SetPrevPointID");
static_assert(sizeof(GameDataArea_SetPrevPointID) == 0x000008, "Wrong size on GameDataArea_SetPrevPointID");
static_assert(offsetof(GameDataArea_SetPrevPointID, ID) == 0x000000, "Member 'GameDataArea_SetPrevPointID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetPrevRegionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetPrevRegionID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetPrevRegionID) == 0x000004, "Wrong alignment on GameDataArea_SetPrevRegionID");
static_assert(sizeof(GameDataArea_SetPrevRegionID) == 0x000008, "Wrong size on GameDataArea_SetPrevRegionID");
static_assert(offsetof(GameDataArea_SetPrevRegionID, ID) == 0x000000, "Member 'GameDataArea_SetPrevRegionID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetPrevSectionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetPrevSectionID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetPrevSectionID) == 0x000004, "Wrong alignment on GameDataArea_SetPrevSectionID");
static_assert(sizeof(GameDataArea_SetPrevSectionID) == 0x000008, "Wrong size on GameDataArea_SetPrevSectionID");
static_assert(offsetof(GameDataArea_SetPrevSectionID, ID) == 0x000000, "Member 'GameDataArea_SetPrevSectionID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetPrevZoneID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetPrevZoneID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetPrevZoneID) == 0x000004, "Wrong alignment on GameDataArea_SetPrevZoneID");
static_assert(sizeof(GameDataArea_SetPrevZoneID) == 0x000008, "Wrong size on GameDataArea_SetPrevZoneID");
static_assert(offsetof(GameDataArea_SetPrevZoneID, ID) == 0x000000, "Member 'GameDataArea_SetPrevZoneID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetRegionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetRegionID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetRegionID) == 0x000004, "Wrong alignment on GameDataArea_SetRegionID");
static_assert(sizeof(GameDataArea_SetRegionID) == 0x000008, "Wrong size on GameDataArea_SetRegionID");
static_assert(offsetof(GameDataArea_SetRegionID, ID) == 0x000000, "Member 'GameDataArea_SetRegionID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetSectionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetSectionID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetSectionID) == 0x000004, "Wrong alignment on GameDataArea_SetSectionID");
static_assert(sizeof(GameDataArea_SetSectionID) == 0x000008, "Wrong size on GameDataArea_SetSectionID");
static_assert(offsetof(GameDataArea_SetSectionID, ID) == 0x000000, "Member 'GameDataArea_SetSectionID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.SetZoneID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_SetZoneID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_SetZoneID) == 0x000004, "Wrong alignment on GameDataArea_SetZoneID");
static_assert(sizeof(GameDataArea_SetZoneID) == 0x000008, "Wrong size on GameDataArea_SetZoneID");
static_assert(offsetof(GameDataArea_SetZoneID, ID) == 0x000000, "Member 'GameDataArea_SetZoneID::ID' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetAreaState
// 0x000C (0x000C - 0x0000)
struct GameDataArea_GetAreaState final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_AreaState                          State;                                             // 0x0008(0x0002)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataArea_GetAreaState) == 0x000004, "Wrong alignment on GameDataArea_GetAreaState");
static_assert(sizeof(GameDataArea_GetAreaState) == 0x00000C, "Wrong size on GameDataArea_GetAreaState");
static_assert(offsetof(GameDataArea_GetAreaState, ID) == 0x000000, "Member 'GameDataArea_GetAreaState::ID' has a wrong offset!");
static_assert(offsetof(GameDataArea_GetAreaState, State) == 0x000008, "Member 'GameDataArea_GetAreaState::State' has a wrong offset!");
static_assert(offsetof(GameDataArea_GetAreaState, ReturnValue) == 0x00000A, "Member 'GameDataArea_GetAreaState::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetAreaType
// 0x0001 (0x0001 - 0x0000)
struct GameDataArea_GetAreaType final
{
public:
	EAreaType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetAreaType) == 0x000001, "Wrong alignment on GameDataArea_GetAreaType");
static_assert(sizeof(GameDataArea_GetAreaType) == 0x000001, "Wrong size on GameDataArea_GetAreaType");
static_assert(offsetof(GameDataArea_GetAreaType, ReturnValue) == 0x000000, "Member 'GameDataArea_GetAreaType::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetDistrictID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetDistrictID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetDistrictID) == 0x000004, "Wrong alignment on GameDataArea_GetDistrictID");
static_assert(sizeof(GameDataArea_GetDistrictID) == 0x000008, "Wrong size on GameDataArea_GetDistrictID");
static_assert(offsetof(GameDataArea_GetDistrictID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetDistrictID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetEnvironmentID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetEnvironmentID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetEnvironmentID) == 0x000004, "Wrong alignment on GameDataArea_GetEnvironmentID");
static_assert(sizeof(GameDataArea_GetEnvironmentID) == 0x000008, "Wrong size on GameDataArea_GetEnvironmentID");
static_assert(offsetof(GameDataArea_GetEnvironmentID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetEnvironmentID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetIndoorData
// 0x000C (0x000C - 0x0000)
struct GameDataArea_GetIndoorData final
{
public:
	struct FST_IndoorData                         ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetIndoorData) == 0x000004, "Wrong alignment on GameDataArea_GetIndoorData");
static_assert(sizeof(GameDataArea_GetIndoorData) == 0x00000C, "Wrong size on GameDataArea_GetIndoorData");
static_assert(offsetof(GameDataArea_GetIndoorData, ReturnValue) == 0x000000, "Member 'GameDataArea_GetIndoorData::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetPointID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetPointID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetPointID) == 0x000004, "Wrong alignment on GameDataArea_GetPointID");
static_assert(sizeof(GameDataArea_GetPointID) == 0x000008, "Wrong size on GameDataArea_GetPointID");
static_assert(offsetof(GameDataArea_GetPointID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetPointID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetPrevDistrictID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetPrevDistrictID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetPrevDistrictID) == 0x000004, "Wrong alignment on GameDataArea_GetPrevDistrictID");
static_assert(sizeof(GameDataArea_GetPrevDistrictID) == 0x000008, "Wrong size on GameDataArea_GetPrevDistrictID");
static_assert(offsetof(GameDataArea_GetPrevDistrictID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetPrevDistrictID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetPrevPointID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetPrevPointID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetPrevPointID) == 0x000004, "Wrong alignment on GameDataArea_GetPrevPointID");
static_assert(sizeof(GameDataArea_GetPrevPointID) == 0x000008, "Wrong size on GameDataArea_GetPrevPointID");
static_assert(offsetof(GameDataArea_GetPrevPointID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetPrevPointID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetPrevRegionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetPrevRegionID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetPrevRegionID) == 0x000004, "Wrong alignment on GameDataArea_GetPrevRegionID");
static_assert(sizeof(GameDataArea_GetPrevRegionID) == 0x000008, "Wrong size on GameDataArea_GetPrevRegionID");
static_assert(offsetof(GameDataArea_GetPrevRegionID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetPrevRegionID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetPrevSectionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetPrevSectionID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetPrevSectionID) == 0x000004, "Wrong alignment on GameDataArea_GetPrevSectionID");
static_assert(sizeof(GameDataArea_GetPrevSectionID) == 0x000008, "Wrong size on GameDataArea_GetPrevSectionID");
static_assert(offsetof(GameDataArea_GetPrevSectionID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetPrevSectionID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetPrevZoneID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetPrevZoneID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetPrevZoneID) == 0x000004, "Wrong alignment on GameDataArea_GetPrevZoneID");
static_assert(sizeof(GameDataArea_GetPrevZoneID) == 0x000008, "Wrong size on GameDataArea_GetPrevZoneID");
static_assert(offsetof(GameDataArea_GetPrevZoneID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetPrevZoneID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetRegionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetRegionID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetRegionID) == 0x000004, "Wrong alignment on GameDataArea_GetRegionID");
static_assert(sizeof(GameDataArea_GetRegionID) == 0x000008, "Wrong size on GameDataArea_GetRegionID");
static_assert(offsetof(GameDataArea_GetRegionID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetRegionID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetSectionID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetSectionID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetSectionID) == 0x000004, "Wrong alignment on GameDataArea_GetSectionID");
static_assert(sizeof(GameDataArea_GetSectionID) == 0x000008, "Wrong size on GameDataArea_GetSectionID");
static_assert(offsetof(GameDataArea_GetSectionID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetSectionID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetStarScarID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetStarScarID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetStarScarID) == 0x000004, "Wrong alignment on GameDataArea_GetStarScarID");
static_assert(sizeof(GameDataArea_GetStarScarID) == 0x000008, "Wrong size on GameDataArea_GetStarScarID");
static_assert(offsetof(GameDataArea_GetStarScarID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetStarScarID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArea.GetZoneID
// 0x0008 (0x0008 - 0x0000)
struct GameDataArea_GetZoneID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArea_GetZoneID) == 0x000004, "Wrong alignment on GameDataArea_GetZoneID");
static_assert(sizeof(GameDataArea_GetZoneID) == 0x000008, "Wrong size on GameDataArea_GetZoneID");
static_assert(offsetof(GameDataArea_GetZoneID, ReturnValue) == 0x000000, "Member 'GameDataArea_GetZoneID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArtifact.AddBelongingsArtifact
// 0x000C (0x000C - 0x0000)
struct GameDataArtifact_AddBelongingsArtifact final
{
public:
	int32                                         ArtifactID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quality;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArtifact_AddBelongingsArtifact) == 0x000004, "Wrong alignment on GameDataArtifact_AddBelongingsArtifact");
static_assert(sizeof(GameDataArtifact_AddBelongingsArtifact) == 0x00000C, "Wrong size on GameDataArtifact_AddBelongingsArtifact");
static_assert(offsetof(GameDataArtifact_AddBelongingsArtifact, ArtifactID) == 0x000000, "Member 'GameDataArtifact_AddBelongingsArtifact::ArtifactID' has a wrong offset!");
static_assert(offsetof(GameDataArtifact_AddBelongingsArtifact, Num) == 0x000004, "Member 'GameDataArtifact_AddBelongingsArtifact::Num' has a wrong offset!");
static_assert(offsetof(GameDataArtifact_AddBelongingsArtifact, Quality) == 0x000008, "Member 'GameDataArtifact_AddBelongingsArtifact::Quality' has a wrong offset!");

// Function DarwinGame.GameDataArtifact.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataArtifact_Clone final
{
public:
	class UGameDataArtifact*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArtifact_Clone) == 0x000008, "Wrong alignment on GameDataArtifact_Clone");
static_assert(sizeof(GameDataArtifact_Clone) == 0x000008, "Wrong size on GameDataArtifact_Clone");
static_assert(offsetof(GameDataArtifact_Clone, ReturnValue) == 0x000000, "Member 'GameDataArtifact_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArtifact.GetBelongingsArtifactEstimatedValue
// 0x0010 (0x0010 - 0x0000)
struct GameDataArtifact_GetBelongingsArtifactEstimatedValue final
{
public:
	int32                                         ArtifactID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArtifact_GetBelongingsArtifactEstimatedValue) == 0x000008, "Wrong alignment on GameDataArtifact_GetBelongingsArtifactEstimatedValue");
static_assert(sizeof(GameDataArtifact_GetBelongingsArtifactEstimatedValue) == 0x000010, "Wrong size on GameDataArtifact_GetBelongingsArtifactEstimatedValue");
static_assert(offsetof(GameDataArtifact_GetBelongingsArtifactEstimatedValue, ArtifactID) == 0x000000, "Member 'GameDataArtifact_GetBelongingsArtifactEstimatedValue::ArtifactID' has a wrong offset!");
static_assert(offsetof(GameDataArtifact_GetBelongingsArtifactEstimatedValue, ReturnValue) == 0x000008, "Member 'GameDataArtifact_GetBelongingsArtifactEstimatedValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArtifact.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataArtifact_Overwrite final
{
public:
	class UGameDataArtifact*                      game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArtifact_Overwrite) == 0x000008, "Wrong alignment on GameDataArtifact_Overwrite");
static_assert(sizeof(GameDataArtifact_Overwrite) == 0x000008, "Wrong size on GameDataArtifact_Overwrite");
static_assert(offsetof(GameDataArtifact_Overwrite, game_data) == 0x000000, "Member 'GameDataArtifact_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataArtifactPoint.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataArtifactPoint_Clone final
{
public:
	class UGameDataArtifactPoint*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArtifactPoint_Clone) == 0x000008, "Wrong alignment on GameDataArtifactPoint_Clone");
static_assert(sizeof(GameDataArtifactPoint_Clone) == 0x000008, "Wrong size on GameDataArtifactPoint_Clone");
static_assert(offsetof(GameDataArtifactPoint_Clone, ReturnValue) == 0x000000, "Member 'GameDataArtifactPoint_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataArtifactPoint.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataArtifactPoint_Overwrite final
{
public:
	class UGameDataArtifactPoint*                 game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataArtifactPoint_Overwrite) == 0x000008, "Wrong alignment on GameDataArtifactPoint_Overwrite");
static_assert(sizeof(GameDataArtifactPoint_Overwrite) == 0x000008, "Wrong size on GameDataArtifactPoint_Overwrite");
static_assert(offsetof(GameDataArtifactPoint_Overwrite, game_data) == 0x000000, "Member 'GameDataArtifactPoint_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDatabase.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_Clone final
{
public:
	class UGameDatabase*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_Clone) == 0x000008, "Wrong alignment on GameDatabase_Clone");
static_assert(sizeof(GameDatabase_Clone) == 0x000008, "Wrong size on GameDatabase_Clone");
static_assert(offsetof(GameDatabase_Clone, ReturnValue) == 0x000000, "Member 'GameDatabase_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetAchievement
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetAchievement final
{
public:
	class UGameDataAchievement*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetAchievement) == 0x000008, "Wrong alignment on GameDatabase_GetAchievement");
static_assert(sizeof(GameDatabase_GetAchievement) == 0x000008, "Wrong size on GameDatabase_GetAchievement");
static_assert(offsetof(GameDatabase_GetAchievement, ReturnValue) == 0x000000, "Member 'GameDatabase_GetAchievement::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetAOC
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetAOC final
{
public:
	class UGameDataAddOnContent*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetAOC) == 0x000008, "Wrong alignment on GameDatabase_GetAOC");
static_assert(sizeof(GameDatabase_GetAOC) == 0x000008, "Wrong size on GameDatabase_GetAOC");
static_assert(offsetof(GameDatabase_GetAOC, ReturnValue) == 0x000000, "Member 'GameDatabase_GetAOC::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetArea
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetArea final
{
public:
	class UGameDataArea*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetArea) == 0x000008, "Wrong alignment on GameDatabase_GetArea");
static_assert(sizeof(GameDatabase_GetArea) == 0x000008, "Wrong size on GameDatabase_GetArea");
static_assert(offsetof(GameDatabase_GetArea, ReturnValue) == 0x000000, "Member 'GameDatabase_GetArea::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetArtifact
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetArtifact final
{
public:
	class UGameDataArtifact*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetArtifact) == 0x000008, "Wrong alignment on GameDatabase_GetArtifact");
static_assert(sizeof(GameDatabase_GetArtifact) == 0x000008, "Wrong size on GameDatabase_GetArtifact");
static_assert(offsetof(GameDatabase_GetArtifact, ReturnValue) == 0x000000, "Member 'GameDatabase_GetArtifact::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetArtifactPoint
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetArtifactPoint final
{
public:
	class UGameDataArtifactPoint*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetArtifactPoint) == 0x000008, "Wrong alignment on GameDatabase_GetArtifactPoint");
static_assert(sizeof(GameDatabase_GetArtifactPoint) == 0x000008, "Wrong size on GameDatabase_GetArtifactPoint");
static_assert(offsetof(GameDatabase_GetArtifactPoint, ReturnValue) == 0x000000, "Member 'GameDatabase_GetArtifactPoint::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetBelongingsCoin
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetBelongingsCoin final
{
public:
	class UGameBelongingsCoin*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetBelongingsCoin) == 0x000008, "Wrong alignment on GameDatabase_GetBelongingsCoin");
static_assert(sizeof(GameDatabase_GetBelongingsCoin) == 0x000008, "Wrong size on GameDatabase_GetBelongingsCoin");
static_assert(offsetof(GameDatabase_GetBelongingsCoin, ReturnValue) == 0x000000, "Member 'GameDatabase_GetBelongingsCoin::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetBelongingsItem
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetBelongingsItem final
{
public:
	class UGameBelongingsItem*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetBelongingsItem) == 0x000008, "Wrong alignment on GameDatabase_GetBelongingsItem");
static_assert(sizeof(GameDatabase_GetBelongingsItem) == 0x000008, "Wrong size on GameDatabase_GetBelongingsItem");
static_assert(offsetof(GameDatabase_GetBelongingsItem, ReturnValue) == 0x000000, "Member 'GameDatabase_GetBelongingsItem::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetBonfire
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetBonfire final
{
public:
	class UGameDataBonfire*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetBonfire) == 0x000008, "Wrong alignment on GameDatabase_GetBonfire");
static_assert(sizeof(GameDatabase_GetBonfire) == 0x000008, "Wrong size on GameDatabase_GetBonfire");
static_assert(offsetof(GameDatabase_GetBonfire, ReturnValue) == 0x000000, "Member 'GameDatabase_GetBonfire::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetBreakObject
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetBreakObject final
{
public:
	class UGameDataBreakObject*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetBreakObject) == 0x000008, "Wrong alignment on GameDatabase_GetBreakObject");
static_assert(sizeof(GameDatabase_GetBreakObject) == 0x000008, "Wrong size on GameDatabase_GetBreakObject");
static_assert(offsetof(GameDatabase_GetBreakObject, ReturnValue) == 0x000000, "Member 'GameDatabase_GetBreakObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetCollectionPoint
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetCollectionPoint final
{
public:
	class UGameDataCollectionPoint*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetCollectionPoint) == 0x000008, "Wrong alignment on GameDatabase_GetCollectionPoint");
static_assert(sizeof(GameDatabase_GetCollectionPoint) == 0x000008, "Wrong size on GameDatabase_GetCollectionPoint");
static_assert(offsetof(GameDatabase_GetCollectionPoint, ReturnValue) == 0x000000, "Member 'GameDatabase_GetCollectionPoint::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetDefeatedMonster
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetDefeatedMonster final
{
public:
	class UGameDataDefeatedMonster*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetDefeatedMonster) == 0x000008, "Wrong alignment on GameDatabase_GetDefeatedMonster");
static_assert(sizeof(GameDatabase_GetDefeatedMonster) == 0x000008, "Wrong size on GameDatabase_GetDefeatedMonster");
static_assert(offsetof(GameDatabase_GetDefeatedMonster, ReturnValue) == 0x000000, "Member 'GameDatabase_GetDefeatedMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetDict
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetDict final
{
public:
	class UGameDataDict*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetDict) == 0x000008, "Wrong alignment on GameDatabase_GetDict");
static_assert(sizeof(GameDatabase_GetDict) == 0x000008, "Wrong size on GameDatabase_GetDict");
static_assert(offsetof(GameDatabase_GetDict, ReturnValue) == 0x000000, "Member 'GameDatabase_GetDict::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetDispatch
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetDispatch final
{
public:
	class UGameDataDispatch*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetDispatch) == 0x000008, "Wrong alignment on GameDatabase_GetDispatch");
static_assert(sizeof(GameDatabase_GetDispatch) == 0x000008, "Wrong size on GameDatabase_GetDispatch");
static_assert(offsetof(GameDatabase_GetDispatch, ReturnValue) == 0x000000, "Member 'GameDatabase_GetDispatch::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetDungeon
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetDungeon final
{
public:
	class UGameDataDungeon*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetDungeon) == 0x000008, "Wrong alignment on GameDatabase_GetDungeon");
static_assert(sizeof(GameDatabase_GetDungeon) == 0x000008, "Wrong size on GameDatabase_GetDungeon");
static_assert(offsetof(GameDatabase_GetDungeon, ReturnValue) == 0x000000, "Member 'GameDatabase_GetDungeon::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetField
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetField final
{
public:
	class UGameDataField*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetField) == 0x000008, "Wrong alignment on GameDatabase_GetField");
static_assert(sizeof(GameDatabase_GetField) == 0x000008, "Wrong size on GameDatabase_GetField");
static_assert(offsetof(GameDatabase_GetField, ReturnValue) == 0x000000, "Member 'GameDatabase_GetField::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetFixTreasureBox
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetFixTreasureBox final
{
public:
	class UGameDataFixTreasureBox*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetFixTreasureBox) == 0x000008, "Wrong alignment on GameDatabase_GetFixTreasureBox");
static_assert(sizeof(GameDatabase_GetFixTreasureBox) == 0x000008, "Wrong size on GameDatabase_GetFixTreasureBox");
static_assert(offsetof(GameDatabase_GetFixTreasureBox, ReturnValue) == 0x000000, "Member 'GameDatabase_GetFixTreasureBox::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetGameDataFlag
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetGameDataFlag final
{
public:
	class UGameDataFlag*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetGameDataFlag) == 0x000008, "Wrong alignment on GameDatabase_GetGameDataFlag");
static_assert(sizeof(GameDatabase_GetGameDataFlag) == 0x000008, "Wrong size on GameDatabase_GetGameDataFlag");
static_assert(offsetof(GameDatabase_GetGameDataFlag, ReturnValue) == 0x000000, "Member 'GameDatabase_GetGameDataFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetGuest
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetGuest final
{
public:
	class UGameDataGuest*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetGuest) == 0x000008, "Wrong alignment on GameDatabase_GetGuest");
static_assert(sizeof(GameDatabase_GetGuest) == 0x000008, "Wrong size on GameDatabase_GetGuest");
static_assert(offsetof(GameDatabase_GetGuest, ReturnValue) == 0x000000, "Member 'GameDatabase_GetGuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetHeader
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetHeader final
{
public:
	class UGameDataHeader*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetHeader) == 0x000008, "Wrong alignment on GameDatabase_GetHeader");
static_assert(sizeof(GameDatabase_GetHeader) == 0x000008, "Wrong size on GameDatabase_GetHeader");
static_assert(offsetof(GameDatabase_GetHeader, ReturnValue) == 0x000000, "Member 'GameDatabase_GetHeader::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetHistory
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetHistory final
{
public:
	class UGameDataHistory*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetHistory) == 0x000008, "Wrong alignment on GameDatabase_GetHistory");
static_assert(sizeof(GameDatabase_GetHistory) == 0x000008, "Wrong size on GameDatabase_GetHistory");
static_assert(offsetof(GameDatabase_GetHistory, ReturnValue) == 0x000000, "Member 'GameDatabase_GetHistory::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetMyTeam
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetMyTeam final
{
public:
	class UGameDataMyTeam*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetMyTeam) == 0x000008, "Wrong alignment on GameDatabase_GetMyTeam");
static_assert(sizeof(GameDatabase_GetMyTeam) == 0x000008, "Wrong size on GameDatabase_GetMyTeam");
static_assert(offsetof(GameDatabase_GetMyTeam, ReturnValue) == 0x000000, "Member 'GameDatabase_GetMyTeam::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetNetwork
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetNetwork final
{
public:
	class UGameDataNetwork*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetNetwork) == 0x000008, "Wrong alignment on GameDatabase_GetNetwork");
static_assert(sizeof(GameDatabase_GetNetwork) == 0x000008, "Wrong size on GameDatabase_GetNetwork");
static_assert(offsetof(GameDatabase_GetNetwork, ReturnValue) == 0x000000, "Member 'GameDatabase_GetNetwork::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetNPC
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetNPC final
{
public:
	class UGameDataNPC*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetNPC) == 0x000008, "Wrong alignment on GameDatabase_GetNPC");
static_assert(sizeof(GameDatabase_GetNPC) == 0x000008, "Wrong size on GameDatabase_GetNPC");
static_assert(offsetof(GameDatabase_GetNPC, ReturnValue) == 0x000000, "Member 'GameDatabase_GetNPC::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetOption
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetOption final
{
public:
	class UGameDataOption*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetOption) == 0x000008, "Wrong alignment on GameDatabase_GetOption");
static_assert(sizeof(GameDatabase_GetOption) == 0x000008, "Wrong size on GameDatabase_GetOption");
static_assert(offsetof(GameDatabase_GetOption, ReturnValue) == 0x000000, "Member 'GameDatabase_GetOption::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetParty
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetParty final
{
public:
	class UGameDataParty*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetParty) == 0x000008, "Wrong alignment on GameDatabase_GetParty");
static_assert(sizeof(GameDatabase_GetParty) == 0x000008, "Wrong size on GameDatabase_GetParty");
static_assert(offsetof(GameDatabase_GetParty, ReturnValue) == 0x000000, "Member 'GameDatabase_GetParty::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetPlayerData final
{
public:
	class UGameDataPlayer*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetPlayerData) == 0x000008, "Wrong alignment on GameDatabase_GetPlayerData");
static_assert(sizeof(GameDatabase_GetPlayerData) == 0x000008, "Wrong size on GameDatabase_GetPlayerData");
static_assert(offsetof(GameDatabase_GetPlayerData, ReturnValue) == 0x000000, "Member 'GameDatabase_GetPlayerData::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetQuest
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetQuest final
{
public:
	class UGameDataQuest*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetQuest) == 0x000008, "Wrong alignment on GameDatabase_GetQuest");
static_assert(sizeof(GameDatabase_GetQuest) == 0x000008, "Wrong size on GameDatabase_GetQuest");
static_assert(offsetof(GameDatabase_GetQuest, ReturnValue) == 0x000000, "Member 'GameDatabase_GetQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetSavePoint
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetSavePoint final
{
public:
	class UGameDataSavePoint*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetSavePoint) == 0x000008, "Wrong alignment on GameDatabase_GetSavePoint");
static_assert(sizeof(GameDatabase_GetSavePoint) == 0x000008, "Wrong size on GameDatabase_GetSavePoint");
static_assert(offsetof(GameDatabase_GetSavePoint, ReturnValue) == 0x000000, "Member 'GameDatabase_GetSavePoint::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetScenarioProgress
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetScenarioProgress final
{
public:
	class UGameDataScenarioProgress*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetScenarioProgress) == 0x000008, "Wrong alignment on GameDatabase_GetScenarioProgress");
static_assert(sizeof(GameDatabase_GetScenarioProgress) == 0x000008, "Wrong size on GameDatabase_GetScenarioProgress");
static_assert(offsetof(GameDatabase_GetScenarioProgress, ReturnValue) == 0x000000, "Member 'GameDatabase_GetScenarioProgress::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetShop
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetShop final
{
public:
	class UGameDataShop*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetShop) == 0x000008, "Wrong alignment on GameDatabase_GetShop");
static_assert(sizeof(GameDatabase_GetShop) == 0x000008, "Wrong size on GameDatabase_GetShop");
static_assert(offsetof(GameDatabase_GetShop, ReturnValue) == 0x000000, "Member 'GameDatabase_GetShop::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetStation
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetStation final
{
public:
	class UGameDataStation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetStation) == 0x000008, "Wrong alignment on GameDatabase_GetStation");
static_assert(sizeof(GameDatabase_GetStation) == 0x000008, "Wrong size on GameDatabase_GetStation");
static_assert(offsetof(GameDatabase_GetStation, ReturnValue) == 0x000000, "Member 'GameDatabase_GetStation::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetStockMonster
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetStockMonster final
{
public:
	class UGameDataStockMonster*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetStockMonster) == 0x000008, "Wrong alignment on GameDatabase_GetStockMonster");
static_assert(sizeof(GameDatabase_GetStockMonster) == 0x000008, "Wrong size on GameDatabase_GetStockMonster");
static_assert(offsetof(GameDatabase_GetStockMonster, ReturnValue) == 0x000000, "Member 'GameDatabase_GetStockMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetTargetObject
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetTargetObject final
{
public:
	class UGameDataTargetObject*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetTargetObject) == 0x000008, "Wrong alignment on GameDatabase_GetTargetObject");
static_assert(sizeof(GameDatabase_GetTargetObject) == 0x000008, "Wrong size on GameDatabase_GetTargetObject");
static_assert(offsetof(GameDatabase_GetTargetObject, ReturnValue) == 0x000000, "Member 'GameDatabase_GetTargetObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetTips
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetTips final
{
public:
	class UGameDataTips*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetTips) == 0x000008, "Wrong alignment on GameDatabase_GetTips");
static_assert(sizeof(GameDatabase_GetTips) == 0x000008, "Wrong size on GameDatabase_GetTips");
static_assert(offsetof(GameDatabase_GetTips, ReturnValue) == 0x000000, "Member 'GameDatabase_GetTips::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.GetUIMap
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_GetUIMap final
{
public:
	class UGameDataUIMap*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_GetUIMap) == 0x000008, "Wrong alignment on GameDatabase_GetUIMap");
static_assert(sizeof(GameDatabase_GetUIMap) == 0x000008, "Wrong size on GameDatabase_GetUIMap");
static_assert(offsetof(GameDatabase_GetUIMap, ReturnValue) == 0x000000, "Member 'GameDatabase_GetUIMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDatabase.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDatabase_Overwrite final
{
public:
	class UGameDatabase*                          game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDatabase_Overwrite) == 0x000008, "Wrong alignment on GameDatabase_Overwrite");
static_assert(sizeof(GameDatabase_Overwrite) == 0x000008, "Wrong size on GameDatabase_Overwrite");
static_assert(offsetof(GameDatabase_Overwrite, game_data) == 0x000000, "Member 'GameDatabase_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataBonfire.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataBonfire_Clone final
{
public:
	class UGameDataBonfire*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataBonfire_Clone) == 0x000008, "Wrong alignment on GameDataBonfire_Clone");
static_assert(sizeof(GameDataBonfire_Clone) == 0x000008, "Wrong size on GameDataBonfire_Clone");
static_assert(offsetof(GameDataBonfire_Clone, ReturnValue) == 0x000000, "Member 'GameDataBonfire_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataBonfire.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataBonfire_Overwrite final
{
public:
	class UGameDataBonfire*                       game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataBonfire_Overwrite) == 0x000008, "Wrong alignment on GameDataBonfire_Overwrite");
static_assert(sizeof(GameDataBonfire_Overwrite) == 0x000008, "Wrong size on GameDataBonfire_Overwrite");
static_assert(offsetof(GameDataBonfire_Overwrite, game_data) == 0x000000, "Member 'GameDataBonfire_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataBreakObject.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataBreakObject_Clone final
{
public:
	class UGameDataBreakObject*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataBreakObject_Clone) == 0x000008, "Wrong alignment on GameDataBreakObject_Clone");
static_assert(sizeof(GameDataBreakObject_Clone) == 0x000008, "Wrong size on GameDataBreakObject_Clone");
static_assert(offsetof(GameDataBreakObject_Clone, ReturnValue) == 0x000000, "Member 'GameDataBreakObject_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataBreakObject.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataBreakObject_Overwrite final
{
public:
	class UGameDataBreakObject*                   GameData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataBreakObject_Overwrite) == 0x000008, "Wrong alignment on GameDataBreakObject_Overwrite");
static_assert(sizeof(GameDataBreakObject_Overwrite) == 0x000008, "Wrong size on GameDataBreakObject_Overwrite");
static_assert(offsetof(GameDataBreakObject_Overwrite, GameData) == 0x000000, "Member 'GameDataBreakObject_Overwrite::GameData' has a wrong offset!");

// Function DarwinGame.GameDataCollectionPoint.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataCollectionPoint_Clone final
{
public:
	class UGameDataCollectionPoint*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCollectionPoint_Clone) == 0x000008, "Wrong alignment on GameDataCollectionPoint_Clone");
static_assert(sizeof(GameDataCollectionPoint_Clone) == 0x000008, "Wrong size on GameDataCollectionPoint_Clone");
static_assert(offsetof(GameDataCollectionPoint_Clone, ReturnValue) == 0x000000, "Member 'GameDataCollectionPoint_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataCollectionPoint.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataCollectionPoint_Overwrite final
{
public:
	class UGameDataCollectionPoint*               game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataCollectionPoint_Overwrite) == 0x000008, "Wrong alignment on GameDataCollectionPoint_Overwrite");
static_assert(sizeof(GameDataCollectionPoint_Overwrite) == 0x000008, "Wrong size on GameDataCollectionPoint_Overwrite");
static_assert(offsetof(GameDataCollectionPoint_Overwrite, game_data) == 0x000000, "Member 'GameDataCollectionPoint_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataDefeatedMonster.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataDefeatedMonster_Clone final
{
public:
	class UGameDataDefeatedMonster*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDefeatedMonster_Clone) == 0x000008, "Wrong alignment on GameDataDefeatedMonster_Clone");
static_assert(sizeof(GameDataDefeatedMonster_Clone) == 0x000008, "Wrong size on GameDataDefeatedMonster_Clone");
static_assert(offsetof(GameDataDefeatedMonster_Clone, ReturnValue) == 0x000000, "Member 'GameDataDefeatedMonster_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataDefeatedMonster.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataDefeatedMonster_Overwrite final
{
public:
	class UGameDataDefeatedMonster*               game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDefeatedMonster_Overwrite) == 0x000008, "Wrong alignment on GameDataDefeatedMonster_Overwrite");
static_assert(sizeof(GameDataDefeatedMonster_Overwrite) == 0x000008, "Wrong size on GameDataDefeatedMonster_Overwrite");
static_assert(offsetof(GameDataDefeatedMonster_Overwrite, game_data) == 0x000000, "Member 'GameDataDefeatedMonster_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataDict.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataDict_Clone final
{
public:
	class UGameDataDict*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDict_Clone) == 0x000008, "Wrong alignment on GameDataDict_Clone");
static_assert(sizeof(GameDataDict_Clone) == 0x000008, "Wrong size on GameDataDict_Clone");
static_assert(offsetof(GameDataDict_Clone, ReturnValue) == 0x000000, "Member 'GameDataDict_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataDict.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataDict_Overwrite final
{
public:
	class UGameDataDict*                          game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDict_Overwrite) == 0x000008, "Wrong alignment on GameDataDict_Overwrite");
static_assert(sizeof(GameDataDict_Overwrite) == 0x000008, "Wrong size on GameDataDict_Overwrite");
static_assert(offsetof(GameDataDict_Overwrite, game_data) == 0x000000, "Member 'GameDataDict_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataDict.UpdateKnowledgeDictReleaseInfo
// 0x0008 (0x0008 - 0x0000)
struct GameDataDict_UpdateKnowledgeDictReleaseInfo final
{
public:
	class FName                                   KnowledgeId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDict_UpdateKnowledgeDictReleaseInfo) == 0x000004, "Wrong alignment on GameDataDict_UpdateKnowledgeDictReleaseInfo");
static_assert(sizeof(GameDataDict_UpdateKnowledgeDictReleaseInfo) == 0x000008, "Wrong size on GameDataDict_UpdateKnowledgeDictReleaseInfo");
static_assert(offsetof(GameDataDict_UpdateKnowledgeDictReleaseInfo, KnowledgeId) == 0x000000, "Member 'GameDataDict_UpdateKnowledgeDictReleaseInfo::KnowledgeId' has a wrong offset!");

// Function DarwinGame.GameDataDict.UpdateQuestOverviewDictReleaseInfo
// 0x0008 (0x0008 - 0x0000)
struct GameDataDict_UpdateQuestOverviewDictReleaseInfo final
{
public:
	class FName                                   KnowledgeId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDict_UpdateQuestOverviewDictReleaseInfo) == 0x000004, "Wrong alignment on GameDataDict_UpdateQuestOverviewDictReleaseInfo");
static_assert(sizeof(GameDataDict_UpdateQuestOverviewDictReleaseInfo) == 0x000008, "Wrong size on GameDataDict_UpdateQuestOverviewDictReleaseInfo");
static_assert(offsetof(GameDataDict_UpdateQuestOverviewDictReleaseInfo, KnowledgeId) == 0x000000, "Member 'GameDataDict_UpdateQuestOverviewDictReleaseInfo::KnowledgeId' has a wrong offset!");

// Function DarwinGame.GameDataDispatch.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataDispatch_Clone final
{
public:
	class UGameDataDispatch*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDispatch_Clone) == 0x000008, "Wrong alignment on GameDataDispatch_Clone");
static_assert(sizeof(GameDataDispatch_Clone) == 0x000008, "Wrong size on GameDataDispatch_Clone");
static_assert(offsetof(GameDataDispatch_Clone, ReturnValue) == 0x000000, "Member 'GameDataDispatch_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataDispatch.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataDispatch_Overwrite final
{
public:
	class UGameDataDispatch*                      game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDispatch_Overwrite) == 0x000008, "Wrong alignment on GameDataDispatch_Overwrite");
static_assert(sizeof(GameDataDispatch_Overwrite) == 0x000008, "Wrong size on GameDataDispatch_Overwrite");
static_assert(offsetof(GameDataDispatch_Overwrite, game_data) == 0x000000, "Member 'GameDataDispatch_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataDungeon.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataDungeon_Clone final
{
public:
	class UGameDataDungeon*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDungeon_Clone) == 0x000008, "Wrong alignment on GameDataDungeon_Clone");
static_assert(sizeof(GameDataDungeon_Clone) == 0x000008, "Wrong size on GameDataDungeon_Clone");
static_assert(offsetof(GameDataDungeon_Clone, ReturnValue) == 0x000000, "Member 'GameDataDungeon_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataDungeon.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataDungeon_Overwrite final
{
public:
	class UGameDataDungeon*                       game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataDungeon_Overwrite) == 0x000008, "Wrong alignment on GameDataDungeon_Overwrite");
static_assert(sizeof(GameDataDungeon_Overwrite) == 0x000008, "Wrong size on GameDataDungeon_Overwrite");
static_assert(offsetof(GameDataDungeon_Overwrite, game_data) == 0x000000, "Member 'GameDataDungeon_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataField.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataField_Clone final
{
public:
	class UGameDataField*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataField_Clone) == 0x000008, "Wrong alignment on GameDataField_Clone");
static_assert(sizeof(GameDataField_Clone) == 0x000008, "Wrong size on GameDataField_Clone");
static_assert(offsetof(GameDataField_Clone, ReturnValue) == 0x000000, "Member 'GameDataField_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataField.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataField_Overwrite final
{
public:
	class UGameDataField*                         GameData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataField_Overwrite) == 0x000008, "Wrong alignment on GameDataField_Overwrite");
static_assert(sizeof(GameDataField_Overwrite) == 0x000008, "Wrong size on GameDataField_Overwrite");
static_assert(offsetof(GameDataField_Overwrite, GameData) == 0x000000, "Member 'GameDataField_Overwrite::GameData' has a wrong offset!");

// Function DarwinGame.GameDataField.SetTrainStopStationID
// 0x0008 (0x0008 - 0x0000)
struct GameDataField_SetTrainStopStationID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataField_SetTrainStopStationID) == 0x000004, "Wrong alignment on GameDataField_SetTrainStopStationID");
static_assert(sizeof(GameDataField_SetTrainStopStationID) == 0x000008, "Wrong size on GameDataField_SetTrainStopStationID");
static_assert(offsetof(GameDataField_SetTrainStopStationID, ID) == 0x000000, "Member 'GameDataField_SetTrainStopStationID::ID' has a wrong offset!");

// Function DarwinGame.GameDataField.GetTrainStopStationID
// 0x0008 (0x0008 - 0x0000)
struct GameDataField_GetTrainStopStationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataField_GetTrainStopStationID) == 0x000004, "Wrong alignment on GameDataField_GetTrainStopStationID");
static_assert(sizeof(GameDataField_GetTrainStopStationID) == 0x000008, "Wrong size on GameDataField_GetTrainStopStationID");
static_assert(offsetof(GameDataField_GetTrainStopStationID, ReturnValue) == 0x000000, "Member 'GameDataField_GetTrainStopStationID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFixTreasureBox.AddTreasureBoxState
// 0x000C (0x000C - 0x0000)
struct GameDataFixTreasureBox_AddTreasureBoxState final
{
public:
	class FName                                   FiledObjectID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpen_0;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFixTreasureBox_AddTreasureBoxState) == 0x000004, "Wrong alignment on GameDataFixTreasureBox_AddTreasureBoxState");
static_assert(sizeof(GameDataFixTreasureBox_AddTreasureBoxState) == 0x00000C, "Wrong size on GameDataFixTreasureBox_AddTreasureBoxState");
static_assert(offsetof(GameDataFixTreasureBox_AddTreasureBoxState, FiledObjectID) == 0x000000, "Member 'GameDataFixTreasureBox_AddTreasureBoxState::FiledObjectID' has a wrong offset!");
static_assert(offsetof(GameDataFixTreasureBox_AddTreasureBoxState, IsOpen_0) == 0x000008, "Member 'GameDataFixTreasureBox_AddTreasureBoxState::IsOpen_0' has a wrong offset!");

// Function DarwinGame.GameDataFixTreasureBox.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataFixTreasureBox_Clone final
{
public:
	class UGameDataFixTreasureBox*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataFixTreasureBox_Clone) == 0x000008, "Wrong alignment on GameDataFixTreasureBox_Clone");
static_assert(sizeof(GameDataFixTreasureBox_Clone) == 0x000008, "Wrong size on GameDataFixTreasureBox_Clone");
static_assert(offsetof(GameDataFixTreasureBox_Clone, ReturnValue) == 0x000000, "Member 'GameDataFixTreasureBox_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFixTreasureBox.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataFixTreasureBox_Overwrite final
{
public:
	class UGameDataFixTreasureBox*                GameData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataFixTreasureBox_Overwrite) == 0x000008, "Wrong alignment on GameDataFixTreasureBox_Overwrite");
static_assert(sizeof(GameDataFixTreasureBox_Overwrite) == 0x000008, "Wrong size on GameDataFixTreasureBox_Overwrite");
static_assert(offsetof(GameDataFixTreasureBox_Overwrite, GameData) == 0x000000, "Member 'GameDataFixTreasureBox_Overwrite::GameData' has a wrong offset!");

// Function DarwinGame.GameDataFixTreasureBox.IsExistData
// 0x000C (0x000C - 0x0000)
struct GameDataFixTreasureBox_IsExistData final
{
public:
	class FName                                   FiledObjectID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFixTreasureBox_IsExistData) == 0x000004, "Wrong alignment on GameDataFixTreasureBox_IsExistData");
static_assert(sizeof(GameDataFixTreasureBox_IsExistData) == 0x00000C, "Wrong size on GameDataFixTreasureBox_IsExistData");
static_assert(offsetof(GameDataFixTreasureBox_IsExistData, FiledObjectID) == 0x000000, "Member 'GameDataFixTreasureBox_IsExistData::FiledObjectID' has a wrong offset!");
static_assert(offsetof(GameDataFixTreasureBox_IsExistData, ReturnValue) == 0x000008, "Member 'GameDataFixTreasureBox_IsExistData::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFixTreasureBox.IsOpen
// 0x000C (0x000C - 0x0000)
struct GameDataFixTreasureBox_IsOpen final
{
public:
	class FName                                   FiledObjectID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFixTreasureBox_IsOpen) == 0x000004, "Wrong alignment on GameDataFixTreasureBox_IsOpen");
static_assert(sizeof(GameDataFixTreasureBox_IsOpen) == 0x00000C, "Wrong size on GameDataFixTreasureBox_IsOpen");
static_assert(offsetof(GameDataFixTreasureBox_IsOpen, FiledObjectID) == 0x000000, "Member 'GameDataFixTreasureBox_IsOpen::FiledObjectID' has a wrong offset!");
static_assert(offsetof(GameDataFixTreasureBox_IsOpen, ReturnValue) == 0x000008, "Member 'GameDataFixTreasureBox_IsOpen::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFlag.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataFlag_Clone final
{
public:
	class UGameDataFlag*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataFlag_Clone) == 0x000008, "Wrong alignment on GameDataFlag_Clone");
static_assert(sizeof(GameDataFlag_Clone) == 0x000008, "Wrong size on GameDataFlag_Clone");
static_assert(offsetof(GameDataFlag_Clone, ReturnValue) == 0x000000, "Member 'GameDataFlag_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFlag.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataFlag_Overwrite final
{
public:
	class UGameDataFlag*                          game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataFlag_Overwrite) == 0x000008, "Wrong alignment on GameDataFlag_Overwrite");
static_assert(sizeof(GameDataFlag_Overwrite) == 0x000008, "Wrong size on GameDataFlag_Overwrite");
static_assert(offsetof(GameDataFlag_Overwrite, game_data) == 0x000000, "Member 'GameDataFlag_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataFlag.SetFlag
// 0x000C (0x000C - 0x0000)
struct GameDataFlag_SetFlag final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetFlag_0;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFlag_SetFlag) == 0x000004, "Wrong alignment on GameDataFlag_SetFlag");
static_assert(sizeof(GameDataFlag_SetFlag) == 0x00000C, "Wrong size on GameDataFlag_SetFlag");
static_assert(offsetof(GameDataFlag_SetFlag, FlagName) == 0x000000, "Member 'GameDataFlag_SetFlag::FlagName' has a wrong offset!");
static_assert(offsetof(GameDataFlag_SetFlag, SetFlag_0) == 0x000008, "Member 'GameDataFlag_SetFlag::SetFlag_0' has a wrong offset!");

// Function DarwinGame.GameDataFlag.GetFlag
// 0x000C (0x000C - 0x0000)
struct GameDataFlag_GetFlag final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFlag_GetFlag) == 0x000004, "Wrong alignment on GameDataFlag_GetFlag");
static_assert(sizeof(GameDataFlag_GetFlag) == 0x00000C, "Wrong size on GameDataFlag_GetFlag");
static_assert(offsetof(GameDataFlag_GetFlag, FlagName) == 0x000000, "Member 'GameDataFlag_GetFlag::FlagName' has a wrong offset!");
static_assert(offsetof(GameDataFlag_GetFlag, ReturnValue) == 0x000008, "Member 'GameDataFlag_GetFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFunctionLibrary.CheckFlagDefinition
// 0x000C (0x000C - 0x0000)
struct GameDataFunctionLibrary_CheckFlagDefinition final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFunctionLibrary_CheckFlagDefinition) == 0x000004, "Wrong alignment on GameDataFunctionLibrary_CheckFlagDefinition");
static_assert(sizeof(GameDataFunctionLibrary_CheckFlagDefinition) == 0x00000C, "Wrong size on GameDataFunctionLibrary_CheckFlagDefinition");
static_assert(offsetof(GameDataFunctionLibrary_CheckFlagDefinition, FlagName) == 0x000000, "Member 'GameDataFunctionLibrary_CheckFlagDefinition::FlagName' has a wrong offset!");
static_assert(offsetof(GameDataFunctionLibrary_CheckFlagDefinition, ReturnValue) == 0x000008, "Member 'GameDataFunctionLibrary_CheckFlagDefinition::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFunctionLibrary.CheckFlagDefinitions
// 0x0018 (0x0018 - 0x0000)
struct GameDataFunctionLibrary_CheckFlagDefinitions final
{
public:
	TArray<class FName>                           FlagNames;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          or_check;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFunctionLibrary_CheckFlagDefinitions) == 0x000008, "Wrong alignment on GameDataFunctionLibrary_CheckFlagDefinitions");
static_assert(sizeof(GameDataFunctionLibrary_CheckFlagDefinitions) == 0x000018, "Wrong size on GameDataFunctionLibrary_CheckFlagDefinitions");
static_assert(offsetof(GameDataFunctionLibrary_CheckFlagDefinitions, FlagNames) == 0x000000, "Member 'GameDataFunctionLibrary_CheckFlagDefinitions::FlagNames' has a wrong offset!");
static_assert(offsetof(GameDataFunctionLibrary_CheckFlagDefinitions, or_check) == 0x000010, "Member 'GameDataFunctionLibrary_CheckFlagDefinitions::or_check' has a wrong offset!");
static_assert(offsetof(GameDataFunctionLibrary_CheckFlagDefinitions, ReturnValue) == 0x000011, "Member 'GameDataFunctionLibrary_CheckFlagDefinitions::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataFunctionLibrary.CheckFlagMatch
// 0x0058 (0x0058 - 0x0000)
struct GameDataFunctionLibrary_CheckFlagMatch final
{
public:
	TMap<class FName, bool>                       FlagNames;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataFunctionLibrary_CheckFlagMatch) == 0x000008, "Wrong alignment on GameDataFunctionLibrary_CheckFlagMatch");
static_assert(sizeof(GameDataFunctionLibrary_CheckFlagMatch) == 0x000058, "Wrong size on GameDataFunctionLibrary_CheckFlagMatch");
static_assert(offsetof(GameDataFunctionLibrary_CheckFlagMatch, FlagNames) == 0x000000, "Member 'GameDataFunctionLibrary_CheckFlagMatch::FlagNames' has a wrong offset!");
static_assert(offsetof(GameDataFunctionLibrary_CheckFlagMatch, ReturnValue) == 0x000050, "Member 'GameDataFunctionLibrary_CheckFlagMatch::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_Clone final
{
public:
	class UGameDataGuest*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_Clone) == 0x000008, "Wrong alignment on GameDataGuest_Clone");
static_assert(sizeof(GameDataGuest_Clone) == 0x000008, "Wrong size on GameDataGuest_Clone");
static_assert(offsetof(GameDataGuest_Clone, ReturnValue) == 0x000000, "Member 'GameDataGuest_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetConstValue_GuestMonsterLoopRange
// 0x000C (0x000C - 0x0000)
struct GameDataGuest_GetConstValue_GuestMonsterLoopRange final
{
public:
	EGuestType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         first;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         last;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetConstValue_GuestMonsterLoopRange) == 0x000004, "Wrong alignment on GameDataGuest_GetConstValue_GuestMonsterLoopRange");
static_assert(sizeof(GameDataGuest_GetConstValue_GuestMonsterLoopRange) == 0x00000C, "Wrong size on GameDataGuest_GetConstValue_GuestMonsterLoopRange");
static_assert(offsetof(GameDataGuest_GetConstValue_GuestMonsterLoopRange, Type) == 0x000000, "Member 'GameDataGuest_GetConstValue_GuestMonsterLoopRange::Type' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetConstValue_GuestMonsterLoopRange, first) == 0x000004, "Member 'GameDataGuest_GetConstValue_GuestMonsterLoopRange::first' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetConstValue_GuestMonsterLoopRange, last) == 0x000008, "Member 'GameDataGuest_GetConstValue_GuestMonsterLoopRange::last' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetGuestMonsterHp
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_GetGuestMonsterHp final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetGuestMonsterHp) == 0x000004, "Wrong alignment on GameDataGuest_GetGuestMonsterHp");
static_assert(sizeof(GameDataGuest_GetGuestMonsterHp) == 0x000008, "Wrong size on GameDataGuest_GetGuestMonsterHp");
static_assert(offsetof(GameDataGuest_GetGuestMonsterHp, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_GetGuestMonsterHp::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetGuestMonsterHp, ReturnValue) == 0x000004, "Member 'GameDataGuest_GetGuestMonsterHp::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetGuestMonsterKindId
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_GetGuestMonsterKindId final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetGuestMonsterKindId) == 0x000004, "Wrong alignment on GameDataGuest_GetGuestMonsterKindId");
static_assert(sizeof(GameDataGuest_GetGuestMonsterKindId) == 0x000008, "Wrong size on GameDataGuest_GetGuestMonsterKindId");
static_assert(offsetof(GameDataGuest_GetGuestMonsterKindId, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_GetGuestMonsterKindId::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetGuestMonsterKindId, ReturnValue) == 0x000004, "Member 'GameDataGuest_GetGuestMonsterKindId::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetGuestMonsterLevel
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_GetGuestMonsterLevel final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetGuestMonsterLevel) == 0x000004, "Wrong alignment on GameDataGuest_GetGuestMonsterLevel");
static_assert(sizeof(GameDataGuest_GetGuestMonsterLevel) == 0x000008, "Wrong size on GameDataGuest_GetGuestMonsterLevel");
static_assert(offsetof(GameDataGuest_GetGuestMonsterLevel, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_GetGuestMonsterLevel::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetGuestMonsterLevel, ReturnValue) == 0x000004, "Member 'GameDataGuest_GetGuestMonsterLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetGuestMonsterMp
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_GetGuestMonsterMp final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetGuestMonsterMp) == 0x000004, "Wrong alignment on GameDataGuest_GetGuestMonsterMp");
static_assert(sizeof(GameDataGuest_GetGuestMonsterMp) == 0x000008, "Wrong size on GameDataGuest_GetGuestMonsterMp");
static_assert(offsetof(GameDataGuest_GetGuestMonsterMp, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_GetGuestMonsterMp::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetGuestMonsterMp, ReturnValue) == 0x000004, "Member 'GameDataGuest_GetGuestMonsterMp::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetGuestMonsterNickName
// 0x0020 (0x0020 - 0x0000)
struct GameDataGuest_GetGuestMonsterNickName final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetGuestMonsterNickName) == 0x000008, "Wrong alignment on GameDataGuest_GetGuestMonsterNickName");
static_assert(sizeof(GameDataGuest_GetGuestMonsterNickName) == 0x000020, "Wrong size on GameDataGuest_GetGuestMonsterNickName");
static_assert(offsetof(GameDataGuest_GetGuestMonsterNickName, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_GetGuestMonsterNickName::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetGuestMonsterNickName, ReturnValue) == 0x000008, "Member 'GameDataGuest_GetGuestMonsterNickName::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.IsMainGuestMonsterIndex
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_IsMainGuestMonsterIndex final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataGuest_IsMainGuestMonsterIndex) == 0x000004, "Wrong alignment on GameDataGuest_IsMainGuestMonsterIndex");
static_assert(sizeof(GameDataGuest_IsMainGuestMonsterIndex) == 0x000008, "Wrong size on GameDataGuest_IsMainGuestMonsterIndex");
static_assert(offsetof(GameDataGuest_IsMainGuestMonsterIndex, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_IsMainGuestMonsterIndex::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_IsMainGuestMonsterIndex, ReturnValue) == 0x000004, "Member 'GameDataGuest_IsMainGuestMonsterIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_Overwrite final
{
public:
	class UGameDataGuest*                         game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_Overwrite) == 0x000008, "Wrong alignment on GameDataGuest_Overwrite");
static_assert(sizeof(GameDataGuest_Overwrite) == 0x000008, "Wrong size on GameDataGuest_Overwrite");
static_assert(offsetof(GameDataGuest_Overwrite, game_data) == 0x000000, "Member 'GameDataGuest_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataGuest.Remove
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_Remove final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_Remove) == 0x000004, "Wrong alignment on GameDataGuest_Remove");
static_assert(sizeof(GameDataGuest_Remove) == 0x000008, "Wrong size on GameDataGuest_Remove");
static_assert(offsetof(GameDataGuest_Remove, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_Remove::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_Remove, ReturnValue) == 0x000004, "Member 'GameDataGuest_Remove::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.SetGuestMonsterHp
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_SetGuestMonsterHp final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_SetGuestMonsterHp) == 0x000004, "Wrong alignment on GameDataGuest_SetGuestMonsterHp");
static_assert(sizeof(GameDataGuest_SetGuestMonsterHp) == 0x000008, "Wrong size on GameDataGuest_SetGuestMonsterHp");
static_assert(offsetof(GameDataGuest_SetGuestMonsterHp, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_SetGuestMonsterHp::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_SetGuestMonsterHp, HP) == 0x000004, "Member 'GameDataGuest_SetGuestMonsterHp::HP' has a wrong offset!");

// Function DarwinGame.GameDataGuest.SetGuestMonsterKindId
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_SetGuestMonsterKindId final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_SetGuestMonsterKindId) == 0x000004, "Wrong alignment on GameDataGuest_SetGuestMonsterKindId");
static_assert(sizeof(GameDataGuest_SetGuestMonsterKindId) == 0x000008, "Wrong size on GameDataGuest_SetGuestMonsterKindId");
static_assert(offsetof(GameDataGuest_SetGuestMonsterKindId, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_SetGuestMonsterKindId::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_SetGuestMonsterKindId, KindId) == 0x000004, "Member 'GameDataGuest_SetGuestMonsterKindId::KindId' has a wrong offset!");

// Function DarwinGame.GameDataGuest.SetGuestMonsterLevel
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_SetGuestMonsterLevel final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_SetGuestMonsterLevel) == 0x000004, "Wrong alignment on GameDataGuest_SetGuestMonsterLevel");
static_assert(sizeof(GameDataGuest_SetGuestMonsterLevel) == 0x000008, "Wrong size on GameDataGuest_SetGuestMonsterLevel");
static_assert(offsetof(GameDataGuest_SetGuestMonsterLevel, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_SetGuestMonsterLevel::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_SetGuestMonsterLevel, Level) == 0x000004, "Member 'GameDataGuest_SetGuestMonsterLevel::Level' has a wrong offset!");

// Function DarwinGame.GameDataGuest.SetGuestMonsterMp
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_SetGuestMonsterMp final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_SetGuestMonsterMp) == 0x000004, "Wrong alignment on GameDataGuest_SetGuestMonsterMp");
static_assert(sizeof(GameDataGuest_SetGuestMonsterMp) == 0x000008, "Wrong size on GameDataGuest_SetGuestMonsterMp");
static_assert(offsetof(GameDataGuest_SetGuestMonsterMp, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_SetGuestMonsterMp::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_SetGuestMonsterMp, MP) == 0x000004, "Member 'GameDataGuest_SetGuestMonsterMp::MP' has a wrong offset!");

// Function DarwinGame.GameDataGuest.SetGuestMonsterNickName
// 0x0020 (0x0020 - 0x0000)
struct GameDataGuest_SetGuestMonsterNickName final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NickName;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_SetGuestMonsterNickName) == 0x000008, "Wrong alignment on GameDataGuest_SetGuestMonsterNickName");
static_assert(sizeof(GameDataGuest_SetGuestMonsterNickName) == 0x000020, "Wrong size on GameDataGuest_SetGuestMonsterNickName");
static_assert(offsetof(GameDataGuest_SetGuestMonsterNickName, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_SetGuestMonsterNickName::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_SetGuestMonsterNickName, NickName) == 0x000008, "Member 'GameDataGuest_SetGuestMonsterNickName::NickName' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetMainGuestMax
// 0x0004 (0x0004 - 0x0000)
struct GameDataGuest_GetMainGuestMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetMainGuestMax) == 0x000004, "Wrong alignment on GameDataGuest_GetMainGuestMax");
static_assert(sizeof(GameDataGuest_GetMainGuestMax) == 0x000004, "Wrong size on GameDataGuest_GetMainGuestMax");
static_assert(offsetof(GameDataGuest_GetMainGuestMax, ReturnValue) == 0x000000, "Member 'GameDataGuest_GetMainGuestMax::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetMax
// 0x0004 (0x0004 - 0x0000)
struct GameDataGuest_GetMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetMax) == 0x000004, "Wrong alignment on GameDataGuest_GetMax");
static_assert(sizeof(GameDataGuest_GetMax) == 0x000004, "Wrong size on GameDataGuest_GetMax");
static_assert(offsetof(GameDataGuest_GetMax, ReturnValue) == 0x000000, "Member 'GameDataGuest_GetMax::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.GetNumKind
// 0x000C (0x000C - 0x0000)
struct GameDataGuest_GetNumKind final
{
public:
	int32                                         KindId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuestType                                    guestType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_GetNumKind) == 0x000004, "Wrong alignment on GameDataGuest_GetNumKind");
static_assert(sizeof(GameDataGuest_GetNumKind) == 0x00000C, "Wrong size on GameDataGuest_GetNumKind");
static_assert(offsetof(GameDataGuest_GetNumKind, KindId) == 0x000000, "Member 'GameDataGuest_GetNumKind::KindId' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetNumKind, guestType) == 0x000004, "Member 'GameDataGuest_GetNumKind::guestType' has a wrong offset!");
static_assert(offsetof(GameDataGuest_GetNumKind, ReturnValue) == 0x000008, "Member 'GameDataGuest_GetNumKind::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.IsEmptySlot
// 0x0008 (0x0008 - 0x0000)
struct GameDataGuest_IsEmptySlot final
{
public:
	int32                                         globalGuestIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataGuest_IsEmptySlot) == 0x000004, "Wrong alignment on GameDataGuest_IsEmptySlot");
static_assert(sizeof(GameDataGuest_IsEmptySlot) == 0x000008, "Wrong size on GameDataGuest_IsEmptySlot");
static_assert(offsetof(GameDataGuest_IsEmptySlot, globalGuestIndex) == 0x000000, "Member 'GameDataGuest_IsEmptySlot::globalGuestIndex' has a wrong offset!");
static_assert(offsetof(GameDataGuest_IsEmptySlot, ReturnValue) == 0x000004, "Member 'GameDataGuest_IsEmptySlot::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataGuest.IsMax
// 0x0002 (0x0002 - 0x0000)
struct GameDataGuest_IsMax final
{
public:
	EGuestType                                    guestType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGuest_IsMax) == 0x000001, "Wrong alignment on GameDataGuest_IsMax");
static_assert(sizeof(GameDataGuest_IsMax) == 0x000002, "Wrong size on GameDataGuest_IsMax");
static_assert(offsetof(GameDataGuest_IsMax, guestType) == 0x000000, "Member 'GameDataGuest_IsMax::guestType' has a wrong offset!");
static_assert(offsetof(GameDataGuest_IsMax, ReturnValue) == 0x000001, "Member 'GameDataGuest_IsMax::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHeader.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataHeader_Clone final
{
public:
	class UGameDataHeader*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHeader_Clone) == 0x000008, "Wrong alignment on GameDataHeader_Clone");
static_assert(sizeof(GameDataHeader_Clone) == 0x000008, "Wrong size on GameDataHeader_Clone");
static_assert(offsetof(GameDataHeader_Clone, ReturnValue) == 0x000000, "Member 'GameDataHeader_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataHeader.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataHeader_Overwrite final
{
public:
	class UGameDataHeader*                        game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataHeader_Overwrite) == 0x000008, "Wrong alignment on GameDataHeader_Overwrite");
static_assert(sizeof(GameDataHeader_Overwrite) == 0x000008, "Wrong size on GameDataHeader_Overwrite");
static_assert(offsetof(GameDataHeader_Overwrite, game_data) == 0x000000, "Member 'GameDataHeader_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct GameDataManager_GetInstance final
{
public:
	class UGameDataManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataManager_GetInstance) == 0x000008, "Wrong alignment on GameDataManager_GetInstance");
static_assert(sizeof(GameDataManager_GetInstance) == 0x000008, "Wrong size on GameDataManager_GetInstance");
static_assert(offsetof(GameDataManager_GetInstance, ReturnValue) == 0x000000, "Member 'GameDataManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataManager.GetGameDatabase
// 0x0008 (0x0008 - 0x0000)
struct GameDataManager_GetGameDatabase final
{
public:
	class UGameDatabase*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataManager_GetGameDatabase) == 0x000008, "Wrong alignment on GameDataManager_GetGameDatabase");
static_assert(sizeof(GameDataManager_GetGameDatabase) == 0x000008, "Wrong size on GameDataManager_GetGameDatabase");
static_assert(offsetof(GameDataManager_GetGameDatabase, ReturnValue) == 0x000000, "Member 'GameDataManager_GetGameDatabase::ReturnValue' has a wrong offset!");

// Function DarwinGame.ProjectHttpManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct ProjectHttpManager_GetInstance final
{
public:
	class UProjectHttpManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectHttpManager_GetInstance) == 0x000008, "Wrong alignment on ProjectHttpManager_GetInstance");
static_assert(sizeof(ProjectHttpManager_GetInstance) == 0x000008, "Wrong size on ProjectHttpManager_GetInstance");
static_assert(offsetof(ProjectHttpManager_GetInstance, ReturnValue) == 0x000000, "Member 'ProjectHttpManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.ProjectHttpManager.IsTermsAccepted
// 0x0001 (0x0001 - 0x0000)
struct ProjectHttpManager_IsTermsAccepted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectHttpManager_IsTermsAccepted) == 0x000001, "Wrong alignment on ProjectHttpManager_IsTermsAccepted");
static_assert(sizeof(ProjectHttpManager_IsTermsAccepted) == 0x000001, "Wrong size on ProjectHttpManager_IsTermsAccepted");
static_assert(offsetof(ProjectHttpManager_IsTermsAccepted, ReturnValue) == 0x000000, "Member 'ProjectHttpManager_IsTermsAccepted::ReturnValue' has a wrong offset!");

// Function DarwinGame.ProjectHttpManager.IsTermsFirstLook
// 0x0001 (0x0001 - 0x0000)
struct ProjectHttpManager_IsTermsFirstLook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectHttpManager_IsTermsFirstLook) == 0x000001, "Wrong alignment on ProjectHttpManager_IsTermsFirstLook");
static_assert(sizeof(ProjectHttpManager_IsTermsFirstLook) == 0x000001, "Wrong size on ProjectHttpManager_IsTermsFirstLook");
static_assert(offsetof(ProjectHttpManager_IsTermsFirstLook, ReturnValue) == 0x000000, "Member 'ProjectHttpManager_IsTermsFirstLook::ReturnValue' has a wrong offset!");

// Function DarwinGame.ProjectHttpManager.IsTermsLooked
// 0x0001 (0x0001 - 0x0000)
struct ProjectHttpManager_IsTermsLooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectHttpManager_IsTermsLooked) == 0x000001, "Wrong alignment on ProjectHttpManager_IsTermsLooked");
static_assert(sizeof(ProjectHttpManager_IsTermsLooked) == 0x000001, "Wrong size on ProjectHttpManager_IsTermsLooked");
static_assert(offsetof(ProjectHttpManager_IsTermsLooked, ReturnValue) == 0x000000, "Member 'ProjectHttpManager_IsTermsLooked::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataMyTeam.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataMyTeam_Clone final
{
public:
	class UGameDataMyTeam*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataMyTeam_Clone) == 0x000008, "Wrong alignment on GameDataMyTeam_Clone");
static_assert(sizeof(GameDataMyTeam_Clone) == 0x000008, "Wrong size on GameDataMyTeam_Clone");
static_assert(offsetof(GameDataMyTeam_Clone, ReturnValue) == 0x000000, "Member 'GameDataMyTeam_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataMyTeam.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataMyTeam_Overwrite final
{
public:
	class UGameDataMyTeam*                        game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataMyTeam_Overwrite) == 0x000008, "Wrong alignment on GameDataMyTeam_Overwrite");
static_assert(sizeof(GameDataMyTeam_Overwrite) == 0x000008, "Wrong size on GameDataMyTeam_Overwrite");
static_assert(offsetof(GameDataMyTeam_Overwrite, game_data) == 0x000000, "Member 'GameDataMyTeam_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataMyTeam.SetTeamFlagID
// 0x0004 (0x0004 - 0x0000)
struct GameDataMyTeam_SetTeamFlagID final
{
public:
	int32                                         FlagId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataMyTeam_SetTeamFlagID) == 0x000004, "Wrong alignment on GameDataMyTeam_SetTeamFlagID");
static_assert(sizeof(GameDataMyTeam_SetTeamFlagID) == 0x000004, "Wrong size on GameDataMyTeam_SetTeamFlagID");
static_assert(offsetof(GameDataMyTeam_SetTeamFlagID, FlagId) == 0x000000, "Member 'GameDataMyTeam_SetTeamFlagID::FlagId' has a wrong offset!");

// Function DarwinGame.GameDataNetwork.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataNetwork_Clone final
{
public:
	class UGameDataNetwork*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataNetwork_Clone) == 0x000008, "Wrong alignment on GameDataNetwork_Clone");
static_assert(sizeof(GameDataNetwork_Clone) == 0x000008, "Wrong size on GameDataNetwork_Clone");
static_assert(offsetof(GameDataNetwork_Clone, ReturnValue) == 0x000000, "Member 'GameDataNetwork_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataNetwork.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataNetwork_Overwrite final
{
public:
	class UGameDataNetwork*                       game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataNetwork_Overwrite) == 0x000008, "Wrong alignment on GameDataNetwork_Overwrite");
static_assert(sizeof(GameDataNetwork_Overwrite) == 0x000008, "Wrong size on GameDataNetwork_Overwrite");
static_assert(offsetof(GameDataNetwork_Overwrite, game_data) == 0x000000, "Member 'GameDataNetwork_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataOption.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataOption_Clone final
{
public:
	class UGameDataOption*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_Clone) == 0x000008, "Wrong alignment on GameDataOption_Clone");
static_assert(sizeof(GameDataOption_Clone) == 0x000008, "Wrong size on GameDataOption_Clone");
static_assert(offsetof(GameDataOption_Clone, ReturnValue) == 0x000000, "Member 'GameDataOption_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataOption_Overwrite final
{
public:
	class UGameDataOption*                        game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_Overwrite) == 0x000008, "Wrong alignment on GameDataOption_Overwrite");
static_assert(sizeof(GameDataOption_Overwrite) == 0x000008, "Wrong size on GameDataOption_Overwrite");
static_assert(offsetof(GameDataOption_Overwrite, game_data) == 0x000000, "Member 'GameDataOption_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetAmbientValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetAmbientValue final
{
public:
	EOptionAmbient                                InAmbientValue;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetAmbientValue) == 0x000001, "Wrong alignment on GameDataOption_SetAmbientValue");
static_assert(sizeof(GameDataOption_SetAmbientValue) == 0x000001, "Wrong size on GameDataOption_SetAmbientValue");
static_assert(offsetof(GameDataOption_SetAmbientValue, InAmbientValue) == 0x000000, "Member 'GameDataOption_SetAmbientValue::InAmbientValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetAntialiasingValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetAntialiasingValue final
{
public:
	EOptionAntialiasing                           InAntialiasingValue;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetAntialiasingValue) == 0x000001, "Wrong alignment on GameDataOption_SetAntialiasingValue");
static_assert(sizeof(GameDataOption_SetAntialiasingValue) == 0x000001, "Wrong size on GameDataOption_SetAntialiasingValue");
static_assert(offsetof(GameDataOption_SetAntialiasingValue, InAntialiasingValue) == 0x000000, "Member 'GameDataOption_SetAntialiasingValue::InAntialiasingValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetBGMVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetBGMVolume final
{
public:
	EOptionSoundVolume                            InBGMVolume;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetBGMVolume) == 0x000001, "Wrong alignment on GameDataOption_SetBGMVolume");
static_assert(sizeof(GameDataOption_SetBGMVolume) == 0x000001, "Wrong size on GameDataOption_SetBGMVolume");
static_assert(offsetof(GameDataOption_SetBGMVolume, InBGMVolume) == 0x000000, "Member 'GameDataOption_SetBGMVolume::InBGMVolume' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetBloomValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetBloomValue final
{
public:
	EOptionBloom                                  InBloomValue;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetBloomValue) == 0x000001, "Wrong alignment on GameDataOption_SetBloomValue");
static_assert(sizeof(GameDataOption_SetBloomValue) == 0x000001, "Wrong size on GameDataOption_SetBloomValue");
static_assert(offsetof(GameDataOption_SetBloomValue, InBloomValue) == 0x000000, "Member 'GameDataOption_SetBloomValue::InBloomValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetBrightnessVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetBrightnessVolume final
{
public:
	EOptionBrightness                             InBrightnesVolum;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetBrightnessVolume) == 0x000001, "Wrong alignment on GameDataOption_SetBrightnessVolume");
static_assert(sizeof(GameDataOption_SetBrightnessVolume) == 0x000001, "Wrong size on GameDataOption_SetBrightnessVolume");
static_assert(offsetof(GameDataOption_SetBrightnessVolume, InBrightnesVolum) == 0x000000, "Member 'GameDataOption_SetBrightnessVolume::InBrightnesVolum' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetCameraLeftRightIsNormal
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetCameraLeftRightIsNormal final
{
public:
	bool                                          InCameraLeftRightIsNormal;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetCameraLeftRightIsNormal) == 0x000001, "Wrong alignment on GameDataOption_SetCameraLeftRightIsNormal");
static_assert(sizeof(GameDataOption_SetCameraLeftRightIsNormal) == 0x000001, "Wrong size on GameDataOption_SetCameraLeftRightIsNormal");
static_assert(offsetof(GameDataOption_SetCameraLeftRightIsNormal, InCameraLeftRightIsNormal) == 0x000000, "Member 'GameDataOption_SetCameraLeftRightIsNormal::InCameraLeftRightIsNormal' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetCameraLeftRightSpeed
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetCameraLeftRightSpeed final
{
public:
	ECameraYawRotateSpeedRatePolicy               InCameraLeftRightSpeed;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetCameraLeftRightSpeed) == 0x000001, "Wrong alignment on GameDataOption_SetCameraLeftRightSpeed");
static_assert(sizeof(GameDataOption_SetCameraLeftRightSpeed) == 0x000001, "Wrong size on GameDataOption_SetCameraLeftRightSpeed");
static_assert(offsetof(GameDataOption_SetCameraLeftRightSpeed, InCameraLeftRightSpeed) == 0x000000, "Member 'GameDataOption_SetCameraLeftRightSpeed::InCameraLeftRightSpeed' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetCameraUpDownIsNormal
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetCameraUpDownIsNormal final
{
public:
	bool                                          InCameraUpDownIsNormal;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetCameraUpDownIsNormal) == 0x000001, "Wrong alignment on GameDataOption_SetCameraUpDownIsNormal");
static_assert(sizeof(GameDataOption_SetCameraUpDownIsNormal) == 0x000001, "Wrong size on GameDataOption_SetCameraUpDownIsNormal");
static_assert(offsetof(GameDataOption_SetCameraUpDownIsNormal, InCameraUpDownIsNormal) == 0x000000, "Member 'GameDataOption_SetCameraUpDownIsNormal::InCameraUpDownIsNormal' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetCameraUpDownSpeed
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetCameraUpDownSpeed final
{
public:
	ECameraPitchRotateSpeedRatePolicy             InCameraUpDownSpeed;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetCameraUpDownSpeed) == 0x000001, "Wrong alignment on GameDataOption_SetCameraUpDownSpeed");
static_assert(sizeof(GameDataOption_SetCameraUpDownSpeed) == 0x000001, "Wrong size on GameDataOption_SetCameraUpDownSpeed");
static_assert(offsetof(GameDataOption_SetCameraUpDownSpeed, InCameraUpDownSpeed) == 0x000000, "Member 'GameDataOption_SetCameraUpDownSpeed::InCameraUpDownSpeed' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetControllerLayout
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetControllerLayout final
{
public:
	ELayoutController                             InControllerLayout;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetControllerLayout) == 0x000001, "Wrong alignment on GameDataOption_SetControllerLayout");
static_assert(sizeof(GameDataOption_SetControllerLayout) == 0x000001, "Wrong size on GameDataOption_SetControllerLayout");
static_assert(offsetof(GameDataOption_SetControllerLayout, InControllerLayout) == 0x000000, "Member 'GameDataOption_SetControllerLayout::InControllerLayout' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetDensityValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetDensityValue final
{
public:
	EOptionDensity                                InDensityValue;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetDensityValue) == 0x000001, "Wrong alignment on GameDataOption_SetDensityValue");
static_assert(sizeof(GameDataOption_SetDensityValue) == 0x000001, "Wrong size on GameDataOption_SetDensityValue");
static_assert(offsetof(GameDataOption_SetDensityValue, InDensityValue) == 0x000000, "Member 'GameDataOption_SetDensityValue::InDensityValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetFpsValue
// 0x0004 (0x0004 - 0x0000)
struct GameDataOption_SetFpsValue final
{
public:
	float                                         InFpsValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetFpsValue) == 0x000004, "Wrong alignment on GameDataOption_SetFpsValue");
static_assert(sizeof(GameDataOption_SetFpsValue) == 0x000004, "Wrong size on GameDataOption_SetFpsValue");
static_assert(offsetof(GameDataOption_SetFpsValue, InFpsValue) == 0x000000, "Member 'GameDataOption_SetFpsValue::InFpsValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetIsMouseAttackMode
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetIsMouseAttackMode final
{
public:
	bool                                          IsMouseAttackMode;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetIsMouseAttackMode) == 0x000001, "Wrong alignment on GameDataOption_SetIsMouseAttackMode");
static_assert(sizeof(GameDataOption_SetIsMouseAttackMode) == 0x000001, "Wrong size on GameDataOption_SetIsMouseAttackMode");
static_assert(offsetof(GameDataOption_SetIsMouseAttackMode, IsMouseAttackMode) == 0x000000, "Member 'GameDataOption_SetIsMouseAttackMode::IsMouseAttackMode' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetIsUsingAController
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetIsUsingAController final
{
public:
	bool                                          IsUsingAController;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetIsUsingAController) == 0x000001, "Wrong alignment on GameDataOption_SetIsUsingAController");
static_assert(sizeof(GameDataOption_SetIsUsingAController) == 0x000001, "Wrong size on GameDataOption_SetIsUsingAController");
static_assert(offsetof(GameDataOption_SetIsUsingAController, IsUsingAController) == 0x000000, "Member 'GameDataOption_SetIsUsingAController::IsUsingAController' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetKeyboardLayout
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetKeyboardLayout final
{
public:
	ELayoutKeyboard                               InKeyboardLayout;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetKeyboardLayout) == 0x000001, "Wrong alignment on GameDataOption_SetKeyboardLayout");
static_assert(sizeof(GameDataOption_SetKeyboardLayout) == 0x000001, "Wrong size on GameDataOption_SetKeyboardLayout");
static_assert(offsetof(GameDataOption_SetKeyboardLayout, InKeyboardLayout) == 0x000000, "Member 'GameDataOption_SetKeyboardLayout::InKeyboardLayout' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetLanguageVoiceType
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetLanguageVoiceType final
{
public:
	ELanguageVoiceType                            InLanguageVoiceType;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetLanguageVoiceType) == 0x000001, "Wrong alignment on GameDataOption_SetLanguageVoiceType");
static_assert(sizeof(GameDataOption_SetLanguageVoiceType) == 0x000001, "Wrong size on GameDataOption_SetLanguageVoiceType");
static_assert(offsetof(GameDataOption_SetLanguageVoiceType, InLanguageVoiceType) == 0x000000, "Member 'GameDataOption_SetLanguageVoiceType::InLanguageVoiceType' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetLODValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetLODValue final
{
public:
	EOptionLOD                                    InLODValue;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetLODValue) == 0x000001, "Wrong alignment on GameDataOption_SetLODValue");
static_assert(sizeof(GameDataOption_SetLODValue) == 0x000001, "Wrong size on GameDataOption_SetLODValue");
static_assert(offsetof(GameDataOption_SetLODValue, InLODValue) == 0x000000, "Member 'GameDataOption_SetLODValue::InLODValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetPresetValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetPresetValue final
{
public:
	EOptionPreset                                 InPresetValue;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetPresetValue) == 0x000001, "Wrong alignment on GameDataOption_SetPresetValue");
static_assert(sizeof(GameDataOption_SetPresetValue) == 0x000001, "Wrong size on GameDataOption_SetPresetValue");
static_assert(offsetof(GameDataOption_SetPresetValue, InPresetValue) == 0x000000, "Member 'GameDataOption_SetPresetValue::InPresetValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetReflectionValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetReflectionValue final
{
public:
	EOptionReflection                             InReflectionValue;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetReflectionValue) == 0x000001, "Wrong alignment on GameDataOption_SetReflectionValue");
static_assert(sizeof(GameDataOption_SetReflectionValue) == 0x000001, "Wrong size on GameDataOption_SetReflectionValue");
static_assert(offsetof(GameDataOption_SetReflectionValue, InReflectionValue) == 0x000000, "Member 'GameDataOption_SetReflectionValue::InReflectionValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetResolutionIndexValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetResolutionIndexValue final
{
public:
	EOptionResolutionIndex                        InResolutionIndexValue;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetResolutionIndexValue) == 0x000001, "Wrong alignment on GameDataOption_SetResolutionIndexValue");
static_assert(sizeof(GameDataOption_SetResolutionIndexValue) == 0x000001, "Wrong size on GameDataOption_SetResolutionIndexValue");
static_assert(offsetof(GameDataOption_SetResolutionIndexValue, InResolutionIndexValue) == 0x000000, "Member 'GameDataOption_SetResolutionIndexValue::InResolutionIndexValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetSEVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetSEVolume final
{
public:
	EOptionSoundVolume                            InSEVolume;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetSEVolume) == 0x000001, "Wrong alignment on GameDataOption_SetSEVolume");
static_assert(sizeof(GameDataOption_SetSEVolume) == 0x000001, "Wrong size on GameDataOption_SetSEVolume");
static_assert(offsetof(GameDataOption_SetSEVolume, InSEVolume) == 0x000000, "Member 'GameDataOption_SetSEVolume::InSEVolume' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetShadowValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetShadowValue final
{
public:
	EOptionShadow                                 InShadowValue;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetShadowValue) == 0x000001, "Wrong alignment on GameDataOption_SetShadowValue");
static_assert(sizeof(GameDataOption_SetShadowValue) == 0x000001, "Wrong size on GameDataOption_SetShadowValue");
static_assert(offsetof(GameDataOption_SetShadowValue, InShadowValue) == 0x000000, "Member 'GameDataOption_SetShadowValue::InShadowValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetSubtitlesIsVisible
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetSubtitlesIsVisible final
{
public:
	bool                                          InSubtitlesIsVisible;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetSubtitlesIsVisible) == 0x000001, "Wrong alignment on GameDataOption_SetSubtitlesIsVisible");
static_assert(sizeof(GameDataOption_SetSubtitlesIsVisible) == 0x000001, "Wrong size on GameDataOption_SetSubtitlesIsVisible");
static_assert(offsetof(GameDataOption_SetSubtitlesIsVisible, InSubtitlesIsVisible) == 0x000000, "Member 'GameDataOption_SetSubtitlesIsVisible::InSubtitlesIsVisible' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetTextureDetailValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetTextureDetailValue final
{
public:
	EOptionGraphicsQuality                        InTextureDetailValue;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetTextureDetailValue) == 0x000001, "Wrong alignment on GameDataOption_SetTextureDetailValue");
static_assert(sizeof(GameDataOption_SetTextureDetailValue) == 0x000001, "Wrong size on GameDataOption_SetTextureDetailValue");
static_assert(offsetof(GameDataOption_SetTextureDetailValue, InTextureDetailValue) == 0x000000, "Member 'GameDataOption_SetTextureDetailValue::InTextureDetailValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetTextureFilterValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetTextureFilterValue final
{
public:
	EOptionGraphicsQuality                        InTextureFilterValue;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetTextureFilterValue) == 0x000001, "Wrong alignment on GameDataOption_SetTextureFilterValue");
static_assert(sizeof(GameDataOption_SetTextureFilterValue) == 0x000001, "Wrong size on GameDataOption_SetTextureFilterValue");
static_assert(offsetof(GameDataOption_SetTextureFilterValue, InTextureFilterValue) == 0x000000, "Member 'GameDataOption_SetTextureFilterValue::InTextureFilterValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetVoiceVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetVoiceVolume final
{
public:
	EOptionSoundVolume                            InVoiceVolum;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetVoiceVolume) == 0x000001, "Wrong alignment on GameDataOption_SetVoiceVolume");
static_assert(sizeof(GameDataOption_SetVoiceVolume) == 0x000001, "Wrong size on GameDataOption_SetVoiceVolume");
static_assert(offsetof(GameDataOption_SetVoiceVolume, InVoiceVolum) == 0x000000, "Member 'GameDataOption_SetVoiceVolume::InVoiceVolum' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetVsyncIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetVsyncIsEnabled final
{
public:
	bool                                          InVysncIsEnabled;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetVsyncIsEnabled) == 0x000001, "Wrong alignment on GameDataOption_SetVsyncIsEnabled");
static_assert(sizeof(GameDataOption_SetVsyncIsEnabled) == 0x000001, "Wrong size on GameDataOption_SetVsyncIsEnabled");
static_assert(offsetof(GameDataOption_SetVsyncIsEnabled, InVysncIsEnabled) == 0x000000, "Member 'GameDataOption_SetVsyncIsEnabled::InVysncIsEnabled' has a wrong offset!");

// Function DarwinGame.GameDataOption.SetWindowModeValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_SetWindowModeValue final
{
public:
	EOptionWindowMode                             InWindowModeValue;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_SetWindowModeValue) == 0x000001, "Wrong alignment on GameDataOption_SetWindowModeValue");
static_assert(sizeof(GameDataOption_SetWindowModeValue) == 0x000001, "Wrong size on GameDataOption_SetWindowModeValue");
static_assert(offsetof(GameDataOption_SetWindowModeValue, InWindowModeValue) == 0x000000, "Member 'GameDataOption_SetWindowModeValue::InWindowModeValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetAmbientValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetAmbientValue final
{
public:
	EOptionAmbient                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetAmbientValue) == 0x000001, "Wrong alignment on GameDataOption_GetAmbientValue");
static_assert(sizeof(GameDataOption_GetAmbientValue) == 0x000001, "Wrong size on GameDataOption_GetAmbientValue");
static_assert(offsetof(GameDataOption_GetAmbientValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetAmbientValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetAntialiasingValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetAntialiasingValue final
{
public:
	EOptionAntialiasing                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetAntialiasingValue) == 0x000001, "Wrong alignment on GameDataOption_GetAntialiasingValue");
static_assert(sizeof(GameDataOption_GetAntialiasingValue) == 0x000001, "Wrong size on GameDataOption_GetAntialiasingValue");
static_assert(offsetof(GameDataOption_GetAntialiasingValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetAntialiasingValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetBGMVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetBGMVolume final
{
public:
	EOptionSoundVolume                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetBGMVolume) == 0x000001, "Wrong alignment on GameDataOption_GetBGMVolume");
static_assert(sizeof(GameDataOption_GetBGMVolume) == 0x000001, "Wrong size on GameDataOption_GetBGMVolume");
static_assert(offsetof(GameDataOption_GetBGMVolume, ReturnValue) == 0x000000, "Member 'GameDataOption_GetBGMVolume::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetBGMVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct GameDataOption_GetBGMVolumeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetBGMVolumeRate) == 0x000004, "Wrong alignment on GameDataOption_GetBGMVolumeRate");
static_assert(sizeof(GameDataOption_GetBGMVolumeRate) == 0x000004, "Wrong size on GameDataOption_GetBGMVolumeRate");
static_assert(offsetof(GameDataOption_GetBGMVolumeRate, ReturnValue) == 0x000000, "Member 'GameDataOption_GetBGMVolumeRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetBloomValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetBloomValue final
{
public:
	EOptionBloom                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetBloomValue) == 0x000001, "Wrong alignment on GameDataOption_GetBloomValue");
static_assert(sizeof(GameDataOption_GetBloomValue) == 0x000001, "Wrong size on GameDataOption_GetBloomValue");
static_assert(offsetof(GameDataOption_GetBloomValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetBloomValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetBrightnessVolumeRate
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetBrightnessVolumeRate final
{
public:
	EOptionBrightness                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetBrightnessVolumeRate) == 0x000001, "Wrong alignment on GameDataOption_GetBrightnessVolumeRate");
static_assert(sizeof(GameDataOption_GetBrightnessVolumeRate) == 0x000001, "Wrong size on GameDataOption_GetBrightnessVolumeRate");
static_assert(offsetof(GameDataOption_GetBrightnessVolumeRate, ReturnValue) == 0x000000, "Member 'GameDataOption_GetBrightnessVolumeRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetCameraLeftRightIsNormal
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetCameraLeftRightIsNormal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetCameraLeftRightIsNormal) == 0x000001, "Wrong alignment on GameDataOption_GetCameraLeftRightIsNormal");
static_assert(sizeof(GameDataOption_GetCameraLeftRightIsNormal) == 0x000001, "Wrong size on GameDataOption_GetCameraLeftRightIsNormal");
static_assert(offsetof(GameDataOption_GetCameraLeftRightIsNormal, ReturnValue) == 0x000000, "Member 'GameDataOption_GetCameraLeftRightIsNormal::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetCameraLeftRightSpeed
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetCameraLeftRightSpeed final
{
public:
	ECameraYawRotateSpeedRatePolicy               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetCameraLeftRightSpeed) == 0x000001, "Wrong alignment on GameDataOption_GetCameraLeftRightSpeed");
static_assert(sizeof(GameDataOption_GetCameraLeftRightSpeed) == 0x000001, "Wrong size on GameDataOption_GetCameraLeftRightSpeed");
static_assert(offsetof(GameDataOption_GetCameraLeftRightSpeed, ReturnValue) == 0x000000, "Member 'GameDataOption_GetCameraLeftRightSpeed::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetCameraUpDownIsNormal
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetCameraUpDownIsNormal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetCameraUpDownIsNormal) == 0x000001, "Wrong alignment on GameDataOption_GetCameraUpDownIsNormal");
static_assert(sizeof(GameDataOption_GetCameraUpDownIsNormal) == 0x000001, "Wrong size on GameDataOption_GetCameraUpDownIsNormal");
static_assert(offsetof(GameDataOption_GetCameraUpDownIsNormal, ReturnValue) == 0x000000, "Member 'GameDataOption_GetCameraUpDownIsNormal::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetCameraUpDownSpeed
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetCameraUpDownSpeed final
{
public:
	ECameraPitchRotateSpeedRatePolicy             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetCameraUpDownSpeed) == 0x000001, "Wrong alignment on GameDataOption_GetCameraUpDownSpeed");
static_assert(sizeof(GameDataOption_GetCameraUpDownSpeed) == 0x000001, "Wrong size on GameDataOption_GetCameraUpDownSpeed");
static_assert(offsetof(GameDataOption_GetCameraUpDownSpeed, ReturnValue) == 0x000000, "Member 'GameDataOption_GetCameraUpDownSpeed::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetControllerLayout
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetControllerLayout final
{
public:
	ELayoutController                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetControllerLayout) == 0x000001, "Wrong alignment on GameDataOption_GetControllerLayout");
static_assert(sizeof(GameDataOption_GetControllerLayout) == 0x000001, "Wrong size on GameDataOption_GetControllerLayout");
static_assert(offsetof(GameDataOption_GetControllerLayout, ReturnValue) == 0x000000, "Member 'GameDataOption_GetControllerLayout::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetDensityValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetDensityValue final
{
public:
	EOptionDensity                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetDensityValue) == 0x000001, "Wrong alignment on GameDataOption_GetDensityValue");
static_assert(sizeof(GameDataOption_GetDensityValue) == 0x000001, "Wrong size on GameDataOption_GetDensityValue");
static_assert(offsetof(GameDataOption_GetDensityValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetDensityValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetFpsValue
// 0x0004 (0x0004 - 0x0000)
struct GameDataOption_GetFpsValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetFpsValue) == 0x000004, "Wrong alignment on GameDataOption_GetFpsValue");
static_assert(sizeof(GameDataOption_GetFpsValue) == 0x000004, "Wrong size on GameDataOption_GetFpsValue");
static_assert(offsetof(GameDataOption_GetFpsValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetFpsValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetIsMouseAttackMode
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetIsMouseAttackMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetIsMouseAttackMode) == 0x000001, "Wrong alignment on GameDataOption_GetIsMouseAttackMode");
static_assert(sizeof(GameDataOption_GetIsMouseAttackMode) == 0x000001, "Wrong size on GameDataOption_GetIsMouseAttackMode");
static_assert(offsetof(GameDataOption_GetIsMouseAttackMode, ReturnValue) == 0x000000, "Member 'GameDataOption_GetIsMouseAttackMode::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetIsUsingAController
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetIsUsingAController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetIsUsingAController) == 0x000001, "Wrong alignment on GameDataOption_GetIsUsingAController");
static_assert(sizeof(GameDataOption_GetIsUsingAController) == 0x000001, "Wrong size on GameDataOption_GetIsUsingAController");
static_assert(offsetof(GameDataOption_GetIsUsingAController, ReturnValue) == 0x000000, "Member 'GameDataOption_GetIsUsingAController::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetKeyboardLayout
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetKeyboardLayout final
{
public:
	ELayoutKeyboard                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetKeyboardLayout) == 0x000001, "Wrong alignment on GameDataOption_GetKeyboardLayout");
static_assert(sizeof(GameDataOption_GetKeyboardLayout) == 0x000001, "Wrong size on GameDataOption_GetKeyboardLayout");
static_assert(offsetof(GameDataOption_GetKeyboardLayout, ReturnValue) == 0x000000, "Member 'GameDataOption_GetKeyboardLayout::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetLanguageVoiceType
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetLanguageVoiceType final
{
public:
	ELanguageVoiceType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetLanguageVoiceType) == 0x000001, "Wrong alignment on GameDataOption_GetLanguageVoiceType");
static_assert(sizeof(GameDataOption_GetLanguageVoiceType) == 0x000001, "Wrong size on GameDataOption_GetLanguageVoiceType");
static_assert(offsetof(GameDataOption_GetLanguageVoiceType, ReturnValue) == 0x000000, "Member 'GameDataOption_GetLanguageVoiceType::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetLODValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetLODValue final
{
public:
	EOptionLOD                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetLODValue) == 0x000001, "Wrong alignment on GameDataOption_GetLODValue");
static_assert(sizeof(GameDataOption_GetLODValue) == 0x000001, "Wrong size on GameDataOption_GetLODValue");
static_assert(offsetof(GameDataOption_GetLODValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetLODValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetPresetValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetPresetValue final
{
public:
	EOptionPreset                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetPresetValue) == 0x000001, "Wrong alignment on GameDataOption_GetPresetValue");
static_assert(sizeof(GameDataOption_GetPresetValue) == 0x000001, "Wrong size on GameDataOption_GetPresetValue");
static_assert(offsetof(GameDataOption_GetPresetValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetPresetValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetReflectionValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetReflectionValue final
{
public:
	EOptionReflection                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetReflectionValue) == 0x000001, "Wrong alignment on GameDataOption_GetReflectionValue");
static_assert(sizeof(GameDataOption_GetReflectionValue) == 0x000001, "Wrong size on GameDataOption_GetReflectionValue");
static_assert(offsetof(GameDataOption_GetReflectionValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetReflectionValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetResolutionIndexValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetResolutionIndexValue final
{
public:
	EOptionResolutionIndex                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetResolutionIndexValue) == 0x000001, "Wrong alignment on GameDataOption_GetResolutionIndexValue");
static_assert(sizeof(GameDataOption_GetResolutionIndexValue) == 0x000001, "Wrong size on GameDataOption_GetResolutionIndexValue");
static_assert(offsetof(GameDataOption_GetResolutionIndexValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetResolutionIndexValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetSEVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetSEVolume final
{
public:
	EOptionSoundVolume                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetSEVolume) == 0x000001, "Wrong alignment on GameDataOption_GetSEVolume");
static_assert(sizeof(GameDataOption_GetSEVolume) == 0x000001, "Wrong size on GameDataOption_GetSEVolume");
static_assert(offsetof(GameDataOption_GetSEVolume, ReturnValue) == 0x000000, "Member 'GameDataOption_GetSEVolume::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetSEVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct GameDataOption_GetSEVolumeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetSEVolumeRate) == 0x000004, "Wrong alignment on GameDataOption_GetSEVolumeRate");
static_assert(sizeof(GameDataOption_GetSEVolumeRate) == 0x000004, "Wrong size on GameDataOption_GetSEVolumeRate");
static_assert(offsetof(GameDataOption_GetSEVolumeRate, ReturnValue) == 0x000000, "Member 'GameDataOption_GetSEVolumeRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetShadowValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetShadowValue final
{
public:
	EOptionShadow                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetShadowValue) == 0x000001, "Wrong alignment on GameDataOption_GetShadowValue");
static_assert(sizeof(GameDataOption_GetShadowValue) == 0x000001, "Wrong size on GameDataOption_GetShadowValue");
static_assert(offsetof(GameDataOption_GetShadowValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetShadowValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetSubtitlesIsVisible
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetSubtitlesIsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetSubtitlesIsVisible) == 0x000001, "Wrong alignment on GameDataOption_GetSubtitlesIsVisible");
static_assert(sizeof(GameDataOption_GetSubtitlesIsVisible) == 0x000001, "Wrong size on GameDataOption_GetSubtitlesIsVisible");
static_assert(offsetof(GameDataOption_GetSubtitlesIsVisible, ReturnValue) == 0x000000, "Member 'GameDataOption_GetSubtitlesIsVisible::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetTextureDetailValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetTextureDetailValue final
{
public:
	EOptionGraphicsQuality                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetTextureDetailValue) == 0x000001, "Wrong alignment on GameDataOption_GetTextureDetailValue");
static_assert(sizeof(GameDataOption_GetTextureDetailValue) == 0x000001, "Wrong size on GameDataOption_GetTextureDetailValue");
static_assert(offsetof(GameDataOption_GetTextureDetailValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetTextureDetailValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetTextureFilterValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetTextureFilterValue final
{
public:
	EOptionGraphicsQuality                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetTextureFilterValue) == 0x000001, "Wrong alignment on GameDataOption_GetTextureFilterValue");
static_assert(sizeof(GameDataOption_GetTextureFilterValue) == 0x000001, "Wrong size on GameDataOption_GetTextureFilterValue");
static_assert(offsetof(GameDataOption_GetTextureFilterValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetTextureFilterValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetVoiceVolume
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetVoiceVolume final
{
public:
	EOptionSoundVolume                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetVoiceVolume) == 0x000001, "Wrong alignment on GameDataOption_GetVoiceVolume");
static_assert(sizeof(GameDataOption_GetVoiceVolume) == 0x000001, "Wrong size on GameDataOption_GetVoiceVolume");
static_assert(offsetof(GameDataOption_GetVoiceVolume, ReturnValue) == 0x000000, "Member 'GameDataOption_GetVoiceVolume::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetVoiceVolumeRate
// 0x0004 (0x0004 - 0x0000)
struct GameDataOption_GetVoiceVolumeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetVoiceVolumeRate) == 0x000004, "Wrong alignment on GameDataOption_GetVoiceVolumeRate");
static_assert(sizeof(GameDataOption_GetVoiceVolumeRate) == 0x000004, "Wrong size on GameDataOption_GetVoiceVolumeRate");
static_assert(offsetof(GameDataOption_GetVoiceVolumeRate, ReturnValue) == 0x000000, "Member 'GameDataOption_GetVoiceVolumeRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetVsyncIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetVsyncIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetVsyncIsEnabled) == 0x000001, "Wrong alignment on GameDataOption_GetVsyncIsEnabled");
static_assert(sizeof(GameDataOption_GetVsyncIsEnabled) == 0x000001, "Wrong size on GameDataOption_GetVsyncIsEnabled");
static_assert(offsetof(GameDataOption_GetVsyncIsEnabled, ReturnValue) == 0x000000, "Member 'GameDataOption_GetVsyncIsEnabled::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataOption.GetWindowModeValue
// 0x0001 (0x0001 - 0x0000)
struct GameDataOption_GetWindowModeValue final
{
public:
	EOptionWindowMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataOption_GetWindowModeValue) == 0x000001, "Wrong alignment on GameDataOption_GetWindowModeValue");
static_assert(sizeof(GameDataOption_GetWindowModeValue) == 0x000001, "Wrong size on GameDataOption_GetWindowModeValue");
static_assert(offsetof(GameDataOption_GetWindowModeValue, ReturnValue) == 0x000000, "Member 'GameDataOption_GetWindowModeValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_Clone final
{
public:
	class UGameDataParty*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_Clone) == 0x000008, "Wrong alignment on GameDataParty_Clone");
static_assert(sizeof(GameDataParty_Clone) == 0x000008, "Wrong size on GameDataParty_Clone");
static_assert(offsetof(GameDataParty_Clone, ReturnValue) == 0x000000, "Member 'GameDataParty_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetClearPartyMonsterUIds
// 0x0010 (0x0010 - 0x0000)
struct GameDataParty_GetClearPartyMonsterUIds final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetClearPartyMonsterUIds) == 0x000008, "Wrong alignment on GameDataParty_GetClearPartyMonsterUIds");
static_assert(sizeof(GameDataParty_GetClearPartyMonsterUIds) == 0x000010, "Wrong size on GameDataParty_GetClearPartyMonsterUIds");
static_assert(offsetof(GameDataParty_GetClearPartyMonsterUIds, ReturnValue) == 0x000000, "Member 'GameDataParty_GetClearPartyMonsterUIds::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetConstValue_PartyMonsterLoopRange
// 0x000C (0x000C - 0x0000)
struct GameDataParty_GetConstValue_PartyMonsterLoopRange final
{
public:
	EPartyType                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         first;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         last;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetConstValue_PartyMonsterLoopRange) == 0x000004, "Wrong alignment on GameDataParty_GetConstValue_PartyMonsterLoopRange");
static_assert(sizeof(GameDataParty_GetConstValue_PartyMonsterLoopRange) == 0x00000C, "Wrong size on GameDataParty_GetConstValue_PartyMonsterLoopRange");
static_assert(offsetof(GameDataParty_GetConstValue_PartyMonsterLoopRange, Type) == 0x000000, "Member 'GameDataParty_GetConstValue_PartyMonsterLoopRange::Type' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetConstValue_PartyMonsterLoopRange, first) == 0x000004, "Member 'GameDataParty_GetConstValue_PartyMonsterLoopRange::first' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetConstValue_PartyMonsterLoopRange, last) == 0x000008, "Member 'GameDataParty_GetConstValue_PartyMonsterLoopRange::last' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetPartyMonsterHp
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_GetPartyMonsterHp final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetPartyMonsterHp) == 0x000004, "Wrong alignment on GameDataParty_GetPartyMonsterHp");
static_assert(sizeof(GameDataParty_GetPartyMonsterHp) == 0x000008, "Wrong size on GameDataParty_GetPartyMonsterHp");
static_assert(offsetof(GameDataParty_GetPartyMonsterHp, globalPartyIndex) == 0x000000, "Member 'GameDataParty_GetPartyMonsterHp::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetPartyMonsterHp, ReturnValue) == 0x000004, "Member 'GameDataParty_GetPartyMonsterHp::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetPartyMonsterKindId
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_GetPartyMonsterKindId final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetPartyMonsterKindId) == 0x000004, "Wrong alignment on GameDataParty_GetPartyMonsterKindId");
static_assert(sizeof(GameDataParty_GetPartyMonsterKindId) == 0x000008, "Wrong size on GameDataParty_GetPartyMonsterKindId");
static_assert(offsetof(GameDataParty_GetPartyMonsterKindId, globalPartyIndex) == 0x000000, "Member 'GameDataParty_GetPartyMonsterKindId::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetPartyMonsterKindId, ReturnValue) == 0x000004, "Member 'GameDataParty_GetPartyMonsterKindId::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetPartyMonsterLevel
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_GetPartyMonsterLevel final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetPartyMonsterLevel) == 0x000004, "Wrong alignment on GameDataParty_GetPartyMonsterLevel");
static_assert(sizeof(GameDataParty_GetPartyMonsterLevel) == 0x000008, "Wrong size on GameDataParty_GetPartyMonsterLevel");
static_assert(offsetof(GameDataParty_GetPartyMonsterLevel, globalPartyIndex) == 0x000000, "Member 'GameDataParty_GetPartyMonsterLevel::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetPartyMonsterLevel, ReturnValue) == 0x000004, "Member 'GameDataParty_GetPartyMonsterLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetPartyMonsterMp
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_GetPartyMonsterMp final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetPartyMonsterMp) == 0x000004, "Wrong alignment on GameDataParty_GetPartyMonsterMp");
static_assert(sizeof(GameDataParty_GetPartyMonsterMp) == 0x000008, "Wrong size on GameDataParty_GetPartyMonsterMp");
static_assert(offsetof(GameDataParty_GetPartyMonsterMp, globalPartyIndex) == 0x000000, "Member 'GameDataParty_GetPartyMonsterMp::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetPartyMonsterMp, ReturnValue) == 0x000004, "Member 'GameDataParty_GetPartyMonsterMp::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetPartyMonsterNickName
// 0x0020 (0x0020 - 0x0000)
struct GameDataParty_GetPartyMonsterNickName final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetPartyMonsterNickName) == 0x000008, "Wrong alignment on GameDataParty_GetPartyMonsterNickName");
static_assert(sizeof(GameDataParty_GetPartyMonsterNickName) == 0x000020, "Wrong size on GameDataParty_GetPartyMonsterNickName");
static_assert(offsetof(GameDataParty_GetPartyMonsterNickName, globalPartyIndex) == 0x000000, "Member 'GameDataParty_GetPartyMonsterNickName::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetPartyMonsterNickName, ReturnValue) == 0x000008, "Member 'GameDataParty_GetPartyMonsterNickName::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_Overwrite final
{
public:
	class UGameDataParty*                         game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_Overwrite) == 0x000008, "Wrong alignment on GameDataParty_Overwrite");
static_assert(sizeof(GameDataParty_Overwrite) == 0x000008, "Wrong size on GameDataParty_Overwrite");
static_assert(offsetof(GameDataParty_Overwrite, game_data) == 0x000000, "Member 'GameDataParty_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataParty.Remove
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_Remove final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_Remove) == 0x000004, "Wrong alignment on GameDataParty_Remove");
static_assert(sizeof(GameDataParty_Remove) == 0x000008, "Wrong size on GameDataParty_Remove");
static_assert(offsetof(GameDataParty_Remove, globalPartyIndex) == 0x000000, "Member 'GameDataParty_Remove::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_Remove, ReturnValue) == 0x000004, "Member 'GameDataParty_Remove::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.SetClearPartyMonsterUIds
// 0x0010 (0x0010 - 0x0000)
struct GameDataParty_SetClearPartyMonsterUIds final
{
public:
	TArray<int32>                                 clearPartyMonsterUids;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_SetClearPartyMonsterUIds) == 0x000008, "Wrong alignment on GameDataParty_SetClearPartyMonsterUIds");
static_assert(sizeof(GameDataParty_SetClearPartyMonsterUIds) == 0x000010, "Wrong size on GameDataParty_SetClearPartyMonsterUIds");
static_assert(offsetof(GameDataParty_SetClearPartyMonsterUIds, clearPartyMonsterUids) == 0x000000, "Member 'GameDataParty_SetClearPartyMonsterUIds::clearPartyMonsterUids' has a wrong offset!");

// Function DarwinGame.GameDataParty.SetPartyMonsterHp
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_SetPartyMonsterHp final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_SetPartyMonsterHp) == 0x000004, "Wrong alignment on GameDataParty_SetPartyMonsterHp");
static_assert(sizeof(GameDataParty_SetPartyMonsterHp) == 0x000008, "Wrong size on GameDataParty_SetPartyMonsterHp");
static_assert(offsetof(GameDataParty_SetPartyMonsterHp, globalPartyIndex) == 0x000000, "Member 'GameDataParty_SetPartyMonsterHp::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_SetPartyMonsterHp, HP) == 0x000004, "Member 'GameDataParty_SetPartyMonsterHp::HP' has a wrong offset!");

// Function DarwinGame.GameDataParty.SetPartyMonsterKindId
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_SetPartyMonsterKindId final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_SetPartyMonsterKindId) == 0x000004, "Wrong alignment on GameDataParty_SetPartyMonsterKindId");
static_assert(sizeof(GameDataParty_SetPartyMonsterKindId) == 0x000008, "Wrong size on GameDataParty_SetPartyMonsterKindId");
static_assert(offsetof(GameDataParty_SetPartyMonsterKindId, globalPartyIndex) == 0x000000, "Member 'GameDataParty_SetPartyMonsterKindId::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_SetPartyMonsterKindId, KindId) == 0x000004, "Member 'GameDataParty_SetPartyMonsterKindId::KindId' has a wrong offset!");

// Function DarwinGame.GameDataParty.SetPartyMonsterLevel
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_SetPartyMonsterLevel final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_SetPartyMonsterLevel) == 0x000004, "Wrong alignment on GameDataParty_SetPartyMonsterLevel");
static_assert(sizeof(GameDataParty_SetPartyMonsterLevel) == 0x000008, "Wrong size on GameDataParty_SetPartyMonsterLevel");
static_assert(offsetof(GameDataParty_SetPartyMonsterLevel, globalPartyIndex) == 0x000000, "Member 'GameDataParty_SetPartyMonsterLevel::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_SetPartyMonsterLevel, Level) == 0x000004, "Member 'GameDataParty_SetPartyMonsterLevel::Level' has a wrong offset!");

// Function DarwinGame.GameDataParty.SetPartyMonsterMp
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_SetPartyMonsterMp final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_SetPartyMonsterMp) == 0x000004, "Wrong alignment on GameDataParty_SetPartyMonsterMp");
static_assert(sizeof(GameDataParty_SetPartyMonsterMp) == 0x000008, "Wrong size on GameDataParty_SetPartyMonsterMp");
static_assert(offsetof(GameDataParty_SetPartyMonsterMp, globalPartyIndex) == 0x000000, "Member 'GameDataParty_SetPartyMonsterMp::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_SetPartyMonsterMp, MP) == 0x000004, "Member 'GameDataParty_SetPartyMonsterMp::MP' has a wrong offset!");

// Function DarwinGame.GameDataParty.SetPartyMonsterNickName
// 0x0020 (0x0020 - 0x0000)
struct GameDataParty_SetPartyMonsterNickName final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NickName;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_SetPartyMonsterNickName) == 0x000008, "Wrong alignment on GameDataParty_SetPartyMonsterNickName");
static_assert(sizeof(GameDataParty_SetPartyMonsterNickName) == 0x000020, "Wrong size on GameDataParty_SetPartyMonsterNickName");
static_assert(offsetof(GameDataParty_SetPartyMonsterNickName, globalPartyIndex) == 0x000000, "Member 'GameDataParty_SetPartyMonsterNickName::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_SetPartyMonsterNickName, NickName) == 0x000008, "Member 'GameDataParty_SetPartyMonsterNickName::NickName' has a wrong offset!");

// Function DarwinGame.GameDataParty.Swap
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_Swap final
{
public:
	int32                                         firstGlobalPartyIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         secoundGlobalPartyIndex;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_Swap) == 0x000004, "Wrong alignment on GameDataParty_Swap");
static_assert(sizeof(GameDataParty_Swap) == 0x000008, "Wrong size on GameDataParty_Swap");
static_assert(offsetof(GameDataParty_Swap, firstGlobalPartyIndex) == 0x000000, "Member 'GameDataParty_Swap::firstGlobalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_Swap, secoundGlobalPartyIndex) == 0x000004, "Member 'GameDataParty_Swap::secoundGlobalPartyIndex' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetMainPartyMax
// 0x0004 (0x0004 - 0x0000)
struct GameDataParty_GetMainPartyMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetMainPartyMax) == 0x000004, "Wrong alignment on GameDataParty_GetMainPartyMax");
static_assert(sizeof(GameDataParty_GetMainPartyMax) == 0x000004, "Wrong size on GameDataParty_GetMainPartyMax");
static_assert(offsetof(GameDataParty_GetMainPartyMax, ReturnValue) == 0x000000, "Member 'GameDataParty_GetMainPartyMax::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetMatchArtifactMonsterList
// 0x0010 (0x0010 - 0x0000)
struct GameDataParty_GetMatchArtifactMonsterList final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetMatchArtifactMonsterList) == 0x000008, "Wrong alignment on GameDataParty_GetMatchArtifactMonsterList");
static_assert(sizeof(GameDataParty_GetMatchArtifactMonsterList) == 0x000010, "Wrong size on GameDataParty_GetMatchArtifactMonsterList");
static_assert(offsetof(GameDataParty_GetMatchArtifactMonsterList, ReturnValue) == 0x000000, "Member 'GameDataParty_GetMatchArtifactMonsterList::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetMax
// 0x0004 (0x0004 - 0x0000)
struct GameDataParty_GetMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetMax) == 0x000004, "Wrong alignment on GameDataParty_GetMax");
static_assert(sizeof(GameDataParty_GetMax) == 0x000004, "Wrong size on GameDataParty_GetMax");
static_assert(offsetof(GameDataParty_GetMax, ReturnValue) == 0x000000, "Member 'GameDataParty_GetMax::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.GetNumKind
// 0x000C (0x000C - 0x0000)
struct GameDataParty_GetNumKind final
{
public:
	int32                                         KindId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyType                                    partyType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_GetNumKind) == 0x000004, "Wrong alignment on GameDataParty_GetNumKind");
static_assert(sizeof(GameDataParty_GetNumKind) == 0x00000C, "Wrong size on GameDataParty_GetNumKind");
static_assert(offsetof(GameDataParty_GetNumKind, KindId) == 0x000000, "Member 'GameDataParty_GetNumKind::KindId' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetNumKind, partyType) == 0x000004, "Member 'GameDataParty_GetNumKind::partyType' has a wrong offset!");
static_assert(offsetof(GameDataParty_GetNumKind, ReturnValue) == 0x000008, "Member 'GameDataParty_GetNumKind::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.IsEmptySlot
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_IsEmptySlot final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataParty_IsEmptySlot) == 0x000004, "Wrong alignment on GameDataParty_IsEmptySlot");
static_assert(sizeof(GameDataParty_IsEmptySlot) == 0x000008, "Wrong size on GameDataParty_IsEmptySlot");
static_assert(offsetof(GameDataParty_IsEmptySlot, globalPartyIndex) == 0x000000, "Member 'GameDataParty_IsEmptySlot::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_IsEmptySlot, ReturnValue) == 0x000004, "Member 'GameDataParty_IsEmptySlot::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.IsMainPartyMonsterIndex
// 0x0008 (0x0008 - 0x0000)
struct GameDataParty_IsMainPartyMonsterIndex final
{
public:
	int32                                         globalPartyIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataParty_IsMainPartyMonsterIndex) == 0x000004, "Wrong alignment on GameDataParty_IsMainPartyMonsterIndex");
static_assert(sizeof(GameDataParty_IsMainPartyMonsterIndex) == 0x000008, "Wrong size on GameDataParty_IsMainPartyMonsterIndex");
static_assert(offsetof(GameDataParty_IsMainPartyMonsterIndex, globalPartyIndex) == 0x000000, "Member 'GameDataParty_IsMainPartyMonsterIndex::globalPartyIndex' has a wrong offset!");
static_assert(offsetof(GameDataParty_IsMainPartyMonsterIndex, ReturnValue) == 0x000004, "Member 'GameDataParty_IsMainPartyMonsterIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataParty.IsMax
// 0x0002 (0x0002 - 0x0000)
struct GameDataParty_IsMax final
{
public:
	EPartyType                                    partyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataParty_IsMax) == 0x000001, "Wrong alignment on GameDataParty_IsMax");
static_assert(sizeof(GameDataParty_IsMax) == 0x000002, "Wrong size on GameDataParty_IsMax");
static_assert(offsetof(GameDataParty_IsMax, partyType) == 0x000000, "Member 'GameDataParty_IsMax::partyType' has a wrong offset!");
static_assert(offsetof(GameDataParty_IsMax, ReturnValue) == 0x000001, "Member 'GameDataParty_IsMax::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationElevator.ChangeBottomElevatorState
// 0x0001 (0x0001 - 0x0000)
struct StationElevator_ChangeBottomElevatorState final
{
public:
	EElevatorState                                State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_ChangeBottomElevatorState) == 0x000001, "Wrong alignment on StationElevator_ChangeBottomElevatorState");
static_assert(sizeof(StationElevator_ChangeBottomElevatorState) == 0x000001, "Wrong size on StationElevator_ChangeBottomElevatorState");
static_assert(offsetof(StationElevator_ChangeBottomElevatorState, State) == 0x000000, "Member 'StationElevator_ChangeBottomElevatorState::State' has a wrong offset!");

// Function DarwinGame.StationElevator.ChangeTopElevatorState
// 0x0001 (0x0001 - 0x0000)
struct StationElevator_ChangeTopElevatorState final
{
public:
	EElevatorState                                State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_ChangeTopElevatorState) == 0x000001, "Wrong alignment on StationElevator_ChangeTopElevatorState");
static_assert(sizeof(StationElevator_ChangeTopElevatorState) == 0x000001, "Wrong size on StationElevator_ChangeTopElevatorState");
static_assert(offsetof(StationElevator_ChangeTopElevatorState, State) == 0x000000, "Member 'StationElevator_ChangeTopElevatorState::State' has a wrong offset!");

// Function DarwinGame.StationElevator.GetIsOpenDoor
// 0x0001 (0x0001 - 0x0000)
struct StationElevator_GetIsOpenDoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_GetIsOpenDoor) == 0x000001, "Wrong alignment on StationElevator_GetIsOpenDoor");
static_assert(sizeof(StationElevator_GetIsOpenDoor) == 0x000001, "Wrong size on StationElevator_GetIsOpenDoor");
static_assert(offsetof(StationElevator_GetIsOpenDoor, ReturnValue) == 0x000000, "Member 'StationElevator_GetIsOpenDoor::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationElevator.PlayElevatorArrivalEventStart
// 0x0004 (0x0004 - 0x0000)
struct StationElevator_PlayElevatorArrivalEventStart final
{
public:
	float                                         StartOffset;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_PlayElevatorArrivalEventStart) == 0x000004, "Wrong alignment on StationElevator_PlayElevatorArrivalEventStart");
static_assert(sizeof(StationElevator_PlayElevatorArrivalEventStart) == 0x000004, "Wrong size on StationElevator_PlayElevatorArrivalEventStart");
static_assert(offsetof(StationElevator_PlayElevatorArrivalEventStart, StartOffset) == 0x000000, "Member 'StationElevator_PlayElevatorArrivalEventStart::StartOffset' has a wrong offset!");

// Function DarwinGame.StationElevator.PlayElevatorMoveEventStart
// 0x0001 (0x0001 - 0x0000)
struct StationElevator_PlayElevatorMoveEventStart final
{
public:
	bool                                          bToTop;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_PlayElevatorMoveEventStart) == 0x000001, "Wrong alignment on StationElevator_PlayElevatorMoveEventStart");
static_assert(sizeof(StationElevator_PlayElevatorMoveEventStart) == 0x000001, "Wrong size on StationElevator_PlayElevatorMoveEventStart");
static_assert(offsetof(StationElevator_PlayElevatorMoveEventStart, bToTop) == 0x000000, "Member 'StationElevator_PlayElevatorMoveEventStart::bToTop' has a wrong offset!");

// Function DarwinGame.StationElevator.getBottomPosition
// 0x000C (0x000C - 0x0000)
struct StationElevator_getBottomPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_getBottomPosition) == 0x000004, "Wrong alignment on StationElevator_getBottomPosition");
static_assert(sizeof(StationElevator_getBottomPosition) == 0x00000C, "Wrong size on StationElevator_getBottomPosition");
static_assert(offsetof(StationElevator_getBottomPosition, ReturnValue) == 0x000000, "Member 'StationElevator_getBottomPosition::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationElevator.getTopPosition
// 0x000C (0x000C - 0x0000)
struct StationElevator_getTopPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_getTopPosition) == 0x000004, "Wrong alignment on StationElevator_getTopPosition");
static_assert(sizeof(StationElevator_getTopPosition) == 0x00000C, "Wrong size on StationElevator_getTopPosition");
static_assert(offsetof(StationElevator_getTopPosition, ReturnValue) == 0x000000, "Member 'StationElevator_getTopPosition::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationElevator.IsBottom
// 0x0001 (0x0001 - 0x0000)
struct StationElevator_IsBottom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_IsBottom) == 0x000001, "Wrong alignment on StationElevator_IsBottom");
static_assert(sizeof(StationElevator_IsBottom) == 0x000001, "Wrong size on StationElevator_IsBottom");
static_assert(offsetof(StationElevator_IsBottom, ReturnValue) == 0x000000, "Member 'StationElevator_IsBottom::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationElevator.IsEndedEvent
// 0x0001 (0x0001 - 0x0000)
struct StationElevator_IsEndedEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_IsEndedEvent) == 0x000001, "Wrong alignment on StationElevator_IsEndedEvent");
static_assert(sizeof(StationElevator_IsEndedEvent) == 0x000001, "Wrong size on StationElevator_IsEndedEvent");
static_assert(offsetof(StationElevator_IsEndedEvent, ReturnValue) == 0x000000, "Member 'StationElevator_IsEndedEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationElevator.IsTop
// 0x0001 (0x0001 - 0x0000)
struct StationElevator_IsTop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationElevator_IsTop) == 0x000001, "Wrong alignment on StationElevator_IsTop");
static_assert(sizeof(StationElevator_IsTop) == 0x000001, "Wrong size on StationElevator_IsTop");
static_assert(offsetof(StationElevator_IsTop, ReturnValue) == 0x000000, "Member 'StationElevator_IsTop::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataSavePoint_Clone final
{
public:
	class UGameDataSavePoint*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_Clone) == 0x000008, "Wrong alignment on GameDataSavePoint_Clone");
static_assert(sizeof(GameDataSavePoint_Clone) == 0x000008, "Wrong size on GameDataSavePoint_Clone");
static_assert(offsetof(GameDataSavePoint_Clone, ReturnValue) == 0x000000, "Member 'GameDataSavePoint_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataSavePoint_Overwrite final
{
public:
	class UGameDataSavePoint*                     game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_Overwrite) == 0x000008, "Wrong alignment on GameDataSavePoint_Overwrite");
static_assert(sizeof(GameDataSavePoint_Overwrite) == 0x000008, "Wrong size on GameDataSavePoint_Overwrite");
static_assert(offsetof(GameDataSavePoint_Overwrite, game_data) == 0x000000, "Member 'GameDataSavePoint_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.SetSavePointLocation
// 0x000C (0x000C - 0x0000)
struct GameDataSavePoint_SetSavePointLocation final
{
public:
	struct FVector                                save_location;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_SetSavePointLocation) == 0x000004, "Wrong alignment on GameDataSavePoint_SetSavePointLocation");
static_assert(sizeof(GameDataSavePoint_SetSavePointLocation) == 0x00000C, "Wrong size on GameDataSavePoint_SetSavePointLocation");
static_assert(offsetof(GameDataSavePoint_SetSavePointLocation, save_location) == 0x000000, "Member 'GameDataSavePoint_SetSavePointLocation::save_location' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.SetSavePointPersistentId
// 0x0001 (0x0001 - 0x0000)
struct GameDataSavePoint_SetSavePointPersistentId final
{
public:
	EPersistentLevelID                            persistent_id;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_SetSavePointPersistentId) == 0x000001, "Wrong alignment on GameDataSavePoint_SetSavePointPersistentId");
static_assert(sizeof(GameDataSavePoint_SetSavePointPersistentId) == 0x000001, "Wrong size on GameDataSavePoint_SetSavePointPersistentId");
static_assert(offsetof(GameDataSavePoint_SetSavePointPersistentId, persistent_id) == 0x000000, "Member 'GameDataSavePoint_SetSavePointPersistentId::persistent_id' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.SetSavePointRotation
// 0x000C (0x000C - 0x0000)
struct GameDataSavePoint_SetSavePointRotation final
{
public:
	struct FRotator                               save_rotation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_SetSavePointRotation) == 0x000004, "Wrong alignment on GameDataSavePoint_SetSavePointRotation");
static_assert(sizeof(GameDataSavePoint_SetSavePointRotation) == 0x00000C, "Wrong size on GameDataSavePoint_SetSavePointRotation");
static_assert(offsetof(GameDataSavePoint_SetSavePointRotation, save_rotation) == 0x000000, "Member 'GameDataSavePoint_SetSavePointRotation::save_rotation' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.GetSavePointLocation
// 0x000C (0x000C - 0x0000)
struct GameDataSavePoint_GetSavePointLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_GetSavePointLocation) == 0x000004, "Wrong alignment on GameDataSavePoint_GetSavePointLocation");
static_assert(sizeof(GameDataSavePoint_GetSavePointLocation) == 0x00000C, "Wrong size on GameDataSavePoint_GetSavePointLocation");
static_assert(offsetof(GameDataSavePoint_GetSavePointLocation, ReturnValue) == 0x000000, "Member 'GameDataSavePoint_GetSavePointLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.GetSavePointPersistentId
// 0x0001 (0x0001 - 0x0000)
struct GameDataSavePoint_GetSavePointPersistentId final
{
public:
	EPersistentLevelID                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_GetSavePointPersistentId) == 0x000001, "Wrong alignment on GameDataSavePoint_GetSavePointPersistentId");
static_assert(sizeof(GameDataSavePoint_GetSavePointPersistentId) == 0x000001, "Wrong size on GameDataSavePoint_GetSavePointPersistentId");
static_assert(offsetof(GameDataSavePoint_GetSavePointPersistentId, ReturnValue) == 0x000000, "Member 'GameDataSavePoint_GetSavePointPersistentId::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataSavePoint.GetSavePointRotation
// 0x000C (0x000C - 0x0000)
struct GameDataSavePoint_GetSavePointRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataSavePoint_GetSavePointRotation) == 0x000004, "Wrong alignment on GameDataSavePoint_GetSavePointRotation");
static_assert(sizeof(GameDataSavePoint_GetSavePointRotation) == 0x00000C, "Wrong size on GameDataSavePoint_GetSavePointRotation");
static_assert(offsetof(GameDataSavePoint_GetSavePointRotation, ReturnValue) == 0x000000, "Member 'GameDataSavePoint_GetSavePointRotation::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataScenarioProgress.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataScenarioProgress_Clone final
{
public:
	class UGameDataScenarioProgress*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataScenarioProgress_Clone) == 0x000008, "Wrong alignment on GameDataScenarioProgress_Clone");
static_assert(sizeof(GameDataScenarioProgress_Clone) == 0x000008, "Wrong size on GameDataScenarioProgress_Clone");
static_assert(offsetof(GameDataScenarioProgress_Clone, ReturnValue) == 0x000000, "Member 'GameDataScenarioProgress_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataScenarioProgress.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataScenarioProgress_Overwrite final
{
public:
	class UGameDataScenarioProgress*              game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataScenarioProgress_Overwrite) == 0x000008, "Wrong alignment on GameDataScenarioProgress_Overwrite");
static_assert(sizeof(GameDataScenarioProgress_Overwrite) == 0x000008, "Wrong size on GameDataScenarioProgress_Overwrite");
static_assert(offsetof(GameDataScenarioProgress_Overwrite, game_data) == 0x000000, "Member 'GameDataScenarioProgress_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.TargetArrowComponent.SetTargetRadius
// 0x0004 (0x0004 - 0x0000)
struct TargetArrowComponent_SetTargetRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetArrowComponent_SetTargetRadius) == 0x000004, "Wrong alignment on TargetArrowComponent_SetTargetRadius");
static_assert(sizeof(TargetArrowComponent_SetTargetRadius) == 0x000004, "Wrong size on TargetArrowComponent_SetTargetRadius");
static_assert(offsetof(TargetArrowComponent_SetTargetRadius, Radius) == 0x000000, "Member 'TargetArrowComponent_SetTargetRadius::Radius' has a wrong offset!");

// Function DarwinGame.TargetArrowComponent.TargetChange
// 0x0008 (0x0008 - 0x0000)
struct TargetArrowComponent_TargetChange final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetArrowComponent_TargetChange) == 0x000008, "Wrong alignment on TargetArrowComponent_TargetChange");
static_assert(sizeof(TargetArrowComponent_TargetChange) == 0x000008, "Wrong size on TargetArrowComponent_TargetChange");
static_assert(offsetof(TargetArrowComponent_TargetChange, Target) == 0x000000, "Member 'TargetArrowComponent_TargetChange::Target' has a wrong offset!");

// Function DarwinGame.TargetArrowComponent.TargetStart
// 0x0010 (0x0010 - 0x0000)
struct TargetArrowComponent_TargetStart final
{
public:
	class AActor*                                 Start;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetArrowComponent_TargetStart) == 0x000008, "Wrong alignment on TargetArrowComponent_TargetStart");
static_assert(sizeof(TargetArrowComponent_TargetStart) == 0x000010, "Wrong size on TargetArrowComponent_TargetStart");
static_assert(offsetof(TargetArrowComponent_TargetStart, Start) == 0x000000, "Member 'TargetArrowComponent_TargetStart::Start' has a wrong offset!");
static_assert(offsetof(TargetArrowComponent_TargetStart, Target) == 0x000008, "Member 'TargetArrowComponent_TargetStart::Target' has a wrong offset!");

// Function DarwinGame.TargetArrowComponent.TargetStartCount
// 0x0018 (0x0018 - 0x0000)
struct TargetArrowComponent_TargetStartCount final
{
public:
	class AActor*                                 Start;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetArrowComponent_TargetStartCount) == 0x000008, "Wrong alignment on TargetArrowComponent_TargetStartCount");
static_assert(sizeof(TargetArrowComponent_TargetStartCount) == 0x000018, "Wrong size on TargetArrowComponent_TargetStartCount");
static_assert(offsetof(TargetArrowComponent_TargetStartCount, Start) == 0x000000, "Member 'TargetArrowComponent_TargetStartCount::Start' has a wrong offset!");
static_assert(offsetof(TargetArrowComponent_TargetStartCount, Target) == 0x000008, "Member 'TargetArrowComponent_TargetStartCount::Target' has a wrong offset!");
static_assert(offsetof(TargetArrowComponent_TargetStartCount, Count) == 0x000010, "Member 'TargetArrowComponent_TargetStartCount::Count' has a wrong offset!");

// Function DarwinGame.TargetArrowComponent.IsFinish
// 0x0001 (0x0001 - 0x0000)
struct TargetArrowComponent_IsFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetArrowComponent_IsFinish) == 0x000001, "Wrong alignment on TargetArrowComponent_IsFinish");
static_assert(sizeof(TargetArrowComponent_IsFinish) == 0x000001, "Wrong size on TargetArrowComponent_IsFinish");
static_assert(offsetof(TargetArrowComponent_IsFinish, ReturnValue) == 0x000000, "Member 'TargetArrowComponent_IsFinish::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStockMonster.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataStockMonster_Clone final
{
public:
	class UGameDataStockMonster*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStockMonster_Clone) == 0x000008, "Wrong alignment on GameDataStockMonster_Clone");
static_assert(sizeof(GameDataStockMonster_Clone) == 0x000008, "Wrong size on GameDataStockMonster_Clone");
static_assert(offsetof(GameDataStockMonster_Clone, ReturnValue) == 0x000000, "Member 'GameDataStockMonster_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStockMonster.GetStockMonsterKindNum
// 0x000C (0x000C - 0x0000)
struct GameDataStockMonster_GetStockMonsterKindNum final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStockMonster_GetStockMonsterKindNum) == 0x000004, "Wrong alignment on GameDataStockMonster_GetStockMonsterKindNum");
static_assert(sizeof(GameDataStockMonster_GetStockMonsterKindNum) == 0x00000C, "Wrong size on GameDataStockMonster_GetStockMonsterKindNum");
static_assert(offsetof(GameDataStockMonster_GetStockMonsterKindNum, KindId) == 0x000000, "Member 'GameDataStockMonster_GetStockMonsterKindNum::KindId' has a wrong offset!");
static_assert(offsetof(GameDataStockMonster_GetStockMonsterKindNum, ReturnValue) == 0x000008, "Member 'GameDataStockMonster_GetStockMonsterKindNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataStockMonster.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataStockMonster_Overwrite final
{
public:
	class UGameDataStockMonster*                  game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStockMonster_Overwrite) == 0x000008, "Wrong alignment on GameDataStockMonster_Overwrite");
static_assert(sizeof(GameDataStockMonster_Overwrite) == 0x000008, "Wrong size on GameDataStockMonster_Overwrite");
static_assert(offsetof(GameDataStockMonster_Overwrite, game_data) == 0x000000, "Member 'GameDataStockMonster_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataStockMonster.CanAddStockMonster
// 0x0001 (0x0001 - 0x0000)
struct GameDataStockMonster_CanAddStockMonster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStockMonster_CanAddStockMonster) == 0x000001, "Wrong alignment on GameDataStockMonster_CanAddStockMonster");
static_assert(sizeof(GameDataStockMonster_CanAddStockMonster) == 0x000001, "Wrong size on GameDataStockMonster_CanAddStockMonster");
static_assert(offsetof(GameDataStockMonster_CanAddStockMonster, ReturnValue) == 0x000000, "Member 'GameDataStockMonster_CanAddStockMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataTargetObject.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataTargetObject_Clone final
{
public:
	class UGameDataTargetObject*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataTargetObject_Clone) == 0x000008, "Wrong alignment on GameDataTargetObject_Clone");
static_assert(sizeof(GameDataTargetObject_Clone) == 0x000008, "Wrong size on GameDataTargetObject_Clone");
static_assert(offsetof(GameDataTargetObject_Clone, ReturnValue) == 0x000000, "Member 'GameDataTargetObject_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataTargetObject.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataTargetObject_Overwrite final
{
public:
	class UGameDataTargetObject*                  game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataTargetObject_Overwrite) == 0x000008, "Wrong alignment on GameDataTargetObject_Overwrite");
static_assert(sizeof(GameDataTargetObject_Overwrite) == 0x000008, "Wrong size on GameDataTargetObject_Overwrite");
static_assert(offsetof(GameDataTargetObject_Overwrite, game_data) == 0x000000, "Member 'GameDataTargetObject_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.UIShot_IconRange.SetData
// 0x0020 (0x0020 - 0x0000)
struct UIShot_IconRange_SetData final
{
public:
	struct FST_SlingShotCategory                  Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_IconRange_SetData) == 0x000008, "Wrong alignment on UIShot_IconRange_SetData");
static_assert(sizeof(UIShot_IconRange_SetData) == 0x000020, "Wrong size on UIShot_IconRange_SetData");
static_assert(offsetof(UIShot_IconRange_SetData, Data) == 0x000000, "Member 'UIShot_IconRange_SetData::Data' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.AddSignData
// 0x001C (0x001C - 0x0000)
struct GameDataUIMap_AddSignData final
{
public:
	EMapSymbolType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FloorNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_AddSignData) == 0x000004, "Wrong alignment on GameDataUIMap_AddSignData");
static_assert(sizeof(GameDataUIMap_AddSignData) == 0x00001C, "Wrong size on GameDataUIMap_AddSignData");
static_assert(offsetof(GameDataUIMap_AddSignData, Type) == 0x000000, "Member 'GameDataUIMap_AddSignData::Type' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_AddSignData, FloorNum) == 0x000004, "Member 'GameDataUIMap_AddSignData::FloorNum' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_AddSignData, AreaID) == 0x000008, "Member 'GameDataUIMap_AddSignData::AreaID' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_AddSignData, Location) == 0x000010, "Member 'GameDataUIMap_AddSignData::Location' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.Clone
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_Clone final
{
public:
	class UGameDataUIMap*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_Clone) == 0x000008, "Wrong alignment on GameDataUIMap_Clone");
static_assert(sizeof(GameDataUIMap_Clone) == 0x000008, "Wrong size on GameDataUIMap_Clone");
static_assert(offsetof(GameDataUIMap_Clone, ReturnValue) == 0x000000, "Member 'GameDataUIMap_Clone::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.CreateEnterAreaData
// 0x0004 (0x0004 - 0x0000)
struct GameDataUIMap_CreateEnterAreaData final
{
public:
	int32                                         ArraySize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_CreateEnterAreaData) == 0x000004, "Wrong alignment on GameDataUIMap_CreateEnterAreaData");
static_assert(sizeof(GameDataUIMap_CreateEnterAreaData) == 0x000004, "Wrong size on GameDataUIMap_CreateEnterAreaData");
static_assert(offsetof(GameDataUIMap_CreateEnterAreaData, ArraySize) == 0x000000, "Member 'GameDataUIMap_CreateEnterAreaData::ArraySize' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.CreateEnterFloorAreaData
// 0x0004 (0x0004 - 0x0000)
struct GameDataUIMap_CreateEnterFloorAreaData final
{
public:
	int32                                         ArraySize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_CreateEnterFloorAreaData) == 0x000004, "Wrong alignment on GameDataUIMap_CreateEnterFloorAreaData");
static_assert(sizeof(GameDataUIMap_CreateEnterFloorAreaData) == 0x000004, "Wrong size on GameDataUIMap_CreateEnterFloorAreaData");
static_assert(offsetof(GameDataUIMap_CreateEnterFloorAreaData, ArraySize) == 0x000000, "Member 'GameDataUIMap_CreateEnterFloorAreaData::ArraySize' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.GetEnterAreaMask
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_GetEnterAreaMask final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_GetEnterAreaMask) == 0x000008, "Wrong alignment on GameDataUIMap_GetEnterAreaMask");
static_assert(sizeof(GameDataUIMap_GetEnterAreaMask) == 0x000008, "Wrong size on GameDataUIMap_GetEnterAreaMask");
static_assert(offsetof(GameDataUIMap_GetEnterAreaMask, ReturnValue) == 0x000000, "Member 'GameDataUIMap_GetEnterAreaMask::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.GetEnterFloorAreaMask
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_GetEnterFloorAreaMask final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_GetEnterFloorAreaMask) == 0x000008, "Wrong alignment on GameDataUIMap_GetEnterFloorAreaMask");
static_assert(sizeof(GameDataUIMap_GetEnterFloorAreaMask) == 0x000008, "Wrong size on GameDataUIMap_GetEnterFloorAreaMask");
static_assert(offsetof(GameDataUIMap_GetEnterFloorAreaMask, ReturnValue) == 0x000000, "Member 'GameDataUIMap_GetEnterFloorAreaMask::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.GetIsFirstOpenAllMap
// 0x0001 (0x0001 - 0x0000)
struct GameDataUIMap_GetIsFirstOpenAllMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_GetIsFirstOpenAllMap) == 0x000001, "Wrong alignment on GameDataUIMap_GetIsFirstOpenAllMap");
static_assert(sizeof(GameDataUIMap_GetIsFirstOpenAllMap) == 0x000001, "Wrong size on GameDataUIMap_GetIsFirstOpenAllMap");
static_assert(offsetof(GameDataUIMap_GetIsFirstOpenAllMap, ReturnValue) == 0x000000, "Member 'GameDataUIMap_GetIsFirstOpenAllMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.GetIsFirstOpenFaskullMap
// 0x0001 (0x0001 - 0x0000)
struct GameDataUIMap_GetIsFirstOpenFaskullMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_GetIsFirstOpenFaskullMap) == 0x000001, "Wrong alignment on GameDataUIMap_GetIsFirstOpenFaskullMap");
static_assert(sizeof(GameDataUIMap_GetIsFirstOpenFaskullMap) == 0x000001, "Wrong size on GameDataUIMap_GetIsFirstOpenFaskullMap");
static_assert(offsetof(GameDataUIMap_GetIsFirstOpenFaskullMap, ReturnValue) == 0x000000, "Member 'GameDataUIMap_GetIsFirstOpenFaskullMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.GetZoomScaleIndex
// 0x0004 (0x0004 - 0x0000)
struct GameDataUIMap_GetZoomScaleIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_GetZoomScaleIndex) == 0x000004, "Wrong alignment on GameDataUIMap_GetZoomScaleIndex");
static_assert(sizeof(GameDataUIMap_GetZoomScaleIndex) == 0x000004, "Wrong size on GameDataUIMap_GetZoomScaleIndex");
static_assert(offsetof(GameDataUIMap_GetZoomScaleIndex, ReturnValue) == 0x000000, "Member 'GameDataUIMap_GetZoomScaleIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.Overwrite
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_Overwrite final
{
public:
	class UGameDataUIMap*                         game_data;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_Overwrite) == 0x000008, "Wrong alignment on GameDataUIMap_Overwrite");
static_assert(sizeof(GameDataUIMap_Overwrite) == 0x000008, "Wrong size on GameDataUIMap_Overwrite");
static_assert(offsetof(GameDataUIMap_Overwrite, game_data) == 0x000000, "Member 'GameDataUIMap_Overwrite::game_data' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.RemoveSignData
// 0x0001 (0x0001 - 0x0000)
struct GameDataUIMap_RemoveSignData final
{
public:
	EMapSymbolType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_RemoveSignData) == 0x000001, "Wrong alignment on GameDataUIMap_RemoveSignData");
static_assert(sizeof(GameDataUIMap_RemoveSignData) == 0x000001, "Wrong size on GameDataUIMap_RemoveSignData");
static_assert(offsetof(GameDataUIMap_RemoveSignData, Type) == 0x000000, "Member 'GameDataUIMap_RemoveSignData::Type' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.SetEnterArea
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_SetEnterArea final
{
public:
	int32                                         EnterAreaIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_SetEnterArea) == 0x000004, "Wrong alignment on GameDataUIMap_SetEnterArea");
static_assert(sizeof(GameDataUIMap_SetEnterArea) == 0x000008, "Wrong size on GameDataUIMap_SetEnterArea");
static_assert(offsetof(GameDataUIMap_SetEnterArea, EnterAreaIndex) == 0x000000, "Member 'GameDataUIMap_SetEnterArea::EnterAreaIndex' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_SetEnterArea, Value) == 0x000004, "Member 'GameDataUIMap_SetEnterArea::Value' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.SetEnterAreaMask
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_SetEnterAreaMask final
{
public:
	class UTexture2D*                             MaskData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_SetEnterAreaMask) == 0x000008, "Wrong alignment on GameDataUIMap_SetEnterAreaMask");
static_assert(sizeof(GameDataUIMap_SetEnterAreaMask) == 0x000008, "Wrong size on GameDataUIMap_SetEnterAreaMask");
static_assert(offsetof(GameDataUIMap_SetEnterAreaMask, MaskData) == 0x000000, "Member 'GameDataUIMap_SetEnterAreaMask::MaskData' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.SetEnterFloorArea
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_SetEnterFloorArea final
{
public:
	int32                                         EnterFloorAreaIndex;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_SetEnterFloorArea) == 0x000004, "Wrong alignment on GameDataUIMap_SetEnterFloorArea");
static_assert(sizeof(GameDataUIMap_SetEnterFloorArea) == 0x000008, "Wrong size on GameDataUIMap_SetEnterFloorArea");
static_assert(offsetof(GameDataUIMap_SetEnterFloorArea, EnterFloorAreaIndex) == 0x000000, "Member 'GameDataUIMap_SetEnterFloorArea::EnterFloorAreaIndex' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_SetEnterFloorArea, Value) == 0x000004, "Member 'GameDataUIMap_SetEnterFloorArea::Value' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.SetEnterFloorAreaMask
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_SetEnterFloorAreaMask final
{
public:
	class UTexture2D*                             MaskData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_SetEnterFloorAreaMask) == 0x000008, "Wrong alignment on GameDataUIMap_SetEnterFloorAreaMask");
static_assert(sizeof(GameDataUIMap_SetEnterFloorAreaMask) == 0x000008, "Wrong size on GameDataUIMap_SetEnterFloorAreaMask");
static_assert(offsetof(GameDataUIMap_SetEnterFloorAreaMask, MaskData) == 0x000000, "Member 'GameDataUIMap_SetEnterFloorAreaMask::MaskData' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.SetIsFirstOpenAllMap
// 0x0001 (0x0001 - 0x0000)
struct GameDataUIMap_SetIsFirstOpenAllMap final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_SetIsFirstOpenAllMap) == 0x000001, "Wrong alignment on GameDataUIMap_SetIsFirstOpenAllMap");
static_assert(sizeof(GameDataUIMap_SetIsFirstOpenAllMap) == 0x000001, "Wrong size on GameDataUIMap_SetIsFirstOpenAllMap");
static_assert(offsetof(GameDataUIMap_SetIsFirstOpenAllMap, Flag) == 0x000000, "Member 'GameDataUIMap_SetIsFirstOpenAllMap::Flag' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.SetIsFirstOpenFaskullMap
// 0x0001 (0x0001 - 0x0000)
struct GameDataUIMap_SetIsFirstOpenFaskullMap final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_SetIsFirstOpenFaskullMap) == 0x000001, "Wrong alignment on GameDataUIMap_SetIsFirstOpenFaskullMap");
static_assert(sizeof(GameDataUIMap_SetIsFirstOpenFaskullMap) == 0x000001, "Wrong size on GameDataUIMap_SetIsFirstOpenFaskullMap");
static_assert(offsetof(GameDataUIMap_SetIsFirstOpenFaskullMap, Flag) == 0x000000, "Member 'GameDataUIMap_SetIsFirstOpenFaskullMap::Flag' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.SetZoomScaleIndex
// 0x0004 (0x0004 - 0x0000)
struct GameDataUIMap_SetZoomScaleIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_SetZoomScaleIndex) == 0x000004, "Wrong alignment on GameDataUIMap_SetZoomScaleIndex");
static_assert(sizeof(GameDataUIMap_SetZoomScaleIndex) == 0x000004, "Wrong size on GameDataUIMap_SetZoomScaleIndex");
static_assert(offsetof(GameDataUIMap_SetZoomScaleIndex, Index_0) == 0x000000, "Member 'GameDataUIMap_SetZoomScaleIndex::Index_0' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.GetEnterAreaValue
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_GetEnterAreaValue final
{
public:
	int32                                         EnterAreaIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_GetEnterAreaValue) == 0x000004, "Wrong alignment on GameDataUIMap_GetEnterAreaValue");
static_assert(sizeof(GameDataUIMap_GetEnterAreaValue) == 0x000008, "Wrong size on GameDataUIMap_GetEnterAreaValue");
static_assert(offsetof(GameDataUIMap_GetEnterAreaValue, EnterAreaIndex) == 0x000000, "Member 'GameDataUIMap_GetEnterAreaValue::EnterAreaIndex' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_GetEnterAreaValue, ReturnValue) == 0x000004, "Member 'GameDataUIMap_GetEnterAreaValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.GetEnterFloorAreaValue
// 0x0008 (0x0008 - 0x0000)
struct GameDataUIMap_GetEnterFloorAreaValue final
{
public:
	int32                                         EnterFloorAreaIndex;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_GetEnterFloorAreaValue) == 0x000004, "Wrong alignment on GameDataUIMap_GetEnterFloorAreaValue");
static_assert(sizeof(GameDataUIMap_GetEnterFloorAreaValue) == 0x000008, "Wrong size on GameDataUIMap_GetEnterFloorAreaValue");
static_assert(offsetof(GameDataUIMap_GetEnterFloorAreaValue, EnterFloorAreaIndex) == 0x000000, "Member 'GameDataUIMap_GetEnterFloorAreaValue::EnterFloorAreaIndex' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_GetEnterFloorAreaValue, ReturnValue) == 0x000004, "Member 'GameDataUIMap_GetEnterFloorAreaValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.IsContainSignData
// 0x0002 (0x0002 - 0x0000)
struct GameDataUIMap_IsContainSignData final
{
public:
	EMapSymbolType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_IsContainSignData) == 0x000001, "Wrong alignment on GameDataUIMap_IsContainSignData");
static_assert(sizeof(GameDataUIMap_IsContainSignData) == 0x000002, "Wrong size on GameDataUIMap_IsContainSignData");
static_assert(offsetof(GameDataUIMap_IsContainSignData, Type) == 0x000000, "Member 'GameDataUIMap_IsContainSignData::Type' has a wrong offset!");
static_assert(offsetof(GameDataUIMap_IsContainSignData, ReturnValue) == 0x000001, "Member 'GameDataUIMap_IsContainSignData::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.IsEmptyArea
// 0x0001 (0x0001 - 0x0000)
struct GameDataUIMap_IsEmptyArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_IsEmptyArea) == 0x000001, "Wrong alignment on GameDataUIMap_IsEmptyArea");
static_assert(sizeof(GameDataUIMap_IsEmptyArea) == 0x000001, "Wrong size on GameDataUIMap_IsEmptyArea");
static_assert(offsetof(GameDataUIMap_IsEmptyArea, ReturnValue) == 0x000000, "Member 'GameDataUIMap_IsEmptyArea::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameDataUIMap.IsEmptyFloorArea
// 0x0001 (0x0001 - 0x0000)
struct GameDataUIMap_IsEmptyFloorArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataUIMap_IsEmptyFloorArea) == 0x000001, "Wrong alignment on GameDataUIMap_IsEmptyFloorArea");
static_assert(sizeof(GameDataUIMap_IsEmptyFloorArea) == 0x000001, "Wrong size on GameDataUIMap_IsEmptyFloorArea");
static_assert(offsetof(GameDataUIMap_IsEmptyFloorArea, ReturnValue) == 0x000000, "Member 'GameDataUIMap_IsEmptyFloorArea::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameFunctionLibrary.IsClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct GameFunctionLibrary_IsClassDefaultObject final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameFunctionLibrary_IsClassDefaultObject) == 0x000008, "Wrong alignment on GameFunctionLibrary_IsClassDefaultObject");
static_assert(sizeof(GameFunctionLibrary_IsClassDefaultObject) == 0x000010, "Wrong size on GameFunctionLibrary_IsClassDefaultObject");
static_assert(offsetof(GameFunctionLibrary_IsClassDefaultObject, Obj) == 0x000000, "Member 'GameFunctionLibrary_IsClassDefaultObject::Obj' has a wrong offset!");
static_assert(offsetof(GameFunctionLibrary_IsClassDefaultObject, ReturnValue) == 0x000008, "Member 'GameFunctionLibrary_IsClassDefaultObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameFunctionLibrary.IsDebug
// 0x0001 (0x0001 - 0x0000)
struct GameFunctionLibrary_IsDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameFunctionLibrary_IsDebug) == 0x000001, "Wrong alignment on GameFunctionLibrary_IsDebug");
static_assert(sizeof(GameFunctionLibrary_IsDebug) == 0x000001, "Wrong size on GameFunctionLibrary_IsDebug");
static_assert(offsetof(GameFunctionLibrary_IsDebug, ReturnValue) == 0x000000, "Member 'GameFunctionLibrary_IsDebug::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameFunctionLibrary.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct GameFunctionLibrary_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameFunctionLibrary_IsEditor) == 0x000001, "Wrong alignment on GameFunctionLibrary_IsEditor");
static_assert(sizeof(GameFunctionLibrary_IsEditor) == 0x000001, "Wrong size on GameFunctionLibrary_IsEditor");
static_assert(offsetof(GameFunctionLibrary_IsEditor, ReturnValue) == 0x000000, "Member 'GameFunctionLibrary_IsEditor::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameFunctionLibrary.IsNotPlayInEditor
// 0x0010 (0x0010 - 0x0000)
struct GameFunctionLibrary_IsNotPlayInEditor final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameFunctionLibrary_IsNotPlayInEditor) == 0x000008, "Wrong alignment on GameFunctionLibrary_IsNotPlayInEditor");
static_assert(sizeof(GameFunctionLibrary_IsNotPlayInEditor) == 0x000010, "Wrong size on GameFunctionLibrary_IsNotPlayInEditor");
static_assert(offsetof(GameFunctionLibrary_IsNotPlayInEditor, Obj) == 0x000000, "Member 'GameFunctionLibrary_IsNotPlayInEditor::Obj' has a wrong offset!");
static_assert(offsetof(GameFunctionLibrary_IsNotPlayInEditor, ReturnValue) == 0x000008, "Member 'GameFunctionLibrary_IsNotPlayInEditor::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameFunctionLibrary.IsPlayInEditor
// 0x0010 (0x0010 - 0x0000)
struct GameFunctionLibrary_IsPlayInEditor final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameFunctionLibrary_IsPlayInEditor) == 0x000008, "Wrong alignment on GameFunctionLibrary_IsPlayInEditor");
static_assert(sizeof(GameFunctionLibrary_IsPlayInEditor) == 0x000010, "Wrong size on GameFunctionLibrary_IsPlayInEditor");
static_assert(offsetof(GameFunctionLibrary_IsPlayInEditor, Obj) == 0x000000, "Member 'GameFunctionLibrary_IsPlayInEditor::Obj' has a wrong offset!");
static_assert(offsetof(GameFunctionLibrary_IsPlayInEditor, ReturnValue) == 0x000008, "Member 'GameFunctionLibrary_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameFunctionLibrary.IsRelease
// 0x0001 (0x0001 - 0x0000)
struct GameFunctionLibrary_IsRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameFunctionLibrary_IsRelease) == 0x000001, "Wrong alignment on GameFunctionLibrary_IsRelease");
static_assert(sizeof(GameFunctionLibrary_IsRelease) == 0x000001, "Wrong size on GameFunctionLibrary_IsRelease");
static_assert(offsetof(GameFunctionLibrary_IsRelease, ReturnValue) == 0x000000, "Member 'GameFunctionLibrary_IsRelease::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameplayEffectDataTable.GetEffect
// 0x0010 (0x0010 - 0x0000)
struct GameplayEffectDataTable_GetEffect final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayEffectDataTable_GetEffect) == 0x000008, "Wrong alignment on GameplayEffectDataTable_GetEffect");
static_assert(sizeof(GameplayEffectDataTable_GetEffect) == 0x000010, "Wrong size on GameplayEffectDataTable_GetEffect");
static_assert(offsetof(GameplayEffectDataTable_GetEffect, ID) == 0x000000, "Member 'GameplayEffectDataTable_GetEffect::ID' has a wrong offset!");
static_assert(offsetof(GameplayEffectDataTable_GetEffect, ReturnValue) == 0x000008, "Member 'GameplayEffectDataTable_GetEffect::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameProgress.GetEpisodeProgressMaxNum
// 0x0008 (0x0008 - 0x0000)
struct GameProgress_GetEpisodeProgressMaxNum final
{
public:
	EEpisodeType                                  episode_type;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameProgress_GetEpisodeProgressMaxNum) == 0x000004, "Wrong alignment on GameProgress_GetEpisodeProgressMaxNum");
static_assert(sizeof(GameProgress_GetEpisodeProgressMaxNum) == 0x000008, "Wrong size on GameProgress_GetEpisodeProgressMaxNum");
static_assert(offsetof(GameProgress_GetEpisodeProgressMaxNum, episode_type) == 0x000000, "Member 'GameProgress_GetEpisodeProgressMaxNum::episode_type' has a wrong offset!");
static_assert(offsetof(GameProgress_GetEpisodeProgressMaxNum, ReturnValue) == 0x000004, "Member 'GameProgress_GetEpisodeProgressMaxNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameProgress.UpdateEpisodeProgress
// 0x0001 (0x0001 - 0x0000)
struct GameProgress_UpdateEpisodeProgress final
{
public:
	EEpisodeType                                  update_episode_type;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameProgress_UpdateEpisodeProgress) == 0x000001, "Wrong alignment on GameProgress_UpdateEpisodeProgress");
static_assert(sizeof(GameProgress_UpdateEpisodeProgress) == 0x000001, "Wrong size on GameProgress_UpdateEpisodeProgress");
static_assert(offsetof(GameProgress_UpdateEpisodeProgress, update_episode_type) == 0x000000, "Member 'GameProgress_UpdateEpisodeProgress::update_episode_type' has a wrong offset!");

// Function DarwinGame.GameProgress.GetChapterNum
// 0x0004 (0x0004 - 0x0000)
struct GameProgress_GetChapterNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameProgress_GetChapterNum) == 0x000004, "Wrong alignment on GameProgress_GetChapterNum");
static_assert(sizeof(GameProgress_GetChapterNum) == 0x000004, "Wrong size on GameProgress_GetChapterNum");
static_assert(offsetof(GameProgress_GetChapterNum, ReturnValue) == 0x000000, "Member 'GameProgress_GetChapterNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameProgress.GetCurrentEpisodeProgressID
// 0x000C (0x000C - 0x0000)
struct GameProgress_GetCurrentEpisodeProgressID final
{
public:
	EEpisodeType                                  episode_type;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameProgress_GetCurrentEpisodeProgressID) == 0x000004, "Wrong alignment on GameProgress_GetCurrentEpisodeProgressID");
static_assert(sizeof(GameProgress_GetCurrentEpisodeProgressID) == 0x00000C, "Wrong size on GameProgress_GetCurrentEpisodeProgressID");
static_assert(offsetof(GameProgress_GetCurrentEpisodeProgressID, episode_type) == 0x000000, "Member 'GameProgress_GetCurrentEpisodeProgressID::episode_type' has a wrong offset!");
static_assert(offsetof(GameProgress_GetCurrentEpisodeProgressID, ReturnValue) == 0x000004, "Member 'GameProgress_GetCurrentEpisodeProgressID::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameProgress.GetEpisodeProgress
// 0x0008 (0x0008 - 0x0000)
struct GameProgress_GetEpisodeProgress final
{
public:
	EEpisodeType                                  episode_type;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameProgress_GetEpisodeProgress) == 0x000004, "Wrong alignment on GameProgress_GetEpisodeProgress");
static_assert(sizeof(GameProgress_GetEpisodeProgress) == 0x000008, "Wrong size on GameProgress_GetEpisodeProgress");
static_assert(offsetof(GameProgress_GetEpisodeProgress, episode_type) == 0x000000, "Member 'GameProgress_GetEpisodeProgress::episode_type' has a wrong offset!");
static_assert(offsetof(GameProgress_GetEpisodeProgress, ReturnValue) == 0x000004, "Member 'GameProgress_GetEpisodeProgress::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameScriptManager.AddExceptNpcList
// 0x0008 (0x0008 - 0x0000)
struct GameScriptManager_AddExceptNpcList final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameScriptManager_AddExceptNpcList) == 0x000004, "Wrong alignment on GameScriptManager_AddExceptNpcList");
static_assert(sizeof(GameScriptManager_AddExceptNpcList) == 0x000008, "Wrong size on GameScriptManager_AddExceptNpcList");
static_assert(offsetof(GameScriptManager_AddExceptNpcList, NpcID) == 0x000000, "Member 'GameScriptManager_AddExceptNpcList::NpcID' has a wrong offset!");

// Function DarwinGame.GameScriptManager.ContainsExceptNpcList
// 0x000C (0x000C - 0x0000)
struct GameScriptManager_ContainsExceptNpcList final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameScriptManager_ContainsExceptNpcList) == 0x000004, "Wrong alignment on GameScriptManager_ContainsExceptNpcList");
static_assert(sizeof(GameScriptManager_ContainsExceptNpcList) == 0x00000C, "Wrong size on GameScriptManager_ContainsExceptNpcList");
static_assert(offsetof(GameScriptManager_ContainsExceptNpcList, NpcID) == 0x000000, "Member 'GameScriptManager_ContainsExceptNpcList::NpcID' has a wrong offset!");
static_assert(offsetof(GameScriptManager_ContainsExceptNpcList, ReturnValue) == 0x000008, "Member 'GameScriptManager_ContainsExceptNpcList::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameScriptManager.RemoveExceptNpcList
// 0x0008 (0x0008 - 0x0000)
struct GameScriptManager_RemoveExceptNpcList final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameScriptManager_RemoveExceptNpcList) == 0x000004, "Wrong alignment on GameScriptManager_RemoveExceptNpcList");
static_assert(sizeof(GameScriptManager_RemoveExceptNpcList) == 0x000008, "Wrong size on GameScriptManager_RemoveExceptNpcList");
static_assert(offsetof(GameScriptManager_RemoveExceptNpcList, NpcID) == 0x000000, "Member 'GameScriptManager_RemoveExceptNpcList::NpcID' has a wrong offset!");

// Function DarwinGame.GameScriptManager.GetAllGameScript
// 0x0010 (0x0010 - 0x0000)
struct GameScriptManager_GetAllGameScript final
{
public:
	TArray<class AGameScriptBase*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameScriptManager_GetAllGameScript) == 0x000008, "Wrong alignment on GameScriptManager_GetAllGameScript");
static_assert(sizeof(GameScriptManager_GetAllGameScript) == 0x000010, "Wrong size on GameScriptManager_GetAllGameScript");
static_assert(offsetof(GameScriptManager_GetAllGameScript, ReturnValue) == 0x000000, "Member 'GameScriptManager_GetAllGameScript::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameSequenceFunctionLibrary.StartEventSequence
// 0x0018 (0x0018 - 0x0000)
struct GameSequenceFunctionLibrary_StartEventSequence final
{
public:
	class FName                                   event_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   quest_state;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   fast_travel_id;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          debug_play;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is_reopen_quest_ui;                                // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is_keep_hide_ui;                                   // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is_keep_disable_input;                             // 0x0017(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceFunctionLibrary_StartEventSequence) == 0x000004, "Wrong alignment on GameSequenceFunctionLibrary_StartEventSequence");
static_assert(sizeof(GameSequenceFunctionLibrary_StartEventSequence) == 0x000018, "Wrong size on GameSequenceFunctionLibrary_StartEventSequence");
static_assert(offsetof(GameSequenceFunctionLibrary_StartEventSequence, event_id) == 0x000000, "Member 'GameSequenceFunctionLibrary_StartEventSequence::event_id' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartEventSequence, quest_state) == 0x000008, "Member 'GameSequenceFunctionLibrary_StartEventSequence::quest_state' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartEventSequence, fast_travel_id) == 0x00000C, "Member 'GameSequenceFunctionLibrary_StartEventSequence::fast_travel_id' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartEventSequence, debug_play) == 0x000014, "Member 'GameSequenceFunctionLibrary_StartEventSequence::debug_play' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartEventSequence, is_reopen_quest_ui) == 0x000015, "Member 'GameSequenceFunctionLibrary_StartEventSequence::is_reopen_quest_ui' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartEventSequence, is_keep_hide_ui) == 0x000016, "Member 'GameSequenceFunctionLibrary_StartEventSequence::is_keep_hide_ui' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartEventSequence, is_keep_disable_input) == 0x000017, "Member 'GameSequenceFunctionLibrary_StartEventSequence::is_keep_disable_input' has a wrong offset!");

// Function DarwinGame.GameSequenceFunctionLibrary.StartFastTravelSequence
// 0x000C (0x000C - 0x0000)
struct GameSequenceFunctionLibrary_StartFastTravelSequence final
{
public:
	class FName                                   fast_travel_id;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFastTravelWarpCategory                       warp;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFastTravelLoadingShowType                    loading_show_type;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is_arrival_event_skip;                             // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSequenceFunctionLibrary_StartFastTravelSequence) == 0x000004, "Wrong alignment on GameSequenceFunctionLibrary_StartFastTravelSequence");
static_assert(sizeof(GameSequenceFunctionLibrary_StartFastTravelSequence) == 0x00000C, "Wrong size on GameSequenceFunctionLibrary_StartFastTravelSequence");
static_assert(offsetof(GameSequenceFunctionLibrary_StartFastTravelSequence, fast_travel_id) == 0x000000, "Member 'GameSequenceFunctionLibrary_StartFastTravelSequence::fast_travel_id' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartFastTravelSequence, warp) == 0x000008, "Member 'GameSequenceFunctionLibrary_StartFastTravelSequence::warp' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartFastTravelSequence, loading_show_type) == 0x000009, "Member 'GameSequenceFunctionLibrary_StartFastTravelSequence::loading_show_type' has a wrong offset!");
static_assert(offsetof(GameSequenceFunctionLibrary_StartFastTravelSequence, is_arrival_event_skip) == 0x00000A, "Member 'GameSequenceFunctionLibrary_StartFastTravelSequence::is_arrival_event_skip' has a wrong offset!");

// Function DarwinGame.GameSequenceFunctionLibrary.StartNewItemGetSequence
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceFunctionLibrary_StartNewItemGetSequence final
{
public:
	bool                                          bIsSkipTeamRankUpSequecne;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceFunctionLibrary_StartNewItemGetSequence) == 0x000001, "Wrong alignment on GameSequenceFunctionLibrary_StartNewItemGetSequence");
static_assert(sizeof(GameSequenceFunctionLibrary_StartNewItemGetSequence) == 0x000001, "Wrong size on GameSequenceFunctionLibrary_StartNewItemGetSequence");
static_assert(offsetof(GameSequenceFunctionLibrary_StartNewItemGetSequence, bIsSkipTeamRankUpSequecne) == 0x000000, "Member 'GameSequenceFunctionLibrary_StartNewItemGetSequence::bIsSkipTeamRankUpSequecne' has a wrong offset!");

// Function DarwinGame.GameSequenceFunctionLibrary.StartOpenLevelSequence
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceFunctionLibrary_StartOpenLevelSequence final
{
public:
	class FName                                   fast_travel_id;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceFunctionLibrary_StartOpenLevelSequence) == 0x000004, "Wrong alignment on GameSequenceFunctionLibrary_StartOpenLevelSequence");
static_assert(sizeof(GameSequenceFunctionLibrary_StartOpenLevelSequence) == 0x000008, "Wrong size on GameSequenceFunctionLibrary_StartOpenLevelSequence");
static_assert(offsetof(GameSequenceFunctionLibrary_StartOpenLevelSequence, fast_travel_id) == 0x000000, "Member 'GameSequenceFunctionLibrary_StartOpenLevelSequence::fast_travel_id' has a wrong offset!");

// Function DarwinGame.GameSetting.GetPCResolutionIndex
// 0x0002 (0x0002 - 0x0000)
struct GameSetting_GetPCResolutionIndex final
{
public:
	bool                                          AllowUnsetValue;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionResolutionIndex                        ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetPCResolutionIndex) == 0x000001, "Wrong alignment on GameSetting_GetPCResolutionIndex");
static_assert(sizeof(GameSetting_GetPCResolutionIndex) == 0x000002, "Wrong size on GameSetting_GetPCResolutionIndex");
static_assert(offsetof(GameSetting_GetPCResolutionIndex, AllowUnsetValue) == 0x000000, "Member 'GameSetting_GetPCResolutionIndex::AllowUnsetValue' has a wrong offset!");
static_assert(offsetof(GameSetting_GetPCResolutionIndex, ReturnValue) == 0x000001, "Member 'GameSetting_GetPCResolutionIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameSetting.GetPCWindowMode
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_GetPCWindowMode final
{
public:
	EOptionWindowMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetPCWindowMode) == 0x000001, "Wrong alignment on GameSetting_GetPCWindowMode");
static_assert(sizeof(GameSetting_GetPCWindowMode) == 0x000001, "Wrong size on GameSetting_GetPCWindowMode");
static_assert(offsetof(GameSetting_GetPCWindowMode, ReturnValue) == 0x000000, "Member 'GameSetting_GetPCWindowMode::ReturnValue' has a wrong offset!");

// Function DarwinGame.GameSetting.ReflectDisplaySettings
// 0x0008 (0x0008 - 0x0000)
struct GameSetting_ReflectDisplaySettings final
{
public:
	const class UGameDataOption*                  GameDataOption;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_ReflectDisplaySettings) == 0x000008, "Wrong alignment on GameSetting_ReflectDisplaySettings");
static_assert(sizeof(GameSetting_ReflectDisplaySettings) == 0x000008, "Wrong size on GameSetting_ReflectDisplaySettings");
static_assert(offsetof(GameSetting_ReflectDisplaySettings, GameDataOption) == 0x000000, "Member 'GameSetting_ReflectDisplaySettings::GameDataOption' has a wrong offset!");

// Function DarwinGame.GameSetting.ReflectGraphicSettings
// 0x0008 (0x0008 - 0x0000)
struct GameSetting_ReflectGraphicSettings final
{
public:
	const class UGameDataOption*                  GameDataOption;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_ReflectGraphicSettings) == 0x000008, "Wrong alignment on GameSetting_ReflectGraphicSettings");
static_assert(sizeof(GameSetting_ReflectGraphicSettings) == 0x000008, "Wrong size on GameSetting_ReflectGraphicSettings");
static_assert(offsetof(GameSetting_ReflectGraphicSettings, GameDataOption) == 0x000000, "Member 'GameSetting_ReflectGraphicSettings::GameDataOption' has a wrong offset!");

// Function DarwinGame.GameSetting.SetAmbient
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetAmbient final
{
public:
	EOptionAmbient                                InAmbientValue;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetAmbient) == 0x000001, "Wrong alignment on GameSetting_SetAmbient");
static_assert(sizeof(GameSetting_SetAmbient) == 0x000001, "Wrong size on GameSetting_SetAmbient");
static_assert(offsetof(GameSetting_SetAmbient, InAmbientValue) == 0x000000, "Member 'GameSetting_SetAmbient::InAmbientValue' has a wrong offset!");

// Function DarwinGame.GameSetting.SetAntialiasing
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetAntialiasing final
{
public:
	EOptionAntialiasing                           InAntialiasing;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetAntialiasing) == 0x000001, "Wrong alignment on GameSetting_SetAntialiasing");
static_assert(sizeof(GameSetting_SetAntialiasing) == 0x000001, "Wrong size on GameSetting_SetAntialiasing");
static_assert(offsetof(GameSetting_SetAntialiasing, InAntialiasing) == 0x000000, "Member 'GameSetting_SetAntialiasing::InAntialiasing' has a wrong offset!");

// Function DarwinGame.GameSetting.SetBloom
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetBloom final
{
public:
	EOptionBloom                                  InBloom;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetBloom) == 0x000001, "Wrong alignment on GameSetting_SetBloom");
static_assert(sizeof(GameSetting_SetBloom) == 0x000001, "Wrong size on GameSetting_SetBloom");
static_assert(offsetof(GameSetting_SetBloom, InBloom) == 0x000000, "Member 'GameSetting_SetBloom::InBloom' has a wrong offset!");

// Function DarwinGame.GameSetting.SetBrightness
// 0x0004 (0x0004 - 0x0000)
struct GameSetting_SetBrightness final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetBrightness) == 0x000004, "Wrong alignment on GameSetting_SetBrightness");
static_assert(sizeof(GameSetting_SetBrightness) == 0x000004, "Wrong size on GameSetting_SetBrightness");
static_assert(offsetof(GameSetting_SetBrightness, InValue) == 0x000000, "Member 'GameSetting_SetBrightness::InValue' has a wrong offset!");

// Function DarwinGame.GameSetting.SetDensity
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetDensity final
{
public:
	EOptionDensity                                InDensity;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetDensity) == 0x000001, "Wrong alignment on GameSetting_SetDensity");
static_assert(sizeof(GameSetting_SetDensity) == 0x000001, "Wrong size on GameSetting_SetDensity");
static_assert(offsetof(GameSetting_SetDensity, InDensity) == 0x000000, "Member 'GameSetting_SetDensity::InDensity' has a wrong offset!");

// Function DarwinGame.GameSetting.SetDepthOfFieldQuality
// 0x0004 (0x0004 - 0x0000)
struct GameSetting_SetDepthOfFieldQuality final
{
public:
	int32                                         Quality;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetDepthOfFieldQuality) == 0x000004, "Wrong alignment on GameSetting_SetDepthOfFieldQuality");
static_assert(sizeof(GameSetting_SetDepthOfFieldQuality) == 0x000004, "Wrong size on GameSetting_SetDepthOfFieldQuality");
static_assert(offsetof(GameSetting_SetDepthOfFieldQuality, Quality) == 0x000000, "Member 'GameSetting_SetDepthOfFieldQuality::Quality' has a wrong offset!");

// Function DarwinGame.GameSetting.SetDisplayData
// 0x000C (0x000C - 0x0000)
struct GameSetting_SetDisplayData final
{
public:
	EOptionBrightness                             InBrightnessVolume;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InFpsValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVysncIsEnabled;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSetting_SetDisplayData) == 0x000004, "Wrong alignment on GameSetting_SetDisplayData");
static_assert(sizeof(GameSetting_SetDisplayData) == 0x00000C, "Wrong size on GameSetting_SetDisplayData");
static_assert(offsetof(GameSetting_SetDisplayData, InBrightnessVolume) == 0x000000, "Member 'GameSetting_SetDisplayData::InBrightnessVolume' has a wrong offset!");
static_assert(offsetof(GameSetting_SetDisplayData, InFpsValue) == 0x000004, "Member 'GameSetting_SetDisplayData::InFpsValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetDisplayData, InVysncIsEnabled) == 0x000008, "Member 'GameSetting_SetDisplayData::InVysncIsEnabled' has a wrong offset!");

// Function DarwinGame.GameSetting.SetGraphicData
// 0x0009 (0x0009 - 0x0000)
struct GameSetting_SetGraphicData final
{
public:
	EOptionAntialiasing                           InAntialiasingValue;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionAmbient                                InAmbientValue;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionShadow                                 InShadowValue;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionGraphicsQuality                        InTextureFilterValue;                              // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionGraphicsQuality                        InTextureDetailValue;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionDensity                                InDensityValue;                                    // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionLOD                                    InLODValue;                                        // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionReflection                             InReflectionValue;                                 // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionBloom                                  InBloomValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetGraphicData) == 0x000001, "Wrong alignment on GameSetting_SetGraphicData");
static_assert(sizeof(GameSetting_SetGraphicData) == 0x000009, "Wrong size on GameSetting_SetGraphicData");
static_assert(offsetof(GameSetting_SetGraphicData, InAntialiasingValue) == 0x000000, "Member 'GameSetting_SetGraphicData::InAntialiasingValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InAmbientValue) == 0x000001, "Member 'GameSetting_SetGraphicData::InAmbientValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InShadowValue) == 0x000002, "Member 'GameSetting_SetGraphicData::InShadowValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InTextureFilterValue) == 0x000003, "Member 'GameSetting_SetGraphicData::InTextureFilterValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InTextureDetailValue) == 0x000004, "Member 'GameSetting_SetGraphicData::InTextureDetailValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InDensityValue) == 0x000005, "Member 'GameSetting_SetGraphicData::InDensityValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InLODValue) == 0x000006, "Member 'GameSetting_SetGraphicData::InLODValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InReflectionValue) == 0x000007, "Member 'GameSetting_SetGraphicData::InReflectionValue' has a wrong offset!");
static_assert(offsetof(GameSetting_SetGraphicData, InBloomValue) == 0x000008, "Member 'GameSetting_SetGraphicData::InBloomValue' has a wrong offset!");

// Function DarwinGame.GameSetting.SetLOD
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetLOD final
{
public:
	EOptionLOD                                    InLOD;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetLOD) == 0x000001, "Wrong alignment on GameSetting_SetLOD");
static_assert(sizeof(GameSetting_SetLOD) == 0x000001, "Wrong size on GameSetting_SetLOD");
static_assert(offsetof(GameSetting_SetLOD, InLOD) == 0x000000, "Member 'GameSetting_SetLOD::InLOD' has a wrong offset!");

// Function DarwinGame.GameSetting.SetPCFps
// 0x0004 (0x0004 - 0x0000)
struct GameSetting_SetPCFps final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetPCFps) == 0x000004, "Wrong alignment on GameSetting_SetPCFps");
static_assert(sizeof(GameSetting_SetPCFps) == 0x000004, "Wrong size on GameSetting_SetPCFps");
static_assert(offsetof(GameSetting_SetPCFps, InValue) == 0x000000, "Member 'GameSetting_SetPCFps::InValue' has a wrong offset!");

// Function DarwinGame.GameSetting.SetPCResolution
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetPCResolution final
{
public:
	EOptionResolutionIndex                        InResolutionIndex;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetPCResolution) == 0x000001, "Wrong alignment on GameSetting_SetPCResolution");
static_assert(sizeof(GameSetting_SetPCResolution) == 0x000001, "Wrong size on GameSetting_SetPCResolution");
static_assert(offsetof(GameSetting_SetPCResolution, InResolutionIndex) == 0x000000, "Member 'GameSetting_SetPCResolution::InResolutionIndex' has a wrong offset!");

// Function DarwinGame.GameSetting.SetPCVsync
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetPCVsync final
{
public:
	bool                                          InEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetPCVsync) == 0x000001, "Wrong alignment on GameSetting_SetPCVsync");
static_assert(sizeof(GameSetting_SetPCVsync) == 0x000001, "Wrong size on GameSetting_SetPCVsync");
static_assert(offsetof(GameSetting_SetPCVsync, InEnabled) == 0x000000, "Member 'GameSetting_SetPCVsync::InEnabled' has a wrong offset!");

// Function DarwinGame.GameSetting.SetPCWindowMode
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetPCWindowMode final
{
public:
	EOptionWindowMode                             InWindowMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetPCWindowMode) == 0x000001, "Wrong alignment on GameSetting_SetPCWindowMode");
static_assert(sizeof(GameSetting_SetPCWindowMode) == 0x000001, "Wrong size on GameSetting_SetPCWindowMode");
static_assert(offsetof(GameSetting_SetPCWindowMode, InWindowMode) == 0x000000, "Member 'GameSetting_SetPCWindowMode::InWindowMode' has a wrong offset!");

// Function DarwinGame.GameSetting.SetReflection
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetReflection final
{
public:
	EOptionReflection                             InReflection;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetReflection) == 0x000001, "Wrong alignment on GameSetting_SetReflection");
static_assert(sizeof(GameSetting_SetReflection) == 0x000001, "Wrong size on GameSetting_SetReflection");
static_assert(offsetof(GameSetting_SetReflection, InReflection) == 0x000000, "Member 'GameSetting_SetReflection::InReflection' has a wrong offset!");

// Function DarwinGame.GameSetting.SetRendering
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetRendering final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetRendering) == 0x000001, "Wrong alignment on GameSetting_SetRendering");
static_assert(sizeof(GameSetting_SetRendering) == 0x000001, "Wrong size on GameSetting_SetRendering");
static_assert(offsetof(GameSetting_SetRendering, Visibility) == 0x000000, "Member 'GameSetting_SetRendering::Visibility' has a wrong offset!");

// Function DarwinGame.GameSetting.SetResolutionData
// 0x0002 (0x0002 - 0x0000)
struct GameSetting_SetResolutionData final
{
public:
	EOptionResolutionIndex                        InResolutionIndex;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionWindowMode                             InWindowMode;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetResolutionData) == 0x000001, "Wrong alignment on GameSetting_SetResolutionData");
static_assert(sizeof(GameSetting_SetResolutionData) == 0x000002, "Wrong size on GameSetting_SetResolutionData");
static_assert(offsetof(GameSetting_SetResolutionData, InResolutionIndex) == 0x000000, "Member 'GameSetting_SetResolutionData::InResolutionIndex' has a wrong offset!");
static_assert(offsetof(GameSetting_SetResolutionData, InWindowMode) == 0x000001, "Member 'GameSetting_SetResolutionData::InWindowMode' has a wrong offset!");

// Function DarwinGame.GameSetting.SetShadow
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetShadow final
{
public:
	EOptionShadow                                 InShadow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetShadow) == 0x000001, "Wrong alignment on GameSetting_SetShadow");
static_assert(sizeof(GameSetting_SetShadow) == 0x000001, "Wrong size on GameSetting_SetShadow");
static_assert(offsetof(GameSetting_SetShadow, InShadow) == 0x000000, "Member 'GameSetting_SetShadow::InShadow' has a wrong offset!");

// Function DarwinGame.GameSetting.SetTextureDetail
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetTextureDetail final
{
public:
	EOptionGraphicsQuality                        InTextureDetail;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetTextureDetail) == 0x000001, "Wrong alignment on GameSetting_SetTextureDetail");
static_assert(sizeof(GameSetting_SetTextureDetail) == 0x000001, "Wrong size on GameSetting_SetTextureDetail");
static_assert(offsetof(GameSetting_SetTextureDetail, InTextureDetail) == 0x000000, "Member 'GameSetting_SetTextureDetail::InTextureDetail' has a wrong offset!");

// Function DarwinGame.GameSetting.SetTextureFilter
// 0x0001 (0x0001 - 0x0000)
struct GameSetting_SetTextureFilter final
{
public:
	EOptionGraphicsQuality                        InTextureFilter;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_SetTextureFilter) == 0x000001, "Wrong alignment on GameSetting_SetTextureFilter");
static_assert(sizeof(GameSetting_SetTextureFilter) == 0x000001, "Wrong size on GameSetting_SetTextureFilter");
static_assert(offsetof(GameSetting_SetTextureFilter, InTextureFilter) == 0x000000, "Member 'GameSetting_SetTextureFilter::InTextureFilter' has a wrong offset!");

// Function DarwinGame.GameSetting.GetWindowsDesktopResolution
// 0x0008 (0x0008 - 0x0000)
struct GameSetting_GetWindowsDesktopResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSetting_GetWindowsDesktopResolution) == 0x000004, "Wrong alignment on GameSetting_GetWindowsDesktopResolution");
static_assert(sizeof(GameSetting_GetWindowsDesktopResolution) == 0x000008, "Wrong size on GameSetting_GetWindowsDesktopResolution");
static_assert(offsetof(GameSetting_GetWindowsDesktopResolution, ReturnValue) == 0x000000, "Member 'GameSetting_GetWindowsDesktopResolution::ReturnValue' has a wrong offset!");

// Function DarwinGame.GenSoundBaseComponent.OnSoundActiveRangeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap) == 0x000008, "Wrong alignment on GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap");
static_assert(sizeof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap) == 0x0000A8, "Wrong size on GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap, OverlappedComp) == 0x000000, "Member 'GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap, OtherActor) == 0x000008, "Member 'GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap, OtherComp) == 0x000010, "Member 'GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap, bFromSweep) == 0x00001C, "Member 'GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap, SweepResult) == 0x000020, "Member 'GenSoundBaseComponent_OnSoundActiveRangeBeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.GenSoundBaseComponent.OnSoundActiveRangeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct GenSoundBaseComponent_OnSoundActiveRangeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GenSoundBaseComponent_OnSoundActiveRangeEndOverlap) == 0x000008, "Wrong alignment on GenSoundBaseComponent_OnSoundActiveRangeEndOverlap");
static_assert(sizeof(GenSoundBaseComponent_OnSoundActiveRangeEndOverlap) == 0x000020, "Wrong size on GenSoundBaseComponent_OnSoundActiveRangeEndOverlap");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeEndOverlap, OverlappedComp) == 0x000000, "Member 'GenSoundBaseComponent_OnSoundActiveRangeEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeEndOverlap, OtherActor) == 0x000008, "Member 'GenSoundBaseComponent_OnSoundActiveRangeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeEndOverlap, OtherComp) == 0x000010, "Member 'GenSoundBaseComponent_OnSoundActiveRangeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(GenSoundBaseComponent_OnSoundActiveRangeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'GenSoundBaseComponent_OnSoundActiveRangeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.GiraMagicBase.StopPillarOfFier
// 0x0008 (0x0008 - 0x0000)
struct GiraMagicBase_StopPillarOfFier final
{
public:
	class AEffectBase*                            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GiraMagicBase_StopPillarOfFier) == 0x000008, "Wrong alignment on GiraMagicBase_StopPillarOfFier");
static_assert(sizeof(GiraMagicBase_StopPillarOfFier) == 0x000008, "Wrong size on GiraMagicBase_StopPillarOfFier");
static_assert(offsetof(GiraMagicBase_StopPillarOfFier, Effect) == 0x000000, "Member 'GiraMagicBase_StopPillarOfFier::Effect' has a wrong offset!");

// Function DarwinGame.GrenadeSlingShotBullet.OnOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct GrenadeSlingShotBullet_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrenadeSlingShotBullet_OnOverlapBegin) == 0x000008, "Wrong alignment on GrenadeSlingShotBullet_OnOverlapBegin");
static_assert(sizeof(GrenadeSlingShotBullet_OnOverlapBegin) == 0x0000A8, "Wrong size on GrenadeSlingShotBullet_OnOverlapBegin");
static_assert(offsetof(GrenadeSlingShotBullet_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'GrenadeSlingShotBullet_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(GrenadeSlingShotBullet_OnOverlapBegin, OtherActor) == 0x000008, "Member 'GrenadeSlingShotBullet_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(GrenadeSlingShotBullet_OnOverlapBegin, OtherComp) == 0x000010, "Member 'GrenadeSlingShotBullet_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(GrenadeSlingShotBullet_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'GrenadeSlingShotBullet_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(GrenadeSlingShotBullet_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'GrenadeSlingShotBullet_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(GrenadeSlingShotBullet_OnOverlapBegin, SweepResult) == 0x000020, "Member 'GrenadeSlingShotBullet_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function DarwinGame.GroundStateLand.SetInputEnabled
// 0x0001 (0x0001 - 0x0000)
struct GroundStateLand_SetInputEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundStateLand_SetInputEnabled) == 0x000001, "Wrong alignment on GroundStateLand_SetInputEnabled");
static_assert(sizeof(GroundStateLand_SetInputEnabled) == 0x000001, "Wrong size on GroundStateLand_SetInputEnabled");
static_assert(offsetof(GroundStateLand_SetInputEnabled, Enabled) == 0x000000, "Member 'GroundStateLand_SetInputEnabled::Enabled' has a wrong offset!");

// Function DarwinGame.GroundStateLand.SetJumpEnabled
// 0x0001 (0x0001 - 0x0000)
struct GroundStateLand_SetJumpEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundStateLand_SetJumpEnabled) == 0x000001, "Wrong alignment on GroundStateLand_SetJumpEnabled");
static_assert(sizeof(GroundStateLand_SetJumpEnabled) == 0x000001, "Wrong size on GroundStateLand_SetJumpEnabled");
static_assert(offsetof(GroundStateLand_SetJumpEnabled, Enabled) == 0x000000, "Member 'GroundStateLand_SetJumpEnabled::Enabled' has a wrong offset!");

// Function DarwinGame.UIAbilityBase.InitWidget
// 0x0038 (0x0038 - 0x0000)
struct UIAbilityBase_InitWidget final
{
public:
	class UImage*                                 abilityIcon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             nameWidget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             noteWidget;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUICoinRankIcon*                        rankIcon;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIUpDownIcon*                          upDownIcon;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidgetAnimation*>               panelAnmAry;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAbilityBase_InitWidget) == 0x000008, "Wrong alignment on UIAbilityBase_InitWidget");
static_assert(sizeof(UIAbilityBase_InitWidget) == 0x000038, "Wrong size on UIAbilityBase_InitWidget");
static_assert(offsetof(UIAbilityBase_InitWidget, abilityIcon) == 0x000000, "Member 'UIAbilityBase_InitWidget::abilityIcon' has a wrong offset!");
static_assert(offsetof(UIAbilityBase_InitWidget, nameWidget) == 0x000008, "Member 'UIAbilityBase_InitWidget::nameWidget' has a wrong offset!");
static_assert(offsetof(UIAbilityBase_InitWidget, noteWidget) == 0x000010, "Member 'UIAbilityBase_InitWidget::noteWidget' has a wrong offset!");
static_assert(offsetof(UIAbilityBase_InitWidget, rankIcon) == 0x000018, "Member 'UIAbilityBase_InitWidget::rankIcon' has a wrong offset!");
static_assert(offsetof(UIAbilityBase_InitWidget, upDownIcon) == 0x000020, "Member 'UIAbilityBase_InitWidget::upDownIcon' has a wrong offset!");
static_assert(offsetof(UIAbilityBase_InitWidget, panelAnmAry) == 0x000028, "Member 'UIAbilityBase_InitWidget::panelAnmAry' has a wrong offset!");

// Function DarwinGame.UIAbilityBase.SetData
// 0x000C (0x000C - 0x0000)
struct UIAbilityBase_SetData final
{
public:
	struct FST_CoinFeature                        InParam;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAbilityBase_SetData) == 0x000004, "Wrong alignment on UIAbilityBase_SetData");
static_assert(sizeof(UIAbilityBase_SetData) == 0x00000C, "Wrong size on UIAbilityBase_SetData");
static_assert(offsetof(UIAbilityBase_SetData, InParam) == 0x000000, "Member 'UIAbilityBase_SetData::InParam' has a wrong offset!");

// Function DarwinGame.GuestEditLibrary.K2_Add
// 0x000C (0x000C - 0x0000)
struct GuestEditLibrary_K2_Add final
{
public:
	int32                                         stockUid;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuestEditOption                       Option;                                            // 0x0004(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuestEditLibrary_K2_Add) == 0x000004, "Wrong alignment on GuestEditLibrary_K2_Add");
static_assert(sizeof(GuestEditLibrary_K2_Add) == 0x00000C, "Wrong size on GuestEditLibrary_K2_Add");
static_assert(offsetof(GuestEditLibrary_K2_Add, stockUid) == 0x000000, "Member 'GuestEditLibrary_K2_Add::stockUid' has a wrong offset!");
static_assert(offsetof(GuestEditLibrary_K2_Add, Option) == 0x000004, "Member 'GuestEditLibrary_K2_Add::Option' has a wrong offset!");
static_assert(offsetof(GuestEditLibrary_K2_Add, ReturnValue) == 0x000008, "Member 'GuestEditLibrary_K2_Add::ReturnValue' has a wrong offset!");

// Function DarwinGame.GuestEditLibrary.K2_MemberChange
// 0x0018 (0x0018 - 0x0000)
struct GuestEditLibrary_K2_MemberChange final
{
public:
	TArray<int32>                                 stockUids;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuestEditOption                       Option;                                            // 0x0010(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuestEditLibrary_K2_MemberChange) == 0x000008, "Wrong alignment on GuestEditLibrary_K2_MemberChange");
static_assert(sizeof(GuestEditLibrary_K2_MemberChange) == 0x000018, "Wrong size on GuestEditLibrary_K2_MemberChange");
static_assert(offsetof(GuestEditLibrary_K2_MemberChange, stockUids) == 0x000000, "Member 'GuestEditLibrary_K2_MemberChange::stockUids' has a wrong offset!");
static_assert(offsetof(GuestEditLibrary_K2_MemberChange, Option) == 0x000010, "Member 'GuestEditLibrary_K2_MemberChange::Option' has a wrong offset!");

// Function DarwinGame.GuestEditLibrary.K2_Remove
// 0x000C (0x000C - 0x0000)
struct GuestEditLibrary_K2_Remove final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuestEditOption                       Option;                                            // 0x0004(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuestEditLibrary_K2_Remove) == 0x000004, "Wrong alignment on GuestEditLibrary_K2_Remove");
static_assert(sizeof(GuestEditLibrary_K2_Remove) == 0x00000C, "Wrong size on GuestEditLibrary_K2_Remove");
static_assert(offsetof(GuestEditLibrary_K2_Remove, partyIndex) == 0x000000, "Member 'GuestEditLibrary_K2_Remove::partyIndex' has a wrong offset!");
static_assert(offsetof(GuestEditLibrary_K2_Remove, Option) == 0x000004, "Member 'GuestEditLibrary_K2_Remove::Option' has a wrong offset!");
static_assert(offsetof(GuestEditLibrary_K2_Remove, ReturnValue) == 0x000008, "Member 'GuestEditLibrary_K2_Remove::ReturnValue' has a wrong offset!");

// Function DarwinGame.RectTriggerBase.OnComponentBeginOverlapForBind
// 0x00A8 (0x00A8 - 0x0000)
struct RectTriggerBase_OnComponentBeginOverlapForBind final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RectTriggerBase_OnComponentBeginOverlapForBind) == 0x000008, "Wrong alignment on RectTriggerBase_OnComponentBeginOverlapForBind");
static_assert(sizeof(RectTriggerBase_OnComponentBeginOverlapForBind) == 0x0000A8, "Wrong size on RectTriggerBase_OnComponentBeginOverlapForBind");
static_assert(offsetof(RectTriggerBase_OnComponentBeginOverlapForBind, OverlappedComponent) == 0x000000, "Member 'RectTriggerBase_OnComponentBeginOverlapForBind::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentBeginOverlapForBind, OtherActor) == 0x000008, "Member 'RectTriggerBase_OnComponentBeginOverlapForBind::OtherActor' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentBeginOverlapForBind, OtherComp) == 0x000010, "Member 'RectTriggerBase_OnComponentBeginOverlapForBind::OtherComp' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentBeginOverlapForBind, OtherBodyIndex) == 0x000018, "Member 'RectTriggerBase_OnComponentBeginOverlapForBind::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentBeginOverlapForBind, bFromSweep) == 0x00001C, "Member 'RectTriggerBase_OnComponentBeginOverlapForBind::bFromSweep' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentBeginOverlapForBind, SweepResult) == 0x000020, "Member 'RectTriggerBase_OnComponentBeginOverlapForBind::SweepResult' has a wrong offset!");

// Function DarwinGame.RectTriggerBase.OnComponentEndOverlapForBind
// 0x0020 (0x0020 - 0x0000)
struct RectTriggerBase_OnComponentEndOverlapForBind final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RectTriggerBase_OnComponentEndOverlapForBind) == 0x000008, "Wrong alignment on RectTriggerBase_OnComponentEndOverlapForBind");
static_assert(sizeof(RectTriggerBase_OnComponentEndOverlapForBind) == 0x000020, "Wrong size on RectTriggerBase_OnComponentEndOverlapForBind");
static_assert(offsetof(RectTriggerBase_OnComponentEndOverlapForBind, OverlappedComponent) == 0x000000, "Member 'RectTriggerBase_OnComponentEndOverlapForBind::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentEndOverlapForBind, OtherActor) == 0x000008, "Member 'RectTriggerBase_OnComponentEndOverlapForBind::OtherActor' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentEndOverlapForBind, OtherComp) == 0x000010, "Member 'RectTriggerBase_OnComponentEndOverlapForBind::OtherComp' has a wrong offset!");
static_assert(offsetof(RectTriggerBase_OnComponentEndOverlapForBind, OtherBodyIndex) == 0x000018, "Member 'RectTriggerBase_OnComponentEndOverlapForBind::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.RectTriggerBase.OnEnterTrigger
// 0x0008 (0x0008 - 0x0000)
struct RectTriggerBase_OnEnterTrigger final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RectTriggerBase_OnEnterTrigger) == 0x000008, "Wrong alignment on RectTriggerBase_OnEnterTrigger");
static_assert(sizeof(RectTriggerBase_OnEnterTrigger) == 0x000008, "Wrong size on RectTriggerBase_OnEnterTrigger");
static_assert(offsetof(RectTriggerBase_OnEnterTrigger, OtherActor) == 0x000000, "Member 'RectTriggerBase_OnEnterTrigger::OtherActor' has a wrong offset!");

// Function DarwinGame.RectTriggerBase.OnExitTrigger
// 0x0008 (0x0008 - 0x0000)
struct RectTriggerBase_OnExitTrigger final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RectTriggerBase_OnExitTrigger) == 0x000008, "Wrong alignment on RectTriggerBase_OnExitTrigger");
static_assert(sizeof(RectTriggerBase_OnExitTrigger) == 0x000008, "Wrong size on RectTriggerBase_OnExitTrigger");
static_assert(offsetof(RectTriggerBase_OnExitTrigger, OtherActor) == 0x000000, "Member 'RectTriggerBase_OnExitTrigger::OtherActor' has a wrong offset!");

// Function DarwinGame.SoundUtility.ControlBSComp
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_ControlBSComp final
{
public:
	ESoundControlType                             ControlType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomCompCategory                             CompCategory;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolume;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          Sound;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_ControlBSComp) == 0x000008, "Wrong alignment on SoundUtility_ControlBSComp");
static_assert(sizeof(SoundUtility_ControlBSComp) == 0x000018, "Wrong size on SoundUtility_ControlBSComp");
static_assert(offsetof(SoundUtility_ControlBSComp, ControlType) == 0x000000, "Member 'SoundUtility_ControlBSComp::ControlType' has a wrong offset!");
static_assert(offsetof(SoundUtility_ControlBSComp, CompCategory) == 0x000001, "Member 'SoundUtility_ControlBSComp::CompCategory' has a wrong offset!");
static_assert(offsetof(SoundUtility_ControlBSComp, FadeTime) == 0x000004, "Member 'SoundUtility_ControlBSComp::FadeTime' has a wrong offset!");
static_assert(offsetof(SoundUtility_ControlBSComp, FadeVolume) == 0x000008, "Member 'SoundUtility_ControlBSComp::FadeVolume' has a wrong offset!");
static_assert(offsetof(SoundUtility_ControlBSComp, Sound) == 0x000010, "Member 'SoundUtility_ControlBSComp::Sound' has a wrong offset!");

// Function DarwinGame.SoundUtility.FadeByACVolume
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_FadeByACVolume final
{
public:
	class UAtomComponent*                         Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundFadeType                                Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolume;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESFadeOutEndState                             FOState;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_FadeByACVolume) == 0x000008, "Wrong alignment on SoundUtility_FadeByACVolume");
static_assert(sizeof(SoundUtility_FadeByACVolume) == 0x000018, "Wrong size on SoundUtility_FadeByACVolume");
static_assert(offsetof(SoundUtility_FadeByACVolume, Component) == 0x000000, "Member 'SoundUtility_FadeByACVolume::Component' has a wrong offset!");
static_assert(offsetof(SoundUtility_FadeByACVolume, Type) == 0x000008, "Member 'SoundUtility_FadeByACVolume::Type' has a wrong offset!");
static_assert(offsetof(SoundUtility_FadeByACVolume, FadeTime) == 0x00000C, "Member 'SoundUtility_FadeByACVolume::FadeTime' has a wrong offset!");
static_assert(offsetof(SoundUtility_FadeByACVolume, FadeVolume) == 0x000010, "Member 'SoundUtility_FadeByACVolume::FadeVolume' has a wrong offset!");
static_assert(offsetof(SoundUtility_FadeByACVolume, FOState) == 0x000014, "Member 'SoundUtility_FadeByACVolume::FOState' has a wrong offset!");

// Function DarwinGame.SoundUtility.FadeByCSGroupTableVolume
// 0x0008 (0x0008 - 0x0000)
struct SoundUtility_FadeByCSGroupTableVolume final
{
public:
	class FName                                   GroupID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_FadeByCSGroupTableVolume) == 0x000004, "Wrong alignment on SoundUtility_FadeByCSGroupTableVolume");
static_assert(sizeof(SoundUtility_FadeByCSGroupTableVolume) == 0x000008, "Wrong size on SoundUtility_FadeByCSGroupTableVolume");
static_assert(offsetof(SoundUtility_FadeByCSGroupTableVolume, GroupID) == 0x000000, "Member 'SoundUtility_FadeByCSGroupTableVolume::GroupID' has a wrong offset!");

// Function DarwinGame.SoundUtility.FadeByEventStatus
// 0x0008 (0x0008 - 0x0000)
struct SoundUtility_FadeByEventStatus final
{
public:
	class FName                                   Timing;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_FadeByEventStatus) == 0x000004, "Wrong alignment on SoundUtility_FadeByEventStatus");
static_assert(sizeof(SoundUtility_FadeByEventStatus) == 0x000008, "Wrong size on SoundUtility_FadeByEventStatus");
static_assert(offsetof(SoundUtility_FadeByEventStatus, Timing) == 0x000000, "Member 'SoundUtility_FadeByEventStatus::Timing' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetBSComp
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_GetBSComp final
{
public:
	EAtomCompCategory                             CompCategory;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetBSComp) == 0x000008, "Wrong alignment on SoundUtility_GetBSComp");
static_assert(sizeof(SoundUtility_GetBSComp) == 0x000010, "Wrong size on SoundUtility_GetBSComp");
static_assert(offsetof(SoundUtility_GetBSComp, CompCategory) == 0x000000, "Member 'SoundUtility_GetBSComp::CompCategory' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetBSComp, ReturnValue) == 0x000008, "Member 'SoundUtility_GetBSComp::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetCueByCueSheetTable
// 0x0028 (0x0028 - 0x0000)
struct SoundUtility_GetCueByCueSheetTable final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetCueByCueSheetTable) == 0x000008, "Wrong alignment on SoundUtility_GetCueByCueSheetTable");
static_assert(sizeof(SoundUtility_GetCueByCueSheetTable) == 0x000028, "Wrong size on SoundUtility_GetCueByCueSheetTable");
static_assert(offsetof(SoundUtility_GetCueByCueSheetTable, Category) == 0x000000, "Member 'SoundUtility_GetCueByCueSheetTable::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetCueByCueSheetTable, SheetName) == 0x000004, "Member 'SoundUtility_GetCueByCueSheetTable::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetCueByCueSheetTable, CueName) == 0x000010, "Member 'SoundUtility_GetCueByCueSheetTable::CueName' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetCueByCueSheetTable, ReturnValue) == 0x000020, "Member 'SoundUtility_GetCueByCueSheetTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetESoundList
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_GetESoundList final
{
public:
	TArray<class UESoundBase*>                    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetESoundList) == 0x000008, "Wrong alignment on SoundUtility_GetESoundList");
static_assert(sizeof(SoundUtility_GetESoundList) == 0x000010, "Wrong size on SoundUtility_GetESoundList");
static_assert(offsetof(SoundUtility_GetESoundList, ReturnValue) == 0x000000, "Member 'SoundUtility_GetESoundList::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetGenCreatureList
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_GetGenCreatureList final
{
public:
	TArray<class UGenSoundBaseComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetGenCreatureList) == 0x000008, "Wrong alignment on SoundUtility_GetGenCreatureList");
static_assert(sizeof(SoundUtility_GetGenCreatureList) == 0x000010, "Wrong size on SoundUtility_GetGenCreatureList");
static_assert(offsetof(SoundUtility_GetGenCreatureList, ReturnValue) == 0x000000, "Member 'SoundUtility_GetGenCreatureList::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetGenNatureList
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_GetGenNatureList final
{
public:
	TArray<class UGenSoundBaseComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetGenNatureList) == 0x000008, "Wrong alignment on SoundUtility_GetGenNatureList");
static_assert(sizeof(SoundUtility_GetGenNatureList) == 0x000010, "Wrong size on SoundUtility_GetGenNatureList");
static_assert(offsetof(SoundUtility_GetGenNatureList, ReturnValue) == 0x000000, "Member 'SoundUtility_GetGenNatureList::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetLoadSoundStatus
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_GetLoadSoundStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetLoadSoundStatus) == 0x000001, "Wrong alignment on SoundUtility_GetLoadSoundStatus");
static_assert(sizeof(SoundUtility_GetLoadSoundStatus) == 0x000001, "Wrong size on SoundUtility_GetLoadSoundStatus");
static_assert(offsetof(SoundUtility_GetLoadSoundStatus, ReturnValue) == 0x000000, "Member 'SoundUtility_GetLoadSoundStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetParameterByTextSoundTable
// 0x0038 (0x0038 - 0x0000)
struct SoundUtility_GetParameterByTextSoundTable final
{
public:
	ETextSoundTableCategory                       Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RowName;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SheetName;                                         // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID_Me;                                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetParameterByTextSoundTable) == 0x000008, "Wrong alignment on SoundUtility_GetParameterByTextSoundTable");
static_assert(sizeof(SoundUtility_GetParameterByTextSoundTable) == 0x000038, "Wrong size on SoundUtility_GetParameterByTextSoundTable");
static_assert(offsetof(SoundUtility_GetParameterByTextSoundTable, Category) == 0x000000, "Member 'SoundUtility_GetParameterByTextSoundTable::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetParameterByTextSoundTable, RowName) == 0x000004, "Member 'SoundUtility_GetParameterByTextSoundTable::RowName' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetParameterByTextSoundTable, SheetName) == 0x00000C, "Member 'SoundUtility_GetParameterByTextSoundTable::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetParameterByTextSoundTable, ID) == 0x000018, "Member 'SoundUtility_GetParameterByTextSoundTable::ID' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetParameterByTextSoundTable, ID_Me) == 0x000028, "Member 'SoundUtility_GetParameterByTextSoundTable::ID_Me' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetSoundDataTable
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_GetSoundDataTable final
{
public:
	ESoundTableCategory                           STCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetSoundDataTable) == 0x000008, "Wrong alignment on SoundUtility_GetSoundDataTable");
static_assert(sizeof(SoundUtility_GetSoundDataTable) == 0x000010, "Wrong size on SoundUtility_GetSoundDataTable");
static_assert(offsetof(SoundUtility_GetSoundDataTable, STCategory) == 0x000000, "Member 'SoundUtility_GetSoundDataTable::STCategory' has a wrong offset!");
static_assert(offsetof(SoundUtility_GetSoundDataTable, ReturnValue) == 0x000008, "Member 'SoundUtility_GetSoundDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.GetUpdateSoundStatus
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_GetUpdateSoundStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_GetUpdateSoundStatus) == 0x000001, "Wrong alignment on SoundUtility_GetUpdateSoundStatus");
static_assert(sizeof(SoundUtility_GetUpdateSoundStatus) == 0x000001, "Wrong size on SoundUtility_GetUpdateSoundStatus");
static_assert(offsetof(SoundUtility_GetUpdateSoundStatus, ReturnValue) == 0x000000, "Member 'SoundUtility_GetUpdateSoundStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.IsChangeBgmBossBattle
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_IsChangeBgmBossBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_IsChangeBgmBossBattle) == 0x000001, "Wrong alignment on SoundUtility_IsChangeBgmBossBattle");
static_assert(sizeof(SoundUtility_IsChangeBgmBossBattle) == 0x000001, "Wrong size on SoundUtility_IsChangeBgmBossBattle");
static_assert(offsetof(SoundUtility_IsChangeBgmBossBattle, ReturnValue) == 0x000000, "Member 'SoundUtility_IsChangeBgmBossBattle::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.IsEnableBgmChange
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_IsEnableBgmChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_IsEnableBgmChange) == 0x000001, "Wrong alignment on SoundUtility_IsEnableBgmChange");
static_assert(sizeof(SoundUtility_IsEnableBgmChange) == 0x000001, "Wrong size on SoundUtility_IsEnableBgmChange");
static_assert(offsetof(SoundUtility_IsEnableBgmChange, ReturnValue) == 0x000000, "Member 'SoundUtility_IsEnableBgmChange::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.IsLoadedCueSheetEnvAll
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_IsLoadedCueSheetEnvAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_IsLoadedCueSheetEnvAll) == 0x000001, "Wrong alignment on SoundUtility_IsLoadedCueSheetEnvAll");
static_assert(sizeof(SoundUtility_IsLoadedCueSheetEnvAll) == 0x000001, "Wrong size on SoundUtility_IsLoadedCueSheetEnvAll");
static_assert(offsetof(SoundUtility_IsLoadedCueSheetEnvAll, ReturnValue) == 0x000000, "Member 'SoundUtility_IsLoadedCueSheetEnvAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.IsPlayingBgmName
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_IsPlayingBgmName final
{
public:
	class FString                                 CueName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_IsPlayingBgmName) == 0x000008, "Wrong alignment on SoundUtility_IsPlayingBgmName");
static_assert(sizeof(SoundUtility_IsPlayingBgmName) == 0x000018, "Wrong size on SoundUtility_IsPlayingBgmName");
static_assert(offsetof(SoundUtility_IsPlayingBgmName, CueName) == 0x000000, "Member 'SoundUtility_IsPlayingBgmName::CueName' has a wrong offset!");
static_assert(offsetof(SoundUtility_IsPlayingBgmName, ReturnValue) == 0x000010, "Member 'SoundUtility_IsPlayingBgmName::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.IsPlayingMe
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_IsPlayingMe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_IsPlayingMe) == 0x000001, "Wrong alignment on SoundUtility_IsPlayingMe");
static_assert(sizeof(SoundUtility_IsPlayingMe) == 0x000001, "Wrong size on SoundUtility_IsPlayingMe");
static_assert(offsetof(SoundUtility_IsPlayingMe, ReturnValue) == 0x000000, "Member 'SoundUtility_IsPlayingMe::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.IsStopBgmBossFinish
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_IsStopBgmBossFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_IsStopBgmBossFinish) == 0x000001, "Wrong alignment on SoundUtility_IsStopBgmBossFinish");
static_assert(sizeof(SoundUtility_IsStopBgmBossFinish) == 0x000001, "Wrong size on SoundUtility_IsStopBgmBossFinish");
static_assert(offsetof(SoundUtility_IsStopBgmBossFinish, ReturnValue) == 0x000000, "Member 'SoundUtility_IsStopBgmBossFinish::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.IsWaitStartBgmBaseAreaBattle
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_IsWaitStartBgmBaseAreaBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_IsWaitStartBgmBaseAreaBattle) == 0x000001, "Wrong alignment on SoundUtility_IsWaitStartBgmBaseAreaBattle");
static_assert(sizeof(SoundUtility_IsWaitStartBgmBaseAreaBattle) == 0x000001, "Wrong size on SoundUtility_IsWaitStartBgmBaseAreaBattle");
static_assert(offsetof(SoundUtility_IsWaitStartBgmBaseAreaBattle, ReturnValue) == 0x000000, "Member 'SoundUtility_IsWaitStartBgmBaseAreaBattle::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.LoadCueSheetByCueSheetTable
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_LoadCueSheetByCueSheetTable final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCueSheet*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_LoadCueSheetByCueSheetTable) == 0x000008, "Wrong alignment on SoundUtility_LoadCueSheetByCueSheetTable");
static_assert(sizeof(SoundUtility_LoadCueSheetByCueSheetTable) == 0x000018, "Wrong size on SoundUtility_LoadCueSheetByCueSheetTable");
static_assert(offsetof(SoundUtility_LoadCueSheetByCueSheetTable, Category) == 0x000000, "Member 'SoundUtility_LoadCueSheetByCueSheetTable::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_LoadCueSheetByCueSheetTable, SheetName) == 0x000004, "Member 'SoundUtility_LoadCueSheetByCueSheetTable::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_LoadCueSheetByCueSheetTable, ReturnValue) == 0x000010, "Member 'SoundUtility_LoadCueSheetByCueSheetTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.LoadCueSheetEnvAll
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_LoadCueSheetEnvAll final
{
public:
	EAreaType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_LoadCueSheetEnvAll) == 0x000001, "Wrong alignment on SoundUtility_LoadCueSheetEnvAll");
static_assert(sizeof(SoundUtility_LoadCueSheetEnvAll) == 0x000001, "Wrong size on SoundUtility_LoadCueSheetEnvAll");
static_assert(offsetof(SoundUtility_LoadCueSheetEnvAll, Type) == 0x000000, "Member 'SoundUtility_LoadCueSheetEnvAll::Type' has a wrong offset!");

// Function DarwinGame.SoundUtility.LoadCueSheetTravellerVoice
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_LoadCueSheetTravellerVoice final
{
public:
	bool                                          IsAutoTraveller;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_LoadCueSheetTravellerVoice) == 0x000001, "Wrong alignment on SoundUtility_LoadCueSheetTravellerVoice");
static_assert(sizeof(SoundUtility_LoadCueSheetTravellerVoice) == 0x000001, "Wrong size on SoundUtility_LoadCueSheetTravellerVoice");
static_assert(offsetof(SoundUtility_LoadCueSheetTravellerVoice, IsAutoTraveller) == 0x000000, "Member 'SoundUtility_LoadCueSheetTravellerVoice::IsAutoTraveller' has a wrong offset!");

// Function DarwinGame.SoundUtility.PauseBgm
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_PauseBgm final
{
public:
	EAtomCompCategory                             Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolume;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PauseBgm) == 0x000004, "Wrong alignment on SoundUtility_PauseBgm");
static_assert(sizeof(SoundUtility_PauseBgm) == 0x000010, "Wrong size on SoundUtility_PauseBgm");
static_assert(offsetof(SoundUtility_PauseBgm, Category) == 0x000000, "Member 'SoundUtility_PauseBgm::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_PauseBgm, FadeTime) == 0x000004, "Member 'SoundUtility_PauseBgm::FadeTime' has a wrong offset!");
static_assert(offsetof(SoundUtility_PauseBgm, FadeVolume) == 0x000008, "Member 'SoundUtility_PauseBgm::FadeVolume' has a wrong offset!");
static_assert(offsetof(SoundUtility_PauseBgm, Timer) == 0x00000C, "Member 'SoundUtility_PauseBgm::Timer' has a wrong offset!");

// Function DarwinGame.SoundUtility.Play2DLoopSoundByCueName
// 0x0020 (0x0020 - 0x0000)
struct SoundUtility_Play2DLoopSoundByCueName final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_Play2DLoopSoundByCueName) == 0x000008, "Wrong alignment on SoundUtility_Play2DLoopSoundByCueName");
static_assert(sizeof(SoundUtility_Play2DLoopSoundByCueName) == 0x000020, "Wrong size on SoundUtility_Play2DLoopSoundByCueName");
static_assert(offsetof(SoundUtility_Play2DLoopSoundByCueName, Category) == 0x000000, "Member 'SoundUtility_Play2DLoopSoundByCueName::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play2DLoopSoundByCueName, SheetName) == 0x000004, "Member 'SoundUtility_Play2DLoopSoundByCueName::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play2DLoopSoundByCueName, CueName) == 0x000010, "Member 'SoundUtility_Play2DLoopSoundByCueName::CueName' has a wrong offset!");

// Function DarwinGame.SoundUtility.Play2DSoundByCueName
// 0x0028 (0x0028 - 0x0000)
struct SoundUtility_Play2DSoundByCueName final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_Play2DSoundByCueName) == 0x000008, "Wrong alignment on SoundUtility_Play2DSoundByCueName");
static_assert(sizeof(SoundUtility_Play2DSoundByCueName) == 0x000028, "Wrong size on SoundUtility_Play2DSoundByCueName");
static_assert(offsetof(SoundUtility_Play2DSoundByCueName, Category) == 0x000000, "Member 'SoundUtility_Play2DSoundByCueName::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play2DSoundByCueName, SheetName) == 0x000004, "Member 'SoundUtility_Play2DSoundByCueName::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play2DSoundByCueName, CueName) == 0x000010, "Member 'SoundUtility_Play2DSoundByCueName::CueName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play2DSoundByCueName, ReturnValue) == 0x000020, "Member 'SoundUtility_Play2DSoundByCueName::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.Play3DSound
// 0x0030 (0x0030 - 0x0000)
struct SoundUtility_Play3DSound final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Component;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundInsulationType                          SIType;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_Play3DSound) == 0x000008, "Wrong alignment on SoundUtility_Play3DSound");
static_assert(sizeof(SoundUtility_Play3DSound) == 0x000030, "Wrong size on SoundUtility_Play3DSound");
static_assert(offsetof(SoundUtility_Play3DSound, Category) == 0x000000, "Member 'SoundUtility_Play3DSound::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play3DSound, SheetName) == 0x000004, "Member 'SoundUtility_Play3DSound::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play3DSound, CueName) == 0x000010, "Member 'SoundUtility_Play3DSound::CueName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play3DSound, Component) == 0x000020, "Member 'SoundUtility_Play3DSound::Component' has a wrong offset!");
static_assert(offsetof(SoundUtility_Play3DSound, SIType) == 0x000028, "Member 'SoundUtility_Play3DSound::SIType' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayBgm
// 0x0020 (0x0020 - 0x0000)
struct SoundUtility_PlayBgm final
{
public:
	EAtomCompCategory                             Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForce;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_PlayBgm) == 0x000008, "Wrong alignment on SoundUtility_PlayBgm");
static_assert(sizeof(SoundUtility_PlayBgm) == 0x000020, "Wrong size on SoundUtility_PlayBgm");
static_assert(offsetof(SoundUtility_PlayBgm, Category) == 0x000000, "Member 'SoundUtility_PlayBgm::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayBgm, CueName) == 0x000008, "Member 'SoundUtility_PlayBgm::CueName' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayBgm, IsForce) == 0x000018, "Member 'SoundUtility_PlayBgm::IsForce' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayBoardVoice
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_PlayBoardVoice final
{
public:
	EVoiceTiming                                  Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayBoardVoice) == 0x000001, "Wrong alignment on SoundUtility_PlayBoardVoice");
static_assert(sizeof(SoundUtility_PlayBoardVoice) == 0x000001, "Wrong size on SoundUtility_PlayBoardVoice");
static_assert(offsetof(SoundUtility_PlayBoardVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayBoardVoice::Timing' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayBossMonsterVoice
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_PlayBossMonsterVoice final
{
public:
	EVoiceTimingBoss                              Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMonsterBase*                           Monster;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3DPosition;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_PlayBossMonsterVoice) == 0x000008, "Wrong alignment on SoundUtility_PlayBossMonsterVoice");
static_assert(sizeof(SoundUtility_PlayBossMonsterVoice) == 0x000018, "Wrong size on SoundUtility_PlayBossMonsterVoice");
static_assert(offsetof(SoundUtility_PlayBossMonsterVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayBossMonsterVoice::Timing' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayBossMonsterVoice, Monster) == 0x000008, "Member 'SoundUtility_PlayBossMonsterVoice::Monster' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayBossMonsterVoice, Is3DPosition) == 0x000010, "Member 'SoundUtility_PlayBossMonsterVoice::Is3DPosition' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayEventSeByActor
// 0x0020 (0x0020 - 0x0000)
struct SoundUtility_PlayEventSeByActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SheetName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayEventSeByActor) == 0x000008, "Wrong alignment on SoundUtility_PlayEventSeByActor");
static_assert(sizeof(SoundUtility_PlayEventSeByActor) == 0x000020, "Wrong size on SoundUtility_PlayEventSeByActor");
static_assert(offsetof(SoundUtility_PlayEventSeByActor, Actor) == 0x000000, "Member 'SoundUtility_PlayEventSeByActor::Actor' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayEventSeByActor, SheetName) == 0x000008, "Member 'SoundUtility_PlayEventSeByActor::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayEventSeByActor, CueName) == 0x000010, "Member 'SoundUtility_PlayEventSeByActor::CueName' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayEventSeByPlayer
// 0x0028 (0x0028 - 0x0000)
struct SoundUtility_PlayEventSeByPlayer final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayer;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayEventSeByPlayer) == 0x000008, "Wrong alignment on SoundUtility_PlayEventSeByPlayer");
static_assert(sizeof(SoundUtility_PlayEventSeByPlayer) == 0x000028, "Wrong size on SoundUtility_PlayEventSeByPlayer");
static_assert(offsetof(SoundUtility_PlayEventSeByPlayer, Actor) == 0x000000, "Member 'SoundUtility_PlayEventSeByPlayer::Actor' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayEventSeByPlayer, IsPlayer) == 0x000008, "Member 'SoundUtility_PlayEventSeByPlayer::IsPlayer' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayEventSeByPlayer, SheetName) == 0x00000C, "Member 'SoundUtility_PlayEventSeByPlayer::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayEventSeByPlayer, CueName) == 0x000018, "Member 'SoundUtility_PlayEventSeByPlayer::CueName' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayFukidashiVoice
// 0x0020 (0x0020 - 0x0000)
struct SoundUtility_PlayFukidashiVoice final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcID;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayFukidashiVoice) == 0x000008, "Wrong alignment on SoundUtility_PlayFukidashiVoice");
static_assert(sizeof(SoundUtility_PlayFukidashiVoice) == 0x000020, "Wrong size on SoundUtility_PlayFukidashiVoice");
static_assert(offsetof(SoundUtility_PlayFukidashiVoice, RowName) == 0x000000, "Member 'SoundUtility_PlayFukidashiVoice::RowName' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayFukidashiVoice, NpcID) == 0x000008, "Member 'SoundUtility_PlayFukidashiVoice::NpcID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayFukidashiVoice, Actor) == 0x000010, "Member 'SoundUtility_PlayFukidashiVoice::Actor' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayFukidashiVoice, ReturnValue) == 0x000018, "Member 'SoundUtility_PlayFukidashiVoice::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayGuidePartVoice
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_PlayGuidePartVoice final
{
public:
	class FString                                 PartVoiceID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayGuidePartVoice) == 0x000008, "Wrong alignment on SoundUtility_PlayGuidePartVoice");
static_assert(sizeof(SoundUtility_PlayGuidePartVoice) == 0x000010, "Wrong size on SoundUtility_PlayGuidePartVoice");
static_assert(offsetof(SoundUtility_PlayGuidePartVoice, PartVoiceID) == 0x000000, "Member 'SoundUtility_PlayGuidePartVoice::PartVoiceID' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayGuideVoice
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_PlayGuideVoice final
{
public:
	EVoiceTimingGuide                             Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayGuideVoice) == 0x000001, "Wrong alignment on SoundUtility_PlayGuideVoice");
static_assert(sizeof(SoundUtility_PlayGuideVoice) == 0x000001, "Wrong size on SoundUtility_PlayGuideVoice");
static_assert(offsetof(SoundUtility_PlayGuideVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayGuideVoice::Timing' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayInstructorVoice
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_PlayInstructorVoice final
{
public:
	EVoiceTimingInstructor                        Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayInstructorVoice) == 0x000001, "Wrong alignment on SoundUtility_PlayInstructorVoice");
static_assert(sizeof(SoundUtility_PlayInstructorVoice) == 0x000001, "Wrong size on SoundUtility_PlayInstructorVoice");
static_assert(offsetof(SoundUtility_PlayInstructorVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayInstructorVoice::Timing' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayItemGetSound
// 0x0008 (0x0008 - 0x0000)
struct SoundUtility_PlayItemGetSound final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayItemGetSound) == 0x000004, "Wrong alignment on SoundUtility_PlayItemGetSound");
static_assert(sizeof(SoundUtility_PlayItemGetSound) == 0x000008, "Wrong size on SoundUtility_PlayItemGetSound");
static_assert(offsetof(SoundUtility_PlayItemGetSound, ItemId) == 0x000000, "Member 'SoundUtility_PlayItemGetSound::ItemId' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayMe
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_PlayMe final
{
public:
	class FString                                 CueName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayMe) == 0x000008, "Wrong alignment on SoundUtility_PlayMe");
static_assert(sizeof(SoundUtility_PlayMe) == 0x000010, "Wrong size on SoundUtility_PlayMe");
static_assert(offsetof(SoundUtility_PlayMe, CueName) == 0x000000, "Member 'SoundUtility_PlayMe::CueName' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayMonsterVoice
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_PlayMonsterVoice final
{
public:
	EVoiceTiming                                  Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMonsterBase*                           Monster;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3DPosition;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_PlayMonsterVoice) == 0x000008, "Wrong alignment on SoundUtility_PlayMonsterVoice");
static_assert(sizeof(SoundUtility_PlayMonsterVoice) == 0x000018, "Wrong size on SoundUtility_PlayMonsterVoice");
static_assert(offsetof(SoundUtility_PlayMonsterVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayMonsterVoice::Timing' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayMonsterVoice, Monster) == 0x000008, "Member 'SoundUtility_PlayMonsterVoice::Monster' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayMonsterVoice, Is3DPosition) == 0x000010, "Member 'SoundUtility_PlayMonsterVoice::Is3DPosition' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayNPCVoice
// 0x0020 (0x0020 - 0x0000)
struct SoundUtility_PlayNPCVoice final
{
public:
	class FString                                 PartVoiceID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcID;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayNPCVoice) == 0x000008, "Wrong alignment on SoundUtility_PlayNPCVoice");
static_assert(sizeof(SoundUtility_PlayNPCVoice) == 0x000020, "Wrong size on SoundUtility_PlayNPCVoice");
static_assert(offsetof(SoundUtility_PlayNPCVoice, PartVoiceID) == 0x000000, "Member 'SoundUtility_PlayNPCVoice::PartVoiceID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayNPCVoice, NpcID) == 0x000010, "Member 'SoundUtility_PlayNPCVoice::NpcID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayNPCVoice, ReturnValue) == 0x000018, "Member 'SoundUtility_PlayNPCVoice::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayNPCVoiceCallPC
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_PlayNPCVoiceCallPC final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayNPCVoiceCallPC) == 0x000008, "Wrong alignment on SoundUtility_PlayNPCVoiceCallPC");
static_assert(sizeof(SoundUtility_PlayNPCVoiceCallPC) == 0x000010, "Wrong size on SoundUtility_PlayNPCVoiceCallPC");
static_assert(offsetof(SoundUtility_PlayNPCVoiceCallPC, NpcID) == 0x000000, "Member 'SoundUtility_PlayNPCVoiceCallPC::NpcID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayNPCVoiceCallPC, ReturnValue) == 0x000008, "Member 'SoundUtility_PlayNPCVoiceCallPC::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayObjectSound
// 0x0020 (0x0020 - 0x0000)
struct SoundUtility_PlayObjectSound final
{
public:
	EObjectSoundCategory                          Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RowName;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachComp;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayObjectSound) == 0x000008, "Wrong alignment on SoundUtility_PlayObjectSound");
static_assert(sizeof(SoundUtility_PlayObjectSound) == 0x000020, "Wrong size on SoundUtility_PlayObjectSound");
static_assert(offsetof(SoundUtility_PlayObjectSound, Category) == 0x000000, "Member 'SoundUtility_PlayObjectSound::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayObjectSound, RowName) == 0x000004, "Member 'SoundUtility_PlayObjectSound::RowName' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayObjectSound, AttachComp) == 0x000010, "Member 'SoundUtility_PlayObjectSound::AttachComp' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayObjectSound, ReturnValue) == 0x000018, "Member 'SoundUtility_PlayObjectSound::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayPCPartVoice
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_PlayPCPartVoice final
{
public:
	class FString                                 PartVoiceID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3DPosition;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_PlayPCPartVoice) == 0x000008, "Wrong alignment on SoundUtility_PlayPCPartVoice");
static_assert(sizeof(SoundUtility_PlayPCPartVoice) == 0x000018, "Wrong size on SoundUtility_PlayPCPartVoice");
static_assert(offsetof(SoundUtility_PlayPCPartVoice, PartVoiceID) == 0x000000, "Member 'SoundUtility_PlayPCPartVoice::PartVoiceID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayPCPartVoice, Is3DPosition) == 0x000010, "Member 'SoundUtility_PlayPCPartVoice::Is3DPosition' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayPCPartVoiceReverse
// 0x0018 (0x0018 - 0x0000)
struct SoundUtility_PlayPCPartVoiceReverse final
{
public:
	class FString                                 PartVoiceID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3DPosition;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_PlayPCPartVoiceReverse) == 0x000008, "Wrong alignment on SoundUtility_PlayPCPartVoiceReverse");
static_assert(sizeof(SoundUtility_PlayPCPartVoiceReverse) == 0x000018, "Wrong size on SoundUtility_PlayPCPartVoiceReverse");
static_assert(offsetof(SoundUtility_PlayPCPartVoiceReverse, PartVoiceID) == 0x000000, "Member 'SoundUtility_PlayPCPartVoiceReverse::PartVoiceID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayPCPartVoiceReverse, Is3DPosition) == 0x000010, "Member 'SoundUtility_PlayPCPartVoiceReverse::Is3DPosition' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayPCVoice
// 0x0002 (0x0002 - 0x0000)
struct SoundUtility_PlayPCVoice final
{
public:
	EVoiceTimingPC                                Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3DPosition;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayPCVoice) == 0x000001, "Wrong alignment on SoundUtility_PlayPCVoice");
static_assert(sizeof(SoundUtility_PlayPCVoice) == 0x000002, "Wrong size on SoundUtility_PlayPCVoice");
static_assert(offsetof(SoundUtility_PlayPCVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayPCVoice::Timing' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayPCVoice, Is3DPosition) == 0x000001, "Member 'SoundUtility_PlayPCVoice::Is3DPosition' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayPCVoiceReverse
// 0x0002 (0x0002 - 0x0000)
struct SoundUtility_PlayPCVoiceReverse final
{
public:
	EVoiceTimingPC                                Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3DPosition;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayPCVoiceReverse) == 0x000001, "Wrong alignment on SoundUtility_PlayPCVoiceReverse");
static_assert(sizeof(SoundUtility_PlayPCVoiceReverse) == 0x000002, "Wrong size on SoundUtility_PlayPCVoiceReverse");
static_assert(offsetof(SoundUtility_PlayPCVoiceReverse, Timing) == 0x000000, "Member 'SoundUtility_PlayPCVoiceReverse::Timing' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayPCVoiceReverse, Is3DPosition) == 0x000001, "Member 'SoundUtility_PlayPCVoiceReverse::Is3DPosition' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayPCVoiceSpecify
// 0x0003 (0x0003 - 0x0000)
struct SoundUtility_PlayPCVoiceSpecify final
{
public:
	bool                                          IsP000;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceTimingPC                                Timing;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3DPosition;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayPCVoiceSpecify) == 0x000001, "Wrong alignment on SoundUtility_PlayPCVoiceSpecify");
static_assert(sizeof(SoundUtility_PlayPCVoiceSpecify) == 0x000003, "Wrong size on SoundUtility_PlayPCVoiceSpecify");
static_assert(offsetof(SoundUtility_PlayPCVoiceSpecify, IsP000) == 0x000000, "Member 'SoundUtility_PlayPCVoiceSpecify::IsP000' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayPCVoiceSpecify, Timing) == 0x000001, "Member 'SoundUtility_PlayPCVoiceSpecify::Timing' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayPCVoiceSpecify, Is3DPosition) == 0x000002, "Member 'SoundUtility_PlayPCVoiceSpecify::Is3DPosition' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayReceptionVoice
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_PlayReceptionVoice final
{
public:
	EVoiceTimingReception                         Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayReceptionVoice) == 0x000001, "Wrong alignment on SoundUtility_PlayReceptionVoice");
static_assert(sizeof(SoundUtility_PlayReceptionVoice) == 0x000001, "Wrong size on SoundUtility_PlayReceptionVoice");
static_assert(offsetof(SoundUtility_PlayReceptionVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayReceptionVoice::Timing' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayStationStaffVoice
// 0x000C (0x000C - 0x0000)
struct SoundUtility_PlayStationStaffVoice final
{
public:
	EVoiceTimingStationStaff                      Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NpcID;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayStationStaffVoice) == 0x000004, "Wrong alignment on SoundUtility_PlayStationStaffVoice");
static_assert(sizeof(SoundUtility_PlayStationStaffVoice) == 0x00000C, "Wrong size on SoundUtility_PlayStationStaffVoice");
static_assert(offsetof(SoundUtility_PlayStationStaffVoice, Timing) == 0x000000, "Member 'SoundUtility_PlayStationStaffVoice::Timing' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayStationStaffVoice, NpcID) == 0x000004, "Member 'SoundUtility_PlayStationStaffVoice::NpcID' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayTableSound
// 0x0020 (0x0020 - 0x0000)
struct SoundUtility_PlayTableSound final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundID;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundInsulationType                          SIType;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Component;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_PlayTableSound) == 0x000008, "Wrong alignment on SoundUtility_PlayTableSound");
static_assert(sizeof(SoundUtility_PlayTableSound) == 0x000020, "Wrong size on SoundUtility_PlayTableSound");
static_assert(offsetof(SoundUtility_PlayTableSound, Table) == 0x000000, "Member 'SoundUtility_PlayTableSound::Table' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayTableSound, SoundID) == 0x000008, "Member 'SoundUtility_PlayTableSound::SoundID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayTableSound, SIType) == 0x000010, "Member 'SoundUtility_PlayTableSound::SIType' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayTableSound, Component) == 0x000018, "Member 'SoundUtility_PlayTableSound::Component' has a wrong offset!");

// Function DarwinGame.SoundUtility.PlayTravellerVoice
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_PlayTravellerVoice final
{
public:
	int32                                         KindId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NickNameID;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceDataType                                VoiceType;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELanguageVoiceType                            LanguageType;                                      // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_PlayTravellerVoice) == 0x000004, "Wrong alignment on SoundUtility_PlayTravellerVoice");
static_assert(sizeof(SoundUtility_PlayTravellerVoice) == 0x000010, "Wrong size on SoundUtility_PlayTravellerVoice");
static_assert(offsetof(SoundUtility_PlayTravellerVoice, KindId) == 0x000000, "Member 'SoundUtility_PlayTravellerVoice::KindId' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayTravellerVoice, NickNameID) == 0x000004, "Member 'SoundUtility_PlayTravellerVoice::NickNameID' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayTravellerVoice, VoiceType) == 0x00000C, "Member 'SoundUtility_PlayTravellerVoice::VoiceType' has a wrong offset!");
static_assert(offsetof(SoundUtility_PlayTravellerVoice, LanguageType) == 0x00000D, "Member 'SoundUtility_PlayTravellerVoice::LanguageType' has a wrong offset!");

// Function DarwinGame.SoundUtility.ReleaseCueSheetByCueSheetTable
// 0x000C (0x000C - 0x0000)
struct SoundUtility_ReleaseCueSheetByCueSheetTable final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_ReleaseCueSheetByCueSheetTable) == 0x000004, "Wrong alignment on SoundUtility_ReleaseCueSheetByCueSheetTable");
static_assert(sizeof(SoundUtility_ReleaseCueSheetByCueSheetTable) == 0x00000C, "Wrong size on SoundUtility_ReleaseCueSheetByCueSheetTable");
static_assert(offsetof(SoundUtility_ReleaseCueSheetByCueSheetTable, Category) == 0x000000, "Member 'SoundUtility_ReleaseCueSheetByCueSheetTable::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_ReleaseCueSheetByCueSheetTable, SheetName) == 0x000004, "Member 'SoundUtility_ReleaseCueSheetByCueSheetTable::SheetName' has a wrong offset!");

// Function DarwinGame.SoundUtility.ReleaseCueSheetTravellerVoice
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_ReleaseCueSheetTravellerVoice final
{
public:
	bool                                          IsAutoTraveller;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_ReleaseCueSheetTravellerVoice) == 0x000001, "Wrong alignment on SoundUtility_ReleaseCueSheetTravellerVoice");
static_assert(sizeof(SoundUtility_ReleaseCueSheetTravellerVoice) == 0x000001, "Wrong size on SoundUtility_ReleaseCueSheetTravellerVoice");
static_assert(offsetof(SoundUtility_ReleaseCueSheetTravellerVoice, IsAutoTraveller) == 0x000000, "Member 'SoundUtility_ReleaseCueSheetTravellerVoice::IsAutoTraveller' has a wrong offset!");

// Function DarwinGame.SoundUtility.ResumeBgm
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_ResumeBgm final
{
public:
	EAtomCompCategory                             Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolume;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_ResumeBgm) == 0x000004, "Wrong alignment on SoundUtility_ResumeBgm");
static_assert(sizeof(SoundUtility_ResumeBgm) == 0x000010, "Wrong size on SoundUtility_ResumeBgm");
static_assert(offsetof(SoundUtility_ResumeBgm, Category) == 0x000000, "Member 'SoundUtility_ResumeBgm::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_ResumeBgm, FadeTime) == 0x000004, "Member 'SoundUtility_ResumeBgm::FadeTime' has a wrong offset!");
static_assert(offsetof(SoundUtility_ResumeBgm, FadeVolume) == 0x000008, "Member 'SoundUtility_ResumeBgm::FadeVolume' has a wrong offset!");
static_assert(offsetof(SoundUtility_ResumeBgm, Timer) == 0x00000C, "Member 'SoundUtility_ResumeBgm::Timer' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetChangeBgmBossBattle
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetChangeBgmBossBattle final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetChangeBgmBossBattle) == 0x000001, "Wrong alignment on SoundUtility_SetChangeBgmBossBattle");
static_assert(sizeof(SoundUtility_SetChangeBgmBossBattle) == 0x000001, "Wrong size on SoundUtility_SetChangeBgmBossBattle");
static_assert(offsetof(SoundUtility_SetChangeBgmBossBattle, enable) == 0x000000, "Member 'SoundUtility_SetChangeBgmBossBattle::enable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetEventExceptionSoundControl
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetEventExceptionSoundControl final
{
public:
	bool                                          isEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetEventExceptionSoundControl) == 0x000001, "Wrong alignment on SoundUtility_SetEventExceptionSoundControl");
static_assert(sizeof(SoundUtility_SetEventExceptionSoundControl) == 0x000001, "Wrong size on SoundUtility_SetEventExceptionSoundControl");
static_assert(offsetof(SoundUtility_SetEventExceptionSoundControl, isEnable) == 0x000000, "Member 'SoundUtility_SetEventExceptionSoundControl::isEnable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetIsPlayMeBaseAreaBattleNotify
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetIsPlayMeBaseAreaBattleNotify final
{
public:
	bool                                          isEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetIsPlayMeBaseAreaBattleNotify) == 0x000001, "Wrong alignment on SoundUtility_SetIsPlayMeBaseAreaBattleNotify");
static_assert(sizeof(SoundUtility_SetIsPlayMeBaseAreaBattleNotify) == 0x000001, "Wrong size on SoundUtility_SetIsPlayMeBaseAreaBattleNotify");
static_assert(offsetof(SoundUtility_SetIsPlayMeBaseAreaBattleNotify, isEnable) == 0x000000, "Member 'SoundUtility_SetIsPlayMeBaseAreaBattleNotify::isEnable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetMeAfterResumeBgm
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetMeAfterResumeBgm final
{
public:
	bool                                          isEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetMeAfterResumeBgm) == 0x000001, "Wrong alignment on SoundUtility_SetMeAfterResumeBgm");
static_assert(sizeof(SoundUtility_SetMeAfterResumeBgm) == 0x000001, "Wrong size on SoundUtility_SetMeAfterResumeBgm");
static_assert(offsetof(SoundUtility_SetMeAfterResumeBgm, isEnable) == 0x000000, "Member 'SoundUtility_SetMeAfterResumeBgm::isEnable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetSEVSoundStatus
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetSEVSoundStatus final
{
public:
	ESoundTriggerTiming                           Timing;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetSEVSoundStatus) == 0x000001, "Wrong alignment on SoundUtility_SetSEVSoundStatus");
static_assert(sizeof(SoundUtility_SetSEVSoundStatus) == 0x000001, "Wrong size on SoundUtility_SetSEVSoundStatus");
static_assert(offsetof(SoundUtility_SetSEVSoundStatus, Timing) == 0x000000, "Member 'SoundUtility_SetSEVSoundStatus::Timing' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetStopBgmBossFinish
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetStopBgmBossFinish final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetStopBgmBossFinish) == 0x000001, "Wrong alignment on SoundUtility_SetStopBgmBossFinish");
static_assert(sizeof(SoundUtility_SetStopBgmBossFinish) == 0x000001, "Wrong size on SoundUtility_SetStopBgmBossFinish");
static_assert(offsetof(SoundUtility_SetStopBgmBossFinish, enable) == 0x000000, "Member 'SoundUtility_SetStopBgmBossFinish::enable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetUpdateAreaBgm
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetUpdateAreaBgm final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetUpdateAreaBgm) == 0x000001, "Wrong alignment on SoundUtility_SetUpdateAreaBgm");
static_assert(sizeof(SoundUtility_SetUpdateAreaBgm) == 0x000001, "Wrong size on SoundUtility_SetUpdateAreaBgm");
static_assert(offsetof(SoundUtility_SetUpdateAreaBgm, enable) == 0x000000, "Member 'SoundUtility_SetUpdateAreaBgm::enable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetUpdateAreaBgmNight
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetUpdateAreaBgmNight final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetUpdateAreaBgmNight) == 0x000001, "Wrong alignment on SoundUtility_SetUpdateAreaBgmNight");
static_assert(sizeof(SoundUtility_SetUpdateAreaBgmNight) == 0x000001, "Wrong size on SoundUtility_SetUpdateAreaBgmNight");
static_assert(offsetof(SoundUtility_SetUpdateAreaBgmNight, enable) == 0x000000, "Member 'SoundUtility_SetUpdateAreaBgmNight::enable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetUpdateSoundStatus
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetUpdateSoundStatus final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetUpdateSoundStatus) == 0x000001, "Wrong alignment on SoundUtility_SetUpdateSoundStatus");
static_assert(sizeof(SoundUtility_SetUpdateSoundStatus) == 0x000001, "Wrong size on SoundUtility_SetUpdateSoundStatus");
static_assert(offsetof(SoundUtility_SetUpdateSoundStatus, enable) == 0x000000, "Member 'SoundUtility_SetUpdateSoundStatus::enable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetVolcanoBattleBgm
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetVolcanoBattleBgm final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetVolcanoBattleBgm) == 0x000001, "Wrong alignment on SoundUtility_SetVolcanoBattleBgm");
static_assert(sizeof(SoundUtility_SetVolcanoBattleBgm) == 0x000001, "Wrong size on SoundUtility_SetVolcanoBattleBgm");
static_assert(offsetof(SoundUtility_SetVolcanoBattleBgm, enable) == 0x000000, "Member 'SoundUtility_SetVolcanoBattleBgm::enable' has a wrong offset!");

// Function DarwinGame.SoundUtility.SetWaitStartBgmBaseAreaBattle
// 0x0001 (0x0001 - 0x0000)
struct SoundUtility_SetWaitStartBgmBaseAreaBattle final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_SetWaitStartBgmBaseAreaBattle) == 0x000001, "Wrong alignment on SoundUtility_SetWaitStartBgmBaseAreaBattle");
static_assert(sizeof(SoundUtility_SetWaitStartBgmBaseAreaBattle) == 0x000001, "Wrong size on SoundUtility_SetWaitStartBgmBaseAreaBattle");
static_assert(offsetof(SoundUtility_SetWaitStartBgmBaseAreaBattle, bIsEnable) == 0x000000, "Member 'SoundUtility_SetWaitStartBgmBaseAreaBattle::bIsEnable' has a wrong offset!");

// Function DarwinGame.SoundUtility.Spawn2DSound
// 0x0028 (0x0028 - 0x0000)
struct SoundUtility_Spawn2DSound final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_Spawn2DSound) == 0x000008, "Wrong alignment on SoundUtility_Spawn2DSound");
static_assert(sizeof(SoundUtility_Spawn2DSound) == 0x000028, "Wrong size on SoundUtility_Spawn2DSound");
static_assert(offsetof(SoundUtility_Spawn2DSound, Category) == 0x000000, "Member 'SoundUtility_Spawn2DSound::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_Spawn2DSound, SheetName) == 0x000004, "Member 'SoundUtility_Spawn2DSound::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Spawn2DSound, CueName) == 0x000010, "Member 'SoundUtility_Spawn2DSound::CueName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Spawn2DSound, ReturnValue) == 0x000020, "Member 'SoundUtility_Spawn2DSound::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.Spawn2DSoundCalcReverb
// 0x0028 (0x0028 - 0x0000)
struct SoundUtility_Spawn2DSoundCalcReverb final
{
public:
	ECueSheetTableCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SheetName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_Spawn2DSoundCalcReverb) == 0x000008, "Wrong alignment on SoundUtility_Spawn2DSoundCalcReverb");
static_assert(sizeof(SoundUtility_Spawn2DSoundCalcReverb) == 0x000028, "Wrong size on SoundUtility_Spawn2DSoundCalcReverb");
static_assert(offsetof(SoundUtility_Spawn2DSoundCalcReverb, Category) == 0x000000, "Member 'SoundUtility_Spawn2DSoundCalcReverb::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_Spawn2DSoundCalcReverb, SheetName) == 0x000004, "Member 'SoundUtility_Spawn2DSoundCalcReverb::SheetName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Spawn2DSoundCalcReverb, CueName) == 0x000010, "Member 'SoundUtility_Spawn2DSoundCalcReverb::CueName' has a wrong offset!");
static_assert(offsetof(SoundUtility_Spawn2DSoundCalcReverb, ReturnValue) == 0x000020, "Member 'SoundUtility_Spawn2DSoundCalcReverb::ReturnValue' has a wrong offset!");

// Function DarwinGame.SoundUtility.Stop2DLoopSoundByCueName
// 0x0010 (0x0010 - 0x0000)
struct SoundUtility_Stop2DLoopSoundByCueName final
{
public:
	class FString                                 CueName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_Stop2DLoopSoundByCueName) == 0x000008, "Wrong alignment on SoundUtility_Stop2DLoopSoundByCueName");
static_assert(sizeof(SoundUtility_Stop2DLoopSoundByCueName) == 0x000010, "Wrong size on SoundUtility_Stop2DLoopSoundByCueName");
static_assert(offsetof(SoundUtility_Stop2DLoopSoundByCueName, CueName) == 0x000000, "Member 'SoundUtility_Stop2DLoopSoundByCueName::CueName' has a wrong offset!");

// Function DarwinGame.SoundUtility.StopBgm
// 0x000C (0x000C - 0x0000)
struct SoundUtility_StopBgm final
{
public:
	EAtomCompCategory                             Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpecify;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundUtility_StopBgm) == 0x000004, "Wrong alignment on SoundUtility_StopBgm");
static_assert(sizeof(SoundUtility_StopBgm) == 0x00000C, "Wrong size on SoundUtility_StopBgm");
static_assert(offsetof(SoundUtility_StopBgm, Category) == 0x000000, "Member 'SoundUtility_StopBgm::Category' has a wrong offset!");
static_assert(offsetof(SoundUtility_StopBgm, FadeTime) == 0x000004, "Member 'SoundUtility_StopBgm::FadeTime' has a wrong offset!");
static_assert(offsetof(SoundUtility_StopBgm, IsSpecify) == 0x000008, "Member 'SoundUtility_StopBgm::IsSpecify' has a wrong offset!");

// Function DarwinGame.SoundUtility.StopBgmAll
// 0x0004 (0x0004 - 0x0000)
struct SoundUtility_StopBgmAll final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundUtility_StopBgmAll) == 0x000004, "Wrong alignment on SoundUtility_StopBgmAll");
static_assert(sizeof(SoundUtility_StopBgmAll) == 0x000004, "Wrong size on SoundUtility_StopBgmAll");
static_assert(offsetof(SoundUtility_StopBgmAll, FadeTime) == 0x000000, "Member 'SoundUtility_StopBgmAll::FadeTime' has a wrong offset!");

// Function DarwinGame.InitialPositionDoor.ReceiveSetOpen
// 0x000C (0x000C - 0x0000)
struct InitialPositionDoor_ReceiveSetOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InitialPositionDoor_ReceiveSetOpen) == 0x000004, "Wrong alignment on InitialPositionDoor_ReceiveSetOpen");
static_assert(sizeof(InitialPositionDoor_ReceiveSetOpen) == 0x00000C, "Wrong size on InitialPositionDoor_ReceiveSetOpen");
static_assert(offsetof(InitialPositionDoor_ReceiveSetOpen, Vector) == 0x000000, "Member 'InitialPositionDoor_ReceiveSetOpen::Vector' has a wrong offset!");

// Function DarwinGame.InitialPositionDoor.SetOpen
// 0x000C (0x000C - 0x0000)
struct InitialPositionDoor_SetOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InitialPositionDoor_SetOpen) == 0x000004, "Wrong alignment on InitialPositionDoor_SetOpen");
static_assert(sizeof(InitialPositionDoor_SetOpen) == 0x00000C, "Wrong size on InitialPositionDoor_SetOpen");
static_assert(offsetof(InitialPositionDoor_SetOpen, Vector) == 0x000000, "Member 'InitialPositionDoor_SetOpen::Vector' has a wrong offset!");

// Function DarwinGame.ItemDataTable.ConvertItemID
// 0x0018 (0x0018 - 0x0000)
struct ItemDataTable_ConvertItemID final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDataTable_ConvertItemID) == 0x000008, "Wrong alignment on ItemDataTable_ConvertItemID");
static_assert(sizeof(ItemDataTable_ConvertItemID) == 0x000018, "Wrong size on ItemDataTable_ConvertItemID");
static_assert(offsetof(ItemDataTable_ConvertItemID, Index_0) == 0x000000, "Member 'ItemDataTable_ConvertItemID::Index_0' has a wrong offset!");
static_assert(offsetof(ItemDataTable_ConvertItemID, ItemId) == 0x000008, "Member 'ItemDataTable_ConvertItemID::ItemId' has a wrong offset!");

// Function DarwinGame.ItemDataTable.GetItemInfo
// 0x0130 (0x0130 - 0x0000)
struct ItemDataTable_GetItemInfo final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_ItemInfoData                       itemInfo;                                          // 0x0008(0x0128)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDataTable_GetItemInfo) == 0x000008, "Wrong alignment on ItemDataTable_GetItemInfo");
static_assert(sizeof(ItemDataTable_GetItemInfo) == 0x000130, "Wrong size on ItemDataTable_GetItemInfo");
static_assert(offsetof(ItemDataTable_GetItemInfo, ItemId) == 0x000000, "Member 'ItemDataTable_GetItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(ItemDataTable_GetItemInfo, itemInfo) == 0x000008, "Member 'ItemDataTable_GetItemInfo::itemInfo' has a wrong offset!");

// Function DarwinGame.ItemDataTable.GetItemKeys
// 0x0010 (0x0010 - 0x0000)
struct ItemDataTable_GetItemKeys final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDataTable_GetItemKeys) == 0x000008, "Wrong alignment on ItemDataTable_GetItemKeys");
static_assert(sizeof(ItemDataTable_GetItemKeys) == 0x000010, "Wrong size on ItemDataTable_GetItemKeys");
static_assert(offsetof(ItemDataTable_GetItemKeys, ReturnValue) == 0x000000, "Member 'ItemDataTable_GetItemKeys::ReturnValue' has a wrong offset!");

// Function DarwinGame.ItemDataTable.GetItemKeysOf
// 0x0018 (0x0018 - 0x0000)
struct ItemDataTable_GetItemKeysOf final
{
public:
	EItemDataType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDataTable_GetItemKeysOf) == 0x000008, "Wrong alignment on ItemDataTable_GetItemKeysOf");
static_assert(sizeof(ItemDataTable_GetItemKeysOf) == 0x000018, "Wrong size on ItemDataTable_GetItemKeysOf");
static_assert(offsetof(ItemDataTable_GetItemKeysOf, Type) == 0x000000, "Member 'ItemDataTable_GetItemKeysOf::Type' has a wrong offset!");
static_assert(offsetof(ItemDataTable_GetItemKeysOf, ReturnValue) == 0x000008, "Member 'ItemDataTable_GetItemKeysOf::ReturnValue' has a wrong offset!");

// Function DarwinGame.ItemDataTable.GetItemName
// 0x0020 (0x0020 - 0x0000)
struct ItemDataTable_GetItemName final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   itemNameString;                                    // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDataTable_GetItemName) == 0x000008, "Wrong alignment on ItemDataTable_GetItemName");
static_assert(sizeof(ItemDataTable_GetItemName) == 0x000020, "Wrong size on ItemDataTable_GetItemName");
static_assert(offsetof(ItemDataTable_GetItemName, ItemId) == 0x000000, "Member 'ItemDataTable_GetItemName::ItemId' has a wrong offset!");
static_assert(offsetof(ItemDataTable_GetItemName, itemNameString) == 0x000008, "Member 'ItemDataTable_GetItemName::itemNameString' has a wrong offset!");

// Function DarwinGame.ItemInterface.Aim
// 0x000C (0x000C - 0x0000)
struct ItemInterface_Aim final
{
public:
	struct FVector                                HandLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInterface_Aim) == 0x000004, "Wrong alignment on ItemInterface_Aim");
static_assert(sizeof(ItemInterface_Aim) == 0x00000C, "Wrong size on ItemInterface_Aim");
static_assert(offsetof(ItemInterface_Aim, HandLocation) == 0x000000, "Member 'ItemInterface_Aim::HandLocation' has a wrong offset!");

// Function DarwinGame.ItemInterface.Hold
// 0x0001 (0x0001 - 0x0000)
struct ItemInterface_Hold final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInterface_Hold) == 0x000001, "Wrong alignment on ItemInterface_Hold");
static_assert(sizeof(ItemInterface_Hold) == 0x000001, "Wrong size on ItemInterface_Hold");
static_assert(offsetof(ItemInterface_Hold, End) == 0x000000, "Member 'ItemInterface_Hold::End' has a wrong offset!");

// Function DarwinGame.ItemInterface.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct ItemInterface_SetVisible final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInterface_SetVisible) == 0x000001, "Wrong alignment on ItemInterface_SetVisible");
static_assert(sizeof(ItemInterface_SetVisible) == 0x000001, "Wrong size on ItemInterface_SetVisible");
static_assert(offsetof(ItemInterface_SetVisible, Visibility) == 0x000000, "Member 'ItemInterface_SetVisible::Visibility' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.GetAfterSecond
// 0x0018 (0x0018 - 0x0000)
struct KeyInputFunctionLibrary_GetAfterSecond final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyInputFunctionLibrary_GetAfterSecond) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_GetAfterSecond");
static_assert(sizeof(KeyInputFunctionLibrary_GetAfterSecond) == 0x000018, "Wrong size on KeyInputFunctionLibrary_GetAfterSecond");
static_assert(offsetof(KeyInputFunctionLibrary_GetAfterSecond, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_GetAfterSecond::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_GetAfterSecond, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_GetAfterSecond::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_GetAfterSecond, ReturnValue) == 0x000014, "Member 'KeyInputFunctionLibrary_GetAfterSecond::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.GetInputType
// 0x0018 (0x0018 - 0x0000)
struct KeyInputFunctionLibrary_GetInputType final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputType                                    ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeyInputFunctionLibrary_GetInputType) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_GetInputType");
static_assert(sizeof(KeyInputFunctionLibrary_GetInputType) == 0x000018, "Wrong size on KeyInputFunctionLibrary_GetInputType");
static_assert(offsetof(KeyInputFunctionLibrary_GetInputType, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_GetInputType::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_GetInputType, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_GetInputType::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_GetInputType, ReturnValue) == 0x000011, "Member 'KeyInputFunctionLibrary_GetInputType::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.GetValue
// 0x0018 (0x0018 - 0x0000)
struct KeyInputFunctionLibrary_GetValue final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyInputFunctionLibrary_GetValue) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_GetValue");
static_assert(sizeof(KeyInputFunctionLibrary_GetValue) == 0x000018, "Wrong size on KeyInputFunctionLibrary_GetValue");
static_assert(offsetof(KeyInputFunctionLibrary_GetValue, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_GetValue::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_GetValue, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_GetValue::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_GetValue, ReturnValue) == 0x000014, "Member 'KeyInputFunctionLibrary_GetValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.IsJustPressed
// 0x0018 (0x0018 - 0x0000)
struct KeyInputFunctionLibrary_IsJustPressed final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeyInputFunctionLibrary_IsJustPressed) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_IsJustPressed");
static_assert(sizeof(KeyInputFunctionLibrary_IsJustPressed) == 0x000018, "Wrong size on KeyInputFunctionLibrary_IsJustPressed");
static_assert(offsetof(KeyInputFunctionLibrary_IsJustPressed, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_IsJustPressed::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsJustPressed, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_IsJustPressed::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsJustPressed, ReturnValue) == 0x000011, "Member 'KeyInputFunctionLibrary_IsJustPressed::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.IsJustReleased
// 0x0018 (0x0018 - 0x0000)
struct KeyInputFunctionLibrary_IsJustReleased final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeyInputFunctionLibrary_IsJustReleased) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_IsJustReleased");
static_assert(sizeof(KeyInputFunctionLibrary_IsJustReleased) == 0x000018, "Wrong size on KeyInputFunctionLibrary_IsJustReleased");
static_assert(offsetof(KeyInputFunctionLibrary_IsJustReleased, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_IsJustReleased::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsJustReleased, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_IsJustReleased::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsJustReleased, ReturnValue) == 0x000011, "Member 'KeyInputFunctionLibrary_IsJustReleased::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.IsPressed
// 0x0018 (0x0018 - 0x0000)
struct KeyInputFunctionLibrary_IsPressed final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeyInputFunctionLibrary_IsPressed) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_IsPressed");
static_assert(sizeof(KeyInputFunctionLibrary_IsPressed) == 0x000018, "Wrong size on KeyInputFunctionLibrary_IsPressed");
static_assert(offsetof(KeyInputFunctionLibrary_IsPressed, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_IsPressed::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsPressed, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_IsPressed::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsPressed, ReturnValue) == 0x000011, "Member 'KeyInputFunctionLibrary_IsPressed::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.IsRepeatPressed
// 0x0018 (0x0018 - 0x0000)
struct KeyInputFunctionLibrary_IsRepeatPressed final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeyInputFunctionLibrary_IsRepeatPressed) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_IsRepeatPressed");
static_assert(sizeof(KeyInputFunctionLibrary_IsRepeatPressed) == 0x000018, "Wrong size on KeyInputFunctionLibrary_IsRepeatPressed");
static_assert(offsetof(KeyInputFunctionLibrary_IsRepeatPressed, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_IsRepeatPressed::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsRepeatPressed, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_IsRepeatPressed::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_IsRepeatPressed, ReturnValue) == 0x000011, "Member 'KeyInputFunctionLibrary_IsRepeatPressed::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.Reset
// 0x0028 (0x0028 - 0x0000)
struct KeyInputFunctionLibrary_Reset final
{
public:
	struct FKeyInput                              KeyInput;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAxisMappingType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyInput                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyInputFunctionLibrary_Reset) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_Reset");
static_assert(sizeof(KeyInputFunctionLibrary_Reset) == 0x000028, "Wrong size on KeyInputFunctionLibrary_Reset");
static_assert(offsetof(KeyInputFunctionLibrary_Reset, KeyInput) == 0x000000, "Member 'KeyInputFunctionLibrary_Reset::KeyInput' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_Reset, Type) == 0x000010, "Member 'KeyInputFunctionLibrary_Reset::Type' has a wrong offset!");
static_assert(offsetof(KeyInputFunctionLibrary_Reset, ReturnValue) == 0x000018, "Member 'KeyInputFunctionLibrary_Reset::ReturnValue' has a wrong offset!");

// Function DarwinGame.KeyInputFunctionLibrary.ResetAll
// 0x0010 (0x0010 - 0x0000)
struct KeyInputFunctionLibrary_ResetAll final
{
public:
	struct FKeyInput                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyInputFunctionLibrary_ResetAll) == 0x000008, "Wrong alignment on KeyInputFunctionLibrary_ResetAll");
static_assert(sizeof(KeyInputFunctionLibrary_ResetAll) == 0x000010, "Wrong size on KeyInputFunctionLibrary_ResetAll");
static_assert(offsetof(KeyInputFunctionLibrary_ResetAll, ReturnValue) == 0x000000, "Member 'KeyInputFunctionLibrary_ResetAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetActionCycleEnemy
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetActionCycleEnemy final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetActionCycleEnemy) == 0x000004, "Wrong alignment on KindDataTable_GetActionCycleEnemy");
static_assert(sizeof(KindDataTable_GetActionCycleEnemy) == 0x00000C, "Wrong size on KindDataTable_GetActionCycleEnemy");
static_assert(offsetof(KindDataTable_GetActionCycleEnemy, ID) == 0x000000, "Member 'KindDataTable_GetActionCycleEnemy::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetActionCycleEnemy, ReturnValue) == 0x000008, "Member 'KindDataTable_GetActionCycleEnemy::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetActionCycleFriend
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetActionCycleFriend final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetActionCycleFriend) == 0x000004, "Wrong alignment on KindDataTable_GetActionCycleFriend");
static_assert(sizeof(KindDataTable_GetActionCycleFriend) == 0x00000C, "Wrong size on KindDataTable_GetActionCycleFriend");
static_assert(offsetof(KindDataTable_GetActionCycleFriend, ID) == 0x000000, "Member 'KindDataTable_GetActionCycleFriend::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetActionCycleFriend, ReturnValue) == 0x000008, "Member 'KindDataTable_GetActionCycleFriend::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetArtifactCarryingCapacity
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetArtifactCarryingCapacity final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetArtifactCarryingCapacity) == 0x000004, "Wrong alignment on KindDataTable_GetArtifactCarryingCapacity");
static_assert(sizeof(KindDataTable_GetArtifactCarryingCapacity) == 0x00000C, "Wrong size on KindDataTable_GetArtifactCarryingCapacity");
static_assert(offsetof(KindDataTable_GetArtifactCarryingCapacity, ID) == 0x000000, "Member 'KindDataTable_GetArtifactCarryingCapacity::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetArtifactCarryingCapacity, ReturnValue) == 0x000008, "Member 'KindDataTable_GetArtifactCarryingCapacity::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetArtifactDropOffRate
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetArtifactDropOffRate final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetArtifactDropOffRate) == 0x000004, "Wrong alignment on KindDataTable_GetArtifactDropOffRate");
static_assert(sizeof(KindDataTable_GetArtifactDropOffRate) == 0x00000C, "Wrong size on KindDataTable_GetArtifactDropOffRate");
static_assert(offsetof(KindDataTable_GetArtifactDropOffRate, ID) == 0x000000, "Member 'KindDataTable_GetArtifactDropOffRate::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetArtifactDropOffRate, ReturnValue) == 0x000008, "Member 'KindDataTable_GetArtifactDropOffRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetAttackAccordingToLevel
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetAttackAccordingToLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetAttackAccordingToLevel) == 0x000004, "Wrong alignment on KindDataTable_GetAttackAccordingToLevel");
static_assert(sizeof(KindDataTable_GetAttackAccordingToLevel) == 0x000010, "Wrong size on KindDataTable_GetAttackAccordingToLevel");
static_assert(offsetof(KindDataTable_GetAttackAccordingToLevel, ID) == 0x000000, "Member 'KindDataTable_GetAttackAccordingToLevel::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetAttackAccordingToLevel, Level) == 0x000008, "Member 'KindDataTable_GetAttackAccordingToLevel::Level' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetAttackAccordingToLevel, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetAttackAccordingToLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetBattleArea
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetBattleArea final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetBattleArea) == 0x000004, "Wrong alignment on KindDataTable_GetBattleArea");
static_assert(sizeof(KindDataTable_GetBattleArea) == 0x00000C, "Wrong size on KindDataTable_GetBattleArea");
static_assert(offsetof(KindDataTable_GetBattleArea, ID) == 0x000000, "Member 'KindDataTable_GetBattleArea::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetBattleArea, ReturnValue) == 0x000008, "Member 'KindDataTable_GetBattleArea::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetCoreHearing
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetCoreHearing final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetCoreHearing) == 0x000004, "Wrong alignment on KindDataTable_GetCoreHearing");
static_assert(sizeof(KindDataTable_GetCoreHearing) == 0x00000C, "Wrong size on KindDataTable_GetCoreHearing");
static_assert(offsetof(KindDataTable_GetCoreHearing, ID) == 0x000000, "Member 'KindDataTable_GetCoreHearing::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetCoreHearing, ReturnValue) == 0x000008, "Member 'KindDataTable_GetCoreHearing::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetCustomPartsLotteryRate
// 0x0020 (0x0020 - 0x0000)
struct KindDataTable_GetCustomPartsLotteryRate final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomPartsLotteryRate                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetCustomPartsLotteryRate) == 0x000008, "Wrong alignment on KindDataTable_GetCustomPartsLotteryRate");
static_assert(sizeof(KindDataTable_GetCustomPartsLotteryRate) == 0x000020, "Wrong size on KindDataTable_GetCustomPartsLotteryRate");
static_assert(offsetof(KindDataTable_GetCustomPartsLotteryRate, ID) == 0x000000, "Member 'KindDataTable_GetCustomPartsLotteryRate::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetCustomPartsLotteryRate, ReturnValue) == 0x000008, "Member 'KindDataTable_GetCustomPartsLotteryRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetDefenceAccordingToLevel
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetDefenceAccordingToLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetDefenceAccordingToLevel) == 0x000004, "Wrong alignment on KindDataTable_GetDefenceAccordingToLevel");
static_assert(sizeof(KindDataTable_GetDefenceAccordingToLevel) == 0x000010, "Wrong size on KindDataTable_GetDefenceAccordingToLevel");
static_assert(offsetof(KindDataTable_GetDefenceAccordingToLevel, ID) == 0x000000, "Member 'KindDataTable_GetDefenceAccordingToLevel::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetDefenceAccordingToLevel, Level) == 0x000008, "Member 'KindDataTable_GetDefenceAccordingToLevel::Level' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetDefenceAccordingToLevel, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetDefenceAccordingToLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetDexterityAccordingToLevel
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetDexterityAccordingToLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetDexterityAccordingToLevel) == 0x000004, "Wrong alignment on KindDataTable_GetDexterityAccordingToLevel");
static_assert(sizeof(KindDataTable_GetDexterityAccordingToLevel) == 0x000010, "Wrong size on KindDataTable_GetDexterityAccordingToLevel");
static_assert(offsetof(KindDataTable_GetDexterityAccordingToLevel, ID) == 0x000000, "Member 'KindDataTable_GetDexterityAccordingToLevel::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetDexterityAccordingToLevel, Level) == 0x000008, "Member 'KindDataTable_GetDexterityAccordingToLevel::Level' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetDexterityAccordingToLevel, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetDexterityAccordingToLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetDropItemInfo
// 0x0018 (0x0018 - 0x0000)
struct KindDataTable_GetDropItemInfo final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_DropItemInfo>               DropItemInfos;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetDropItemInfo) == 0x000008, "Wrong alignment on KindDataTable_GetDropItemInfo");
static_assert(sizeof(KindDataTable_GetDropItemInfo) == 0x000018, "Wrong size on KindDataTable_GetDropItemInfo");
static_assert(offsetof(KindDataTable_GetDropItemInfo, KindId) == 0x000000, "Member 'KindDataTable_GetDropItemInfo::KindId' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetDropItemInfo, DropItemInfos) == 0x000008, "Member 'KindDataTable_GetDropItemInfo::DropItemInfos' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetEcologicalArea
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetEcologicalArea final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetEcologicalArea) == 0x000004, "Wrong alignment on KindDataTable_GetEcologicalArea");
static_assert(sizeof(KindDataTable_GetEcologicalArea) == 0x00000C, "Wrong size on KindDataTable_GetEcologicalArea");
static_assert(offsetof(KindDataTable_GetEcologicalArea, ID) == 0x000000, "Member 'KindDataTable_GetEcologicalArea::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetEcologicalArea, ReturnValue) == 0x000008, "Member 'KindDataTable_GetEcologicalArea::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetEffectSizeID
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetEffectSizeID final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KindDataTable_GetEffectSizeID) == 0x000004, "Wrong alignment on KindDataTable_GetEffectSizeID");
static_assert(sizeof(KindDataTable_GetEffectSizeID) == 0x00000C, "Wrong size on KindDataTable_GetEffectSizeID");
static_assert(offsetof(KindDataTable_GetEffectSizeID, KindId) == 0x000000, "Member 'KindDataTable_GetEffectSizeID::KindId' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetEffectSizeID, ReturnValue) == 0x000008, "Member 'KindDataTable_GetEffectSizeID::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetEscapeCountMax
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetEscapeCountMax final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetEscapeCountMax) == 0x000004, "Wrong alignment on KindDataTable_GetEscapeCountMax");
static_assert(sizeof(KindDataTable_GetEscapeCountMax) == 0x00000C, "Wrong size on KindDataTable_GetEscapeCountMax");
static_assert(offsetof(KindDataTable_GetEscapeCountMax, ID) == 0x000000, "Member 'KindDataTable_GetEscapeCountMax::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetEscapeCountMax, ReturnValue) == 0x000008, "Member 'KindDataTable_GetEscapeCountMax::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetEscapeProbability
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetEscapeProbability final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetEscapeProbability) == 0x000004, "Wrong alignment on KindDataTable_GetEscapeProbability");
static_assert(sizeof(KindDataTable_GetEscapeProbability) == 0x00000C, "Wrong size on KindDataTable_GetEscapeProbability");
static_assert(offsetof(KindDataTable_GetEscapeProbability, ID) == 0x000000, "Member 'KindDataTable_GetEscapeProbability::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetEscapeProbability, ReturnValue) == 0x000008, "Member 'KindDataTable_GetEscapeProbability::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetExpGrowthType
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetExpGrowthType final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetExpGrowthType) == 0x000004, "Wrong alignment on KindDataTable_GetExpGrowthType");
static_assert(sizeof(KindDataTable_GetExpGrowthType) == 0x00000C, "Wrong size on KindDataTable_GetExpGrowthType");
static_assert(offsetof(KindDataTable_GetExpGrowthType, ID) == 0x000000, "Member 'KindDataTable_GetExpGrowthType::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetExpGrowthType, ReturnValue) == 0x000008, "Member 'KindDataTable_GetExpGrowthType::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetFeatureInfos
// 0x0018 (0x0018 - 0x0000)
struct KindDataTable_GetFeatureInfos final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_CharacterFeatureInfo>       FeatureInfos;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetFeatureInfos) == 0x000008, "Wrong alignment on KindDataTable_GetFeatureInfos");
static_assert(sizeof(KindDataTable_GetFeatureInfos) == 0x000018, "Wrong size on KindDataTable_GetFeatureInfos");
static_assert(offsetof(KindDataTable_GetFeatureInfos, ID) == 0x000000, "Member 'KindDataTable_GetFeatureInfos::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetFeatureInfos, FeatureInfos) == 0x000008, "Member 'KindDataTable_GetFeatureInfos::FeatureInfos' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetFormationSize
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetFormationSize final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetFormationSize) == 0x000004, "Wrong alignment on KindDataTable_GetFormationSize");
static_assert(sizeof(KindDataTable_GetFormationSize) == 0x00000C, "Wrong size on KindDataTable_GetFormationSize");
static_assert(offsetof(KindDataTable_GetFormationSize, ID) == 0x000000, "Member 'KindDataTable_GetFormationSize::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetFormationSize, ReturnValue) == 0x000008, "Member 'KindDataTable_GetFormationSize::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetGazeTime
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetGazeTime final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetGazeTime) == 0x000004, "Wrong alignment on KindDataTable_GetGazeTime");
static_assert(sizeof(KindDataTable_GetGazeTime) == 0x00000C, "Wrong size on KindDataTable_GetGazeTime");
static_assert(offsetof(KindDataTable_GetGazeTime, ID) == 0x000000, "Member 'KindDataTable_GetGazeTime::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetGazeTime, ReturnValue) == 0x000008, "Member 'KindDataTable_GetGazeTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetHPAccordingToLevel
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetHPAccordingToLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetHPAccordingToLevel) == 0x000004, "Wrong alignment on KindDataTable_GetHPAccordingToLevel");
static_assert(sizeof(KindDataTable_GetHPAccordingToLevel) == 0x000010, "Wrong size on KindDataTable_GetHPAccordingToLevel");
static_assert(offsetof(KindDataTable_GetHPAccordingToLevel, ID) == 0x000000, "Member 'KindDataTable_GetHPAccordingToLevel::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetHPAccordingToLevel, Level) == 0x000008, "Member 'KindDataTable_GetHPAccordingToLevel::Level' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetHPAccordingToLevel, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetHPAccordingToLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetIsFlyType
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetIsFlyType final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KindDataTable_GetIsFlyType) == 0x000004, "Wrong alignment on KindDataTable_GetIsFlyType");
static_assert(sizeof(KindDataTable_GetIsFlyType) == 0x00000C, "Wrong size on KindDataTable_GetIsFlyType");
static_assert(offsetof(KindDataTable_GetIsFlyType, ID) == 0x000000, "Member 'KindDataTable_GetIsFlyType::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetIsFlyType, ReturnValue) == 0x000008, "Member 'KindDataTable_GetIsFlyType::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetLineageCategory
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetLineageCategory final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELineageCategory                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KindDataTable_GetLineageCategory) == 0x000004, "Wrong alignment on KindDataTable_GetLineageCategory");
static_assert(sizeof(KindDataTable_GetLineageCategory) == 0x00000C, "Wrong size on KindDataTable_GetLineageCategory");
static_assert(offsetof(KindDataTable_GetLineageCategory, ID) == 0x000000, "Member 'KindDataTable_GetLineageCategory::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetLineageCategory, ReturnValue) == 0x000008, "Member 'KindDataTable_GetLineageCategory::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetLinkData
// 0x0048 (0x0048 - 0x0000)
struct KindDataTable_GetLinkData final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELinkType                                     Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_LinkData                           LinkData;                                          // 0x0010(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetLinkData) == 0x000008, "Wrong alignment on KindDataTable_GetLinkData");
static_assert(sizeof(KindDataTable_GetLinkData) == 0x000048, "Wrong size on KindDataTable_GetLinkData");
static_assert(offsetof(KindDataTable_GetLinkData, KindId) == 0x000000, "Member 'KindDataTable_GetLinkData::KindId' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetLinkData, Type) == 0x000008, "Member 'KindDataTable_GetLinkData::Type' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetLinkData, LinkData) == 0x000010, "Member 'KindDataTable_GetLinkData::LinkData' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetMagicAccordingToLevel
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetMagicAccordingToLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetMagicAccordingToLevel) == 0x000004, "Wrong alignment on KindDataTable_GetMagicAccordingToLevel");
static_assert(sizeof(KindDataTable_GetMagicAccordingToLevel) == 0x000010, "Wrong size on KindDataTable_GetMagicAccordingToLevel");
static_assert(offsetof(KindDataTable_GetMagicAccordingToLevel, ID) == 0x000000, "Member 'KindDataTable_GetMagicAccordingToLevel::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetMagicAccordingToLevel, Level) == 0x000008, "Member 'KindDataTable_GetMagicAccordingToLevel::Level' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetMagicAccordingToLevel, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetMagicAccordingToLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetMonsterSenseLotteryWeightByArrayIndex
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex) == 0x000004, "Wrong alignment on KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex");
static_assert(sizeof(KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex) == 0x000010, "Wrong size on KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex");
static_assert(offsetof(KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex, ID) == 0x000000, "Member 'KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex, ArrayIndex) == 0x000008, "Member 'KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex::ArrayIndex' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetMonsterSenseLotteryWeightByArrayIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetMonsterSenseTotalWeight
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetMonsterSenseTotalWeight final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetMonsterSenseTotalWeight) == 0x000004, "Wrong alignment on KindDataTable_GetMonsterSenseTotalWeight");
static_assert(sizeof(KindDataTable_GetMonsterSenseTotalWeight) == 0x00000C, "Wrong size on KindDataTable_GetMonsterSenseTotalWeight");
static_assert(offsetof(KindDataTable_GetMonsterSenseTotalWeight, ID) == 0x000000, "Member 'KindDataTable_GetMonsterSenseTotalWeight::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetMonsterSenseTotalWeight, ReturnValue) == 0x000008, "Member 'KindDataTable_GetMonsterSenseTotalWeight::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetMPAccordingToLevel
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetMPAccordingToLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetMPAccordingToLevel) == 0x000004, "Wrong alignment on KindDataTable_GetMPAccordingToLevel");
static_assert(sizeof(KindDataTable_GetMPAccordingToLevel) == 0x000010, "Wrong size on KindDataTable_GetMPAccordingToLevel");
static_assert(offsetof(KindDataTable_GetMPAccordingToLevel, ID) == 0x000000, "Member 'KindDataTable_GetMPAccordingToLevel::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetMPAccordingToLevel, Level) == 0x000008, "Member 'KindDataTable_GetMPAccordingToLevel::Level' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetMPAccordingToLevel, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetMPAccordingToLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetNightSight
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetNightSight final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetNightSight) == 0x000004, "Wrong alignment on KindDataTable_GetNightSight");
static_assert(sizeof(KindDataTable_GetNightSight) == 0x00000C, "Wrong size on KindDataTable_GetNightSight");
static_assert(offsetof(KindDataTable_GetNightSight, ID) == 0x000000, "Member 'KindDataTable_GetNightSight::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetNightSight, ReturnValue) == 0x000008, "Member 'KindDataTable_GetNightSight::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetNormalHearing
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetNormalHearing final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetNormalHearing) == 0x000004, "Wrong alignment on KindDataTable_GetNormalHearing");
static_assert(sizeof(KindDataTable_GetNormalHearing) == 0x00000C, "Wrong size on KindDataTable_GetNormalHearing");
static_assert(offsetof(KindDataTable_GetNormalHearing, ID) == 0x000000, "Member 'KindDataTable_GetNormalHearing::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetNormalHearing, ReturnValue) == 0x000008, "Member 'KindDataTable_GetNormalHearing::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetNormalSight
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetNormalSight final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetNormalSight) == 0x000004, "Wrong alignment on KindDataTable_GetNormalSight");
static_assert(sizeof(KindDataTable_GetNormalSight) == 0x00000C, "Wrong size on KindDataTable_GetNormalSight");
static_assert(offsetof(KindDataTable_GetNormalSight, ID) == 0x000000, "Member 'KindDataTable_GetNormalSight::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetNormalSight, ReturnValue) == 0x000008, "Member 'KindDataTable_GetNormalSight::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetOriginKindID
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetOriginKindID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetOriginKindID) == 0x000004, "Wrong alignment on KindDataTable_GetOriginKindID");
static_assert(sizeof(KindDataTable_GetOriginKindID) == 0x000010, "Wrong size on KindDataTable_GetOriginKindID");
static_assert(offsetof(KindDataTable_GetOriginKindID, ID) == 0x000000, "Member 'KindDataTable_GetOriginKindID::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetOriginKindID, ReturnValue) == 0x000008, "Member 'KindDataTable_GetOriginKindID::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetResistCalcType
// 0x0010 (0x0010 - 0x0000)
struct KindDataTable_GetResistCalcType final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResistanceType                               Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetResistCalcType) == 0x000004, "Wrong alignment on KindDataTable_GetResistCalcType");
static_assert(sizeof(KindDataTable_GetResistCalcType) == 0x000010, "Wrong size on KindDataTable_GetResistCalcType");
static_assert(offsetof(KindDataTable_GetResistCalcType, ID) == 0x000000, "Member 'KindDataTable_GetResistCalcType::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetResistCalcType, Type) == 0x000008, "Member 'KindDataTable_GetResistCalcType::Type' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetResistCalcType, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetResistCalcType::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetStatusAccordingToLevel
// 0x0024 (0x0024 - 0x0000)
struct KindDataTable_GetStatusAccordingToLevel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             ReturnValue;                                       // 0x000C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetStatusAccordingToLevel) == 0x000004, "Wrong alignment on KindDataTable_GetStatusAccordingToLevel");
static_assert(sizeof(KindDataTable_GetStatusAccordingToLevel) == 0x000024, "Wrong size on KindDataTable_GetStatusAccordingToLevel");
static_assert(offsetof(KindDataTable_GetStatusAccordingToLevel, ID) == 0x000000, "Member 'KindDataTable_GetStatusAccordingToLevel::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetStatusAccordingToLevel, Level) == 0x000008, "Member 'KindDataTable_GetStatusAccordingToLevel::Level' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetStatusAccordingToLevel, ReturnValue) == 0x00000C, "Member 'KindDataTable_GetStatusAccordingToLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetSurprisePopRange
// 0x000C (0x000C - 0x0000)
struct KindDataTable_GetSurprisePopRange final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetSurprisePopRange) == 0x000004, "Wrong alignment on KindDataTable_GetSurprisePopRange");
static_assert(sizeof(KindDataTable_GetSurprisePopRange) == 0x00000C, "Wrong size on KindDataTable_GetSurprisePopRange");
static_assert(offsetof(KindDataTable_GetSurprisePopRange, ID) == 0x000000, "Member 'KindDataTable_GetSurprisePopRange::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetSurprisePopRange, ReturnValue) == 0x000008, "Member 'KindDataTable_GetSurprisePopRange::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.GetTribalName
// 0x0020 (0x0020 - 0x0000)
struct KindDataTable_GetTribalName final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindDataTable_GetTribalName) == 0x000008, "Wrong alignment on KindDataTable_GetTribalName");
static_assert(sizeof(KindDataTable_GetTribalName) == 0x000020, "Wrong size on KindDataTable_GetTribalName");
static_assert(offsetof(KindDataTable_GetTribalName, ID) == 0x000000, "Member 'KindDataTable_GetTribalName::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_GetTribalName, ReturnValue) == 0x000008, "Member 'KindDataTable_GetTribalName::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.HasSuperArmor
// 0x000C (0x000C - 0x0000)
struct KindDataTable_HasSuperArmor final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KindDataTable_HasSuperArmor) == 0x000004, "Wrong alignment on KindDataTable_HasSuperArmor");
static_assert(sizeof(KindDataTable_HasSuperArmor) == 0x00000C, "Wrong size on KindDataTable_HasSuperArmor");
static_assert(offsetof(KindDataTable_HasSuperArmor, ID) == 0x000000, "Member 'KindDataTable_HasSuperArmor::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_HasSuperArmor, ReturnValue) == 0x000008, "Member 'KindDataTable_HasSuperArmor::ReturnValue' has a wrong offset!");

// Function DarwinGame.KindDataTable.IsResistToBlown
// 0x000C (0x000C - 0x0000)
struct KindDataTable_IsResistToBlown final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KindDataTable_IsResistToBlown) == 0x000004, "Wrong alignment on KindDataTable_IsResistToBlown");
static_assert(sizeof(KindDataTable_IsResistToBlown) == 0x00000C, "Wrong size on KindDataTable_IsResistToBlown");
static_assert(offsetof(KindDataTable_IsResistToBlown, ID) == 0x000000, "Member 'KindDataTable_IsResistToBlown::ID' has a wrong offset!");
static_assert(offsetof(KindDataTable_IsResistToBlown, ReturnValue) == 0x000008, "Member 'KindDataTable_IsResistToBlown::ReturnValue' has a wrong offset!");

// Function DarwinGame.LevelManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct LevelManager_GetInstance final
{
public:
	class ULevelManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelManager_GetInstance) == 0x000008, "Wrong alignment on LevelManager_GetInstance");
static_assert(sizeof(LevelManager_GetInstance) == 0x000008, "Wrong size on LevelManager_GetInstance");
static_assert(offsetof(LevelManager_GetInstance, ReturnValue) == 0x000000, "Member 'LevelManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.LevelManager.LoadPersistent
// 0x0008 (0x0008 - 0x0000)
struct LevelManager_LoadPersistent final
{
public:
	class FName                                   level_path;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelManager_LoadPersistent) == 0x000004, "Wrong alignment on LevelManager_LoadPersistent");
static_assert(sizeof(LevelManager_LoadPersistent) == 0x000008, "Wrong size on LevelManager_LoadPersistent");
static_assert(offsetof(LevelManager_LoadPersistent, level_path) == 0x000000, "Member 'LevelManager_LoadPersistent::level_path' has a wrong offset!");

// Function DarwinGame.LevelManager.SetAmbientVisible
// 0x0001 (0x0001 - 0x0000)
struct LevelManager_SetAmbientVisible final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelManager_SetAmbientVisible) == 0x000001, "Wrong alignment on LevelManager_SetAmbientVisible");
static_assert(sizeof(LevelManager_SetAmbientVisible) == 0x000001, "Wrong size on LevelManager_SetAmbientVisible");
static_assert(offsetof(LevelManager_SetAmbientVisible, visible) == 0x000000, "Member 'LevelManager_SetAmbientVisible::visible' has a wrong offset!");

// Function DarwinGame.LevelManager.IsFinishLoadLevelOnPlayer
// 0x0002 (0x0002 - 0x0000)
struct LevelManager_IsFinishLoadLevelOnPlayer final
{
public:
	bool                                          is_narrow;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelManager_IsFinishLoadLevelOnPlayer) == 0x000001, "Wrong alignment on LevelManager_IsFinishLoadLevelOnPlayer");
static_assert(sizeof(LevelManager_IsFinishLoadLevelOnPlayer) == 0x000002, "Wrong size on LevelManager_IsFinishLoadLevelOnPlayer");
static_assert(offsetof(LevelManager_IsFinishLoadLevelOnPlayer, is_narrow) == 0x000000, "Member 'LevelManager_IsFinishLoadLevelOnPlayer::is_narrow' has a wrong offset!");
static_assert(offsetof(LevelManager_IsFinishLoadLevelOnPlayer, ReturnValue) == 0x000001, "Member 'LevelManager_IsFinishLoadLevelOnPlayer::ReturnValue' has a wrong offset!");

// Function DarwinGame.LevelManager.IsFinishLoadLevelOnPosition
// 0x0010 (0x0010 - 0x0000)
struct LevelManager_IsFinishLoadLevelOnPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelManager_IsFinishLoadLevelOnPosition) == 0x000004, "Wrong alignment on LevelManager_IsFinishLoadLevelOnPosition");
static_assert(sizeof(LevelManager_IsFinishLoadLevelOnPosition) == 0x000010, "Wrong size on LevelManager_IsFinishLoadLevelOnPosition");
static_assert(offsetof(LevelManager_IsFinishLoadLevelOnPosition, Position) == 0x000000, "Member 'LevelManager_IsFinishLoadLevelOnPosition::Position' has a wrong offset!");
static_assert(offsetof(LevelManager_IsFinishLoadLevelOnPosition, ReturnValue) == 0x00000C, "Member 'LevelManager_IsFinishLoadLevelOnPosition::ReturnValue' has a wrong offset!");

// Function DarwinGame.LevelManager.IsFinishLoadPersistent
// 0x0001 (0x0001 - 0x0000)
struct LevelManager_IsFinishLoadPersistent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelManager_IsFinishLoadPersistent) == 0x000001, "Wrong alignment on LevelManager_IsFinishLoadPersistent");
static_assert(sizeof(LevelManager_IsFinishLoadPersistent) == 0x000001, "Wrong size on LevelManager_IsFinishLoadPersistent");
static_assert(offsetof(LevelManager_IsFinishLoadPersistent, ReturnValue) == 0x000000, "Member 'LevelManager_IsFinishLoadPersistent::ReturnValue' has a wrong offset!");

// Function DarwinGame.LevelManager.IsFinishVisibleLevelOnPlayer
// 0x0002 (0x0002 - 0x0000)
struct LevelManager_IsFinishVisibleLevelOnPlayer final
{
public:
	bool                                          is_narrow;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelManager_IsFinishVisibleLevelOnPlayer) == 0x000001, "Wrong alignment on LevelManager_IsFinishVisibleLevelOnPlayer");
static_assert(sizeof(LevelManager_IsFinishVisibleLevelOnPlayer) == 0x000002, "Wrong size on LevelManager_IsFinishVisibleLevelOnPlayer");
static_assert(offsetof(LevelManager_IsFinishVisibleLevelOnPlayer, is_narrow) == 0x000000, "Member 'LevelManager_IsFinishVisibleLevelOnPlayer::is_narrow' has a wrong offset!");
static_assert(offsetof(LevelManager_IsFinishVisibleLevelOnPlayer, ReturnValue) == 0x000001, "Member 'LevelManager_IsFinishVisibleLevelOnPlayer::ReturnValue' has a wrong offset!");

// Function DarwinGame.LevelManager.IsFinishVisibleLevelOnPosition
// 0x0010 (0x0010 - 0x0000)
struct LevelManager_IsFinishVisibleLevelOnPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelManager_IsFinishVisibleLevelOnPosition) == 0x000004, "Wrong alignment on LevelManager_IsFinishVisibleLevelOnPosition");
static_assert(sizeof(LevelManager_IsFinishVisibleLevelOnPosition) == 0x000010, "Wrong size on LevelManager_IsFinishVisibleLevelOnPosition");
static_assert(offsetof(LevelManager_IsFinishVisibleLevelOnPosition, Position) == 0x000000, "Member 'LevelManager_IsFinishVisibleLevelOnPosition::Position' has a wrong offset!");
static_assert(offsetof(LevelManager_IsFinishVisibleLevelOnPosition, ReturnValue) == 0x00000C, "Member 'LevelManager_IsFinishVisibleLevelOnPosition::ReturnValue' has a wrong offset!");

// Function DarwinGame.LinkSystemComponent.Close
// 0x0002 (0x0002 - 0x0000)
struct LinkSystemComponent_Close final
{
public:
	ELinkType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkSystemComponent_Close) == 0x000001, "Wrong alignment on LinkSystemComponent_Close");
static_assert(sizeof(LinkSystemComponent_Close) == 0x000002, "Wrong size on LinkSystemComponent_Close");
static_assert(offsetof(LinkSystemComponent_Close, Type) == 0x000000, "Member 'LinkSystemComponent_Close::Type' has a wrong offset!");
static_assert(offsetof(LinkSystemComponent_Close, bForce) == 0x000001, "Member 'LinkSystemComponent_Close::bForce' has a wrong offset!");

// Function DarwinGame.LinkSystemComponent.ExecuteLinkAction
// 0x0004 (0x0004 - 0x0000)
struct LinkSystemComponent_ExecuteLinkAction final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkSystemComponent_ExecuteLinkAction) == 0x000004, "Wrong alignment on LinkSystemComponent_ExecuteLinkAction");
static_assert(sizeof(LinkSystemComponent_ExecuteLinkAction) == 0x000004, "Wrong size on LinkSystemComponent_ExecuteLinkAction");
static_assert(offsetof(LinkSystemComponent_ExecuteLinkAction, Index_0) == 0x000000, "Member 'LinkSystemComponent_ExecuteLinkAction::Index_0' has a wrong offset!");

// Function DarwinGame.LinkSystemComponent.IsMenuOpend
// 0x0001 (0x0001 - 0x0000)
struct LinkSystemComponent_IsMenuOpend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkSystemComponent_IsMenuOpend) == 0x000001, "Wrong alignment on LinkSystemComponent_IsMenuOpend");
static_assert(sizeof(LinkSystemComponent_IsMenuOpend) == 0x000001, "Wrong size on LinkSystemComponent_IsMenuOpend");
static_assert(offsetof(LinkSystemComponent_IsMenuOpend, ReturnValue) == 0x000000, "Member 'LinkSystemComponent_IsMenuOpend::ReturnValue' has a wrong offset!");

// Function DarwinGame.LinkSystemComponent.open
// 0x0001 (0x0001 - 0x0000)
struct LinkSystemComponent_open final
{
public:
	ELinkType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkSystemComponent_open) == 0x000001, "Wrong alignment on LinkSystemComponent_open");
static_assert(sizeof(LinkSystemComponent_open) == 0x000001, "Wrong size on LinkSystemComponent_open");
static_assert(offsetof(LinkSystemComponent_open, Type) == 0x000000, "Member 'LinkSystemComponent_open::Type' has a wrong offset!");

// Function DarwinGame.LinkSystemComponent.StartReacstTimer
// 0x0010 (0x0010 - 0x0000)
struct LinkSystemComponent_StartReacstTimer final
{
public:
	class AGPACharacter*                          LinkTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELinkType                                     Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkSystemComponent_StartReacstTimer) == 0x000008, "Wrong alignment on LinkSystemComponent_StartReacstTimer");
static_assert(sizeof(LinkSystemComponent_StartReacstTimer) == 0x000010, "Wrong size on LinkSystemComponent_StartReacstTimer");
static_assert(offsetof(LinkSystemComponent_StartReacstTimer, LinkTarget) == 0x000000, "Member 'LinkSystemComponent_StartReacstTimer::LinkTarget' has a wrong offset!");
static_assert(offsetof(LinkSystemComponent_StartReacstTimer, Type) == 0x000008, "Member 'LinkSystemComponent_StartReacstTimer::Type' has a wrong offset!");
static_assert(offsetof(LinkSystemComponent_StartReacstTimer, Index_0) == 0x00000C, "Member 'LinkSystemComponent_StartReacstTimer::Index_0' has a wrong offset!");

// Function DarwinGame.LinkSystemComponent.GetLinkWidget
// 0x0008 (0x0008 - 0x0000)
struct LinkSystemComponent_GetLinkWidget final
{
public:
	class UUIField_IconLink*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkSystemComponent_GetLinkWidget) == 0x000008, "Wrong alignment on LinkSystemComponent_GetLinkWidget");
static_assert(sizeof(LinkSystemComponent_GetLinkWidget) == 0x000008, "Wrong size on LinkSystemComponent_GetLinkWidget");
static_assert(offsetof(LinkSystemComponent_GetLinkWidget, ReturnValue) == 0x000000, "Member 'LinkSystemComponent_GetLinkWidget::ReturnValue' has a wrong offset!");

// Function DarwinGame.LinkSystemLibrary.GetHighJumpHeight
// 0x0004 (0x0004 - 0x0000)
struct LinkSystemLibrary_GetHighJumpHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkSystemLibrary_GetHighJumpHeight) == 0x000004, "Wrong alignment on LinkSystemLibrary_GetHighJumpHeight");
static_assert(sizeof(LinkSystemLibrary_GetHighJumpHeight) == 0x000004, "Wrong size on LinkSystemLibrary_GetHighJumpHeight");
static_assert(offsetof(LinkSystemLibrary_GetHighJumpHeight, ReturnValue) == 0x000000, "Member 'LinkSystemLibrary_GetHighJumpHeight::ReturnValue' has a wrong offset!");

// Function DarwinGame.LocTextUtility.AddNoBreakSpace
// 0x0028 (0x0028 - 0x0000)
struct LocTextUtility_AddNoBreakSpace final
{
public:
	class FString                                 srcStr;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpaceInsertLocale                            spaceInsertlocale;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocTextUtility_AddNoBreakSpace) == 0x000008, "Wrong alignment on LocTextUtility_AddNoBreakSpace");
static_assert(sizeof(LocTextUtility_AddNoBreakSpace) == 0x000028, "Wrong size on LocTextUtility_AddNoBreakSpace");
static_assert(offsetof(LocTextUtility_AddNoBreakSpace, srcStr) == 0x000000, "Member 'LocTextUtility_AddNoBreakSpace::srcStr' has a wrong offset!");
static_assert(offsetof(LocTextUtility_AddNoBreakSpace, spaceInsertlocale) == 0x000010, "Member 'LocTextUtility_AddNoBreakSpace::spaceInsertlocale' has a wrong offset!");
static_assert(offsetof(LocTextUtility_AddNoBreakSpace, ReturnValue) == 0x000018, "Member 'LocTextUtility_AddNoBreakSpace::ReturnValue' has a wrong offset!");

// Function DarwinGame.LocTextUtility.AlignNewLines
// 0x0028 (0x0028 - 0x0000)
struct LocTextUtility_AlignNewLines final
{
public:
	class FString                                 DisplayText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UComputeTextBlock*                      TextBlock;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocTextUtility_AlignNewLines) == 0x000008, "Wrong alignment on LocTextUtility_AlignNewLines");
static_assert(sizeof(LocTextUtility_AlignNewLines) == 0x000028, "Wrong size on LocTextUtility_AlignNewLines");
static_assert(offsetof(LocTextUtility_AlignNewLines, DisplayText) == 0x000000, "Member 'LocTextUtility_AlignNewLines::DisplayText' has a wrong offset!");
static_assert(offsetof(LocTextUtility_AlignNewLines, TextBlock) == 0x000010, "Member 'LocTextUtility_AlignNewLines::TextBlock' has a wrong offset!");
static_assert(offsetof(LocTextUtility_AlignNewLines, ReturnValue) == 0x000018, "Member 'LocTextUtility_AlignNewLines::ReturnValue' has a wrong offset!");

// Function DarwinGame.LocTextUtility.IsCurrenLanguageJapanese
// 0x0001 (0x0001 - 0x0000)
struct LocTextUtility_IsCurrenLanguageJapanese final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocTextUtility_IsCurrenLanguageJapanese) == 0x000001, "Wrong alignment on LocTextUtility_IsCurrenLanguageJapanese");
static_assert(sizeof(LocTextUtility_IsCurrenLanguageJapanese) == 0x000001, "Wrong size on LocTextUtility_IsCurrenLanguageJapanese");
static_assert(offsetof(LocTextUtility_IsCurrenLanguageJapanese, ReturnValue) == 0x000000, "Member 'LocTextUtility_IsCurrenLanguageJapanese::ReturnValue' has a wrong offset!");

// Function DarwinGame.LocTextUtility.IsCurrenLanguageKorean
// 0x0001 (0x0001 - 0x0000)
struct LocTextUtility_IsCurrenLanguageKorean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocTextUtility_IsCurrenLanguageKorean) == 0x000001, "Wrong alignment on LocTextUtility_IsCurrenLanguageKorean");
static_assert(sizeof(LocTextUtility_IsCurrenLanguageKorean) == 0x000001, "Wrong size on LocTextUtility_IsCurrenLanguageKorean");
static_assert(offsetof(LocTextUtility_IsCurrenLanguageKorean, ReturnValue) == 0x000000, "Member 'LocTextUtility_IsCurrenLanguageKorean::ReturnValue' has a wrong offset!");

// Function DarwinGame.LocTextUtility.IsCurrenLanguageZhHant
// 0x0001 (0x0001 - 0x0000)
struct LocTextUtility_IsCurrenLanguageZhHant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocTextUtility_IsCurrenLanguageZhHant) == 0x000001, "Wrong alignment on LocTextUtility_IsCurrenLanguageZhHant");
static_assert(sizeof(LocTextUtility_IsCurrenLanguageZhHant) == 0x000001, "Wrong size on LocTextUtility_IsCurrenLanguageZhHant");
static_assert(offsetof(LocTextUtility_IsCurrenLanguageZhHant, ReturnValue) == 0x000000, "Member 'LocTextUtility_IsCurrenLanguageZhHant::ReturnValue' has a wrong offset!");

// Function DarwinGame.LocTextUtility.IsCurrentLanguageZhHans
// 0x0001 (0x0001 - 0x0000)
struct LocTextUtility_IsCurrentLanguageZhHans final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocTextUtility_IsCurrentLanguageZhHans) == 0x000001, "Wrong alignment on LocTextUtility_IsCurrentLanguageZhHans");
static_assert(sizeof(LocTextUtility_IsCurrentLanguageZhHans) == 0x000001, "Wrong size on LocTextUtility_IsCurrentLanguageZhHans");
static_assert(offsetof(LocTextUtility_IsCurrentLanguageZhHans, ReturnValue) == 0x000000, "Member 'LocTextUtility_IsCurrentLanguageZhHans::ReturnValue' has a wrong offset!");

// Function DarwinGame.RectangleAreaOfEffect.SetSize
// 0x0008 (0x0008 - 0x0000)
struct RectangleAreaOfEffect_SetSize final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RectangleAreaOfEffect_SetSize) == 0x000004, "Wrong alignment on RectangleAreaOfEffect_SetSize");
static_assert(sizeof(RectangleAreaOfEffect_SetSize) == 0x000008, "Wrong size on RectangleAreaOfEffect_SetSize");
static_assert(offsetof(RectangleAreaOfEffect_SetSize, Size) == 0x000000, "Member 'RectangleAreaOfEffect_SetSize::Size' has a wrong offset!");

// Function DarwinGame.M026.SetHideBone
// 0x000C (0x000C - 0x0000)
struct M026_SetHideBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hide;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(M026_SetHideBone) == 0x000004, "Wrong alignment on M026_SetHideBone");
static_assert(sizeof(M026_SetHideBone) == 0x00000C, "Wrong size on M026_SetHideBone");
static_assert(offsetof(M026_SetHideBone, BoneName) == 0x000000, "Member 'M026_SetHideBone::BoneName' has a wrong offset!");
static_assert(offsetof(M026_SetHideBone, hide) == 0x000008, "Member 'M026_SetHideBone::hide' has a wrong offset!");

// Function DarwinGame.MonsterBoss.AddIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_AddIgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_AddIgnoreActor) == 0x000008, "Wrong alignment on MonsterBoss_AddIgnoreActor");
static_assert(sizeof(MonsterBoss_AddIgnoreActor) == 0x000008, "Wrong size on MonsterBoss_AddIgnoreActor");
static_assert(offsetof(MonsterBoss_AddIgnoreActor, Actor) == 0x000000, "Member 'MonsterBoss_AddIgnoreActor::Actor' has a wrong offset!");

// Function DarwinGame.MonsterBoss.AddIgnoreActorInRush
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_AddIgnoreActorInRush final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_AddIgnoreActorInRush) == 0x000008, "Wrong alignment on MonsterBoss_AddIgnoreActorInRush");
static_assert(sizeof(MonsterBoss_AddIgnoreActorInRush) == 0x000008, "Wrong size on MonsterBoss_AddIgnoreActorInRush");
static_assert(offsetof(MonsterBoss_AddIgnoreActorInRush, Actor) == 0x000000, "Member 'MonsterBoss_AddIgnoreActorInRush::Actor' has a wrong offset!");

// Function DarwinGame.MonsterBoss.BindOnTargetPerceptionUpdated
// 0x0048 (0x0048 - 0x0000)
struct MonsterBoss_BindOnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBoss_BindOnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on MonsterBoss_BindOnTargetPerceptionUpdated");
static_assert(sizeof(MonsterBoss_BindOnTargetPerceptionUpdated) == 0x000048, "Wrong size on MonsterBoss_BindOnTargetPerceptionUpdated");
static_assert(offsetof(MonsterBoss_BindOnTargetPerceptionUpdated, Actor) == 0x000000, "Member 'MonsterBoss_BindOnTargetPerceptionUpdated::Actor' has a wrong offset!");
static_assert(offsetof(MonsterBoss_BindOnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'MonsterBoss_BindOnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function DarwinGame.MonsterBoss.BoostTick
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_BoostTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_BoostTick) == 0x000004, "Wrong alignment on MonsterBoss_BoostTick");
static_assert(sizeof(MonsterBoss_BoostTick) == 0x000004, "Wrong size on MonsterBoss_BoostTick");
static_assert(offsetof(MonsterBoss_BoostTick, DeltaSeconds) == 0x000000, "Member 'MonsterBoss_BoostTick::DeltaSeconds' has a wrong offset!");

// Function DarwinGame.MonsterBoss.BossBoostingCheckBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsterBoss_BossBoostingCheckBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_BossBoostingCheckBegin) == 0x000008, "Wrong alignment on MonsterBoss_BossBoostingCheckBegin");
static_assert(sizeof(MonsterBoss_BossBoostingCheckBegin) == 0x0002A8, "Wrong size on MonsterBoss_BossBoostingCheckBegin");
static_assert(offsetof(MonsterBoss_BossBoostingCheckBegin, fst) == 0x000000, "Member 'MonsterBoss_BossBoostingCheckBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsterBoss.BossRotateInsightTargetBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsterBoss_BossRotateInsightTargetBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_BossRotateInsightTargetBegin) == 0x000008, "Wrong alignment on MonsterBoss_BossRotateInsightTargetBegin");
static_assert(sizeof(MonsterBoss_BossRotateInsightTargetBegin) == 0x0002A8, "Wrong size on MonsterBoss_BossRotateInsightTargetBegin");
static_assert(offsetof(MonsterBoss_BossRotateInsightTargetBegin, fst) == 0x000000, "Member 'MonsterBoss_BossRotateInsightTargetBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBattleAI
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_GetBattleAI final
{
public:
	class UMonsterBossBattleAI*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBattleAI) == 0x000008, "Wrong alignment on MonsterBoss_GetBattleAI");
static_assert(sizeof(MonsterBoss_GetBattleAI) == 0x000008, "Wrong size on MonsterBoss_GetBattleAI");
static_assert(offsetof(MonsterBoss_GetBattleAI, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBattleAI::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBodyRange
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_GetBodyRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBodyRange) == 0x000004, "Wrong alignment on MonsterBoss_GetBodyRange");
static_assert(sizeof(MonsterBoss_GetBodyRange) == 0x000004, "Wrong size on MonsterBoss_GetBodyRange");
static_assert(offsetof(MonsterBoss_GetBodyRange, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBodyRange::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossObjectSightType
// 0x0010 (0x0010 - 0x0000)
struct MonsterBoss_GetBossObjectSightType final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossSightType                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBoss_GetBossObjectSightType) == 0x000008, "Wrong alignment on MonsterBoss_GetBossObjectSightType");
static_assert(sizeof(MonsterBoss_GetBossObjectSightType) == 0x000010, "Wrong size on MonsterBoss_GetBossObjectSightType");
static_assert(offsetof(MonsterBoss_GetBossObjectSightType, Target) == 0x000000, "Member 'MonsterBoss_GetBossObjectSightType::Target' has a wrong offset!");
static_assert(offsetof(MonsterBoss_GetBossObjectSightType, ReturnValue) == 0x000008, "Member 'MonsterBoss_GetBossObjectSightType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossSightType
// 0x0010 (0x0010 - 0x0000)
struct MonsterBoss_GetBossSightType final
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossSightType                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBoss_GetBossSightType) == 0x000008, "Wrong alignment on MonsterBoss_GetBossSightType");
static_assert(sizeof(MonsterBoss_GetBossSightType) == 0x000010, "Wrong size on MonsterBoss_GetBossSightType");
static_assert(offsetof(MonsterBoss_GetBossSightType, Target) == 0x000000, "Member 'MonsterBoss_GetBossSightType::Target' has a wrong offset!");
static_assert(offsetof(MonsterBoss_GetBossSightType, ReturnValue) == 0x000008, "Member 'MonsterBoss_GetBossSightType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetGimmickActor
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_GetGimmickActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetGimmickActor) == 0x000008, "Wrong alignment on MonsterBoss_GetGimmickActor");
static_assert(sizeof(MonsterBoss_GetGimmickActor) == 0x000008, "Wrong size on MonsterBoss_GetGimmickActor");
static_assert(offsetof(MonsterBoss_GetGimmickActor, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetGimmickActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetSummonID
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_GetSummonID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetSummonID) == 0x000004, "Wrong alignment on MonsterBoss_GetSummonID");
static_assert(sizeof(MonsterBoss_GetSummonID) == 0x000008, "Wrong size on MonsterBoss_GetSummonID");
static_assert(offsetof(MonsterBoss_GetSummonID, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetSummonID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.HitCheckCircleImpactFront
// 0x0014 (0x0014 - 0x0000)
struct MonsterBoss_HitCheckCircleImpactFront final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossSightType                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBoss_HitCheckCircleImpactFront) == 0x000004, "Wrong alignment on MonsterBoss_HitCheckCircleImpactFront");
static_assert(sizeof(MonsterBoss_HitCheckCircleImpactFront) == 0x000014, "Wrong size on MonsterBoss_HitCheckCircleImpactFront");
static_assert(offsetof(MonsterBoss_HitCheckCircleImpactFront, Location) == 0x000000, "Member 'MonsterBoss_HitCheckCircleImpactFront::Location' has a wrong offset!");
static_assert(offsetof(MonsterBoss_HitCheckCircleImpactFront, Radius) == 0x00000C, "Member 'MonsterBoss_HitCheckCircleImpactFront::Radius' has a wrong offset!");
static_assert(offsetof(MonsterBoss_HitCheckCircleImpactFront, ReturnValue) == 0x000010, "Member 'MonsterBoss_HitCheckCircleImpactFront::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.HitCheckCircleImpactFrontAng
// 0x0014 (0x0014 - 0x0000)
struct MonsterBoss_HitCheckCircleImpactFrontAng final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_HitCheckCircleImpactFrontAng) == 0x000004, "Wrong alignment on MonsterBoss_HitCheckCircleImpactFrontAng");
static_assert(sizeof(MonsterBoss_HitCheckCircleImpactFrontAng) == 0x000014, "Wrong size on MonsterBoss_HitCheckCircleImpactFrontAng");
static_assert(offsetof(MonsterBoss_HitCheckCircleImpactFrontAng, Location) == 0x000000, "Member 'MonsterBoss_HitCheckCircleImpactFrontAng::Location' has a wrong offset!");
static_assert(offsetof(MonsterBoss_HitCheckCircleImpactFrontAng, Radius) == 0x00000C, "Member 'MonsterBoss_HitCheckCircleImpactFrontAng::Radius' has a wrong offset!");
static_assert(offsetof(MonsterBoss_HitCheckCircleImpactFrontAng, ReturnValue) == 0x000010, "Member 'MonsterBoss_HitCheckCircleImpactFrontAng::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.HitCheckSphereImpactFront
// 0x0014 (0x0014 - 0x0000)
struct MonsterBoss_HitCheckSphereImpactFront final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossSightType                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBoss_HitCheckSphereImpactFront) == 0x000004, "Wrong alignment on MonsterBoss_HitCheckSphereImpactFront");
static_assert(sizeof(MonsterBoss_HitCheckSphereImpactFront) == 0x000014, "Wrong size on MonsterBoss_HitCheckSphereImpactFront");
static_assert(offsetof(MonsterBoss_HitCheckSphereImpactFront, Location) == 0x000000, "Member 'MonsterBoss_HitCheckSphereImpactFront::Location' has a wrong offset!");
static_assert(offsetof(MonsterBoss_HitCheckSphereImpactFront, Radius) == 0x00000C, "Member 'MonsterBoss_HitCheckSphereImpactFront::Radius' has a wrong offset!");
static_assert(offsetof(MonsterBoss_HitCheckSphereImpactFront, ReturnValue) == 0x000010, "Member 'MonsterBoss_HitCheckSphereImpactFront::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsMaxSummon
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsMaxSummon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsMaxSummon) == 0x000001, "Wrong alignment on MonsterBoss_IsMaxSummon");
static_assert(sizeof(MonsterBoss_IsMaxSummon) == 0x000001, "Wrong size on MonsterBoss_IsMaxSummon");
static_assert(offsetof(MonsterBoss_IsMaxSummon, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsMaxSummon::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsNoneSummon
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsNoneSummon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsNoneSummon) == 0x000001, "Wrong alignment on MonsterBoss_IsNoneSummon");
static_assert(sizeof(MonsterBoss_IsNoneSummon) == 0x000001, "Wrong size on MonsterBoss_IsNoneSummon");
static_assert(offsetof(MonsterBoss_IsNoneSummon, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsNoneSummon::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsOnBarrier
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsOnBarrier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsOnBarrier) == 0x000001, "Wrong alignment on MonsterBoss_IsOnBarrier");
static_assert(sizeof(MonsterBoss_IsOnBarrier) == 0x000001, "Wrong size on MonsterBoss_IsOnBarrier");
static_assert(offsetof(MonsterBoss_IsOnBarrier, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsOnBarrier::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.PushBackCircleImpactFront
// 0x0010 (0x0010 - 0x0000)
struct MonsterBoss_PushBackCircleImpactFront final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_PushBackCircleImpactFront) == 0x000004, "Wrong alignment on MonsterBoss_PushBackCircleImpactFront");
static_assert(sizeof(MonsterBoss_PushBackCircleImpactFront) == 0x000010, "Wrong size on MonsterBoss_PushBackCircleImpactFront");
static_assert(offsetof(MonsterBoss_PushBackCircleImpactFront, Location) == 0x000000, "Member 'MonsterBoss_PushBackCircleImpactFront::Location' has a wrong offset!");
static_assert(offsetof(MonsterBoss_PushBackCircleImpactFront, Radius) == 0x00000C, "Member 'MonsterBoss_PushBackCircleImpactFront::Radius' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SequenceRollBack
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_SequenceRollBack final
{
public:
	int32                                         Back;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SequenceRollBack) == 0x000004, "Wrong alignment on MonsterBoss_SequenceRollBack");
static_assert(sizeof(MonsterBoss_SequenceRollBack) == 0x000004, "Wrong size on MonsterBoss_SequenceRollBack");
static_assert(offsetof(MonsterBoss_SequenceRollBack, Back) == 0x000000, "Member 'MonsterBoss_SequenceRollBack::Back' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetAttackCont
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetAttackCont final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetAttackCont) == 0x000001, "Wrong alignment on MonsterBoss_SetAttackCont");
static_assert(sizeof(MonsterBoss_SetAttackCont) == 0x000001, "Wrong size on MonsterBoss_SetAttackCont");
static_assert(offsetof(MonsterBoss_SetAttackCont, flg) == 0x000000, "Member 'MonsterBoss_SetAttackCont::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBarrier
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetBarrier final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBarrier) == 0x000001, "Wrong alignment on MonsterBoss_SetBarrier");
static_assert(sizeof(MonsterBoss_SetBarrier) == 0x000001, "Wrong size on MonsterBoss_SetBarrier");
static_assert(offsetof(MonsterBoss_SetBarrier, flg) == 0x000000, "Member 'MonsterBoss_SetBarrier::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBarrierAppend
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetBarrierAppend final
{
public:
	EMonsterBossBarrierAppend                     step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBarrierAppend) == 0x000001, "Wrong alignment on MonsterBoss_SetBarrierAppend");
static_assert(sizeof(MonsterBoss_SetBarrierAppend) == 0x000001, "Wrong size on MonsterBoss_SetBarrierAppend");
static_assert(offsetof(MonsterBoss_SetBarrierAppend, step) == 0x000000, "Member 'MonsterBoss_SetBarrierAppend::step' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBarrierStep
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetBarrierStep final
{
public:
	EMonsterBossBarrierStep                       step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBarrierStep) == 0x000001, "Wrong alignment on MonsterBoss_SetBarrierStep");
static_assert(sizeof(MonsterBoss_SetBarrierStep) == 0x000001, "Wrong size on MonsterBoss_SetBarrierStep");
static_assert(offsetof(MonsterBoss_SetBarrierStep, step) == 0x000000, "Member 'MonsterBoss_SetBarrierStep::step' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossBoostingCheck
// 0x000C (0x000C - 0x0000)
struct MonsterBoss_SetBossBoostingCheck final
{
public:
	struct FST_BossBoostingCheck                  fst;                                               // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossBoostingCheck) == 0x000004, "Wrong alignment on MonsterBoss_SetBossBoostingCheck");
static_assert(sizeof(MonsterBoss_SetBossBoostingCheck) == 0x00000C, "Wrong size on MonsterBoss_SetBossBoostingCheck");
static_assert(offsetof(MonsterBoss_SetBossBoostingCheck, fst) == 0x000000, "Member 'MonsterBoss_SetBossBoostingCheck::fst' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossGimmickBreak
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetBossGimmickBreak final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossGimmickBreak) == 0x000001, "Wrong alignment on MonsterBoss_SetBossGimmickBreak");
static_assert(sizeof(MonsterBoss_SetBossGimmickBreak) == 0x000001, "Wrong size on MonsterBoss_SetBossGimmickBreak");
static_assert(offsetof(MonsterBoss_SetBossGimmickBreak, flg) == 0x000000, "Member 'MonsterBoss_SetBossGimmickBreak::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossHidden
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetBossHidden final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossHidden) == 0x000001, "Wrong alignment on MonsterBoss_SetBossHidden");
static_assert(sizeof(MonsterBoss_SetBossHidden) == 0x000001, "Wrong size on MonsterBoss_SetBossHidden");
static_assert(offsetof(MonsterBoss_SetBossHidden, flg) == 0x000000, "Member 'MonsterBoss_SetBossHidden::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossPhase
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetBossPhase final
{
public:
	EMonsterBossPhase                             phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossPhase) == 0x000001, "Wrong alignment on MonsterBoss_SetBossPhase");
static_assert(sizeof(MonsterBoss_SetBossPhase) == 0x000001, "Wrong size on MonsterBoss_SetBossPhase");
static_assert(offsetof(MonsterBoss_SetBossPhase, phase) == 0x000000, "Member 'MonsterBoss_SetBossPhase::phase' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossRotateInsightTarget
// 0x0024 (0x0024 - 0x0000)
struct MonsterBoss_SetBossRotateInsightTarget final
{
public:
	struct FST_BossRotateInsightTarget            cnt;                                               // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossRotateInsightTarget) == 0x000004, "Wrong alignment on MonsterBoss_SetBossRotateInsightTarget");
static_assert(sizeof(MonsterBoss_SetBossRotateInsightTarget) == 0x000024, "Wrong size on MonsterBoss_SetBossRotateInsightTarget");
static_assert(offsetof(MonsterBoss_SetBossRotateInsightTarget, cnt) == 0x000000, "Member 'MonsterBoss_SetBossRotateInsightTarget::cnt' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossSerialPeriod
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_SetBossSerialPeriod final
{
public:
	int32                                         Period;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossSerialPeriod) == 0x000004, "Wrong alignment on MonsterBoss_SetBossSerialPeriod");
static_assert(sizeof(MonsterBoss_SetBossSerialPeriod) == 0x000004, "Wrong size on MonsterBoss_SetBossSerialPeriod");
static_assert(offsetof(MonsterBoss_SetBossSerialPeriod, Period) == 0x000000, "Member 'MonsterBoss_SetBossSerialPeriod::Period' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossTargetInRange
// 0x0048 (0x0048 - 0x0000)
struct MonsterBoss_SetBossTargetInRange final
{
public:
	struct FST_BossTargetInRange                  cnt;                                               // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossTargetInRange) == 0x000004, "Wrong alignment on MonsterBoss_SetBossTargetInRange");
static_assert(sizeof(MonsterBoss_SetBossTargetInRange) == 0x000048, "Wrong size on MonsterBoss_SetBossTargetInRange");
static_assert(offsetof(MonsterBoss_SetBossTargetInRange, cnt) == 0x000000, "Member 'MonsterBoss_SetBossTargetInRange::cnt' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetBossType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetBossType final
{
public:
	EMonsterBossType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetBossType) == 0x000001, "Wrong alignment on MonsterBoss_SetBossType");
static_assert(sizeof(MonsterBoss_SetBossType) == 0x000001, "Wrong size on MonsterBoss_SetBossType");
static_assert(offsetof(MonsterBoss_SetBossType, Type) == 0x000000, "Member 'MonsterBoss_SetBossType::Type' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCamEnd
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetCamEnd final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetCamEnd) == 0x000001, "Wrong alignment on MonsterBoss_SetCamEnd");
static_assert(sizeof(MonsterBoss_SetCamEnd) == 0x000001, "Wrong size on MonsterBoss_SetCamEnd");
static_assert(offsetof(MonsterBoss_SetCamEnd, flg) == 0x000000, "Member 'MonsterBoss_SetCamEnd::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCameraControll
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetCameraControll final
{
public:
	EMonsterBossCameraControllType                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetCameraControll) == 0x000001, "Wrong alignment on MonsterBoss_SetCameraControll");
static_assert(sizeof(MonsterBoss_SetCameraControll) == 0x000001, "Wrong size on MonsterBoss_SetCameraControll");
static_assert(offsetof(MonsterBoss_SetCameraControll, Type) == 0x000000, "Member 'MonsterBoss_SetCameraControll::Type' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCameraType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetCameraType final
{
public:
	EMonsterBossCameraType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetCameraType) == 0x000001, "Wrong alignment on MonsterBoss_SetCameraType");
static_assert(sizeof(MonsterBoss_SetCameraType) == 0x000001, "Wrong size on MonsterBoss_SetCameraType");
static_assert(offsetof(MonsterBoss_SetCameraType, Type) == 0x000000, "Member 'MonsterBoss_SetCameraType::Type' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCollisionRadius
// 0x000C (0x000C - 0x0000)
struct MonsterBoss_SetCollisionRadius final
{
public:
	float                                         sensor;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         impact;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         barrier;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetCollisionRadius) == 0x000004, "Wrong alignment on MonsterBoss_SetCollisionRadius");
static_assert(sizeof(MonsterBoss_SetCollisionRadius) == 0x00000C, "Wrong size on MonsterBoss_SetCollisionRadius");
static_assert(offsetof(MonsterBoss_SetCollisionRadius, sensor) == 0x000000, "Member 'MonsterBoss_SetCollisionRadius::sensor' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisionRadius, impact) == 0x000004, "Member 'MonsterBoss_SetCollisionRadius::impact' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisionRadius, barrier) == 0x000008, "Member 'MonsterBoss_SetCollisionRadius::barrier' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCollisonLocation
// 0x0054 (0x0054 - 0x0000)
struct MonsterBoss_SetCollisonLocation final
{
public:
	struct FVector                                sensorleft;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sensorright;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                impact;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sensorleft2;                                       // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sensorright2;                                      // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                impact2;                                           // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                barrier;                                           // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetCollisonLocation) == 0x000004, "Wrong alignment on MonsterBoss_SetCollisonLocation");
static_assert(sizeof(MonsterBoss_SetCollisonLocation) == 0x000054, "Wrong size on MonsterBoss_SetCollisonLocation");
static_assert(offsetof(MonsterBoss_SetCollisonLocation, sensorleft) == 0x000000, "Member 'MonsterBoss_SetCollisonLocation::sensorleft' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisonLocation, sensorright) == 0x00000C, "Member 'MonsterBoss_SetCollisonLocation::sensorright' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisonLocation, impact) == 0x000018, "Member 'MonsterBoss_SetCollisonLocation::impact' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisonLocation, sensorleft2) == 0x000024, "Member 'MonsterBoss_SetCollisonLocation::sensorleft2' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisonLocation, sensorright2) == 0x000030, "Member 'MonsterBoss_SetCollisonLocation::sensorright2' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisonLocation, impact2) == 0x00003C, "Member 'MonsterBoss_SetCollisonLocation::impact2' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCollisonLocation, barrier) == 0x000048, "Member 'MonsterBoss_SetCollisonLocation::barrier' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCombatDuring
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetCombatDuring final
{
public:
	EMonsterBossCombatDuring                      during;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetCombatDuring) == 0x000001, "Wrong alignment on MonsterBoss_SetCombatDuring");
static_assert(sizeof(MonsterBoss_SetCombatDuring) == 0x000001, "Wrong size on MonsterBoss_SetCombatDuring");
static_assert(offsetof(MonsterBoss_SetCombatDuring, during) == 0x000000, "Member 'MonsterBoss_SetCombatDuring::during' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetContCnt
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_SetContCnt final
{
public:
	int32                                         cnt;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetContCnt) == 0x000004, "Wrong alignment on MonsterBoss_SetContCnt");
static_assert(sizeof(MonsterBoss_SetContCnt) == 0x000004, "Wrong size on MonsterBoss_SetContCnt");
static_assert(offsetof(MonsterBoss_SetContCnt, cnt) == 0x000000, "Member 'MonsterBoss_SetContCnt::cnt' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCursedStatue
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_SetCursedStatue final
{
public:
	class AActor*                                 statue;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetCursedStatue) == 0x000008, "Wrong alignment on MonsterBoss_SetCursedStatue");
static_assert(sizeof(MonsterBoss_SetCursedStatue) == 0x000008, "Wrong size on MonsterBoss_SetCursedStatue");
static_assert(offsetof(MonsterBoss_SetCursedStatue, statue) == 0x000000, "Member 'MonsterBoss_SetCursedStatue::statue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetCursedStatueLocation
// 0x0010 (0x0010 - 0x0000)
struct MonsterBoss_SetCursedStatueLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          exitui;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBoss_SetCursedStatueLocation) == 0x000004, "Wrong alignment on MonsterBoss_SetCursedStatueLocation");
static_assert(sizeof(MonsterBoss_SetCursedStatueLocation) == 0x000010, "Wrong size on MonsterBoss_SetCursedStatueLocation");
static_assert(offsetof(MonsterBoss_SetCursedStatueLocation, Location) == 0x000000, "Member 'MonsterBoss_SetCursedStatueLocation::Location' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetCursedStatueLocation, exitui) == 0x00000C, "Member 'MonsterBoss_SetCursedStatueLocation::exitui' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetEndQuickSand
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetEndQuickSand final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetEndQuickSand) == 0x000001, "Wrong alignment on MonsterBoss_SetEndQuickSand");
static_assert(sizeof(MonsterBoss_SetEndQuickSand) == 0x000001, "Wrong size on MonsterBoss_SetEndQuickSand");
static_assert(offsetof(MonsterBoss_SetEndQuickSand, flg) == 0x000000, "Member 'MonsterBoss_SetEndQuickSand::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetFirstWaitPos
// 0x000C (0x000C - 0x0000)
struct MonsterBoss_SetFirstWaitPos final
{
public:
	struct FVector                                vec;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetFirstWaitPos) == 0x000004, "Wrong alignment on MonsterBoss_SetFirstWaitPos");
static_assert(sizeof(MonsterBoss_SetFirstWaitPos) == 0x00000C, "Wrong size on MonsterBoss_SetFirstWaitPos");
static_assert(offsetof(MonsterBoss_SetFirstWaitPos, vec) == 0x000000, "Member 'MonsterBoss_SetFirstWaitPos::vec' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetGimmickActor
// 0x0018 (0x0018 - 0x0000)
struct MonsterBoss_SetGimmickActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetGimmickActor) == 0x000008, "Wrong alignment on MonsterBoss_SetGimmickActor");
static_assert(sizeof(MonsterBoss_SetGimmickActor) == 0x000018, "Wrong size on MonsterBoss_SetGimmickActor");
static_assert(offsetof(MonsterBoss_SetGimmickActor, Actor) == 0x000000, "Member 'MonsterBoss_SetGimmickActor::Actor' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetGimmickActor, Location) == 0x000008, "Member 'MonsterBoss_SetGimmickActor::Location' has a wrong offset!");
static_assert(offsetof(MonsterBoss_SetGimmickActor, Radius) == 0x000014, "Member 'MonsterBoss_SetGimmickActor::Radius' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetGimmickFixedPos
// 0x0010 (0x0010 - 0x0000)
struct MonsterBoss_SetGimmickFixedPos final
{
public:
	TArray<struct FVector>                        fixedpos;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetGimmickFixedPos) == 0x000008, "Wrong alignment on MonsterBoss_SetGimmickFixedPos");
static_assert(sizeof(MonsterBoss_SetGimmickFixedPos) == 0x000010, "Wrong size on MonsterBoss_SetGimmickFixedPos");
static_assert(offsetof(MonsterBoss_SetGimmickFixedPos, fixedpos) == 0x000000, "Member 'MonsterBoss_SetGimmickFixedPos::fixedpos' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetHitWeaknesses
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetHitWeaknesses final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetHitWeaknesses) == 0x000001, "Wrong alignment on MonsterBoss_SetHitWeaknesses");
static_assert(sizeof(MonsterBoss_SetHitWeaknesses) == 0x000001, "Wrong size on MonsterBoss_SetHitWeaknesses");
static_assert(offsetof(MonsterBoss_SetHitWeaknesses, flg) == 0x000000, "Member 'MonsterBoss_SetHitWeaknesses::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetIsInVisible
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetIsInVisible final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetIsInVisible) == 0x000001, "Wrong alignment on MonsterBoss_SetIsInVisible");
static_assert(sizeof(MonsterBoss_SetIsInVisible) == 0x000001, "Wrong size on MonsterBoss_SetIsInVisible");
static_assert(offsetof(MonsterBoss_SetIsInVisible, flg) == 0x000000, "Member 'MonsterBoss_SetIsInVisible::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetLastBossEffect
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetLastBossEffect final
{
public:
	EMonsterLastBossEffect                        eff;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetLastBossEffect) == 0x000001, "Wrong alignment on MonsterBoss_SetLastBossEffect");
static_assert(sizeof(MonsterBoss_SetLastBossEffect) == 0x000001, "Wrong size on MonsterBoss_SetLastBossEffect");
static_assert(offsetof(MonsterBoss_SetLastBossEffect, eff) == 0x000000, "Member 'MonsterBoss_SetLastBossEffect::eff' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetLeftFrontHit
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetLeftFrontHit final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetLeftFrontHit) == 0x000001, "Wrong alignment on MonsterBoss_SetLeftFrontHit");
static_assert(sizeof(MonsterBoss_SetLeftFrontHit) == 0x000001, "Wrong size on MonsterBoss_SetLeftFrontHit");
static_assert(offsetof(MonsterBoss_SetLeftFrontHit, flg) == 0x000000, "Member 'MonsterBoss_SetLeftFrontHit::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetLeftFrontOverlap
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetLeftFrontOverlap final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetLeftFrontOverlap) == 0x000001, "Wrong alignment on MonsterBoss_SetLeftFrontOverlap");
static_assert(sizeof(MonsterBoss_SetLeftFrontOverlap) == 0x000001, "Wrong size on MonsterBoss_SetLeftFrontOverlap");
static_assert(offsetof(MonsterBoss_SetLeftFrontOverlap, flg) == 0x000000, "Member 'MonsterBoss_SetLeftFrontOverlap::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetNextSection
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_SetNextSection final
{
public:
	class FName                                   Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetNextSection) == 0x000004, "Wrong alignment on MonsterBoss_SetNextSection");
static_assert(sizeof(MonsterBoss_SetNextSection) == 0x000008, "Wrong size on MonsterBoss_SetNextSection");
static_assert(offsetof(MonsterBoss_SetNextSection, Section) == 0x000000, "Member 'MonsterBoss_SetNextSection::Section' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetNohitRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_SetNohitRadius final
{
public:
	float                                         nohit;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetNohitRadius) == 0x000004, "Wrong alignment on MonsterBoss_SetNohitRadius");
static_assert(sizeof(MonsterBoss_SetNohitRadius) == 0x000004, "Wrong size on MonsterBoss_SetNohitRadius");
static_assert(offsetof(MonsterBoss_SetNohitRadius, nohit) == 0x000000, "Member 'MonsterBoss_SetNohitRadius::nohit' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetPossessedID
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_SetPossessedID final
{
public:
	class FName                                   Summon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetPossessedID) == 0x000004, "Wrong alignment on MonsterBoss_SetPossessedID");
static_assert(sizeof(MonsterBoss_SetPossessedID) == 0x000008, "Wrong size on MonsterBoss_SetPossessedID");
static_assert(offsetof(MonsterBoss_SetPossessedID, Summon) == 0x000000, "Member 'MonsterBoss_SetPossessedID::Summon' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetQuickSandBreaking
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetQuickSandBreaking final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetQuickSandBreaking) == 0x000001, "Wrong alignment on MonsterBoss_SetQuickSandBreaking");
static_assert(sizeof(MonsterBoss_SetQuickSandBreaking) == 0x000001, "Wrong size on MonsterBoss_SetQuickSandBreaking");
static_assert(offsetof(MonsterBoss_SetQuickSandBreaking, flg) == 0x000000, "Member 'MonsterBoss_SetQuickSandBreaking::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetQuickSandWait
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetQuickSandWait final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetQuickSandWait) == 0x000001, "Wrong alignment on MonsterBoss_SetQuickSandWait");
static_assert(sizeof(MonsterBoss_SetQuickSandWait) == 0x000001, "Wrong size on MonsterBoss_SetQuickSandWait");
static_assert(offsetof(MonsterBoss_SetQuickSandWait, flg) == 0x000000, "Member 'MonsterBoss_SetQuickSandWait::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetRedeyeStep
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetRedeyeStep final
{
public:
	EMonsterBossRedeyeStep                        step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetRedeyeStep) == 0x000001, "Wrong alignment on MonsterBoss_SetRedeyeStep");
static_assert(sizeof(MonsterBoss_SetRedeyeStep) == 0x000001, "Wrong size on MonsterBoss_SetRedeyeStep");
static_assert(offsetof(MonsterBoss_SetRedeyeStep, step) == 0x000000, "Member 'MonsterBoss_SetRedeyeStep::step' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetReplacement
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetReplacement final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetReplacement) == 0x000001, "Wrong alignment on MonsterBoss_SetReplacement");
static_assert(sizeof(MonsterBoss_SetReplacement) == 0x000001, "Wrong size on MonsterBoss_SetReplacement");
static_assert(offsetof(MonsterBoss_SetReplacement, flg) == 0x000000, "Member 'MonsterBoss_SetReplacement::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetReplacementBody
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetReplacementBody final
{
public:
	EMonsterBossBodyType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetReplacementBody) == 0x000001, "Wrong alignment on MonsterBoss_SetReplacementBody");
static_assert(sizeof(MonsterBoss_SetReplacementBody) == 0x000001, "Wrong size on MonsterBoss_SetReplacementBody");
static_assert(offsetof(MonsterBoss_SetReplacementBody, Type) == 0x000000, "Member 'MonsterBoss_SetReplacementBody::Type' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetRightFrontHit
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetRightFrontHit final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetRightFrontHit) == 0x000001, "Wrong alignment on MonsterBoss_SetRightFrontHit");
static_assert(sizeof(MonsterBoss_SetRightFrontHit) == 0x000001, "Wrong size on MonsterBoss_SetRightFrontHit");
static_assert(offsetof(MonsterBoss_SetRightFrontHit, flg) == 0x000000, "Member 'MonsterBoss_SetRightFrontHit::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetRightFrontOverlap
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetRightFrontOverlap final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetRightFrontOverlap) == 0x000001, "Wrong alignment on MonsterBoss_SetRightFrontOverlap");
static_assert(sizeof(MonsterBoss_SetRightFrontOverlap) == 0x000001, "Wrong size on MonsterBoss_SetRightFrontOverlap");
static_assert(offsetof(MonsterBoss_SetRightFrontOverlap, flg) == 0x000000, "Member 'MonsterBoss_SetRightFrontOverlap::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetStartCameraShake
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetStartCameraShake final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetStartCameraShake) == 0x000001, "Wrong alignment on MonsterBoss_SetStartCameraShake");
static_assert(sizeof(MonsterBoss_SetStartCameraShake) == 0x000001, "Wrong size on MonsterBoss_SetStartCameraShake");
static_assert(offsetof(MonsterBoss_SetStartCameraShake, flg) == 0x000000, "Member 'MonsterBoss_SetStartCameraShake::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetStartQuickSand
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetStartQuickSand final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetStartQuickSand) == 0x000001, "Wrong alignment on MonsterBoss_SetStartQuickSand");
static_assert(sizeof(MonsterBoss_SetStartQuickSand) == 0x000001, "Wrong size on MonsterBoss_SetStartQuickSand");
static_assert(offsetof(MonsterBoss_SetStartQuickSand, flg) == 0x000000, "Member 'MonsterBoss_SetStartQuickSand::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetSummonID
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_SetSummonID final
{
public:
	class FName                                   Summon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetSummonID) == 0x000004, "Wrong alignment on MonsterBoss_SetSummonID");
static_assert(sizeof(MonsterBoss_SetSummonID) == 0x000008, "Wrong size on MonsterBoss_SetSummonID");
static_assert(offsetof(MonsterBoss_SetSummonID, Summon) == 0x000000, "Member 'MonsterBoss_SetSummonID::Summon' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetVolcanoCollided
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetVolcanoCollided final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetVolcanoCollided) == 0x000001, "Wrong alignment on MonsterBoss_SetVolcanoCollided");
static_assert(sizeof(MonsterBoss_SetVolcanoCollided) == 0x000001, "Wrong size on MonsterBoss_SetVolcanoCollided");
static_assert(offsetof(MonsterBoss_SetVolcanoCollided, flg) == 0x000000, "Member 'MonsterBoss_SetVolcanoCollided::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.SetVolcanoGimmickAllDestroyed
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_SetVolcanoGimmickAllDestroyed final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_SetVolcanoGimmickAllDestroyed) == 0x000001, "Wrong alignment on MonsterBoss_SetVolcanoGimmickAllDestroyed");
static_assert(sizeof(MonsterBoss_SetVolcanoGimmickAllDestroyed) == 0x000001, "Wrong size on MonsterBoss_SetVolcanoGimmickAllDestroyed");
static_assert(offsetof(MonsterBoss_SetVolcanoGimmickAllDestroyed, flg) == 0x000000, "Member 'MonsterBoss_SetVolcanoGimmickAllDestroyed::flg' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetAttackCont
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetAttackCont final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetAttackCont) == 0x000001, "Wrong alignment on MonsterBoss_GetAttackCont");
static_assert(sizeof(MonsterBoss_GetAttackCont) == 0x000001, "Wrong size on MonsterBoss_GetAttackCont");
static_assert(offsetof(MonsterBoss_GetAttackCont, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetAttackCont::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBarrierAppend
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBarrierAppend final
{
public:
	EMonsterBossBarrierAppend                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBarrierAppend) == 0x000001, "Wrong alignment on MonsterBoss_GetBarrierAppend");
static_assert(sizeof(MonsterBoss_GetBarrierAppend) == 0x000001, "Wrong size on MonsterBoss_GetBarrierAppend");
static_assert(offsetof(MonsterBoss_GetBarrierAppend, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBarrierAppend::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossBoostingCheck
// 0x000C (0x000C - 0x0000)
struct MonsterBoss_GetBossBoostingCheck final
{
public:
	struct FST_BossBoostingCheck                  ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossBoostingCheck) == 0x000004, "Wrong alignment on MonsterBoss_GetBossBoostingCheck");
static_assert(sizeof(MonsterBoss_GetBossBoostingCheck) == 0x00000C, "Wrong size on MonsterBoss_GetBossBoostingCheck");
static_assert(offsetof(MonsterBoss_GetBossBoostingCheck, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossBoostingCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossDerived
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBossDerived final
{
public:
	EMonsterBossDerived                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossDerived) == 0x000001, "Wrong alignment on MonsterBoss_GetBossDerived");
static_assert(sizeof(MonsterBoss_GetBossDerived) == 0x000001, "Wrong size on MonsterBoss_GetBossDerived");
static_assert(offsetof(MonsterBoss_GetBossDerived, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossDerived::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossForceChargeBreak
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBossForceChargeBreak final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossForceChargeBreak) == 0x000001, "Wrong alignment on MonsterBoss_GetBossForceChargeBreak");
static_assert(sizeof(MonsterBoss_GetBossForceChargeBreak) == 0x000001, "Wrong size on MonsterBoss_GetBossForceChargeBreak");
static_assert(offsetof(MonsterBoss_GetBossForceChargeBreak, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossForceChargeBreak::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossForm
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBossForm final
{
public:
	EMonsterBossForm                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossForm) == 0x000001, "Wrong alignment on MonsterBoss_GetBossForm");
static_assert(sizeof(MonsterBoss_GetBossForm) == 0x000001, "Wrong size on MonsterBoss_GetBossForm");
static_assert(offsetof(MonsterBoss_GetBossForm, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossForm::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossGimmickBreak
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBossGimmickBreak final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossGimmickBreak) == 0x000001, "Wrong alignment on MonsterBoss_GetBossGimmickBreak");
static_assert(sizeof(MonsterBoss_GetBossGimmickBreak) == 0x000001, "Wrong size on MonsterBoss_GetBossGimmickBreak");
static_assert(offsetof(MonsterBoss_GetBossGimmickBreak, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossGimmickBreak::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossHidden
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBossHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossHidden) == 0x000001, "Wrong alignment on MonsterBoss_GetBossHidden");
static_assert(sizeof(MonsterBoss_GetBossHidden) == 0x000001, "Wrong size on MonsterBoss_GetBossHidden");
static_assert(offsetof(MonsterBoss_GetBossHidden, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossHidden::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossPhase
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBossPhase final
{
public:
	EMonsterBossPhase                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossPhase) == 0x000001, "Wrong alignment on MonsterBoss_GetBossPhase");
static_assert(sizeof(MonsterBoss_GetBossPhase) == 0x000001, "Wrong size on MonsterBoss_GetBossPhase");
static_assert(offsetof(MonsterBoss_GetBossPhase, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossPhase::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossRotateInsightTarget
// 0x0024 (0x0024 - 0x0000)
struct MonsterBoss_GetBossRotateInsightTarget final
{
public:
	struct FST_BossRotateInsightTarget            ReturnValue;                                       // 0x0000(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossRotateInsightTarget) == 0x000004, "Wrong alignment on MonsterBoss_GetBossRotateInsightTarget");
static_assert(sizeof(MonsterBoss_GetBossRotateInsightTarget) == 0x000024, "Wrong size on MonsterBoss_GetBossRotateInsightTarget");
static_assert(offsetof(MonsterBoss_GetBossRotateInsightTarget, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossRotateInsightTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossSerialPeriod
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_GetBossSerialPeriod final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossSerialPeriod) == 0x000004, "Wrong alignment on MonsterBoss_GetBossSerialPeriod");
static_assert(sizeof(MonsterBoss_GetBossSerialPeriod) == 0x000004, "Wrong size on MonsterBoss_GetBossSerialPeriod");
static_assert(offsetof(MonsterBoss_GetBossSerialPeriod, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossSerialPeriod::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossStage
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_GetBossStage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossStage) == 0x000004, "Wrong alignment on MonsterBoss_GetBossStage");
static_assert(sizeof(MonsterBoss_GetBossStage) == 0x000004, "Wrong size on MonsterBoss_GetBossStage");
static_assert(offsetof(MonsterBoss_GetBossStage, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossStage::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossTargetInRange
// 0x0048 (0x0048 - 0x0000)
struct MonsterBoss_GetBossTargetInRange final
{
public:
	struct FST_BossTargetInRange                  ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossTargetInRange) == 0x000004, "Wrong alignment on MonsterBoss_GetBossTargetInRange");
static_assert(sizeof(MonsterBoss_GetBossTargetInRange) == 0x000048, "Wrong size on MonsterBoss_GetBossTargetInRange");
static_assert(offsetof(MonsterBoss_GetBossTargetInRange, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossTargetInRange::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetBossType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetBossType final
{
public:
	EMonsterBossType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetBossType) == 0x000001, "Wrong alignment on MonsterBoss_GetBossType");
static_assert(sizeof(MonsterBoss_GetBossType) == 0x000001, "Wrong size on MonsterBoss_GetBossType");
static_assert(offsetof(MonsterBoss_GetBossType, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetBossType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetCamEnd
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetCamEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetCamEnd) == 0x000001, "Wrong alignment on MonsterBoss_GetCamEnd");
static_assert(sizeof(MonsterBoss_GetCamEnd) == 0x000001, "Wrong size on MonsterBoss_GetCamEnd");
static_assert(offsetof(MonsterBoss_GetCamEnd, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetCamEnd::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetCameraControll
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetCameraControll final
{
public:
	EMonsterBossCameraControllType                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetCameraControll) == 0x000001, "Wrong alignment on MonsterBoss_GetCameraControll");
static_assert(sizeof(MonsterBoss_GetCameraControll) == 0x000001, "Wrong size on MonsterBoss_GetCameraControll");
static_assert(offsetof(MonsterBoss_GetCameraControll, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetCameraControll::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetCameraType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetCameraType final
{
public:
	EMonsterBossCameraType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetCameraType) == 0x000001, "Wrong alignment on MonsterBoss_GetCameraType");
static_assert(sizeof(MonsterBoss_GetCameraType) == 0x000001, "Wrong size on MonsterBoss_GetCameraType");
static_assert(offsetof(MonsterBoss_GetCameraType, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetCameraType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetChargeBreakingStun
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetChargeBreakingStun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetChargeBreakingStun) == 0x000001, "Wrong alignment on MonsterBoss_GetChargeBreakingStun");
static_assert(sizeof(MonsterBoss_GetChargeBreakingStun) == 0x000001, "Wrong size on MonsterBoss_GetChargeBreakingStun");
static_assert(offsetof(MonsterBoss_GetChargeBreakingStun, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetChargeBreakingStun::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetCombatDuring
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetCombatDuring final
{
public:
	EMonsterBossCombatDuring                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetCombatDuring) == 0x000001, "Wrong alignment on MonsterBoss_GetCombatDuring");
static_assert(sizeof(MonsterBoss_GetCombatDuring) == 0x000001, "Wrong size on MonsterBoss_GetCombatDuring");
static_assert(offsetof(MonsterBoss_GetCombatDuring, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetCombatDuring::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetContCnt
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_GetContCnt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetContCnt) == 0x000004, "Wrong alignment on MonsterBoss_GetContCnt");
static_assert(sizeof(MonsterBoss_GetContCnt) == 0x000004, "Wrong size on MonsterBoss_GetContCnt");
static_assert(offsetof(MonsterBoss_GetContCnt, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetContCnt::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetEndQuickSand
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetEndQuickSand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetEndQuickSand) == 0x000001, "Wrong alignment on MonsterBoss_GetEndQuickSand");
static_assert(sizeof(MonsterBoss_GetEndQuickSand) == 0x000001, "Wrong size on MonsterBoss_GetEndQuickSand");
static_assert(offsetof(MonsterBoss_GetEndQuickSand, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetEndQuickSand::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetExposeWeaknesses
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetExposeWeaknesses final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetExposeWeaknesses) == 0x000001, "Wrong alignment on MonsterBoss_GetExposeWeaknesses");
static_assert(sizeof(MonsterBoss_GetExposeWeaknesses) == 0x000001, "Wrong size on MonsterBoss_GetExposeWeaknesses");
static_assert(offsetof(MonsterBoss_GetExposeWeaknesses, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetExposeWeaknesses::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetHitWeaknesses
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetHitWeaknesses final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetHitWeaknesses) == 0x000001, "Wrong alignment on MonsterBoss_GetHitWeaknesses");
static_assert(sizeof(MonsterBoss_GetHitWeaknesses) == 0x000001, "Wrong size on MonsterBoss_GetHitWeaknesses");
static_assert(offsetof(MonsterBoss_GetHitWeaknesses, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetHitWeaknesses::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetImpactCollisionFrontEnd
// 0x000C (0x000C - 0x0000)
struct MonsterBoss_GetImpactCollisionFrontEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetImpactCollisionFrontEnd) == 0x000004, "Wrong alignment on MonsterBoss_GetImpactCollisionFrontEnd");
static_assert(sizeof(MonsterBoss_GetImpactCollisionFrontEnd) == 0x00000C, "Wrong size on MonsterBoss_GetImpactCollisionFrontEnd");
static_assert(offsetof(MonsterBoss_GetImpactCollisionFrontEnd, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetImpactCollisionFrontEnd::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetImpactCollisionRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_GetImpactCollisionRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetImpactCollisionRadius) == 0x000004, "Wrong alignment on MonsterBoss_GetImpactCollisionRadius");
static_assert(sizeof(MonsterBoss_GetImpactCollisionRadius) == 0x000004, "Wrong size on MonsterBoss_GetImpactCollisionRadius");
static_assert(offsetof(MonsterBoss_GetImpactCollisionRadius, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetImpactCollisionRadius::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetImpactCollisionRearEnd
// 0x000C (0x000C - 0x0000)
struct MonsterBoss_GetImpactCollisionRearEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetImpactCollisionRearEnd) == 0x000004, "Wrong alignment on MonsterBoss_GetImpactCollisionRearEnd");
static_assert(sizeof(MonsterBoss_GetImpactCollisionRearEnd) == 0x00000C, "Wrong size on MonsterBoss_GetImpactCollisionRearEnd");
static_assert(offsetof(MonsterBoss_GetImpactCollisionRearEnd, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetImpactCollisionRearEnd::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetIsInVisible
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetIsInVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetIsInVisible) == 0x000001, "Wrong alignment on MonsterBoss_GetIsInVisible");
static_assert(sizeof(MonsterBoss_GetIsInVisible) == 0x000001, "Wrong size on MonsterBoss_GetIsInVisible");
static_assert(offsetof(MonsterBoss_GetIsInVisible, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetIsInVisible::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetLeftFrontHit
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetLeftFrontHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetLeftFrontHit) == 0x000001, "Wrong alignment on MonsterBoss_GetLeftFrontHit");
static_assert(sizeof(MonsterBoss_GetLeftFrontHit) == 0x000001, "Wrong size on MonsterBoss_GetLeftFrontHit");
static_assert(offsetof(MonsterBoss_GetLeftFrontHit, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetLeftFrontHit::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetLeftFrontOverlap
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetLeftFrontOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetLeftFrontOverlap) == 0x000001, "Wrong alignment on MonsterBoss_GetLeftFrontOverlap");
static_assert(sizeof(MonsterBoss_GetLeftFrontOverlap) == 0x000001, "Wrong size on MonsterBoss_GetLeftFrontOverlap");
static_assert(offsetof(MonsterBoss_GetLeftFrontOverlap, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetLeftFrontOverlap::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetNextSection
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_GetNextSection final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetNextSection) == 0x000004, "Wrong alignment on MonsterBoss_GetNextSection");
static_assert(sizeof(MonsterBoss_GetNextSection) == 0x000008, "Wrong size on MonsterBoss_GetNextSection");
static_assert(offsetof(MonsterBoss_GetNextSection, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetNextSection::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetNohitRadius
// 0x0004 (0x0004 - 0x0000)
struct MonsterBoss_GetNohitRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetNohitRadius) == 0x000004, "Wrong alignment on MonsterBoss_GetNohitRadius");
static_assert(sizeof(MonsterBoss_GetNohitRadius) == 0x000004, "Wrong size on MonsterBoss_GetNohitRadius");
static_assert(offsetof(MonsterBoss_GetNohitRadius, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetNohitRadius::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetPossessedID
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_GetPossessedID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetPossessedID) == 0x000004, "Wrong alignment on MonsterBoss_GetPossessedID");
static_assert(sizeof(MonsterBoss_GetPossessedID) == 0x000008, "Wrong size on MonsterBoss_GetPossessedID");
static_assert(offsetof(MonsterBoss_GetPossessedID, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetPossessedID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetQuickSand
// 0x0008 (0x0008 - 0x0000)
struct MonsterBoss_GetQuickSand final
{
public:
	class AFieldObjectBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetQuickSand) == 0x000008, "Wrong alignment on MonsterBoss_GetQuickSand");
static_assert(sizeof(MonsterBoss_GetQuickSand) == 0x000008, "Wrong size on MonsterBoss_GetQuickSand");
static_assert(offsetof(MonsterBoss_GetQuickSand, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetQuickSand::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetQuickSandBreaking
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetQuickSandBreaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetQuickSandBreaking) == 0x000001, "Wrong alignment on MonsterBoss_GetQuickSandBreaking");
static_assert(sizeof(MonsterBoss_GetQuickSandBreaking) == 0x000001, "Wrong size on MonsterBoss_GetQuickSandBreaking");
static_assert(offsetof(MonsterBoss_GetQuickSandBreaking, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetQuickSandBreaking::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetQuickSandWait
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetQuickSandWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetQuickSandWait) == 0x000001, "Wrong alignment on MonsterBoss_GetQuickSandWait");
static_assert(sizeof(MonsterBoss_GetQuickSandWait) == 0x000001, "Wrong size on MonsterBoss_GetQuickSandWait");
static_assert(offsetof(MonsterBoss_GetQuickSandWait, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetQuickSandWait::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetRedeyeStep
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetRedeyeStep final
{
public:
	EMonsterBossRedeyeStep                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetRedeyeStep) == 0x000001, "Wrong alignment on MonsterBoss_GetRedeyeStep");
static_assert(sizeof(MonsterBoss_GetRedeyeStep) == 0x000001, "Wrong size on MonsterBoss_GetRedeyeStep");
static_assert(offsetof(MonsterBoss_GetRedeyeStep, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetRedeyeStep::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetReplacement
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetReplacement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetReplacement) == 0x000001, "Wrong alignment on MonsterBoss_GetReplacement");
static_assert(sizeof(MonsterBoss_GetReplacement) == 0x000001, "Wrong size on MonsterBoss_GetReplacement");
static_assert(offsetof(MonsterBoss_GetReplacement, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetReplacement::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetRestraintChargeBreak
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetRestraintChargeBreak final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetRestraintChargeBreak) == 0x000001, "Wrong alignment on MonsterBoss_GetRestraintChargeBreak");
static_assert(sizeof(MonsterBoss_GetRestraintChargeBreak) == 0x000001, "Wrong size on MonsterBoss_GetRestraintChargeBreak");
static_assert(offsetof(MonsterBoss_GetRestraintChargeBreak, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetRestraintChargeBreak::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetRightFrontHit
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetRightFrontHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetRightFrontHit) == 0x000001, "Wrong alignment on MonsterBoss_GetRightFrontHit");
static_assert(sizeof(MonsterBoss_GetRightFrontHit) == 0x000001, "Wrong size on MonsterBoss_GetRightFrontHit");
static_assert(offsetof(MonsterBoss_GetRightFrontHit, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetRightFrontHit::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetRightFrontOverlap
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetRightFrontOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetRightFrontOverlap) == 0x000001, "Wrong alignment on MonsterBoss_GetRightFrontOverlap");
static_assert(sizeof(MonsterBoss_GetRightFrontOverlap) == 0x000001, "Wrong size on MonsterBoss_GetRightFrontOverlap");
static_assert(offsetof(MonsterBoss_GetRightFrontOverlap, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetRightFrontOverlap::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetStartCameraShake
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetStartCameraShake final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetStartCameraShake) == 0x000001, "Wrong alignment on MonsterBoss_GetStartCameraShake");
static_assert(sizeof(MonsterBoss_GetStartCameraShake) == 0x000001, "Wrong size on MonsterBoss_GetStartCameraShake");
static_assert(offsetof(MonsterBoss_GetStartCameraShake, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetStartCameraShake::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetStartQuickSand
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetStartQuickSand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetStartQuickSand) == 0x000001, "Wrong alignment on MonsterBoss_GetStartQuickSand");
static_assert(sizeof(MonsterBoss_GetStartQuickSand) == 0x000001, "Wrong size on MonsterBoss_GetStartQuickSand");
static_assert(offsetof(MonsterBoss_GetStartQuickSand, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetStartQuickSand::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.GetVolcanoCollided
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_GetVolcanoCollided final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_GetVolcanoCollided) == 0x000001, "Wrong alignment on MonsterBoss_GetVolcanoCollided");
static_assert(sizeof(MonsterBoss_GetVolcanoCollided) == 0x000001, "Wrong size on MonsterBoss_GetVolcanoCollided");
static_assert(offsetof(MonsterBoss_GetVolcanoCollided, ReturnValue) == 0x000000, "Member 'MonsterBoss_GetVolcanoCollided::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsBossBoost
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsBossBoost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsBossBoost) == 0x000001, "Wrong alignment on MonsterBoss_IsBossBoost");
static_assert(sizeof(MonsterBoss_IsBossBoost) == 0x000001, "Wrong size on MonsterBoss_IsBossBoost");
static_assert(offsetof(MonsterBoss_IsBossBoost, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsBossBoost::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsBossDead
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsBossDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsBossDead) == 0x000001, "Wrong alignment on MonsterBoss_IsBossDead");
static_assert(sizeof(MonsterBoss_IsBossDead) == 0x000001, "Wrong size on MonsterBoss_IsBossDead");
static_assert(offsetof(MonsterBoss_IsBossDead, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsBossDead::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsBossDeathblow
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsBossDeathblow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsBossDeathblow) == 0x000001, "Wrong alignment on MonsterBoss_IsBossDeathblow");
static_assert(sizeof(MonsterBoss_IsBossDeathblow) == 0x000001, "Wrong size on MonsterBoss_IsBossDeathblow");
static_assert(offsetof(MonsterBoss_IsBossDeathblow, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsBossDeathblow::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsBossFainting
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsBossFainting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsBossFainting) == 0x000001, "Wrong alignment on MonsterBoss_IsBossFainting");
static_assert(sizeof(MonsterBoss_IsBossFainting) == 0x000001, "Wrong size on MonsterBoss_IsBossFainting");
static_assert(offsetof(MonsterBoss_IsBossFainting, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsBossFainting::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsChangeRedeyeStep
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsChangeRedeyeStep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsChangeRedeyeStep) == 0x000001, "Wrong alignment on MonsterBoss_IsChangeRedeyeStep");
static_assert(sizeof(MonsterBoss_IsChangeRedeyeStep) == 0x000001, "Wrong size on MonsterBoss_IsChangeRedeyeStep");
static_assert(offsetof(MonsterBoss_IsChangeRedeyeStep, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsChangeRedeyeStep::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBoss.IsGimmickFirstBreak
// 0x0001 (0x0001 - 0x0000)
struct MonsterBoss_IsGimmickFirstBreak final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBoss_IsGimmickFirstBreak) == 0x000001, "Wrong alignment on MonsterBoss_IsGimmickFirstBreak");
static_assert(sizeof(MonsterBoss_IsGimmickFirstBreak) == 0x000001, "Wrong size on MonsterBoss_IsGimmickFirstBreak");
static_assert(offsetof(MonsterBoss_IsGimmickFirstBreak, ReturnValue) == 0x000000, "Member 'MonsterBoss_IsGimmickFirstBreak::ReturnValue' has a wrong offset!");

// Function DarwinGame.MemoryTestGameMode.GetTestObjects
// 0x0010 (0x0010 - 0x0000)
struct MemoryTestGameMode_GetTestObjects final
{
public:
	TArray<class UMemoryTestObject*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MemoryTestGameMode_GetTestObjects) == 0x000008, "Wrong alignment on MemoryTestGameMode_GetTestObjects");
static_assert(sizeof(MemoryTestGameMode_GetTestObjects) == 0x000010, "Wrong size on MemoryTestGameMode_GetTestObjects");
static_assert(offsetof(MemoryTestGameMode_GetTestObjects, ReturnValue) == 0x000000, "Member 'MemoryTestGameMode_GetTestObjects::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.adjustIEMessageId
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_adjustIEMessageId final
{
public:
	class FString                                 SrcID;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DstID;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_adjustIEMessageId) == 0x000008, "Wrong alignment on MessageUtils_adjustIEMessageId");
static_assert(sizeof(MessageUtils_adjustIEMessageId) == 0x000028, "Wrong size on MessageUtils_adjustIEMessageId");
static_assert(offsetof(MessageUtils_adjustIEMessageId, SrcID) == 0x000000, "Member 'MessageUtils_adjustIEMessageId::SrcID' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId, DstID) == 0x000010, "Member 'MessageUtils_adjustIEMessageId::DstID' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId, ReturnValue) == 0x000020, "Member 'MessageUtils_adjustIEMessageId::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.adjustIEMessageId_Branch
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_adjustIEMessageId_Branch final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextID;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flag;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_adjustIEMessageId_Branch) == 0x000008, "Wrong alignment on MessageUtils_adjustIEMessageId_Branch");
static_assert(sizeof(MessageUtils_adjustIEMessageId_Branch) == 0x000028, "Wrong size on MessageUtils_adjustIEMessageId_Branch");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Branch, Src) == 0x000000, "Member 'MessageUtils_adjustIEMessageId_Branch::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Branch, NextID) == 0x000010, "Member 'MessageUtils_adjustIEMessageId_Branch::NextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Branch, Flag) == 0x000020, "Member 'MessageUtils_adjustIEMessageId_Branch::Flag' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Branch, ReturnValue) == 0x000024, "Member 'MessageUtils_adjustIEMessageId_Branch::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.adjustIEMessageId_Jouken
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_adjustIEMessageId_Jouken final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextID;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJoukenType                               JoukenType;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_adjustIEMessageId_Jouken) == 0x000008, "Wrong alignment on MessageUtils_adjustIEMessageId_Jouken");
static_assert(sizeof(MessageUtils_adjustIEMessageId_Jouken) == 0x000028, "Wrong size on MessageUtils_adjustIEMessageId_Jouken");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Jouken, Src) == 0x000000, "Member 'MessageUtils_adjustIEMessageId_Jouken::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Jouken, NextID) == 0x000010, "Member 'MessageUtils_adjustIEMessageId_Jouken::NextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Jouken, JoukenType) == 0x000020, "Member 'MessageUtils_adjustIEMessageId_Jouken::JoukenType' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Jouken, ReturnValue) == 0x000021, "Member 'MessageUtils_adjustIEMessageId_Jouken::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.adjustIEMessageId_PCType
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_adjustIEMessageId_PCType final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextID;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextPCType                                   NewPcType;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_adjustIEMessageId_PCType) == 0x000008, "Wrong alignment on MessageUtils_adjustIEMessageId_PCType");
static_assert(sizeof(MessageUtils_adjustIEMessageId_PCType) == 0x000028, "Wrong size on MessageUtils_adjustIEMessageId_PCType");
static_assert(offsetof(MessageUtils_adjustIEMessageId_PCType, Src) == 0x000000, "Member 'MessageUtils_adjustIEMessageId_PCType::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_PCType, NextID) == 0x000010, "Member 'MessageUtils_adjustIEMessageId_PCType::NextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_PCType, NewPcType) == 0x000020, "Member 'MessageUtils_adjustIEMessageId_PCType::NewPcType' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_PCType, ReturnValue) == 0x000021, "Member 'MessageUtils_adjustIEMessageId_PCType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.adjustIEMessageId_TalkNum
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_adjustIEMessageId_TalkNum final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextID;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   QuestState;                                        // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_adjustIEMessageId_TalkNum) == 0x000008, "Wrong alignment on MessageUtils_adjustIEMessageId_TalkNum");
static_assert(sizeof(MessageUtils_adjustIEMessageId_TalkNum) == 0x000028, "Wrong size on MessageUtils_adjustIEMessageId_TalkNum");
static_assert(offsetof(MessageUtils_adjustIEMessageId_TalkNum, Src) == 0x000000, "Member 'MessageUtils_adjustIEMessageId_TalkNum::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_TalkNum, NextID) == 0x000010, "Member 'MessageUtils_adjustIEMessageId_TalkNum::NextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_TalkNum, QuestState) == 0x000020, "Member 'MessageUtils_adjustIEMessageId_TalkNum::QuestState' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_TalkNum, ReturnValue) == 0x000021, "Member 'MessageUtils_adjustIEMessageId_TalkNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.adjustIEMessageId_Time
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_adjustIEMessageId_Time final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextID;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_adjustIEMessageId_Time) == 0x000008, "Wrong alignment on MessageUtils_adjustIEMessageId_Time");
static_assert(sizeof(MessageUtils_adjustIEMessageId_Time) == 0x000028, "Wrong size on MessageUtils_adjustIEMessageId_Time");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Time, Src) == 0x000000, "Member 'MessageUtils_adjustIEMessageId_Time::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Time, NextID) == 0x000010, "Member 'MessageUtils_adjustIEMessageId_Time::NextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Time, Hour) == 0x000020, "Member 'MessageUtils_adjustIEMessageId_Time::Hour' has a wrong offset!");
static_assert(offsetof(MessageUtils_adjustIEMessageId_Time, ReturnValue) == 0x000024, "Member 'MessageUtils_adjustIEMessageId_Time::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.AdjustIEQuestTalkID
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_AdjustIEQuestTalkID final
{
public:
	class FString                                 TalkId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventType                                    EventType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   QuestState;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewTalkId;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_AdjustIEQuestTalkID) == 0x000008, "Wrong alignment on MessageUtils_AdjustIEQuestTalkID");
static_assert(sizeof(MessageUtils_AdjustIEQuestTalkID) == 0x000028, "Wrong size on MessageUtils_AdjustIEQuestTalkID");
static_assert(offsetof(MessageUtils_AdjustIEQuestTalkID, TalkId) == 0x000000, "Member 'MessageUtils_AdjustIEQuestTalkID::TalkId' has a wrong offset!");
static_assert(offsetof(MessageUtils_AdjustIEQuestTalkID, EventType) == 0x000010, "Member 'MessageUtils_AdjustIEQuestTalkID::EventType' has a wrong offset!");
static_assert(offsetof(MessageUtils_AdjustIEQuestTalkID, QuestState) == 0x000011, "Member 'MessageUtils_AdjustIEQuestTalkID::QuestState' has a wrong offset!");
static_assert(offsetof(MessageUtils_AdjustIEQuestTalkID, NewTalkId) == 0x000018, "Member 'MessageUtils_AdjustIEQuestTalkID::NewTalkId' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckColorTag
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_CheckColorTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsColor;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         R;                                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckColorTag) == 0x000008, "Wrong alignment on MessageUtils_CheckColorTag");
static_assert(sizeof(MessageUtils_CheckColorTag) == 0x000028, "Wrong size on MessageUtils_CheckColorTag");
static_assert(offsetof(MessageUtils_CheckColorTag, Src) == 0x000000, "Member 'MessageUtils_CheckColorTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckColorTag, IsColor) == 0x000010, "Member 'MessageUtils_CheckColorTag::IsColor' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckColorTag, R) == 0x000014, "Member 'MessageUtils_CheckColorTag::R' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckColorTag, G) == 0x000018, "Member 'MessageUtils_CheckColorTag::G' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckColorTag, B) == 0x00001C, "Member 'MessageUtils_CheckColorTag::B' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckColorTag, A) == 0x000020, "Member 'MessageUtils_CheckColorTag::A' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckDelegateTag
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_CheckDelegateTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckDelegateTag) == 0x000008, "Wrong alignment on MessageUtils_CheckDelegateTag");
static_assert(sizeof(MessageUtils_CheckDelegateTag) == 0x000028, "Wrong size on MessageUtils_CheckDelegateTag");
static_assert(offsetof(MessageUtils_CheckDelegateTag, Src) == 0x000000, "Member 'MessageUtils_CheckDelegateTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckDelegateTag, OutString) == 0x000010, "Member 'MessageUtils_CheckDelegateTag::OutString' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckDelegateTag, ReturnValue) == 0x000020, "Member 'MessageUtils_CheckDelegateTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckEmojiChangeColorTag
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_CheckEmojiChangeColorTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsColor;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         R;                                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckEmojiChangeColorTag) == 0x000008, "Wrong alignment on MessageUtils_CheckEmojiChangeColorTag");
static_assert(sizeof(MessageUtils_CheckEmojiChangeColorTag) == 0x000028, "Wrong size on MessageUtils_CheckEmojiChangeColorTag");
static_assert(offsetof(MessageUtils_CheckEmojiChangeColorTag, Src) == 0x000000, "Member 'MessageUtils_CheckEmojiChangeColorTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmojiChangeColorTag, IsColor) == 0x000010, "Member 'MessageUtils_CheckEmojiChangeColorTag::IsColor' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmojiChangeColorTag, R) == 0x000014, "Member 'MessageUtils_CheckEmojiChangeColorTag::R' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmojiChangeColorTag, G) == 0x000018, "Member 'MessageUtils_CheckEmojiChangeColorTag::G' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmojiChangeColorTag, B) == 0x00001C, "Member 'MessageUtils_CheckEmojiChangeColorTag::B' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmojiChangeColorTag, A) == 0x000020, "Member 'MessageUtils_CheckEmojiChangeColorTag::A' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckEmojiTag
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_CheckEmojiTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStamp;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeID;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_CheckEmojiTag) == 0x000008, "Wrong alignment on MessageUtils_CheckEmojiTag");
static_assert(sizeof(MessageUtils_CheckEmojiTag) == 0x000018, "Wrong size on MessageUtils_CheckEmojiTag");
static_assert(offsetof(MessageUtils_CheckEmojiTag, Src) == 0x000000, "Member 'MessageUtils_CheckEmojiTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmojiTag, IsStamp) == 0x000010, "Member 'MessageUtils_CheckEmojiTag::IsStamp' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmojiTag, TypeID) == 0x000014, "Member 'MessageUtils_CheckEmojiTag::TypeID' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckEmotionEffectTag
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_CheckEmotionEffectTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsemotionEffect;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmotionEffectID                              EmotionEffectID;                                   // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckEmotionEffectTag) == 0x000008, "Wrong alignment on MessageUtils_CheckEmotionEffectTag");
static_assert(sizeof(MessageUtils_CheckEmotionEffectTag) == 0x000018, "Wrong size on MessageUtils_CheckEmotionEffectTag");
static_assert(offsetof(MessageUtils_CheckEmotionEffectTag, Src) == 0x000000, "Member 'MessageUtils_CheckEmotionEffectTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmotionEffectTag, IsemotionEffect) == 0x000010, "Member 'MessageUtils_CheckEmotionEffectTag::IsemotionEffect' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckEmotionEffectTag, EmotionEffectID) == 0x000011, "Member 'MessageUtils_CheckEmotionEffectTag::EmotionEffectID' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckFlagCommand
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_CheckFlagCommand final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckFlagCommand) == 0x000008, "Wrong alignment on MessageUtils_CheckFlagCommand");
static_assert(sizeof(MessageUtils_CheckFlagCommand) == 0x000018, "Wrong size on MessageUtils_CheckFlagCommand");
static_assert(offsetof(MessageUtils_CheckFlagCommand, TextID) == 0x000000, "Member 'MessageUtils_CheckFlagCommand::TextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckFlagCommand, ReturnValue) == 0x000010, "Member 'MessageUtils_CheckFlagCommand::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckFukidashiStamp
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_CheckFukidashiStamp final
{
public:
	class FString                                 Serifu;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStampIconType                                StampType;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckFukidashiStamp) == 0x000008, "Wrong alignment on MessageUtils_CheckFukidashiStamp");
static_assert(sizeof(MessageUtils_CheckFukidashiStamp) == 0x000018, "Wrong size on MessageUtils_CheckFukidashiStamp");
static_assert(offsetof(MessageUtils_CheckFukidashiStamp, Serifu) == 0x000000, "Member 'MessageUtils_CheckFukidashiStamp::Serifu' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckFukidashiStamp, StampType) == 0x000010, "Member 'MessageUtils_CheckFukidashiStamp::StampType' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckFukidashiStamp, ReturnValue) == 0x000011, "Member 'MessageUtils_CheckFukidashiStamp::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckOutLineColorTag
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_CheckOutLineColorTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsColor;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         R;                                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckOutLineColorTag) == 0x000008, "Wrong alignment on MessageUtils_CheckOutLineColorTag");
static_assert(sizeof(MessageUtils_CheckOutLineColorTag) == 0x000028, "Wrong size on MessageUtils_CheckOutLineColorTag");
static_assert(offsetof(MessageUtils_CheckOutLineColorTag, Src) == 0x000000, "Member 'MessageUtils_CheckOutLineColorTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckOutLineColorTag, IsColor) == 0x000010, "Member 'MessageUtils_CheckOutLineColorTag::IsColor' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckOutLineColorTag, R) == 0x000014, "Member 'MessageUtils_CheckOutLineColorTag::R' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckOutLineColorTag, G) == 0x000018, "Member 'MessageUtils_CheckOutLineColorTag::G' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckOutLineColorTag, B) == 0x00001C, "Member 'MessageUtils_CheckOutLineColorTag::B' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckOutLineColorTag, A) == 0x000020, "Member 'MessageUtils_CheckOutLineColorTag::A' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckPartVoiceTag
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_CheckPartVoiceTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPartVoice;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TalkTypeName;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_CheckPartVoiceTag) == 0x000008, "Wrong alignment on MessageUtils_CheckPartVoiceTag");
static_assert(sizeof(MessageUtils_CheckPartVoiceTag) == 0x000028, "Wrong size on MessageUtils_CheckPartVoiceTag");
static_assert(offsetof(MessageUtils_CheckPartVoiceTag, Src) == 0x000000, "Member 'MessageUtils_CheckPartVoiceTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckPartVoiceTag, IsPartVoice) == 0x000010, "Member 'MessageUtils_CheckPartVoiceTag::IsPartVoice' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckPartVoiceTag, TalkTypeName) == 0x000018, "Member 'MessageUtils_CheckPartVoiceTag::TalkTypeName' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckSoundTag
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_CheckSoundTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSound;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomCueSheetCategory                         SoundType;                                         // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SoundNo;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_CheckSoundTag) == 0x000008, "Wrong alignment on MessageUtils_CheckSoundTag");
static_assert(sizeof(MessageUtils_CheckSoundTag) == 0x000018, "Wrong size on MessageUtils_CheckSoundTag");
static_assert(offsetof(MessageUtils_CheckSoundTag, Src) == 0x000000, "Member 'MessageUtils_CheckSoundTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckSoundTag, IsSound) == 0x000010, "Member 'MessageUtils_CheckSoundTag::IsSound' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckSoundTag, SoundType) == 0x000011, "Member 'MessageUtils_CheckSoundTag::SoundType' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckSoundTag, SoundNo) == 0x000014, "Member 'MessageUtils_CheckSoundTag::SoundNo' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckStampTag
// 0x0030 (0x0030 - 0x0000)
struct MessageUtils_CheckStampTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStamp;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStampIconType                                StampType;                                         // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteType                                    emoteType;                                         // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Option;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopNum;                                           // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckStampTag) == 0x000008, "Wrong alignment on MessageUtils_CheckStampTag");
static_assert(sizeof(MessageUtils_CheckStampTag) == 0x000030, "Wrong size on MessageUtils_CheckStampTag");
static_assert(offsetof(MessageUtils_CheckStampTag, Src) == 0x000000, "Member 'MessageUtils_CheckStampTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckStampTag, IsStamp) == 0x000010, "Member 'MessageUtils_CheckStampTag::IsStamp' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckStampTag, StampType) == 0x000011, "Member 'MessageUtils_CheckStampTag::StampType' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckStampTag, emoteType) == 0x000012, "Member 'MessageUtils_CheckStampTag::emoteType' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckStampTag, Option) == 0x000018, "Member 'MessageUtils_CheckStampTag::Option' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckStampTag, LoopNum) == 0x000028, "Member 'MessageUtils_CheckStampTag::LoopNum' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckTag
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_CheckTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_CheckTag) == 0x000008, "Wrong alignment on MessageUtils_CheckTag");
static_assert(sizeof(MessageUtils_CheckTag) == 0x000018, "Wrong size on MessageUtils_CheckTag");
static_assert(offsetof(MessageUtils_CheckTag, Src) == 0x000000, "Member 'MessageUtils_CheckTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckTag, ReturnValue) == 0x000010, "Member 'MessageUtils_CheckTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.CheckTipsTag
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_CheckTipsTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTips;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TipsID;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_CheckTipsTag) == 0x000008, "Wrong alignment on MessageUtils_CheckTipsTag");
static_assert(sizeof(MessageUtils_CheckTipsTag) == 0x000028, "Wrong size on MessageUtils_CheckTipsTag");
static_assert(offsetof(MessageUtils_CheckTipsTag, Src) == 0x000000, "Member 'MessageUtils_CheckTipsTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckTipsTag, IsTips) == 0x000010, "Member 'MessageUtils_CheckTipsTag::IsTips' has a wrong offset!");
static_assert(offsetof(MessageUtils_CheckTipsTag, TipsID) == 0x000018, "Member 'MessageUtils_CheckTipsTag::TipsID' has a wrong offset!");

// Function DarwinGame.MessageUtils.Command_Check_Chart
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_Command_Check_Chart final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextTalkChart                                ChartID;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChartOnly;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_Command_Check_Chart) == 0x000008, "Wrong alignment on MessageUtils_Command_Check_Chart");
static_assert(sizeof(MessageUtils_Command_Check_Chart) == 0x000018, "Wrong size on MessageUtils_Command_Check_Chart");
static_assert(offsetof(MessageUtils_Command_Check_Chart, Str) == 0x000000, "Member 'MessageUtils_Command_Check_Chart::Str' has a wrong offset!");
static_assert(offsetof(MessageUtils_Command_Check_Chart, ChartID) == 0x000010, "Member 'MessageUtils_Command_Check_Chart::ChartID' has a wrong offset!");
static_assert(offsetof(MessageUtils_Command_Check_Chart, IsChartOnly) == 0x000011, "Member 'MessageUtils_Command_Check_Chart::IsChartOnly' has a wrong offset!");

// Function DarwinGame.MessageUtils.Command_Check_Icon
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_Command_Check_Icon final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextTalkIcon                                 Type;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_Command_Check_Icon) == 0x000008, "Wrong alignment on MessageUtils_Command_Check_Icon");
static_assert(sizeof(MessageUtils_Command_Check_Icon) == 0x000018, "Wrong size on MessageUtils_Command_Check_Icon");
static_assert(offsetof(MessageUtils_Command_Check_Icon, Str) == 0x000000, "Member 'MessageUtils_Command_Check_Icon::Str' has a wrong offset!");
static_assert(offsetof(MessageUtils_Command_Check_Icon, Type) == 0x000010, "Member 'MessageUtils_Command_Check_Icon::Type' has a wrong offset!");

// Function DarwinGame.MessageUtils.Command_Check_LipSync
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_Command_Check_LipSync final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLipSync;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_Command_Check_LipSync) == 0x000008, "Wrong alignment on MessageUtils_Command_Check_LipSync");
static_assert(sizeof(MessageUtils_Command_Check_LipSync) == 0x000018, "Wrong size on MessageUtils_Command_Check_LipSync");
static_assert(offsetof(MessageUtils_Command_Check_LipSync, Str) == 0x000000, "Member 'MessageUtils_Command_Check_LipSync::Str' has a wrong offset!");
static_assert(offsetof(MessageUtils_Command_Check_LipSync, IsLipSync) == 0x000010, "Member 'MessageUtils_Command_Check_LipSync::IsLipSync' has a wrong offset!");

// Function DarwinGame.MessageUtils.Command_Check_TurnPC
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_Command_Check_TurnPC final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTurn;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWait;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReturn;                                          // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_Command_Check_TurnPC) == 0x000008, "Wrong alignment on MessageUtils_Command_Check_TurnPC");
static_assert(sizeof(MessageUtils_Command_Check_TurnPC) == 0x000018, "Wrong size on MessageUtils_Command_Check_TurnPC");
static_assert(offsetof(MessageUtils_Command_Check_TurnPC, Str) == 0x000000, "Member 'MessageUtils_Command_Check_TurnPC::Str' has a wrong offset!");
static_assert(offsetof(MessageUtils_Command_Check_TurnPC, IsTurn) == 0x000010, "Member 'MessageUtils_Command_Check_TurnPC::IsTurn' has a wrong offset!");
static_assert(offsetof(MessageUtils_Command_Check_TurnPC, IsWait) == 0x000011, "Member 'MessageUtils_Command_Check_TurnPC::IsWait' has a wrong offset!");
static_assert(offsetof(MessageUtils_Command_Check_TurnPC, IsReturn) == 0x000012, "Member 'MessageUtils_Command_Check_TurnPC::IsReturn' has a wrong offset!");

// Function DarwinGame.MessageUtils.createIEMessageID
// 0x0058 (0x0058 - 0x0000)
struct MessageUtils_createIEMessageID final
{
public:
	struct FMessageIdInfo                         Info;                                              // 0x0000(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_createIEMessageID) == 0x000008, "Wrong alignment on MessageUtils_createIEMessageID");
static_assert(sizeof(MessageUtils_createIEMessageID) == 0x000058, "Wrong size on MessageUtils_createIEMessageID");
static_assert(offsetof(MessageUtils_createIEMessageID, Info) == 0x000000, "Member 'MessageUtils_createIEMessageID::Info' has a wrong offset!");
static_assert(offsetof(MessageUtils_createIEMessageID, ReturnValue) == 0x000048, "Member 'MessageUtils_createIEMessageID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.createIEMessageID_Old
// 0x0058 (0x0058 - 0x0000)
struct MessageUtils_createIEMessageID_Old final
{
public:
	struct FMessageIdInfo                         Info;                                              // 0x0000(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_createIEMessageID_Old) == 0x000008, "Wrong alignment on MessageUtils_createIEMessageID_Old");
static_assert(sizeof(MessageUtils_createIEMessageID_Old) == 0x000058, "Wrong size on MessageUtils_createIEMessageID_Old");
static_assert(offsetof(MessageUtils_createIEMessageID_Old, Info) == 0x000000, "Member 'MessageUtils_createIEMessageID_Old::Info' has a wrong offset!");
static_assert(offsetof(MessageUtils_createIEMessageID_Old, ReturnValue) == 0x000048, "Member 'MessageUtils_createIEMessageID_Old::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.GetEmojiStr
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_GetEmojiStr final
{
public:
	int32                                         emojiId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SysytemType;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Str;                                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_GetEmojiStr) == 0x000008, "Wrong alignment on MessageUtils_GetEmojiStr");
static_assert(sizeof(MessageUtils_GetEmojiStr) == 0x000018, "Wrong size on MessageUtils_GetEmojiStr");
static_assert(offsetof(MessageUtils_GetEmojiStr, emojiId) == 0x000000, "Member 'MessageUtils_GetEmojiStr::emojiId' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetEmojiStr, SysytemType) == 0x000004, "Member 'MessageUtils_GetEmojiStr::SysytemType' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetEmojiStr, Str) == 0x000008, "Member 'MessageUtils_GetEmojiStr::Str' has a wrong offset!");

// Function DarwinGame.MessageUtils.GetEventTalkData
// 0x0050 (0x0050 - 0x0000)
struct MessageUtils_GetEventTalkData final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_EventTalkData                      EventTalkData;                                     // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_GetEventTalkData) == 0x000008, "Wrong alignment on MessageUtils_GetEventTalkData");
static_assert(sizeof(MessageUtils_GetEventTalkData) == 0x000050, "Wrong size on MessageUtils_GetEventTalkData");
static_assert(offsetof(MessageUtils_GetEventTalkData, TextID) == 0x000000, "Member 'MessageUtils_GetEventTalkData::TextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetEventTalkData, EventTalkData) == 0x000008, "Member 'MessageUtils_GetEventTalkData::EventTalkData' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetEventTalkData, ReturnValue) == 0x000048, "Member 'MessageUtils_GetEventTalkData::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.GetFukidashiID
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_GetFukidashiID final
{
public:
	class FName                                   SrcID;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubFlag;                                           // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_GetFukidashiID) == 0x000004, "Wrong alignment on MessageUtils_GetFukidashiID");
static_assert(sizeof(MessageUtils_GetFukidashiID) == 0x000018, "Wrong size on MessageUtils_GetFukidashiID");
static_assert(offsetof(MessageUtils_GetFukidashiID, SrcID) == 0x000000, "Member 'MessageUtils_GetFukidashiID::SrcID' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetFukidashiID, Hour) == 0x000008, "Member 'MessageUtils_GetFukidashiID::Hour' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetFukidashiID, SubFlag) == 0x00000C, "Member 'MessageUtils_GetFukidashiID::SubFlag' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetFukidashiID, ReturnValue) == 0x000010, "Member 'MessageUtils_GetFukidashiID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.GetFukidashiIDList
// 0x0020 (0x0020 - 0x0000)
struct MessageUtils_GetFukidashiIDList final
{
public:
	class FName                                   SrcID;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_GetFukidashiIDList) == 0x000008, "Wrong alignment on MessageUtils_GetFukidashiIDList");
static_assert(sizeof(MessageUtils_GetFukidashiIDList) == 0x000020, "Wrong size on MessageUtils_GetFukidashiIDList");
static_assert(offsetof(MessageUtils_GetFukidashiIDList, SrcID) == 0x000000, "Member 'MessageUtils_GetFukidashiIDList::SrcID' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetFukidashiIDList, Hour) == 0x000008, "Member 'MessageUtils_GetFukidashiIDList::Hour' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetFukidashiIDList, ReturnValue) == 0x000010, "Member 'MessageUtils_GetFukidashiIDList::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.getNextCSMessageId
// 0x0038 (0x0038 - 0x0000)
struct MessageUtils_getNextCSMessageId final
{
public:
	class FString                                 SrcID;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Src;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextID;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_getNextCSMessageId) == 0x000008, "Wrong alignment on MessageUtils_getNextCSMessageId");
static_assert(sizeof(MessageUtils_getNextCSMessageId) == 0x000038, "Wrong size on MessageUtils_getNextCSMessageId");
static_assert(offsetof(MessageUtils_getNextCSMessageId, SrcID) == 0x000000, "Member 'MessageUtils_getNextCSMessageId::SrcID' has a wrong offset!");
static_assert(offsetof(MessageUtils_getNextCSMessageId, Src) == 0x000010, "Member 'MessageUtils_getNextCSMessageId::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_getNextCSMessageId, NextID) == 0x000020, "Member 'MessageUtils_getNextCSMessageId::NextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_getNextCSMessageId, ReturnValue) == 0x000030, "Member 'MessageUtils_getNextCSMessageId::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.GetNextTextID
// 0x0020 (0x0020 - 0x0000)
struct MessageUtils_GetNextTextID final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndType                                      EndType;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_GetNextTextID) == 0x000008, "Wrong alignment on MessageUtils_GetNextTextID");
static_assert(sizeof(MessageUtils_GetNextTextID) == 0x000020, "Wrong size on MessageUtils_GetNextTextID");
static_assert(offsetof(MessageUtils_GetNextTextID, TextID) == 0x000000, "Member 'MessageUtils_GetNextTextID::TextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetNextTextID, EndType) == 0x000010, "Member 'MessageUtils_GetNextTextID::EndType' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetNextTextID, ReturnValue) == 0x000014, "Member 'MessageUtils_GetNextTextID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.GetSerifuDataDirect
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_GetSerifuDataDirect final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_GetSerifuDataDirect) == 0x000008, "Wrong alignment on MessageUtils_GetSerifuDataDirect");
static_assert(sizeof(MessageUtils_GetSerifuDataDirect) == 0x000018, "Wrong size on MessageUtils_GetSerifuDataDirect");
static_assert(offsetof(MessageUtils_GetSerifuDataDirect, TextID) == 0x000000, "Member 'MessageUtils_GetSerifuDataDirect::TextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetSerifuDataDirect, ReturnValue) == 0x000008, "Member 'MessageUtils_GetSerifuDataDirect::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.GetStampID
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_GetStampID final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_GetStampID) == 0x000008, "Wrong alignment on MessageUtils_GetStampID");
static_assert(sizeof(MessageUtils_GetStampID) == 0x000018, "Wrong size on MessageUtils_GetStampID");
static_assert(offsetof(MessageUtils_GetStampID, Src) == 0x000000, "Member 'MessageUtils_GetStampID::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_GetStampID, ReturnValue) == 0x000010, "Member 'MessageUtils_GetStampID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.InsertSpaceToTop
// 0x0020 (0x0020 - 0x0000)
struct MessageUtils_InsertSpaceToTop final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Dst;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_InsertSpaceToTop) == 0x000008, "Wrong alignment on MessageUtils_InsertSpaceToTop");
static_assert(sizeof(MessageUtils_InsertSpaceToTop) == 0x000020, "Wrong size on MessageUtils_InsertSpaceToTop");
static_assert(offsetof(MessageUtils_InsertSpaceToTop, Src) == 0x000000, "Member 'MessageUtils_InsertSpaceToTop::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_InsertSpaceToTop, Dst) == 0x000010, "Member 'MessageUtils_InsertSpaceToTop::Dst' has a wrong offset!");

// Function DarwinGame.MessageUtils.IsEmojiChangeSizeTag
// 0x0020 (0x0020 - 0x0000)
struct MessageUtils_IsEmojiChangeSizeTag final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_IsEmojiChangeSizeTag) == 0x000008, "Wrong alignment on MessageUtils_IsEmojiChangeSizeTag");
static_assert(sizeof(MessageUtils_IsEmojiChangeSizeTag) == 0x000020, "Wrong size on MessageUtils_IsEmojiChangeSizeTag");
static_assert(offsetof(MessageUtils_IsEmojiChangeSizeTag, Src) == 0x000000, "Member 'MessageUtils_IsEmojiChangeSizeTag::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_IsEmojiChangeSizeTag, ReturnValue) == 0x000010, "Member 'MessageUtils_IsEmojiChangeSizeTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.IsFukidashiID
// 0x000C (0x000C - 0x0000)
struct MessageUtils_IsFukidashiID final
{
public:
	class FName                                   TextID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_IsFukidashiID) == 0x000004, "Wrong alignment on MessageUtils_IsFukidashiID");
static_assert(sizeof(MessageUtils_IsFukidashiID) == 0x00000C, "Wrong size on MessageUtils_IsFukidashiID");
static_assert(offsetof(MessageUtils_IsFukidashiID, TextID) == 0x000000, "Member 'MessageUtils_IsFukidashiID::TextID' has a wrong offset!");
static_assert(offsetof(MessageUtils_IsFukidashiID, ReturnValue) == 0x000008, "Member 'MessageUtils_IsFukidashiID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.IsJapanese
// 0x0001 (0x0001 - 0x0000)
struct MessageUtils_IsJapanese final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_IsJapanese) == 0x000001, "Wrong alignment on MessageUtils_IsJapanese");
static_assert(sizeof(MessageUtils_IsJapanese) == 0x000001, "Wrong size on MessageUtils_IsJapanese");
static_assert(offsetof(MessageUtils_IsJapanese, ReturnValue) == 0x000000, "Member 'MessageUtils_IsJapanese::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.IsValidMessageID
// 0x0018 (0x0018 - 0x0000)
struct MessageUtils_IsValidMessageID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_IsValidMessageID) == 0x000008, "Wrong alignment on MessageUtils_IsValidMessageID");
static_assert(sizeof(MessageUtils_IsValidMessageID) == 0x000018, "Wrong size on MessageUtils_IsValidMessageID");
static_assert(offsetof(MessageUtils_IsValidMessageID, ID) == 0x000000, "Member 'MessageUtils_IsValidMessageID::ID' has a wrong offset!");
static_assert(offsetof(MessageUtils_IsValidMessageID, ReturnValue) == 0x000010, "Member 'MessageUtils_IsValidMessageID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.procIEMessageID
// 0x0060 (0x0060 - 0x0000)
struct MessageUtils_procIEMessageID final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMessageIdInfo                         IdInfo;                                            // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_procIEMessageID) == 0x000008, "Wrong alignment on MessageUtils_procIEMessageID");
static_assert(sizeof(MessageUtils_procIEMessageID) == 0x000060, "Wrong size on MessageUtils_procIEMessageID");
static_assert(offsetof(MessageUtils_procIEMessageID, Src) == 0x000000, "Member 'MessageUtils_procIEMessageID::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_procIEMessageID, IdInfo) == 0x000010, "Member 'MessageUtils_procIEMessageID::IdInfo' has a wrong offset!");
static_assert(offsetof(MessageUtils_procIEMessageID, ReturnValue) == 0x000058, "Member 'MessageUtils_procIEMessageID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.ProcSerifuText
// 0x0020 (0x0020 - 0x0000)
struct MessageUtils_ProcSerifuText final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_ProcSerifuText) == 0x000008, "Wrong alignment on MessageUtils_ProcSerifuText");
static_assert(sizeof(MessageUtils_ProcSerifuText) == 0x000020, "Wrong size on MessageUtils_ProcSerifuText");
static_assert(offsetof(MessageUtils_ProcSerifuText, Src) == 0x000000, "Member 'MessageUtils_ProcSerifuText::Src' has a wrong offset!");
static_assert(offsetof(MessageUtils_ProcSerifuText, ReturnValue) == 0x000010, "Member 'MessageUtils_ProcSerifuText::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.RemoveSquareBrackets
// 0x0020 (0x0020 - 0x0000)
struct MessageUtils_RemoveSquareBrackets final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_RemoveSquareBrackets) == 0x000008, "Wrong alignment on MessageUtils_RemoveSquareBrackets");
static_assert(sizeof(MessageUtils_RemoveSquareBrackets) == 0x000020, "Wrong size on MessageUtils_RemoveSquareBrackets");
static_assert(offsetof(MessageUtils_RemoveSquareBrackets, Text) == 0x000000, "Member 'MessageUtils_RemoveSquareBrackets::Text' has a wrong offset!");
static_assert(offsetof(MessageUtils_RemoveSquareBrackets, ReturnValue) == 0x000010, "Member 'MessageUtils_RemoveSquareBrackets::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.ShapeFukidashiText
// 0x0020 (0x0020 - 0x0000)
struct MessageUtils_ShapeFukidashiText final
{
public:
	class FString                                 Serifu;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageUtils_ShapeFukidashiText) == 0x000008, "Wrong alignment on MessageUtils_ShapeFukidashiText");
static_assert(sizeof(MessageUtils_ShapeFukidashiText) == 0x000020, "Wrong size on MessageUtils_ShapeFukidashiText");
static_assert(offsetof(MessageUtils_ShapeFukidashiText, Serifu) == 0x000000, "Member 'MessageUtils_ShapeFukidashiText::Serifu' has a wrong offset!");
static_assert(offsetof(MessageUtils_ShapeFukidashiText, ReturnValue) == 0x000010, "Member 'MessageUtils_ShapeFukidashiText::ReturnValue' has a wrong offset!");

// Function DarwinGame.MessageUtils.SerifuToFukidashi
// 0x0028 (0x0028 - 0x0000)
struct MessageUtils_SerifuToFukidashi final
{
public:
	class FString                                 Serifu;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Fukidashi;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MessageUtils_SerifuToFukidashi) == 0x000008, "Wrong alignment on MessageUtils_SerifuToFukidashi");
static_assert(sizeof(MessageUtils_SerifuToFukidashi) == 0x000028, "Wrong size on MessageUtils_SerifuToFukidashi");
static_assert(offsetof(MessageUtils_SerifuToFukidashi, Serifu) == 0x000000, "Member 'MessageUtils_SerifuToFukidashi::Serifu' has a wrong offset!");
static_assert(offsetof(MessageUtils_SerifuToFukidashi, Fukidashi) == 0x000010, "Member 'MessageUtils_SerifuToFukidashi::Fukidashi' has a wrong offset!");
static_assert(offsetof(MessageUtils_SerifuToFukidashi, Length) == 0x000020, "Member 'MessageUtils_SerifuToFukidashi::Length' has a wrong offset!");
static_assert(offsetof(MessageUtils_SerifuToFukidashi, ReturnValue) == 0x000024, "Member 'MessageUtils_SerifuToFukidashi::ReturnValue' has a wrong offset!");

// Function DarwinGame.MissileLaunchPadMagicBase.AddMissile
// 0x0008 (0x0008 - 0x0000)
struct MissileLaunchPadMagicBase_AddMissile final
{
public:
	class AMissileMagicBase*                      missile;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissileLaunchPadMagicBase_AddMissile) == 0x000008, "Wrong alignment on MissileLaunchPadMagicBase_AddMissile");
static_assert(sizeof(MissileLaunchPadMagicBase_AddMissile) == 0x000008, "Wrong size on MissileLaunchPadMagicBase_AddMissile");
static_assert(offsetof(MissileLaunchPadMagicBase_AddMissile, missile) == 0x000000, "Member 'MissileLaunchPadMagicBase_AddMissile::missile' has a wrong offset!");

// Function DarwinGame.MissileLaunchPadMagicBase.BulletsLoad
// 0x0020 (0x0020 - 0x0000)
struct MissileLaunchPadMagicBase_BulletsLoad final
{
public:
	TArray<ESocket>                               Sockets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionDetailIDs;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissileLaunchPadMagicBase_BulletsLoad) == 0x000008, "Wrong alignment on MissileLaunchPadMagicBase_BulletsLoad");
static_assert(sizeof(MissileLaunchPadMagicBase_BulletsLoad) == 0x000020, "Wrong size on MissileLaunchPadMagicBase_BulletsLoad");
static_assert(offsetof(MissileLaunchPadMagicBase_BulletsLoad, Sockets) == 0x000000, "Member 'MissileLaunchPadMagicBase_BulletsLoad::Sockets' has a wrong offset!");
static_assert(offsetof(MissileLaunchPadMagicBase_BulletsLoad, ActionDetailIDs) == 0x000010, "Member 'MissileLaunchPadMagicBase_BulletsLoad::ActionDetailIDs' has a wrong offset!");

// Function DarwinGame.MissileLaunchPadMagicBase.GetBulletActionDetailID
// 0x0008 (0x0008 - 0x0000)
struct MissileLaunchPadMagicBase_GetBulletActionDetailID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissileLaunchPadMagicBase_GetBulletActionDetailID) == 0x000004, "Wrong alignment on MissileLaunchPadMagicBase_GetBulletActionDetailID");
static_assert(sizeof(MissileLaunchPadMagicBase_GetBulletActionDetailID) == 0x000008, "Wrong size on MissileLaunchPadMagicBase_GetBulletActionDetailID");
static_assert(offsetof(MissileLaunchPadMagicBase_GetBulletActionDetailID, ReturnValue) == 0x000000, "Member 'MissileLaunchPadMagicBase_GetBulletActionDetailID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MissileLaunchPadMagicBase.GetEffectContainerSpec
// 0x0038 (0x0038 - 0x0000)
struct MissileLaunchPadMagicBase_GetEffectContainerSpec final
{
public:
	struct FActionGameplayEffectContainerSpec     ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissileLaunchPadMagicBase_GetEffectContainerSpec) == 0x000008, "Wrong alignment on MissileLaunchPadMagicBase_GetEffectContainerSpec");
static_assert(sizeof(MissileLaunchPadMagicBase_GetEffectContainerSpec) == 0x000038, "Wrong size on MissileLaunchPadMagicBase_GetEffectContainerSpec");
static_assert(offsetof(MissileLaunchPadMagicBase_GetEffectContainerSpec, ReturnValue) == 0x000000, "Member 'MissileLaunchPadMagicBase_GetEffectContainerSpec::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIAppraiseSequence.GetCaptureComponent
// 0x0008 (0x0008 - 0x0000)
struct UIAppraiseSequence_GetCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAppraiseSequence_GetCaptureComponent) == 0x000008, "Wrong alignment on UIAppraiseSequence_GetCaptureComponent");
static_assert(sizeof(UIAppraiseSequence_GetCaptureComponent) == 0x000008, "Wrong size on UIAppraiseSequence_GetCaptureComponent");
static_assert(offsetof(UIAppraiseSequence_GetCaptureComponent, ReturnValue) == 0x000000, "Member 'UIAppraiseSequence_GetCaptureComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIAppraiseSequence.IsFlash
// 0x0008 (0x0008 - 0x0000)
struct UIAppraiseSequence_IsFlash final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIAppraiseSequence_IsFlash) == 0x000004, "Wrong alignment on UIAppraiseSequence_IsFlash");
static_assert(sizeof(UIAppraiseSequence_IsFlash) == 0x000008, "Wrong size on UIAppraiseSequence_IsFlash");
static_assert(offsetof(UIAppraiseSequence_IsFlash, Index_0) == 0x000000, "Member 'UIAppraiseSequence_IsFlash::Index_0' has a wrong offset!");
static_assert(offsetof(UIAppraiseSequence_IsFlash, ReturnValue) == 0x000004, "Member 'UIAppraiseSequence_IsFlash::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIAppraiseSequence.IsFly
// 0x0008 (0x0008 - 0x0000)
struct UIAppraiseSequence_IsFly final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIAppraiseSequence_IsFly) == 0x000004, "Wrong alignment on UIAppraiseSequence_IsFly");
static_assert(sizeof(UIAppraiseSequence_IsFly) == 0x000008, "Wrong size on UIAppraiseSequence_IsFly");
static_assert(offsetof(UIAppraiseSequence_IsFly, Index_0) == 0x000000, "Member 'UIAppraiseSequence_IsFly::Index_0' has a wrong offset!");
static_assert(offsetof(UIAppraiseSequence_IsFly, ReturnValue) == 0x000004, "Member 'UIAppraiseSequence_IsFly::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossBoostingCheck.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossBoostingCheck_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossBoostingCheck_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossBoostingCheck_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossBoostingCheck_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossBoostingCheck_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossBoostingCheck_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossBoostingCheck_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossBoostingCheck.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossBoostingCheck_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossBoostingCheck_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossBoostingCheck_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossBoostingCheck_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossBoostingCheck_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossBoostingCheck_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossBoostingCheck_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossBoostingCheck.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossBoostingCheck_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossBoostingCheck_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossBoostingCheck_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossBoostingCheck_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossBoostingCheck_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossBoostingCheck_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossBoostingCheck_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossCombatDuring.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossCombatDuring_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossCombatDuring_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossCombatDuring_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossCombatDuring_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossCombatDuring_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossCombatDuring_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossCombatDuring_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossCombatDuring.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossCombatDuring_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossCombatDuring_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossCombatDuring_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossCombatDuring_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossCombatDuring_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossCombatDuring_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossCombatDuring_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossCombatDuring.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossCombatDuring_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossCombatDuring_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossCombatDuring_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossCombatDuring_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossCombatDuring_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossCombatDuring_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossCombatDuring_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossExposeWeaknesses.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossExposeWeaknesses_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossExposeWeaknesses_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossExposeWeaknesses_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossExposeWeaknesses_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossExposeWeaknesses_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossExposeWeaknesses_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossExposeWeaknesses_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossExposeWeaknesses.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossExposeWeaknesses_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossExposeWeaknesses_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossExposeWeaknesses_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossExposeWeaknesses_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossExposeWeaknesses_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossExposeWeaknesses_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossExposeWeaknesses_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossExposeWeaknesses.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossExposeWeaknesses_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossExposeWeaknesses_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossExposeWeaknesses_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossExposeWeaknesses_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossExposeWeaknesses_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossExposeWeaknesses_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossExposeWeaknesses_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.NavLinkProxyEx.SmartLinkReached
// 0x0018 (0x0018 - 0x0000)
struct NavLinkProxyEx_SmartLinkReached final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                destPoint;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavLinkProxyEx_SmartLinkReached) == 0x000008, "Wrong alignment on NavLinkProxyEx_SmartLinkReached");
static_assert(sizeof(NavLinkProxyEx_SmartLinkReached) == 0x000018, "Wrong size on NavLinkProxyEx_SmartLinkReached");
static_assert(offsetof(NavLinkProxyEx_SmartLinkReached, Actor) == 0x000000, "Member 'NavLinkProxyEx_SmartLinkReached::Actor' has a wrong offset!");
static_assert(offsetof(NavLinkProxyEx_SmartLinkReached, destPoint) == 0x000008, "Member 'NavLinkProxyEx_SmartLinkReached::destPoint' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossPossessed.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossPossessed_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossPossessed_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossPossessed_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossPossessed_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossPossessed_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossPossessed_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossPossessed_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossPossessed.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossPossessed_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossPossessed_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossPossessed_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossPossessed_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossPossessed_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossPossessed_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossPossessed_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossPossessed.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossPossessed_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossPossessed_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossPossessed_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossPossessed_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossPossessed_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossPossessed_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossPossessed_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossPossessFlying.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossPossessFlying_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossPossessFlying_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossPossessFlying_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossPossessFlying_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossPossessFlying_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossPossessFlying_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossPossessFlying_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossPossessFlying.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossPossessFlying_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossPossessFlying_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossPossessFlying_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossPossessFlying_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossPossessFlying_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossPossessFlying_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossPossessFlying_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossPossessFlying.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossPossessFlying_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossPossessFlying_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossPossessFlying_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossPossessFlying_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossPossessFlying_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossPossessFlying_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossPossessFlying_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossRetarget.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossRetarget_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossRetarget_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossRetarget_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossRetarget_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossRetarget_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossRetarget_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossRetarget_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossRetarget.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossRetarget_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossRetarget_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossRetarget_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossRetarget_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossRetarget_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossRetarget_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossRetarget_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossRetarget.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossRetarget_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossRetarget_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossRetarget_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossRetarget_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossRetarget_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossRetarget_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossRetarget_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossRotateInsightTarget.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossRotateInsightTarget_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossRotateInsightTarget_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossRotateInsightTarget_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossRotateInsightTarget_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossRotateInsightTarget_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossRotateInsightTarget_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossRotateInsightTarget_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossRotateInsightTarget.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossRotateInsightTarget_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossRotateInsightTarget_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossRotateInsightTarget_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossRotateInsightTarget_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossRotateInsightTarget_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossRotateInsightTarget_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossRotateInsightTarget_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossRotateInsightTarget.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossRotateInsightTarget_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossRotateInsightTarget_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossRotateInsightTarget_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossRotateInsightTarget_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossRotateInsightTarget_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossRotateInsightTarget_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossRotateInsightTarget_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossSelfhalm.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossSelfhalm_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossSelfhalm_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossSelfhalm_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossSelfhalm_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossSelfhalm_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossSelfhalm_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossSelfhalm_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossSelfhalm.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossSelfhalm_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossSelfhalm_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossSelfhalm_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossSelfhalm_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossSelfhalm_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossSelfhalm_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossSelfhalm_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossSelfhalm.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossSelfhalm_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossSelfhalm_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossSelfhalm_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossSelfhalm_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossSelfhalm_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossSelfhalm_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossSelfhalm_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossStatueDeadWait.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossStatueDeadWait_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossStatueDeadWait_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossStatueDeadWait_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossStatueDeadWait_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossStatueDeadWait_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossStatueDeadWait_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossStatueDeadWait_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossStatueDeadWait.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossStatueDeadWait_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossStatueDeadWait_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossStatueDeadWait_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossStatueDeadWait_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossStatueDeadWait_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossStatueDeadWait_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossStatueDeadWait_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossStatueDeadWait.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossStatueDeadWait_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossStatueDeadWait_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossStatueDeadWait_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossStatueDeadWait_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossStatueDeadWait_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossStatueDeadWait_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossStatueDeadWait_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossStatueDestroy.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossStatueDestroy_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossStatueDestroy_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossStatueDestroy_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossStatueDestroy_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossStatueDestroy_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossStatueDestroy_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossStatueDestroy_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossStatueDestroy.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossStatueDestroy_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossStatueDestroy_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossStatueDestroy_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossStatueDestroy_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossStatueDestroy_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossStatueDestroy_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossStatueDestroy_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossStatueDestroy.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossStatueDestroy_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossStatueDestroy_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossStatueDestroy_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossStatueDestroy_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossStatueDestroy_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossStatueDestroy_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossStatueDestroy_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossTargetInRange.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossTargetInRange_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossTargetInRange_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossTargetInRange_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossTargetInRange_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossTargetInRange_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossTargetInRange_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossTargetInRange_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossTargetInRange.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossTargetInRange_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossTargetInRange_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossTargetInRange_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossTargetInRange_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossTargetInRange_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossTargetInRange_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossTargetInRange_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossTargetInRange.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossTargetInRange_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossTargetInRange_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossTargetInRange_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossTargetInRange_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossTargetInRange_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossTargetInRange_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossTargetInRange_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.NetworkTravellerEvent.ConnectNetworkTravelIine
// 0x0001 (0x0001 - 0x0000)
struct NetworkTravellerEvent_ConnectNetworkTravelIine final
{
public:
	bool                                          bRandamTraverller;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkTravellerEvent_ConnectNetworkTravelIine) == 0x000001, "Wrong alignment on NetworkTravellerEvent_ConnectNetworkTravelIine");
static_assert(sizeof(NetworkTravellerEvent_ConnectNetworkTravelIine) == 0x000001, "Wrong size on NetworkTravellerEvent_ConnectNetworkTravelIine");
static_assert(offsetof(NetworkTravellerEvent_ConnectNetworkTravelIine, bRandamTraverller) == 0x000000, "Member 'NetworkTravellerEvent_ConnectNetworkTravelIine::bRandamTraverller' has a wrong offset!");

// Function DarwinGame.NetworkTravellerEvent.FadeIn
// 0x0004 (0x0004 - 0x0000)
struct NetworkTravellerEvent_FadeIn final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkTravellerEvent_FadeIn) == 0x000004, "Wrong alignment on NetworkTravellerEvent_FadeIn");
static_assert(sizeof(NetworkTravellerEvent_FadeIn) == 0x000004, "Wrong size on NetworkTravellerEvent_FadeIn");
static_assert(offsetof(NetworkTravellerEvent_FadeIn, NextSectionNum) == 0x000000, "Member 'NetworkTravellerEvent_FadeIn::NextSectionNum' has a wrong offset!");

// Function DarwinGame.NetworkTravellerEvent.IsPlayNotArtifactReplicaReaction
// 0x0002 (0x0002 - 0x0000)
struct NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction final
{
public:
	bool                                          IsAutoTraveller;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction) == 0x000001, "Wrong alignment on NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction");
static_assert(sizeof(NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction) == 0x000002, "Wrong size on NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction");
static_assert(offsetof(NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction, IsAutoTraveller) == 0x000000, "Member 'NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction::IsAutoTraveller' has a wrong offset!");
static_assert(offsetof(NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction, ReturnValue) == 0x000001, "Member 'NetworkTravellerEvent_IsPlayNotArtifactReplicaReaction::ReturnValue' has a wrong offset!");

// Function DarwinGame.NetworkTravellerEvent.OpenNetoworkTravellerUI
// 0x0008 (0x0008 - 0x0000)
struct NetworkTravellerEvent_OpenNetoworkTravellerUI final
{
public:
	int32                                         NextSectionNum;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandamTraverller;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkTravellerEvent_OpenNetoworkTravellerUI) == 0x000004, "Wrong alignment on NetworkTravellerEvent_OpenNetoworkTravellerUI");
static_assert(sizeof(NetworkTravellerEvent_OpenNetoworkTravellerUI) == 0x000008, "Wrong size on NetworkTravellerEvent_OpenNetoworkTravellerUI");
static_assert(offsetof(NetworkTravellerEvent_OpenNetoworkTravellerUI, NextSectionNum) == 0x000000, "Member 'NetworkTravellerEvent_OpenNetoworkTravellerUI::NextSectionNum' has a wrong offset!");
static_assert(offsetof(NetworkTravellerEvent_OpenNetoworkTravellerUI, bRandamTraverller) == 0x000004, "Member 'NetworkTravellerEvent_OpenNetoworkTravellerUI::bRandamTraverller' has a wrong offset!");

// Function DarwinGame.NetworkTravellerEvent.PlayMonsterVoice
// 0x0001 (0x0001 - 0x0000)
struct NetworkTravellerEvent_PlayMonsterVoice final
{
public:
	bool                                          IsAutoTraveller;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkTravellerEvent_PlayMonsterVoice) == 0x000001, "Wrong alignment on NetworkTravellerEvent_PlayMonsterVoice");
static_assert(sizeof(NetworkTravellerEvent_PlayMonsterVoice) == 0x000001, "Wrong size on NetworkTravellerEvent_PlayMonsterVoice");
static_assert(offsetof(NetworkTravellerEvent_PlayMonsterVoice, IsAutoTraveller) == 0x000000, "Member 'NetworkTravellerEvent_PlayMonsterVoice::IsAutoTraveller' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossUIRestart.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_BossUIRestart_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossUIRestart_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_BossUIRestart_NotifyBegin");
static_assert(sizeof(MonsNotifyState_BossUIRestart_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_BossUIRestart_NotifyBegin");
static_assert(offsetof(MonsNotifyState_BossUIRestart_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_BossUIRestart_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossUIRestart.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossUIRestart_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossUIRestart_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_BossUIRestart_NotifyEnd");
static_assert(sizeof(MonsNotifyState_BossUIRestart_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_BossUIRestart_NotifyEnd");
static_assert(offsetof(MonsNotifyState_BossUIRestart_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_BossUIRestart_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_BossUIRestart.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_BossUIRestart_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_BossUIRestart_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_BossUIRestart_NotifyTick");
static_assert(sizeof(MonsNotifyState_BossUIRestart_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_BossUIRestart_NotifyTick");
static_assert(offsetof(MonsNotifyState_BossUIRestart_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_BossUIRestart_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_GuideSysLog.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_GuideSysLog_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_GuideSysLog_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_GuideSysLog_NotifyBegin");
static_assert(sizeof(MonsNotifyState_GuideSysLog_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_GuideSysLog_NotifyBegin");
static_assert(offsetof(MonsNotifyState_GuideSysLog_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_GuideSysLog_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_GuideSysLog.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_GuideSysLog_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_GuideSysLog_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_GuideSysLog_NotifyEnd");
static_assert(sizeof(MonsNotifyState_GuideSysLog_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_GuideSysLog_NotifyEnd");
static_assert(offsetof(MonsNotifyState_GuideSysLog_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_GuideSysLog_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_GuideSysLog.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_GuideSysLog_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_GuideSysLog_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_GuideSysLog_NotifyTick");
static_assert(sizeof(MonsNotifyState_GuideSysLog_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_GuideSysLog_NotifyTick");
static_assert(offsetof(MonsNotifyState_GuideSysLog_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_GuideSysLog_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_IgnoreCollision.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_IgnoreCollision_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_IgnoreCollision_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_IgnoreCollision_NotifyBegin");
static_assert(sizeof(MonsNotifyState_IgnoreCollision_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_IgnoreCollision_NotifyBegin");
static_assert(offsetof(MonsNotifyState_IgnoreCollision_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_IgnoreCollision_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_IgnoreCollision.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_IgnoreCollision_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_IgnoreCollision_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_IgnoreCollision_NotifyEnd");
static_assert(sizeof(MonsNotifyState_IgnoreCollision_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_IgnoreCollision_NotifyEnd");
static_assert(offsetof(MonsNotifyState_IgnoreCollision_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_IgnoreCollision_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_IgnoreCollision.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_IgnoreCollision_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_IgnoreCollision_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_IgnoreCollision_NotifyTick");
static_assert(sizeof(MonsNotifyState_IgnoreCollision_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_IgnoreCollision_NotifyTick");
static_assert(offsetof(MonsNotifyState_IgnoreCollision_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_IgnoreCollision_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterCheckFloorChangeSection.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_MonsterCheckFloorChangeSection_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterCheckFloorChangeSection_NotifyBegin");
static_assert(sizeof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_MonsterCheckFloorChangeSection_NotifyBegin");
static_assert(offsetof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_MonsterCheckFloorChangeSection_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterCheckFloorChangeSection.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterCheckFloorChangeSection_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterCheckFloorChangeSection_NotifyEnd");
static_assert(sizeof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_MonsterCheckFloorChangeSection_NotifyEnd");
static_assert(offsetof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_MonsterCheckFloorChangeSection_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterCheckFloorChangeSection.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterCheckFloorChangeSection_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterCheckFloorChangeSection_NotifyTick");
static_assert(sizeof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_MonsterCheckFloorChangeSection_NotifyTick");
static_assert(offsetof(MonsNotifyState_MonsterCheckFloorChangeSection_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_MonsterCheckFloorChangeSection_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct NPCAIController_GetAttackTarget final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_GetAttackTarget) == 0x000008, "Wrong alignment on NPCAIController_GetAttackTarget");
static_assert(sizeof(NPCAIController_GetAttackTarget) == 0x000008, "Wrong size on NPCAIController_GetAttackTarget");
static_assert(offsetof(NPCAIController_GetAttackTarget, ReturnValue) == 0x000000, "Member 'NPCAIController_GetAttackTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetFloat
// 0x000C (0x000C - 0x0000)
struct NPCAIController_GetFloat final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_GetFloat) == 0x000004, "Wrong alignment on NPCAIController_GetFloat");
static_assert(sizeof(NPCAIController_GetFloat) == 0x00000C, "Wrong size on NPCAIController_GetFloat");
static_assert(offsetof(NPCAIController_GetFloat, Key) == 0x000000, "Member 'NPCAIController_GetFloat::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_GetFloat, ReturnValue) == 0x000008, "Member 'NPCAIController_GetFloat::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetInt
// 0x000C (0x000C - 0x0000)
struct NPCAIController_GetInt final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_GetInt) == 0x000004, "Wrong alignment on NPCAIController_GetInt");
static_assert(sizeof(NPCAIController_GetInt) == 0x00000C, "Wrong size on NPCAIController_GetInt");
static_assert(offsetof(NPCAIController_GetInt, Key) == 0x000000, "Member 'NPCAIController_GetInt::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_GetInt, ReturnValue) == 0x000008, "Member 'NPCAIController_GetInt::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetNPCAiType
// 0x000C (0x000C - 0x0000)
struct NPCAIController_GetNPCAiType final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCAiType                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCAIController_GetNPCAiType) == 0x000004, "Wrong alignment on NPCAIController_GetNPCAiType");
static_assert(sizeof(NPCAIController_GetNPCAiType) == 0x00000C, "Wrong size on NPCAIController_GetNPCAiType");
static_assert(offsetof(NPCAIController_GetNPCAiType, Key) == 0x000000, "Member 'NPCAIController_GetNPCAiType::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_GetNPCAiType, ReturnValue) == 0x000008, "Member 'NPCAIController_GetNPCAiType::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetRotator
// 0x0014 (0x0014 - 0x0000)
struct NPCAIController_GetRotator final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_GetRotator) == 0x000004, "Wrong alignment on NPCAIController_GetRotator");
static_assert(sizeof(NPCAIController_GetRotator) == 0x000014, "Wrong size on NPCAIController_GetRotator");
static_assert(offsetof(NPCAIController_GetRotator, Key) == 0x000000, "Member 'NPCAIController_GetRotator::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_GetRotator, ReturnValue) == 0x000008, "Member 'NPCAIController_GetRotator::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetTraceTarget
// 0x0008 (0x0008 - 0x0000)
struct NPCAIController_GetTraceTarget final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_GetTraceTarget) == 0x000008, "Wrong alignment on NPCAIController_GetTraceTarget");
static_assert(sizeof(NPCAIController_GetTraceTarget) == 0x000008, "Wrong size on NPCAIController_GetTraceTarget");
static_assert(offsetof(NPCAIController_GetTraceTarget, ReturnValue) == 0x000000, "Member 'NPCAIController_GetTraceTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetVector
// 0x0014 (0x0014 - 0x0000)
struct NPCAIController_GetVector final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_GetVector) == 0x000004, "Wrong alignment on NPCAIController_GetVector");
static_assert(sizeof(NPCAIController_GetVector) == 0x000014, "Wrong size on NPCAIController_GetVector");
static_assert(offsetof(NPCAIController_GetVector, Key) == 0x000000, "Member 'NPCAIController_GetVector::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_GetVector, ReturnValue) == 0x000008, "Member 'NPCAIController_GetVector::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCAIController.NPCAiInit
// 0x0008 (0x0008 - 0x0000)
struct NPCAIController_NPCAiInit final
{
public:
	const class ACharacter*                       NPCActor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_NPCAiInit) == 0x000008, "Wrong alignment on NPCAIController_NPCAiInit");
static_assert(sizeof(NPCAIController_NPCAiInit) == 0x000008, "Wrong size on NPCAIController_NPCAiInit");
static_assert(offsetof(NPCAIController_NPCAiInit, NPCActor) == 0x000000, "Member 'NPCAIController_NPCAiInit::NPCActor' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct NPCAIController_SetAttackTarget final
{
public:
	class APawn*                                  Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_SetAttackTarget) == 0x000008, "Wrong alignment on NPCAIController_SetAttackTarget");
static_assert(sizeof(NPCAIController_SetAttackTarget) == 0x000008, "Wrong size on NPCAIController_SetAttackTarget");
static_assert(offsetof(NPCAIController_SetAttackTarget, Target) == 0x000000, "Member 'NPCAIController_SetAttackTarget::Target' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetFloat
// 0x000C (0x000C - 0x0000)
struct NPCAIController_SetFloat final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_SetFloat) == 0x000004, "Wrong alignment on NPCAIController_SetFloat");
static_assert(sizeof(NPCAIController_SetFloat) == 0x00000C, "Wrong size on NPCAIController_SetFloat");
static_assert(offsetof(NPCAIController_SetFloat, Key) == 0x000000, "Member 'NPCAIController_SetFloat::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_SetFloat, Value) == 0x000008, "Member 'NPCAIController_SetFloat::Value' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetInt
// 0x000C (0x000C - 0x0000)
struct NPCAIController_SetInt final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_SetInt) == 0x000004, "Wrong alignment on NPCAIController_SetInt");
static_assert(sizeof(NPCAIController_SetInt) == 0x00000C, "Wrong size on NPCAIController_SetInt");
static_assert(offsetof(NPCAIController_SetInt, Key) == 0x000000, "Member 'NPCAIController_SetInt::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_SetInt, Value) == 0x000008, "Member 'NPCAIController_SetInt::Value' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetNPCAiType
// 0x000C (0x000C - 0x0000)
struct NPCAIController_SetNPCAiType final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCAiType                                    Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCAIController_SetNPCAiType) == 0x000004, "Wrong alignment on NPCAIController_SetNPCAiType");
static_assert(sizeof(NPCAIController_SetNPCAiType) == 0x00000C, "Wrong size on NPCAIController_SetNPCAiType");
static_assert(offsetof(NPCAIController_SetNPCAiType, Key) == 0x000000, "Member 'NPCAIController_SetNPCAiType::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_SetNPCAiType, Value) == 0x000008, "Member 'NPCAIController_SetNPCAiType::Value' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetRotator
// 0x0014 (0x0014 - 0x0000)
struct NPCAIController_SetRotator final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_SetRotator) == 0x000004, "Wrong alignment on NPCAIController_SetRotator");
static_assert(sizeof(NPCAIController_SetRotator) == 0x000014, "Wrong size on NPCAIController_SetRotator");
static_assert(offsetof(NPCAIController_SetRotator, Key) == 0x000000, "Member 'NPCAIController_SetRotator::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_SetRotator, Rotator) == 0x000008, "Member 'NPCAIController_SetRotator::Rotator' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetTarget
// 0x0010 (0x0010 - 0x0000)
struct NPCAIController_SetTarget final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_SetTarget) == 0x000008, "Wrong alignment on NPCAIController_SetTarget");
static_assert(sizeof(NPCAIController_SetTarget) == 0x000010, "Wrong size on NPCAIController_SetTarget");
static_assert(offsetof(NPCAIController_SetTarget, Key) == 0x000000, "Member 'NPCAIController_SetTarget::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_SetTarget, Target) == 0x000008, "Member 'NPCAIController_SetTarget::Target' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetTraceTarget
// 0x0008 (0x0008 - 0x0000)
struct NPCAIController_SetTraceTarget final
{
public:
	class APawn*                                  Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_SetTraceTarget) == 0x000008, "Wrong alignment on NPCAIController_SetTraceTarget");
static_assert(sizeof(NPCAIController_SetTraceTarget) == 0x000008, "Wrong size on NPCAIController_SetTraceTarget");
static_assert(offsetof(NPCAIController_SetTraceTarget, Target) == 0x000000, "Member 'NPCAIController_SetTraceTarget::Target' has a wrong offset!");

// Function DarwinGame.NPCAIController.SetVector
// 0x0014 (0x0014 - 0x0000)
struct NPCAIController_SetVector final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_SetVector) == 0x000004, "Wrong alignment on NPCAIController_SetVector");
static_assert(sizeof(NPCAIController_SetVector) == 0x000014, "Wrong size on NPCAIController_SetVector");
static_assert(offsetof(NPCAIController_SetVector, Key) == 0x000000, "Member 'NPCAIController_SetVector::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_SetVector, Vector) == 0x000008, "Member 'NPCAIController_SetVector::Vector' has a wrong offset!");

// Function DarwinGame.NPCAIController.GetTarget
// 0x0010 (0x0010 - 0x0000)
struct NPCAIController_GetTarget final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCAIController_GetTarget) == 0x000008, "Wrong alignment on NPCAIController_GetTarget");
static_assert(sizeof(NPCAIController_GetTarget) == 0x000010, "Wrong size on NPCAIController_GetTarget");
static_assert(offsetof(NPCAIController_GetTarget, Key) == 0x000000, "Member 'NPCAIController_GetTarget::Key' has a wrong offset!");
static_assert(offsetof(NPCAIController_GetTarget, ReturnValue) == 0x000008, "Member 'NPCAIController_GetTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterRotateInsightTarget.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_MonsterRotateInsightTarget_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterRotateInsightTarget_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterRotateInsightTarget_NotifyBegin");
static_assert(sizeof(MonsNotifyState_MonsterRotateInsightTarget_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_MonsterRotateInsightTarget_NotifyBegin");
static_assert(offsetof(MonsNotifyState_MonsterRotateInsightTarget_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_MonsterRotateInsightTarget_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterRotateInsightTarget.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterRotateInsightTarget_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterRotateInsightTarget_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterRotateInsightTarget_NotifyEnd");
static_assert(sizeof(MonsNotifyState_MonsterRotateInsightTarget_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_MonsterRotateInsightTarget_NotifyEnd");
static_assert(offsetof(MonsNotifyState_MonsterRotateInsightTarget_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_MonsterRotateInsightTarget_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterRotateInsightTarget.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterRotateInsightTarget_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterRotateInsightTarget_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterRotateInsightTarget_NotifyTick");
static_assert(sizeof(MonsNotifyState_MonsterRotateInsightTarget_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_MonsterRotateInsightTarget_NotifyTick");
static_assert(offsetof(MonsNotifyState_MonsterRotateInsightTarget_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_MonsterRotateInsightTarget_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_TargetInRangeFin.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_TargetInRangeFin_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_TargetInRangeFin_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_TargetInRangeFin_NotifyBegin");
static_assert(sizeof(MonsNotifyState_TargetInRangeFin_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_TargetInRangeFin_NotifyBegin");
static_assert(offsetof(MonsNotifyState_TargetInRangeFin_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_TargetInRangeFin_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_TargetInRangeFin.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_TargetInRangeFin_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_TargetInRangeFin_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_TargetInRangeFin_NotifyTick");
static_assert(sizeof(MonsNotifyState_TargetInRangeFin_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_TargetInRangeFin_NotifyTick");
static_assert(offsetof(MonsNotifyState_TargetInRangeFin_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_TargetInRangeFin_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterTimeCheckAttack.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_MonsterTimeCheckAttack_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterTimeCheckAttack_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterTimeCheckAttack_NotifyBegin");
static_assert(sizeof(MonsNotifyState_MonsterTimeCheckAttack_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_MonsterTimeCheckAttack_NotifyBegin");
static_assert(offsetof(MonsNotifyState_MonsterTimeCheckAttack_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_MonsterTimeCheckAttack_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterTimeCheckAttack.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterTimeCheckAttack_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterTimeCheckAttack_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterTimeCheckAttack_NotifyEnd");
static_assert(sizeof(MonsNotifyState_MonsterTimeCheckAttack_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_MonsterTimeCheckAttack_NotifyEnd");
static_assert(offsetof(MonsNotifyState_MonsterTimeCheckAttack_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_MonsterTimeCheckAttack_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_MonsterTimeCheckAttack.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_MonsterTimeCheckAttack_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_MonsterTimeCheckAttack_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_MonsterTimeCheckAttack_NotifyTick");
static_assert(sizeof(MonsNotifyState_MonsterTimeCheckAttack_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_MonsterTimeCheckAttack_NotifyTick");
static_assert(offsetof(MonsNotifyState_MonsterTimeCheckAttack_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_MonsterTimeCheckAttack_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_RotateToTargetWithLocationOffset.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_RotateToTargetWithLocationOffset_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_RotateToTargetWithLocationOffset_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_RotateToTargetWithLocationOffset_NotifyBegin");
static_assert(sizeof(MonsNotifyState_RotateToTargetWithLocationOffset_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_RotateToTargetWithLocationOffset_NotifyBegin");
static_assert(offsetof(MonsNotifyState_RotateToTargetWithLocationOffset_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_RotateToTargetWithLocationOffset_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_RotateToTargetWithLocationOffset.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_RotateToTargetWithLocationOffset_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_RotateToTargetWithLocationOffset_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_RotateToTargetWithLocationOffset_NotifyTick");
static_assert(sizeof(MonsNotifyState_RotateToTargetWithLocationOffset_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_RotateToTargetWithLocationOffset_NotifyTick");
static_assert(offsetof(MonsNotifyState_RotateToTargetWithLocationOffset_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_RotateToTargetWithLocationOffset_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_TimeCheckMultipleAttack.NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct MonsNotifyState_TimeCheckMultipleAttack_NotifyBegin final
{
public:
	struct FST_NotifyBegin                        fst;                                               // 0x0000(0x02A8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_TimeCheckMultipleAttack_NotifyBegin) == 0x000008, "Wrong alignment on MonsNotifyState_TimeCheckMultipleAttack_NotifyBegin");
static_assert(sizeof(MonsNotifyState_TimeCheckMultipleAttack_NotifyBegin) == 0x0002A8, "Wrong size on MonsNotifyState_TimeCheckMultipleAttack_NotifyBegin");
static_assert(offsetof(MonsNotifyState_TimeCheckMultipleAttack_NotifyBegin, fst) == 0x000000, "Member 'MonsNotifyState_TimeCheckMultipleAttack_NotifyBegin::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_TimeCheckMultipleAttack.NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_TimeCheckMultipleAttack_NotifyEnd final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_TimeCheckMultipleAttack_NotifyEnd) == 0x000008, "Wrong alignment on MonsNotifyState_TimeCheckMultipleAttack_NotifyEnd");
static_assert(sizeof(MonsNotifyState_TimeCheckMultipleAttack_NotifyEnd) == 0x000018, "Wrong size on MonsNotifyState_TimeCheckMultipleAttack_NotifyEnd");
static_assert(offsetof(MonsNotifyState_TimeCheckMultipleAttack_NotifyEnd, fst) == 0x000000, "Member 'MonsNotifyState_TimeCheckMultipleAttack_NotifyEnd::fst' has a wrong offset!");

// Function DarwinGame.MonsNotifyState_TimeCheckMultipleAttack.NotifyTick
// 0x0018 (0x0018 - 0x0000)
struct MonsNotifyState_TimeCheckMultipleAttack_NotifyTick final
{
public:
	struct FST_NotifyBase                         fst;                                               // 0x0000(0x0018)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsNotifyState_TimeCheckMultipleAttack_NotifyTick) == 0x000008, "Wrong alignment on MonsNotifyState_TimeCheckMultipleAttack_NotifyTick");
static_assert(sizeof(MonsNotifyState_TimeCheckMultipleAttack_NotifyTick) == 0x000018, "Wrong size on MonsNotifyState_TimeCheckMultipleAttack_NotifyTick");
static_assert(offsetof(MonsNotifyState_TimeCheckMultipleAttack_NotifyTick, fst) == 0x000000, "Member 'MonsNotifyState_TimeCheckMultipleAttack_NotifyTick::fst' has a wrong offset!");

// Function DarwinGame.PointEnvSound.OnSoundActiveRangeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct PointEnvSound_OnSoundActiveRangeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PointEnvSound_OnSoundActiveRangeBeginOverlap) == 0x000008, "Wrong alignment on PointEnvSound_OnSoundActiveRangeBeginOverlap");
static_assert(sizeof(PointEnvSound_OnSoundActiveRangeBeginOverlap) == 0x0000A8, "Wrong size on PointEnvSound_OnSoundActiveRangeBeginOverlap");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeBeginOverlap, OverlappedComp) == 0x000000, "Member 'PointEnvSound_OnSoundActiveRangeBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeBeginOverlap, OtherActor) == 0x000008, "Member 'PointEnvSound_OnSoundActiveRangeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeBeginOverlap, OtherComp) == 0x000010, "Member 'PointEnvSound_OnSoundActiveRangeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PointEnvSound_OnSoundActiveRangeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeBeginOverlap, bFromSweep) == 0x00001C, "Member 'PointEnvSound_OnSoundActiveRangeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeBeginOverlap, SweepResult) == 0x000020, "Member 'PointEnvSound_OnSoundActiveRangeBeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.PointEnvSound.OnSoundActiveRangeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct PointEnvSound_OnSoundActiveRangeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PointEnvSound_OnSoundActiveRangeEndOverlap) == 0x000008, "Wrong alignment on PointEnvSound_OnSoundActiveRangeEndOverlap");
static_assert(sizeof(PointEnvSound_OnSoundActiveRangeEndOverlap) == 0x000020, "Wrong size on PointEnvSound_OnSoundActiveRangeEndOverlap");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeEndOverlap, OverlappedComp) == 0x000000, "Member 'PointEnvSound_OnSoundActiveRangeEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeEndOverlap, OtherActor) == 0x000008, "Member 'PointEnvSound_OnSoundActiveRangeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeEndOverlap, OtherComp) == 0x000010, "Member 'PointEnvSound_OnSoundActiveRangeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PointEnvSound_OnSoundActiveRangeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'PointEnvSound_OnSoundActiveRangeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.MonsterAIController.GetAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct MonsterAIController_GetAttackTarget final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterAIController_GetAttackTarget) == 0x000008, "Wrong alignment on MonsterAIController_GetAttackTarget");
static_assert(sizeof(MonsterAIController_GetAttackTarget) == 0x000008, "Wrong size on MonsterAIController_GetAttackTarget");
static_assert(offsetof(MonsterAIController_GetAttackTarget, ReturnValue) == 0x000000, "Member 'MonsterAIController_GetAttackTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterAIController.GetTraceTarget
// 0x0008 (0x0008 - 0x0000)
struct MonsterAIController_GetTraceTarget final
{
public:
	class AGPACharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterAIController_GetTraceTarget) == 0x000008, "Wrong alignment on MonsterAIController_GetTraceTarget");
static_assert(sizeof(MonsterAIController_GetTraceTarget) == 0x000008, "Wrong size on MonsterAIController_GetTraceTarget");
static_assert(offsetof(MonsterAIController_GetTraceTarget, ReturnValue) == 0x000000, "Member 'MonsterAIController_GetTraceTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterAIController.SetAttackTarget
// 0x0008 (0x0008 - 0x0000)
struct MonsterAIController_SetAttackTarget final
{
public:
	class APawn*                                  Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterAIController_SetAttackTarget) == 0x000008, "Wrong alignment on MonsterAIController_SetAttackTarget");
static_assert(sizeof(MonsterAIController_SetAttackTarget) == 0x000008, "Wrong size on MonsterAIController_SetAttackTarget");
static_assert(offsetof(MonsterAIController_SetAttackTarget, Target) == 0x000000, "Member 'MonsterAIController_SetAttackTarget::Target' has a wrong offset!");

// Function DarwinGame.MonsterAIController.SetTraceTarget
// 0x0008 (0x0008 - 0x0000)
struct MonsterAIController_SetTraceTarget final
{
public:
	class APawn*                                  Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterAIController_SetTraceTarget) == 0x000008, "Wrong alignment on MonsterAIController_SetTraceTarget");
static_assert(sizeof(MonsterAIController_SetTraceTarget) == 0x000008, "Wrong size on MonsterAIController_SetTraceTarget");
static_assert(offsetof(MonsterAIController_SetTraceTarget, Target) == 0x000000, "Member 'MonsterAIController_SetTraceTarget::Target' has a wrong offset!");

// Function DarwinGame.MonsterBattleAI.DeriVateActionDecision
// 0x0010 (0x0010 - 0x0000)
struct MonsterBattleAI_DeriVateActionDecision final
{
public:
	class AMonster*                               Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAI_DeriVateActionDecision) == 0x000008, "Wrong alignment on MonsterBattleAI_DeriVateActionDecision");
static_assert(sizeof(MonsterBattleAI_DeriVateActionDecision) == 0x000010, "Wrong size on MonsterBattleAI_DeriVateActionDecision");
static_assert(offsetof(MonsterBattleAI_DeriVateActionDecision, Monster) == 0x000000, "Member 'MonsterBattleAI_DeriVateActionDecision::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBattleAI_DeriVateActionDecision, ID) == 0x000008, "Member 'MonsterBattleAI_DeriVateActionDecision::ID' has a wrong offset!");

// Function DarwinGame.MonsterBattleAI.LeaveRequest
// 0x0008 (0x0008 - 0x0000)
struct MonsterBattleAI_LeaveRequest final
{
public:
	class AMonster*                               Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBattleAI_LeaveRequest) == 0x000008, "Wrong alignment on MonsterBattleAI_LeaveRequest");
static_assert(sizeof(MonsterBattleAI_LeaveRequest) == 0x000008, "Wrong size on MonsterBattleAI_LeaveRequest");
static_assert(offsetof(MonsterBattleAI_LeaveRequest, Monster) == 0x000000, "Member 'MonsterBattleAI_LeaveRequest::Monster' has a wrong offset!");

// Function DarwinGame.QuestDestinationRectBase.OnOverlapEvent
// 0x00A8 (0x00A8 - 0x0000)
struct QuestDestinationRectBase_OnOverlapEvent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestDestinationRectBase_OnOverlapEvent) == 0x000008, "Wrong alignment on QuestDestinationRectBase_OnOverlapEvent");
static_assert(sizeof(QuestDestinationRectBase_OnOverlapEvent) == 0x0000A8, "Wrong size on QuestDestinationRectBase_OnOverlapEvent");
static_assert(offsetof(QuestDestinationRectBase_OnOverlapEvent, OverlappedComponent) == 0x000000, "Member 'QuestDestinationRectBase_OnOverlapEvent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(QuestDestinationRectBase_OnOverlapEvent, OtherActor) == 0x000008, "Member 'QuestDestinationRectBase_OnOverlapEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(QuestDestinationRectBase_OnOverlapEvent, OtherComp) == 0x000010, "Member 'QuestDestinationRectBase_OnOverlapEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(QuestDestinationRectBase_OnOverlapEvent, OtherBodyIndex) == 0x000018, "Member 'QuestDestinationRectBase_OnOverlapEvent::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(QuestDestinationRectBase_OnOverlapEvent, bFromSweep) == 0x00001C, "Member 'QuestDestinationRectBase_OnOverlapEvent::bFromSweep' has a wrong offset!");
static_assert(offsetof(QuestDestinationRectBase_OnOverlapEvent, SweepResult) == 0x000020, "Member 'QuestDestinationRectBase_OnOverlapEvent::SweepResult' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.ActionCancel
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_ActionCancel final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendOut;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_ActionCancel) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_ActionCancel");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_ActionCancel) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_ActionCancel");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_ActionCancel, Monster) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_ActionCancel::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_ActionCancel, blendOut) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_ActionCancel::blendOut' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.ActionCancelAndSetLocationAndRotation
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation, Monster) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation, Location) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation, Rotator) == 0x000014, "Member 'MonsterBlueprintFunctionLibrary_ActionCancelAndSetLocationAndRotation::Rotator' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.ActionOneShotMotion
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_ActionOneShotMotion final
{
public:
	class AGPACharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAir;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_ActionOneShotMotion) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_ActionOneShotMotion");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_ActionOneShotMotion) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_ActionOneShotMotion");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_ActionOneShotMotion, Character) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_ActionOneShotMotion::Character' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_ActionOneShotMotion, isAir) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_ActionOneShotMotion::isAir' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.AddHateDirect
// 0x0018 (0x0018 - 0x0000)
struct MonsterBlueprintFunctionLibrary_AddHateDirect final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hateValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_AddHateDirect) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_AddHateDirect");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_AddHateDirect) == 0x000018, "Wrong size on MonsterBlueprintFunctionLibrary_AddHateDirect");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_AddHateDirect, Monster) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_AddHateDirect::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_AddHateDirect, Target) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_AddHateDirect::Target' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_AddHateDirect, hateValue) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_AddHateDirect::hateValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetAcquiredDragonStones
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetAcquiredDragonStones final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetAcquiredDragonStones) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetAcquiredDragonStones");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetAcquiredDragonStones) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_GetAcquiredDragonStones");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAcquiredDragonStones, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetAcquiredDragonStones::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetAngleToRotatorAndIsLeft
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft final
{
public:
	bool                                          isLeft;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               object_rot;                                        // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Observer;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft, isLeft) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft::isLeft' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft, object_rot) == 0x000004, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft::object_rot' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft, Observer) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft::Observer' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft, ReturnValue) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToRotatorAndIsLeft::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetAngleToTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation final
{
public:
	struct FVector                                object_vec;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          Observer;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation, object_vec) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation::object_vec' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation, Observer) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation::Observer' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation, ReturnValue) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToTargetLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetAngleToTargetLocationAndIsLeft
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft final
{
public:
	bool                                          isLeft;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                object_vec;                                        // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Observer;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft, isLeft) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft::isLeft' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft, object_vec) == 0x000004, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft::object_vec' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft, Observer) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft::Observer' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft, ReturnValue) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_GetAngleToTargetLocationAndIsLeft::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetBossFormFromType
// 0x0002 (0x0002 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetBossFormFromType final
{
public:
	EMonsterBossType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossForm                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetBossFormFromType) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetBossFormFromType");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetBossFormFromType) == 0x000002, "Wrong size on MonsterBlueprintFunctionLibrary_GetBossFormFromType");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetBossFormFromType, Type) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetBossFormFromType::Type' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetBossFormFromType, ReturnValue) == 0x000001, "Member 'MonsterBlueprintFunctionLibrary_GetBossFormFromType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetBossName
// 0x0018 (0x0018 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetBossName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetBossName) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetBossName");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetBossName) == 0x000018, "Wrong size on MonsterBlueprintFunctionLibrary_GetBossName");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetBossName, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetBossName::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetBossType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetBossType final
{
public:
	EMonsterBossType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetBossType) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetBossType");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetBossType) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_GetBossType");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetBossType, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetBossType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetBossTypeFromDungeon
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetBossTypeFromDungeon final
{
public:
	EMonsterBossType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetBossTypeFromDungeon) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetBossTypeFromDungeon");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetBossTypeFromDungeon) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_GetBossTypeFromDungeon");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetBossTypeFromDungeon, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetBossTypeFromDungeon::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetCamOwner
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetCamOwner final
{
public:
	class AMonsterBase*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetCamOwner) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetCamOwner");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetCamOwner) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_GetCamOwner");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetCamOwner, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetCamOwner::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetCurrentPersistentLevelID
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetCurrentPersistentLevelID final
{
public:
	EPersistentLevelID                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetCurrentPersistentLevelID) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetCurrentPersistentLevelID");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetCurrentPersistentLevelID) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_GetCurrentPersistentLevelID");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetCurrentPersistentLevelID, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetCurrentPersistentLevelID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetDir
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetDir final
{
public:
	struct FVector                                object_vec;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                observer_vec;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetDir) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetDir");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetDir) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_GetDir");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetDir, object_vec) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetDir::object_vec' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetDir, observer_vec) == 0x00000C, "Member 'MonsterBlueprintFunctionLibrary_GetDir::observer_vec' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetDir, ReturnValue) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_GetDir::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetFootLocation
// 0x0018 (0x0018 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetFootLocation final
{
public:
	struct FVector                                Out;                                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AGPACharacter*                    Character;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetFootLocation) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetFootLocation");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetFootLocation) == 0x000018, "Wrong size on MonsterBlueprintFunctionLibrary_GetFootLocation");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetFootLocation, Out) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetFootLocation::Out' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetFootLocation, Character) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_GetFootLocation::Character' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetGuest
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetGuest final
{
public:
	class AMonsterBase*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetGuest) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetGuest");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetGuest) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_GetGuest");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetGuest, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetGuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetGuestID
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetGuestID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetGuestID) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetGuestID");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetGuestID) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_GetGuestID");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetGuestID, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetGuestID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetIsDungeon
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetIsDungeon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetIsDungeon) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetIsDungeon");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetIsDungeon) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_GetIsDungeon");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetIsDungeon, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetIsDungeon::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetMonster
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetMonster final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMonster*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetMonster) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetMonster");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetMonster) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_GetMonster");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonster, Pawn) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetMonster::Pawn' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonster, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetMonsterBase
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetMonsterBase final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMonsterBase*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetMonsterBase) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetMonsterBase");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetMonsterBase) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_GetMonsterBase");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterBase, Pawn) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterBase::Pawn' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterBase, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterBase::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetMonsterBoss
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetMonsterBoss final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMonsterBoss*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetMonsterBoss) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetMonsterBoss");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetMonsterBoss) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_GetMonsterBoss");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterBoss, Pawn) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterBoss::Pawn' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterBoss, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterBoss::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetMonsterTargettingMe
// 0x0028 (0x0028 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe final
{
public:
	TArray<class AMonsterBase*>                   Array;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AMonsterBase*                     own;                                               // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe) == 0x000028, "Wrong size on MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe, Array) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe::Array' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe, Type) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe::Type' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe, Key) == 0x000014, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe::Key' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe, own) == 0x000020, "Member 'MonsterBlueprintFunctionLibrary_GetMonsterTargettingMe::own' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetPartyMonster
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetPartyMonster final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMonster*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetPartyMonster) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetPartyMonster");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetPartyMonster) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_GetPartyMonster");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetPartyMonster, partyIndex) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetPartyMonster::partyIndex' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetPartyMonster, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetPartyMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetPartyMonsterUID
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetPartyMonsterUID final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetPartyMonsterUID) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetPartyMonsterUID");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetPartyMonsterUID) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_GetPartyMonsterUID");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetPartyMonsterUID, partyIndex) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetPartyMonsterUID::partyIndex' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetPartyMonsterUID, ReturnValue) == 0x000004, "Member 'MonsterBlueprintFunctionLibrary_GetPartyMonsterUID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetRandomPoint
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetRandomPoint final
{
public:
	struct FVector                                Out;                                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         division;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetRandomPoint) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetRandomPoint");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetRandomPoint) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_GetRandomPoint");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetRandomPoint, Out) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetRandomPoint::Out' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetRandomPoint, Center) == 0x00000C, "Member 'MonsterBlueprintFunctionLibrary_GetRandomPoint::Center' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetRandomPoint, Radius) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_GetRandomPoint::Radius' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetRandomPoint, division) == 0x00001C, "Member 'MonsterBlueprintFunctionLibrary_GetRandomPoint::division' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetRandomWalkRange
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetRandomWalkRange final
{
public:
	const class AMonsterBase*                     Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetRandomWalkRange) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetRandomWalkRange");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetRandomWalkRange) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_GetRandomWalkRange");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetRandomWalkRange, Monster) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetRandomWalkRange::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetRandomWalkRange, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetRandomWalkRange::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetSpawnLasboss
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetSpawnLasboss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetSpawnLasboss) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetSpawnLasboss");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetSpawnLasboss) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_GetSpawnLasboss");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetSpawnLasboss, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetSpawnLasboss::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetTarget
// 0x0028 (0x0028 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetTarget final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AGPACharacter*                    Character;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterStatus                                Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Player;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetTarget) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetTarget");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetTarget) == 0x000028, "Wrong size on MonsterBlueprintFunctionLibrary_GetTarget");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTarget, Type) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetTarget::Type' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTarget, Character) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetTarget::Character' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTarget, Status) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_GetTarget::Status' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTarget, Distance) == 0x000014, "Member 'MonsterBlueprintFunctionLibrary_GetTarget::Distance' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTarget, Player) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_GetTarget::Player' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTarget, ReturnValue) == 0x000020, "Member 'MonsterBlueprintFunctionLibrary_GetTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetTargetInSight
// 0x0028 (0x0028 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetTargetInSight final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AGPACharacter*                    Character;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterStatus                                Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Player;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetTargetInSight) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetTargetInSight");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetTargetInSight) == 0x000028, "Wrong size on MonsterBlueprintFunctionLibrary_GetTargetInSight");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTargetInSight, Type) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetTargetInSight::Type' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTargetInSight, Character) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetTargetInSight::Character' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTargetInSight, Status) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_GetTargetInSight::Status' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTargetInSight, Distance) == 0x000014, "Member 'MonsterBlueprintFunctionLibrary_GetTargetInSight::Distance' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTargetInSight, Angle) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_GetTargetInSight::Angle' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTargetInSight, Player) == 0x00001C, "Member 'MonsterBlueprintFunctionLibrary_GetTargetInSight::Player' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTargetInSight, ReturnValue) == 0x000020, "Member 'MonsterBlueprintFunctionLibrary_GetTargetInSight::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetTerraceWallNum
// 0x0004 (0x0004 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetTerraceWallNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetTerraceWallNum) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetTerraceWallNum");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetTerraceWallNum) == 0x000004, "Wrong size on MonsterBlueprintFunctionLibrary_GetTerraceWallNum");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTerraceWallNum, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetTerraceWallNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetTerraceWallOpen
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetTerraceWallOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetTerraceWallOpen) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetTerraceWallOpen");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetTerraceWallOpen) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_GetTerraceWallOpen");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTerraceWallOpen, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetTerraceWallOpen::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.GetTraceTarget
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_GetTraceTarget final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_GetTraceTarget) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_GetTraceTarget");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_GetTraceTarget) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_GetTraceTarget");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTraceTarget, partyIndex) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_GetTraceTarget::partyIndex' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_GetTraceTarget, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_GetTraceTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsBossDead
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsBossDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsBossDead) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsBossDead");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsBossDead) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_IsBossDead");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsBossDead, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsBossDead::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsBossReady
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsBossReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsBossReady) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsBossReady");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsBossReady) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_IsBossReady");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsBossReady, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsBossReady::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsCloseEnough
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsCloseEnough final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsCloseEnough) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsCloseEnough");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsCloseEnough) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_IsCloseEnough");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsCloseEnough, Center) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsCloseEnough::Center' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsCloseEnough, Location) == 0x00000C, "Member 'MonsterBlueprintFunctionLibrary_IsCloseEnough::Location' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsCloseEnough, Radius) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_IsCloseEnough::Radius' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsCloseEnough, ReturnValue) == 0x00001C, "Member 'MonsterBlueprintFunctionLibrary_IsCloseEnough::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsEnableMakeRandomWalkPointThirdCheck
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsEnableMakeRandomWalkPointThirdCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsEnableMakeRandomWalkPointThirdCheck) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsEnableMakeRandomWalkPointThirdCheck");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsEnableMakeRandomWalkPointThirdCheck) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_IsEnableMakeRandomWalkPointThirdCheck");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsEnableMakeRandomWalkPointThirdCheck, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsEnableMakeRandomWalkPointThirdCheck::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsFarEnough
// 0x0020 (0x0020 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsFarEnough final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsFarEnough) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsFarEnough");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsFarEnough) == 0x000020, "Wrong size on MonsterBlueprintFunctionLibrary_IsFarEnough");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsFarEnough, Center) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsFarEnough::Center' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsFarEnough, Location) == 0x00000C, "Member 'MonsterBlueprintFunctionLibrary_IsFarEnough::Location' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsFarEnough, Radius) == 0x000018, "Member 'MonsterBlueprintFunctionLibrary_IsFarEnough::Radius' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsFarEnough, ReturnValue) == 0x00001C, "Member 'MonsterBlueprintFunctionLibrary_IsFarEnough::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsForceBattlePlaying
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsForceBattlePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsForceBattlePlaying) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsForceBattlePlaying");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsForceBattlePlaying) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_IsForceBattlePlaying");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsForceBattlePlaying, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsForceBattlePlaying::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsLastBossReady
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsLastBossReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsLastBossReady) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsLastBossReady");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsLastBossReady) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_IsLastBossReady");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsLastBossReady, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsLastBossReady::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsLocationHeightTolerance
// 0x0018 (0x0018 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance final
{
public:
	class AMonsterBase*                           Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGPACharacter*                          Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance) == 0x000018, "Wrong size on MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance, Owner) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance::Owner' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance, Target) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance::Target' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance, ReturnValue) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_IsLocationHeightTolerance::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsReleaseFlag
// 0x000C (0x000C - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsReleaseFlag final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsReleaseFlag) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsReleaseFlag");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsReleaseFlag) == 0x00000C, "Wrong size on MonsterBlueprintFunctionLibrary_IsReleaseFlag");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsReleaseFlag, KeyName) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsReleaseFlag::KeyName' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsReleaseFlag, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_IsReleaseFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.IsSpecialAbility
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_IsSpecialAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_IsSpecialAbility) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_IsSpecialAbility");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_IsSpecialAbility) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_IsSpecialAbility");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_IsSpecialAbility, ReturnValue) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_IsSpecialAbility::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.Preload
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_Preload final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_Preload) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_Preload");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_Preload) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_Preload");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_Preload, KindId) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_Preload::KindId' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.Relocation
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_Relocation final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_Relocation) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_Relocation");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_Relocation) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_Relocation");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_Relocation, Monster) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_Relocation::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_Relocation, ReturnValue) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_Relocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.RequestLeaveBySpawnID
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnID final
{
public:
	class FName                                   SpawnPointID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnID) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnID");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnID) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnID");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnID, SpawnPointID) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnID::SpawnPointID' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.RequestLeaveBySpawnPoint
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnPoint final
{
public:
	class UEnemySpawnGeneratorBase*               spawnPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnPoint) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnPoint");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnPoint) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnPoint");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnPoint, spawnPoint) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_RequestLeaveBySpawnPoint::spawnPoint' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetAcquiredDragonStones
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetAcquiredDragonStones final
{
public:
	TArray<bool>                                  arr;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetAcquiredDragonStones) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetAcquiredDragonStones");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetAcquiredDragonStones) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_SetAcquiredDragonStones");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetAcquiredDragonStones, arr) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetAcquiredDragonStones::arr' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetBossBattleStartWaiting
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetBossBattleStartWaiting final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetBossBattleStartWaiting) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetBossBattleStartWaiting");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetBossBattleStartWaiting) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetBossBattleStartWaiting");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetBossBattleStartWaiting, flg) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetBossBattleStartWaiting::flg' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetBossPause
// 0x0002 (0x0002 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetBossPause final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          visible;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetBossPause) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetBossPause");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetBossPause) == 0x000002, "Wrong size on MonsterBlueprintFunctionLibrary_SetBossPause");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetBossPause, Pause) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetBossPause::Pause' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetBossPause, visible) == 0x000001, "Member 'MonsterBlueprintFunctionLibrary_SetBossPause::visible' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetBossType
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetBossType final
{
public:
	EMonsterBossType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetBossType) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetBossType");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetBossType) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetBossType");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetBossType, Type) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetBossType::Type' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetBossTypeToDungeon
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetBossTypeToDungeon final
{
public:
	EMonsterBossType                              BossType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetBossTypeToDungeon) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetBossTypeToDungeon");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetBossTypeToDungeon) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetBossTypeToDungeon");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetBossTypeToDungeon, BossType) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetBossTypeToDungeon::BossType' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetBossVisible
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetBossVisible final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetBossVisible) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetBossVisible");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetBossVisible) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetBossVisible");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetBossVisible, flg) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetBossVisible::flg' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetCamOwner
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetCamOwner final
{
public:
	class AMonsterBase*                           NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetCamOwner) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetCamOwner");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetCamOwner) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_SetCamOwner");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetCamOwner, NewOwner) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetCamOwner::NewOwner' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetHideEffect
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetHideEffect final
{
public:
	bool                                          hide;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetHideEffect) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetHideEffect");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetHideEffect) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetHideEffect");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffect, hide) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffect::hide' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetHideEffectToEffectAndMonsterType
// 0x0003 (0x0003 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType final
{
public:
	bool                                          hide;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterHideEffect                            Effect;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          MonsterType;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType) == 0x000003, "Wrong size on MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType, hide) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType::hide' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType, Effect) == 0x000001, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType::Effect' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType, MonsterType) == 0x000002, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffectToEffectAndMonsterType::MonsterType' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetHideEffectToMonsterType
// 0x0002 (0x0002 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType final
{
public:
	bool                                          hide;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          MonsterType;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType) == 0x000002, "Wrong size on MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType, hide) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType::hide' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType, MonsterType) == 0x000001, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffectToMonsterType::MonsterType' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetHideEffectToType
// 0x0002 (0x0002 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetHideEffectToType final
{
public:
	bool                                          hide;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterHideEffect                            Effect;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetHideEffectToType) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetHideEffectToType");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetHideEffectToType) == 0x000002, "Wrong size on MonsterBlueprintFunctionLibrary_SetHideEffectToType");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffectToType, hide) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffectToType::hide' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetHideEffectToType, Effect) == 0x000001, "Member 'MonsterBlueprintFunctionLibrary_SetHideEffectToType::Effect' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetIsDungeon
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetIsDungeon final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetIsDungeon) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetIsDungeon");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetIsDungeon) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetIsDungeon");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetIsDungeon, flg) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetIsDungeon::flg' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetLastBossBattleStartWaiting
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetLastBossBattleStartWaiting final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetLastBossBattleStartWaiting) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetLastBossBattleStartWaiting");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetLastBossBattleStartWaiting) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetLastBossBattleStartWaiting");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetLastBossBattleStartWaiting, flg) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetLastBossBattleStartWaiting::flg' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetMoveAwayQueryParams
// 0x0018 (0x0018 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams final
{
public:
	const class AMonsterBase*                     Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams) == 0x000018, "Wrong size on MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams, Monster) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams, Radius) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams::Radius' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams, Min) == 0x00000C, "Member 'MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams::Min' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams, Max) == 0x000010, "Member 'MonsterBlueprintFunctionLibrary_SetMoveAwayQueryParams::Max' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetSpawnLasboss
// 0x0001 (0x0001 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetSpawnLasboss final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetSpawnLasboss) == 0x000001, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetSpawnLasboss");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetSpawnLasboss) == 0x000001, "Wrong size on MonsterBlueprintFunctionLibrary_SetSpawnLasboss");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetSpawnLasboss, flg) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetSpawnLasboss::flg' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SetWaitTime
// 0x0010 (0x0010 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SetWaitTime final
{
public:
	const class AMonsterBase*                     Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SetWaitTime) == 0x000008, "Wrong alignment on MonsterBlueprintFunctionLibrary_SetWaitTime");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SetWaitTime) == 0x000010, "Wrong size on MonsterBlueprintFunctionLibrary_SetWaitTime");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetWaitTime, Monster) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SetWaitTime::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetWaitTime, Min) == 0x000008, "Member 'MonsterBlueprintFunctionLibrary_SetWaitTime::Min' has a wrong offset!");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SetWaitTime, Max) == 0x00000C, "Member 'MonsterBlueprintFunctionLibrary_SetWaitTime::Max' has a wrong offset!");

// Function DarwinGame.MonsterBlueprintFunctionLibrary.SpawnGuest
// 0x0008 (0x0008 - 0x0000)
struct MonsterBlueprintFunctionLibrary_SpawnGuest final
{
public:
	class FName                                   guestid;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterBlueprintFunctionLibrary_SpawnGuest) == 0x000004, "Wrong alignment on MonsterBlueprintFunctionLibrary_SpawnGuest");
static_assert(sizeof(MonsterBlueprintFunctionLibrary_SpawnGuest) == 0x000008, "Wrong size on MonsterBlueprintFunctionLibrary_SpawnGuest");
static_assert(offsetof(MonsterBlueprintFunctionLibrary_SpawnGuest, guestid) == 0x000000, "Member 'MonsterBlueprintFunctionLibrary_SpawnGuest::guestid' has a wrong offset!");

// Function DarwinGame.MonsterBTTaskExecuter.AvortTask
// 0x0010 (0x0010 - 0x0000)
struct MonsterBTTaskExecuter_AvortTask final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBTTask                                Task;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBTTaskExecuter_AvortTask) == 0x000008, "Wrong alignment on MonsterBTTaskExecuter_AvortTask");
static_assert(sizeof(MonsterBTTaskExecuter_AvortTask) == 0x000010, "Wrong size on MonsterBTTaskExecuter_AvortTask");
static_assert(offsetof(MonsterBTTaskExecuter_AvortTask, Monster) == 0x000000, "Member 'MonsterBTTaskExecuter_AvortTask::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBTTaskExecuter_AvortTask, Task) == 0x000008, "Member 'MonsterBTTaskExecuter_AvortTask::Task' has a wrong offset!");

// Function DarwinGame.MonsterBTTaskExecuter.ExecuteTask
// 0x0018 (0x0018 - 0x0000)
struct MonsterBTTaskExecuter_ExecuteTask final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBTTask                                Task;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBTTaskExecuter_ExecuteTask) == 0x000008, "Wrong alignment on MonsterBTTaskExecuter_ExecuteTask");
static_assert(sizeof(MonsterBTTaskExecuter_ExecuteTask) == 0x000018, "Wrong size on MonsterBTTaskExecuter_ExecuteTask");
static_assert(offsetof(MonsterBTTaskExecuter_ExecuteTask, Monster) == 0x000000, "Member 'MonsterBTTaskExecuter_ExecuteTask::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBTTaskExecuter_ExecuteTask, Task) == 0x000008, "Member 'MonsterBTTaskExecuter_ExecuteTask::Task' has a wrong offset!");
static_assert(offsetof(MonsterBTTaskExecuter_ExecuteTask, DeltaTime) == 0x00000C, "Member 'MonsterBTTaskExecuter_ExecuteTask::DeltaTime' has a wrong offset!");
static_assert(offsetof(MonsterBTTaskExecuter_ExecuteTask, ReturnValue) == 0x000010, "Member 'MonsterBTTaskExecuter_ExecuteTask::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterBTTaskExecuter.FinishTask
// 0x0010 (0x0010 - 0x0000)
struct MonsterBTTaskExecuter_FinishTask final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBTTask                                Task;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBTTaskExecuter_FinishTask) == 0x000008, "Wrong alignment on MonsterBTTaskExecuter_FinishTask");
static_assert(sizeof(MonsterBTTaskExecuter_FinishTask) == 0x000010, "Wrong size on MonsterBTTaskExecuter_FinishTask");
static_assert(offsetof(MonsterBTTaskExecuter_FinishTask, Monster) == 0x000000, "Member 'MonsterBTTaskExecuter_FinishTask::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBTTaskExecuter_FinishTask, Task) == 0x000008, "Member 'MonsterBTTaskExecuter_FinishTask::Task' has a wrong offset!");

// Function DarwinGame.MonsterBTTaskExecuter.InitTask
// 0x0010 (0x0010 - 0x0000)
struct MonsterBTTaskExecuter_InitTask final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBTTask                                Task;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterBTTaskExecuter_InitTask) == 0x000008, "Wrong alignment on MonsterBTTaskExecuter_InitTask");
static_assert(sizeof(MonsterBTTaskExecuter_InitTask) == 0x000010, "Wrong size on MonsterBTTaskExecuter_InitTask");
static_assert(offsetof(MonsterBTTaskExecuter_InitTask, Monster) == 0x000000, "Member 'MonsterBTTaskExecuter_InitTask::Monster' has a wrong offset!");
static_assert(offsetof(MonsterBTTaskExecuter_InitTask, Task) == 0x000008, "Member 'MonsterBTTaskExecuter_InitTask::Task' has a wrong offset!");

// Function DarwinGame.TargetSystemComponent.Aim
// 0x0001 (0x0001 - 0x0000)
struct TargetSystemComponent_Aim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetSystemComponent_Aim) == 0x000001, "Wrong alignment on TargetSystemComponent_Aim");
static_assert(sizeof(TargetSystemComponent_Aim) == 0x000001, "Wrong size on TargetSystemComponent_Aim");
static_assert(offsetof(TargetSystemComponent_Aim, End) == 0x000000, "Member 'TargetSystemComponent_Aim::End' has a wrong offset!");

// Function DarwinGame.TargetSystemComponent.NextTarget
// 0x0004 (0x0004 - 0x0000)
struct TargetSystemComponent_NextTarget final
{
public:
	int32                                         AddValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetSystemComponent_NextTarget) == 0x000004, "Wrong alignment on TargetSystemComponent_NextTarget");
static_assert(sizeof(TargetSystemComponent_NextTarget) == 0x000004, "Wrong size on TargetSystemComponent_NextTarget");
static_assert(offsetof(TargetSystemComponent_NextTarget, AddValue) == 0x000000, "Member 'TargetSystemComponent_NextTarget::AddValue' has a wrong offset!");

// Function DarwinGame.TargetSystemComponent.ReleaseAimAssist
// 0x0001 (0x0001 - 0x0000)
struct TargetSystemComponent_ReleaseAimAssist final
{
public:
	bool                                          bStateEnd;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetSystemComponent_ReleaseAimAssist) == 0x000001, "Wrong alignment on TargetSystemComponent_ReleaseAimAssist");
static_assert(sizeof(TargetSystemComponent_ReleaseAimAssist) == 0x000001, "Wrong size on TargetSystemComponent_ReleaseAimAssist");
static_assert(offsetof(TargetSystemComponent_ReleaseAimAssist, bStateEnd) == 0x000000, "Member 'TargetSystemComponent_ReleaseAimAssist::bStateEnd' has a wrong offset!");

// Function DarwinGame.TargetSystemComponent.CanChangeTarget
// 0x0001 (0x0001 - 0x0000)
struct TargetSystemComponent_CanChangeTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetSystemComponent_CanChangeTarget) == 0x000001, "Wrong alignment on TargetSystemComponent_CanChangeTarget");
static_assert(sizeof(TargetSystemComponent_CanChangeTarget) == 0x000001, "Wrong size on TargetSystemComponent_CanChangeTarget");
static_assert(offsetof(TargetSystemComponent_CanChangeTarget, ReturnValue) == 0x000000, "Member 'TargetSystemComponent_CanChangeTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.TargetSystemComponent.GetTarget
// 0x0008 (0x0008 - 0x0000)
struct TargetSystemComponent_GetTarget final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetSystemComponent_GetTarget) == 0x000008, "Wrong alignment on TargetSystemComponent_GetTarget");
static_assert(sizeof(TargetSystemComponent_GetTarget) == 0x000008, "Wrong size on TargetSystemComponent_GetTarget");
static_assert(offsetof(TargetSystemComponent_GetTarget, ReturnValue) == 0x000000, "Member 'TargetSystemComponent_GetTarget::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterCustomMaterialDataTable.GetCustomMaterial
// 0x0018 (0x0018 - 0x0000)
struct MonsterCustomMaterialDataTable_GetCustomMaterial final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInstance>> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterCustomMaterialDataTable_GetCustomMaterial) == 0x000008, "Wrong alignment on MonsterCustomMaterialDataTable_GetCustomMaterial");
static_assert(sizeof(MonsterCustomMaterialDataTable_GetCustomMaterial) == 0x000018, "Wrong size on MonsterCustomMaterialDataTable_GetCustomMaterial");
static_assert(offsetof(MonsterCustomMaterialDataTable_GetCustomMaterial, KindId) == 0x000000, "Member 'MonsterCustomMaterialDataTable_GetCustomMaterial::KindId' has a wrong offset!");
static_assert(offsetof(MonsterCustomMaterialDataTable_GetCustomMaterial, ReturnValue) == 0x000008, "Member 'MonsterCustomMaterialDataTable_GetCustomMaterial::ReturnValue' has a wrong offset!");

// Function DarwinGame.RiverBase.OnBeginOverlapCollision
// 0x00A8 (0x00A8 - 0x0000)
struct RiverBase_OnBeginOverlapCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverBase_OnBeginOverlapCollision) == 0x000008, "Wrong alignment on RiverBase_OnBeginOverlapCollision");
static_assert(sizeof(RiverBase_OnBeginOverlapCollision) == 0x0000A8, "Wrong size on RiverBase_OnBeginOverlapCollision");
static_assert(offsetof(RiverBase_OnBeginOverlapCollision, OverlappedComp) == 0x000000, "Member 'RiverBase_OnBeginOverlapCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RiverBase_OnBeginOverlapCollision, OtherActor) == 0x000008, "Member 'RiverBase_OnBeginOverlapCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(RiverBase_OnBeginOverlapCollision, OtherComp) == 0x000010, "Member 'RiverBase_OnBeginOverlapCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(RiverBase_OnBeginOverlapCollision, OtherBodyIndex) == 0x000018, "Member 'RiverBase_OnBeginOverlapCollision::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RiverBase_OnBeginOverlapCollision, bFromSweep) == 0x00001C, "Member 'RiverBase_OnBeginOverlapCollision::bFromSweep' has a wrong offset!");
static_assert(offsetof(RiverBase_OnBeginOverlapCollision, SweepResult) == 0x000020, "Member 'RiverBase_OnBeginOverlapCollision::SweepResult' has a wrong offset!");

// Function DarwinGame.RiverBase.OnEndOverlapCollision
// 0x0020 (0x0020 - 0x0000)
struct RiverBase_OnEndOverlapCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RiverBase_OnEndOverlapCollision) == 0x000008, "Wrong alignment on RiverBase_OnEndOverlapCollision");
static_assert(sizeof(RiverBase_OnEndOverlapCollision) == 0x000020, "Wrong size on RiverBase_OnEndOverlapCollision");
static_assert(offsetof(RiverBase_OnEndOverlapCollision, OverlappedComp) == 0x000000, "Member 'RiverBase_OnEndOverlapCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RiverBase_OnEndOverlapCollision, OtherActor) == 0x000008, "Member 'RiverBase_OnEndOverlapCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(RiverBase_OnEndOverlapCollision, OtherComp) == 0x000010, "Member 'RiverBase_OnEndOverlapCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(RiverBase_OnEndOverlapCollision, OtherBodyIndex) == 0x000018, "Member 'RiverBase_OnEndOverlapCollision::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct MonsterManager_GetInstance final
{
public:
	class UMonsterManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetInstance) == 0x000008, "Wrong alignment on MonsterManager_GetInstance");
static_assert(sizeof(MonsterManager_GetInstance) == 0x000008, "Wrong size on MonsterManager_GetInstance");
static_assert(offsetof(MonsterManager_GetInstance, ReturnValue) == 0x000000, "Member 'MonsterManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.AddMonster
// 0x0010 (0x0010 - 0x0000)
struct MonsterManager_AddMonster final
{
public:
	const class AMonsterBase*                     Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterManager_AddMonster) == 0x000008, "Wrong alignment on MonsterManager_AddMonster");
static_assert(sizeof(MonsterManager_AddMonster) == 0x000010, "Wrong size on MonsterManager_AddMonster");
static_assert(offsetof(MonsterManager_AddMonster, Monster) == 0x000000, "Member 'MonsterManager_AddMonster::Monster' has a wrong offset!");
static_assert(offsetof(MonsterManager_AddMonster, Type) == 0x000008, "Member 'MonsterManager_AddMonster::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.ChangeBelong
// 0x0010 (0x0010 - 0x0000)
struct MonsterManager_ChangeBelong final
{
public:
	const class AMonster*                         Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterManager_ChangeBelong) == 0x000008, "Wrong alignment on MonsterManager_ChangeBelong");
static_assert(sizeof(MonsterManager_ChangeBelong) == 0x000010, "Wrong size on MonsterManager_ChangeBelong");
static_assert(offsetof(MonsterManager_ChangeBelong, Monster) == 0x000000, "Member 'MonsterManager_ChangeBelong::Monster' has a wrong offset!");
static_assert(offsetof(MonsterManager_ChangeBelong, Type) == 0x000008, "Member 'MonsterManager_ChangeBelong::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.ClearMonsterOfProvocation
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_ClearMonsterOfProvocation final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_ClearMonsterOfProvocation) == 0x000001, "Wrong alignment on MonsterManager_ClearMonsterOfProvocation");
static_assert(sizeof(MonsterManager_ClearMonsterOfProvocation) == 0x000001, "Wrong size on MonsterManager_ClearMonsterOfProvocation");
static_assert(offsetof(MonsterManager_ClearMonsterOfProvocation, Type) == 0x000000, "Member 'MonsterManager_ClearMonsterOfProvocation::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.DestroyMonsterByBattleID
// 0x0008 (0x0008 - 0x0000)
struct MonsterManager_DestroyMonsterByBattleID final
{
public:
	class FName                                   BattleID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_DestroyMonsterByBattleID) == 0x000004, "Wrong alignment on MonsterManager_DestroyMonsterByBattleID");
static_assert(sizeof(MonsterManager_DestroyMonsterByBattleID) == 0x000008, "Wrong size on MonsterManager_DestroyMonsterByBattleID");
static_assert(offsetof(MonsterManager_DestroyMonsterByBattleID, BattleID) == 0x000000, "Member 'MonsterManager_DestroyMonsterByBattleID::BattleID' has a wrong offset!");

// Function DarwinGame.MonsterManager.DestroyMonsterByThoughtType
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_DestroyMonsterByThoughtType final
{
public:
	EMonsterThoughtType                           ThoughtType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_DestroyMonsterByThoughtType) == 0x000001, "Wrong alignment on MonsterManager_DestroyMonsterByThoughtType");
static_assert(sizeof(MonsterManager_DestroyMonsterByThoughtType) == 0x000001, "Wrong size on MonsterManager_DestroyMonsterByThoughtType");
static_assert(offsetof(MonsterManager_DestroyMonsterByThoughtType, ThoughtType) == 0x000000, "Member 'MonsterManager_DestroyMonsterByThoughtType::ThoughtType' has a wrong offset!");

// Function DarwinGame.MonsterManager.EnqueueRequestSpawnParam
// 0x00D0 (0x00D0 - 0x0000)
struct MonsterManager_EnqueueRequestSpawnParam final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommonSpawnParam                      spawnParam;                                        // 0x0010(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_EnqueueRequestSpawnParam) == 0x000010, "Wrong alignment on MonsterManager_EnqueueRequestSpawnParam");
static_assert(sizeof(MonsterManager_EnqueueRequestSpawnParam) == 0x0000D0, "Wrong size on MonsterManager_EnqueueRequestSpawnParam");
static_assert(offsetof(MonsterManager_EnqueueRequestSpawnParam, KindId) == 0x000000, "Member 'MonsterManager_EnqueueRequestSpawnParam::KindId' has a wrong offset!");
static_assert(offsetof(MonsterManager_EnqueueRequestSpawnParam, spawnParam) == 0x000010, "Member 'MonsterManager_EnqueueRequestSpawnParam::spawnParam' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetBossDerived
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_GetBossDerived final
{
public:
	EMonsterBossType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetBossDerived) == 0x000001, "Wrong alignment on MonsterManager_GetBossDerived");
static_assert(sizeof(MonsterManager_GetBossDerived) == 0x000001, "Wrong size on MonsterManager_GetBossDerived");
static_assert(offsetof(MonsterManager_GetBossDerived, ReturnValue) == 0x000000, "Member 'MonsterManager_GetBossDerived::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetBossType
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_GetBossType final
{
public:
	EMonsterBossType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetBossType) == 0x000001, "Wrong alignment on MonsterManager_GetBossType");
static_assert(sizeof(MonsterManager_GetBossType) == 0x000001, "Wrong size on MonsterManager_GetBossType");
static_assert(offsetof(MonsterManager_GetBossType, ReturnValue) == 0x000000, "Member 'MonsterManager_GetBossType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetFastTravel
// 0x0008 (0x0008 - 0x0000)
struct MonsterManager_GetFastTravel final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetFastTravel) == 0x000004, "Wrong alignment on MonsterManager_GetFastTravel");
static_assert(sizeof(MonsterManager_GetFastTravel) == 0x000008, "Wrong size on MonsterManager_GetFastTravel");
static_assert(offsetof(MonsterManager_GetFastTravel, ReturnValue) == 0x000000, "Member 'MonsterManager_GetFastTravel::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetMonsterOfProvocation
// 0x0010 (0x0010 - 0x0000)
struct MonsterManager_GetMonsterOfProvocation final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMonsterBase*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetMonsterOfProvocation) == 0x000008, "Wrong alignment on MonsterManager_GetMonsterOfProvocation");
static_assert(sizeof(MonsterManager_GetMonsterOfProvocation) == 0x000010, "Wrong size on MonsterManager_GetMonsterOfProvocation");
static_assert(offsetof(MonsterManager_GetMonsterOfProvocation, Type) == 0x000000, "Member 'MonsterManager_GetMonsterOfProvocation::Type' has a wrong offset!");
static_assert(offsetof(MonsterManager_GetMonsterOfProvocation, ReturnValue) == 0x000008, "Member 'MonsterManager_GetMonsterOfProvocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetMonsters
// 0x0018 (0x0018 - 0x0000)
struct MonsterManager_GetMonsters final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMonsterBase*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetMonsters) == 0x000008, "Wrong alignment on MonsterManager_GetMonsters");
static_assert(sizeof(MonsterManager_GetMonsters) == 0x000018, "Wrong size on MonsterManager_GetMonsters");
static_assert(offsetof(MonsterManager_GetMonsters, Type) == 0x000000, "Member 'MonsterManager_GetMonsters::Type' has a wrong offset!");
static_assert(offsetof(MonsterManager_GetMonsters, ReturnValue) == 0x000008, "Member 'MonsterManager_GetMonsters::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetMonstersWithList
// 0x0020 (0x0020 - 0x0000)
struct MonsterManager_GetMonstersWithList final
{
public:
	TArray<EMonsterRegisterType>                  TypeList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMonsterBase*>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetMonstersWithList) == 0x000008, "Wrong alignment on MonsterManager_GetMonstersWithList");
static_assert(sizeof(MonsterManager_GetMonstersWithList) == 0x000020, "Wrong size on MonsterManager_GetMonstersWithList");
static_assert(offsetof(MonsterManager_GetMonstersWithList, TypeList) == 0x000000, "Member 'MonsterManager_GetMonstersWithList::TypeList' has a wrong offset!");
static_assert(offsetof(MonsterManager_GetMonstersWithList, ReturnValue) == 0x000010, "Member 'MonsterManager_GetMonstersWithList::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetPauseFlag
// 0x0002 (0x0002 - 0x0000)
struct MonsterManager_GetPauseFlag final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetPauseFlag) == 0x000001, "Wrong alignment on MonsterManager_GetPauseFlag");
static_assert(sizeof(MonsterManager_GetPauseFlag) == 0x000002, "Wrong size on MonsterManager_GetPauseFlag");
static_assert(offsetof(MonsterManager_GetPauseFlag, Type) == 0x000000, "Member 'MonsterManager_GetPauseFlag::Type' has a wrong offset!");
static_assert(offsetof(MonsterManager_GetPauseFlag, ReturnValue) == 0x000001, "Member 'MonsterManager_GetPauseFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetPushBackType
// 0x0004 (0x0004 - 0x0000)
struct MonsterManager_GetPushBackType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetPushBackType) == 0x000004, "Wrong alignment on MonsterManager_GetPushBackType");
static_assert(sizeof(MonsterManager_GetPushBackType) == 0x000004, "Wrong size on MonsterManager_GetPushBackType");
static_assert(offsetof(MonsterManager_GetPushBackType, ReturnValue) == 0x000000, "Member 'MonsterManager_GetPushBackType::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.HiddenDeadIcon
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_HiddenDeadIcon final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_HiddenDeadIcon) == 0x000001, "Wrong alignment on MonsterManager_HiddenDeadIcon");
static_assert(sizeof(MonsterManager_HiddenDeadIcon) == 0x000001, "Wrong size on MonsterManager_HiddenDeadIcon");
static_assert(offsetof(MonsterManager_HiddenDeadIcon, Flag) == 0x000000, "Member 'MonsterManager_HiddenDeadIcon::Flag' has a wrong offset!");

// Function DarwinGame.MonsterManager.IsBoss
// 0x0010 (0x0010 - 0x0000)
struct MonsterManager_IsBoss final
{
public:
	const class AMonsterBase*                     Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterManager_IsBoss) == 0x000008, "Wrong alignment on MonsterManager_IsBoss");
static_assert(sizeof(MonsterManager_IsBoss) == 0x000010, "Wrong size on MonsterManager_IsBoss");
static_assert(offsetof(MonsterManager_IsBoss, Monster) == 0x000000, "Member 'MonsterManager_IsBoss::Monster' has a wrong offset!");
static_assert(offsetof(MonsterManager_IsBoss, ReturnValue) == 0x000008, "Member 'MonsterManager_IsBoss::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.IsEnemy
// 0x0010 (0x0010 - 0x0000)
struct MonsterManager_IsEnemy final
{
public:
	const class AMonster*                         Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterManager_IsEnemy) == 0x000008, "Wrong alignment on MonsterManager_IsEnemy");
static_assert(sizeof(MonsterManager_IsEnemy) == 0x000010, "Wrong size on MonsterManager_IsEnemy");
static_assert(offsetof(MonsterManager_IsEnemy, Monster) == 0x000000, "Member 'MonsterManager_IsEnemy::Monster' has a wrong offset!");
static_assert(offsetof(MonsterManager_IsEnemy, ReturnValue) == 0x000008, "Member 'MonsterManager_IsEnemy::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.IsEnemyBase
// 0x0010 (0x0010 - 0x0000)
struct MonsterManager_IsEnemyBase final
{
public:
	const class AMonsterBase*                     Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterManager_IsEnemyBase) == 0x000008, "Wrong alignment on MonsterManager_IsEnemyBase");
static_assert(sizeof(MonsterManager_IsEnemyBase) == 0x000010, "Wrong size on MonsterManager_IsEnemyBase");
static_assert(offsetof(MonsterManager_IsEnemyBase, Monster) == 0x000000, "Member 'MonsterManager_IsEnemyBase::Monster' has a wrong offset!");
static_assert(offsetof(MonsterManager_IsEnemyBase, ReturnValue) == 0x000008, "Member 'MonsterManager_IsEnemyBase::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.IsSpecialAbility
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_IsSpecialAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_IsSpecialAbility) == 0x000001, "Wrong alignment on MonsterManager_IsSpecialAbility");
static_assert(sizeof(MonsterManager_IsSpecialAbility) == 0x000001, "Wrong size on MonsterManager_IsSpecialAbility");
static_assert(offsetof(MonsterManager_IsSpecialAbility, ReturnValue) == 0x000000, "Member 'MonsterManager_IsSpecialAbility::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.NoticeStartRevengeBattle
// 0x0038 (0x0038 - 0x0000)
struct MonsterManager_NoticeStartRevengeBattle final
{
public:
	struct FVector                                FlagLocaton;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleID;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subtract;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AMonsterBase* spawned)>  begin_func;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class AMonsterBase* deaded)>   end_func;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_NoticeStartRevengeBattle) == 0x000004, "Wrong alignment on MonsterManager_NoticeStartRevengeBattle");
static_assert(sizeof(MonsterManager_NoticeStartRevengeBattle) == 0x000038, "Wrong size on MonsterManager_NoticeStartRevengeBattle");
static_assert(offsetof(MonsterManager_NoticeStartRevengeBattle, FlagLocaton) == 0x000000, "Member 'MonsterManager_NoticeStartRevengeBattle::FlagLocaton' has a wrong offset!");
static_assert(offsetof(MonsterManager_NoticeStartRevengeBattle, BattleID) == 0x00000C, "Member 'MonsterManager_NoticeStartRevengeBattle::BattleID' has a wrong offset!");
static_assert(offsetof(MonsterManager_NoticeStartRevengeBattle, Subtract) == 0x000014, "Member 'MonsterManager_NoticeStartRevengeBattle::Subtract' has a wrong offset!");
static_assert(offsetof(MonsterManager_NoticeStartRevengeBattle, begin_func) == 0x000018, "Member 'MonsterManager_NoticeStartRevengeBattle::begin_func' has a wrong offset!");
static_assert(offsetof(MonsterManager_NoticeStartRevengeBattle, end_func) == 0x000028, "Member 'MonsterManager_NoticeStartRevengeBattle::end_func' has a wrong offset!");

// Function DarwinGame.MonsterManager.PauseMonster
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_PauseMonster final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_PauseMonster) == 0x000001, "Wrong alignment on MonsterManager_PauseMonster");
static_assert(sizeof(MonsterManager_PauseMonster) == 0x000001, "Wrong size on MonsterManager_PauseMonster");
static_assert(offsetof(MonsterManager_PauseMonster, Type) == 0x000000, "Member 'MonsterManager_PauseMonster::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.PauseMonsterWithoutBoss
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_PauseMonsterWithoutBoss final
{
public:
	bool                                          Logic;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_PauseMonsterWithoutBoss) == 0x000001, "Wrong alignment on MonsterManager_PauseMonsterWithoutBoss");
static_assert(sizeof(MonsterManager_PauseMonsterWithoutBoss) == 0x000001, "Wrong size on MonsterManager_PauseMonsterWithoutBoss");
static_assert(offsetof(MonsterManager_PauseMonsterWithoutBoss, Logic) == 0x000000, "Member 'MonsterManager_PauseMonsterWithoutBoss::Logic' has a wrong offset!");

// Function DarwinGame.MonsterManager.Remove
// 0x0008 (0x0008 - 0x0000)
struct MonsterManager_Remove final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_Remove) == 0x000008, "Wrong alignment on MonsterManager_Remove");
static_assert(sizeof(MonsterManager_Remove) == 0x000008, "Wrong size on MonsterManager_Remove");
static_assert(offsetof(MonsterManager_Remove, Monster) == 0x000000, "Member 'MonsterManager_Remove::Monster' has a wrong offset!");

// Function DarwinGame.MonsterManager.RemoveAll
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_RemoveAll final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_RemoveAll) == 0x000001, "Wrong alignment on MonsterManager_RemoveAll");
static_assert(sizeof(MonsterManager_RemoveAll) == 0x000001, "Wrong size on MonsterManager_RemoveAll");
static_assert(offsetof(MonsterManager_RemoveAll, Type) == 0x000000, "Member 'MonsterManager_RemoveAll::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.RemoveFromSpawnID
// 0x000C (0x000C - 0x0000)
struct MonsterManager_RemoveFromSpawnID final
{
public:
	class FName                                   spawn_point_id;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterManager_RemoveFromSpawnID) == 0x000004, "Wrong alignment on MonsterManager_RemoveFromSpawnID");
static_assert(sizeof(MonsterManager_RemoveFromSpawnID) == 0x00000C, "Wrong size on MonsterManager_RemoveFromSpawnID");
static_assert(offsetof(MonsterManager_RemoveFromSpawnID, spawn_point_id) == 0x000000, "Member 'MonsterManager_RemoveFromSpawnID::spawn_point_id' has a wrong offset!");
static_assert(offsetof(MonsterManager_RemoveFromSpawnID, Type) == 0x000008, "Member 'MonsterManager_RemoveFromSpawnID::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.RequestSpawnParameterID
// 0x0040 (0x0040 - 0x0000)
struct MonsterManager_RequestSpawnParameterID final
{
public:
	int32                                         MonsterParameterId;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaceType;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EcologicalAiType;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterRegisterType                          Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   spawn_point_id;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEnemySpawnGeneratorType                      parentType;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnPriority;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHighAltitude;                                    // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterManager_RequestSpawnParameterID) == 0x000004, "Wrong alignment on MonsterManager_RequestSpawnParameterID");
static_assert(sizeof(MonsterManager_RequestSpawnParameterID) == 0x000040, "Wrong size on MonsterManager_RequestSpawnParameterID");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, MonsterParameterId) == 0x000000, "Member 'MonsterManager_RequestSpawnParameterID::MonsterParameterId' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, PlaceType) == 0x000004, "Member 'MonsterManager_RequestSpawnParameterID::PlaceType' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, EcologicalAiType) == 0x000008, "Member 'MonsterManager_RequestSpawnParameterID::EcologicalAiType' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, Type) == 0x000010, "Member 'MonsterManager_RequestSpawnParameterID::Type' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, Pos) == 0x000014, "Member 'MonsterManager_RequestSpawnParameterID::Pos' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, spawn_point_id) == 0x000020, "Member 'MonsterManager_RequestSpawnParameterID::spawn_point_id' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, rot) == 0x000028, "Member 'MonsterManager_RequestSpawnParameterID::rot' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, parentType) == 0x000034, "Member 'MonsterManager_RequestSpawnParameterID::parentType' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, SpawnPriority) == 0x000038, "Member 'MonsterManager_RequestSpawnParameterID::SpawnPriority' has a wrong offset!");
static_assert(offsetof(MonsterManager_RequestSpawnParameterID, IsHighAltitude) == 0x00003C, "Member 'MonsterManager_RequestSpawnParameterID::IsHighAltitude' has a wrong offset!");

// Function DarwinGame.MonsterManager.ResumeMonster
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_ResumeMonster final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_ResumeMonster) == 0x000001, "Wrong alignment on MonsterManager_ResumeMonster");
static_assert(sizeof(MonsterManager_ResumeMonster) == 0x000001, "Wrong size on MonsterManager_ResumeMonster");
static_assert(offsetof(MonsterManager_ResumeMonster, Type) == 0x000000, "Member 'MonsterManager_ResumeMonster::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.ResumeMonsterWithoutBoss
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_ResumeMonsterWithoutBoss final
{
public:
	bool                                          Logic;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_ResumeMonsterWithoutBoss) == 0x000001, "Wrong alignment on MonsterManager_ResumeMonsterWithoutBoss");
static_assert(sizeof(MonsterManager_ResumeMonsterWithoutBoss) == 0x000001, "Wrong size on MonsterManager_ResumeMonsterWithoutBoss");
static_assert(offsetof(MonsterManager_ResumeMonsterWithoutBoss, Logic) == 0x000000, "Member 'MonsterManager_ResumeMonsterWithoutBoss::Logic' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetBossDerived
// 0x0004 (0x0004 - 0x0000)
struct MonsterManager_SetBossDerived final
{
public:
	int32                                         derived;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetBossDerived) == 0x000004, "Wrong alignment on MonsterManager_SetBossDerived");
static_assert(sizeof(MonsterManager_SetBossDerived) == 0x000004, "Wrong size on MonsterManager_SetBossDerived");
static_assert(offsetof(MonsterManager_SetBossDerived, derived) == 0x000000, "Member 'MonsterManager_SetBossDerived::derived' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetBossType
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_SetBossType final
{
public:
	EMonsterBossType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetBossType) == 0x000001, "Wrong alignment on MonsterManager_SetBossType");
static_assert(sizeof(MonsterManager_SetBossType) == 0x000001, "Wrong size on MonsterManager_SetBossType");
static_assert(offsetof(MonsterManager_SetBossType, Type) == 0x000000, "Member 'MonsterManager_SetBossType::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetDistanceCheckSkip
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_SetDistanceCheckSkip final
{
public:
	bool                                          skipFlag;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetDistanceCheckSkip) == 0x000001, "Wrong alignment on MonsterManager_SetDistanceCheckSkip");
static_assert(sizeof(MonsterManager_SetDistanceCheckSkip) == 0x000001, "Wrong size on MonsterManager_SetDistanceCheckSkip");
static_assert(offsetof(MonsterManager_SetDistanceCheckSkip, skipFlag) == 0x000000, "Member 'MonsterManager_SetDistanceCheckSkip::skipFlag' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetFastTravel
// 0x0008 (0x0008 - 0x0000)
struct MonsterManager_SetFastTravel final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetFastTravel) == 0x000004, "Wrong alignment on MonsterManager_SetFastTravel");
static_assert(sizeof(MonsterManager_SetFastTravel) == 0x000008, "Wrong size on MonsterManager_SetFastTravel");
static_assert(offsetof(MonsterManager_SetFastTravel, ID) == 0x000000, "Member 'MonsterManager_SetFastTravel::ID' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetIsStopUpdateMonsters
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_SetIsStopUpdateMonsters final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetIsStopUpdateMonsters) == 0x000001, "Wrong alignment on MonsterManager_SetIsStopUpdateMonsters");
static_assert(sizeof(MonsterManager_SetIsStopUpdateMonsters) == 0x000001, "Wrong size on MonsterManager_SetIsStopUpdateMonsters");
static_assert(offsetof(MonsterManager_SetIsStopUpdateMonsters, flg) == 0x000000, "Member 'MonsterManager_SetIsStopUpdateMonsters::flg' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetPlayerAccessingArtifact
// 0x0008 (0x0008 - 0x0000)
struct MonsterManager_SetPlayerAccessingArtifact final
{
public:
	class AArtifactObjectBase*                    Artifact;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetPlayerAccessingArtifact) == 0x000008, "Wrong alignment on MonsterManager_SetPlayerAccessingArtifact");
static_assert(sizeof(MonsterManager_SetPlayerAccessingArtifact) == 0x000008, "Wrong size on MonsterManager_SetPlayerAccessingArtifact");
static_assert(offsetof(MonsterManager_SetPlayerAccessingArtifact, Artifact) == 0x000000, "Member 'MonsterManager_SetPlayerAccessingArtifact::Artifact' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetPushBackType
// 0x0004 (0x0004 - 0x0000)
struct MonsterManager_SetPushBackType final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetPushBackType) == 0x000004, "Wrong alignment on MonsterManager_SetPushBackType");
static_assert(sizeof(MonsterManager_SetPushBackType) == 0x000004, "Wrong size on MonsterManager_SetPushBackType");
static_assert(offsetof(MonsterManager_SetPushBackType, Type) == 0x000000, "Member 'MonsterManager_SetPushBackType::Type' has a wrong offset!");

// Function DarwinGame.MonsterManager.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct MonsterManager_SetTimeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_SetTimeScale) == 0x000004, "Wrong alignment on MonsterManager_SetTimeScale");
static_assert(sizeof(MonsterManager_SetTimeScale) == 0x000004, "Wrong size on MonsterManager_SetTimeScale");
static_assert(offsetof(MonsterManager_SetTimeScale, Scale) == 0x000000, "Member 'MonsterManager_SetTimeScale::Scale' has a wrong offset!");

// Function DarwinGame.MonsterManager.Spawn
// 0x00D0 (0x00D0 - 0x0000)
struct MonsterManager_Spawn final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommonSpawnParam                      spawnParam;                                        // 0x0010(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_Spawn) == 0x000010, "Wrong alignment on MonsterManager_Spawn");
static_assert(sizeof(MonsterManager_Spawn) == 0x0000D0, "Wrong size on MonsterManager_Spawn");
static_assert(offsetof(MonsterManager_Spawn, KindId) == 0x000000, "Member 'MonsterManager_Spawn::KindId' has a wrong offset!");
static_assert(offsetof(MonsterManager_Spawn, spawnParam) == 0x000010, "Member 'MonsterManager_Spawn::spawnParam' has a wrong offset!");

// Function DarwinGame.MonsterManager.GetPlayerAccessingArtifact
// 0x0008 (0x0008 - 0x0000)
struct MonsterManager_GetPlayerAccessingArtifact final
{
public:
	class AArtifactObjectBase*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_GetPlayerAccessingArtifact) == 0x000008, "Wrong alignment on MonsterManager_GetPlayerAccessingArtifact");
static_assert(sizeof(MonsterManager_GetPlayerAccessingArtifact) == 0x000008, "Wrong size on MonsterManager_GetPlayerAccessingArtifact");
static_assert(offsetof(MonsterManager_GetPlayerAccessingArtifact, ReturnValue) == 0x000000, "Member 'MonsterManager_GetPlayerAccessingArtifact::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterManager.IsDistanceCheckSkip
// 0x0001 (0x0001 - 0x0000)
struct MonsterManager_IsDistanceCheckSkip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterManager_IsDistanceCheckSkip) == 0x000001, "Wrong alignment on MonsterManager_IsDistanceCheckSkip");
static_assert(sizeof(MonsterManager_IsDistanceCheckSkip) == 0x000001, "Wrong size on MonsterManager_IsDistanceCheckSkip");
static_assert(offsetof(MonsterManager_IsDistanceCheckSkip, ReturnValue) == 0x000000, "Member 'MonsterManager_IsDistanceCheckSkip::ReturnValue' has a wrong offset!");

// Function DarwinGame.RuinsDoor.PlayOpen
// 0x000C (0x000C - 0x0000)
struct RuinsDoor_PlayOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuinsDoor_PlayOpen) == 0x000004, "Wrong alignment on RuinsDoor_PlayOpen");
static_assert(sizeof(RuinsDoor_PlayOpen) == 0x00000C, "Wrong size on RuinsDoor_PlayOpen");
static_assert(offsetof(RuinsDoor_PlayOpen, Vector) == 0x000000, "Member 'RuinsDoor_PlayOpen::Vector' has a wrong offset!");

// Function DarwinGame.RuinsDoor.ReceivePlayOpen
// 0x000C (0x000C - 0x0000)
struct RuinsDoor_ReceivePlayOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuinsDoor_ReceivePlayOpen) == 0x000004, "Wrong alignment on RuinsDoor_ReceivePlayOpen");
static_assert(sizeof(RuinsDoor_ReceivePlayOpen) == 0x00000C, "Wrong size on RuinsDoor_ReceivePlayOpen");
static_assert(offsetof(RuinsDoor_ReceivePlayOpen, Vector) == 0x000000, "Member 'RuinsDoor_ReceivePlayOpen::Vector' has a wrong offset!");

// Function DarwinGame.RuinsDoor.ReceiveSetOpen
// 0x000C (0x000C - 0x0000)
struct RuinsDoor_ReceiveSetOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuinsDoor_ReceiveSetOpen) == 0x000004, "Wrong alignment on RuinsDoor_ReceiveSetOpen");
static_assert(sizeof(RuinsDoor_ReceiveSetOpen) == 0x00000C, "Wrong size on RuinsDoor_ReceiveSetOpen");
static_assert(offsetof(RuinsDoor_ReceiveSetOpen, Vector) == 0x000000, "Member 'RuinsDoor_ReceiveSetOpen::Vector' has a wrong offset!");

// Function DarwinGame.RuinsDoor.SetOpen
// 0x000C (0x000C - 0x0000)
struct RuinsDoor_SetOpen final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuinsDoor_SetOpen) == 0x000004, "Wrong alignment on RuinsDoor_SetOpen");
static_assert(sizeof(RuinsDoor_SetOpen) == 0x00000C, "Wrong size on RuinsDoor_SetOpen");
static_assert(offsetof(RuinsDoor_SetOpen, Vector) == 0x000000, "Member 'RuinsDoor_SetOpen::Vector' has a wrong offset!");

// Function DarwinGame.MonsterParameterDataTable.GetDropItemInfo
// 0x0018 (0x0018 - 0x0000)
struct MonsterParameterDataTable_GetDropItemInfo final
{
public:
	class FName                                   MonsterParamID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_DropItemInfo>               DropItemInfos;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterParameterDataTable_GetDropItemInfo) == 0x000008, "Wrong alignment on MonsterParameterDataTable_GetDropItemInfo");
static_assert(sizeof(MonsterParameterDataTable_GetDropItemInfo) == 0x000018, "Wrong size on MonsterParameterDataTable_GetDropItemInfo");
static_assert(offsetof(MonsterParameterDataTable_GetDropItemInfo, MonsterParamID) == 0x000000, "Member 'MonsterParameterDataTable_GetDropItemInfo::MonsterParamID' has a wrong offset!");
static_assert(offsetof(MonsterParameterDataTable_GetDropItemInfo, DropItemInfos) == 0x000008, "Member 'MonsterParameterDataTable_GetDropItemInfo::DropItemInfos' has a wrong offset!");

// Function DarwinGame.MonsterParameterDataTable.GetExpGain
// 0x000C (0x000C - 0x0000)
struct MonsterParameterDataTable_GetExpGain final
{
public:
	class FName                                   MonsterId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterParameterDataTable_GetExpGain) == 0x000004, "Wrong alignment on MonsterParameterDataTable_GetExpGain");
static_assert(sizeof(MonsterParameterDataTable_GetExpGain) == 0x00000C, "Wrong size on MonsterParameterDataTable_GetExpGain");
static_assert(offsetof(MonsterParameterDataTable_GetExpGain, MonsterId) == 0x000000, "Member 'MonsterParameterDataTable_GetExpGain::MonsterId' has a wrong offset!");
static_assert(offsetof(MonsterParameterDataTable_GetExpGain, ReturnValue) == 0x000008, "Member 'MonsterParameterDataTable_GetExpGain::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterParameterDataTable.GetKindID
// 0x0010 (0x0010 - 0x0000)
struct MonsterParameterDataTable_GetKindID final
{
public:
	class FName                                   MonsterId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterParameterDataTable_GetKindID) == 0x000004, "Wrong alignment on MonsterParameterDataTable_GetKindID");
static_assert(sizeof(MonsterParameterDataTable_GetKindID) == 0x000010, "Wrong size on MonsterParameterDataTable_GetKindID");
static_assert(offsetof(MonsterParameterDataTable_GetKindID, MonsterId) == 0x000000, "Member 'MonsterParameterDataTable_GetKindID::MonsterId' has a wrong offset!");
static_assert(offsetof(MonsterParameterDataTable_GetKindID, ReturnValue) == 0x000008, "Member 'MonsterParameterDataTable_GetKindID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterParameterDataTable.GetLevel
// 0x000C (0x000C - 0x0000)
struct MonsterParameterDataTable_GetLevel final
{
public:
	class FName                                   MonsterId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterParameterDataTable_GetLevel) == 0x000004, "Wrong alignment on MonsterParameterDataTable_GetLevel");
static_assert(sizeof(MonsterParameterDataTable_GetLevel) == 0x00000C, "Wrong size on MonsterParameterDataTable_GetLevel");
static_assert(offsetof(MonsterParameterDataTable_GetLevel, MonsterId) == 0x000000, "Member 'MonsterParameterDataTable_GetLevel::MonsterId' has a wrong offset!");
static_assert(offsetof(MonsterParameterDataTable_GetLevel, ReturnValue) == 0x000008, "Member 'MonsterParameterDataTable_GetLevel::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterRelocationBlueprintFunctionLibrary.Main
// 0x0010 (0x0010 - 0x0000)
struct MonsterRelocationBlueprintFunctionLibrary_Main final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterRelocationBlueprintFunctionLibrary_Main) == 0x000008, "Wrong alignment on MonsterRelocationBlueprintFunctionLibrary_Main");
static_assert(sizeof(MonsterRelocationBlueprintFunctionLibrary_Main) == 0x000010, "Wrong size on MonsterRelocationBlueprintFunctionLibrary_Main");
static_assert(offsetof(MonsterRelocationBlueprintFunctionLibrary_Main, Monster) == 0x000000, "Member 'MonsterRelocationBlueprintFunctionLibrary_Main::Monster' has a wrong offset!");
static_assert(offsetof(MonsterRelocationBlueprintFunctionLibrary_Main, ReturnValue) == 0x000008, "Member 'MonsterRelocationBlueprintFunctionLibrary_Main::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterRingComponent.GetRingActor
// 0x0008 (0x0008 - 0x0000)
struct MonsterRingComponent_GetRingActor final
{
public:
	class AStaticMeshActor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterRingComponent_GetRingActor) == 0x000008, "Wrong alignment on MonsterRingComponent_GetRingActor");
static_assert(sizeof(MonsterRingComponent_GetRingActor) == 0x000008, "Wrong size on MonsterRingComponent_GetRingActor");
static_assert(offsetof(MonsterRingComponent_GetRingActor, ReturnValue) == 0x000000, "Member 'MonsterRingComponent_GetRingActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterRivalTeamLotteryWeight.RandomSelectRivalTeamForce
// 0x0001 (0x0001 - 0x0000)
struct MonsterRivalTeamLotteryWeight_RandomSelectRivalTeamForce final
{
public:
	ERivalTeamForce                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterRivalTeamLotteryWeight_RandomSelectRivalTeamForce) == 0x000001, "Wrong alignment on MonsterRivalTeamLotteryWeight_RandomSelectRivalTeamForce");
static_assert(sizeof(MonsterRivalTeamLotteryWeight_RandomSelectRivalTeamForce) == 0x000001, "Wrong size on MonsterRivalTeamLotteryWeight_RandomSelectRivalTeamForce");
static_assert(offsetof(MonsterRivalTeamLotteryWeight_RandomSelectRivalTeamForce, ReturnValue) == 0x000000, "Member 'MonsterRivalTeamLotteryWeight_RandomSelectRivalTeamForce::ReturnValue' has a wrong offset!");

// Function DarwinGame.SectorAreaOfEffect.SetAngleType
// 0x0001 (0x0001 - 0x0000)
struct SectorAreaOfEffect_SetAngleType final
{
public:
	ESectorAoEAngle                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SectorAreaOfEffect_SetAngleType) == 0x000001, "Wrong alignment on SectorAreaOfEffect_SetAngleType");
static_assert(sizeof(SectorAreaOfEffect_SetAngleType) == 0x000001, "Wrong size on SectorAreaOfEffect_SetAngleType");
static_assert(offsetof(SectorAreaOfEffect_SetAngleType, Type) == 0x000000, "Member 'SectorAreaOfEffect_SetAngleType::Type' has a wrong offset!");

// Function DarwinGame.SectorAreaOfEffect.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct SectorAreaOfEffect_SetRadius final
{
public:
	float                                         Rad;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SectorAreaOfEffect_SetRadius) == 0x000004, "Wrong alignment on SectorAreaOfEffect_SetRadius");
static_assert(sizeof(SectorAreaOfEffect_SetRadius) == 0x000004, "Wrong size on SectorAreaOfEffect_SetRadius");
static_assert(offsetof(SectorAreaOfEffect_SetRadius, Rad) == 0x000000, "Member 'SectorAreaOfEffect_SetRadius::Rad' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.CancelActionState
// 0x0001 (0x0001 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_CancelActionState final
{
public:
	EMonsterRegisterType                          registerType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_CancelActionState) == 0x000001, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_CancelActionState");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_CancelActionState) == 0x000001, "Wrong size on MonsterSpecialAbilityFunctionLibrary_CancelActionState");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_CancelActionState, registerType) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_CancelActionState::registerType' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.DisableInvincibleSingle
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_DisableInvincibleSingle final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_DisableInvincibleSingle) == 0x000008, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_DisableInvincibleSingle");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_DisableInvincibleSingle) == 0x000008, "Wrong size on MonsterSpecialAbilityFunctionLibrary_DisableInvincibleSingle");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_DisableInvincibleSingle, Monster) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_DisableInvincibleSingle::Monster' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.IsCancel
// 0x0010 (0x0010 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_IsCancel final
{
public:
	class AMonsterBase*                           Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_IsCancel) == 0x000008, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_IsCancel");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_IsCancel) == 0x000010, "Wrong size on MonsterSpecialAbilityFunctionLibrary_IsCancel");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_IsCancel, Owner) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_IsCancel::Owner' has a wrong offset!");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_IsCancel, ReturnValue) == 0x000008, "Member 'MonsterSpecialAbilityFunctionLibrary_IsCancel::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.LoadAbilityCueSheet
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_LoadAbilityCueSheet final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_LoadAbilityCueSheet) == 0x000004, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_LoadAbilityCueSheet");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_LoadAbilityCueSheet) == 0x000008, "Wrong size on MonsterSpecialAbilityFunctionLibrary_LoadAbilityCueSheet");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_LoadAbilityCueSheet, RowName) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_LoadAbilityCueSheet::RowName' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.ReleaseAbilityCueSheet
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_ReleaseAbilityCueSheet final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_ReleaseAbilityCueSheet) == 0x000004, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_ReleaseAbilityCueSheet");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_ReleaseAbilityCueSheet) == 0x000008, "Wrong size on MonsterSpecialAbilityFunctionLibrary_ReleaseAbilityCueSheet");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_ReleaseAbilityCueSheet, RowName) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_ReleaseAbilityCueSheet::RowName' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.SetEnvironmentEnable
// 0x0001 (0x0001 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_SetEnvironmentEnable final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_SetEnvironmentEnable) == 0x000001, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_SetEnvironmentEnable");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_SetEnvironmentEnable) == 0x000001, "Wrong size on MonsterSpecialAbilityFunctionLibrary_SetEnvironmentEnable");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_SetEnvironmentEnable, enable) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_SetEnvironmentEnable::enable' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.SetMonsterTimerPause
// 0x0010 (0x0010 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPause;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause) == 0x000008, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause) == 0x000010, "Wrong size on MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause, Monster) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause::Monster' has a wrong offset!");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause, isPause) == 0x000008, "Member 'MonsterSpecialAbilityFunctionLibrary_SetMonsterTimerPause::isPause' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.SetPlayerInputEnable
// 0x0001 (0x0001 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_SetPlayerInputEnable final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_SetPlayerInputEnable) == 0x000001, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_SetPlayerInputEnable");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_SetPlayerInputEnable) == 0x000001, "Wrong size on MonsterSpecialAbilityFunctionLibrary_SetPlayerInputEnable");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_SetPlayerInputEnable, enable) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_SetPlayerInputEnable::enable' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.SetupAbilityName
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_SetupAbilityName final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_SetupAbilityName) == 0x000008, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_SetupAbilityName");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_SetupAbilityName) == 0x000008, "Wrong size on MonsterSpecialAbilityFunctionLibrary_SetupAbilityName");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_SetupAbilityName, Monster) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_SetupAbilityName::Monster' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.StopMonstersWithoutOwner
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_StopMonstersWithoutOwner final
{
public:
	class AMonster*                               Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_StopMonstersWithoutOwner) == 0x000008, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_StopMonstersWithoutOwner");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_StopMonstersWithoutOwner) == 0x000008, "Wrong size on MonsterSpecialAbilityFunctionLibrary_StopMonstersWithoutOwner");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_StopMonstersWithoutOwner, Owner) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_StopMonstersWithoutOwner::Owner' has a wrong offset!");

// Function DarwinGame.MonsterSpecialAbilityFunctionLibrary.UnRegisterFieldTerrainInfo
// 0x0008 (0x0008 - 0x0000)
struct MonsterSpecialAbilityFunctionLibrary_UnRegisterFieldTerrainInfo final
{
public:
	class AGPACharacter*                          Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterSpecialAbilityFunctionLibrary_UnRegisterFieldTerrainInfo) == 0x000008, "Wrong alignment on MonsterSpecialAbilityFunctionLibrary_UnRegisterFieldTerrainInfo");
static_assert(sizeof(MonsterSpecialAbilityFunctionLibrary_UnRegisterFieldTerrainInfo) == 0x000008, "Wrong size on MonsterSpecialAbilityFunctionLibrary_UnRegisterFieldTerrainInfo");
static_assert(offsetof(MonsterSpecialAbilityFunctionLibrary_UnRegisterFieldTerrainInfo, Owner) == 0x000000, "Member 'MonsterSpecialAbilityFunctionLibrary_UnRegisterFieldTerrainInfo::Owner' has a wrong offset!");

// Function DarwinGame.UILoadContent.LoadDialogCallback
// 0x0001 (0x0001 - 0x0000)
struct UILoadContent_LoadDialogCallback final
{
public:
	bool                                          IsYes;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILoadContent_LoadDialogCallback) == 0x000001, "Wrong alignment on UILoadContent_LoadDialogCallback");
static_assert(sizeof(UILoadContent_LoadDialogCallback) == 0x000001, "Wrong size on UILoadContent_LoadDialogCallback");
static_assert(offsetof(UILoadContent_LoadDialogCallback, IsYes) == 0x000000, "Member 'UILoadContent_LoadDialogCallback::IsYes' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.ApplyAttributeToMonsters
// 0x0010 (0x0010 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttributeID;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters) == 0x000004, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters) == 0x000010, "Wrong size on MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters, AttributeID) == 0x000004, "Member 'MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters::AttributeID' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters, Level) == 0x00000C, "Member 'MonsterStateBlueprintFunctionLibrary_ApplyAttributeToMonsters::Level' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.GetMonstersHidden
// 0x0002 (0x0002 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_GetMonstersHidden final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_GetMonstersHidden) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_GetMonstersHidden");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_GetMonstersHidden) == 0x000002, "Wrong size on MonsterStateBlueprintFunctionLibrary_GetMonstersHidden");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_GetMonstersHidden, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_GetMonstersHidden::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_GetMonstersHidden, ReturnValue) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_GetMonstersHidden::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.GetMonstersStopLogic
// 0x0002 (0x0002 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic) == 0x000002, "Wrong size on MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic, ReturnValue) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_GetMonstersStopLogic::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.HasMonster
// 0x0002 (0x0002 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_HasMonster final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_HasMonster) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_HasMonster");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_HasMonster) == 0x000002, "Wrong size on MonsterStateBlueprintFunctionLibrary_HasMonster");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_HasMonster, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_HasMonster::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_HasMonster, ReturnValue) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_HasMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.IsBattle
// 0x0001 (0x0001 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_IsBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_IsBattle) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_IsBattle");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_IsBattle) == 0x000001, "Wrong size on MonsterStateBlueprintFunctionLibrary_IsBattle");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_IsBattle, ReturnValue) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_IsBattle::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.PauseEnemy
// 0x0008 (0x0008 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_PauseEnemy final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_PauseEnemy) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_PauseEnemy");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_PauseEnemy) == 0x000008, "Wrong size on MonsterStateBlueprintFunctionLibrary_PauseEnemy");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_PauseEnemy, Monster) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_PauseEnemy::Monster' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.PauseToType
// 0x0001 (0x0001 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_PauseToType final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_PauseToType) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_PauseToType");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_PauseToType) == 0x000001, "Wrong size on MonsterStateBlueprintFunctionLibrary_PauseToType");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_PauseToType, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_PauseToType::Type' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.PlayCharacterCommonEffect
// 0x0002 (0x0002 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterCommonEffectID                      EffectId;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect) == 0x000002, "Wrong size on MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect, EffectId) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_PlayCharacterCommonEffect::EffectId' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.ReleaseAttributeFromMonsters
// 0x0020 (0x0020 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttributeID;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMonsterBase*>                   ignores;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters) == 0x000020, "Wrong size on MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters, AttributeID) == 0x000004, "Member 'MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters::AttributeID' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters, ignores) == 0x000010, "Member 'MonsterStateBlueprintFunctionLibrary_ReleaseAttributeFromMonsters::ignores' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.ResumeEnemy
// 0x0008 (0x0008 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_ResumeEnemy final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_ResumeEnemy) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_ResumeEnemy");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_ResumeEnemy) == 0x000008, "Wrong size on MonsterStateBlueprintFunctionLibrary_ResumeEnemy");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ResumeEnemy, Monster) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_ResumeEnemy::Monster' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.ResumeToType
// 0x0001 (0x0001 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_ResumeToType final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_ResumeToType) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_ResumeToType");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_ResumeToType) == 0x000001, "Wrong size on MonsterStateBlueprintFunctionLibrary_ResumeToType");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_ResumeToType, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_ResumeToType::Type' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.RivalTeamIsBattle
// 0x0001 (0x0001 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_RivalTeamIsBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_RivalTeamIsBattle) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_RivalTeamIsBattle");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_RivalTeamIsBattle) == 0x000001, "Wrong size on MonsterStateBlueprintFunctionLibrary_RivalTeamIsBattle");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_RivalTeamIsBattle, ReturnValue) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_RivalTeamIsBattle::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetHide
// 0x0010 (0x0010 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetHide final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetHide) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetHide");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetHide) == 0x000010, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetHide");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHide, Monster) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetHide::Monster' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHide, IsHide) == 0x000008, "Member 'MonsterStateBlueprintFunctionLibrary_SetHide::IsHide' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetHideFriendsWithoutSpecifiedFriend
// 0x0010 (0x0010 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend) == 0x000010, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend, Monster) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend::Monster' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend, IsHide) == 0x000008, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideFriendsWithoutSpecifiedFriend::IsHide' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetHideToList
// 0x0018 (0x0018 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetHideToList final
{
public:
	TArray<class AMonsterBase*>                   MonsterList;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetHideToList) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetHideToList");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetHideToList) == 0x000018, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetHideToList");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToList, MonsterList) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToList::MonsterList' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToList, IsHide) == 0x000010, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToList::IsHide' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetHideToListReturnList
// 0x0028 (0x0028 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList final
{
public:
	TArray<class AMonsterBase*>                   MonsterList;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMonsterBase*>                   OutMonsterList;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList) == 0x000028, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList, MonsterList) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList::MonsterList' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList, IsHide) == 0x000010, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList::IsHide' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList, OutMonsterList) == 0x000018, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToListReturnList::OutMonsterList' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetHideToType
// 0x0002 (0x0002 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetHideToType final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetHideToType) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetHideToType");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetHideToType) == 0x000002, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetHideToType");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToType, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToType::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToType, IsHide) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToType::IsHide' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetHideToTypeReturnList
// 0x0018 (0x0018 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMonsterBase*>                   OutMonsterList;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList) == 0x000018, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList, IsHide) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList::IsHide' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList, OutMonsterList) == 0x000008, "Member 'MonsterStateBlueprintFunctionLibrary_SetHideToTypeReturnList::OutMonsterList' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetMonstersTickEnabled
// 0x0002 (0x0002 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled) == 0x000001, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled) == 0x000002, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled, Enabled) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_SetMonstersTickEnabled::Enabled' has a wrong offset!");

// Function DarwinGame.MonsterStateBlueprintFunctionLibrary.SetPauseMonstersActiveGameplayEffect
// 0x0018 (0x0018 - 0x0000)
struct MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect final
{
public:
	EMonsterRegisterType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Pause;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMonsterBase*>                   ignores;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect) == 0x000008, "Wrong alignment on MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect");
static_assert(sizeof(MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect) == 0x000018, "Wrong size on MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect, Type) == 0x000000, "Member 'MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect::Type' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect, Pause) == 0x000001, "Member 'MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect::Pause' has a wrong offset!");
static_assert(offsetof(MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect, ignores) == 0x000008, "Member 'MonsterStateBlueprintFunctionLibrary_SetPauseMonstersActiveGameplayEffect::ignores' has a wrong offset!");

// Function DarwinGame.MonsterTableComponent.FindEcologicalMotionData
// 0x0018 (0x0018 - 0x0000)
struct MonsterTableComponent_FindEcologicalMotionData final
{
public:
	class AMonster*                               Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterTableComponent_FindEcologicalMotionData) == 0x000008, "Wrong alignment on MonsterTableComponent_FindEcologicalMotionData");
static_assert(sizeof(MonsterTableComponent_FindEcologicalMotionData) == 0x000018, "Wrong size on MonsterTableComponent_FindEcologicalMotionData");
static_assert(offsetof(MonsterTableComponent_FindEcologicalMotionData, Monster) == 0x000000, "Member 'MonsterTableComponent_FindEcologicalMotionData::Monster' has a wrong offset!");
static_assert(offsetof(MonsterTableComponent_FindEcologicalMotionData, MotionID) == 0x000008, "Member 'MonsterTableComponent_FindEcologicalMotionData::MotionID' has a wrong offset!");
static_assert(offsetof(MonsterTableComponent_FindEcologicalMotionData, ReturnValue) == 0x000010, "Member 'MonsterTableComponent_FindEcologicalMotionData::ReturnValue' has a wrong offset!");

// Function DarwinGame.MonsterTableComponent.GetEcologicalMotionData
// 0x0040 (0x0040 - 0x0000)
struct MonsterTableComponent_GetEcologicalMotionData final
{
public:
	struct FST_EcologicalMotionData               Out;                                               // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AMonster*                               Monster;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionID;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MonsterTableComponent_GetEcologicalMotionData) == 0x000008, "Wrong alignment on MonsterTableComponent_GetEcologicalMotionData");
static_assert(sizeof(MonsterTableComponent_GetEcologicalMotionData) == 0x000040, "Wrong size on MonsterTableComponent_GetEcologicalMotionData");
static_assert(offsetof(MonsterTableComponent_GetEcologicalMotionData, Out) == 0x000000, "Member 'MonsterTableComponent_GetEcologicalMotionData::Out' has a wrong offset!");
static_assert(offsetof(MonsterTableComponent_GetEcologicalMotionData, Monster) == 0x000028, "Member 'MonsterTableComponent_GetEcologicalMotionData::Monster' has a wrong offset!");
static_assert(offsetof(MonsterTableComponent_GetEcologicalMotionData, MotionID) == 0x000030, "Member 'MonsterTableComponent_GetEcologicalMotionData::MotionID' has a wrong offset!");
static_assert(offsetof(MonsterTableComponent_GetEcologicalMotionData, ReturnValue) == 0x000038, "Member 'MonsterTableComponent_GetEcologicalMotionData::ReturnValue' has a wrong offset!");

// Function DarwinGame.UICircleGaugeBase.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct UICircleGaugeBase_SetPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICircleGaugeBase_SetPercent) == 0x000004, "Wrong alignment on UICircleGaugeBase_SetPercent");
static_assert(sizeof(UICircleGaugeBase_SetPercent) == 0x000004, "Wrong size on UICircleGaugeBase_SetPercent");
static_assert(offsetof(UICircleGaugeBase_SetPercent, Percent) == 0x000000, "Member 'UICircleGaugeBase_SetPercent::Percent' has a wrong offset!");

// Function DarwinGame.PlayerControllerInterface.PossessCamera
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerInterface_PossessCamera final
{
public:
	class ADarwinCamera*                          Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerInterface_PossessCamera) == 0x000008, "Wrong alignment on PlayerControllerInterface_PossessCamera");
static_assert(sizeof(PlayerControllerInterface_PossessCamera) == 0x000008, "Wrong size on PlayerControllerInterface_PossessCamera");
static_assert(offsetof(PlayerControllerInterface_PossessCamera, Camera) == 0x000000, "Member 'PlayerControllerInterface_PossessCamera::Camera' has a wrong offset!");

// Function DarwinGame.PlayerControllerInterface.GetControlledCamera
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerInterface_GetControlledCamera final
{
public:
	class ADarwinCamera*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerInterface_GetControlledCamera) == 0x000008, "Wrong alignment on PlayerControllerInterface_GetControlledCamera");
static_assert(sizeof(PlayerControllerInterface_GetControlledCamera) == 0x000008, "Wrong size on PlayerControllerInterface_GetControlledCamera");
static_assert(offsetof(PlayerControllerInterface_GetControlledCamera, ReturnValue) == 0x000000, "Member 'PlayerControllerInterface_GetControlledCamera::ReturnValue' has a wrong offset!");

// Function DarwinGame.MyTeamFunctionLibrary.AddTeamArtifactValue
// 0x0008 (0x0008 - 0x0000)
struct MyTeamFunctionLibrary_AddTeamArtifactValue final
{
public:
	int64                                         UpArtifactValue;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTeamFunctionLibrary_AddTeamArtifactValue) == 0x000008, "Wrong alignment on MyTeamFunctionLibrary_AddTeamArtifactValue");
static_assert(sizeof(MyTeamFunctionLibrary_AddTeamArtifactValue) == 0x000008, "Wrong size on MyTeamFunctionLibrary_AddTeamArtifactValue");
static_assert(offsetof(MyTeamFunctionLibrary_AddTeamArtifactValue, UpArtifactValue) == 0x000000, "Member 'MyTeamFunctionLibrary_AddTeamArtifactValue::UpArtifactValue' has a wrong offset!");

// Function DarwinGame.MyTeamFunctionLibrary.GetTeamFlagID
// 0x0004 (0x0004 - 0x0000)
struct MyTeamFunctionLibrary_GetTeamFlagID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTeamFunctionLibrary_GetTeamFlagID) == 0x000004, "Wrong alignment on MyTeamFunctionLibrary_GetTeamFlagID");
static_assert(sizeof(MyTeamFunctionLibrary_GetTeamFlagID) == 0x000004, "Wrong size on MyTeamFunctionLibrary_GetTeamFlagID");
static_assert(offsetof(MyTeamFunctionLibrary_GetTeamFlagID, ReturnValue) == 0x000000, "Member 'MyTeamFunctionLibrary_GetTeamFlagID::ReturnValue' has a wrong offset!");

// Function DarwinGame.MyTeamFunctionLibrary.IsTeamLevelUp
// 0x0001 (0x0001 - 0x0000)
struct MyTeamFunctionLibrary_IsTeamLevelUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTeamFunctionLibrary_IsTeamLevelUp) == 0x000001, "Wrong alignment on MyTeamFunctionLibrary_IsTeamLevelUp");
static_assert(sizeof(MyTeamFunctionLibrary_IsTeamLevelUp) == 0x000001, "Wrong size on MyTeamFunctionLibrary_IsTeamLevelUp");
static_assert(offsetof(MyTeamFunctionLibrary_IsTeamLevelUp, ReturnValue) == 0x000000, "Member 'MyTeamFunctionLibrary_IsTeamLevelUp::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetSocketNameFromESoket
// 0x000C (0x000C - 0x0000)
struct NPCBase_GetSocketNameFromESoket final
{
public:
	ESocket                                       socket;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetSocketNameFromESoket) == 0x000004, "Wrong alignment on NPCBase_GetSocketNameFromESoket");
static_assert(sizeof(NPCBase_GetSocketNameFromESoket) == 0x00000C, "Wrong size on NPCBase_GetSocketNameFromESoket");
static_assert(offsetof(NPCBase_GetSocketNameFromESoket, socket) == 0x000000, "Member 'NPCBase_GetSocketNameFromESoket::socket' has a wrong offset!");
static_assert(offsetof(NPCBase_GetSocketNameFromESoket, ReturnValue) == 0x000004, "Member 'NPCBase_GetSocketNameFromESoket::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.ChangeEmoteList
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_ChangeEmoteList final
{
public:
	ENPCEmotePart                                 PartID;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EmoteID;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_ChangeEmoteList) == 0x000004, "Wrong alignment on NPCBase_ChangeEmoteList");
static_assert(sizeof(NPCBase_ChangeEmoteList) == 0x000008, "Wrong size on NPCBase_ChangeEmoteList");
static_assert(offsetof(NPCBase_ChangeEmoteList, PartID) == 0x000000, "Member 'NPCBase_ChangeEmoteList::PartID' has a wrong offset!");
static_assert(offsetof(NPCBase_ChangeEmoteList, EmoteID) == 0x000004, "Member 'NPCBase_ChangeEmoteList::EmoteID' has a wrong offset!");

// Function DarwinGame.NPCBase.CheckAndPlayPartVoice
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_CheckAndPlayPartVoice final
{
public:
	class FString                                 Src;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_CheckAndPlayPartVoice) == 0x000008, "Wrong alignment on NPCBase_CheckAndPlayPartVoice");
static_assert(sizeof(NPCBase_CheckAndPlayPartVoice) == 0x000010, "Wrong size on NPCBase_CheckAndPlayPartVoice");
static_assert(offsetof(NPCBase_CheckAndPlayPartVoice, Src) == 0x000000, "Member 'NPCBase_CheckAndPlayPartVoice::Src' has a wrong offset!");

// Function DarwinGame.NPCBase.CompLoad
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_CompLoad final
{
public:
	class FName                                   AppearanceID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_CompLoad) == 0x000004, "Wrong alignment on NPCBase_CompLoad");
static_assert(sizeof(NPCBase_CompLoad) == 0x000008, "Wrong size on NPCBase_CompLoad");
static_assert(offsetof(NPCBase_CompLoad, AppearanceID) == 0x000000, "Member 'NPCBase_CompLoad::AppearanceID' has a wrong offset!");

// Function DarwinGame.NPCBase.EndNPCAnimState
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_EndNPCAnimState final
{
public:
	struct FGameplayTag                           State;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_EndNPCAnimState) == 0x000004, "Wrong alignment on NPCBase_EndNPCAnimState");
static_assert(sizeof(NPCBase_EndNPCAnimState) == 0x000008, "Wrong size on NPCBase_EndNPCAnimState");
static_assert(offsetof(NPCBase_EndNPCAnimState, State) == 0x000000, "Member 'NPCBase_EndNPCAnimState::State' has a wrong offset!");

// Function DarwinGame.NPCBase.GetAcceptableRadius
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_GetAcceptableRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetAcceptableRadius) == 0x000004, "Wrong alignment on NPCBase_GetAcceptableRadius");
static_assert(sizeof(NPCBase_GetAcceptableRadius) == 0x000004, "Wrong size on NPCBase_GetAcceptableRadius");
static_assert(offsetof(NPCBase_GetAcceptableRadius, ReturnValue) == 0x000000, "Member 'NPCBase_GetAcceptableRadius::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetAiEventMoveParam
// 0x0058 (0x0058 - 0x0000)
struct NPCBase_GetAiEventMoveParam final
{
public:
	struct FST_NPCEventAiMovePoints               ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetAiEventMoveParam) == 0x000008, "Wrong alignment on NPCBase_GetAiEventMoveParam");
static_assert(sizeof(NPCBase_GetAiEventMoveParam) == 0x000058, "Wrong size on NPCBase_GetAiEventMoveParam");
static_assert(offsetof(NPCBase_GetAiEventMoveParam, ReturnValue) == 0x000000, "Member 'NPCBase_GetAiEventMoveParam::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetAIIsWalkFlag
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetAIIsWalkFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetAIIsWalkFlag) == 0x000001, "Wrong alignment on NPCBase_GetAIIsWalkFlag");
static_assert(sizeof(NPCBase_GetAIIsWalkFlag) == 0x000001, "Wrong size on NPCBase_GetAIIsWalkFlag");
static_assert(offsetof(NPCBase_GetAIIsWalkFlag, ReturnValue) == 0x000000, "Member 'NPCBase_GetAIIsWalkFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetAIPoints
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_GetAIPoints final
{
public:
	TArray<class FName>                           Points;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetAIPoints) == 0x000008, "Wrong alignment on NPCBase_GetAIPoints");
static_assert(sizeof(NPCBase_GetAIPoints) == 0x000010, "Wrong size on NPCBase_GetAIPoints");
static_assert(offsetof(NPCBase_GetAIPoints, Points) == 0x000000, "Member 'NPCBase_GetAIPoints::Points' has a wrong offset!");

// Function DarwinGame.NPCBase.GetCurrentEventID
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_GetCurrentEventID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetCurrentEventID) == 0x000004, "Wrong alignment on NPCBase_GetCurrentEventID");
static_assert(sizeof(NPCBase_GetCurrentEventID) == 0x000008, "Wrong size on NPCBase_GetCurrentEventID");
static_assert(offsetof(NPCBase_GetCurrentEventID, ReturnValue) == 0x000000, "Member 'NPCBase_GetCurrentEventID::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetCurrentLocationAndRotation
// 0x0014 (0x0014 - 0x0000)
struct NPCBase_GetCurrentLocationAndRotation final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Locate;                                            // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetCurrentLocationAndRotation) == 0x000004, "Wrong alignment on NPCBase_GetCurrentLocationAndRotation");
static_assert(sizeof(NPCBase_GetCurrentLocationAndRotation) == 0x000014, "Wrong size on NPCBase_GetCurrentLocationAndRotation");
static_assert(offsetof(NPCBase_GetCurrentLocationAndRotation, Length) == 0x000000, "Member 'NPCBase_GetCurrentLocationAndRotation::Length' has a wrong offset!");
static_assert(offsetof(NPCBase_GetCurrentLocationAndRotation, Loop) == 0x000004, "Member 'NPCBase_GetCurrentLocationAndRotation::Loop' has a wrong offset!");
static_assert(offsetof(NPCBase_GetCurrentLocationAndRotation, Locate) == 0x000008, "Member 'NPCBase_GetCurrentLocationAndRotation::Locate' has a wrong offset!");

// Function DarwinGame.NPCBase.GetEaseTurnRotation
// 0x0028 (0x0028 - 0x0000)
struct NPCBase_GetEaseTurnRotation final
{
public:
	struct FRotator                               Current;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetEaseTurnRotation) == 0x000004, "Wrong alignment on NPCBase_GetEaseTurnRotation");
static_assert(sizeof(NPCBase_GetEaseTurnRotation) == 0x000028, "Wrong size on NPCBase_GetEaseTurnRotation");
static_assert(offsetof(NPCBase_GetEaseTurnRotation, Current) == 0x000000, "Member 'NPCBase_GetEaseTurnRotation::Current' has a wrong offset!");
static_assert(offsetof(NPCBase_GetEaseTurnRotation, Target) == 0x00000C, "Member 'NPCBase_GetEaseTurnRotation::Target' has a wrong offset!");
static_assert(offsetof(NPCBase_GetEaseTurnRotation, Speed) == 0x000018, "Member 'NPCBase_GetEaseTurnRotation::Speed' has a wrong offset!");
static_assert(offsetof(NPCBase_GetEaseTurnRotation, ReturnValue) == 0x00001C, "Member 'NPCBase_GetEaseTurnRotation::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetFukidashiOffset
// 0x000C (0x000C - 0x0000)
struct NPCBase_GetFukidashiOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetFukidashiOffset) == 0x000004, "Wrong alignment on NPCBase_GetFukidashiOffset");
static_assert(sizeof(NPCBase_GetFukidashiOffset) == 0x00000C, "Wrong size on NPCBase_GetFukidashiOffset");
static_assert(offsetof(NPCBase_GetFukidashiOffset, ReturnValue) == 0x000000, "Member 'NPCBase_GetFukidashiOffset::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetIsPlayEvent
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetIsPlayEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetIsPlayEvent) == 0x000001, "Wrong alignment on NPCBase_GetIsPlayEvent");
static_assert(sizeof(NPCBase_GetIsPlayEvent) == 0x000001, "Wrong size on NPCBase_GetIsPlayEvent");
static_assert(offsetof(NPCBase_GetIsPlayEvent, ReturnValue) == 0x000000, "Member 'NPCBase_GetIsPlayEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetIsTalking
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetIsTalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetIsTalking) == 0x000001, "Wrong alignment on NPCBase_GetIsTalking");
static_assert(sizeof(NPCBase_GetIsTalking) == 0x000001, "Wrong size on NPCBase_GetIsTalking");
static_assert(offsetof(NPCBase_GetIsTalking, ReturnValue) == 0x000000, "Member 'NPCBase_GetIsTalking::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetIsTalkingTurn
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetIsTalkingTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetIsTalkingTurn) == 0x000001, "Wrong alignment on NPCBase_GetIsTalkingTurn");
static_assert(sizeof(NPCBase_GetIsTalkingTurn) == 0x000001, "Wrong size on NPCBase_GetIsTalkingTurn");
static_assert(offsetof(NPCBase_GetIsTalkingTurn, ReturnValue) == 0x000000, "Member 'NPCBase_GetIsTalkingTurn::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetLookAtRotationToLocation
// 0x0018 (0x0018 - 0x0000)
struct NPCBase_GetLookAtRotationToLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetLookAtRotationToLocation) == 0x000004, "Wrong alignment on NPCBase_GetLookAtRotationToLocation");
static_assert(sizeof(NPCBase_GetLookAtRotationToLocation) == 0x000018, "Wrong size on NPCBase_GetLookAtRotationToLocation");
static_assert(offsetof(NPCBase_GetLookAtRotationToLocation, Location) == 0x000000, "Member 'NPCBase_GetLookAtRotationToLocation::Location' has a wrong offset!");
static_assert(offsetof(NPCBase_GetLookAtRotationToLocation, ReturnValue) == 0x00000C, "Member 'NPCBase_GetLookAtRotationToLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetLookAtRotationToPlayer
// 0x000C (0x000C - 0x0000)
struct NPCBase_GetLookAtRotationToPlayer final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetLookAtRotationToPlayer) == 0x000004, "Wrong alignment on NPCBase_GetLookAtRotationToPlayer");
static_assert(sizeof(NPCBase_GetLookAtRotationToPlayer) == 0x00000C, "Wrong size on NPCBase_GetLookAtRotationToPlayer");
static_assert(offsetof(NPCBase_GetLookAtRotationToPlayer, ReturnValue) == 0x000000, "Member 'NPCBase_GetLookAtRotationToPlayer::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetMoveAnimation
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetMoveAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetMoveAnimation) == 0x000001, "Wrong alignment on NPCBase_GetMoveAnimation");
static_assert(sizeof(NPCBase_GetMoveAnimation) == 0x000001, "Wrong size on NPCBase_GetMoveAnimation");
static_assert(offsetof(NPCBase_GetMoveAnimation, ReturnValue) == 0x000000, "Member 'NPCBase_GetMoveAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetNPCAiParam
// 0x0038 (0x0038 - 0x0000)
struct NPCBase_GetNPCAiParam final
{
public:
	struct FST_NPCDataAIParam                     ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetNPCAiParam) == 0x000008, "Wrong alignment on NPCBase_GetNPCAiParam");
static_assert(sizeof(NPCBase_GetNPCAiParam) == 0x000038, "Wrong size on NPCBase_GetNPCAiParam");
static_assert(offsetof(NPCBase_GetNPCAiParam, ReturnValue) == 0x000000, "Member 'NPCBase_GetNPCAiParam::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetNPCAiType
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetNPCAiType final
{
public:
	ENPCAiType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetNPCAiType) == 0x000001, "Wrong alignment on NPCBase_GetNPCAiType");
static_assert(sizeof(NPCBase_GetNPCAiType) == 0x000001, "Wrong size on NPCBase_GetNPCAiType");
static_assert(offsetof(NPCBase_GetNPCAiType, ReturnValue) == 0x000000, "Member 'NPCBase_GetNPCAiType::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetOpenFukidashiType
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetOpenFukidashiType final
{
public:
	EFukidashiEnum                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetOpenFukidashiType) == 0x000001, "Wrong alignment on NPCBase_GetOpenFukidashiType");
static_assert(sizeof(NPCBase_GetOpenFukidashiType) == 0x000001, "Wrong size on NPCBase_GetOpenFukidashiType");
static_assert(offsetof(NPCBase_GetOpenFukidashiType, ReturnValue) == 0x000000, "Member 'NPCBase_GetOpenFukidashiType::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetSplineAreaLength
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_GetSplineAreaLength final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetSplineAreaLength) == 0x000008, "Wrong alignment on NPCBase_GetSplineAreaLength");
static_assert(sizeof(NPCBase_GetSplineAreaLength) == 0x000010, "Wrong size on NPCBase_GetSplineAreaLength");
static_assert(offsetof(NPCBase_GetSplineAreaLength, ReturnValue) == 0x000000, "Member 'NPCBase_GetSplineAreaLength::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetSplineComponent) == 0x000008, "Wrong alignment on NPCBase_GetSplineComponent");
static_assert(sizeof(NPCBase_GetSplineComponent) == 0x000008, "Wrong size on NPCBase_GetSplineComponent");
static_assert(offsetof(NPCBase_GetSplineComponent, ReturnValue) == 0x000000, "Member 'NPCBase_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetSplinePosition
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_GetSplinePosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetSplinePosition) == 0x000004, "Wrong alignment on NPCBase_GetSplinePosition");
static_assert(sizeof(NPCBase_GetSplinePosition) == 0x000004, "Wrong size on NPCBase_GetSplinePosition");
static_assert(offsetof(NPCBase_GetSplinePosition, ReturnValue) == 0x000000, "Member 'NPCBase_GetSplinePosition::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetStampOffset
// 0x000C (0x000C - 0x0000)
struct NPCBase_GetStampOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetStampOffset) == 0x000004, "Wrong alignment on NPCBase_GetStampOffset");
static_assert(sizeof(NPCBase_GetStampOffset) == 0x00000C, "Wrong size on NPCBase_GetStampOffset");
static_assert(offsetof(NPCBase_GetStampOffset, ReturnValue) == 0x000000, "Member 'NPCBase_GetStampOffset::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.HitFukidashiCollision
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_HitFukidashiCollision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_HitFukidashiCollision) == 0x000001, "Wrong alignment on NPCBase_HitFukidashiCollision");
static_assert(sizeof(NPCBase_HitFukidashiCollision) == 0x000001, "Wrong size on NPCBase_HitFukidashiCollision");
static_assert(offsetof(NPCBase_HitFukidashiCollision, ReturnValue) == 0x000000, "Member 'NPCBase_HitFukidashiCollision::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsExtraTalk
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsExtraTalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsExtraTalk) == 0x000001, "Wrong alignment on NPCBase_IsExtraTalk");
static_assert(sizeof(NPCBase_IsExtraTalk) == 0x000001, "Wrong size on NPCBase_IsExtraTalk");
static_assert(offsetof(NPCBase_IsExtraTalk, ReturnValue) == 0x000000, "Member 'NPCBase_IsExtraTalk::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsOpenLocalizeStamp
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsOpenLocalizeStamp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsOpenLocalizeStamp) == 0x000001, "Wrong alignment on NPCBase_IsOpenLocalizeStamp");
static_assert(sizeof(NPCBase_IsOpenLocalizeStamp) == 0x000001, "Wrong size on NPCBase_IsOpenLocalizeStamp");
static_assert(offsetof(NPCBase_IsOpenLocalizeStamp, ReturnValue) == 0x000000, "Member 'NPCBase_IsOpenLocalizeStamp::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsOpenNetworkTravelerFukidashi
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsOpenNetworkTravelerFukidashi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsOpenNetworkTravelerFukidashi) == 0x000001, "Wrong alignment on NPCBase_IsOpenNetworkTravelerFukidashi");
static_assert(sizeof(NPCBase_IsOpenNetworkTravelerFukidashi) == 0x000001, "Wrong size on NPCBase_IsOpenNetworkTravelerFukidashi");
static_assert(offsetof(NPCBase_IsOpenNetworkTravelerFukidashi, ReturnValue) == 0x000000, "Member 'NPCBase_IsOpenNetworkTravelerFukidashi::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsOpenNewDispatch
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsOpenNewDispatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsOpenNewDispatch) == 0x000001, "Wrong alignment on NPCBase_IsOpenNewDispatch");
static_assert(sizeof(NPCBase_IsOpenNewDispatch) == 0x000001, "Wrong size on NPCBase_IsOpenNewDispatch");
static_assert(offsetof(NPCBase_IsOpenNewDispatch, ReturnValue) == 0x000000, "Member 'NPCBase_IsOpenNewDispatch::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsOpenNewHubReception
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsOpenNewHubReception final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsOpenNewHubReception) == 0x000001, "Wrong alignment on NPCBase_IsOpenNewHubReception");
static_assert(sizeof(NPCBase_IsOpenNewHubReception) == 0x000001, "Wrong size on NPCBase_IsOpenNewHubReception");
static_assert(offsetof(NPCBase_IsOpenNewHubReception, ReturnValue) == 0x000000, "Member 'NPCBase_IsOpenNewHubReception::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.NPCOpenFukidasiUI
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_NPCOpenFukidasiUI final
{
public:
	bool                                          IconVisibility;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_NPCOpenFukidasiUI) == 0x000001, "Wrong alignment on NPCBase_NPCOpenFukidasiUI");
static_assert(sizeof(NPCBase_NPCOpenFukidasiUI) == 0x000001, "Wrong size on NPCBase_NPCOpenFukidasiUI");
static_assert(offsetof(NPCBase_NPCOpenFukidasiUI, IconVisibility) == 0x000000, "Member 'NPCBase_NPCOpenFukidasiUI::IconVisibility' has a wrong offset!");

// Function DarwinGame.NPCBase.OpenIcon
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_OpenIcon final
{
public:
	EBalloonIconType                              IconType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_OpenIcon) == 0x000004, "Wrong alignment on NPCBase_OpenIcon");
static_assert(sizeof(NPCBase_OpenIcon) == 0x000010, "Wrong size on NPCBase_OpenIcon");
static_assert(offsetof(NPCBase_OpenIcon, IconType) == 0x000000, "Member 'NPCBase_OpenIcon::IconType' has a wrong offset!");
static_assert(offsetof(NPCBase_OpenIcon, Offset) == 0x000004, "Member 'NPCBase_OpenIcon::Offset' has a wrong offset!");

// Function DarwinGame.NPCBase.PlayQuestEvent
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_PlayQuestEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_PlayQuestEvent) == 0x000001, "Wrong alignment on NPCBase_PlayQuestEvent");
static_assert(sizeof(NPCBase_PlayQuestEvent) == 0x000001, "Wrong size on NPCBase_PlayQuestEvent");
static_assert(offsetof(NPCBase_PlayQuestEvent, ReturnValue) == 0x000000, "Member 'NPCBase_PlayQuestEvent::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.ResetNPCEmoteDisplCount
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_ResetNPCEmoteDisplCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_ResetNPCEmoteDisplCount) == 0x000004, "Wrong alignment on NPCBase_ResetNPCEmoteDisplCount");
static_assert(sizeof(NPCBase_ResetNPCEmoteDisplCount) == 0x000004, "Wrong size on NPCBase_ResetNPCEmoteDisplCount");
static_assert(offsetof(NPCBase_ResetNPCEmoteDisplCount, ReturnValue) == 0x000000, "Member 'NPCBase_ResetNPCEmoteDisplCount::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.SetAcceptableRadius
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_SetAcceptableRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetAcceptableRadius) == 0x000004, "Wrong alignment on NPCBase_SetAcceptableRadius");
static_assert(sizeof(NPCBase_SetAcceptableRadius) == 0x000004, "Wrong size on NPCBase_SetAcceptableRadius");
static_assert(offsetof(NPCBase_SetAcceptableRadius, Radius) == 0x000000, "Member 'NPCBase_SetAcceptableRadius::Radius' has a wrong offset!");

// Function DarwinGame.NPCBase.SetAiEventMoveParam
// 0x0058 (0x0058 - 0x0000)
struct NPCBase_SetAiEventMoveParam final
{
public:
	struct FST_NPCEventAiMovePoints               Data;                                              // 0x0000(0x0058)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetAiEventMoveParam) == 0x000008, "Wrong alignment on NPCBase_SetAiEventMoveParam");
static_assert(sizeof(NPCBase_SetAiEventMoveParam) == 0x000058, "Wrong size on NPCBase_SetAiEventMoveParam");
static_assert(offsetof(NPCBase_SetAiEventMoveParam, Data) == 0x000000, "Member 'NPCBase_SetAiEventMoveParam::Data' has a wrong offset!");

// Function DarwinGame.NPCBase.SetAIIsWalkFlag
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetAIIsWalkFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetAIIsWalkFlag) == 0x000001, "Wrong alignment on NPCBase_SetAIIsWalkFlag");
static_assert(sizeof(NPCBase_SetAIIsWalkFlag) == 0x000001, "Wrong size on NPCBase_SetAIIsWalkFlag");
static_assert(offsetof(NPCBase_SetAIIsWalkFlag, Flag) == 0x000000, "Member 'NPCBase_SetAIIsWalkFlag::Flag' has a wrong offset!");

// Function DarwinGame.NPCBase.SetAIWorkIndex
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_SetAIWorkIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetAIWorkIndex) == 0x000004, "Wrong alignment on NPCBase_SetAIWorkIndex");
static_assert(sizeof(NPCBase_SetAIWorkIndex) == 0x000004, "Wrong size on NPCBase_SetAIWorkIndex");
static_assert(offsetof(NPCBase_SetAIWorkIndex, Index_0) == 0x000000, "Member 'NPCBase_SetAIWorkIndex::Index_0' has a wrong offset!");

// Function DarwinGame.NPCBase.SetAIWorkTargetLocation
// 0x000C (0x000C - 0x0000)
struct NPCBase_SetAIWorkTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetAIWorkTargetLocation) == 0x000004, "Wrong alignment on NPCBase_SetAIWorkTargetLocation");
static_assert(sizeof(NPCBase_SetAIWorkTargetLocation) == 0x00000C, "Wrong size on NPCBase_SetAIWorkTargetLocation");
static_assert(offsetof(NPCBase_SetAIWorkTargetLocation, Location) == 0x000000, "Member 'NPCBase_SetAIWorkTargetLocation::Location' has a wrong offset!");

// Function DarwinGame.NPCBase.SetAIWorkTargetRotator
// 0x000C (0x000C - 0x0000)
struct NPCBase_SetAIWorkTargetRotator final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetAIWorkTargetRotator) == 0x000004, "Wrong alignment on NPCBase_SetAIWorkTargetRotator");
static_assert(sizeof(NPCBase_SetAIWorkTargetRotator) == 0x00000C, "Wrong size on NPCBase_SetAIWorkTargetRotator");
static_assert(offsetof(NPCBase_SetAIWorkTargetRotator, Rotation) == 0x000000, "Member 'NPCBase_SetAIWorkTargetRotator::Rotation' has a wrong offset!");

// Function DarwinGame.NPCBase.SetCapsuleVerocity
// 0x000C (0x000C - 0x0000)
struct NPCBase_SetCapsuleVerocity final
{
public:
	struct FVector                                Verocity;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetCapsuleVerocity) == 0x000004, "Wrong alignment on NPCBase_SetCapsuleVerocity");
static_assert(sizeof(NPCBase_SetCapsuleVerocity) == 0x00000C, "Wrong size on NPCBase_SetCapsuleVerocity");
static_assert(offsetof(NPCBase_SetCapsuleVerocity, Verocity) == 0x000000, "Member 'NPCBase_SetCapsuleVerocity::Verocity' has a wrong offset!");

// Function DarwinGame.NPCBase.SetCustomEquipmentsState
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_SetCustomEquipmentsState final
{
public:
	class FName                                   NPCListID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetCustomEquipmentsState) == 0x000004, "Wrong alignment on NPCBase_SetCustomEquipmentsState");
static_assert(sizeof(NPCBase_SetCustomEquipmentsState) == 0x000008, "Wrong size on NPCBase_SetCustomEquipmentsState");
static_assert(offsetof(NPCBase_SetCustomEquipmentsState, NPCListID) == 0x000000, "Member 'NPCBase_SetCustomEquipmentsState::NPCListID' has a wrong offset!");

// Function DarwinGame.NPCBase.SetFukidashiDrawCollisonRadious
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_SetFukidashiDrawCollisonRadious final
{
public:
	float                                         Radious;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetFukidashiDrawCollisonRadious) == 0x000004, "Wrong alignment on NPCBase_SetFukidashiDrawCollisonRadious");
static_assert(sizeof(NPCBase_SetFukidashiDrawCollisonRadious) == 0x000004, "Wrong size on NPCBase_SetFukidashiDrawCollisonRadious");
static_assert(offsetof(NPCBase_SetFukidashiDrawCollisonRadious, Radious) == 0x000000, "Member 'NPCBase_SetFukidashiDrawCollisonRadious::Radious' has a wrong offset!");

// Function DarwinGame.NPCBase.SetIsLookAtBodyPlaying
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetIsLookAtBodyPlaying final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetIsLookAtBodyPlaying) == 0x000001, "Wrong alignment on NPCBase_SetIsLookAtBodyPlaying");
static_assert(sizeof(NPCBase_SetIsLookAtBodyPlaying) == 0x000001, "Wrong size on NPCBase_SetIsLookAtBodyPlaying");
static_assert(offsetof(NPCBase_SetIsLookAtBodyPlaying, Flag) == 0x000000, "Member 'NPCBase_SetIsLookAtBodyPlaying::Flag' has a wrong offset!");

// Function DarwinGame.NPCBase.SetMoveAnimation
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetMoveAnimation final
{
public:
	bool                                          Animation;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetMoveAnimation) == 0x000001, "Wrong alignment on NPCBase_SetMoveAnimation");
static_assert(sizeof(NPCBase_SetMoveAnimation) == 0x000001, "Wrong size on NPCBase_SetMoveAnimation");
static_assert(offsetof(NPCBase_SetMoveAnimation, Animation) == 0x000000, "Member 'NPCBase_SetMoveAnimation::Animation' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCAiType
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetNPCAiType final
{
public:
	ENPCAiType                                    AIType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetNPCAiType) == 0x000001, "Wrong alignment on NPCBase_SetNPCAiType");
static_assert(sizeof(NPCBase_SetNPCAiType) == 0x000001, "Wrong size on NPCBase_SetNPCAiType");
static_assert(offsetof(NPCBase_SetNPCAiType, AIType) == 0x000000, "Member 'NPCBase_SetNPCAiType::AIType' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCCapsule
// 0x00D8 (0x00D8 - 0x0000)
struct NPCBase_SetNPCCapsule final
{
public:
	struct FST_NPCAppearance                      NPCAppearanceData;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      MoveCapsuleComponent;                              // 0x00C8(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      TalkEndCapsuleComponent;                           // 0x00D0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetNPCCapsule) == 0x000008, "Wrong alignment on NPCBase_SetNPCCapsule");
static_assert(sizeof(NPCBase_SetNPCCapsule) == 0x0000D8, "Wrong size on NPCBase_SetNPCCapsule");
static_assert(offsetof(NPCBase_SetNPCCapsule, NPCAppearanceData) == 0x000000, "Member 'NPCBase_SetNPCCapsule::NPCAppearanceData' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCCapsule, MoveCapsuleComponent) == 0x0000C8, "Member 'NPCBase_SetNPCCapsule::MoveCapsuleComponent' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCCapsule, TalkEndCapsuleComponent) == 0x0000D0, "Member 'NPCBase_SetNPCCapsule::TalkEndCapsuleComponent' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCCapsuleDefaultSize
// 0x00D8 (0x00D8 - 0x0000)
struct NPCBase_SetNPCCapsuleDefaultSize final
{
public:
	struct FST_NPCAppearance                      NPCAppearanceData;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      MoveCapsuleComponent;                              // 0x00C8(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      TalkEndCapsuleComponent;                           // 0x00D0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetNPCCapsuleDefaultSize) == 0x000008, "Wrong alignment on NPCBase_SetNPCCapsuleDefaultSize");
static_assert(sizeof(NPCBase_SetNPCCapsuleDefaultSize) == 0x0000D8, "Wrong size on NPCBase_SetNPCCapsuleDefaultSize");
static_assert(offsetof(NPCBase_SetNPCCapsuleDefaultSize, NPCAppearanceData) == 0x000000, "Member 'NPCBase_SetNPCCapsuleDefaultSize::NPCAppearanceData' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCCapsuleDefaultSize, MoveCapsuleComponent) == 0x0000C8, "Member 'NPCBase_SetNPCCapsuleDefaultSize::MoveCapsuleComponent' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCCapsuleDefaultSize, TalkEndCapsuleComponent) == 0x0000D0, "Member 'NPCBase_SetNPCCapsuleDefaultSize::TalkEndCapsuleComponent' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCData
// 0x000C (0x000C - 0x0000)
struct NPCBase_SetNPCData final
{
public:
	class FName                                   ChangeNPCID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwrite;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCBase_SetNPCData) == 0x000004, "Wrong alignment on NPCBase_SetNPCData");
static_assert(sizeof(NPCBase_SetNPCData) == 0x00000C, "Wrong size on NPCBase_SetNPCData");
static_assert(offsetof(NPCBase_SetNPCData, ChangeNPCID) == 0x000000, "Member 'NPCBase_SetNPCData::ChangeNPCID' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCData, IsOverwrite) == 0x000008, "Member 'NPCBase_SetNPCData::IsOverwrite' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCData, ReturnValue) == 0x000009, "Member 'NPCBase_SetNPCData::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCEmoteSetting
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_SetNPCEmoteSetting final
{
public:
	class FName                                   NPCAppearanceID;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetNPCEmoteSetting) == 0x000004, "Wrong alignment on NPCBase_SetNPCEmoteSetting");
static_assert(sizeof(NPCBase_SetNPCEmoteSetting) == 0x000008, "Wrong size on NPCBase_SetNPCEmoteSetting");
static_assert(offsetof(NPCBase_SetNPCEmoteSetting, NPCAppearanceID) == 0x000000, "Member 'NPCBase_SetNPCEmoteSetting::NPCAppearanceID' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCMaterial
// 0x00C8 (0x00C8 - 0x0000)
struct NPCBase_SetNPCMaterial final
{
public:
	struct FST_NPCAppearance                      NPCAppearanceData;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetNPCMaterial) == 0x000008, "Wrong alignment on NPCBase_SetNPCMaterial");
static_assert(sizeof(NPCBase_SetNPCMaterial) == 0x0000C8, "Wrong size on NPCBase_SetNPCMaterial");
static_assert(offsetof(NPCBase_SetNPCMaterial, NPCAppearanceData) == 0x000000, "Member 'NPCBase_SetNPCMaterial::NPCAppearanceData' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCRelativeLocation
// 0x00D8 (0x00D8 - 0x0000)
struct NPCBase_SetNPCRelativeLocation final
{
public:
	struct FST_NPCAppearance                      NPCAppearanceData;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ENPCAiType                                    NPCAiType;                                         // 0x00C8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CapsuleOffset;                                     // 0x00CC(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetNPCRelativeLocation) == 0x000008, "Wrong alignment on NPCBase_SetNPCRelativeLocation");
static_assert(sizeof(NPCBase_SetNPCRelativeLocation) == 0x0000D8, "Wrong size on NPCBase_SetNPCRelativeLocation");
static_assert(offsetof(NPCBase_SetNPCRelativeLocation, NPCAppearanceData) == 0x000000, "Member 'NPCBase_SetNPCRelativeLocation::NPCAppearanceData' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCRelativeLocation, NPCAiType) == 0x0000C8, "Member 'NPCBase_SetNPCRelativeLocation::NPCAiType' has a wrong offset!");
static_assert(offsetof(NPCBase_SetNPCRelativeLocation, CapsuleOffset) == 0x0000CC, "Member 'NPCBase_SetNPCRelativeLocation::CapsuleOffset' has a wrong offset!");

// Function DarwinGame.NPCBase.SetNPCSkeletalMesh
// 0x00C8 (0x00C8 - 0x0000)
struct NPCBase_SetNPCSkeletalMesh final
{
public:
	struct FST_NPCAppearance                      NPCAppearanceData;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetNPCSkeletalMesh) == 0x000008, "Wrong alignment on NPCBase_SetNPCSkeletalMesh");
static_assert(sizeof(NPCBase_SetNPCSkeletalMesh) == 0x0000C8, "Wrong size on NPCBase_SetNPCSkeletalMesh");
static_assert(offsetof(NPCBase_SetNPCSkeletalMesh, NPCAppearanceData) == 0x000000, "Member 'NPCBase_SetNPCSkeletalMesh::NPCAppearanceData' has a wrong offset!");

// Function DarwinGame.NPCBase.SetOriginRotat
// 0x000C (0x000C - 0x0000)
struct NPCBase_SetOriginRotat final
{
public:
	struct FRotator                               rot;                                               // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetOriginRotat) == 0x000004, "Wrong alignment on NPCBase_SetOriginRotat");
static_assert(sizeof(NPCBase_SetOriginRotat) == 0x00000C, "Wrong size on NPCBase_SetOriginRotat");
static_assert(offsetof(NPCBase_SetOriginRotat, rot) == 0x000000, "Member 'NPCBase_SetOriginRotat::rot' has a wrong offset!");

// Function DarwinGame.NPCBase.SetSearchTurn
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetSearchTurn final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetSearchTurn) == 0x000001, "Wrong alignment on NPCBase_SetSearchTurn");
static_assert(sizeof(NPCBase_SetSearchTurn) == 0x000001, "Wrong size on NPCBase_SetSearchTurn");
static_assert(offsetof(NPCBase_SetSearchTurn, Flag) == 0x000000, "Member 'NPCBase_SetSearchTurn::Flag' has a wrong offset!");

// Function DarwinGame.NPCBase.SetSplinePosition
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_SetSplinePosition final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetSplinePosition) == 0x000004, "Wrong alignment on NPCBase_SetSplinePosition");
static_assert(sizeof(NPCBase_SetSplinePosition) == 0x000004, "Wrong size on NPCBase_SetSplinePosition");
static_assert(offsetof(NPCBase_SetSplinePosition, Length) == 0x000000, "Member 'NPCBase_SetSplinePosition::Length' has a wrong offset!");

// Function DarwinGame.NPCBase.SetTalkEndTurnBack
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetTalkEndTurnBack final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetTalkEndTurnBack) == 0x000001, "Wrong alignment on NPCBase_SetTalkEndTurnBack");
static_assert(sizeof(NPCBase_SetTalkEndTurnBack) == 0x000001, "Wrong size on NPCBase_SetTalkEndTurnBack");
static_assert(offsetof(NPCBase_SetTalkEndTurnBack, Flag) == 0x000000, "Member 'NPCBase_SetTalkEndTurnBack::Flag' has a wrong offset!");

// Function DarwinGame.NPCBase.SetTalking
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetTalking final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetTalking) == 0x000001, "Wrong alignment on NPCBase_SetTalking");
static_assert(sizeof(NPCBase_SetTalking) == 0x000001, "Wrong size on NPCBase_SetTalking");
static_assert(offsetof(NPCBase_SetTalking, flg) == 0x000000, "Member 'NPCBase_SetTalking::flg' has a wrong offset!");

// Function DarwinGame.NPCBase.SetTalkingTurn
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetTalkingTurn final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetTalkingTurn) == 0x000001, "Wrong alignment on NPCBase_SetTalkingTurn");
static_assert(sizeof(NPCBase_SetTalkingTurn) == 0x000001, "Wrong size on NPCBase_SetTalkingTurn");
static_assert(offsetof(NPCBase_SetTalkingTurn, flg) == 0x000000, "Member 'NPCBase_SetTalkingTurn::flg' has a wrong offset!");

// Function DarwinGame.NPCBase.SetTalkLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetTalkLookAtEnable final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetTalkLookAtEnable) == 0x000001, "Wrong alignment on NPCBase_SetTalkLookAtEnable");
static_assert(sizeof(NPCBase_SetTalkLookAtEnable) == 0x000001, "Wrong size on NPCBase_SetTalkLookAtEnable");
static_assert(offsetof(NPCBase_SetTalkLookAtEnable, Flag) == 0x000000, "Member 'NPCBase_SetTalkLookAtEnable::Flag' has a wrong offset!");

// Function DarwinGame.NPCBase.SetTalkStartTurn
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_SetTalkStartTurn final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SetTalkStartTurn) == 0x000001, "Wrong alignment on NPCBase_SetTalkStartTurn");
static_assert(sizeof(NPCBase_SetTalkStartTurn) == 0x000001, "Wrong size on NPCBase_SetTalkStartTurn");
static_assert(offsetof(NPCBase_SetTalkStartTurn, Flag) == 0x000000, "Member 'NPCBase_SetTalkStartTurn::Flag' has a wrong offset!");

// Function DarwinGame.NPCBase.SoundRequest
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_SoundRequest final
{
public:
	EAtomCueSheetCategory                         SoundType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SoundNo;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_SoundRequest) == 0x000004, "Wrong alignment on NPCBase_SoundRequest");
static_assert(sizeof(NPCBase_SoundRequest) == 0x000008, "Wrong size on NPCBase_SoundRequest");
static_assert(offsetof(NPCBase_SoundRequest, SoundType) == 0x000000, "Member 'NPCBase_SoundRequest::SoundType' has a wrong offset!");
static_assert(offsetof(NPCBase_SoundRequest, SoundNo) == 0x000004, "Member 'NPCBase_SoundRequest::SoundNo' has a wrong offset!");

// Function DarwinGame.NPCBase.StartLookAt
// 0x000C (0x000C - 0x0000)
struct NPCBase_StartLookAt final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_StartLookAt) == 0x000004, "Wrong alignment on NPCBase_StartLookAt");
static_assert(sizeof(NPCBase_StartLookAt) == 0x00000C, "Wrong size on NPCBase_StartLookAt");
static_assert(offsetof(NPCBase_StartLookAt, TargetLocation) == 0x000000, "Member 'NPCBase_StartLookAt::TargetLocation' has a wrong offset!");

// Function DarwinGame.NPCBase.StartNPCAnimState
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_StartNPCAnimState final
{
public:
	struct FGameplayTag                           AnimState;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           State;                                             // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_StartNPCAnimState) == 0x000004, "Wrong alignment on NPCBase_StartNPCAnimState");
static_assert(sizeof(NPCBase_StartNPCAnimState) == 0x000010, "Wrong size on NPCBase_StartNPCAnimState");
static_assert(offsetof(NPCBase_StartNPCAnimState, AnimState) == 0x000000, "Member 'NPCBase_StartNPCAnimState::AnimState' has a wrong offset!");
static_assert(offsetof(NPCBase_StartNPCAnimState, State) == 0x000008, "Member 'NPCBase_StartNPCAnimState::State' has a wrong offset!");

// Function DarwinGame.NPCBase.UpdateBrancheEventID
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_UpdateBrancheEventID final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_UpdateBrancheEventID) == 0x000001, "Wrong alignment on NPCBase_UpdateBrancheEventID");
static_assert(sizeof(NPCBase_UpdateBrancheEventID) == 0x000001, "Wrong size on NPCBase_UpdateBrancheEventID");
static_assert(offsetof(NPCBase_UpdateBrancheEventID, ReturnValue) == 0x000000, "Member 'NPCBase_UpdateBrancheEventID::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.UpdateFukidashiList
// 0x0010 (0x0010 - 0x0000)
struct NPCBase_UpdateFukidashiList final
{
public:
	bool                                          IsUpdate;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextFukidashiTextID;                               // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCBase_UpdateFukidashiList) == 0x000004, "Wrong alignment on NPCBase_UpdateFukidashiList");
static_assert(sizeof(NPCBase_UpdateFukidashiList) == 0x000010, "Wrong size on NPCBase_UpdateFukidashiList");
static_assert(offsetof(NPCBase_UpdateFukidashiList, IsUpdate) == 0x000000, "Member 'NPCBase_UpdateFukidashiList::IsUpdate' has a wrong offset!");
static_assert(offsetof(NPCBase_UpdateFukidashiList, NextFukidashiTextID) == 0x000004, "Member 'NPCBase_UpdateFukidashiList::NextFukidashiTextID' has a wrong offset!");
static_assert(offsetof(NPCBase_UpdateFukidashiList, IsVisible) == 0x00000C, "Member 'NPCBase_UpdateFukidashiList::IsVisible' has a wrong offset!");

// Function DarwinGame.NPCBase.UpdateNavigateAiState
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_UpdateNavigateAiState final
{
public:
	bool                                          IsUpdateIndex;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_UpdateNavigateAiState) == 0x000001, "Wrong alignment on NPCBase_UpdateNavigateAiState");
static_assert(sizeof(NPCBase_UpdateNavigateAiState) == 0x000001, "Wrong size on NPCBase_UpdateNavigateAiState");
static_assert(offsetof(NPCBase_UpdateNavigateAiState, IsUpdateIndex) == 0x000000, "Member 'NPCBase_UpdateNavigateAiState::IsUpdateIndex' has a wrong offset!");

// Function DarwinGame.NPCBase.GetAIWorkIndex
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_GetAIWorkIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetAIWorkIndex) == 0x000004, "Wrong alignment on NPCBase_GetAIWorkIndex");
static_assert(sizeof(NPCBase_GetAIWorkIndex) == 0x000004, "Wrong size on NPCBase_GetAIWorkIndex");
static_assert(offsetof(NPCBase_GetAIWorkIndex, ReturnValue) == 0x000000, "Member 'NPCBase_GetAIWorkIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetAIWorkTargetLocation
// 0x000C (0x000C - 0x0000)
struct NPCBase_GetAIWorkTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetAIWorkTargetLocation) == 0x000004, "Wrong alignment on NPCBase_GetAIWorkTargetLocation");
static_assert(sizeof(NPCBase_GetAIWorkTargetLocation) == 0x00000C, "Wrong size on NPCBase_GetAIWorkTargetLocation");
static_assert(offsetof(NPCBase_GetAIWorkTargetLocation, ReturnValue) == 0x000000, "Member 'NPCBase_GetAIWorkTargetLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetAIWorkTargetRotator
// 0x000C (0x000C - 0x0000)
struct NPCBase_GetAIWorkTargetRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetAIWorkTargetRotator) == 0x000004, "Wrong alignment on NPCBase_GetAIWorkTargetRotator");
static_assert(sizeof(NPCBase_GetAIWorkTargetRotator) == 0x00000C, "Wrong size on NPCBase_GetAIWorkTargetRotator");
static_assert(offsetof(NPCBase_GetAIWorkTargetRotator, ReturnValue) == 0x000000, "Member 'NPCBase_GetAIWorkTargetRotator::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetCurrentEmoteType
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetCurrentEmoteType final
{
public:
	EEmoteType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetCurrentEmoteType) == 0x000001, "Wrong alignment on NPCBase_GetCurrentEmoteType");
static_assert(sizeof(NPCBase_GetCurrentEmoteType) == 0x000001, "Wrong size on NPCBase_GetCurrentEmoteType");
static_assert(offsetof(NPCBase_GetCurrentEmoteType, ReturnValue) == 0x000000, "Member 'NPCBase_GetCurrentEmoteType::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetIdleEmoteListNum
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_GetIdleEmoteListNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetIdleEmoteListNum) == 0x000004, "Wrong alignment on NPCBase_GetIdleEmoteListNum");
static_assert(sizeof(NPCBase_GetIdleEmoteListNum) == 0x000004, "Wrong size on NPCBase_GetIdleEmoteListNum");
static_assert(offsetof(NPCBase_GetIdleEmoteListNum, ReturnValue) == 0x000000, "Member 'NPCBase_GetIdleEmoteListNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetLookAtBodyParams
// 0x0028 (0x0028 - 0x0000)
struct NPCBase_GetLookAtBodyParams final
{
public:
	struct FST_EventNPCLookAt                     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetLookAtBodyParams) == 0x000004, "Wrong alignment on NPCBase_GetLookAtBodyParams");
static_assert(sizeof(NPCBase_GetLookAtBodyParams) == 0x000028, "Wrong size on NPCBase_GetLookAtBodyParams");
static_assert(offsetof(NPCBase_GetLookAtBodyParams, ReturnValue) == 0x000000, "Member 'NPCBase_GetLookAtBodyParams::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetLookAtParams
// 0x0028 (0x0028 - 0x0000)
struct NPCBase_GetLookAtParams final
{
public:
	struct FST_EventNPCLookAt                     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetLookAtParams) == 0x000004, "Wrong alignment on NPCBase_GetLookAtParams");
static_assert(sizeof(NPCBase_GetLookAtParams) == 0x000028, "Wrong size on NPCBase_GetLookAtParams");
static_assert(offsetof(NPCBase_GetLookAtParams, ReturnValue) == 0x000000, "Member 'NPCBase_GetLookAtParams::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetNPCID
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_GetNPCID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetNPCID) == 0x000004, "Wrong alignment on NPCBase_GetNPCID");
static_assert(sizeof(NPCBase_GetNPCID) == 0x000008, "Wrong size on NPCBase_GetNPCID");
static_assert(offsetof(NPCBase_GetNPCID, ReturnValue) == 0x000000, "Member 'NPCBase_GetNPCID::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetNPCListID
// 0x0008 (0x0008 - 0x0000)
struct NPCBase_GetNPCListID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetNPCListID) == 0x000004, "Wrong alignment on NPCBase_GetNPCListID");
static_assert(sizeof(NPCBase_GetNPCListID) == 0x000008, "Wrong size on NPCBase_GetNPCListID");
static_assert(offsetof(NPCBase_GetNPCListID, ReturnValue) == 0x000000, "Member 'NPCBase_GetNPCListID::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetOriginRotat
// 0x000C (0x000C - 0x0000)
struct NPCBase_GetOriginRotat final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetOriginRotat) == 0x000004, "Wrong alignment on NPCBase_GetOriginRotat");
static_assert(sizeof(NPCBase_GetOriginRotat) == 0x00000C, "Wrong size on NPCBase_GetOriginRotat");
static_assert(offsetof(NPCBase_GetOriginRotat, ReturnValue) == 0x000000, "Member 'NPCBase_GetOriginRotat::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetQuestStateNPC
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetQuestStateNPC final
{
public:
	EQuestState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetQuestStateNPC) == 0x000001, "Wrong alignment on NPCBase_GetQuestStateNPC");
static_assert(sizeof(NPCBase_GetQuestStateNPC) == 0x000001, "Wrong size on NPCBase_GetQuestStateNPC");
static_assert(offsetof(NPCBase_GetQuestStateNPC, ReturnValue) == 0x000000, "Member 'NPCBase_GetQuestStateNPC::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetSearchTurn
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetSearchTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetSearchTurn) == 0x000001, "Wrong alignment on NPCBase_GetSearchTurn");
static_assert(sizeof(NPCBase_GetSearchTurn) == 0x000001, "Wrong size on NPCBase_GetSearchTurn");
static_assert(offsetof(NPCBase_GetSearchTurn, ReturnValue) == 0x000000, "Member 'NPCBase_GetSearchTurn::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetTalkEndTurnBack
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetTalkEndTurnBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetTalkEndTurnBack) == 0x000001, "Wrong alignment on NPCBase_GetTalkEndTurnBack");
static_assert(sizeof(NPCBase_GetTalkEndTurnBack) == 0x000001, "Wrong size on NPCBase_GetTalkEndTurnBack");
static_assert(offsetof(NPCBase_GetTalkEndTurnBack, ReturnValue) == 0x000000, "Member 'NPCBase_GetTalkEndTurnBack::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetTalkLookAtEnable
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetTalkLookAtEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetTalkLookAtEnable) == 0x000001, "Wrong alignment on NPCBase_GetTalkLookAtEnable");
static_assert(sizeof(NPCBase_GetTalkLookAtEnable) == 0x000001, "Wrong size on NPCBase_GetTalkLookAtEnable");
static_assert(offsetof(NPCBase_GetTalkLookAtEnable, ReturnValue) == 0x000000, "Member 'NPCBase_GetTalkLookAtEnable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetTalkNum
// 0x0004 (0x0004 - 0x0000)
struct NPCBase_GetTalkNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetTalkNum) == 0x000004, "Wrong alignment on NPCBase_GetTalkNum");
static_assert(sizeof(NPCBase_GetTalkNum) == 0x000004, "Wrong size on NPCBase_GetTalkNum");
static_assert(offsetof(NPCBase_GetTalkNum, ReturnValue) == 0x000000, "Member 'NPCBase_GetTalkNum::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.GetTalkStartTurn
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_GetTalkStartTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_GetTalkStartTurn) == 0x000001, "Wrong alignment on NPCBase_GetTalkStartTurn");
static_assert(sizeof(NPCBase_GetTalkStartTurn) == 0x000001, "Wrong size on NPCBase_GetTalkStartTurn");
static_assert(offsetof(NPCBase_GetTalkStartTurn, ReturnValue) == 0x000000, "Member 'NPCBase_GetTalkStartTurn::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.HasAIWorkIndex
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_HasAIWorkIndex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_HasAIWorkIndex) == 0x000001, "Wrong alignment on NPCBase_HasAIWorkIndex");
static_assert(sizeof(NPCBase_HasAIWorkIndex) == 0x000001, "Wrong size on NPCBase_HasAIWorkIndex");
static_assert(offsetof(NPCBase_HasAIWorkIndex, ReturnValue) == 0x000000, "Member 'NPCBase_HasAIWorkIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.HasQuest
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_HasQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_HasQuest) == 0x000001, "Wrong alignment on NPCBase_HasQuest");
static_assert(sizeof(NPCBase_HasQuest) == 0x000001, "Wrong size on NPCBase_HasQuest");
static_assert(offsetof(NPCBase_HasQuest, ReturnValue) == 0x000000, "Member 'NPCBase_HasQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsDebugFlag
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsDebugFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsDebugFlag) == 0x000001, "Wrong alignment on NPCBase_IsDebugFlag");
static_assert(sizeof(NPCBase_IsDebugFlag) == 0x000001, "Wrong size on NPCBase_IsDebugFlag");
static_assert(offsetof(NPCBase_IsDebugFlag, ReturnValue) == 0x000000, "Member 'NPCBase_IsDebugFlag::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsOverWriteSpawn
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsOverWriteSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsOverWriteSpawn) == 0x000001, "Wrong alignment on NPCBase_IsOverWriteSpawn");
static_assert(sizeof(NPCBase_IsOverWriteSpawn) == 0x000001, "Wrong size on NPCBase_IsOverWriteSpawn");
static_assert(offsetof(NPCBase_IsOverWriteSpawn, ReturnValue) == 0x000000, "Member 'NPCBase_IsOverWriteSpawn::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsQuestClearAll
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsQuestClearAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsQuestClearAll) == 0x000001, "Wrong alignment on NPCBase_IsQuestClearAll");
static_assert(sizeof(NPCBase_IsQuestClearAll) == 0x000001, "Wrong size on NPCBase_IsQuestClearAll");
static_assert(offsetof(NPCBase_IsQuestClearAll, ReturnValue) == 0x000000, "Member 'NPCBase_IsQuestClearAll::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsValidNPCData
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsValidNPCData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsValidNPCData) == 0x000001, "Wrong alignment on NPCBase_IsValidNPCData");
static_assert(sizeof(NPCBase_IsValidNPCData) == 0x000001, "Wrong size on NPCBase_IsValidNPCData");
static_assert(offsetof(NPCBase_IsValidNPCData, ReturnValue) == 0x000000, "Member 'NPCBase_IsValidNPCData::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCBase.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct NPCBase_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCBase_IsVisible) == 0x000001, "Wrong alignment on NPCBase_IsVisible");
static_assert(sizeof(NPCBase_IsVisible) == 0x000001, "Wrong size on NPCBase_IsVisible");
static_assert(offsetof(NPCBase_IsVisible, ReturnValue) == 0x000000, "Member 'NPCBase_IsVisible::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.AddToList
// 0x0010 (0x0010 - 0x0000)
struct NPCManager_AddToList final
{
public:
	class ANPCBase*                               NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_AddToList) == 0x000008, "Wrong alignment on NPCManager_AddToList");
static_assert(sizeof(NPCManager_AddToList) == 0x000010, "Wrong size on NPCManager_AddToList");
static_assert(offsetof(NPCManager_AddToList, NPC) == 0x000000, "Member 'NPCManager_AddToList::NPC' has a wrong offset!");
static_assert(offsetof(NPCManager_AddToList, ReturnValue) == 0x000008, "Member 'NPCManager_AddToList::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.ChangeNPCData
// 0x000C (0x000C - 0x0000)
struct NPCManager_ChangeNPCData final
{
public:
	class FName                                   NextNPCID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_ChangeNPCData) == 0x000004, "Wrong alignment on NPCManager_ChangeNPCData");
static_assert(sizeof(NPCManager_ChangeNPCData) == 0x00000C, "Wrong size on NPCManager_ChangeNPCData");
static_assert(offsetof(NPCManager_ChangeNPCData, NextNPCID) == 0x000000, "Member 'NPCManager_ChangeNPCData::NextNPCID' has a wrong offset!");
static_assert(offsetof(NPCManager_ChangeNPCData, ReturnValue) == 0x000008, "Member 'NPCManager_ChangeNPCData::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetAllActiveNPCLocations
// 0x0010 (0x0010 - 0x0000)
struct NPCManager_GetAllActiveNPCLocations final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetAllActiveNPCLocations) == 0x000008, "Wrong alignment on NPCManager_GetAllActiveNPCLocations");
static_assert(sizeof(NPCManager_GetAllActiveNPCLocations) == 0x000010, "Wrong size on NPCManager_GetAllActiveNPCLocations");
static_assert(offsetof(NPCManager_GetAllActiveNPCLocations, ReturnValue) == 0x000000, "Member 'NPCManager_GetAllActiveNPCLocations::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetAllNPCActor
// 0x0010 (0x0010 - 0x0000)
struct NPCManager_GetAllNPCActor final
{
public:
	TArray<class ANPCBase*>                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetAllNPCActor) == 0x000008, "Wrong alignment on NPCManager_GetAllNPCActor");
static_assert(sizeof(NPCManager_GetAllNPCActor) == 0x000010, "Wrong size on NPCManager_GetAllNPCActor");
static_assert(offsetof(NPCManager_GetAllNPCActor, ReturnValue) == 0x000000, "Member 'NPCManager_GetAllNPCActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCAppearanceData
// 0x00D8 (0x00D8 - 0x0000)
struct NPCManager_GetNPCAppearanceData final
{
public:
	class FName                                   NPCAppearanceID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_NPCAppearance                      DataInfo;                                          // 0x0010(0x00C8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCAppearanceData) == 0x000008, "Wrong alignment on NPCManager_GetNPCAppearanceData");
static_assert(sizeof(NPCManager_GetNPCAppearanceData) == 0x0000D8, "Wrong size on NPCManager_GetNPCAppearanceData");
static_assert(offsetof(NPCManager_GetNPCAppearanceData, NPCAppearanceID) == 0x000000, "Member 'NPCManager_GetNPCAppearanceData::NPCAppearanceID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCAppearanceData, Result) == 0x000008, "Member 'NPCManager_GetNPCAppearanceData::Result' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCAppearanceData, DataInfo) == 0x000010, "Member 'NPCManager_GetNPCAppearanceData::DataInfo' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCDataFromTable
// 0x01B0 (0x01B0 - 0x0000)
struct NPCManager_GetNPCDataFromTable final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_NPCData                            NPCData;                                           // 0x0010(0x01A0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCDataFromTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCDataFromTable");
static_assert(sizeof(NPCManager_GetNPCDataFromTable) == 0x0001B0, "Wrong size on NPCManager_GetNPCDataFromTable");
static_assert(offsetof(NPCManager_GetNPCDataFromTable, NpcID) == 0x000000, "Member 'NPCManager_GetNPCDataFromTable::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCDataFromTable, Result) == 0x000008, "Member 'NPCManager_GetNPCDataFromTable::Result' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCDataFromTable, NPCData) == 0x000010, "Member 'NPCManager_GetNPCDataFromTable::NPCData' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCLocations
// 0x0020 (0x0020 - 0x0000)
struct NPCManager_GetNPCLocations final
{
public:
	TArray<class FName>                           NPCIDs;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCLocations) == 0x000008, "Wrong alignment on NPCManager_GetNPCLocations");
static_assert(sizeof(NPCManager_GetNPCLocations) == 0x000020, "Wrong size on NPCManager_GetNPCLocations");
static_assert(offsetof(NPCManager_GetNPCLocations, NPCIDs) == 0x000000, "Member 'NPCManager_GetNPCLocations::NPCIDs' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCLocations, ReturnValue) == 0x000010, "Member 'NPCManager_GetNPCLocations::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCMovePointData
// 0x0028 (0x0028 - 0x0000)
struct NPCManager_GetNPCMovePointData final
{
public:
	class FName                                   PointID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_NPCMovePoints                      DataInfo;                                          // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCMovePointData) == 0x000008, "Wrong alignment on NPCManager_GetNPCMovePointData");
static_assert(sizeof(NPCManager_GetNPCMovePointData) == 0x000028, "Wrong size on NPCManager_GetNPCMovePointData");
static_assert(offsetof(NPCManager_GetNPCMovePointData, PointID) == 0x000000, "Member 'NPCManager_GetNPCMovePointData::PointID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCMovePointData, Result) == 0x000008, "Member 'NPCManager_GetNPCMovePointData::Result' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCMovePointData, DataInfo) == 0x000010, "Member 'NPCManager_GetNPCMovePointData::DataInfo' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCNaviPointData
// 0x0068 (0x0068 - 0x0000)
struct NPCManager_GetNPCNaviPointData final
{
public:
	class FName                                   PointID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_NPCEventAiMovePoints               DataInfo;                                          // 0x0010(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCNaviPointData) == 0x000008, "Wrong alignment on NPCManager_GetNPCNaviPointData");
static_assert(sizeof(NPCManager_GetNPCNaviPointData) == 0x000068, "Wrong size on NPCManager_GetNPCNaviPointData");
static_assert(offsetof(NPCManager_GetNPCNaviPointData, PointID) == 0x000000, "Member 'NPCManager_GetNPCNaviPointData::PointID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCNaviPointData, Result) == 0x000008, "Member 'NPCManager_GetNPCNaviPointData::Result' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCNaviPointData, DataInfo) == 0x000010, "Member 'NPCManager_GetNPCNaviPointData::DataInfo' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCParticleEffectList
// 0x0020 (0x0020 - 0x0000)
struct NPCManager_GetNPCParticleEffectList final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_NPCParticleEffectData>      ParticleEffectList;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_GetNPCParticleEffectList) == 0x000008, "Wrong alignment on NPCManager_GetNPCParticleEffectList");
static_assert(sizeof(NPCManager_GetNPCParticleEffectList) == 0x000020, "Wrong size on NPCManager_GetNPCParticleEffectList");
static_assert(offsetof(NPCManager_GetNPCParticleEffectList, ID) == 0x000000, "Member 'NPCManager_GetNPCParticleEffectList::ID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCParticleEffectList, ParticleEffectList) == 0x000008, "Member 'NPCManager_GetNPCParticleEffectList::ParticleEffectList' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCParticleEffectList, ReturnValue) == 0x000018, "Member 'NPCManager_GetNPCParticleEffectList::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCPointData
// 0x0040 (0x0040 - 0x0000)
struct NPCManager_GetNPCPointData final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_PointDataTable                     DataInfo;                                          // 0x0010(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCPointData) == 0x000008, "Wrong alignment on NPCManager_GetNPCPointData");
static_assert(sizeof(NPCManager_GetNPCPointData) == 0x000040, "Wrong size on NPCManager_GetNPCPointData");
static_assert(offsetof(NPCManager_GetNPCPointData, NpcID) == 0x000000, "Member 'NPCManager_GetNPCPointData::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCPointData, Result) == 0x000008, "Member 'NPCManager_GetNPCPointData::Result' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCPointData, DataInfo) == 0x000010, "Member 'NPCManager_GetNPCPointData::DataInfo' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCSplineNaviPointData
// 0x0068 (0x0068 - 0x0000)
struct NPCManager_GetNPCSplineNaviPointData final
{
public:
	class FName                                   PointID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_NPCEventAiMovePoints               DataInfo;                                          // 0x0010(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCSplineNaviPointData) == 0x000008, "Wrong alignment on NPCManager_GetNPCSplineNaviPointData");
static_assert(sizeof(NPCManager_GetNPCSplineNaviPointData) == 0x000068, "Wrong size on NPCManager_GetNPCSplineNaviPointData");
static_assert(offsetof(NPCManager_GetNPCSplineNaviPointData, PointID) == 0x000000, "Member 'NPCManager_GetNPCSplineNaviPointData::PointID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCSplineNaviPointData, Result) == 0x000008, "Member 'NPCManager_GetNPCSplineNaviPointData::Result' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCSplineNaviPointData, DataInfo) == 0x000010, "Member 'NPCManager_GetNPCSplineNaviPointData::DataInfo' has a wrong offset!");

// Function DarwinGame.NPCManager.Remove
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_Remove final
{
public:
	class FName                                   RemoveNPCId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_Remove) == 0x000004, "Wrong alignment on NPCManager_Remove");
static_assert(sizeof(NPCManager_Remove) == 0x000008, "Wrong size on NPCManager_Remove");
static_assert(offsetof(NPCManager_Remove, RemoveNPCId) == 0x000000, "Member 'NPCManager_Remove::RemoveNPCId' has a wrong offset!");

// Function DarwinGame.NPCManager.SetIsNPCAiSkip
// 0x0001 (0x0001 - 0x0000)
struct NPCManager_SetIsNPCAiSkip final
{
public:
	bool                                          flg;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_SetIsNPCAiSkip) == 0x000001, "Wrong alignment on NPCManager_SetIsNPCAiSkip");
static_assert(sizeof(NPCManager_SetIsNPCAiSkip) == 0x000001, "Wrong size on NPCManager_SetIsNPCAiSkip");
static_assert(offsetof(NPCManager_SetIsNPCAiSkip, flg) == 0x000000, "Member 'NPCManager_SetIsNPCAiSkip::flg' has a wrong offset!");

// Function DarwinGame.NPCManager.SetSplinePointActor
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_SetSplinePointActor final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_SetSplinePointActor) == 0x000008, "Wrong alignment on NPCManager_SetSplinePointActor");
static_assert(sizeof(NPCManager_SetSplinePointActor) == 0x000008, "Wrong size on NPCManager_SetSplinePointActor");
static_assert(offsetof(NPCManager_SetSplinePointActor, Obj) == 0x000000, "Member 'NPCManager_SetSplinePointActor::Obj' has a wrong offset!");

// Function DarwinGame.NPCManager.SetUpdateEnable
// 0x0001 (0x0001 - 0x0000)
struct NPCManager_SetUpdateEnable final
{
public:
	bool                                          enable_flag;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_SetUpdateEnable) == 0x000001, "Wrong alignment on NPCManager_SetUpdateEnable");
static_assert(sizeof(NPCManager_SetUpdateEnable) == 0x000001, "Wrong size on NPCManager_SetUpdateEnable");
static_assert(offsetof(NPCManager_SetUpdateEnable, enable_flag) == 0x000000, "Member 'NPCManager_SetUpdateEnable::enable_flag' has a wrong offset!");

// Function DarwinGame.NPCManager.SetVisibleNPCAll
// 0x0001 (0x0001 - 0x0000)
struct NPCManager_SetVisibleNPCAll final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_SetVisibleNPCAll) == 0x000001, "Wrong alignment on NPCManager_SetVisibleNPCAll");
static_assert(sizeof(NPCManager_SetVisibleNPCAll) == 0x000001, "Wrong size on NPCManager_SetVisibleNPCAll");
static_assert(offsetof(NPCManager_SetVisibleNPCAll, Visibility) == 0x000000, "Member 'NPCManager_SetVisibleNPCAll::Visibility' has a wrong offset!");

// Function DarwinGame.NPCManager.Spawn
// 0x0050 (0x0050 - 0x0000)
struct NPCManager_Spawn final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_Spawn) == 0x000010, "Wrong alignment on NPCManager_Spawn");
static_assert(sizeof(NPCManager_Spawn) == 0x000050, "Wrong size on NPCManager_Spawn");
static_assert(offsetof(NPCManager_Spawn, NpcID) == 0x000000, "Member 'NPCManager_Spawn::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_Spawn, Transform) == 0x000010, "Member 'NPCManager_Spawn::Transform' has a wrong offset!");
static_assert(offsetof(NPCManager_Spawn, ReturnValue) == 0x000040, "Member 'NPCManager_Spawn::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.ContainsList
// 0x000C (0x000C - 0x0000)
struct NPCManager_ContainsList final
{
public:
	class FName                                   NPC_ID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_ContainsList) == 0x000004, "Wrong alignment on NPCManager_ContainsList");
static_assert(sizeof(NPCManager_ContainsList) == 0x00000C, "Wrong size on NPCManager_ContainsList");
static_assert(offsetof(NPCManager_ContainsList, NPC_ID) == 0x000000, "Member 'NPCManager_ContainsList::NPC_ID' has a wrong offset!");
static_assert(offsetof(NPCManager_ContainsList, ReturnValue) == 0x000008, "Member 'NPCManager_ContainsList::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.ConvertNPCID
// 0x0010 (0x0010 - 0x0000)
struct NPCManager_ConvertNPCID final
{
public:
	class FName                                   NPCDataID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_ConvertNPCID) == 0x000004, "Wrong alignment on NPCManager_ConvertNPCID");
static_assert(sizeof(NPCManager_ConvertNPCID) == 0x000010, "Wrong size on NPCManager_ConvertNPCID");
static_assert(offsetof(NPCManager_ConvertNPCID, NPCDataID) == 0x000000, "Member 'NPCManager_ConvertNPCID::NPCDataID' has a wrong offset!");
static_assert(offsetof(NPCManager_ConvertNPCID, ReturnValue) == 0x000008, "Member 'NPCManager_ConvertNPCID::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetIsNPCAiSkip
// 0x0001 (0x0001 - 0x0000)
struct NPCManager_GetIsNPCAiSkip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetIsNPCAiSkip) == 0x000001, "Wrong alignment on NPCManager_GetIsNPCAiSkip");
static_assert(sizeof(NPCManager_GetIsNPCAiSkip) == 0x000001, "Wrong size on NPCManager_GetIsNPCAiSkip");
static_assert(offsetof(NPCManager_GetIsNPCAiSkip, ReturnValue) == 0x000000, "Member 'NPCManager_GetIsNPCAiSkip::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPC
// 0x0010 (0x0010 - 0x0000)
struct NPCManager_GetNPC final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANPCBase*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPC) == 0x000008, "Wrong alignment on NPCManager_GetNPC");
static_assert(sizeof(NPCManager_GetNPC) == 0x000010, "Wrong size on NPCManager_GetNPC");
static_assert(offsetof(NPCManager_GetNPC, NpcID) == 0x000000, "Member 'NPCManager_GetNPC::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPC, ReturnValue) == 0x000008, "Member 'NPCManager_GetNPC::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCAppearanceDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCAppearanceDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCAppearanceDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCAppearanceDataTable");
static_assert(sizeof(NPCManager_GetNPCAppearanceDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCAppearanceDataTable");
static_assert(offsetof(NPCManager_GetNPCAppearanceDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCAppearanceDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCDataTable");
static_assert(sizeof(NPCManager_GetNPCDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCDataTable");
static_assert(offsetof(NPCManager_GetNPCDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCEmoteDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCEmoteDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCEmoteDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCEmoteDataTable");
static_assert(sizeof(NPCManager_GetNPCEmoteDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCEmoteDataTable");
static_assert(offsetof(NPCManager_GetNPCEmoteDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCEmoteDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCMovePointDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCMovePointDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCMovePointDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCMovePointDataTable");
static_assert(sizeof(NPCManager_GetNPCMovePointDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCMovePointDataTable");
static_assert(offsetof(NPCManager_GetNPCMovePointDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCMovePointDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCNaviPointDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCNaviPointDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCNaviPointDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCNaviPointDataTable");
static_assert(sizeof(NPCManager_GetNPCNaviPointDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCNaviPointDataTable");
static_assert(offsetof(NPCManager_GetNPCNaviPointDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCNaviPointDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCOptionDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCOptionDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCOptionDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCOptionDataTable");
static_assert(sizeof(NPCManager_GetNPCOptionDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCOptionDataTable");
static_assert(offsetof(NPCManager_GetNPCOptionDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCOptionDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCParticleEffectDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCParticleEffectDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCParticleEffectDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCParticleEffectDataTable");
static_assert(sizeof(NPCManager_GetNPCParticleEffectDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCParticleEffectDataTable");
static_assert(offsetof(NPCManager_GetNPCParticleEffectDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCParticleEffectDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCPartVoiceDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCPartVoiceDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCPartVoiceDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCPartVoiceDataTable");
static_assert(sizeof(NPCManager_GetNPCPartVoiceDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCPartVoiceDataTable");
static_assert(offsetof(NPCManager_GetNPCPartVoiceDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCPartVoiceDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCPartVoiceID
// 0x0018 (0x0018 - 0x0000)
struct NPCManager_GetNPCPartVoiceID final
{
public:
	class FString                                 TalkTypeName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkerTypeNo;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCPartVoiceID) == 0x000008, "Wrong alignment on NPCManager_GetNPCPartVoiceID");
static_assert(sizeof(NPCManager_GetNPCPartVoiceID) == 0x000018, "Wrong size on NPCManager_GetNPCPartVoiceID");
static_assert(offsetof(NPCManager_GetNPCPartVoiceID, TalkTypeName) == 0x000000, "Member 'NPCManager_GetNPCPartVoiceID::TalkTypeName' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCPartVoiceID, TalkerTypeNo) == 0x000010, "Member 'NPCManager_GetNPCPartVoiceID::TalkerTypeNo' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCPartVoiceID, ReturnValue) == 0x000014, "Member 'NPCManager_GetNPCPartVoiceID::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCPartVoiceIDFromNpcID
// 0x0020 (0x0020 - 0x0000)
struct NPCManager_GetNPCPartVoiceIDFromNpcID final
{
public:
	class FString                                 TalkType;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcID;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_GetNPCPartVoiceIDFromNpcID) == 0x000008, "Wrong alignment on NPCManager_GetNPCPartVoiceIDFromNpcID");
static_assert(sizeof(NPCManager_GetNPCPartVoiceIDFromNpcID) == 0x000020, "Wrong size on NPCManager_GetNPCPartVoiceIDFromNpcID");
static_assert(offsetof(NPCManager_GetNPCPartVoiceIDFromNpcID, TalkType) == 0x000000, "Member 'NPCManager_GetNPCPartVoiceIDFromNpcID::TalkType' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCPartVoiceIDFromNpcID, NpcID) == 0x000010, "Member 'NPCManager_GetNPCPartVoiceIDFromNpcID::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_GetNPCPartVoiceIDFromNpcID, ReturnValue) == 0x000018, "Member 'NPCManager_GetNPCPartVoiceIDFromNpcID::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCPointDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCPointDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCPointDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCPointDataTable");
static_assert(sizeof(NPCManager_GetNPCPointDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCPointDataTable");
static_assert(offsetof(NPCManager_GetNPCPointDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCPointDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetNPCSplineNaviPointDataTable
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetNPCSplineNaviPointDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetNPCSplineNaviPointDataTable) == 0x000008, "Wrong alignment on NPCManager_GetNPCSplineNaviPointDataTable");
static_assert(sizeof(NPCManager_GetNPCSplineNaviPointDataTable) == 0x000008, "Wrong size on NPCManager_GetNPCSplineNaviPointDataTable");
static_assert(offsetof(NPCManager_GetNPCSplineNaviPointDataTable, ReturnValue) == 0x000000, "Member 'NPCManager_GetNPCSplineNaviPointDataTable::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.GetSplinePointActor
// 0x0008 (0x0008 - 0x0000)
struct NPCManager_GetSplinePointActor final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_GetSplinePointActor) == 0x000008, "Wrong alignment on NPCManager_GetSplinePointActor");
static_assert(sizeof(NPCManager_GetSplinePointActor) == 0x000008, "Wrong size on NPCManager_GetSplinePointActor");
static_assert(offsetof(NPCManager_GetSplinePointActor, ReturnValue) == 0x000000, "Member 'NPCManager_GetSplinePointActor::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.IsAutoTravelerNPCId
// 0x000C (0x000C - 0x0000)
struct NPCManager_IsAutoTravelerNPCId final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_IsAutoTravelerNPCId) == 0x000004, "Wrong alignment on NPCManager_IsAutoTravelerNPCId");
static_assert(sizeof(NPCManager_IsAutoTravelerNPCId) == 0x00000C, "Wrong size on NPCManager_IsAutoTravelerNPCId");
static_assert(offsetof(NPCManager_IsAutoTravelerNPCId, NpcID) == 0x000000, "Member 'NPCManager_IsAutoTravelerNPCId::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_IsAutoTravelerNPCId, ReturnValue) == 0x000008, "Member 'NPCManager_IsAutoTravelerNPCId::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.IsFriendNPCId
// 0x000C (0x000C - 0x0000)
struct NPCManager_IsFriendNPCId final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_IsFriendNPCId) == 0x000004, "Wrong alignment on NPCManager_IsFriendNPCId");
static_assert(sizeof(NPCManager_IsFriendNPCId) == 0x00000C, "Wrong size on NPCManager_IsFriendNPCId");
static_assert(offsetof(NPCManager_IsFriendNPCId, NpcID) == 0x000000, "Member 'NPCManager_IsFriendNPCId::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_IsFriendNPCId, ReturnValue) == 0x000008, "Member 'NPCManager_IsFriendNPCId::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.IsInvitationTravelerNPCId
// 0x000C (0x000C - 0x0000)
struct NPCManager_IsInvitationTravelerNPCId final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_IsInvitationTravelerNPCId) == 0x000004, "Wrong alignment on NPCManager_IsInvitationTravelerNPCId");
static_assert(sizeof(NPCManager_IsInvitationTravelerNPCId) == 0x00000C, "Wrong size on NPCManager_IsInvitationTravelerNPCId");
static_assert(offsetof(NPCManager_IsInvitationTravelerNPCId, NpcID) == 0x000000, "Member 'NPCManager_IsInvitationTravelerNPCId::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_IsInvitationTravelerNPCId, ReturnValue) == 0x000008, "Member 'NPCManager_IsInvitationTravelerNPCId::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.IsManagerActive
// 0x0001 (0x0001 - 0x0000)
struct NPCManager_IsManagerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManager_IsManagerActive) == 0x000001, "Wrong alignment on NPCManager_IsManagerActive");
static_assert(sizeof(NPCManager_IsManagerActive) == 0x000001, "Wrong size on NPCManager_IsManagerActive");
static_assert(offsetof(NPCManager_IsManagerActive, ReturnValue) == 0x000000, "Member 'NPCManager_IsManagerActive::ReturnValue' has a wrong offset!");

// Function DarwinGame.NPCManager.IsVisibleNPCId
// 0x000C (0x000C - 0x0000)
struct NPCManager_IsVisibleNPCId final
{
public:
	class FName                                   NpcID;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NPCManager_IsVisibleNPCId) == 0x000004, "Wrong alignment on NPCManager_IsVisibleNPCId");
static_assert(sizeof(NPCManager_IsVisibleNPCId) == 0x00000C, "Wrong size on NPCManager_IsVisibleNPCId");
static_assert(offsetof(NPCManager_IsVisibleNPCId, NpcID) == 0x000000, "Member 'NPCManager_IsVisibleNPCId::NpcID' has a wrong offset!");
static_assert(offsetof(NPCManager_IsVisibleNPCId, ReturnValue) == 0x000008, "Member 'NPCManager_IsVisibleNPCId::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenCoinMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenCoinMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenCoinMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenCoinMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenCoinMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenCoinMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenCoinMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenCoinMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenConfigMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenConfigMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenConfigMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenConfigMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenConfigMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenConfigMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenConfigMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenConfigMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenDictionaryMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenDictionaryMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenDictionaryMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenDictionaryMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenDictionaryMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenDictionaryMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenDictionaryMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenDictionaryMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenFieldLink
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenFieldLink final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenFieldLink) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenFieldLink");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenFieldLink) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenFieldLink");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenFieldLink, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenFieldLink::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenItemMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenItemMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenItemMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenItemMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenItemMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenItemMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenItemMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenItemMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenMainMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenMainMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenMainMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenMainMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenMainMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenMainMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenMainMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenMapMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenMapMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenMapMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenMapMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenMapMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenMapMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenMapMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenMapMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenMiniMap
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenMiniMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenMiniMap) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenMiniMap");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenMiniMap) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenMiniMap");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenMiniMap, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenMiniMap::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenPartyMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenPartyMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenPartyMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenPartyMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenPartyMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenPartyMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenPartyMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenPartyMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenQuestMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenQuestMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenQuestMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenQuestMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenQuestMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenQuestMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenQuestMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenQuestMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenQuestWindow
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenQuestWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenQuestWindow) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenQuestWindow");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenQuestWindow) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenQuestWindow");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenQuestWindow, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenQuestWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenSpStock
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenSpStock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenSpStock) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenSpStock");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenSpStock) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenSpStock");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenSpStock, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenSpStock::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenStatusWindow
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenStatusWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenStatusWindow) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenStatusWindow");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenStatusWindow) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenStatusWindow");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenStatusWindow, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenStatusWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanOpenTeamMenu
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanOpenTeamMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanOpenTeamMenu) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanOpenTeamMenu");
static_assert(sizeof(OpenCheckFunctionLibrary_CanOpenTeamMenu) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanOpenTeamMenu");
static_assert(offsetof(OpenCheckFunctionLibrary_CanOpenTeamMenu, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanOpenTeamMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanShowBaseIsland
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanShowBaseIsland final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanShowBaseIsland) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanShowBaseIsland");
static_assert(sizeof(OpenCheckFunctionLibrary_CanShowBaseIsland) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanShowBaseIsland");
static_assert(offsetof(OpenCheckFunctionLibrary_CanShowBaseIsland, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanShowBaseIsland::ReturnValue' has a wrong offset!");

// Function DarwinGame.OpenCheckFunctionLibrary.CanShowCategory
// 0x0001 (0x0001 - 0x0000)
struct OpenCheckFunctionLibrary_CanShowCategory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCheckFunctionLibrary_CanShowCategory) == 0x000001, "Wrong alignment on OpenCheckFunctionLibrary_CanShowCategory");
static_assert(sizeof(OpenCheckFunctionLibrary_CanShowCategory) == 0x000001, "Wrong size on OpenCheckFunctionLibrary_CanShowCategory");
static_assert(offsetof(OpenCheckFunctionLibrary_CanShowCategory, ReturnValue) == 0x000000, "Member 'OpenCheckFunctionLibrary_CanShowCategory::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIQuest_Order.Setup
// 0x0020 (0x0020 - 0x0000)
struct UIQuest_Order_Setup final
{
public:
	TArray<class FName>                           InQuestIdList;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcID;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsParentDisplay;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsNewOrderQuest;                                // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsClearedDisplay;                               // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsClosedPlayEvent;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIQuest_Order_Setup) == 0x000008, "Wrong alignment on UIQuest_Order_Setup");
static_assert(sizeof(UIQuest_Order_Setup) == 0x000020, "Wrong size on UIQuest_Order_Setup");
static_assert(offsetof(UIQuest_Order_Setup, InQuestIdList) == 0x000000, "Member 'UIQuest_Order_Setup::InQuestIdList' has a wrong offset!");
static_assert(offsetof(UIQuest_Order_Setup, NpcID) == 0x000010, "Member 'UIQuest_Order_Setup::NpcID' has a wrong offset!");
static_assert(offsetof(UIQuest_Order_Setup, bInIsParentDisplay) == 0x000018, "Member 'UIQuest_Order_Setup::bInIsParentDisplay' has a wrong offset!");
static_assert(offsetof(UIQuest_Order_Setup, bInIsNewOrderQuest) == 0x000019, "Member 'UIQuest_Order_Setup::bInIsNewOrderQuest' has a wrong offset!");
static_assert(offsetof(UIQuest_Order_Setup, bInIsClearedDisplay) == 0x00001A, "Member 'UIQuest_Order_Setup::bInIsClearedDisplay' has a wrong offset!");
static_assert(offsetof(UIQuest_Order_Setup, bInIsClosedPlayEvent) == 0x00001B, "Member 'UIQuest_Order_Setup::bInIsClosedPlayEvent' has a wrong offset!");

// Function DarwinGame.ParkourAbility.SetCapsuleScale
// 0x0008 (0x0008 - 0x0000)
struct ParkourAbility_SetCapsuleScale final
{
public:
	struct FVector2D                              CapsuleScale;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParkourAbility_SetCapsuleScale) == 0x000004, "Wrong alignment on ParkourAbility_SetCapsuleScale");
static_assert(sizeof(ParkourAbility_SetCapsuleScale) == 0x000008, "Wrong size on ParkourAbility_SetCapsuleScale");
static_assert(offsetof(ParkourAbility_SetCapsuleScale, CapsuleScale) == 0x000000, "Member 'ParkourAbility_SetCapsuleScale::CapsuleScale' has a wrong offset!");

// Function DarwinGame.ParkourAbility.GetParkourData
// 0x002C (0x002C - 0x0000)
struct ParkourAbility_GetParkourData final
{
public:
	struct FParkour                               ReturnValue;                                       // 0x0000(0x002C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParkourAbility_GetParkourData) == 0x000004, "Wrong alignment on ParkourAbility_GetParkourData");
static_assert(sizeof(ParkourAbility_GetParkourData) == 0x00002C, "Wrong size on ParkourAbility_GetParkourData");
static_assert(offsetof(ParkourAbility_GetParkourData, ReturnValue) == 0x000000, "Member 'ParkourAbility_GetParkourData::ReturnValue' has a wrong offset!");

// Function DarwinGame.ParkourAbility.GetTurnRotation
// 0x000C (0x000C - 0x0000)
struct ParkourAbility_GetTurnRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParkourAbility_GetTurnRotation) == 0x000004, "Wrong alignment on ParkourAbility_GetTurnRotation");
static_assert(sizeof(ParkourAbility_GetTurnRotation) == 0x00000C, "Wrong size on ParkourAbility_GetTurnRotation");
static_assert(offsetof(ParkourAbility_GetTurnRotation, ReturnValue) == 0x000000, "Member 'ParkourAbility_GetTurnRotation::ReturnValue' has a wrong offset!");

// Function DarwinGame.PartyEditLibrary.K2_Add
// 0x000C (0x000C - 0x0000)
struct PartyEditLibrary_K2_Add final
{
public:
	int32                                         stockUid;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyEditOption                       Option;                                            // 0x0004(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyEditLibrary_K2_Add) == 0x000004, "Wrong alignment on PartyEditLibrary_K2_Add");
static_assert(sizeof(PartyEditLibrary_K2_Add) == 0x00000C, "Wrong size on PartyEditLibrary_K2_Add");
static_assert(offsetof(PartyEditLibrary_K2_Add, stockUid) == 0x000000, "Member 'PartyEditLibrary_K2_Add::stockUid' has a wrong offset!");
static_assert(offsetof(PartyEditLibrary_K2_Add, Option) == 0x000004, "Member 'PartyEditLibrary_K2_Add::Option' has a wrong offset!");
static_assert(offsetof(PartyEditLibrary_K2_Add, ReturnValue) == 0x000008, "Member 'PartyEditLibrary_K2_Add::ReturnValue' has a wrong offset!");

// Function DarwinGame.PartyEditLibrary.K2_MemberChange
// 0x0018 (0x0018 - 0x0000)
struct PartyEditLibrary_K2_MemberChange final
{
public:
	TArray<int32>                                 stockUids;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyEditOption                       Option;                                            // 0x0010(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PartyEditLibrary_K2_MemberChange) == 0x000008, "Wrong alignment on PartyEditLibrary_K2_MemberChange");
static_assert(sizeof(PartyEditLibrary_K2_MemberChange) == 0x000018, "Wrong size on PartyEditLibrary_K2_MemberChange");
static_assert(offsetof(PartyEditLibrary_K2_MemberChange, stockUids) == 0x000000, "Member 'PartyEditLibrary_K2_MemberChange::stockUids' has a wrong offset!");
static_assert(offsetof(PartyEditLibrary_K2_MemberChange, Option) == 0x000010, "Member 'PartyEditLibrary_K2_MemberChange::Option' has a wrong offset!");

// Function DarwinGame.PartyEditLibrary.K2_Remove
// 0x000C (0x000C - 0x0000)
struct PartyEditLibrary_K2_Remove final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyEditOption                       Option;                                            // 0x0004(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyEditLibrary_K2_Remove) == 0x000004, "Wrong alignment on PartyEditLibrary_K2_Remove");
static_assert(sizeof(PartyEditLibrary_K2_Remove) == 0x00000C, "Wrong size on PartyEditLibrary_K2_Remove");
static_assert(offsetof(PartyEditLibrary_K2_Remove, partyIndex) == 0x000000, "Member 'PartyEditLibrary_K2_Remove::partyIndex' has a wrong offset!");
static_assert(offsetof(PartyEditLibrary_K2_Remove, Option) == 0x000004, "Member 'PartyEditLibrary_K2_Remove::Option' has a wrong offset!");
static_assert(offsetof(PartyEditLibrary_K2_Remove, ReturnValue) == 0x000008, "Member 'PartyEditLibrary_K2_Remove::ReturnValue' has a wrong offset!");

// Function DarwinGame.PersistentLevelDataAsset.GetLevelData
// 0x0010 (0x0010 - 0x0000)
struct PersistentLevelDataAsset_GetLevelData final
{
public:
	EPersistentLevelID                            ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPersistentLevelRecord                 ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersistentLevelDataAsset_GetLevelData) == 0x000004, "Wrong alignment on PersistentLevelDataAsset_GetLevelData");
static_assert(sizeof(PersistentLevelDataAsset_GetLevelData) == 0x000010, "Wrong size on PersistentLevelDataAsset_GetLevelData");
static_assert(offsetof(PersistentLevelDataAsset_GetLevelData, ID) == 0x000000, "Member 'PersistentLevelDataAsset_GetLevelData::ID' has a wrong offset!");
static_assert(offsetof(PersistentLevelDataAsset_GetLevelData, ReturnValue) == 0x000004, "Member 'PersistentLevelDataAsset_GetLevelData::ReturnValue' has a wrong offset!");

// Function DarwinGame.PersistentLevelDataAsset.GetLevelPath
// 0x000C (0x000C - 0x0000)
struct PersistentLevelDataAsset_GetLevelPath final
{
public:
	EPersistentLevelID                            ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersistentLevelDataAsset_GetLevelPath) == 0x000004, "Wrong alignment on PersistentLevelDataAsset_GetLevelPath");
static_assert(sizeof(PersistentLevelDataAsset_GetLevelPath) == 0x00000C, "Wrong size on PersistentLevelDataAsset_GetLevelPath");
static_assert(offsetof(PersistentLevelDataAsset_GetLevelPath, ID) == 0x000000, "Member 'PersistentLevelDataAsset_GetLevelPath::ID' has a wrong offset!");
static_assert(offsetof(PersistentLevelDataAsset_GetLevelPath, ReturnValue) == 0x000004, "Member 'PersistentLevelDataAsset_GetLevelPath::ReturnValue' has a wrong offset!");

// Function DarwinGame.PersistentLevelDataAsset.IsContainsLevelPath
// 0x000C (0x000C - 0x0000)
struct PersistentLevelDataAsset_IsContainsLevelPath final
{
public:
	class FName                                   level_path;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PersistentLevelDataAsset_IsContainsLevelPath) == 0x000004, "Wrong alignment on PersistentLevelDataAsset_IsContainsLevelPath");
static_assert(sizeof(PersistentLevelDataAsset_IsContainsLevelPath) == 0x00000C, "Wrong size on PersistentLevelDataAsset_IsContainsLevelPath");
static_assert(offsetof(PersistentLevelDataAsset_IsContainsLevelPath, level_path) == 0x000000, "Member 'PersistentLevelDataAsset_IsContainsLevelPath::level_path' has a wrong offset!");
static_assert(offsetof(PersistentLevelDataAsset_IsContainsLevelPath, ReturnValue) == 0x000008, "Member 'PersistentLevelDataAsset_IsContainsLevelPath::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.ChangeStateCamera
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_ChangeStateCamera final
{
public:
	struct FGameplayTag                           NextTag;                                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ChangeStateCamera) == 0x000004, "Wrong alignment on PlayerCharacter_ChangeStateCamera");
static_assert(sizeof(PlayerCharacter_ChangeStateCamera) == 0x000008, "Wrong size on PlayerCharacter_ChangeStateCamera");
static_assert(offsetof(PlayerCharacter_ChangeStateCamera, NextTag) == 0x000000, "Member 'PlayerCharacter_ChangeStateCamera::NextTag' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.ChangeToBeast
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_ChangeToBeast final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterapSpeed;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ChangeToBeast) == 0x000004, "Wrong alignment on PlayerCharacter_ChangeToBeast");
static_assert(sizeof(PlayerCharacter_ChangeToBeast) == 0x000008, "Wrong size on PlayerCharacter_ChangeToBeast");
static_assert(offsetof(PlayerCharacter_ChangeToBeast, End) == 0x000000, "Member 'PlayerCharacter_ChangeToBeast::End' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_ChangeToBeast, InterapSpeed) == 0x000004, "Member 'PlayerCharacter_ChangeToBeast::InterapSpeed' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.FindFieldActMotionData
// 0x0038 (0x0038 - 0x0000)
struct PlayerCharacter_FindFieldActMotionData final
{
public:
	class FName                                   MotionID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_FieldAct                           FieldActData;                                      // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_FindFieldActMotionData) == 0x000008, "Wrong alignment on PlayerCharacter_FindFieldActMotionData");
static_assert(sizeof(PlayerCharacter_FindFieldActMotionData) == 0x000038, "Wrong size on PlayerCharacter_FindFieldActMotionData");
static_assert(offsetof(PlayerCharacter_FindFieldActMotionData, MotionID) == 0x000000, "Member 'PlayerCharacter_FindFieldActMotionData::MotionID' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_FindFieldActMotionData, FieldActData) == 0x000008, "Member 'PlayerCharacter_FindFieldActMotionData::FieldActData' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_FindFieldActMotionData, ReturnValue) == 0x000030, "Member 'PlayerCharacter_FindFieldActMotionData::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.ForceMove
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharacter_ForceMove final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ForceMove) == 0x000004, "Wrong alignment on PlayerCharacter_ForceMove");
static_assert(sizeof(PlayerCharacter_ForceMove) == 0x000010, "Wrong size on PlayerCharacter_ForceMove");
static_assert(offsetof(PlayerCharacter_ForceMove, Direction) == 0x000000, "Member 'PlayerCharacter_ForceMove::Direction' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_ForceMove, Time) == 0x00000C, "Member 'PlayerCharacter_ForceMove::Time' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.GetDarwinCamera
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_GetDarwinCamera final
{
public:
	class ADarwinCamera*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetDarwinCamera) == 0x000008, "Wrong alignment on PlayerCharacter_GetDarwinCamera");
static_assert(sizeof(PlayerCharacter_GetDarwinCamera) == 0x000008, "Wrong size on PlayerCharacter_GetDarwinCamera");
static_assert(offsetof(PlayerCharacter_GetDarwinCamera, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetDarwinCamera::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.GetLMBGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharacter_GetLMBGameplayTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetLMBGameplayTag) == 0x000004, "Wrong alignment on PlayerCharacter_GetLMBGameplayTag");
static_assert(sizeof(PlayerCharacter_GetLMBGameplayTag) == 0x000008, "Wrong size on PlayerCharacter_GetLMBGameplayTag");
static_assert(offsetof(PlayerCharacter_GetLMBGameplayTag, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetLMBGameplayTag::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.GetRideMotion
// 0x0050 (0x0050 - 0x0000)
struct PlayerCharacter_GetRideMotion final
{
public:
	struct FST_RideMotionData                     FoundData;                                         // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharacter_GetRideMotion) == 0x000008, "Wrong alignment on PlayerCharacter_GetRideMotion");
static_assert(sizeof(PlayerCharacter_GetRideMotion) == 0x000050, "Wrong size on PlayerCharacter_GetRideMotion");
static_assert(offsetof(PlayerCharacter_GetRideMotion, FoundData) == 0x000000, "Member 'PlayerCharacter_GetRideMotion::FoundData' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_GetRideMotion, ReturnValue) == 0x000048, "Member 'PlayerCharacter_GetRideMotion::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.IsLMBPressed
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_IsLMBPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_IsLMBPressed) == 0x000001, "Wrong alignment on PlayerCharacter_IsLMBPressed");
static_assert(sizeof(PlayerCharacter_IsLMBPressed) == 0x000001, "Wrong size on PlayerCharacter_IsLMBPressed");
static_assert(offsetof(PlayerCharacter_IsLMBPressed, ReturnValue) == 0x000000, "Member 'PlayerCharacter_IsLMBPressed::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.OnAimMarkerOnOwner
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_OnAimMarkerOnOwner final
{
public:
	bool                                          bOverPlayer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_OnAimMarkerOnOwner) == 0x000001, "Wrong alignment on PlayerCharacter_OnAimMarkerOnOwner");
static_assert(sizeof(PlayerCharacter_OnAimMarkerOnOwner) == 0x000001, "Wrong size on PlayerCharacter_OnAimMarkerOnOwner");
static_assert(offsetof(PlayerCharacter_OnAimMarkerOnOwner, bOverPlayer) == 0x000000, "Member 'PlayerCharacter_OnAimMarkerOnOwner::bOverPlayer' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.OnAimTrigger
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_OnAimTrigger final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_OnAimTrigger) == 0x000001, "Wrong alignment on PlayerCharacter_OnAimTrigger");
static_assert(sizeof(PlayerCharacter_OnAimTrigger) == 0x000001, "Wrong size on PlayerCharacter_OnAimTrigger");
static_assert(offsetof(PlayerCharacter_OnAimTrigger, bStart) == 0x000000, "Member 'PlayerCharacter_OnAimTrigger::bStart' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.OnInputChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_OnInputChanged final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_OnInputChanged) == 0x000001, "Wrong alignment on PlayerCharacter_OnInputChanged");
static_assert(sizeof(PlayerCharacter_OnInputChanged) == 0x000001, "Wrong size on PlayerCharacter_OnInputChanged");
static_assert(offsetof(PlayerCharacter_OnInputChanged, Enabled) == 0x000000, "Member 'PlayerCharacter_OnInputChanged::Enabled' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.OnSetEquipmentFlag
// 0x0002 (0x0002 - 0x0000)
struct PlayerCharacter_OnSetEquipmentFlag final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isChanged;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_OnSetEquipmentFlag) == 0x000001, "Wrong alignment on PlayerCharacter_OnSetEquipmentFlag");
static_assert(sizeof(PlayerCharacter_OnSetEquipmentFlag) == 0x000002, "Wrong size on PlayerCharacter_OnSetEquipmentFlag");
static_assert(offsetof(PlayerCharacter_OnSetEquipmentFlag, enable) == 0x000000, "Member 'PlayerCharacter_OnSetEquipmentFlag::enable' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_OnSetEquipmentFlag, isChanged) == 0x000001, "Member 'PlayerCharacter_OnSetEquipmentFlag::isChanged' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.Restart
// 0x0018 (0x0018 - 0x0000)
struct PlayerCharacter_Restart final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_Restart) == 0x000004, "Wrong alignment on PlayerCharacter_Restart");
static_assert(sizeof(PlayerCharacter_Restart) == 0x000018, "Wrong size on PlayerCharacter_Restart");
static_assert(offsetof(PlayerCharacter_Restart, Location) == 0x000000, "Member 'PlayerCharacter_Restart::Location' has a wrong offset!");
static_assert(offsetof(PlayerCharacter_Restart, Rotation) == 0x00000C, "Member 'PlayerCharacter_Restart::Rotation' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.Search
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_Search final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_Search) == 0x000004, "Wrong alignment on PlayerCharacter_Search");
static_assert(sizeof(PlayerCharacter_Search) == 0x000004, "Wrong size on PlayerCharacter_Search");
static_assert(offsetof(PlayerCharacter_Search, Time) == 0x000000, "Member 'PlayerCharacter_Search::Time' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.SetActiveRegenMP
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_SetActiveRegenMP final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_SetActiveRegenMP) == 0x000001, "Wrong alignment on PlayerCharacter_SetActiveRegenMP");
static_assert(sizeof(PlayerCharacter_SetActiveRegenMP) == 0x000001, "Wrong size on PlayerCharacter_SetActiveRegenMP");
static_assert(offsetof(PlayerCharacter_SetActiveRegenMP, Active) == 0x000000, "Member 'PlayerCharacter_SetActiveRegenMP::Active' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.ShowTransformInfoForDebug
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_ShowTransformInfoForDebug final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_ShowTransformInfoForDebug) == 0x000001, "Wrong alignment on PlayerCharacter_ShowTransformInfoForDebug");
static_assert(sizeof(PlayerCharacter_ShowTransformInfoForDebug) == 0x000001, "Wrong size on PlayerCharacter_ShowTransformInfoForDebug");
static_assert(offsetof(PlayerCharacter_ShowTransformInfoForDebug, IsShow) == 0x000000, "Member 'PlayerCharacter_ShowTransformInfoForDebug::IsShow' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.StartVision
// 0x0004 (0x0004 - 0x0000)
struct PlayerCharacter_StartVision final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_StartVision) == 0x000004, "Wrong alignment on PlayerCharacter_StartVision");
static_assert(sizeof(PlayerCharacter_StartVision) == 0x000004, "Wrong size on PlayerCharacter_StartVision");
static_assert(offsetof(PlayerCharacter_StartVision, Time) == 0x000000, "Member 'PlayerCharacter_StartVision::Time' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.GetFieldActionInfo
// 0x0018 (0x0018 - 0x0000)
struct PlayerCharacter_GetFieldActionInfo final
{
public:
	struct FFieldActionEventStruct                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_GetFieldActionInfo) == 0x000008, "Wrong alignment on PlayerCharacter_GetFieldActionInfo");
static_assert(sizeof(PlayerCharacter_GetFieldActionInfo) == 0x000018, "Wrong size on PlayerCharacter_GetFieldActionInfo");
static_assert(offsetof(PlayerCharacter_GetFieldActionInfo, ReturnValue) == 0x000000, "Member 'PlayerCharacter_GetFieldActionInfo::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.IsBattleModeContinue
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_IsBattleModeContinue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_IsBattleModeContinue) == 0x000001, "Wrong alignment on PlayerCharacter_IsBattleModeContinue");
static_assert(sizeof(PlayerCharacter_IsBattleModeContinue) == 0x000001, "Wrong size on PlayerCharacter_IsBattleModeContinue");
static_assert(offsetof(PlayerCharacter_IsBattleModeContinue, ReturnValue) == 0x000000, "Member 'PlayerCharacter_IsBattleModeContinue::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.IsPlayingUseSwordAction
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_IsPlayingUseSwordAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_IsPlayingUseSwordAction) == 0x000001, "Wrong alignment on PlayerCharacter_IsPlayingUseSwordAction");
static_assert(sizeof(PlayerCharacter_IsPlayingUseSwordAction) == 0x000001, "Wrong size on PlayerCharacter_IsPlayingUseSwordAction");
static_assert(offsetof(PlayerCharacter_IsPlayingUseSwordAction, ReturnValue) == 0x000000, "Member 'PlayerCharacter_IsPlayingUseSwordAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.PlayerCharacter.OnTheWater
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacter_OnTheWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacter_OnTheWater) == 0x000001, "Wrong alignment on PlayerCharacter_OnTheWater");
static_assert(sizeof(PlayerCharacter_OnTheWater) == 0x000001, "Wrong size on PlayerCharacter_OnTheWater");
static_assert(offsetof(PlayerCharacter_OnTheWater, ReturnValue) == 0x000000, "Member 'PlayerCharacter_OnTheWater::ReturnValue' has a wrong offset!");

// Function DarwinGame.PushWaveBase.InitParam
// 0x0018 (0x0018 - 0x0000)
struct PushWaveBase_InitParam final
{
public:
	struct FVector                                Size;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplitNum;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PushWaveBase_InitParam) == 0x000004, "Wrong alignment on PushWaveBase_InitParam");
static_assert(sizeof(PushWaveBase_InitParam) == 0x000018, "Wrong size on PushWaveBase_InitParam");
static_assert(offsetof(PushWaveBase_InitParam, Size) == 0x000000, "Member 'PushWaveBase_InitParam::Size' has a wrong offset!");
static_assert(offsetof(PushWaveBase_InitParam, SplitNum) == 0x00000C, "Member 'PushWaveBase_InitParam::SplitNum' has a wrong offset!");
static_assert(offsetof(PushWaveBase_InitParam, Speed) == 0x000010, "Member 'PushWaveBase_InitParam::Speed' has a wrong offset!");
static_assert(offsetof(PushWaveBase_InitParam, Distance) == 0x000014, "Member 'PushWaveBase_InitParam::Distance' has a wrong offset!");

// Function DarwinGame.PushWaveBase.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct PushWaveBase_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PushWaveBase_OnBeginOverlap) == 0x000008, "Wrong alignment on PushWaveBase_OnBeginOverlap");
static_assert(sizeof(PushWaveBase_OnBeginOverlap) == 0x0000A8, "Wrong size on PushWaveBase_OnBeginOverlap");
static_assert(offsetof(PushWaveBase_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'PushWaveBase_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnBeginOverlap, OtherActor) == 0x000008, "Member 'PushWaveBase_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnBeginOverlap, OtherComp) == 0x000010, "Member 'PushWaveBase_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PushWaveBase_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'PushWaveBase_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnBeginOverlap, SweepResult) == 0x000020, "Member 'PushWaveBase_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DarwinGame.PushWaveBase.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct PushWaveBase_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PushWaveBase_OnEndOverlap) == 0x000008, "Wrong alignment on PushWaveBase_OnEndOverlap");
static_assert(sizeof(PushWaveBase_OnEndOverlap) == 0x000020, "Wrong size on PushWaveBase_OnEndOverlap");
static_assert(offsetof(PushWaveBase_OnEndOverlap, OverlappedComp) == 0x000000, "Member 'PushWaveBase_OnEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnEndOverlap, OtherActor) == 0x000008, "Member 'PushWaveBase_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnEndOverlap, OtherComp) == 0x000010, "Member 'PushWaveBase_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PushWaveBase_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'PushWaveBase_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.RailSplineComponent.GetClosestPointAndDistance
// 0x001C (0x001C - 0x0000)
struct RailSplineComponent_GetClosestPointAndDistance final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RailSplineComponent_GetClosestPointAndDistance) == 0x000004, "Wrong alignment on RailSplineComponent_GetClosestPointAndDistance");
static_assert(sizeof(RailSplineComponent_GetClosestPointAndDistance) == 0x00001C, "Wrong size on RailSplineComponent_GetClosestPointAndDistance");
static_assert(offsetof(RailSplineComponent_GetClosestPointAndDistance, Location) == 0x000000, "Member 'RailSplineComponent_GetClosestPointAndDistance::Location' has a wrong offset!");
static_assert(offsetof(RailSplineComponent_GetClosestPointAndDistance, Distance) == 0x00000C, "Member 'RailSplineComponent_GetClosestPointAndDistance::Distance' has a wrong offset!");
static_assert(offsetof(RailSplineComponent_GetClosestPointAndDistance, ReturnValue) == 0x000010, "Member 'RailSplineComponent_GetClosestPointAndDistance::ReturnValue' has a wrong offset!");

// Function DarwinGame.RailSplineComponent.GetLocationAndRotationAtDistance
// 0x001C (0x001C - 0x0000)
struct RailSplineComponent_GetLocationAndRotationAtDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RailSplineComponent_GetLocationAndRotationAtDistance) == 0x000004, "Wrong alignment on RailSplineComponent_GetLocationAndRotationAtDistance");
static_assert(sizeof(RailSplineComponent_GetLocationAndRotationAtDistance) == 0x00001C, "Wrong size on RailSplineComponent_GetLocationAndRotationAtDistance");
static_assert(offsetof(RailSplineComponent_GetLocationAndRotationAtDistance, Distance) == 0x000000, "Member 'RailSplineComponent_GetLocationAndRotationAtDistance::Distance' has a wrong offset!");
static_assert(offsetof(RailSplineComponent_GetLocationAndRotationAtDistance, Location) == 0x000004, "Member 'RailSplineComponent_GetLocationAndRotationAtDistance::Location' has a wrong offset!");
static_assert(offsetof(RailSplineComponent_GetLocationAndRotationAtDistance, Rotation) == 0x000010, "Member 'RailSplineComponent_GetLocationAndRotationAtDistance::Rotation' has a wrong offset!");

// Function DarwinGame.RailSplineComponent.GetRailDirectionAtDistance
// 0x0010 (0x0010 - 0x0000)
struct RailSplineComponent_GetRailDirectionAtDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RailSplineComponent_GetRailDirectionAtDistance) == 0x000004, "Wrong alignment on RailSplineComponent_GetRailDirectionAtDistance");
static_assert(sizeof(RailSplineComponent_GetRailDirectionAtDistance) == 0x000010, "Wrong size on RailSplineComponent_GetRailDirectionAtDistance");
static_assert(offsetof(RailSplineComponent_GetRailDirectionAtDistance, Distance) == 0x000000, "Member 'RailSplineComponent_GetRailDirectionAtDistance::Distance' has a wrong offset!");
static_assert(offsetof(RailSplineComponent_GetRailDirectionAtDistance, ReturnValue) == 0x000004, "Member 'RailSplineComponent_GetRailDirectionAtDistance::ReturnValue' has a wrong offset!");

// Function DarwinGame.ResistDataTable.GetResistValue
// 0x0010 (0x0010 - 0x0000)
struct ResistDataTable_GetResistValue final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalcType;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResistDataTable_GetResistValue) == 0x000004, "Wrong alignment on ResistDataTable_GetResistValue");
static_assert(sizeof(ResistDataTable_GetResistValue) == 0x000010, "Wrong size on ResistDataTable_GetResistValue");
static_assert(offsetof(ResistDataTable_GetResistValue, ID) == 0x000000, "Member 'ResistDataTable_GetResistValue::ID' has a wrong offset!");
static_assert(offsetof(ResistDataTable_GetResistValue, CalcType) == 0x000008, "Member 'ResistDataTable_GetResistValue::CalcType' has a wrong offset!");
static_assert(offsetof(ResistDataTable_GetResistValue, ReturnValue) == 0x00000C, "Member 'ResistDataTable_GetResistValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.ExistAppearRivalTeamMonsterWithoutOwner
// 0x0010 (0x0010 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner final
{
public:
	class AMonsterBase*                           Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner) == 0x000010, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner, Owner) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner::Owner' has a wrong offset!");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner, ReturnValue) == 0x000008, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_ExistAppearRivalTeamMonsterWithoutOwner::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.GetFootpadMonsters
// 0x0010 (0x0010 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_GetFootpadMonsters final
{
public:
	TArray<class AMonsterBase*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_GetFootpadMonsters) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_GetFootpadMonsters");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_GetFootpadMonsters) == 0x000010, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_GetFootpadMonsters");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetFootpadMonsters, ReturnValue) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetFootpadMonsters::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.GetNearestArtifactObject
// 0x0010 (0x0010 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADropItemObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject) == 0x000010, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject, Monster) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject::Monster' has a wrong offset!");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject, ReturnValue) == 0x000008, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetNearestArtifactObject::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.GetRivalTeamForceName
// 0x0020 (0x0020 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName final
{
public:
	ERivalTeamForce                               RivalTeam;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName) == 0x000020, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName, RivalTeam) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName::RivalTeam' has a wrong offset!");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName, ReturnValue) == 0x000008, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamForceName::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.GetRivalTeamMonsters
// 0x0010 (0x0010 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonsters final
{
public:
	TArray<class AMonsterBase*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonsters) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonsters");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonsters) == 0x000010, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonsters");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonsters, ReturnValue) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonsters::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.GetRivalTeamMonstersHasArtifact
// 0x0010 (0x0010 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonstersHasArtifact final
{
public:
	TArray<class AMonsterBase*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonstersHasArtifact) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonstersHasArtifact");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonstersHasArtifact) == 0x000010, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonstersHasArtifact");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonstersHasArtifact, ReturnValue) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetRivalTeamMonstersHasArtifact::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.GetTravelRivalTeamForce
// 0x0010 (0x0010 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_GetTravelRivalTeamForce final
{
public:
	TArray<ERivalTeamForce>                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_GetTravelRivalTeamForce) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_GetTravelRivalTeamForce");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_GetTravelRivalTeamForce) == 0x000010, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_GetTravelRivalTeamForce");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_GetTravelRivalTeamForce, ReturnValue) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_GetTravelRivalTeamForce::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.IsEventRivalTeamID
// 0x0002 (0x0002 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID final
{
public:
	ERivalTeamForce                               RivalTeam;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID) == 0x000001, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID) == 0x000002, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID, RivalTeam) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID::RivalTeam' has a wrong offset!");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID, ReturnValue) == 0x000001, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_IsEventRivalTeamID::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.IsRivalTeamMonster
// 0x0010 (0x0010 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster final
{
public:
	const class AMonsterBase*                     Monster;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster) == 0x000010, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster, Monster) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster::Monster' has a wrong offset!");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster, ReturnValue) == 0x000008, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_IsRivalTeamMonster::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.IsTravelRivalTeamForce
// 0x0002 (0x0002 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce final
{
public:
	ERivalTeamForce                               RivalTeam;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce) == 0x000001, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce) == 0x000002, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce, RivalTeam) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce::RivalTeam' has a wrong offset!");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce, ReturnValue) == 0x000001, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_IsTravelRivalTeamForce::ReturnValue' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.NoticeAccessArtifactByPlayer
// 0x0008 (0x0008 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_NoticeAccessArtifactByPlayer final
{
public:
	class AArtifactObjectBase*                    Artifact;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_NoticeAccessArtifactByPlayer) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_NoticeAccessArtifactByPlayer");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_NoticeAccessArtifactByPlayer) == 0x000008, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_NoticeAccessArtifactByPlayer");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_NoticeAccessArtifactByPlayer, Artifact) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_NoticeAccessArtifactByPlayer::Artifact' has a wrong offset!");

// Function DarwinGame.RivalTeamMonsterBlueprintFunctionLibrary.NoticeWithdrawalRivalTeamMonster
// 0x0008 (0x0008 - 0x0000)
struct RivalTeamMonsterBlueprintFunctionLibrary_NoticeWithdrawalRivalTeamMonster final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RivalTeamMonsterBlueprintFunctionLibrary_NoticeWithdrawalRivalTeamMonster) == 0x000008, "Wrong alignment on RivalTeamMonsterBlueprintFunctionLibrary_NoticeWithdrawalRivalTeamMonster");
static_assert(sizeof(RivalTeamMonsterBlueprintFunctionLibrary_NoticeWithdrawalRivalTeamMonster) == 0x000008, "Wrong size on RivalTeamMonsterBlueprintFunctionLibrary_NoticeWithdrawalRivalTeamMonster");
static_assert(offsetof(RivalTeamMonsterBlueprintFunctionLibrary_NoticeWithdrawalRivalTeamMonster, Monster) == 0x000000, "Member 'RivalTeamMonsterBlueprintFunctionLibrary_NoticeWithdrawalRivalTeamMonster::Monster' has a wrong offset!");

// Function DarwinGame.RouteMap.SwitchLightGradually
// 0x0001 (0x0001 - 0x0000)
struct RouteMap_SwitchLightGradually final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RouteMap_SwitchLightGradually) == 0x000001, "Wrong alignment on RouteMap_SwitchLightGradually");
static_assert(sizeof(RouteMap_SwitchLightGradually) == 0x000001, "Wrong size on RouteMap_SwitchLightGradually");
static_assert(offsetof(RouteMap_SwitchLightGradually, on) == 0x000000, "Member 'RouteMap_SwitchLightGradually::on' has a wrong offset!");

// Function DarwinGame.RouteMap.SwitchPointLightGradually
// 0x0001 (0x0001 - 0x0000)
struct RouteMap_SwitchPointLightGradually final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RouteMap_SwitchPointLightGradually) == 0x000001, "Wrong alignment on RouteMap_SwitchPointLightGradually");
static_assert(sizeof(RouteMap_SwitchPointLightGradually) == 0x000001, "Wrong size on RouteMap_SwitchPointLightGradually");
static_assert(offsetof(RouteMap_SwitchPointLightGradually, on) == 0x000000, "Member 'RouteMap_SwitchPointLightGradually::on' has a wrong offset!");

// Function DarwinGame.RouteMap.GetStationID
// 0x0008 (0x0008 - 0x0000)
struct RouteMap_GetStationID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RouteMap_GetStationID) == 0x000004, "Wrong alignment on RouteMap_GetStationID");
static_assert(sizeof(RouteMap_GetStationID) == 0x000008, "Wrong size on RouteMap_GetStationID");
static_assert(offsetof(RouteMap_GetStationID, ReturnValue) == 0x000000, "Member 'RouteMap_GetStationID::ReturnValue' has a wrong offset!");

// Function DarwinGame.SaveManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct SaveManager_GetInstance final
{
public:
	class USaveManager*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveManager_GetInstance) == 0x000008, "Wrong alignment on SaveManager_GetInstance");
static_assert(sizeof(SaveManager_GetInstance) == 0x000008, "Wrong size on SaveManager_GetInstance");
static_assert(offsetof(SaveManager_GetInstance, ReturnValue) == 0x000000, "Member 'SaveManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.SequencerController.GetRebindOrders
// 0x0050 (0x0050 - 0x0000)
struct SequencerController_GetRebindOrders final
{
public:
	TMap<class FString, struct FST_SequencerRebindOrder> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerController_GetRebindOrders) == 0x000008, "Wrong alignment on SequencerController_GetRebindOrders");
static_assert(sizeof(SequencerController_GetRebindOrders) == 0x000050, "Wrong size on SequencerController_GetRebindOrders");
static_assert(offsetof(SequencerController_GetRebindOrders, ReturnValue) == 0x000000, "Member 'SequencerController_GetRebindOrders::ReturnValue' has a wrong offset!");

// Function DarwinGame.SequencerController.SetPlayLevelSequence
// 0x0010 (0x0010 - 0x0000)
struct SequencerController_SetPlayLevelSequence final
{
public:
	class ALevelSequenceActor*                    PlayMainLevelSequenceActor;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequencePlayer*                   PlayMainLevelSequencePlayer;                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerController_SetPlayLevelSequence) == 0x000008, "Wrong alignment on SequencerController_SetPlayLevelSequence");
static_assert(sizeof(SequencerController_SetPlayLevelSequence) == 0x000010, "Wrong size on SequencerController_SetPlayLevelSequence");
static_assert(offsetof(SequencerController_SetPlayLevelSequence, PlayMainLevelSequenceActor) == 0x000000, "Member 'SequencerController_SetPlayLevelSequence::PlayMainLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(SequencerController_SetPlayLevelSequence, PlayMainLevelSequencePlayer) == 0x000008, "Member 'SequencerController_SetPlayLevelSequence::PlayMainLevelSequencePlayer' has a wrong offset!");

// Function DarwinGame.SimpleModeAnimInstance.PlayMode
// 0x0001 (0x0001 - 0x0000)
struct SimpleModeAnimInstance_PlayMode final
{
public:
	EModeAnimMode                                 Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleModeAnimInstance_PlayMode) == 0x000001, "Wrong alignment on SimpleModeAnimInstance_PlayMode");
static_assert(sizeof(SimpleModeAnimInstance_PlayMode) == 0x000001, "Wrong size on SimpleModeAnimInstance_PlayMode");
static_assert(offsetof(SimpleModeAnimInstance_PlayMode, Mode) == 0x000000, "Member 'SimpleModeAnimInstance_PlayMode::Mode' has a wrong offset!");

// Function DarwinGame.SimpleModeAnimInstance.SetMode
// 0x0001 (0x0001 - 0x0000)
struct SimpleModeAnimInstance_SetMode final
{
public:
	EModeAnimMode                                 Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleModeAnimInstance_SetMode) == 0x000001, "Wrong alignment on SimpleModeAnimInstance_SetMode");
static_assert(sizeof(SimpleModeAnimInstance_SetMode) == 0x000001, "Wrong size on SimpleModeAnimInstance_SetMode");
static_assert(offsetof(SimpleModeAnimInstance_SetMode, Mode) == 0x000000, "Member 'SimpleModeAnimInstance_SetMode::Mode' has a wrong offset!");

// Function DarwinGame.SimpleModeAnimInstance.IsModeAndPlayAnimation
// 0x0002 (0x0002 - 0x0000)
struct SimpleModeAnimInstance_IsModeAndPlayAnimation final
{
public:
	EModeAnimMode                                 Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleModeAnimInstance_IsModeAndPlayAnimation) == 0x000001, "Wrong alignment on SimpleModeAnimInstance_IsModeAndPlayAnimation");
static_assert(sizeof(SimpleModeAnimInstance_IsModeAndPlayAnimation) == 0x000002, "Wrong size on SimpleModeAnimInstance_IsModeAndPlayAnimation");
static_assert(offsetof(SimpleModeAnimInstance_IsModeAndPlayAnimation, Mode) == 0x000000, "Member 'SimpleModeAnimInstance_IsModeAndPlayAnimation::Mode' has a wrong offset!");
static_assert(offsetof(SimpleModeAnimInstance_IsModeAndPlayAnimation, ReturnValue) == 0x000001, "Member 'SimpleModeAnimInstance_IsModeAndPlayAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.SimpleModeAnimInstance.IsModeAndSkipAnimation
// 0x0002 (0x0002 - 0x0000)
struct SimpleModeAnimInstance_IsModeAndSkipAnimation final
{
public:
	EModeAnimMode                                 Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleModeAnimInstance_IsModeAndSkipAnimation) == 0x000001, "Wrong alignment on SimpleModeAnimInstance_IsModeAndSkipAnimation");
static_assert(sizeof(SimpleModeAnimInstance_IsModeAndSkipAnimation) == 0x000002, "Wrong size on SimpleModeAnimInstance_IsModeAndSkipAnimation");
static_assert(offsetof(SimpleModeAnimInstance_IsModeAndSkipAnimation, Mode) == 0x000000, "Member 'SimpleModeAnimInstance_IsModeAndSkipAnimation::Mode' has a wrong offset!");
static_assert(offsetof(SimpleModeAnimInstance_IsModeAndSkipAnimation, ReturnValue) == 0x000001, "Member 'SimpleModeAnimInstance_IsModeAndSkipAnimation::ReturnValue' has a wrong offset!");

// Function DarwinGame.SlingShot.Grab
// 0x0004 (0x0004 - 0x0000)
struct SlingShot_Grab final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlingShot_Grab) == 0x000004, "Wrong alignment on SlingShot_Grab");
static_assert(sizeof(SlingShot_Grab) == 0x000004, "Wrong size on SlingShot_Grab");
static_assert(offsetof(SlingShot_Grab, Alpha) == 0x000000, "Member 'SlingShot_Grab::Alpha' has a wrong offset!");

// Function DarwinGame.SlingShot.Shot
// 0x0048 (0x0048 - 0x0000)
struct SlingShot_Shot final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGameplayEffectContainerSpec     Spec;                                              // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlingShot_Shot) == 0x000008, "Wrong alignment on SlingShot_Shot");
static_assert(sizeof(SlingShot_Shot) == 0x000048, "Wrong size on SlingShot_Shot");
static_assert(offsetof(SlingShot_Shot, ItemId) == 0x000000, "Member 'SlingShot_Shot::ItemId' has a wrong offset!");
static_assert(offsetof(SlingShot_Shot, actionDetailID) == 0x000008, "Member 'SlingShot_Shot::actionDetailID' has a wrong offset!");
static_assert(offsetof(SlingShot_Shot, Spec) == 0x000010, "Member 'SlingShot_Shot::Spec' has a wrong offset!");

// Function DarwinGame.SofdecMoviePlayer.GetPlayer
// 0x0008 (0x0008 - 0x0000)
struct SofdecMoviePlayer_GetPlayer final
{
public:
	class UManaComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SofdecMoviePlayer_GetPlayer) == 0x000008, "Wrong alignment on SofdecMoviePlayer_GetPlayer");
static_assert(sizeof(SofdecMoviePlayer_GetPlayer) == 0x000008, "Wrong size on SofdecMoviePlayer_GetPlayer");
static_assert(offsetof(SofdecMoviePlayer_GetPlayer, ReturnValue) == 0x000000, "Member 'SofdecMoviePlayer_GetPlayer::ReturnValue' has a wrong offset!");

// Function DarwinGame.SofdecMoviePlayer.IsEnd
// 0x0001 (0x0001 - 0x0000)
struct SofdecMoviePlayer_IsEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SofdecMoviePlayer_IsEnd) == 0x000001, "Wrong alignment on SofdecMoviePlayer_IsEnd");
static_assert(sizeof(SofdecMoviePlayer_IsEnd) == 0x000001, "Wrong size on SofdecMoviePlayer_IsEnd");
static_assert(offsetof(SofdecMoviePlayer_IsEnd, ReturnValue) == 0x000000, "Member 'SofdecMoviePlayer_IsEnd::ReturnValue' has a wrong offset!");

// Function DarwinGame.SofdecMoviePlayer.Prepare
// 0x000C (0x000C - 0x0000)
struct SofdecMoviePlayer_Prepare final
{
public:
	class FName                                   Path;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SofdecMoviePlayer_Prepare) == 0x000004, "Wrong alignment on SofdecMoviePlayer_Prepare");
static_assert(sizeof(SofdecMoviePlayer_Prepare) == 0x00000C, "Wrong size on SofdecMoviePlayer_Prepare");
static_assert(offsetof(SofdecMoviePlayer_Prepare, Path) == 0x000000, "Member 'SofdecMoviePlayer_Prepare::Path' has a wrong offset!");
static_assert(offsetof(SofdecMoviePlayer_Prepare, ReturnValue) == 0x000008, "Member 'SofdecMoviePlayer_Prepare::ReturnValue' has a wrong offset!");

// Function DarwinGame.SofdecMoviePlayer.SetPlayerTickableWhenPaused
// 0x0001 (0x0001 - 0x0000)
struct SofdecMoviePlayer_SetPlayerTickableWhenPaused final
{
public:
	bool                                          bTickableWhenPaused;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SofdecMoviePlayer_SetPlayerTickableWhenPaused) == 0x000001, "Wrong alignment on SofdecMoviePlayer_SetPlayerTickableWhenPaused");
static_assert(sizeof(SofdecMoviePlayer_SetPlayerTickableWhenPaused) == 0x000001, "Wrong size on SofdecMoviePlayer_SetPlayerTickableWhenPaused");
static_assert(offsetof(SofdecMoviePlayer_SetPlayerTickableWhenPaused, bTickableWhenPaused) == 0x000000, "Member 'SofdecMoviePlayer_SetPlayerTickableWhenPaused::bTickableWhenPaused' has a wrong offset!");

// Function DarwinGame.StationBase.EnableLine
// 0x0004 (0x0004 - 0x0000)
struct StationBase_EnableLine final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationBase_EnableLine) == 0x000004, "Wrong alignment on StationBase_EnableLine");
static_assert(sizeof(StationBase_EnableLine) == 0x000004, "Wrong size on StationBase_EnableLine");
static_assert(offsetof(StationBase_EnableLine, Time) == 0x000000, "Member 'StationBase_EnableLine::Time' has a wrong offset!");

// Function DarwinGame.StationBase.SwitchLightGradually
// 0x0001 (0x0001 - 0x0000)
struct StationBase_SwitchLightGradually final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationBase_SwitchLightGradually) == 0x000001, "Wrong alignment on StationBase_SwitchLightGradually");
static_assert(sizeof(StationBase_SwitchLightGradually) == 0x000001, "Wrong size on StationBase_SwitchLightGradually");
static_assert(offsetof(StationBase_SwitchLightGradually, on) == 0x000000, "Member 'StationBase_SwitchLightGradually::on' has a wrong offset!");

// Function DarwinGame.StationBase.GetTrainGuide
// 0x0018 (0x0018 - 0x0000)
struct StationBase_GetTrainGuide final
{
public:
	struct FVector                                OutStopLocation;                                   // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutInboundVector;                                  // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationBase_GetTrainGuide) == 0x000004, "Wrong alignment on StationBase_GetTrainGuide");
static_assert(sizeof(StationBase_GetTrainGuide) == 0x000018, "Wrong size on StationBase_GetTrainGuide");
static_assert(offsetof(StationBase_GetTrainGuide, OutStopLocation) == 0x000000, "Member 'StationBase_GetTrainGuide::OutStopLocation' has a wrong offset!");
static_assert(offsetof(StationBase_GetTrainGuide, OutInboundVector) == 0x00000C, "Member 'StationBase_GetTrainGuide::OutInboundVector' has a wrong offset!");

// Function DarwinGame.StationBase.GetTrainGuideInboundVector
// 0x000C (0x000C - 0x0000)
struct StationBase_GetTrainGuideInboundVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationBase_GetTrainGuideInboundVector) == 0x000004, "Wrong alignment on StationBase_GetTrainGuideInboundVector");
static_assert(sizeof(StationBase_GetTrainGuideInboundVector) == 0x00000C, "Wrong size on StationBase_GetTrainGuideInboundVector");
static_assert(offsetof(StationBase_GetTrainGuideInboundVector, ReturnValue) == 0x000000, "Member 'StationBase_GetTrainGuideInboundVector::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationBase.GetTrainGuideStopLocation
// 0x000C (0x000C - 0x0000)
struct StationBase_GetTrainGuideStopLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationBase_GetTrainGuideStopLocation) == 0x000004, "Wrong alignment on StationBase_GetTrainGuideStopLocation");
static_assert(sizeof(StationBase_GetTrainGuideStopLocation) == 0x00000C, "Wrong size on StationBase_GetTrainGuideStopLocation");
static_assert(offsetof(StationBase_GetTrainGuideStopLocation, ReturnValue) == 0x000000, "Member 'StationBase_GetTrainGuideStopLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.StationBase.IsRelease
// 0x0001 (0x0001 - 0x0000)
struct StationBase_IsRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StationBase_IsRelease) == 0x000001, "Wrong alignment on StationBase_IsRelease");
static_assert(sizeof(StationBase_IsRelease) == 0x000001, "Wrong size on StationBase_IsRelease");
static_assert(offsetof(StationBase_IsRelease, ReturnValue) == 0x000000, "Member 'StationBase_IsRelease::ReturnValue' has a wrong offset!");

// Function DarwinGame.TimeScaleComponent.IsActivateHitStop
// 0x0018 (0x0018 - 0x0000)
struct TimeScaleComponent_IsActivateHitStop final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalTrigger;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeScaleComponent_IsActivateHitStop) == 0x000008, "Wrong alignment on TimeScaleComponent_IsActivateHitStop");
static_assert(sizeof(TimeScaleComponent_IsActivateHitStop) == 0x000018, "Wrong size on TimeScaleComponent_IsActivateHitStop");
static_assert(offsetof(TimeScaleComponent_IsActivateHitStop, Attacker) == 0x000000, "Member 'TimeScaleComponent_IsActivateHitStop::Attacker' has a wrong offset!");
static_assert(offsetof(TimeScaleComponent_IsActivateHitStop, actionDetailID) == 0x000008, "Member 'TimeScaleComponent_IsActivateHitStop::actionDetailID' has a wrong offset!");
static_assert(offsetof(TimeScaleComponent_IsActivateHitStop, ExternalTrigger) == 0x000010, "Member 'TimeScaleComponent_IsActivateHitStop::ExternalTrigger' has a wrong offset!");
static_assert(offsetof(TimeScaleComponent_IsActivateHitStop, ReturnValue) == 0x000011, "Member 'TimeScaleComponent_IsActivateHitStop::ReturnValue' has a wrong offset!");

// Function DarwinGame.TimeScaleComponent.SetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct TimeScaleComponent_SetTimeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeScaleComponent_SetTimeScale) == 0x000004, "Wrong alignment on TimeScaleComponent_SetTimeScale");
static_assert(sizeof(TimeScaleComponent_SetTimeScale) == 0x000004, "Wrong size on TimeScaleComponent_SetTimeScale");
static_assert(offsetof(TimeScaleComponent_SetTimeScale, Scale) == 0x000000, "Member 'TimeScaleComponent_SetTimeScale::Scale' has a wrong offset!");

// Function DarwinGame.TimeScaleComponent.StartHitStop
// 0x0004 (0x0004 - 0x0000)
struct TimeScaleComponent_StartHitStop final
{
public:
	float                                         stopMsTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeScaleComponent_StartHitStop) == 0x000004, "Wrong alignment on TimeScaleComponent_StartHitStop");
static_assert(sizeof(TimeScaleComponent_StartHitStop) == 0x000004, "Wrong size on TimeScaleComponent_StartHitStop");
static_assert(offsetof(TimeScaleComponent_StartHitStop, stopMsTime) == 0x000000, "Member 'TimeScaleComponent_StartHitStop::stopMsTime' has a wrong offset!");

// Function DarwinGame.TimeScaleComponent.GetTimeScale
// 0x0004 (0x0004 - 0x0000)
struct TimeScaleComponent_GetTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeScaleComponent_GetTimeScale) == 0x000004, "Wrong alignment on TimeScaleComponent_GetTimeScale");
static_assert(sizeof(TimeScaleComponent_GetTimeScale) == 0x000004, "Wrong size on TimeScaleComponent_GetTimeScale");
static_assert(offsetof(TimeScaleComponent_GetTimeScale, ReturnValue) == 0x000000, "Member 'TimeScaleComponent_GetTimeScale::ReturnValue' has a wrong offset!");

// Function DarwinGame.UISign_IconAreaBase.SetData
// 0x0020 (0x0020 - 0x0000)
struct UISign_IconAreaBase_SetData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AreaName;                                          // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconAreaBase_SetData) == 0x000008, "Wrong alignment on UISign_IconAreaBase_SetData");
static_assert(sizeof(UISign_IconAreaBase_SetData) == 0x000020, "Wrong size on UISign_IconAreaBase_SetData");
static_assert(offsetof(UISign_IconAreaBase_SetData, ID) == 0x000000, "Member 'UISign_IconAreaBase_SetData::ID' has a wrong offset!");
static_assert(offsetof(UISign_IconAreaBase_SetData, AreaName) == 0x000008, "Member 'UISign_IconAreaBase_SetData::AreaName' has a wrong offset!");

// Function DarwinGame.TrialFunctionLibrary.IsTrial
// 0x0001 (0x0001 - 0x0000)
struct TrialFunctionLibrary_IsTrial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrialFunctionLibrary_IsTrial) == 0x000001, "Wrong alignment on TrialFunctionLibrary_IsTrial");
static_assert(sizeof(TrialFunctionLibrary_IsTrial) == 0x000001, "Wrong size on TrialFunctionLibrary_IsTrial");
static_assert(offsetof(TrialFunctionLibrary_IsTrial, ReturnValue) == 0x000000, "Member 'TrialFunctionLibrary_IsTrial::ReturnValue' has a wrong offset!");

// Function DarwinGame.UISign_IconLvupStatus.SetIsStatusIcon
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconLvupStatus_SetIsStatusIcon final
{
public:
	bool                                          IsIcon;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconLvupStatus_SetIsStatusIcon) == 0x000001, "Wrong alignment on UISign_IconLvupStatus_SetIsStatusIcon");
static_assert(sizeof(UISign_IconLvupStatus_SetIsStatusIcon) == 0x000001, "Wrong size on UISign_IconLvupStatus_SetIsStatusIcon");
static_assert(offsetof(UISign_IconLvupStatus_SetIsStatusIcon, IsIcon) == 0x000000, "Member 'UISign_IconLvupStatus_SetIsStatusIcon::IsIcon' has a wrong offset!");

// Function DarwinGame.UISign_IconLvupStatus.SetStatusList
// 0x0014 (0x0014 - 0x0000)
struct UISign_IconLvupStatus_SetStatusList final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InBeforeLevel;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCharacterID;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InUid;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconLvupStatus_SetStatusList) == 0x000004, "Wrong alignment on UISign_IconLvupStatus_SetStatusList");
static_assert(sizeof(UISign_IconLvupStatus_SetStatusList) == 0x000014, "Wrong size on UISign_IconLvupStatus_SetStatusList");
static_assert(offsetof(UISign_IconLvupStatus_SetStatusList, InLevel) == 0x000000, "Member 'UISign_IconLvupStatus_SetStatusList::InLevel' has a wrong offset!");
static_assert(offsetof(UISign_IconLvupStatus_SetStatusList, InBeforeLevel) == 0x000004, "Member 'UISign_IconLvupStatus_SetStatusList::InBeforeLevel' has a wrong offset!");
static_assert(offsetof(UISign_IconLvupStatus_SetStatusList, InCharacterID) == 0x000008, "Member 'UISign_IconLvupStatus_SetStatusList::InCharacterID' has a wrong offset!");
static_assert(offsetof(UISign_IconLvupStatus_SetStatusList, InUid) == 0x000010, "Member 'UISign_IconLvupStatus_SetStatusList::InUid' has a wrong offset!");

// Function DarwinGame.UIUtility.AddPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct UIUtility_AddPlayerGold final
{
public:
	int32                                         AddGold;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_AddPlayerGold) == 0x000004, "Wrong alignment on UIUtility_AddPlayerGold");
static_assert(sizeof(UIUtility_AddPlayerGold) == 0x000004, "Wrong size on UIUtility_AddPlayerGold");
static_assert(offsetof(UIUtility_AddPlayerGold, AddGold) == 0x000000, "Member 'UIUtility_AddPlayerGold::AddGold' has a wrong offset!");

// Function DarwinGame.UIUtility.CanGetUnclaimedBenefits
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_CanGetUnclaimedBenefits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_CanGetUnclaimedBenefits) == 0x000001, "Wrong alignment on UIUtility_CanGetUnclaimedBenefits");
static_assert(sizeof(UIUtility_CanGetUnclaimedBenefits) == 0x000001, "Wrong size on UIUtility_CanGetUnclaimedBenefits");
static_assert(offsetof(UIUtility_CanGetUnclaimedBenefits, ReturnValue) == 0x000000, "Member 'UIUtility_CanGetUnclaimedBenefits::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.CanUnlockFacilityDismiss
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_CanUnlockFacilityDismiss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_CanUnlockFacilityDismiss) == 0x000001, "Wrong alignment on UIUtility_CanUnlockFacilityDismiss");
static_assert(sizeof(UIUtility_CanUnlockFacilityDismiss) == 0x000001, "Wrong size on UIUtility_CanUnlockFacilityDismiss");
static_assert(offsetof(UIUtility_CanUnlockFacilityDismiss, ReturnValue) == 0x000000, "Member 'UIUtility_CanUnlockFacilityDismiss::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.CloseFieldStatus
// 0x0002 (0x0002 - 0x0000)
struct UIUtility_CloseFieldStatus final
{
public:
	EFieldStatusOpenType                          OpenType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_CloseFieldStatus) == 0x000001, "Wrong alignment on UIUtility_CloseFieldStatus");
static_assert(sizeof(UIUtility_CloseFieldStatus) == 0x000002, "Wrong size on UIUtility_CloseFieldStatus");
static_assert(offsetof(UIUtility_CloseFieldStatus, OpenType) == 0x000000, "Member 'UIUtility_CloseFieldStatus::OpenType' has a wrong offset!");
static_assert(offsetof(UIUtility_CloseFieldStatus, ReturnValue) == 0x000001, "Member 'UIUtility_CloseFieldStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.DynamicCreateWidgetFromClass
// 0x0018 (0x0018 - 0x0000)
struct UIUtility_DynamicCreateWidgetFromClass final
{
public:
	TSubclassOf<class UDarwinUserWidget>          DarwinUserWidgetClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      OutWidget;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_DynamicCreateWidgetFromClass) == 0x000008, "Wrong alignment on UIUtility_DynamicCreateWidgetFromClass");
static_assert(sizeof(UIUtility_DynamicCreateWidgetFromClass) == 0x000018, "Wrong size on UIUtility_DynamicCreateWidgetFromClass");
static_assert(offsetof(UIUtility_DynamicCreateWidgetFromClass, DarwinUserWidgetClass) == 0x000000, "Member 'UIUtility_DynamicCreateWidgetFromClass::DarwinUserWidgetClass' has a wrong offset!");
static_assert(offsetof(UIUtility_DynamicCreateWidgetFromClass, OutIndex) == 0x000008, "Member 'UIUtility_DynamicCreateWidgetFromClass::OutIndex' has a wrong offset!");
static_assert(offsetof(UIUtility_DynamicCreateWidgetFromClass, OutWidget) == 0x000010, "Member 'UIUtility_DynamicCreateWidgetFromClass::OutWidget' has a wrong offset!");

// Function DarwinGame.UIUtility.DynamicCreateWidgetFromSoftClass
// 0x0038 (0x0038 - 0x0000)
struct UIUtility_DynamicCreateWidgetFromSoftClass final
{
public:
	TSoftClassPtr<class UClass>                   DarwinUserWidgetClass;                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      OutWidget;                                         // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_DynamicCreateWidgetFromSoftClass) == 0x000008, "Wrong alignment on UIUtility_DynamicCreateWidgetFromSoftClass");
static_assert(sizeof(UIUtility_DynamicCreateWidgetFromSoftClass) == 0x000038, "Wrong size on UIUtility_DynamicCreateWidgetFromSoftClass");
static_assert(offsetof(UIUtility_DynamicCreateWidgetFromSoftClass, DarwinUserWidgetClass) == 0x000000, "Member 'UIUtility_DynamicCreateWidgetFromSoftClass::DarwinUserWidgetClass' has a wrong offset!");
static_assert(offsetof(UIUtility_DynamicCreateWidgetFromSoftClass, OutIndex) == 0x000028, "Member 'UIUtility_DynamicCreateWidgetFromSoftClass::OutIndex' has a wrong offset!");
static_assert(offsetof(UIUtility_DynamicCreateWidgetFromSoftClass, OutWidget) == 0x000030, "Member 'UIUtility_DynamicCreateWidgetFromSoftClass::OutWidget' has a wrong offset!");

// Function DarwinGame.UIUtility.ExitWidgetGroup
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_ExitWidgetGroup final
{
public:
	EManagedUIGroup                               Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_ExitWidgetGroup) == 0x000001, "Wrong alignment on UIUtility_ExitWidgetGroup");
static_assert(sizeof(UIUtility_ExitWidgetGroup) == 0x000001, "Wrong size on UIUtility_ExitWidgetGroup");
static_assert(offsetof(UIUtility_ExitWidgetGroup, Group) == 0x000000, "Member 'UIUtility_ExitWidgetGroup::Group' has a wrong offset!");

// Function DarwinGame.UIUtility.FormatItemFlavorText
// 0x0040 (0x0040 - 0x0000)
struct UIUtility_FormatItemFlavorText final
{
public:
	class FText                                   ItemText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EAreaType>                             AreaTypeList;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_FormatItemFlavorText) == 0x000008, "Wrong alignment on UIUtility_FormatItemFlavorText");
static_assert(sizeof(UIUtility_FormatItemFlavorText) == 0x000040, "Wrong size on UIUtility_FormatItemFlavorText");
static_assert(offsetof(UIUtility_FormatItemFlavorText, ItemText) == 0x000000, "Member 'UIUtility_FormatItemFlavorText::ItemText' has a wrong offset!");
static_assert(offsetof(UIUtility_FormatItemFlavorText, AreaTypeList) == 0x000018, "Member 'UIUtility_FormatItemFlavorText::AreaTypeList' has a wrong offset!");
static_assert(offsetof(UIUtility_FormatItemFlavorText, ReturnValue) == 0x000028, "Member 'UIUtility_FormatItemFlavorText::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.GetArtifactTypeName
// 0x0020 (0x0020 - 0x0000)
struct UIUtility_GetArtifactTypeName final
{
public:
	EArtifactType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetArtifactTypeName) == 0x000008, "Wrong alignment on UIUtility_GetArtifactTypeName");
static_assert(sizeof(UIUtility_GetArtifactTypeName) == 0x000020, "Wrong size on UIUtility_GetArtifactTypeName");
static_assert(offsetof(UIUtility_GetArtifactTypeName, Type) == 0x000000, "Member 'UIUtility_GetArtifactTypeName::Type' has a wrong offset!");
static_assert(offsetof(UIUtility_GetArtifactTypeName, ReturnValue) == 0x000008, "Member 'UIUtility_GetArtifactTypeName::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.GetHasTipsSchedule
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_GetHasTipsSchedule final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetHasTipsSchedule) == 0x000001, "Wrong alignment on UIUtility_GetHasTipsSchedule");
static_assert(sizeof(UIUtility_GetHasTipsSchedule) == 0x000001, "Wrong size on UIUtility_GetHasTipsSchedule");
static_assert(offsetof(UIUtility_GetHasTipsSchedule, ReturnValue) == 0x000000, "Member 'UIUtility_GetHasTipsSchedule::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.GetHubReceptionQuestIDs
// 0x0010 (0x0010 - 0x0000)
struct UIUtility_GetHubReceptionQuestIDs final
{
public:
	TArray<class FName>                           OutIDs;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetHubReceptionQuestIDs) == 0x000008, "Wrong alignment on UIUtility_GetHubReceptionQuestIDs");
static_assert(sizeof(UIUtility_GetHubReceptionQuestIDs) == 0x000010, "Wrong size on UIUtility_GetHubReceptionQuestIDs");
static_assert(offsetof(UIUtility_GetHubReceptionQuestIDs, OutIDs) == 0x000000, "Member 'UIUtility_GetHubReceptionQuestIDs::OutIDs' has a wrong offset!");

// Function DarwinGame.UIUtility.GetPlayerGold
// 0x0004 (0x0004 - 0x0000)
struct UIUtility_GetPlayerGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetPlayerGold) == 0x000004, "Wrong alignment on UIUtility_GetPlayerGold");
static_assert(sizeof(UIUtility_GetPlayerGold) == 0x000004, "Wrong size on UIUtility_GetPlayerGold");
static_assert(offsetof(UIUtility_GetPlayerGold, ReturnValue) == 0x000000, "Member 'UIUtility_GetPlayerGold::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.GetPlayerLocation
// 0x000C (0x000C - 0x0000)
struct UIUtility_GetPlayerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetPlayerLocation) == 0x000004, "Wrong alignment on UIUtility_GetPlayerLocation");
static_assert(sizeof(UIUtility_GetPlayerLocation) == 0x00000C, "Wrong size on UIUtility_GetPlayerLocation");
static_assert(offsetof(UIUtility_GetPlayerLocation, ReturnValue) == 0x000000, "Member 'UIUtility_GetPlayerLocation::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct UIUtility_GetPlayerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetPlayerName) == 0x000008, "Wrong alignment on UIUtility_GetPlayerName");
static_assert(sizeof(UIUtility_GetPlayerName) == 0x000018, "Wrong size on UIUtility_GetPlayerName");
static_assert(offsetof(UIUtility_GetPlayerName, ReturnValue) == 0x000000, "Member 'UIUtility_GetPlayerName::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.GetUnusedWidgetFromClass
// 0x0018 (0x0018 - 0x0000)
struct UIUtility_GetUnusedWidgetFromClass final
{
public:
	TSubclassOf<class UDarwinUserWidget>          DarwinUserWidgetClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      OutWidget;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetUnusedWidgetFromClass) == 0x000008, "Wrong alignment on UIUtility_GetUnusedWidgetFromClass");
static_assert(sizeof(UIUtility_GetUnusedWidgetFromClass) == 0x000018, "Wrong size on UIUtility_GetUnusedWidgetFromClass");
static_assert(offsetof(UIUtility_GetUnusedWidgetFromClass, DarwinUserWidgetClass) == 0x000000, "Member 'UIUtility_GetUnusedWidgetFromClass::DarwinUserWidgetClass' has a wrong offset!");
static_assert(offsetof(UIUtility_GetUnusedWidgetFromClass, OutIndex) == 0x000008, "Member 'UIUtility_GetUnusedWidgetFromClass::OutIndex' has a wrong offset!");
static_assert(offsetof(UIUtility_GetUnusedWidgetFromClass, OutWidget) == 0x000010, "Member 'UIUtility_GetUnusedWidgetFromClass::OutWidget' has a wrong offset!");

// Function DarwinGame.UIUtility.GetUnusedWidgetFromSoftClass
// 0x0038 (0x0038 - 0x0000)
struct UIUtility_GetUnusedWidgetFromSoftClass final
{
public:
	TSoftClassPtr<class UClass>                   DarwinUserWidgetClass;                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      OutWidget;                                         // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetUnusedWidgetFromSoftClass) == 0x000008, "Wrong alignment on UIUtility_GetUnusedWidgetFromSoftClass");
static_assert(sizeof(UIUtility_GetUnusedWidgetFromSoftClass) == 0x000038, "Wrong size on UIUtility_GetUnusedWidgetFromSoftClass");
static_assert(offsetof(UIUtility_GetUnusedWidgetFromSoftClass, DarwinUserWidgetClass) == 0x000000, "Member 'UIUtility_GetUnusedWidgetFromSoftClass::DarwinUserWidgetClass' has a wrong offset!");
static_assert(offsetof(UIUtility_GetUnusedWidgetFromSoftClass, OutIndex) == 0x000028, "Member 'UIUtility_GetUnusedWidgetFromSoftClass::OutIndex' has a wrong offset!");
static_assert(offsetof(UIUtility_GetUnusedWidgetFromSoftClass, OutWidget) == 0x000030, "Member 'UIUtility_GetUnusedWidgetFromSoftClass::OutWidget' has a wrong offset!");

// Function DarwinGame.UIUtility.GetWidgetFromClass
// 0x0018 (0x0018 - 0x0000)
struct UIUtility_GetWidgetFromClass final
{
public:
	TSubclassOf<class UDarwinUserWidget>          DarwinUserWidgetClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      OutWidget;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetWidgetFromClass) == 0x000008, "Wrong alignment on UIUtility_GetWidgetFromClass");
static_assert(sizeof(UIUtility_GetWidgetFromClass) == 0x000018, "Wrong size on UIUtility_GetWidgetFromClass");
static_assert(offsetof(UIUtility_GetWidgetFromClass, DarwinUserWidgetClass) == 0x000000, "Member 'UIUtility_GetWidgetFromClass::DarwinUserWidgetClass' has a wrong offset!");
static_assert(offsetof(UIUtility_GetWidgetFromClass, Index_0) == 0x000008, "Member 'UIUtility_GetWidgetFromClass::Index_0' has a wrong offset!");
static_assert(offsetof(UIUtility_GetWidgetFromClass, OutWidget) == 0x000010, "Member 'UIUtility_GetWidgetFromClass::OutWidget' has a wrong offset!");

// Function DarwinGame.UIUtility.GetWidgetFromSoftClass
// 0x0038 (0x0038 - 0x0000)
struct UIUtility_GetWidgetFromSoftClass final
{
public:
	TSoftClassPtr<class UClass>                   DarwinUserWidgetClass;                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      OutWidget;                                         // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_GetWidgetFromSoftClass) == 0x000008, "Wrong alignment on UIUtility_GetWidgetFromSoftClass");
static_assert(sizeof(UIUtility_GetWidgetFromSoftClass) == 0x000038, "Wrong size on UIUtility_GetWidgetFromSoftClass");
static_assert(offsetof(UIUtility_GetWidgetFromSoftClass, DarwinUserWidgetClass) == 0x000000, "Member 'UIUtility_GetWidgetFromSoftClass::DarwinUserWidgetClass' has a wrong offset!");
static_assert(offsetof(UIUtility_GetWidgetFromSoftClass, Index_0) == 0x000028, "Member 'UIUtility_GetWidgetFromSoftClass::Index_0' has a wrong offset!");
static_assert(offsetof(UIUtility_GetWidgetFromSoftClass, OutWidget) == 0x000030, "Member 'UIUtility_GetWidgetFromSoftClass::OutWidget' has a wrong offset!");

// Function DarwinGame.UIUtility.IfLoadEndOpenFieldStatus
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IfLoadEndOpenFieldStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IfLoadEndOpenFieldStatus) == 0x000001, "Wrong alignment on UIUtility_IfLoadEndOpenFieldStatus");
static_assert(sizeof(UIUtility_IfLoadEndOpenFieldStatus) == 0x000001, "Wrong size on UIUtility_IfLoadEndOpenFieldStatus");
static_assert(offsetof(UIUtility_IfLoadEndOpenFieldStatus, ReturnValue) == 0x000000, "Member 'UIUtility_IfLoadEndOpenFieldStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.InitWidgetGroup
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_InitWidgetGroup final
{
public:
	EManagedUIGroup                               Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_InitWidgetGroup) == 0x000001, "Wrong alignment on UIUtility_InitWidgetGroup");
static_assert(sizeof(UIUtility_InitWidgetGroup) == 0x000001, "Wrong size on UIUtility_InitWidgetGroup");
static_assert(offsetof(UIUtility_InitWidgetGroup, Group) == 0x000000, "Member 'UIUtility_InitWidgetGroup::Group' has a wrong offset!");

// Function DarwinGame.UIUtility.IsCloseBoard
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsCloseBoard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsCloseBoard) == 0x000001, "Wrong alignment on UIUtility_IsCloseBoard");
static_assert(sizeof(UIUtility_IsCloseBoard) == 0x000001, "Wrong size on UIUtility_IsCloseBoard");
static_assert(offsetof(UIUtility_IsCloseBoard, ReturnValue) == 0x000000, "Member 'UIUtility_IsCloseBoard::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsCloseDispatch
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsCloseDispatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsCloseDispatch) == 0x000001, "Wrong alignment on UIUtility_IsCloseDispatch");
static_assert(sizeof(UIUtility_IsCloseDispatch) == 0x000001, "Wrong size on UIUtility_IsCloseDispatch");
static_assert(offsetof(UIUtility_IsCloseDispatch, ReturnValue) == 0x000000, "Member 'UIUtility_IsCloseDispatch::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsCloseNetworkTop
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsCloseNetworkTop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsCloseNetworkTop) == 0x000001, "Wrong alignment on UIUtility_IsCloseNetworkTop");
static_assert(sizeof(UIUtility_IsCloseNetworkTop) == 0x000001, "Wrong size on UIUtility_IsCloseNetworkTop");
static_assert(offsetof(UIUtility_IsCloseNetworkTop, ReturnValue) == 0x000000, "Member 'UIUtility_IsCloseNetworkTop::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsInitWidgetGroup
// 0x0002 (0x0002 - 0x0000)
struct UIUtility_IsInitWidgetGroup final
{
public:
	EManagedUIGroup                               Group;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsInitWidgetGroup) == 0x000001, "Wrong alignment on UIUtility_IsInitWidgetGroup");
static_assert(sizeof(UIUtility_IsInitWidgetGroup) == 0x000002, "Wrong size on UIUtility_IsInitWidgetGroup");
static_assert(offsetof(UIUtility_IsInitWidgetGroup, Group) == 0x000000, "Member 'UIUtility_IsInitWidgetGroup::Group' has a wrong offset!");
static_assert(offsetof(UIUtility_IsInitWidgetGroup, ReturnValue) == 0x000001, "Member 'UIUtility_IsInitWidgetGroup::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsLargeSizeFlavorWindowByLanguage
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsLargeSizeFlavorWindowByLanguage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsLargeSizeFlavorWindowByLanguage) == 0x000001, "Wrong alignment on UIUtility_IsLargeSizeFlavorWindowByLanguage");
static_assert(sizeof(UIUtility_IsLargeSizeFlavorWindowByLanguage) == 0x000001, "Wrong size on UIUtility_IsLargeSizeFlavorWindowByLanguage");
static_assert(offsetof(UIUtility_IsLargeSizeFlavorWindowByLanguage, ReturnValue) == 0x000000, "Member 'UIUtility_IsLargeSizeFlavorWindowByLanguage::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsNewDispatch
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsNewDispatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsNewDispatch) == 0x000001, "Wrong alignment on UIUtility_IsNewDispatch");
static_assert(sizeof(UIUtility_IsNewDispatch) == 0x000001, "Wrong size on UIUtility_IsNewDispatch");
static_assert(offsetof(UIUtility_IsNewDispatch, ReturnValue) == 0x000000, "Member 'UIUtility_IsNewDispatch::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsNewFacilityReception
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsNewFacilityReception final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsNewFacilityReception) == 0x000001, "Wrong alignment on UIUtility_IsNewFacilityReception");
static_assert(sizeof(UIUtility_IsNewFacilityReception) == 0x000001, "Wrong size on UIUtility_IsNewFacilityReception");
static_assert(offsetof(UIUtility_IsNewFacilityReception, ReturnValue) == 0x000000, "Member 'UIUtility_IsNewFacilityReception::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsNewHubReception
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsNewHubReception final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsNewHubReception) == 0x000001, "Wrong alignment on UIUtility_IsNewHubReception");
static_assert(sizeof(UIUtility_IsNewHubReception) == 0x000001, "Wrong size on UIUtility_IsNewHubReception");
static_assert(offsetof(UIUtility_IsNewHubReception, ReturnValue) == 0x000000, "Member 'UIUtility_IsNewHubReception::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsOpenQuestMenuDirectly
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsOpenQuestMenuDirectly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsOpenQuestMenuDirectly) == 0x000001, "Wrong alignment on UIUtility_IsOpenQuestMenuDirectly");
static_assert(sizeof(UIUtility_IsOpenQuestMenuDirectly) == 0x000001, "Wrong size on UIUtility_IsOpenQuestMenuDirectly");
static_assert(offsetof(UIUtility_IsOpenQuestMenuDirectly, ReturnValue) == 0x000000, "Member 'UIUtility_IsOpenQuestMenuDirectly::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsOpenTeamMenuConfirmation
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsOpenTeamMenuConfirmation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsOpenTeamMenuConfirmation) == 0x000001, "Wrong alignment on UIUtility_IsOpenTeamMenuConfirmation");
static_assert(sizeof(UIUtility_IsOpenTeamMenuConfirmation) == 0x000001, "Wrong size on UIUtility_IsOpenTeamMenuConfirmation");
static_assert(offsetof(UIUtility_IsOpenTeamMenuConfirmation, ReturnValue) == 0x000000, "Member 'UIUtility_IsOpenTeamMenuConfirmation::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsOpenTeamMenuDirectly
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsOpenTeamMenuDirectly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsOpenTeamMenuDirectly) == 0x000001, "Wrong alignment on UIUtility_IsOpenTeamMenuDirectly");
static_assert(sizeof(UIUtility_IsOpenTeamMenuDirectly) == 0x000001, "Wrong size on UIUtility_IsOpenTeamMenuDirectly");
static_assert(offsetof(UIUtility_IsOpenTeamMenuDirectly, ReturnValue) == 0x000000, "Member 'UIUtility_IsOpenTeamMenuDirectly::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsPlayLevelUpAnim
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsPlayLevelUpAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsPlayLevelUpAnim) == 0x000001, "Wrong alignment on UIUtility_IsPlayLevelUpAnim");
static_assert(sizeof(UIUtility_IsPlayLevelUpAnim) == 0x000001, "Wrong size on UIUtility_IsPlayLevelUpAnim");
static_assert(offsetof(UIUtility_IsPlayLevelUpAnim, ReturnValue) == 0x000000, "Member 'UIUtility_IsPlayLevelUpAnim::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsRewordTypeContainUnclaimedBenefits
// 0x0002 (0x0002 - 0x0000)
struct UIUtility_IsRewordTypeContainUnclaimedBenefits final
{
public:
	EAddOnContentRewordType                       RewordType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsRewordTypeContainUnclaimedBenefits) == 0x000001, "Wrong alignment on UIUtility_IsRewordTypeContainUnclaimedBenefits");
static_assert(sizeof(UIUtility_IsRewordTypeContainUnclaimedBenefits) == 0x000002, "Wrong size on UIUtility_IsRewordTypeContainUnclaimedBenefits");
static_assert(offsetof(UIUtility_IsRewordTypeContainUnclaimedBenefits, RewordType) == 0x000000, "Member 'UIUtility_IsRewordTypeContainUnclaimedBenefits::RewordType' has a wrong offset!");
static_assert(offsetof(UIUtility_IsRewordTypeContainUnclaimedBenefits, ReturnValue) == 0x000001, "Member 'UIUtility_IsRewordTypeContainUnclaimedBenefits::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.IsUnclaimedBenefits
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_IsUnclaimedBenefits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_IsUnclaimedBenefits) == 0x000001, "Wrong alignment on UIUtility_IsUnclaimedBenefits");
static_assert(sizeof(UIUtility_IsUnclaimedBenefits) == 0x000001, "Wrong size on UIUtility_IsUnclaimedBenefits");
static_assert(offsetof(UIUtility_IsUnclaimedBenefits, ReturnValue) == 0x000000, "Member 'UIUtility_IsUnclaimedBenefits::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.LastBattleQTESevenStoneGetBackLog
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_LastBattleQTESevenStoneGetBackLog final
{
public:
	ELastBtlQTELogType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_LastBattleQTESevenStoneGetBackLog) == 0x000001, "Wrong alignment on UIUtility_LastBattleQTESevenStoneGetBackLog");
static_assert(sizeof(UIUtility_LastBattleQTESevenStoneGetBackLog) == 0x000001, "Wrong size on UIUtility_LastBattleQTESevenStoneGetBackLog");
static_assert(offsetof(UIUtility_LastBattleQTESevenStoneGetBackLog, Type) == 0x000000, "Member 'UIUtility_LastBattleQTESevenStoneGetBackLog::Type' has a wrong offset!");

// Function DarwinGame.UIUtility.LoadTexture
// 0x0020 (0x0020 - 0x0000)
struct UIUtility_LoadTexture final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_LoadTexture) == 0x000008, "Wrong alignment on UIUtility_LoadTexture");
static_assert(sizeof(UIUtility_LoadTexture) == 0x000020, "Wrong size on UIUtility_LoadTexture");
static_assert(offsetof(UIUtility_LoadTexture, Outer_0) == 0x000000, "Member 'UIUtility_LoadTexture::Outer_0' has a wrong offset!");
static_assert(offsetof(UIUtility_LoadTexture, Path) == 0x000008, "Member 'UIUtility_LoadTexture::Path' has a wrong offset!");
static_assert(offsetof(UIUtility_LoadTexture, ReturnValue) == 0x000018, "Member 'UIUtility_LoadTexture::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.LoadTextureSoft
// 0x0038 (0x0038 - 0x0000)
struct UIUtility_LoadTextureSoft final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SoftObjectReference;                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_LoadTextureSoft) == 0x000008, "Wrong alignment on UIUtility_LoadTextureSoft");
static_assert(sizeof(UIUtility_LoadTextureSoft) == 0x000038, "Wrong size on UIUtility_LoadTextureSoft");
static_assert(offsetof(UIUtility_LoadTextureSoft, Outer_0) == 0x000000, "Member 'UIUtility_LoadTextureSoft::Outer_0' has a wrong offset!");
static_assert(offsetof(UIUtility_LoadTextureSoft, SoftObjectReference) == 0x000008, "Member 'UIUtility_LoadTextureSoft::SoftObjectReference' has a wrong offset!");
static_assert(offsetof(UIUtility_LoadTextureSoft, ReturnValue) == 0x000030, "Member 'UIUtility_LoadTextureSoft::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.OpenDelayedTips
// 0x000C (0x000C - 0x0000)
struct UIUtility_OpenDelayedTips final
{
public:
	class FName                                   TipsID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_OpenDelayedTips) == 0x000004, "Wrong alignment on UIUtility_OpenDelayedTips");
static_assert(sizeof(UIUtility_OpenDelayedTips) == 0x00000C, "Wrong size on UIUtility_OpenDelayedTips");
static_assert(offsetof(UIUtility_OpenDelayedTips, TipsID) == 0x000000, "Member 'UIUtility_OpenDelayedTips::TipsID' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenDelayedTips, DelayTime) == 0x000008, "Member 'UIUtility_OpenDelayedTips::DelayTime' has a wrong offset!");

// Function DarwinGame.UIUtility.OpenFieldStatus
// 0x0002 (0x0002 - 0x0000)
struct UIUtility_OpenFieldStatus final
{
public:
	EFieldStatusOpenType                          OpenType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_OpenFieldStatus) == 0x000001, "Wrong alignment on UIUtility_OpenFieldStatus");
static_assert(sizeof(UIUtility_OpenFieldStatus) == 0x000002, "Wrong size on UIUtility_OpenFieldStatus");
static_assert(offsetof(UIUtility_OpenFieldStatus, OpenType) == 0x000000, "Member 'UIUtility_OpenFieldStatus::OpenType' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenFieldStatus, ReturnValue) == 0x000001, "Member 'UIUtility_OpenFieldStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.OpenMyArtifact
// 0x0004 (0x0004 - 0x0000)
struct UIUtility_OpenMyArtifact final
{
public:
	int32                                         PedestalIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_OpenMyArtifact) == 0x000004, "Wrong alignment on UIUtility_OpenMyArtifact");
static_assert(sizeof(UIUtility_OpenMyArtifact) == 0x000004, "Wrong size on UIUtility_OpenMyArtifact");
static_assert(offsetof(UIUtility_OpenMyArtifact, PedestalIndex) == 0x000000, "Member 'UIUtility_OpenMyArtifact::PedestalIndex' has a wrong offset!");

// Function DarwinGame.UIUtility.OpenNetworkTop
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_OpenNetworkTop final
{
public:
	EOpenNetworkUIType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_OpenNetworkTop) == 0x000001, "Wrong alignment on UIUtility_OpenNetworkTop");
static_assert(sizeof(UIUtility_OpenNetworkTop) == 0x000001, "Wrong size on UIUtility_OpenNetworkTop");
static_assert(offsetof(UIUtility_OpenNetworkTop, Type) == 0x000000, "Member 'UIUtility_OpenNetworkTop::Type' has a wrong offset!");

// Function DarwinGame.UIUtility.OpenQuestMenuDirectly
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_OpenQuestMenuDirectly final
{
public:
	EQuestMenuOpenType                            InOpenType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_OpenQuestMenuDirectly) == 0x000001, "Wrong alignment on UIUtility_OpenQuestMenuDirectly");
static_assert(sizeof(UIUtility_OpenQuestMenuDirectly) == 0x000001, "Wrong size on UIUtility_OpenQuestMenuDirectly");
static_assert(offsetof(UIUtility_OpenQuestMenuDirectly, InOpenType) == 0x000000, "Member 'UIUtility_OpenQuestMenuDirectly::InOpenType' has a wrong offset!");

// Function DarwinGame.UIUtility.OpenQuestOrder
// 0x0020 (0x0020 - 0x0000)
struct UIUtility_OpenQuestOrder final
{
public:
	TArray<class FName>                           QuestIdList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcID;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsParentDisplay;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsNewOrderQuest;                                // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsClearedDisplay;                               // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsClosedPlayEvent;                              // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIUtility_OpenQuestOrder) == 0x000008, "Wrong alignment on UIUtility_OpenQuestOrder");
static_assert(sizeof(UIUtility_OpenQuestOrder) == 0x000020, "Wrong size on UIUtility_OpenQuestOrder");
static_assert(offsetof(UIUtility_OpenQuestOrder, QuestIdList) == 0x000000, "Member 'UIUtility_OpenQuestOrder::QuestIdList' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenQuestOrder, NpcID) == 0x000010, "Member 'UIUtility_OpenQuestOrder::NpcID' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenQuestOrder, bIsParentDisplay) == 0x000018, "Member 'UIUtility_OpenQuestOrder::bIsParentDisplay' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenQuestOrder, bInIsNewOrderQuest) == 0x000019, "Member 'UIUtility_OpenQuestOrder::bInIsNewOrderQuest' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenQuestOrder, bInIsClearedDisplay) == 0x00001A, "Member 'UIUtility_OpenQuestOrder::bInIsClearedDisplay' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenQuestOrder, bInIsClosedPlayEvent) == 0x00001B, "Member 'UIUtility_OpenQuestOrder::bInIsClosedPlayEvent' has a wrong offset!");
static_assert(offsetof(UIUtility_OpenQuestOrder, ReturnValue) == 0x00001C, "Member 'UIUtility_OpenQuestOrder::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.OpenShop
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_OpenShop final
{
public:
	ETradePlace                                   TradePlace;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_OpenShop) == 0x000001, "Wrong alignment on UIUtility_OpenShop");
static_assert(sizeof(UIUtility_OpenShop) == 0x000001, "Wrong size on UIUtility_OpenShop");
static_assert(offsetof(UIUtility_OpenShop, TradePlace) == 0x000000, "Member 'UIUtility_OpenShop::TradePlace' has a wrong offset!");

// Function DarwinGame.UIUtility.ReOpenQuestOrder
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_ReOpenQuestOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_ReOpenQuestOrder) == 0x000001, "Wrong alignment on UIUtility_ReOpenQuestOrder");
static_assert(sizeof(UIUtility_ReOpenQuestOrder) == 0x000001, "Wrong size on UIUtility_ReOpenQuestOrder");
static_assert(offsetof(UIUtility_ReOpenQuestOrder, ReturnValue) == 0x000000, "Member 'UIUtility_ReOpenQuestOrder::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIUtility.SetSubtitlesText
// 0x0010 (0x0010 - 0x0000)
struct UIUtility_SetSubtitlesText final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_SetSubtitlesText) == 0x000008, "Wrong alignment on UIUtility_SetSubtitlesText");
static_assert(sizeof(UIUtility_SetSubtitlesText) == 0x000010, "Wrong size on UIUtility_SetSubtitlesText");
static_assert(offsetof(UIUtility_SetSubtitlesText, inString) == 0x000000, "Member 'UIUtility_SetSubtitlesText::inString' has a wrong offset!");

// Function DarwinGame.UIUtility.SubtitlesMaskIn
// 0x0004 (0x0004 - 0x0000)
struct UIUtility_SubtitlesMaskIn final
{
public:
	float                                         AnimationSeconds;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_SubtitlesMaskIn) == 0x000004, "Wrong alignment on UIUtility_SubtitlesMaskIn");
static_assert(sizeof(UIUtility_SubtitlesMaskIn) == 0x000004, "Wrong size on UIUtility_SubtitlesMaskIn");
static_assert(offsetof(UIUtility_SubtitlesMaskIn, AnimationSeconds) == 0x000000, "Member 'UIUtility_SubtitlesMaskIn::AnimationSeconds' has a wrong offset!");

// Function DarwinGame.UIUtility.SubtitlesMaskOut
// 0x0004 (0x0004 - 0x0000)
struct UIUtility_SubtitlesMaskOut final
{
public:
	float                                         AnimationSeconds;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_SubtitlesMaskOut) == 0x000004, "Wrong alignment on UIUtility_SubtitlesMaskOut");
static_assert(sizeof(UIUtility_SubtitlesMaskOut) == 0x000004, "Wrong size on UIUtility_SubtitlesMaskOut");
static_assert(offsetof(UIUtility_SubtitlesMaskOut, AnimationSeconds) == 0x000000, "Member 'UIUtility_SubtitlesMaskOut::AnimationSeconds' has a wrong offset!");

// Function DarwinGame.UIUtility.ThreePeopleMaskIn
// 0x0004 (0x0004 - 0x0000)
struct UIUtility_ThreePeopleMaskIn final
{
public:
	float                                         AnimationSeconds;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_ThreePeopleMaskIn) == 0x000004, "Wrong alignment on UIUtility_ThreePeopleMaskIn");
static_assert(sizeof(UIUtility_ThreePeopleMaskIn) == 0x000004, "Wrong size on UIUtility_ThreePeopleMaskIn");
static_assert(offsetof(UIUtility_ThreePeopleMaskIn, AnimationSeconds) == 0x000000, "Member 'UIUtility_ThreePeopleMaskIn::AnimationSeconds' has a wrong offset!");

// Function DarwinGame.UIUtility.ThreePeopleMaskOut
// 0x0004 (0x0004 - 0x0000)
struct UIUtility_ThreePeopleMaskOut final
{
public:
	float                                         AnimationSeconds;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_ThreePeopleMaskOut) == 0x000004, "Wrong alignment on UIUtility_ThreePeopleMaskOut");
static_assert(sizeof(UIUtility_ThreePeopleMaskOut) == 0x000004, "Wrong size on UIUtility_ThreePeopleMaskOut");
static_assert(offsetof(UIUtility_ThreePeopleMaskOut, AnimationSeconds) == 0x000000, "Member 'UIUtility_ThreePeopleMaskOut::AnimationSeconds' has a wrong offset!");

// Function DarwinGame.UIUtility.UIMapDrawEnterArea
// 0x0001 (0x0001 - 0x0000)
struct UIUtility_UIMapDrawEnterArea final
{
public:
	EAreaType                                     AreaType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtility_UIMapDrawEnterArea) == 0x000001, "Wrong alignment on UIUtility_UIMapDrawEnterArea");
static_assert(sizeof(UIUtility_UIMapDrawEnterArea) == 0x000001, "Wrong size on UIUtility_UIMapDrawEnterArea");
static_assert(offsetof(UIUtility_UIMapDrawEnterArea, AreaType) == 0x000000, "Member 'UIUtility_UIMapDrawEnterArea::AreaType' has a wrong offset!");

// Function DarwinGame.UICoinRankIcon.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UICoinRankIcon_InitWidget final
{
public:
	TArray<class UWidgetAnimation*>               rankAnmAry;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICoinRankIcon_InitWidget) == 0x000008, "Wrong alignment on UICoinRankIcon_InitWidget");
static_assert(sizeof(UICoinRankIcon_InitWidget) == 0x000010, "Wrong size on UICoinRankIcon_InitWidget");
static_assert(offsetof(UICoinRankIcon_InitWidget, rankAnmAry) == 0x000000, "Member 'UICoinRankIcon_InitWidget::rankAnmAry' has a wrong offset!");

// Function DarwinGame.UICoinRankIcon.SetData
// 0x0004 (0x0004 - 0x0000)
struct UICoinRankIcon_SetData final
{
public:
	int32                                         InParam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICoinRankIcon_SetData) == 0x000004, "Wrong alignment on UICoinRankIcon_SetData");
static_assert(sizeof(UICoinRankIcon_SetData) == 0x000004, "Wrong size on UICoinRankIcon_SetData");
static_assert(offsetof(UICoinRankIcon_SetData, InParam) == 0x000000, "Member 'UICoinRankIcon_SetData::InParam' has a wrong offset!");

// Function DarwinGame.UIShot_IconReticle.PlayHoldOnAnimation
// 0x0004 (0x0004 - 0x0000)
struct UIShot_IconReticle_PlayHoldOnAnimation final
{
public:
	float                                         PlaybackSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_IconReticle_PlayHoldOnAnimation) == 0x000004, "Wrong alignment on UIShot_IconReticle_PlayHoldOnAnimation");
static_assert(sizeof(UIShot_IconReticle_PlayHoldOnAnimation) == 0x000004, "Wrong size on UIShot_IconReticle_PlayHoldOnAnimation");
static_assert(offsetof(UIShot_IconReticle_PlayHoldOnAnimation, PlaybackSpeed) == 0x000000, "Member 'UIShot_IconReticle_PlayHoldOnAnimation::PlaybackSpeed' has a wrong offset!");

// Function DarwinGame.UIShot_IconReticle.SetAim
// 0x0001 (0x0001 - 0x0000)
struct UIShot_IconReticle_SetAim final
{
public:
	bool                                          IsAim;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_IconReticle_SetAim) == 0x000001, "Wrong alignment on UIShot_IconReticle_SetAim");
static_assert(sizeof(UIShot_IconReticle_SetAim) == 0x000001, "Wrong size on UIShot_IconReticle_SetAim");
static_assert(offsetof(UIShot_IconReticle_SetAim, IsAim) == 0x000000, "Member 'UIShot_IconReticle_SetAim::IsAim' has a wrong offset!");

// Function DarwinGame.UIShot_IconReticle.SetReticleVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIShot_IconReticle_SetReticleVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_IconReticle_SetReticleVisibility) == 0x000001, "Wrong alignment on UIShot_IconReticle_SetReticleVisibility");
static_assert(sizeof(UIShot_IconReticle_SetReticleVisibility) == 0x000001, "Wrong size on UIShot_IconReticle_SetReticleVisibility");
static_assert(offsetof(UIShot_IconReticle_SetReticleVisibility, visible) == 0x000000, "Member 'UIShot_IconReticle_SetReticleVisibility::visible' has a wrong offset!");

// Function DarwinGame.UIDiscovery_00.SetGaugeData
// 0x0004 (0x0004 - 0x0000)
struct UIDiscovery_00_SetGaugeData final
{
public:
	float                                         InNowDiscoveryPoint;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDiscovery_00_SetGaugeData) == 0x000004, "Wrong alignment on UIDiscovery_00_SetGaugeData");
static_assert(sizeof(UIDiscovery_00_SetGaugeData) == 0x000004, "Wrong size on UIDiscovery_00_SetGaugeData");
static_assert(offsetof(UIDiscovery_00_SetGaugeData, InNowDiscoveryPoint) == 0x000000, "Member 'UIDiscovery_00_SetGaugeData::InNowDiscoveryPoint' has a wrong offset!");

// Function DarwinGame.UIDiscovery_00.SetupData
// 0x0010 (0x0010 - 0x0000)
struct UIDiscovery_00_SetupData final
{
public:
	class AActor*                                 InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxDiscoveryPoint;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InNowDiscoveryPoint;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDiscovery_00_SetupData) == 0x000008, "Wrong alignment on UIDiscovery_00_SetupData");
static_assert(sizeof(UIDiscovery_00_SetupData) == 0x000010, "Wrong size on UIDiscovery_00_SetupData");
static_assert(offsetof(UIDiscovery_00_SetupData, InTarget) == 0x000000, "Member 'UIDiscovery_00_SetupData::InTarget' has a wrong offset!");
static_assert(offsetof(UIDiscovery_00_SetupData, InMaxDiscoveryPoint) == 0x000008, "Member 'UIDiscovery_00_SetupData::InMaxDiscoveryPoint' has a wrong offset!");
static_assert(offsetof(UIDiscovery_00_SetupData, InNowDiscoveryPoint) == 0x00000C, "Member 'UIDiscovery_00_SetupData::InNowDiscoveryPoint' has a wrong offset!");

// Function DarwinGame.UIDiscovery_Icon.SetData
// 0x0004 (0x0004 - 0x0000)
struct UIDiscovery_Icon_SetData final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDiscovery_Icon_SetData) == 0x000004, "Wrong alignment on UIDiscovery_Icon_SetData");
static_assert(sizeof(UIDiscovery_Icon_SetData) == 0x000004, "Wrong size on UIDiscovery_Icon_SetData");
static_assert(offsetof(UIDiscovery_Icon_SetData, Percent) == 0x000000, "Member 'UIDiscovery_Icon_SetData::Percent' has a wrong offset!");

// Function DarwinGame.UIQuestQueueSystem.SetQueueProcess
// 0x0010 (0x0010 - 0x0000)
struct UIQuestQueueSystem_SetQueueProcess final
{
public:
	EUIQuestQueueProcessType                      InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InQuestID;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDirecting;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIQuestQueueSystem_SetQueueProcess) == 0x000004, "Wrong alignment on UIQuestQueueSystem_SetQueueProcess");
static_assert(sizeof(UIQuestQueueSystem_SetQueueProcess) == 0x000010, "Wrong size on UIQuestQueueSystem_SetQueueProcess");
static_assert(offsetof(UIQuestQueueSystem_SetQueueProcess, InType) == 0x000000, "Member 'UIQuestQueueSystem_SetQueueProcess::InType' has a wrong offset!");
static_assert(offsetof(UIQuestQueueSystem_SetQueueProcess, InQuestID) == 0x000004, "Member 'UIQuestQueueSystem_SetQueueProcess::InQuestID' has a wrong offset!");
static_assert(offsetof(UIQuestQueueSystem_SetQueueProcess, bInIsDirecting) == 0x00000C, "Member 'UIQuestQueueSystem_SetQueueProcess::bInIsDirecting' has a wrong offset!");

// Function DarwinGame.UIFade.FadeInScreen
// 0x0004 (0x0004 - 0x0000)
struct UIFade_FadeInScreen final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFade_FadeInScreen) == 0x000004, "Wrong alignment on UIFade_FadeInScreen");
static_assert(sizeof(UIFade_FadeInScreen) == 0x000004, "Wrong size on UIFade_FadeInScreen");
static_assert(offsetof(UIFade_FadeInScreen, Time) == 0x000000, "Member 'UIFade_FadeInScreen::Time' has a wrong offset!");

// Function DarwinGame.UIFade.FadeOutScreen
// 0x0018 (0x0018 - 0x0000)
struct UIFade_FadeOutScreen final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFadeZOrderType                               ZorderType;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFade_FadeOutScreen) == 0x000004, "Wrong alignment on UIFade_FadeOutScreen");
static_assert(sizeof(UIFade_FadeOutScreen) == 0x000018, "Wrong size on UIFade_FadeOutScreen");
static_assert(offsetof(UIFade_FadeOutScreen, Time) == 0x000000, "Member 'UIFade_FadeOutScreen::Time' has a wrong offset!");
static_assert(offsetof(UIFade_FadeOutScreen, Color) == 0x000004, "Member 'UIFade_FadeOutScreen::Color' has a wrong offset!");
static_assert(offsetof(UIFade_FadeOutScreen, ZorderType) == 0x000014, "Member 'UIFade_FadeOutScreen::ZorderType' has a wrong offset!");

// Function DarwinGame.UIFade.FadeOutScreenKeepAlpha
// 0x0018 (0x0018 - 0x0000)
struct UIFade_FadeOutScreenKeepAlpha final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFadeZOrderType                               ZorderType;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIFade_FadeOutScreenKeepAlpha) == 0x000004, "Wrong alignment on UIFade_FadeOutScreenKeepAlpha");
static_assert(sizeof(UIFade_FadeOutScreenKeepAlpha) == 0x000018, "Wrong size on UIFade_FadeOutScreenKeepAlpha");
static_assert(offsetof(UIFade_FadeOutScreenKeepAlpha, Time) == 0x000000, "Member 'UIFade_FadeOutScreenKeepAlpha::Time' has a wrong offset!");
static_assert(offsetof(UIFade_FadeOutScreenKeepAlpha, Color) == 0x000004, "Member 'UIFade_FadeOutScreenKeepAlpha::Color' has a wrong offset!");
static_assert(offsetof(UIFade_FadeOutScreenKeepAlpha, ZorderType) == 0x000014, "Member 'UIFade_FadeOutScreenKeepAlpha::ZorderType' has a wrong offset!");

// Function DarwinGame.UIFade.IsFadeActive
// 0x0001 (0x0001 - 0x0000)
struct UIFade_IsFadeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFade_IsFadeActive) == 0x000001, "Wrong alignment on UIFade_IsFadeActive");
static_assert(sizeof(UIFade_IsFadeActive) == 0x000001, "Wrong size on UIFade_IsFadeActive");
static_assert(offsetof(UIFade_IsFadeActive, ReturnValue) == 0x000000, "Member 'UIFade_IsFadeActive::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIFade.ReAddViewPort
// 0x0001 (0x0001 - 0x0000)
struct UIFade_ReAddViewPort final
{
public:
	EFadeZOrderType                               ZorderType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFade_ReAddViewPort) == 0x000001, "Wrong alignment on UIFade_ReAddViewPort");
static_assert(sizeof(UIFade_ReAddViewPort) == 0x000001, "Wrong size on UIFade_ReAddViewPort");
static_assert(offsetof(UIFade_ReAddViewPort, ZorderType) == 0x000000, "Member 'UIFade_ReAddViewPort::ZorderType' has a wrong offset!");

// Function DarwinGame.UIFade.GetCurrentFrameRate
// 0x0004 (0x0004 - 0x0000)
struct UIFade_GetCurrentFrameRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFade_GetCurrentFrameRate) == 0x000004, "Wrong alignment on UIFade_GetCurrentFrameRate");
static_assert(sizeof(UIFade_GetCurrentFrameRate) == 0x000004, "Wrong size on UIFade_GetCurrentFrameRate");
static_assert(offsetof(UIFade_GetCurrentFrameRate, ReturnValue) == 0x000000, "Member 'UIFade_GetCurrentFrameRate::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIFade.GetFadeType
// 0x0001 (0x0001 - 0x0000)
struct UIFade_GetFadeType final
{
public:
	EUIFadeType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFade_GetFadeType) == 0x000001, "Wrong alignment on UIFade_GetFadeType");
static_assert(sizeof(UIFade_GetFadeType) == 0x000001, "Wrong size on UIFade_GetFadeType");
static_assert(offsetof(UIFade_GetFadeType, ReturnValue) == 0x000000, "Member 'UIFade_GetFadeType::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_IconLink.ResetButtonData
// 0x0001 (0x0001 - 0x0000)
struct UIField_IconLink_ResetButtonData final
{
public:
	EAxisMappingType                              Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLink_ResetButtonData) == 0x000001, "Wrong alignment on UIField_IconLink_ResetButtonData");
static_assert(sizeof(UIField_IconLink_ResetButtonData) == 0x000001, "Wrong size on UIField_IconLink_ResetButtonData");
static_assert(offsetof(UIField_IconLink_ResetButtonData, Button) == 0x000000, "Member 'UIField_IconLink_ResetButtonData::Button' has a wrong offset!");

// Function DarwinGame.UIField_IconLink.SetCanUseButton
// 0x0004 (0x0004 - 0x0000)
struct UIField_IconLink_SetCanUseButton final
{
public:
	ELinkType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisMappingType                              Button;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUse;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRecast;                                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLink_SetCanUseButton) == 0x000001, "Wrong alignment on UIField_IconLink_SetCanUseButton");
static_assert(sizeof(UIField_IconLink_SetCanUseButton) == 0x000004, "Wrong size on UIField_IconLink_SetCanUseButton");
static_assert(offsetof(UIField_IconLink_SetCanUseButton, Type) == 0x000000, "Member 'UIField_IconLink_SetCanUseButton::Type' has a wrong offset!");
static_assert(offsetof(UIField_IconLink_SetCanUseButton, Button) == 0x000001, "Member 'UIField_IconLink_SetCanUseButton::Button' has a wrong offset!");
static_assert(offsetof(UIField_IconLink_SetCanUseButton, bCanUse) == 0x000002, "Member 'UIField_IconLink_SetCanUseButton::bCanUse' has a wrong offset!");
static_assert(offsetof(UIField_IconLink_SetCanUseButton, bIsRecast) == 0x000003, "Member 'UIField_IconLink_SetCanUseButton::bIsRecast' has a wrong offset!");

// Function DarwinGame.UIField_IconLink.SetLinkType
// 0x0001 (0x0001 - 0x0000)
struct UIField_IconLink_SetLinkType final
{
public:
	ELinkType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLink_SetLinkType) == 0x000001, "Wrong alignment on UIField_IconLink_SetLinkType");
static_assert(sizeof(UIField_IconLink_SetLinkType) == 0x000001, "Wrong size on UIField_IconLink_SetLinkType");
static_assert(offsetof(UIField_IconLink_SetLinkType, Type) == 0x000000, "Member 'UIField_IconLink_SetLinkType::Type' has a wrong offset!");

// Function DarwinGame.UIField_IconLink.SetMonsterIcon
// 0x000C (0x000C - 0x0000)
struct UIField_IconLink_SetMonsterIcon final
{
public:
	EAxisMappingType                              Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KindId;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLink_SetMonsterIcon) == 0x000004, "Wrong alignment on UIField_IconLink_SetMonsterIcon");
static_assert(sizeof(UIField_IconLink_SetMonsterIcon) == 0x00000C, "Wrong size on UIField_IconLink_SetMonsterIcon");
static_assert(offsetof(UIField_IconLink_SetMonsterIcon, Button) == 0x000000, "Member 'UIField_IconLink_SetMonsterIcon::Button' has a wrong offset!");
static_assert(offsetof(UIField_IconLink_SetMonsterIcon, KindId) == 0x000004, "Member 'UIField_IconLink_SetMonsterIcon::KindId' has a wrong offset!");

// Function DarwinGame.UIField_IconLink.SetRecastPercent
// 0x0008 (0x0008 - 0x0000)
struct UIField_IconLink_SetRecastPercent final
{
public:
	ELinkType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisMappingType                              Button;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_IconLink_SetRecastPercent) == 0x000004, "Wrong alignment on UIField_IconLink_SetRecastPercent");
static_assert(sizeof(UIField_IconLink_SetRecastPercent) == 0x000008, "Wrong size on UIField_IconLink_SetRecastPercent");
static_assert(offsetof(UIField_IconLink_SetRecastPercent, Type) == 0x000000, "Member 'UIField_IconLink_SetRecastPercent::Type' has a wrong offset!");
static_assert(offsetof(UIField_IconLink_SetRecastPercent, Button) == 0x000001, "Member 'UIField_IconLink_SetRecastPercent::Button' has a wrong offset!");
static_assert(offsetof(UIField_IconLink_SetRecastPercent, Percent) == 0x000004, "Member 'UIField_IconLink_SetRecastPercent::Percent' has a wrong offset!");

// Function DarwinGame.UIField_SearchPoint.SetCanAccess
// 0x0001 (0x0001 - 0x0000)
struct UIField_SearchPoint_SetCanAccess final
{
public:
	bool                                          bCanAccess;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_SearchPoint_SetCanAccess) == 0x000001, "Wrong alignment on UIField_SearchPoint_SetCanAccess");
static_assert(sizeof(UIField_SearchPoint_SetCanAccess) == 0x000001, "Wrong size on UIField_SearchPoint_SetCanAccess");
static_assert(offsetof(UIField_SearchPoint_SetCanAccess, bCanAccess) == 0x000000, "Member 'UIField_SearchPoint_SetCanAccess::bCanAccess' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetArtifactIconList
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetArtifactIconList final
{
public:
	class UUIArtifactList_Field*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetArtifactIconList) == 0x000008, "Wrong alignment on UIField_Status_GetArtifactIconList");
static_assert(sizeof(UIField_Status_GetArtifactIconList) == 0x000008, "Wrong size on UIField_Status_GetArtifactIconList");
static_assert(offsetof(UIField_Status_GetArtifactIconList, ReturnValue) == 0x000000, "Member 'UIField_Status_GetArtifactIconList::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetBossStatus
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetBossStatus final
{
public:
	class UUIField_WinBoss*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetBossStatus) == 0x000008, "Wrong alignment on UIField_Status_GetBossStatus");
static_assert(sizeof(UIField_Status_GetBossStatus) == 0x000008, "Wrong size on UIField_Status_GetBossStatus");
static_assert(offsetof(UIField_Status_GetBossStatus, ReturnValue) == 0x000000, "Member 'UIField_Status_GetBossStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetBottomCautionAlert
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetBottomCautionAlert final
{
public:
	class UUIAlert_01*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetBottomCautionAlert) == 0x000008, "Wrong alignment on UIField_Status_GetBottomCautionAlert");
static_assert(sizeof(UIField_Status_GetBottomCautionAlert) == 0x000008, "Wrong size on UIField_Status_GetBottomCautionAlert");
static_assert(offsetof(UIField_Status_GetBottomCautionAlert, ReturnValue) == 0x000000, "Member 'UIField_Status_GetBottomCautionAlert::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetCaution
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetCaution final
{
public:
	class UUICaution*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetCaution) == 0x000008, "Wrong alignment on UIField_Status_GetCaution");
static_assert(sizeof(UIField_Status_GetCaution) == 0x000008, "Wrong size on UIField_Status_GetCaution");
static_assert(offsetof(UIField_Status_GetCaution, ReturnValue) == 0x000000, "Member 'UIField_Status_GetCaution::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetFriendStatus
// 0x0010 (0x0010 - 0x0000)
struct UIField_Status_GetFriendStatus final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIField_WinFStatus*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetFriendStatus) == 0x000008, "Wrong alignment on UIField_Status_GetFriendStatus");
static_assert(sizeof(UIField_Status_GetFriendStatus) == 0x000010, "Wrong size on UIField_Status_GetFriendStatus");
static_assert(offsetof(UIField_Status_GetFriendStatus, Index_0) == 0x000000, "Member 'UIField_Status_GetFriendStatus::Index_0' has a wrong offset!");
static_assert(offsetof(UIField_Status_GetFriendStatus, ReturnValue) == 0x000008, "Member 'UIField_Status_GetFriendStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetLogWindow
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetLogWindow final
{
public:
	class UUIField_WinLogbox*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetLogWindow) == 0x000008, "Wrong alignment on UIField_Status_GetLogWindow");
static_assert(sizeof(UIField_Status_GetLogWindow) == 0x000008, "Wrong size on UIField_Status_GetLogWindow");
static_assert(offsetof(UIField_Status_GetLogWindow, ReturnValue) == 0x000000, "Member 'UIField_Status_GetLogWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetMapStatus
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetMapStatus final
{
public:
	class UUIMap_WinStatus*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetMapStatus) == 0x000008, "Wrong alignment on UIField_Status_GetMapStatus");
static_assert(sizeof(UIField_Status_GetMapStatus) == 0x000008, "Wrong size on UIField_Status_GetMapStatus");
static_assert(offsetof(UIField_Status_GetMapStatus, ReturnValue) == 0x000000, "Member 'UIField_Status_GetMapStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetMonsterVision
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetMonsterVision final
{
public:
	class UUIVision_Field*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetMonsterVision) == 0x000008, "Wrong alignment on UIField_Status_GetMonsterVision");
static_assert(sizeof(UIField_Status_GetMonsterVision) == 0x000008, "Wrong size on UIField_Status_GetMonsterVision");
static_assert(offsetof(UIField_Status_GetMonsterVision, ReturnValue) == 0x000000, "Member 'UIField_Status_GetMonsterVision::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetPlayerStatus
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetPlayerStatus final
{
public:
	class UUIField_WinPStatus*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetPlayerStatus) == 0x000008, "Wrong alignment on UIField_Status_GetPlayerStatus");
static_assert(sizeof(UIField_Status_GetPlayerStatus) == 0x000008, "Wrong size on UIField_Status_GetPlayerStatus");
static_assert(offsetof(UIField_Status_GetPlayerStatus, ReturnValue) == 0x000000, "Member 'UIField_Status_GetPlayerStatus::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetQuestConfirmation
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetQuestConfirmation final
{
public:
	class UUIField_QuestConfirmation*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetQuestConfirmation) == 0x000008, "Wrong alignment on UIField_Status_GetQuestConfirmation");
static_assert(sizeof(UIField_Status_GetQuestConfirmation) == 0x000008, "Wrong size on UIField_Status_GetQuestConfirmation");
static_assert(offsetof(UIField_Status_GetQuestConfirmation, ReturnValue) == 0x000000, "Member 'UIField_Status_GetQuestConfirmation::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetQuestWindow
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetQuestWindow final
{
public:
	class UUIField_WinQuest*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetQuestWindow) == 0x000008, "Wrong alignment on UIField_Status_GetQuestWindow");
static_assert(sizeof(UIField_Status_GetQuestWindow) == 0x000008, "Wrong size on UIField_Status_GetQuestWindow");
static_assert(offsetof(UIField_Status_GetQuestWindow, ReturnValue) == 0x000000, "Member 'UIField_Status_GetQuestWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetSkillChainWindow
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetSkillChainWindow final
{
public:
	class UUIField_WinSkillbox*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetSkillChainWindow) == 0x000008, "Wrong alignment on UIField_Status_GetSkillChainWindow");
static_assert(sizeof(UIField_Status_GetSkillChainWindow) == 0x000008, "Wrong size on UIField_Status_GetSkillChainWindow");
static_assert(offsetof(UIField_Status_GetSkillChainWindow, ReturnValue) == 0x000000, "Member 'UIField_Status_GetSkillChainWindow::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetTopCautionAlert
// 0x0008 (0x0008 - 0x0000)
struct UIField_Status_GetTopCautionAlert final
{
public:
	class UUIAlert_00*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_GetTopCautionAlert) == 0x000008, "Wrong alignment on UIField_Status_GetTopCautionAlert");
static_assert(sizeof(UIField_Status_GetTopCautionAlert) == 0x000008, "Wrong size on UIField_Status_GetTopCautionAlert");
static_assert(offsetof(UIField_Status_GetTopCautionAlert, ReturnValue) == 0x000000, "Member 'UIField_Status_GetTopCautionAlert::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_Status.GetUnusedFriendStatus
// 0x0010 (0x0010 - 0x0000)
struct UIField_Status_GetUnusedFriendStatus final
{
public:
	class UUIField_WinFStatus*                    OutWidget;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultIndex;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_Status_GetUnusedFriendStatus) == 0x000008, "Wrong alignment on UIField_Status_GetUnusedFriendStatus");
static_assert(sizeof(UIField_Status_GetUnusedFriendStatus) == 0x000010, "Wrong size on UIField_Status_GetUnusedFriendStatus");
static_assert(offsetof(UIField_Status_GetUnusedFriendStatus, OutWidget) == 0x000000, "Member 'UIField_Status_GetUnusedFriendStatus::OutWidget' has a wrong offset!");
static_assert(offsetof(UIField_Status_GetUnusedFriendStatus, ResultIndex) == 0x000008, "Member 'UIField_Status_GetUnusedFriendStatus::ResultIndex' has a wrong offset!");

// Function DarwinGame.UIField_Status.SetAllyShotHoldFlag
// 0x0001 (0x0001 - 0x0000)
struct UIField_Status_SetAllyShotHoldFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_SetAllyShotHoldFlag) == 0x000001, "Wrong alignment on UIField_Status_SetAllyShotHoldFlag");
static_assert(sizeof(UIField_Status_SetAllyShotHoldFlag) == 0x000001, "Wrong size on UIField_Status_SetAllyShotHoldFlag");
static_assert(offsetof(UIField_Status_SetAllyShotHoldFlag, bFlag) == 0x000000, "Member 'UIField_Status_SetAllyShotHoldFlag::bFlag' has a wrong offset!");

// Function DarwinGame.UIField_Status.SetBattlingFlag
// 0x0001 (0x0001 - 0x0000)
struct UIField_Status_SetBattlingFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_SetBattlingFlag) == 0x000001, "Wrong alignment on UIField_Status_SetBattlingFlag");
static_assert(sizeof(UIField_Status_SetBattlingFlag) == 0x000001, "Wrong size on UIField_Status_SetBattlingFlag");
static_assert(offsetof(UIField_Status_SetBattlingFlag, bFlag) == 0x000000, "Member 'UIField_Status_SetBattlingFlag::bFlag' has a wrong offset!");

// Function DarwinGame.UIField_Status.SetMoveingFlag
// 0x0001 (0x0001 - 0x0000)
struct UIField_Status_SetMoveingFlag final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Status_SetMoveingFlag) == 0x000001, "Wrong alignment on UIField_Status_SetMoveingFlag");
static_assert(sizeof(UIField_Status_SetMoveingFlag) == 0x000001, "Wrong size on UIField_Status_SetMoveingFlag");
static_assert(offsetof(UIField_Status_SetMoveingFlag, bFlag) == 0x000000, "Member 'UIField_Status_SetMoveingFlag::bFlag' has a wrong offset!");

// Function DarwinGame.UIField_Win_Message.SetData
// 0x0008 (0x0008 - 0x0000)
struct UIField_Win_Message_SetData final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_Win_Message_SetData) == 0x000004, "Wrong alignment on UIField_Win_Message_SetData");
static_assert(sizeof(UIField_Win_Message_SetData) == 0x000008, "Wrong size on UIField_Win_Message_SetData");
static_assert(offsetof(UIField_Win_Message_SetData, GroupName) == 0x000000, "Member 'UIField_Win_Message_SetData::GroupName' has a wrong offset!");

// Function DarwinGame.UIField_WinAction.PlayOneshotCautionAnim
// 0x0001 (0x0001 - 0x0000)
struct UIField_WinAction_PlayOneshotCautionAnim final
{
public:
	EInputGuideCaution                            CautionType;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinAction_PlayOneshotCautionAnim) == 0x000001, "Wrong alignment on UIField_WinAction_PlayOneshotCautionAnim");
static_assert(sizeof(UIField_WinAction_PlayOneshotCautionAnim) == 0x000001, "Wrong size on UIField_WinAction_PlayOneshotCautionAnim");
static_assert(offsetof(UIField_WinAction_PlayOneshotCautionAnim, CautionType) == 0x000000, "Member 'UIField_WinAction_PlayOneshotCautionAnim::CautionType' has a wrong offset!");

// Function DarwinGame.UIField_WinAction.SetActionType
// 0x0003 (0x0003 - 0x0000)
struct UIField_WinAction_SetActionType final
{
public:
	EInputGuideType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputGuideType                               LongActionType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGaugeMaxCloseType;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinAction_SetActionType) == 0x000001, "Wrong alignment on UIField_WinAction_SetActionType");
static_assert(sizeof(UIField_WinAction_SetActionType) == 0x000003, "Wrong size on UIField_WinAction_SetActionType");
static_assert(offsetof(UIField_WinAction_SetActionType, Type) == 0x000000, "Member 'UIField_WinAction_SetActionType::Type' has a wrong offset!");
static_assert(offsetof(UIField_WinAction_SetActionType, LongActionType) == 0x000001, "Member 'UIField_WinAction_SetActionType::LongActionType' has a wrong offset!");
static_assert(offsetof(UIField_WinAction_SetActionType, IsGaugeMaxCloseType) == 0x000002, "Member 'UIField_WinAction_SetActionType::IsGaugeMaxCloseType' has a wrong offset!");

// Function DarwinGame.UIField_WinAction.SetPercent
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinAction_SetPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasInput;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinAction_SetPercent) == 0x000004, "Wrong alignment on UIField_WinAction_SetPercent");
static_assert(sizeof(UIField_WinAction_SetPercent) == 0x000008, "Wrong size on UIField_WinAction_SetPercent");
static_assert(offsetof(UIField_WinAction_SetPercent, Percent) == 0x000000, "Member 'UIField_WinAction_SetPercent::Percent' has a wrong offset!");
static_assert(offsetof(UIField_WinAction_SetPercent, HasInput) == 0x000004, "Member 'UIField_WinAction_SetPercent::HasInput' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.AddStatusIcon
// 0x000C (0x000C - 0x0000)
struct UIField_WinBoss_AddStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusRank;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_AddStatusIcon) == 0x000004, "Wrong alignment on UIField_WinBoss_AddStatusIcon");
static_assert(sizeof(UIField_WinBoss_AddStatusIcon) == 0x00000C, "Wrong size on UIField_WinBoss_AddStatusIcon");
static_assert(offsetof(UIField_WinBoss_AddStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinBoss_AddStatusIcon::StatusParameterID' has a wrong offset!");
static_assert(offsetof(UIField_WinBoss_AddStatusIcon, StatusRank) == 0x000008, "Member 'UIField_WinBoss_AddStatusIcon::StatusRank' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.ChangeStatusIcon
// 0x0010 (0x0010 - 0x0000)
struct UIField_WinBoss_ChangeStatusIcon final
{
public:
	TArray<struct FStateChangeIconData>           OrderList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_ChangeStatusIcon) == 0x000008, "Wrong alignment on UIField_WinBoss_ChangeStatusIcon");
static_assert(sizeof(UIField_WinBoss_ChangeStatusIcon) == 0x000010, "Wrong size on UIField_WinBoss_ChangeStatusIcon");
static_assert(offsetof(UIField_WinBoss_ChangeStatusIcon, OrderList) == 0x000000, "Member 'UIField_WinBoss_ChangeStatusIcon::OrderList' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.DeleteStatusIcon
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinBoss_DeleteStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_DeleteStatusIcon) == 0x000004, "Wrong alignment on UIField_WinBoss_DeleteStatusIcon");
static_assert(sizeof(UIField_WinBoss_DeleteStatusIcon) == 0x000008, "Wrong size on UIField_WinBoss_DeleteStatusIcon");
static_assert(offsetof(UIField_WinBoss_DeleteStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinBoss_DeleteStatusIcon::StatusParameterID' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.GetSpiritGauge
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinBoss_GetSpiritGauge final
{
public:
	class UUISpirit_Gauge*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_GetSpiritGauge) == 0x000008, "Wrong alignment on UIField_WinBoss_GetSpiritGauge");
static_assert(sizeof(UIField_WinBoss_GetSpiritGauge) == 0x000008, "Wrong size on UIField_WinBoss_GetSpiritGauge");
static_assert(offsetof(UIField_WinBoss_GetSpiritGauge, ReturnValue) == 0x000000, "Member 'UIField_WinBoss_GetSpiritGauge::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.SetBossNameText
// 0x0018 (0x0018 - 0x0000)
struct UIField_WinBoss_SetBossNameText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_SetBossNameText) == 0x000008, "Wrong alignment on UIField_WinBoss_SetBossNameText");
static_assert(sizeof(UIField_WinBoss_SetBossNameText) == 0x000018, "Wrong size on UIField_WinBoss_SetBossNameText");
static_assert(offsetof(UIField_WinBoss_SetBossNameText, Text) == 0x000000, "Member 'UIField_WinBoss_SetBossNameText::Text' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.SetHP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinBoss_SetHP final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_SetHP) == 0x000004, "Wrong alignment on UIField_WinBoss_SetHP");
static_assert(sizeof(UIField_WinBoss_SetHP) == 0x000004, "Wrong size on UIField_WinBoss_SetHP");
static_assert(offsetof(UIField_WinBoss_SetHP, InHP) == 0x000000, "Member 'UIField_WinBoss_SetHP::InHP' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinBoss_SetLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_SetLevel) == 0x000004, "Wrong alignment on UIField_WinBoss_SetLevel");
static_assert(sizeof(UIField_WinBoss_SetLevel) == 0x000004, "Wrong size on UIField_WinBoss_SetLevel");
static_assert(offsetof(UIField_WinBoss_SetLevel, InLevel) == 0x000000, "Member 'UIField_WinBoss_SetLevel::InLevel' has a wrong offset!");

// Function DarwinGame.UIField_WinBoss.SetMaxHP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinBoss_SetMaxHP final
{
public:
	int32                                         InMaxHP;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinBoss_SetMaxHP) == 0x000004, "Wrong alignment on UIField_WinBoss_SetMaxHP");
static_assert(sizeof(UIField_WinBoss_SetMaxHP) == 0x000004, "Wrong size on UIField_WinBoss_SetMaxHP");
static_assert(offsetof(UIField_WinBoss_SetMaxHP, InMaxHP) == 0x000000, "Member 'UIField_WinBoss_SetMaxHP::InMaxHP' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.AddStatusIcon
// 0x000C (0x000C - 0x0000)
struct UIField_WinFriend_AddStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusRank;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_AddStatusIcon) == 0x000004, "Wrong alignment on UIField_WinFriend_AddStatusIcon");
static_assert(sizeof(UIField_WinFriend_AddStatusIcon) == 0x00000C, "Wrong size on UIField_WinFriend_AddStatusIcon");
static_assert(offsetof(UIField_WinFriend_AddStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinFriend_AddStatusIcon::StatusParameterID' has a wrong offset!");
static_assert(offsetof(UIField_WinFriend_AddStatusIcon, StatusRank) == 0x000008, "Member 'UIField_WinFriend_AddStatusIcon::StatusRank' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.ChangeStatusIcon
// 0x0010 (0x0010 - 0x0000)
struct UIField_WinFriend_ChangeStatusIcon final
{
public:
	TArray<struct FStateChangeIconData>           OrderList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_ChangeStatusIcon) == 0x000008, "Wrong alignment on UIField_WinFriend_ChangeStatusIcon");
static_assert(sizeof(UIField_WinFriend_ChangeStatusIcon) == 0x000010, "Wrong size on UIField_WinFriend_ChangeStatusIcon");
static_assert(offsetof(UIField_WinFriend_ChangeStatusIcon, OrderList) == 0x000000, "Member 'UIField_WinFriend_ChangeStatusIcon::OrderList' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.DeleteStatusIcon
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinFriend_DeleteStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_DeleteStatusIcon) == 0x000004, "Wrong alignment on UIField_WinFriend_DeleteStatusIcon");
static_assert(sizeof(UIField_WinFriend_DeleteStatusIcon) == 0x000008, "Wrong size on UIField_WinFriend_DeleteStatusIcon");
static_assert(offsetof(UIField_WinFriend_DeleteStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinFriend_DeleteStatusIcon::StatusParameterID' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.ExecCarryingArtifacts
// 0x0001 (0x0001 - 0x0000)
struct UIField_WinFriend_ExecCarryingArtifacts final
{
public:
	bool                                          bCanDropOff;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_ExecCarryingArtifacts) == 0x000001, "Wrong alignment on UIField_WinFriend_ExecCarryingArtifacts");
static_assert(sizeof(UIField_WinFriend_ExecCarryingArtifacts) == 0x000001, "Wrong size on UIField_WinFriend_ExecCarryingArtifacts");
static_assert(offsetof(UIField_WinFriend_ExecCarryingArtifacts, bCanDropOff) == 0x000000, "Member 'UIField_WinFriend_ExecCarryingArtifacts::bCanDropOff' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.GetSpiritGauge
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinFriend_GetSpiritGauge final
{
public:
	class UUISpirit_Gauge*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_GetSpiritGauge) == 0x000008, "Wrong alignment on UIField_WinFriend_GetSpiritGauge");
static_assert(sizeof(UIField_WinFriend_GetSpiritGauge) == 0x000008, "Wrong size on UIField_WinFriend_GetSpiritGauge");
static_assert(offsetof(UIField_WinFriend_GetSpiritGauge, ReturnValue) == 0x000000, "Member 'UIField_WinFriend_GetSpiritGauge::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.InitData
// 0x0030 (0x0030 - 0x0000)
struct UIField_WinFriend_InitData final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevel;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InName;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InPartyIndex;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinFriend_InitData) == 0x000008, "Wrong alignment on UIField_WinFriend_InitData");
static_assert(sizeof(UIField_WinFriend_InitData) == 0x000030, "Wrong size on UIField_WinFriend_InitData");
static_assert(offsetof(UIField_WinFriend_InitData, InHP) == 0x000000, "Member 'UIField_WinFriend_InitData::InHP' has a wrong offset!");
static_assert(offsetof(UIField_WinFriend_InitData, InMaxHP) == 0x000004, "Member 'UIField_WinFriend_InitData::InMaxHP' has a wrong offset!");
static_assert(offsetof(UIField_WinFriend_InitData, InLevel) == 0x000008, "Member 'UIField_WinFriend_InitData::InLevel' has a wrong offset!");
static_assert(offsetof(UIField_WinFriend_InitData, InName) == 0x000010, "Member 'UIField_WinFriend_InitData::InName' has a wrong offset!");
static_assert(offsetof(UIField_WinFriend_InitData, InPartyIndex) == 0x000028, "Member 'UIField_WinFriend_InitData::InPartyIndex' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.PlayLeaveArtifactStamp
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinFriend_PlayLeaveArtifactStamp final
{
public:
	EArtifactType                                 InArtifactType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InPartyIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_PlayLeaveArtifactStamp) == 0x000004, "Wrong alignment on UIField_WinFriend_PlayLeaveArtifactStamp");
static_assert(sizeof(UIField_WinFriend_PlayLeaveArtifactStamp) == 0x000008, "Wrong size on UIField_WinFriend_PlayLeaveArtifactStamp");
static_assert(offsetof(UIField_WinFriend_PlayLeaveArtifactStamp, InArtifactType) == 0x000000, "Member 'UIField_WinFriend_PlayLeaveArtifactStamp::InArtifactType' has a wrong offset!");
static_assert(offsetof(UIField_WinFriend_PlayLeaveArtifactStamp, InPartyIndex) == 0x000004, "Member 'UIField_WinFriend_PlayLeaveArtifactStamp::InPartyIndex' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.PlayNearArtifactStamp
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinFriend_PlayNearArtifactStamp final
{
public:
	EArtifactType                                 InArtifactType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InPartyIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_PlayNearArtifactStamp) == 0x000004, "Wrong alignment on UIField_WinFriend_PlayNearArtifactStamp");
static_assert(sizeof(UIField_WinFriend_PlayNearArtifactStamp) == 0x000008, "Wrong size on UIField_WinFriend_PlayNearArtifactStamp");
static_assert(offsetof(UIField_WinFriend_PlayNearArtifactStamp, InArtifactType) == 0x000000, "Member 'UIField_WinFriend_PlayNearArtifactStamp::InArtifactType' has a wrong offset!");
static_assert(offsetof(UIField_WinFriend_PlayNearArtifactStamp, InPartyIndex) == 0x000004, "Member 'UIField_WinFriend_PlayNearArtifactStamp::InPartyIndex' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.SetHP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinFriend_SetHP final
{
public:
	int32                                         NewHP;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_SetHP) == 0x000004, "Wrong alignment on UIField_WinFriend_SetHP");
static_assert(sizeof(UIField_WinFriend_SetHP) == 0x000004, "Wrong size on UIField_WinFriend_SetHP");
static_assert(offsetof(UIField_WinFriend_SetHP, NewHP) == 0x000000, "Member 'UIField_WinFriend_SetHP::NewHP' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinFriend_SetLevel final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_SetLevel) == 0x000004, "Wrong alignment on UIField_WinFriend_SetLevel");
static_assert(sizeof(UIField_WinFriend_SetLevel) == 0x000004, "Wrong size on UIField_WinFriend_SetLevel");
static_assert(offsetof(UIField_WinFriend_SetLevel, NewLevel) == 0x000000, "Member 'UIField_WinFriend_SetLevel::NewLevel' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.SetMaxHP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinFriend_SetMaxHP final
{
public:
	int32                                         NewMaxHP;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_SetMaxHP) == 0x000004, "Wrong alignment on UIField_WinFriend_SetMaxHP");
static_assert(sizeof(UIField_WinFriend_SetMaxHP) == 0x000004, "Wrong size on UIField_WinFriend_SetMaxHP");
static_assert(offsetof(UIField_WinFriend_SetMaxHP, NewMaxHP) == 0x000000, "Member 'UIField_WinFriend_SetMaxHP::NewMaxHP' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.SetName
// 0x0018 (0x0018 - 0x0000)
struct UIField_WinFriend_SetName final
{
public:
	class FText                                   CharacterName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_SetName) == 0x000008, "Wrong alignment on UIField_WinFriend_SetName");
static_assert(sizeof(UIField_WinFriend_SetName) == 0x000018, "Wrong size on UIField_WinFriend_SetName");
static_assert(offsetof(UIField_WinFriend_SetName, CharacterName) == 0x000000, "Member 'UIField_WinFriend_SetName::CharacterName' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.SetPartyIndex
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinFriend_SetPartyIndex final
{
public:
	int32                                         InPartyIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_SetPartyIndex) == 0x000004, "Wrong alignment on UIField_WinFriend_SetPartyIndex");
static_assert(sizeof(UIField_WinFriend_SetPartyIndex) == 0x000004, "Wrong size on UIField_WinFriend_SetPartyIndex");
static_assert(offsetof(UIField_WinFriend_SetPartyIndex, InPartyIndex) == 0x000000, "Member 'UIField_WinFriend_SetPartyIndex::InPartyIndex' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.StopLeaveArtifactStamp
// 0x0001 (0x0001 - 0x0000)
struct UIField_WinFriend_StopLeaveArtifactStamp final
{
public:
	EArtifactType                                 InArtifactType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_StopLeaveArtifactStamp) == 0x000001, "Wrong alignment on UIField_WinFriend_StopLeaveArtifactStamp");
static_assert(sizeof(UIField_WinFriend_StopLeaveArtifactStamp) == 0x000001, "Wrong size on UIField_WinFriend_StopLeaveArtifactStamp");
static_assert(offsetof(UIField_WinFriend_StopLeaveArtifactStamp, InArtifactType) == 0x000000, "Member 'UIField_WinFriend_StopLeaveArtifactStamp::InArtifactType' has a wrong offset!");

// Function DarwinGame.UIField_WinFriend.StopNearArtifactStamp
// 0x0001 (0x0001 - 0x0000)
struct UIField_WinFriend_StopNearArtifactStamp final
{
public:
	EArtifactType                                 InArtifactType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFriend_StopNearArtifactStamp) == 0x000001, "Wrong alignment on UIField_WinFriend_StopNearArtifactStamp");
static_assert(sizeof(UIField_WinFriend_StopNearArtifactStamp) == 0x000001, "Wrong size on UIField_WinFriend_StopNearArtifactStamp");
static_assert(offsetof(UIField_WinFriend_StopNearArtifactStamp, InArtifactType) == 0x000000, "Member 'UIField_WinFriend_StopNearArtifactStamp::InArtifactType' has a wrong offset!");

// Function DarwinGame.UIField_WinStatusBase.AddStatusIcon
// 0x000C (0x000C - 0x0000)
struct UIField_WinStatusBase_AddStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatusRank;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinStatusBase_AddStatusIcon) == 0x000004, "Wrong alignment on UIField_WinStatusBase_AddStatusIcon");
static_assert(sizeof(UIField_WinStatusBase_AddStatusIcon) == 0x00000C, "Wrong size on UIField_WinStatusBase_AddStatusIcon");
static_assert(offsetof(UIField_WinStatusBase_AddStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinStatusBase_AddStatusIcon::StatusParameterID' has a wrong offset!");
static_assert(offsetof(UIField_WinStatusBase_AddStatusIcon, StatusRank) == 0x000008, "Member 'UIField_WinStatusBase_AddStatusIcon::StatusRank' has a wrong offset!");

// Function DarwinGame.UIField_WinStatusBase.ChangeStatusIcon
// 0x0010 (0x0010 - 0x0000)
struct UIField_WinStatusBase_ChangeStatusIcon final
{
public:
	TArray<struct FStateChangeIconData>           OrderList;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinStatusBase_ChangeStatusIcon) == 0x000008, "Wrong alignment on UIField_WinStatusBase_ChangeStatusIcon");
static_assert(sizeof(UIField_WinStatusBase_ChangeStatusIcon) == 0x000010, "Wrong size on UIField_WinStatusBase_ChangeStatusIcon");
static_assert(offsetof(UIField_WinStatusBase_ChangeStatusIcon, OrderList) == 0x000000, "Member 'UIField_WinStatusBase_ChangeStatusIcon::OrderList' has a wrong offset!");

// Function DarwinGame.UIField_WinStatusBase.DeleteStatusIcon
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinStatusBase_DeleteStatusIcon final
{
public:
	class FName                                   StatusParameterID;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinStatusBase_DeleteStatusIcon) == 0x000004, "Wrong alignment on UIField_WinStatusBase_DeleteStatusIcon");
static_assert(sizeof(UIField_WinStatusBase_DeleteStatusIcon) == 0x000008, "Wrong size on UIField_WinStatusBase_DeleteStatusIcon");
static_assert(offsetof(UIField_WinStatusBase_DeleteStatusIcon, StatusParameterID) == 0x000000, "Member 'UIField_WinStatusBase_DeleteStatusIcon::StatusParameterID' has a wrong offset!");

// Function DarwinGame.UIField_WinStatusBase.SetHP
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinStatusBase_SetHP final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDamage;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayAnim;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinStatusBase_SetHP) == 0x000004, "Wrong alignment on UIField_WinStatusBase_SetHP");
static_assert(sizeof(UIField_WinStatusBase_SetHP) == 0x000008, "Wrong size on UIField_WinStatusBase_SetHP");
static_assert(offsetof(UIField_WinStatusBase_SetHP, InHP) == 0x000000, "Member 'UIField_WinStatusBase_SetHP::InHP' has a wrong offset!");
static_assert(offsetof(UIField_WinStatusBase_SetHP, IsDamage) == 0x000004, "Member 'UIField_WinStatusBase_SetHP::IsDamage' has a wrong offset!");
static_assert(offsetof(UIField_WinStatusBase_SetHP, IsPlayAnim) == 0x000005, "Member 'UIField_WinStatusBase_SetHP::IsPlayAnim' has a wrong offset!");

// Function DarwinGame.UIField_WinStatusBase.SetMaxHP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinStatusBase_SetMaxHP final
{
public:
	int32                                         InMaxHP;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinStatusBase_SetMaxHP) == 0x000004, "Wrong alignment on UIField_WinStatusBase_SetMaxHP");
static_assert(sizeof(UIField_WinStatusBase_SetMaxHP) == 0x000004, "Wrong size on UIField_WinStatusBase_SetMaxHP");
static_assert(offsetof(UIField_WinStatusBase_SetMaxHP, InMaxHP) == 0x000000, "Member 'UIField_WinStatusBase_SetMaxHP::InMaxHP' has a wrong offset!");

// Function DarwinGame.UIField_WinStatusBase.SetMaxMP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinStatusBase_SetMaxMP final
{
public:
	int32                                         InMaxMP;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinStatusBase_SetMaxMP) == 0x000004, "Wrong alignment on UIField_WinStatusBase_SetMaxMP");
static_assert(sizeof(UIField_WinStatusBase_SetMaxMP) == 0x000004, "Wrong size on UIField_WinStatusBase_SetMaxMP");
static_assert(offsetof(UIField_WinStatusBase_SetMaxMP, InMaxMP) == 0x000000, "Member 'UIField_WinStatusBase_SetMaxMP::InMaxMP' has a wrong offset!");

// Function DarwinGame.UIField_WinStatusBase.SetMP
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinStatusBase_SetMP final
{
public:
	int32                                         InMP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinStatusBase_SetMP) == 0x000004, "Wrong alignment on UIField_WinStatusBase_SetMP");
static_assert(sizeof(UIField_WinStatusBase_SetMP) == 0x000004, "Wrong size on UIField_WinStatusBase_SetMP");
static_assert(offsetof(UIField_WinStatusBase_SetMP, InMP) == 0x000000, "Member 'UIField_WinStatusBase_SetMP::InMP' has a wrong offset!");

// Function DarwinGame.UIField_WinFStatus.ExecLevelUp
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinFStatus_ExecLevelUp final
{
public:
	int32                                         UpLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFStatus_ExecLevelUp) == 0x000004, "Wrong alignment on UIField_WinFStatus_ExecLevelUp");
static_assert(sizeof(UIField_WinFStatus_ExecLevelUp) == 0x000008, "Wrong size on UIField_WinFStatus_ExecLevelUp");
static_assert(offsetof(UIField_WinFStatus_ExecLevelUp, UpLevel) == 0x000000, "Member 'UIField_WinFStatus_ExecLevelUp::UpLevel' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_ExecLevelUp, Index_0) == 0x000004, "Member 'UIField_WinFStatus_ExecLevelUp::Index_0' has a wrong offset!");

// Function DarwinGame.UIField_WinFStatus.InitData
// 0x0050 (0x0050 - 0x0000)
struct UIField_WinFStatus_InitData final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMP;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxMP;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InKindID;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomEquipmentType                   InCustomEquipment;                                 // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ERivalTeamForce                               InRivalTeam;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsRivalTeamLeader;                              // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InLevel;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InName;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InUid;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinFStatus_InitData) == 0x000008, "Wrong alignment on UIField_WinFStatus_InitData");
static_assert(sizeof(UIField_WinFStatus_InitData) == 0x000050, "Wrong size on UIField_WinFStatus_InitData");
static_assert(offsetof(UIField_WinFStatus_InitData, InHP) == 0x000000, "Member 'UIField_WinFStatus_InitData::InHP' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InMaxHP) == 0x000004, "Member 'UIField_WinFStatus_InitData::InMaxHP' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InMP) == 0x000008, "Member 'UIField_WinFStatus_InitData::InMP' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InMaxMP) == 0x00000C, "Member 'UIField_WinFStatus_InitData::InMaxMP' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InKindID) == 0x000010, "Member 'UIField_WinFStatus_InitData::InKindID' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InCustomEquipment) == 0x000018, "Member 'UIField_WinFStatus_InitData::InCustomEquipment' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InRivalTeam) == 0x000028, "Member 'UIField_WinFStatus_InitData::InRivalTeam' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, bInIsRivalTeamLeader) == 0x000029, "Member 'UIField_WinFStatus_InitData::bInIsRivalTeamLeader' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InLevel) == 0x00002C, "Member 'UIField_WinFStatus_InitData::InLevel' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InName) == 0x000030, "Member 'UIField_WinFStatus_InitData::InName' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_InitData, InUid) == 0x000048, "Member 'UIField_WinFStatus_InitData::InUid' has a wrong offset!");

// Function DarwinGame.UIField_WinFStatus.IsSetID
// 0x0001 (0x0001 - 0x0000)
struct UIField_WinFStatus_IsSetID final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFStatus_IsSetID) == 0x000001, "Wrong alignment on UIField_WinFStatus_IsSetID");
static_assert(sizeof(UIField_WinFStatus_IsSetID) == 0x000001, "Wrong size on UIField_WinFStatus_IsSetID");
static_assert(offsetof(UIField_WinFStatus_IsSetID, ReturnValue) == 0x000000, "Member 'UIField_WinFStatus_IsSetID::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_WinFStatus.SetID
// 0x001C (0x001C - 0x0000)
struct UIField_WinFStatus_SetID final
{
public:
	class FName                                   InKindID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomEquipmentType                   InCustomEquipment;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ERivalTeamForce                               InRivalTeam;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsRivalTeamLeader;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinFStatus_SetID) == 0x000004, "Wrong alignment on UIField_WinFStatus_SetID");
static_assert(sizeof(UIField_WinFStatus_SetID) == 0x00001C, "Wrong size on UIField_WinFStatus_SetID");
static_assert(offsetof(UIField_WinFStatus_SetID, InKindID) == 0x000000, "Member 'UIField_WinFStatus_SetID::InKindID' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_SetID, InCustomEquipment) == 0x000008, "Member 'UIField_WinFStatus_SetID::InCustomEquipment' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_SetID, InRivalTeam) == 0x000018, "Member 'UIField_WinFStatus_SetID::InRivalTeam' has a wrong offset!");
static_assert(offsetof(UIField_WinFStatus_SetID, bInIsRivalTeamLeader) == 0x000019, "Member 'UIField_WinFStatus_SetID::bInIsRivalTeamLeader' has a wrong offset!");

// Function DarwinGame.UIField_WinFStatus.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinFStatus_SetLevel final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFStatus_SetLevel) == 0x000004, "Wrong alignment on UIField_WinFStatus_SetLevel");
static_assert(sizeof(UIField_WinFStatus_SetLevel) == 0x000004, "Wrong size on UIField_WinFStatus_SetLevel");
static_assert(offsetof(UIField_WinFStatus_SetLevel, NewLevel) == 0x000000, "Member 'UIField_WinFStatus_SetLevel::NewLevel' has a wrong offset!");

// Function DarwinGame.UIField_WinFStatus.SetName
// 0x0018 (0x0018 - 0x0000)
struct UIField_WinFStatus_SetName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinFStatus_SetName) == 0x000008, "Wrong alignment on UIField_WinFStatus_SetName");
static_assert(sizeof(UIField_WinFStatus_SetName) == 0x000018, "Wrong size on UIField_WinFStatus_SetName");
static_assert(offsetof(UIField_WinFStatus_SetName, InName) == 0x000000, "Member 'UIField_WinFStatus_SetName::InName' has a wrong offset!");

// Function DarwinGame.UIField_WinPStatus.ExecLvup
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinPStatus_ExecLvup final
{
public:
	int32                                         UpLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ComboUP;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinPStatus_ExecLvup) == 0x000004, "Wrong alignment on UIField_WinPStatus_ExecLvup");
static_assert(sizeof(UIField_WinPStatus_ExecLvup) == 0x000008, "Wrong size on UIField_WinPStatus_ExecLvup");
static_assert(offsetof(UIField_WinPStatus_ExecLvup, UpLevel) == 0x000000, "Member 'UIField_WinPStatus_ExecLvup::UpLevel' has a wrong offset!");
static_assert(offsetof(UIField_WinPStatus_ExecLvup, ComboUP) == 0x000004, "Member 'UIField_WinPStatus_ExecLvup::ComboUP' has a wrong offset!");

// Function DarwinGame.UIField_WinPStatus.GetID
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinPStatus_GetID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinPStatus_GetID) == 0x000004, "Wrong alignment on UIField_WinPStatus_GetID");
static_assert(sizeof(UIField_WinPStatus_GetID) == 0x000008, "Wrong size on UIField_WinPStatus_GetID");
static_assert(offsetof(UIField_WinPStatus_GetID, ReturnValue) == 0x000000, "Member 'UIField_WinPStatus_GetID::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIField_WinPStatus.InitData
// 0x001C (0x001C - 0x0000)
struct UIField_WinPStatus_InitData final
{
public:
	int32                                         InHP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxHP;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMP;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxMP;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevel;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinPStatus_InitData) == 0x000004, "Wrong alignment on UIField_WinPStatus_InitData");
static_assert(sizeof(UIField_WinPStatus_InitData) == 0x00001C, "Wrong size on UIField_WinPStatus_InitData");
static_assert(offsetof(UIField_WinPStatus_InitData, InHP) == 0x000000, "Member 'UIField_WinPStatus_InitData::InHP' has a wrong offset!");
static_assert(offsetof(UIField_WinPStatus_InitData, InMaxHP) == 0x000004, "Member 'UIField_WinPStatus_InitData::InMaxHP' has a wrong offset!");
static_assert(offsetof(UIField_WinPStatus_InitData, InMP) == 0x000008, "Member 'UIField_WinPStatus_InitData::InMP' has a wrong offset!");
static_assert(offsetof(UIField_WinPStatus_InitData, InMaxMP) == 0x00000C, "Member 'UIField_WinPStatus_InitData::InMaxMP' has a wrong offset!");
static_assert(offsetof(UIField_WinPStatus_InitData, InLevel) == 0x000010, "Member 'UIField_WinPStatus_InitData::InLevel' has a wrong offset!");
static_assert(offsetof(UIField_WinPStatus_InitData, InName) == 0x000014, "Member 'UIField_WinPStatus_InitData::InName' has a wrong offset!");

// Function DarwinGame.UIField_WinPStatus.SetID
// 0x0008 (0x0008 - 0x0000)
struct UIField_WinPStatus_SetID final
{
public:
	class FName                                   InKindID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinPStatus_SetID) == 0x000004, "Wrong alignment on UIField_WinPStatus_SetID");
static_assert(sizeof(UIField_WinPStatus_SetID) == 0x000008, "Wrong size on UIField_WinPStatus_SetID");
static_assert(offsetof(UIField_WinPStatus_SetID, InKindID) == 0x000000, "Member 'UIField_WinPStatus_SetID::InKindID' has a wrong offset!");

// Function DarwinGame.UIField_WinPStatus.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinPStatus_SetLevel final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinPStatus_SetLevel) == 0x000004, "Wrong alignment on UIField_WinPStatus_SetLevel");
static_assert(sizeof(UIField_WinPStatus_SetLevel) == 0x000004, "Wrong size on UIField_WinPStatus_SetLevel");
static_assert(offsetof(UIField_WinPStatus_SetLevel, NewLevel) == 0x000000, "Member 'UIField_WinPStatus_SetLevel::NewLevel' has a wrong offset!");

// Function DarwinGame.UIField_WinPStatus.SetName
// 0x0018 (0x0018 - 0x0000)
struct UIField_WinPStatus_SetName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinPStatus_SetName) == 0x000008, "Wrong alignment on UIField_WinPStatus_SetName");
static_assert(sizeof(UIField_WinPStatus_SetName) == 0x000018, "Wrong size on UIField_WinPStatus_SetName");
static_assert(offsetof(UIField_WinPStatus_SetName, InName) == 0x000000, "Member 'UIField_WinPStatus_SetName::InName' has a wrong offset!");

// Function DarwinGame.UIField_WinPStatus.SetSpValue
// 0x0004 (0x0004 - 0x0000)
struct UIField_WinPStatus_SetSpValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIField_WinPStatus_SetSpValue) == 0x000004, "Wrong alignment on UIField_WinPStatus_SetSpValue");
static_assert(sizeof(UIField_WinPStatus_SetSpValue) == 0x000004, "Wrong size on UIField_WinPStatus_SetSpValue");
static_assert(offsetof(UIField_WinPStatus_SetSpValue, InValue) == 0x000000, "Member 'UIField_WinPStatus_SetSpValue::InValue' has a wrong offset!");

// Function DarwinGame.UIField_WinSkillbox.AddChain
// 0x0050 (0x0050 - 0x0000)
struct UIField_WinSkillbox_AddChain final
{
public:
	bool                                          bIsNewChain;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KindId;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomEquipmentType                   CustomEquipment;                                   // 0x000C(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ERivalTeamForce                               RivalTeam;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRivalTeamLeader;                                 // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResistanceType                               Type;                                              // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ActionName;                                        // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EResistanceType>                       NextChainTypes;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIField_WinSkillbox_AddChain) == 0x000008, "Wrong alignment on UIField_WinSkillbox_AddChain");
static_assert(sizeof(UIField_WinSkillbox_AddChain) == 0x000050, "Wrong size on UIField_WinSkillbox_AddChain");
static_assert(offsetof(UIField_WinSkillbox_AddChain, bIsNewChain) == 0x000000, "Member 'UIField_WinSkillbox_AddChain::bIsNewChain' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, KindId) == 0x000004, "Member 'UIField_WinSkillbox_AddChain::KindId' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, CustomEquipment) == 0x00000C, "Member 'UIField_WinSkillbox_AddChain::CustomEquipment' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, RivalTeam) == 0x00001C, "Member 'UIField_WinSkillbox_AddChain::RivalTeam' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, IsRivalTeamLeader) == 0x00001D, "Member 'UIField_WinSkillbox_AddChain::IsRivalTeamLeader' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, Type) == 0x00001E, "Member 'UIField_WinSkillbox_AddChain::Type' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, ActionName) == 0x000020, "Member 'UIField_WinSkillbox_AddChain::ActionName' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, NextChainTypes) == 0x000038, "Member 'UIField_WinSkillbox_AddChain::NextChainTypes' has a wrong offset!");
static_assert(offsetof(UIField_WinSkillbox_AddChain, ReturnValue) == 0x000048, "Member 'UIField_WinSkillbox_AddChain::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIGaugeBase.InitWithParam
// 0x0008 (0x0008 - 0x0000)
struct UIGaugeBase_InitWithParam final
{
public:
	float                                         InParam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxParam;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGaugeBase_InitWithParam) == 0x000004, "Wrong alignment on UIGaugeBase_InitWithParam");
static_assert(sizeof(UIGaugeBase_InitWithParam) == 0x000008, "Wrong size on UIGaugeBase_InitWithParam");
static_assert(offsetof(UIGaugeBase_InitWithParam, InParam) == 0x000000, "Member 'UIGaugeBase_InitWithParam::InParam' has a wrong offset!");
static_assert(offsetof(UIGaugeBase_InitWithParam, InMaxParam) == 0x000004, "Member 'UIGaugeBase_InitWithParam::InMaxParam' has a wrong offset!");

// Function DarwinGame.UIGaugeBase.InitWithPercent
// 0x0004 (0x0004 - 0x0000)
struct UIGaugeBase_InitWithPercent final
{
public:
	float                                         InParam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGaugeBase_InitWithPercent) == 0x000004, "Wrong alignment on UIGaugeBase_InitWithPercent");
static_assert(sizeof(UIGaugeBase_InitWithPercent) == 0x000004, "Wrong size on UIGaugeBase_InitWithPercent");
static_assert(offsetof(UIGaugeBase_InitWithPercent, InParam) == 0x000000, "Member 'UIGaugeBase_InitWithPercent::InParam' has a wrong offset!");

// Function DarwinGame.UIGaugeBase.SetMaxParam
// 0x0004 (0x0004 - 0x0000)
struct UIGaugeBase_SetMaxParam final
{
public:
	float                                         InMaxParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGaugeBase_SetMaxParam) == 0x000004, "Wrong alignment on UIGaugeBase_SetMaxParam");
static_assert(sizeof(UIGaugeBase_SetMaxParam) == 0x000004, "Wrong size on UIGaugeBase_SetMaxParam");
static_assert(offsetof(UIGaugeBase_SetMaxParam, InMaxParam) == 0x000000, "Member 'UIGaugeBase_SetMaxParam::InMaxParam' has a wrong offset!");

// Function DarwinGame.UIGaugeBase.SetParam
// 0x0004 (0x0004 - 0x0000)
struct UIGaugeBase_SetParam final
{
public:
	float                                         InParam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGaugeBase_SetParam) == 0x000004, "Wrong alignment on UIGaugeBase_SetParam");
static_assert(sizeof(UIGaugeBase_SetParam) == 0x000004, "Wrong size on UIGaugeBase_SetParam");
static_assert(offsetof(UIGaugeBase_SetParam, InParam) == 0x000000, "Member 'UIGaugeBase_SetParam::InParam' has a wrong offset!");

// Function DarwinGame.UIGaugeBase.SetShowParam
// 0x0004 (0x0004 - 0x0000)
struct UIGaugeBase_SetShowParam final
{
public:
	float                                         InShowParam;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGaugeBase_SetShowParam) == 0x000004, "Wrong alignment on UIGaugeBase_SetShowParam");
static_assert(sizeof(UIGaugeBase_SetShowParam) == 0x000004, "Wrong size on UIGaugeBase_SetShowParam");
static_assert(offsetof(UIGaugeBase_SetShowParam, InShowParam) == 0x000000, "Member 'UIGaugeBase_SetShowParam::InShowParam' has a wrong offset!");

// Function DarwinGame.UIGaugeBase.UpdateWithParam
// 0x0008 (0x0008 - 0x0000)
struct UIGaugeBase_UpdateWithParam final
{
public:
	float                                         InParam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxParam;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGaugeBase_UpdateWithParam) == 0x000004, "Wrong alignment on UIGaugeBase_UpdateWithParam");
static_assert(sizeof(UIGaugeBase_UpdateWithParam) == 0x000008, "Wrong size on UIGaugeBase_UpdateWithParam");
static_assert(offsetof(UIGaugeBase_UpdateWithParam, InParam) == 0x000000, "Member 'UIGaugeBase_UpdateWithParam::InParam' has a wrong offset!");
static_assert(offsetof(UIGaugeBase_UpdateWithParam, InMaxParam) == 0x000004, "Member 'UIGaugeBase_UpdateWithParam::InMaxParam' has a wrong offset!");

// Function DarwinGame.UIGlut_IconFood.Clip
// 0x0008 (0x0008 - 0x0000)
struct UIGlut_IconFood_Clip final
{
public:
	float                                         InX;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InY;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGlut_IconFood_Clip) == 0x000004, "Wrong alignment on UIGlut_IconFood_Clip");
static_assert(sizeof(UIGlut_IconFood_Clip) == 0x000008, "Wrong size on UIGlut_IconFood_Clip");
static_assert(offsetof(UIGlut_IconFood_Clip, InX) == 0x000000, "Member 'UIGlut_IconFood_Clip::InX' has a wrong offset!");
static_assert(offsetof(UIGlut_IconFood_Clip, InY) == 0x000004, "Member 'UIGlut_IconFood_Clip::InY' has a wrong offset!");

// Function DarwinGame.UIGlut_IconFood.IsFavoriteFood
// 0x0001 (0x0001 - 0x0000)
struct UIGlut_IconFood_IsFavoriteFood final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGlut_IconFood_IsFavoriteFood) == 0x000001, "Wrong alignment on UIGlut_IconFood_IsFavoriteFood");
static_assert(sizeof(UIGlut_IconFood_IsFavoriteFood) == 0x000001, "Wrong size on UIGlut_IconFood_IsFavoriteFood");
static_assert(offsetof(UIGlut_IconFood_IsFavoriteFood, ReturnValue) == 0x000000, "Member 'UIGlut_IconFood_IsFavoriteFood::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIGlut_IconFood.SetDataUid
// 0x000C (0x000C - 0x0000)
struct UIGlut_IconFood_SetDataUid final
{
public:
	class FName                                   InItemId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InUid;                                             // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGlut_IconFood_SetDataUid) == 0x000004, "Wrong alignment on UIGlut_IconFood_SetDataUid");
static_assert(sizeof(UIGlut_IconFood_SetDataUid) == 0x00000C, "Wrong size on UIGlut_IconFood_SetDataUid");
static_assert(offsetof(UIGlut_IconFood_SetDataUid, InItemId) == 0x000000, "Member 'UIGlut_IconFood_SetDataUid::InItemId' has a wrong offset!");
static_assert(offsetof(UIGlut_IconFood_SetDataUid, InUid) == 0x000008, "Member 'UIGlut_IconFood_SetDataUid::InUid' has a wrong offset!");

// Function DarwinGame.UIGlut_IconFood.SetIsCategory
// 0x0001 (0x0001 - 0x0000)
struct UIGlut_IconFood_SetIsCategory final
{
public:
	bool                                          bInIsCategory;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGlut_IconFood_SetIsCategory) == 0x000001, "Wrong alignment on UIGlut_IconFood_SetIsCategory");
static_assert(sizeof(UIGlut_IconFood_SetIsCategory) == 0x000001, "Wrong size on UIGlut_IconFood_SetIsCategory");
static_assert(offsetof(UIGlut_IconFood_SetIsCategory, bInIsCategory) == 0x000000, "Member 'UIGlut_IconFood_SetIsCategory::bInIsCategory' has a wrong offset!");

// Function DarwinGame.UIGlut_WinStatus.SetTargetUid
// 0x0004 (0x0004 - 0x0000)
struct UIGlut_WinStatus_SetTargetUid final
{
public:
	int32                                         InUid;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGlut_WinStatus_SetTargetUid) == 0x000004, "Wrong alignment on UIGlut_WinStatus_SetTargetUid");
static_assert(sizeof(UIGlut_WinStatus_SetTargetUid) == 0x000004, "Wrong size on UIGlut_WinStatus_SetTargetUid");
static_assert(offsetof(UIGlut_WinStatus_SetTargetUid, InUid) == 0x000000, "Member 'UIGlut_WinStatus_SetTargetUid::InUid' has a wrong offset!");

// Function DarwinGame.UIHub_CoinWindow.EffectMovieRequestDataExec
// 0x0008 (0x0008 - 0x0000)
struct UIHub_CoinWindow_EffectMovieRequestDataExec final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHub_CoinWindow_EffectMovieRequestDataExec) == 0x000008, "Wrong alignment on UIHub_CoinWindow_EffectMovieRequestDataExec");
static_assert(sizeof(UIHub_CoinWindow_EffectMovieRequestDataExec) == 0x000008, "Wrong size on UIHub_CoinWindow_EffectMovieRequestDataExec");
static_assert(offsetof(UIHub_CoinWindow_EffectMovieRequestDataExec, ManaComponent) == 0x000000, "Member 'UIHub_CoinWindow_EffectMovieRequestDataExec::ManaComponent' has a wrong offset!");

// Function DarwinGame.UIHub_RankUp.EffectMovieChangeStateExec
// 0x0010 (0x0010 - 0x0000)
struct UIHub_RankUp_EffectMovieChangeStateExec final
{
public:
	EManaComponentStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHub_RankUp_EffectMovieChangeStateExec) == 0x000008, "Wrong alignment on UIHub_RankUp_EffectMovieChangeStateExec");
static_assert(sizeof(UIHub_RankUp_EffectMovieChangeStateExec) == 0x000010, "Wrong size on UIHub_RankUp_EffectMovieChangeStateExec");
static_assert(offsetof(UIHub_RankUp_EffectMovieChangeStateExec, Status) == 0x000000, "Member 'UIHub_RankUp_EffectMovieChangeStateExec::Status' has a wrong offset!");
static_assert(offsetof(UIHub_RankUp_EffectMovieChangeStateExec, ManaComponent) == 0x000008, "Member 'UIHub_RankUp_EffectMovieChangeStateExec::ManaComponent' has a wrong offset!");

// Function DarwinGame.UIHub_RankUp.EffectMovieRequestDataExec
// 0x0008 (0x0008 - 0x0000)
struct UIHub_RankUp_EffectMovieRequestDataExec final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHub_RankUp_EffectMovieRequestDataExec) == 0x000008, "Wrong alignment on UIHub_RankUp_EffectMovieRequestDataExec");
static_assert(sizeof(UIHub_RankUp_EffectMovieRequestDataExec) == 0x000008, "Wrong size on UIHub_RankUp_EffectMovieRequestDataExec");
static_assert(offsetof(UIHub_RankUp_EffectMovieRequestDataExec, ManaComponent) == 0x000000, "Member 'UIHub_RankUp_EffectMovieRequestDataExec::ManaComponent' has a wrong offset!");

// Function DarwinGame.UIItemget_NewItem.SetItemData
// 0x0008 (0x0008 - 0x0000)
struct UIItemget_NewItem_SetItemData final
{
public:
	class FName                                   InItemId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItemget_NewItem_SetItemData) == 0x000004, "Wrong alignment on UIItemget_NewItem_SetItemData");
static_assert(sizeof(UIItemget_NewItem_SetItemData) == 0x000008, "Wrong size on UIItemget_NewItem_SetItemData");
static_assert(offsetof(UIItemget_NewItem_SetItemData, InItemId) == 0x000000, "Member 'UIItemget_NewItem_SetItemData::InItemId' has a wrong offset!");

// Function DarwinGame.UIItemget_NewItem.IsDecideVisible
// 0x0001 (0x0001 - 0x0000)
struct UIItemget_NewItem_IsDecideVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItemget_NewItem_IsDecideVisible) == 0x000001, "Wrong alignment on UIItemget_NewItem_IsDecideVisible");
static_assert(sizeof(UIItemget_NewItem_IsDecideVisible) == 0x000001, "Wrong size on UIItemget_NewItem_IsDecideVisible");
static_assert(offsetof(UIItemget_NewItem_IsDecideVisible, ReturnValue) == 0x000000, "Member 'UIItemget_NewItem_IsDecideVisible::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIItemmenu_02_03.GetFacilityType
// 0x0001 (0x0001 - 0x0000)
struct UIItemmenu_02_03_GetFacilityType final
{
public:
	EFacilityMenuType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItemmenu_02_03_GetFacilityType) == 0x000001, "Wrong alignment on UIItemmenu_02_03_GetFacilityType");
static_assert(sizeof(UIItemmenu_02_03_GetFacilityType) == 0x000001, "Wrong size on UIItemmenu_02_03_GetFacilityType");
static_assert(offsetof(UIItemmenu_02_03_GetFacilityType, ReturnValue) == 0x000000, "Member 'UIItemmenu_02_03_GetFacilityType::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIItemmenu_02_03.SetFacilityType
// 0x0001 (0x0001 - 0x0000)
struct UIItemmenu_02_03_SetFacilityType final
{
public:
	EFacilityMenuType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItemmenu_02_03_SetFacilityType) == 0x000001, "Wrong alignment on UIItemmenu_02_03_SetFacilityType");
static_assert(sizeof(UIItemmenu_02_03_SetFacilityType) == 0x000001, "Wrong size on UIItemmenu_02_03_SetFacilityType");
static_assert(offsetof(UIItemmenu_02_03_SetFacilityType, Type) == 0x000000, "Member 'UIItemmenu_02_03_SetFacilityType::Type' has a wrong offset!");

// Function DarwinGame.UIManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetInstance final
{
public:
	class UUIManager*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetInstance) == 0x000008, "Wrong alignment on UIManager_GetInstance");
static_assert(sizeof(UIManager_GetInstance) == 0x000008, "Wrong size on UIManager_GetInstance");
static_assert(offsetof(UIManager_GetInstance, ReturnValue) == 0x000000, "Member 'UIManager_GetInstance::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.DynamicCreateWidget
// 0x0018 (0x0018 - 0x0000)
struct UIManager_DynamicCreateWidget final
{
public:
	TSubclassOf<class UDarwinUserWidget>          Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_DynamicCreateWidget) == 0x000008, "Wrong alignment on UIManager_DynamicCreateWidget");
static_assert(sizeof(UIManager_DynamicCreateWidget) == 0x000018, "Wrong size on UIManager_DynamicCreateWidget");
static_assert(offsetof(UIManager_DynamicCreateWidget, Class_0) == 0x000000, "Member 'UIManager_DynamicCreateWidget::Class_0' has a wrong offset!");
static_assert(offsetof(UIManager_DynamicCreateWidget, OutIndex) == 0x000008, "Member 'UIManager_DynamicCreateWidget::OutIndex' has a wrong offset!");
static_assert(offsetof(UIManager_DynamicCreateWidget, ReturnValue) == 0x000010, "Member 'UIManager_DynamicCreateWidget::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetReUseWidget
// 0x0018 (0x0018 - 0x0000)
struct UIManager_GetReUseWidget final
{
public:
	TSubclassOf<class UDarwinUserWidget>          Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetReUseWidget) == 0x000008, "Wrong alignment on UIManager_GetReUseWidget");
static_assert(sizeof(UIManager_GetReUseWidget) == 0x000018, "Wrong size on UIManager_GetReUseWidget");
static_assert(offsetof(UIManager_GetReUseWidget, Class_0) == 0x000000, "Member 'UIManager_GetReUseWidget::Class_0' has a wrong offset!");
static_assert(offsetof(UIManager_GetReUseWidget, OutIndex) == 0x000008, "Member 'UIManager_GetReUseWidget::OutIndex' has a wrong offset!");
static_assert(offsetof(UIManager_GetReUseWidget, ReturnValue) == 0x000010, "Member 'UIManager_GetReUseWidget::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetUnusedWidget
// 0x0018 (0x0018 - 0x0000)
struct UIManager_GetUnusedWidget final
{
public:
	TSubclassOf<class UDarwinUserWidget>          Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetUnusedWidget) == 0x000008, "Wrong alignment on UIManager_GetUnusedWidget");
static_assert(sizeof(UIManager_GetUnusedWidget) == 0x000018, "Wrong size on UIManager_GetUnusedWidget");
static_assert(offsetof(UIManager_GetUnusedWidget, Class_0) == 0x000000, "Member 'UIManager_GetUnusedWidget::Class_0' has a wrong offset!");
static_assert(offsetof(UIManager_GetUnusedWidget, OutIndex) == 0x000008, "Member 'UIManager_GetUnusedWidget::OutIndex' has a wrong offset!");
static_assert(offsetof(UIManager_GetUnusedWidget, ReturnValue) == 0x000010, "Member 'UIManager_GetUnusedWidget::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetWidget
// 0x0018 (0x0018 - 0x0000)
struct UIManager_GetWidget final
{
public:
	TSubclassOf<class UDarwinUserWidget>          Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDarwinUserWidget*                      ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetWidget) == 0x000008, "Wrong alignment on UIManager_GetWidget");
static_assert(sizeof(UIManager_GetWidget) == 0x000018, "Wrong size on UIManager_GetWidget");
static_assert(offsetof(UIManager_GetWidget, Class_0) == 0x000000, "Member 'UIManager_GetWidget::Class_0' has a wrong offset!");
static_assert(offsetof(UIManager_GetWidget, Index_0) == 0x000008, "Member 'UIManager_GetWidget::Index_0' has a wrong offset!");
static_assert(offsetof(UIManager_GetWidget, ReturnValue) == 0x000010, "Member 'UIManager_GetWidget::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetWidgetArray
// 0x0010 (0x0010 - 0x0000)
struct UIManager_GetWidgetArray final
{
public:
	TSubclassOf<class UDarwinUserWidget>          Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidgetArray*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetWidgetArray) == 0x000008, "Wrong alignment on UIManager_GetWidgetArray");
static_assert(sizeof(UIManager_GetWidgetArray) == 0x000010, "Wrong size on UIManager_GetWidgetArray");
static_assert(offsetof(UIManager_GetWidgetArray, Class_0) == 0x000000, "Member 'UIManager_GetWidgetArray::Class_0' has a wrong offset!");
static_assert(offsetof(UIManager_GetWidgetArray, ReturnValue) == 0x000008, "Member 'UIManager_GetWidgetArray::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.LoadOneShot
// 0x000C (0x000C - 0x0000)
struct UIManager_LoadOneShot final
{
public:
	class FName                                   OneShotName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_LoadOneShot) == 0x000004, "Wrong alignment on UIManager_LoadOneShot");
static_assert(sizeof(UIManager_LoadOneShot) == 0x00000C, "Wrong size on UIManager_LoadOneShot");
static_assert(offsetof(UIManager_LoadOneShot, OneShotName) == 0x000000, "Member 'UIManager_LoadOneShot::OneShotName' has a wrong offset!");
static_assert(offsetof(UIManager_LoadOneShot, ReturnValue) == 0x000008, "Member 'UIManager_LoadOneShot::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.PauseGame
// 0x0001 (0x0001 - 0x0000)
struct UIManager_PauseGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_PauseGame) == 0x000001, "Wrong alignment on UIManager_PauseGame");
static_assert(sizeof(UIManager_PauseGame) == 0x000001, "Wrong size on UIManager_PauseGame");
static_assert(offsetof(UIManager_PauseGame, ReturnValue) == 0x000000, "Member 'UIManager_PauseGame::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.PlayOneShot
// 0x0008 (0x0008 - 0x0000)
struct UIManager_PlayOneShot final
{
public:
	int32                                         OneShotId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_PlayOneShot) == 0x000004, "Wrong alignment on UIManager_PlayOneShot");
static_assert(sizeof(UIManager_PlayOneShot) == 0x000008, "Wrong size on UIManager_PlayOneShot");
static_assert(offsetof(UIManager_PlayOneShot, OneShotId) == 0x000000, "Member 'UIManager_PlayOneShot::OneShotId' has a wrong offset!");
static_assert(offsetof(UIManager_PlayOneShot, WaitTime) == 0x000004, "Member 'UIManager_PlayOneShot::WaitTime' has a wrong offset!");

// Function DarwinGame.UIManager.SetCanOpenMainMenu
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetCanOpenMainMenu final
{
public:
	bool                                          bCanOpen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetCanOpenMainMenu) == 0x000001, "Wrong alignment on UIManager_SetCanOpenMainMenu");
static_assert(sizeof(UIManager_SetCanOpenMainMenu) == 0x000001, "Wrong size on UIManager_SetCanOpenMainMenu");
static_assert(offsetof(UIManager_SetCanOpenMainMenu, bCanOpen) == 0x000000, "Member 'UIManager_SetCanOpenMainMenu::bCanOpen' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtDungeon
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtDungeon final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtDungeon) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtDungeon");
static_assert(sizeof(UIManager_SetHideFlagAtDungeon) == 0x000001, "Wrong size on UIManager_SetHideFlagAtDungeon");
static_assert(offsetof(UIManager_SetHideFlagAtDungeon, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtDungeon::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtEvent
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtEvent final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtEvent) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtEvent");
static_assert(sizeof(UIManager_SetHideFlagAtEvent) == 0x000001, "Wrong size on UIManager_SetHideFlagAtEvent");
static_assert(offsetof(UIManager_SetHideFlagAtEvent, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtEvent::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtForcedBattle
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtForcedBattle final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtForcedBattle) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtForcedBattle");
static_assert(sizeof(UIManager_SetHideFlagAtForcedBattle) == 0x000001, "Wrong size on UIManager_SetHideFlagAtForcedBattle");
static_assert(offsetof(UIManager_SetHideFlagAtForcedBattle, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtForcedBattle::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtGeneralSequence
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtGeneralSequence final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtGeneralSequence) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtGeneralSequence");
static_assert(sizeof(UIManager_SetHideFlagAtGeneralSequence) == 0x000001, "Wrong size on UIManager_SetHideFlagAtGeneralSequence");
static_assert(offsetof(UIManager_SetHideFlagAtGeneralSequence, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtGeneralSequence::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtQuest
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtQuest final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtQuest) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtQuest");
static_assert(sizeof(UIManager_SetHideFlagAtQuest) == 0x000001, "Wrong size on UIManager_SetHideFlagAtQuest");
static_assert(offsetof(UIManager_SetHideFlagAtQuest, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtQuest::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtQuestOrder
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtQuestOrder final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtQuestOrder) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtQuestOrder");
static_assert(sizeof(UIManager_SetHideFlagAtQuestOrder) == 0x000001, "Wrong size on UIManager_SetHideFlagAtQuestOrder");
static_assert(offsetof(UIManager_SetHideFlagAtQuestOrder, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtQuestOrder::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtRankUpSequence
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtRankUpSequence final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtRankUpSequence) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtRankUpSequence");
static_assert(sizeof(UIManager_SetHideFlagAtRankUpSequence) == 0x000001, "Wrong size on UIManager_SetHideFlagAtRankUpSequence");
static_assert(offsetof(UIManager_SetHideFlagAtRankUpSequence, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtRankUpSequence::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetHideFlagAtSpecialAbility
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetHideFlagAtSpecialAbility final
{
public:
	bool                                          bIsHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetHideFlagAtSpecialAbility) == 0x000001, "Wrong alignment on UIManager_SetHideFlagAtSpecialAbility");
static_assert(sizeof(UIManager_SetHideFlagAtSpecialAbility) == 0x000001, "Wrong size on UIManager_SetHideFlagAtSpecialAbility");
static_assert(offsetof(UIManager_SetHideFlagAtSpecialAbility, bIsHide) == 0x000000, "Member 'UIManager_SetHideFlagAtSpecialAbility::bIsHide' has a wrong offset!");

// Function DarwinGame.UIManager.SetQueueSystemCanEnqueue
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetQueueSystemCanEnqueue final
{
public:
	bool                                          bCanEnqueue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetQueueSystemCanEnqueue) == 0x000001, "Wrong alignment on UIManager_SetQueueSystemCanEnqueue");
static_assert(sizeof(UIManager_SetQueueSystemCanEnqueue) == 0x000001, "Wrong size on UIManager_SetQueueSystemCanEnqueue");
static_assert(offsetof(UIManager_SetQueueSystemCanEnqueue, bCanEnqueue) == 0x000000, "Member 'UIManager_SetQueueSystemCanEnqueue::bCanEnqueue' has a wrong offset!");

// Function DarwinGame.UIManager.SetQueueSystemUpdateEnable
// 0x0001 (0x0001 - 0x0000)
struct UIManager_SetQueueSystemUpdateEnable final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_SetQueueSystemUpdateEnable) == 0x000001, "Wrong alignment on UIManager_SetQueueSystemUpdateEnable");
static_assert(sizeof(UIManager_SetQueueSystemUpdateEnable) == 0x000001, "Wrong size on UIManager_SetQueueSystemUpdateEnable");
static_assert(offsetof(UIManager_SetQueueSystemUpdateEnable, bIsEnable) == 0x000000, "Member 'UIManager_SetQueueSystemUpdateEnable::bIsEnable' has a wrong offset!");

// Function DarwinGame.UIManager.UnloadOneShot
// 0x0004 (0x0004 - 0x0000)
struct UIManager_UnloadOneShot final
{
public:
	int32                                         OneShotId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_UnloadOneShot) == 0x000004, "Wrong alignment on UIManager_UnloadOneShot");
static_assert(sizeof(UIManager_UnloadOneShot) == 0x000004, "Wrong size on UIManager_UnloadOneShot");
static_assert(offsetof(UIManager_UnloadOneShot, OneShotId) == 0x000000, "Member 'UIManager_UnloadOneShot::OneShotId' has a wrong offset!");

// Function DarwinGame.UIManager.UnPauseGame
// 0x0001 (0x0001 - 0x0000)
struct UIManager_UnPauseGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_UnPauseGame) == 0x000001, "Wrong alignment on UIManager_UnPauseGame");
static_assert(sizeof(UIManager_UnPauseGame) == 0x000001, "Wrong size on UIManager_UnPauseGame");
static_assert(offsetof(UIManager_UnPauseGame, ReturnValue) == 0x000000, "Member 'UIManager_UnPauseGame::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.CanOpenMainMenu
// 0x0001 (0x0001 - 0x0000)
struct UIManager_CanOpenMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_CanOpenMainMenu) == 0x000001, "Wrong alignment on UIManager_CanOpenMainMenu");
static_assert(sizeof(UIManager_CanOpenMainMenu) == 0x000001, "Wrong size on UIManager_CanOpenMainMenu");
static_assert(offsetof(UIManager_CanOpenMainMenu, ReturnValue) == 0x000000, "Member 'UIManager_CanOpenMainMenu::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetDarwinFrameCapture
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetDarwinFrameCapture final
{
public:
	class UDarwinFrameCapture*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetDarwinFrameCapture) == 0x000008, "Wrong alignment on UIManager_GetDarwinFrameCapture");
static_assert(sizeof(UIManager_GetDarwinFrameCapture) == 0x000008, "Wrong size on UIManager_GetDarwinFrameCapture");
static_assert(offsetof(UIManager_GetDarwinFrameCapture, ReturnValue) == 0x000000, "Member 'UIManager_GetDarwinFrameCapture::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetTipsOpenConditionsChecker
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetTipsOpenConditionsChecker final
{
public:
	class UTipsOpenConditionsChecker*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetTipsOpenConditionsChecker) == 0x000008, "Wrong alignment on UIManager_GetTipsOpenConditionsChecker");
static_assert(sizeof(UIManager_GetTipsOpenConditionsChecker) == 0x000008, "Wrong size on UIManager_GetTipsOpenConditionsChecker");
static_assert(offsetof(UIManager_GetTipsOpenConditionsChecker, ReturnValue) == 0x000000, "Member 'UIManager_GetTipsOpenConditionsChecker::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetTipsOpener
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetTipsOpener final
{
public:
	class UTipsOpener*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetTipsOpener) == 0x000008, "Wrong alignment on UIManager_GetTipsOpener");
static_assert(sizeof(UIManager_GetTipsOpener) == 0x000008, "Wrong size on UIManager_GetTipsOpener");
static_assert(offsetof(UIManager_GetTipsOpener, ReturnValue) == 0x000000, "Member 'UIManager_GetTipsOpener::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetUIARMarkerSystem
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetUIARMarkerSystem final
{
public:
	class UUIARMarkerSystem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetUIARMarkerSystem) == 0x000008, "Wrong alignment on UIManager_GetUIARMarkerSystem");
static_assert(sizeof(UIManager_GetUIARMarkerSystem) == 0x000008, "Wrong size on UIManager_GetUIARMarkerSystem");
static_assert(offsetof(UIManager_GetUIARMarkerSystem, ReturnValue) == 0x000000, "Member 'UIManager_GetUIARMarkerSystem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetUIArtifactGetSystem
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetUIArtifactGetSystem final
{
public:
	class UUIArtifactGetSystem*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetUIArtifactGetSystem) == 0x000008, "Wrong alignment on UIManager_GetUIArtifactGetSystem");
static_assert(sizeof(UIManager_GetUIArtifactGetSystem) == 0x000008, "Wrong size on UIManager_GetUIArtifactGetSystem");
static_assert(offsetof(UIManager_GetUIArtifactGetSystem, ReturnValue) == 0x000000, "Member 'UIManager_GetUIArtifactGetSystem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetUIFieldStamp
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetUIFieldStamp final
{
public:
	class UUIFieldQueueStampSystem*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetUIFieldStamp) == 0x000008, "Wrong alignment on UIManager_GetUIFieldStamp");
static_assert(sizeof(UIManager_GetUIFieldStamp) == 0x000008, "Wrong size on UIManager_GetUIFieldStamp");
static_assert(offsetof(UIManager_GetUIFieldStamp, ReturnValue) == 0x000000, "Member 'UIManager_GetUIFieldStamp::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.GetUIQuestQueueSystem
// 0x0008 (0x0008 - 0x0000)
struct UIManager_GetUIQuestQueueSystem final
{
public:
	class UUIQuestQueueSystem*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_GetUIQuestQueueSystem) == 0x000008, "Wrong alignment on UIManager_GetUIQuestQueueSystem");
static_assert(sizeof(UIManager_GetUIQuestQueueSystem) == 0x000008, "Wrong size on UIManager_GetUIQuestQueueSystem");
static_assert(offsetof(UIManager_GetUIQuestQueueSystem, ReturnValue) == 0x000000, "Member 'UIManager_GetUIQuestQueueSystem::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.IsLoadedOneShot
// 0x0008 (0x0008 - 0x0000)
struct UIManager_IsLoadedOneShot final
{
public:
	int32                                         OneShotId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIManager_IsLoadedOneShot) == 0x000004, "Wrong alignment on UIManager_IsLoadedOneShot");
static_assert(sizeof(UIManager_IsLoadedOneShot) == 0x000008, "Wrong size on UIManager_IsLoadedOneShot");
static_assert(offsetof(UIManager_IsLoadedOneShot, OneShotId) == 0x000000, "Member 'UIManager_IsLoadedOneShot::OneShotId' has a wrong offset!");
static_assert(offsetof(UIManager_IsLoadedOneShot, ReturnValue) == 0x000004, "Member 'UIManager_IsLoadedOneShot::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.IsQuestSystemPauseDirecting
// 0x0001 (0x0001 - 0x0000)
struct UIManager_IsQuestSystemPauseDirecting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManager_IsQuestSystemPauseDirecting) == 0x000001, "Wrong alignment on UIManager_IsQuestSystemPauseDirecting");
static_assert(sizeof(UIManager_IsQuestSystemPauseDirecting) == 0x000001, "Wrong size on UIManager_IsQuestSystemPauseDirecting");
static_assert(offsetof(UIManager_IsQuestSystemPauseDirecting, ReturnValue) == 0x000000, "Member 'UIManager_IsQuestSystemPauseDirecting::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIManager.WidgetCanAction
// 0x0010 (0x0010 - 0x0000)
struct UIManager_WidgetCanAction final
{
public:
	class UDarwinUserWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetAction                                 Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIManager_WidgetCanAction) == 0x000008, "Wrong alignment on UIManager_WidgetCanAction");
static_assert(sizeof(UIManager_WidgetCanAction) == 0x000010, "Wrong size on UIManager_WidgetCanAction");
static_assert(offsetof(UIManager_WidgetCanAction, Target) == 0x000000, "Member 'UIManager_WidgetCanAction::Target' has a wrong offset!");
static_assert(offsetof(UIManager_WidgetCanAction, Action) == 0x000008, "Member 'UIManager_WidgetCanAction::Action' has a wrong offset!");
static_assert(offsetof(UIManager_WidgetCanAction, ReturnValue) == 0x000009, "Member 'UIManager_WidgetCanAction::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIItemmenu_02_03_Root.SetFacilityType
// 0x0001 (0x0001 - 0x0000)
struct UIItemmenu_02_03_Root_SetFacilityType final
{
public:
	EFacilityMenuType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItemmenu_02_03_Root_SetFacilityType) == 0x000001, "Wrong alignment on UIItemmenu_02_03_Root_SetFacilityType");
static_assert(sizeof(UIItemmenu_02_03_Root_SetFacilityType) == 0x000001, "Wrong size on UIItemmenu_02_03_Root_SetFacilityType");
static_assert(offsetof(UIItemmenu_02_03_Root_SetFacilityType, Type) == 0x000000, "Member 'UIItemmenu_02_03_Root_SetFacilityType::Type' has a wrong offset!");

// Function DarwinGame.UIItemmenu_WinMakeDirecting.SetMakeDirecting
// 0x0010 (0x0010 - 0x0000)
struct UIItemmenu_WinMakeDirecting_SetMakeDirecting final
{
public:
	EFacilityMenuType                             InMenuType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InItemId;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InItemNum;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItemmenu_WinMakeDirecting_SetMakeDirecting) == 0x000004, "Wrong alignment on UIItemmenu_WinMakeDirecting_SetMakeDirecting");
static_assert(sizeof(UIItemmenu_WinMakeDirecting_SetMakeDirecting) == 0x000010, "Wrong size on UIItemmenu_WinMakeDirecting_SetMakeDirecting");
static_assert(offsetof(UIItemmenu_WinMakeDirecting_SetMakeDirecting, InMenuType) == 0x000000, "Member 'UIItemmenu_WinMakeDirecting_SetMakeDirecting::InMenuType' has a wrong offset!");
static_assert(offsetof(UIItemmenu_WinMakeDirecting_SetMakeDirecting, InItemId) == 0x000004, "Member 'UIItemmenu_WinMakeDirecting_SetMakeDirecting::InItemId' has a wrong offset!");
static_assert(offsetof(UIItemmenu_WinMakeDirecting_SetMakeDirecting, InItemNum) == 0x00000C, "Member 'UIItemmenu_WinMakeDirecting_SetMakeDirecting::InItemNum' has a wrong offset!");

// Function DarwinGame.UILinkGauge_Icon.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct UILinkGauge_Icon_SetPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILinkGauge_Icon_SetPercent) == 0x000004, "Wrong alignment on UILinkGauge_Icon_SetPercent");
static_assert(sizeof(UILinkGauge_Icon_SetPercent) == 0x000004, "Wrong size on UILinkGauge_Icon_SetPercent");
static_assert(offsetof(UILinkGauge_Icon_SetPercent, Percent) == 0x000000, "Member 'UILinkGauge_Icon_SetPercent::Percent' has a wrong offset!");

// Function DarwinGame.UIMapMenu.DrawDebug3DPos
// 0x000C (0x000C - 0x0000)
struct UIMapMenu_DrawDebug3DPos final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMapMenu_DrawDebug3DPos) == 0x000004, "Wrong alignment on UIMapMenu_DrawDebug3DPos");
static_assert(sizeof(UIMapMenu_DrawDebug3DPos) == 0x00000C, "Wrong size on UIMapMenu_DrawDebug3DPos");
static_assert(offsetof(UIMapMenu_DrawDebug3DPos, Pos) == 0x000000, "Member 'UIMapMenu_DrawDebug3DPos::Pos' has a wrong offset!");

// Function DarwinGame.UIMapMenu.DrawDebugPos
// 0x0008 (0x0008 - 0x0000)
struct UIMapMenu_DrawDebugPos final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMapMenu_DrawDebugPos) == 0x000004, "Wrong alignment on UIMapMenu_DrawDebugPos");
static_assert(sizeof(UIMapMenu_DrawDebugPos) == 0x000008, "Wrong size on UIMapMenu_DrawDebugPos");
static_assert(offsetof(UIMapMenu_DrawDebugPos, Pos) == 0x000000, "Member 'UIMapMenu_DrawDebugPos::Pos' has a wrong offset!");

// Function DarwinGame.UIMapMenu.DrawDebugSignSymbolLog
// 0x0014 (0x0014 - 0x0000)
struct UIMapMenu_DrawDebugSignSymbolLog final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMapMenu_DrawDebugSignSymbolLog) == 0x000004, "Wrong alignment on UIMapMenu_DrawDebugSignSymbolLog");
static_assert(sizeof(UIMapMenu_DrawDebugSignSymbolLog) == 0x000014, "Wrong size on UIMapMenu_DrawDebugSignSymbolLog");
static_assert(offsetof(UIMapMenu_DrawDebugSignSymbolLog, Pos) == 0x000000, "Member 'UIMapMenu_DrawDebugSignSymbolLog::Pos' has a wrong offset!");
static_assert(offsetof(UIMapMenu_DrawDebugSignSymbolLog, AreaID) == 0x00000C, "Member 'UIMapMenu_DrawDebugSignSymbolLog::AreaID' has a wrong offset!");

// Function DarwinGame.UIMenuNumberBase.ChangeValue
// 0x0010 (0x0010 - 0x0000)
struct UIMenuNumberBase_ChangeValue final
{
public:
	EAxisMappingType                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Add;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLeftStick;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isRightStick;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuNumberBase_ChangeValue) == 0x000004, "Wrong alignment on UIMenuNumberBase_ChangeValue");
static_assert(sizeof(UIMenuNumberBase_ChangeValue) == 0x000010, "Wrong size on UIMenuNumberBase_ChangeValue");
static_assert(offsetof(UIMenuNumberBase_ChangeValue, Key) == 0x000000, "Member 'UIMenuNumberBase_ChangeValue::Key' has a wrong offset!");
static_assert(offsetof(UIMenuNumberBase_ChangeValue, Add) == 0x000004, "Member 'UIMenuNumberBase_ChangeValue::Add' has a wrong offset!");
static_assert(offsetof(UIMenuNumberBase_ChangeValue, isLeftStick) == 0x000008, "Member 'UIMenuNumberBase_ChangeValue::isLeftStick' has a wrong offset!");
static_assert(offsetof(UIMenuNumberBase_ChangeValue, isRightStick) == 0x000009, "Member 'UIMenuNumberBase_ChangeValue::isRightStick' has a wrong offset!");
static_assert(offsetof(UIMenuNumberBase_ChangeValue, ReturnValue) == 0x00000C, "Member 'UIMenuNumberBase_ChangeValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuNumberBase.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UIMenuNumberBase_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuNumberBase_GetValue) == 0x000004, "Wrong alignment on UIMenuNumberBase_GetValue");
static_assert(sizeof(UIMenuNumberBase_GetValue) == 0x000004, "Wrong size on UIMenuNumberBase_GetValue");
static_assert(offsetof(UIMenuNumberBase_GetValue, ReturnValue) == 0x000000, "Member 'UIMenuNumberBase_GetValue::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuNumberBase.IsSelectable
// 0x0008 (0x0008 - 0x0000)
struct UIMenuNumberBase_IsSelectable final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIMenuNumberBase_IsSelectable) == 0x000004, "Wrong alignment on UIMenuNumberBase_IsSelectable");
static_assert(sizeof(UIMenuNumberBase_IsSelectable) == 0x000008, "Wrong size on UIMenuNumberBase_IsSelectable");
static_assert(offsetof(UIMenuNumberBase_IsSelectable, Value) == 0x000000, "Member 'UIMenuNumberBase_IsSelectable::Value' has a wrong offset!");
static_assert(offsetof(UIMenuNumberBase_IsSelectable, ReturnValue) == 0x000004, "Member 'UIMenuNumberBase_IsSelectable::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIMenuNumberBase.SetRange
// 0x0008 (0x0008 - 0x0000)
struct UIMenuNumberBase_SetRange final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuNumberBase_SetRange) == 0x000004, "Wrong alignment on UIMenuNumberBase_SetRange");
static_assert(sizeof(UIMenuNumberBase_SetRange) == 0x000008, "Wrong size on UIMenuNumberBase_SetRange");
static_assert(offsetof(UIMenuNumberBase_SetRange, Min) == 0x000000, "Member 'UIMenuNumberBase_SetRange::Min' has a wrong offset!");
static_assert(offsetof(UIMenuNumberBase_SetRange, Max) == 0x000004, "Member 'UIMenuNumberBase_SetRange::Max' has a wrong offset!");

// Function DarwinGame.UIMenuNumberBase.SetSkipValues
// 0x0010 (0x0010 - 0x0000)
struct UIMenuNumberBase_SetSkipValues final
{
public:
	TArray<int32>                                 Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuNumberBase_SetSkipValues) == 0x000008, "Wrong alignment on UIMenuNumberBase_SetSkipValues");
static_assert(sizeof(UIMenuNumberBase_SetSkipValues) == 0x000010, "Wrong size on UIMenuNumberBase_SetSkipValues");
static_assert(offsetof(UIMenuNumberBase_SetSkipValues, Values) == 0x000000, "Member 'UIMenuNumberBase_SetSkipValues::Values' has a wrong offset!");

// Function DarwinGame.UIMenuNumberBase.SetValue
// 0x0004 (0x0004 - 0x0000)
struct UIMenuNumberBase_SetValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMenuNumberBase_SetValue) == 0x000004, "Wrong alignment on UIMenuNumberBase_SetValue");
static_assert(sizeof(UIMenuNumberBase_SetValue) == 0x000004, "Wrong size on UIMenuNumberBase_SetValue");
static_assert(offsetof(UIMenuNumberBase_SetValue, Value) == 0x000000, "Member 'UIMenuNumberBase_SetValue::Value' has a wrong offset!");

// Function DarwinGame.UIMovieScreen.FadeIn
// 0x0004 (0x0004 - 0x0000)
struct UIMovieScreen_FadeIn final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMovieScreen_FadeIn) == 0x000004, "Wrong alignment on UIMovieScreen_FadeIn");
static_assert(sizeof(UIMovieScreen_FadeIn) == 0x000004, "Wrong size on UIMovieScreen_FadeIn");
static_assert(offsetof(UIMovieScreen_FadeIn, Time) == 0x000000, "Member 'UIMovieScreen_FadeIn::Time' has a wrong offset!");

// Function DarwinGame.UIMovieScreen.FadeOut
// 0x0004 (0x0004 - 0x0000)
struct UIMovieScreen_FadeOut final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMovieScreen_FadeOut) == 0x000004, "Wrong alignment on UIMovieScreen_FadeOut");
static_assert(sizeof(UIMovieScreen_FadeOut) == 0x000004, "Wrong size on UIMovieScreen_FadeOut");
static_assert(offsetof(UIMovieScreen_FadeOut, Time) == 0x000000, "Member 'UIMovieScreen_FadeOut::Time' has a wrong offset!");

// Function DarwinGame.UIMovieScreen.SetMovieTexture
// 0x0008 (0x0008 - 0x0000)
struct UIMovieScreen_SetMovieTexture final
{
public:
	class UManaTexture*                           MovieTexture;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIMovieScreen_SetMovieTexture) == 0x000008, "Wrong alignment on UIMovieScreen_SetMovieTexture");
static_assert(sizeof(UIMovieScreen_SetMovieTexture) == 0x000008, "Wrong size on UIMovieScreen_SetMovieTexture");
static_assert(offsetof(UIMovieScreen_SetMovieTexture, MovieTexture) == 0x000000, "Member 'UIMovieScreen_SetMovieTexture::MovieTexture' has a wrong offset!");

// Function DarwinGame.UINameBoxBase.OffFocus
// 0x0020 (0x0020 - 0x0000)
struct UINameBoxBase_OffFocus final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINameBoxBase_OffFocus) == 0x000008, "Wrong alignment on UINameBoxBase_OffFocus");
static_assert(sizeof(UINameBoxBase_OffFocus) == 0x000020, "Wrong size on UINameBoxBase_OffFocus");
static_assert(offsetof(UINameBoxBase_OffFocus, InText) == 0x000000, "Member 'UINameBoxBase_OffFocus::InText' has a wrong offset!");
static_assert(offsetof(UINameBoxBase_OffFocus, CommitMethod) == 0x000018, "Member 'UINameBoxBase_OffFocus::CommitMethod' has a wrong offset!");

// Function DarwinGame.UINameBoxBase.OnScreenKeyboardDismissed
// 0x0020 (0x0020 - 0x0000)
struct UINameBoxBase_OnScreenKeyboardDismissed final
{
public:
	bool                                          IsTextCallbackSuccessful;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallbackText;                                      // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameBoxBase_OnScreenKeyboardDismissed) == 0x000008, "Wrong alignment on UINameBoxBase_OnScreenKeyboardDismissed");
static_assert(sizeof(UINameBoxBase_OnScreenKeyboardDismissed) == 0x000020, "Wrong size on UINameBoxBase_OnScreenKeyboardDismissed");
static_assert(offsetof(UINameBoxBase_OnScreenKeyboardDismissed, IsTextCallbackSuccessful) == 0x000000, "Member 'UINameBoxBase_OnScreenKeyboardDismissed::IsTextCallbackSuccessful' has a wrong offset!");
static_assert(offsetof(UINameBoxBase_OnScreenKeyboardDismissed, CallbackText) == 0x000008, "Member 'UINameBoxBase_OnScreenKeyboardDismissed::CallbackText' has a wrong offset!");

// Function DarwinGame.UINameBoxBase.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct UINameBoxBase_OnTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameBoxBase_OnTextChanged) == 0x000008, "Wrong alignment on UINameBoxBase_OnTextChanged");
static_assert(sizeof(UINameBoxBase_OnTextChanged) == 0x000018, "Wrong size on UINameBoxBase_OnTextChanged");
static_assert(offsetof(UINameBoxBase_OnTextChanged, Text) == 0x000000, "Member 'UINameBoxBase_OnTextChanged::Text' has a wrong offset!");

// Function DarwinGame.UIPlayerSp_Stock.SetSpValue
// 0x0004 (0x0004 - 0x0000)
struct UIPlayerSp_Stock_SetSpValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPlayerSp_Stock_SetSpValue) == 0x000004, "Wrong alignment on UIPlayerSp_Stock_SetSpValue");
static_assert(sizeof(UIPlayerSp_Stock_SetSpValue) == 0x000004, "Wrong size on UIPlayerSp_Stock_SetSpValue");
static_assert(offsetof(UIPlayerSp_Stock_SetSpValue, InValue) == 0x000000, "Member 'UIPlayerSp_Stock_SetSpValue::InValue' has a wrong offset!");

// Function DarwinGame.UIQuestFunctionLibrary.DebugClearQuest
// 0x0008 (0x0008 - 0x0000)
struct UIQuestFunctionLibrary_DebugClearQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIQuestFunctionLibrary_DebugClearQuest) == 0x000004, "Wrong alignment on UIQuestFunctionLibrary_DebugClearQuest");
static_assert(sizeof(UIQuestFunctionLibrary_DebugClearQuest) == 0x000008, "Wrong size on UIQuestFunctionLibrary_DebugClearQuest");
static_assert(offsetof(UIQuestFunctionLibrary_DebugClearQuest, QuestID) == 0x000000, "Member 'UIQuestFunctionLibrary_DebugClearQuest::QuestID' has a wrong offset!");

// Function DarwinGame.UIQuestFunctionLibrary.DebugOpenQuest
// 0x0008 (0x0008 - 0x0000)
struct UIQuestFunctionLibrary_DebugOpenQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIQuestFunctionLibrary_DebugOpenQuest) == 0x000004, "Wrong alignment on UIQuestFunctionLibrary_DebugOpenQuest");
static_assert(sizeof(UIQuestFunctionLibrary_DebugOpenQuest) == 0x000008, "Wrong size on UIQuestFunctionLibrary_DebugOpenQuest");
static_assert(offsetof(UIQuestFunctionLibrary_DebugOpenQuest, QuestID) == 0x000000, "Member 'UIQuestFunctionLibrary_DebugOpenQuest::QuestID' has a wrong offset!");

// Function DarwinGame.UIQuestFunctionLibrary.DebugOrderQuest
// 0x0008 (0x0008 - 0x0000)
struct UIQuestFunctionLibrary_DebugOrderQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIQuestFunctionLibrary_DebugOrderQuest) == 0x000004, "Wrong alignment on UIQuestFunctionLibrary_DebugOrderQuest");
static_assert(sizeof(UIQuestFunctionLibrary_DebugOrderQuest) == 0x000008, "Wrong size on UIQuestFunctionLibrary_DebugOrderQuest");
static_assert(offsetof(UIQuestFunctionLibrary_DebugOrderQuest, QuestID) == 0x000000, "Member 'UIQuestFunctionLibrary_DebugOrderQuest::QuestID' has a wrong offset!");

// Function DarwinGame.UIQuestFunctionLibrary.HasClearedQuest
// 0x000C (0x000C - 0x0000)
struct UIQuestFunctionLibrary_HasClearedQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIQuestFunctionLibrary_HasClearedQuest) == 0x000004, "Wrong alignment on UIQuestFunctionLibrary_HasClearedQuest");
static_assert(sizeof(UIQuestFunctionLibrary_HasClearedQuest) == 0x00000C, "Wrong size on UIQuestFunctionLibrary_HasClearedQuest");
static_assert(offsetof(UIQuestFunctionLibrary_HasClearedQuest, QuestID) == 0x000000, "Member 'UIQuestFunctionLibrary_HasClearedQuest::QuestID' has a wrong offset!");
static_assert(offsetof(UIQuestFunctionLibrary_HasClearedQuest, ReturnValue) == 0x000008, "Member 'UIQuestFunctionLibrary_HasClearedQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIQuestFunctionLibrary.HasOpenedQuest
// 0x000C (0x000C - 0x0000)
struct UIQuestFunctionLibrary_HasOpenedQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIQuestFunctionLibrary_HasOpenedQuest) == 0x000004, "Wrong alignment on UIQuestFunctionLibrary_HasOpenedQuest");
static_assert(sizeof(UIQuestFunctionLibrary_HasOpenedQuest) == 0x00000C, "Wrong size on UIQuestFunctionLibrary_HasOpenedQuest");
static_assert(offsetof(UIQuestFunctionLibrary_HasOpenedQuest, QuestID) == 0x000000, "Member 'UIQuestFunctionLibrary_HasOpenedQuest::QuestID' has a wrong offset!");
static_assert(offsetof(UIQuestFunctionLibrary_HasOpenedQuest, ReturnValue) == 0x000008, "Member 'UIQuestFunctionLibrary_HasOpenedQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIQuestFunctionLibrary.HasOrderQuest
// 0x000C (0x000C - 0x0000)
struct UIQuestFunctionLibrary_HasOrderQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIQuestFunctionLibrary_HasOrderQuest) == 0x000004, "Wrong alignment on UIQuestFunctionLibrary_HasOrderQuest");
static_assert(sizeof(UIQuestFunctionLibrary_HasOrderQuest) == 0x00000C, "Wrong size on UIQuestFunctionLibrary_HasOrderQuest");
static_assert(offsetof(UIQuestFunctionLibrary_HasOrderQuest, QuestID) == 0x000000, "Member 'UIQuestFunctionLibrary_HasOrderQuest::QuestID' has a wrong offset!");
static_assert(offsetof(UIQuestFunctionLibrary_HasOrderQuest, ReturnValue) == 0x000008, "Member 'UIQuestFunctionLibrary_HasOrderQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.UIQuestFunctionLibrary.IsOfficialNetworkQuest
// 0x000C (0x000C - 0x0000)
struct UIQuestFunctionLibrary_IsOfficialNetworkQuest final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIQuestFunctionLibrary_IsOfficialNetworkQuest) == 0x000004, "Wrong alignment on UIQuestFunctionLibrary_IsOfficialNetworkQuest");
static_assert(sizeof(UIQuestFunctionLibrary_IsOfficialNetworkQuest) == 0x00000C, "Wrong size on UIQuestFunctionLibrary_IsOfficialNetworkQuest");
static_assert(offsetof(UIQuestFunctionLibrary_IsOfficialNetworkQuest, QuestID) == 0x000000, "Member 'UIQuestFunctionLibrary_IsOfficialNetworkQuest::QuestID' has a wrong offset!");
static_assert(offsetof(UIQuestFunctionLibrary_IsOfficialNetworkQuest, ReturnValue) == 0x000008, "Member 'UIQuestFunctionLibrary_IsOfficialNetworkQuest::ReturnValue' has a wrong offset!");

// Function DarwinGame.UISaveContent.SaveDialogCallback
// 0x0001 (0x0001 - 0x0000)
struct UISaveContent_SaveDialogCallback final
{
public:
	bool                                          IsYes;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISaveContent_SaveDialogCallback) == 0x000001, "Wrong alignment on UISaveContent_SaveDialogCallback");
static_assert(sizeof(UISaveContent_SaveDialogCallback) == 0x000001, "Wrong size on UISaveContent_SaveDialogCallback");
static_assert(offsetof(UISaveContent_SaveDialogCallback, IsYes) == 0x000000, "Member 'UISaveContent_SaveDialogCallback::IsYes' has a wrong offset!");

// Function DarwinGame.UISaveContent.SaveEndDialogCallback
// 0x0001 (0x0001 - 0x0000)
struct UISaveContent_SaveEndDialogCallback final
{
public:
	bool                                          IsYes;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISaveContent_SaveEndDialogCallback) == 0x000001, "Wrong alignment on UISaveContent_SaveEndDialogCallback");
static_assert(sizeof(UISaveContent_SaveEndDialogCallback) == 0x000001, "Wrong size on UISaveContent_SaveEndDialogCallback");
static_assert(offsetof(UISaveContent_SaveEndDialogCallback, IsYes) == 0x000000, "Member 'UISaveContent_SaveEndDialogCallback::IsYes' has a wrong offset!");

// Function DarwinGame.UIShot_IconBullet.Clip
// 0x0008 (0x0008 - 0x0000)
struct UIShot_IconBullet_Clip final
{
public:
	float                                         InX;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InY;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_IconBullet_Clip) == 0x000004, "Wrong alignment on UIShot_IconBullet_Clip");
static_assert(sizeof(UIShot_IconBullet_Clip) == 0x000008, "Wrong size on UIShot_IconBullet_Clip");
static_assert(offsetof(UIShot_IconBullet_Clip, InX) == 0x000000, "Member 'UIShot_IconBullet_Clip::InX' has a wrong offset!");
static_assert(offsetof(UIShot_IconBullet_Clip, InY) == 0x000004, "Member 'UIShot_IconBullet_Clip::InY' has a wrong offset!");

// Function DarwinGame.UIShot_IconBullet.SetData
// 0x0008 (0x0008 - 0x0000)
struct UIShot_IconBullet_SetData final
{
public:
	class FName                                   InItemId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_IconBullet_SetData) == 0x000004, "Wrong alignment on UIShot_IconBullet_SetData");
static_assert(sizeof(UIShot_IconBullet_SetData) == 0x000008, "Wrong size on UIShot_IconBullet_SetData");
static_assert(offsetof(UIShot_IconBullet_SetData, InItemId) == 0x000000, "Member 'UIShot_IconBullet_SetData::InItemId' has a wrong offset!");

// Function DarwinGame.UIShot_IconBullet.SetIsCategory
// 0x0001 (0x0001 - 0x0000)
struct UIShot_IconBullet_SetIsCategory final
{
public:
	bool                                          bInIsCategory;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIShot_IconBullet_SetIsCategory) == 0x000001, "Wrong alignment on UIShot_IconBullet_SetIsCategory");
static_assert(sizeof(UIShot_IconBullet_SetIsCategory) == 0x000001, "Wrong size on UIShot_IconBullet_SetIsCategory");
static_assert(offsetof(UIShot_IconBullet_SetIsCategory, bInIsCategory) == 0x000000, "Member 'UIShot_IconBullet_SetIsCategory::bInIsCategory' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageBase.SetBelongType
// 0x0008 (0x0008 - 0x0000)
struct UISign_IconDamageBase_SetBelongType final
{
public:
	struct FGameplayTag                           Belong;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconDamageBase_SetBelongType) == 0x000004, "Wrong alignment on UISign_IconDamageBase_SetBelongType");
static_assert(sizeof(UISign_IconDamageBase_SetBelongType) == 0x000008, "Wrong size on UISign_IconDamageBase_SetBelongType");
static_assert(offsetof(UISign_IconDamageBase_SetBelongType, Belong) == 0x000000, "Member 'UISign_IconDamageBase_SetBelongType::Belong' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageBase.SetDamageValue
// 0x0004 (0x0004 - 0x0000)
struct UISign_IconDamageBase_SetDamageValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconDamageBase_SetDamageValue) == 0x000004, "Wrong alignment on UISign_IconDamageBase_SetDamageValue");
static_assert(sizeof(UISign_IconDamageBase_SetDamageValue) == 0x000004, "Wrong size on UISign_IconDamageBase_SetDamageValue");
static_assert(offsetof(UISign_IconDamageBase_SetDamageValue, Value) == 0x000000, "Member 'UISign_IconDamageBase_SetDamageValue::Value' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageBase.SetData
// 0x0010 (0x0010 - 0x0000)
struct UISign_IconDamageBase_SetData final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Belong;                                            // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageSizeType                               SizeType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISign_IconDamageBase_SetData) == 0x000004, "Wrong alignment on UISign_IconDamageBase_SetData");
static_assert(sizeof(UISign_IconDamageBase_SetData) == 0x000010, "Wrong size on UISign_IconDamageBase_SetData");
static_assert(offsetof(UISign_IconDamageBase_SetData, Value) == 0x000000, "Member 'UISign_IconDamageBase_SetData::Value' has a wrong offset!");
static_assert(offsetof(UISign_IconDamageBase_SetData, Belong) == 0x000004, "Member 'UISign_IconDamageBase_SetData::Belong' has a wrong offset!");
static_assert(offsetof(UISign_IconDamageBase_SetData, SizeType) == 0x00000C, "Member 'UISign_IconDamageBase_SetData::SizeType' has a wrong offset!");

// Function DarwinGame.UISign_IconDamageBase.SetSizeType
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconDamageBase_SetSizeType final
{
public:
	EDamageSizeType                               SizeType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconDamageBase_SetSizeType) == 0x000001, "Wrong alignment on UISign_IconDamageBase_SetSizeType");
static_assert(sizeof(UISign_IconDamageBase_SetSizeType) == 0x000001, "Wrong size on UISign_IconDamageBase_SetSizeType");
static_assert(offsetof(UISign_IconDamageBase_SetSizeType, SizeType) == 0x000000, "Member 'UISign_IconDamageBase_SetSizeType::SizeType' has a wrong offset!");

// Function DarwinGame.UISign_IconExp.SetExpValue
// 0x0004 (0x0004 - 0x0000)
struct UISign_IconExp_SetExpValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconExp_SetExpValue) == 0x000004, "Wrong alignment on UISign_IconExp_SetExpValue");
static_assert(sizeof(UISign_IconExp_SetExpValue) == 0x000004, "Wrong size on UISign_IconExp_SetExpValue");
static_assert(offsetof(UISign_IconExp_SetExpValue, InValue) == 0x000000, "Member 'UISign_IconExp_SetExpValue::InValue' has a wrong offset!");

// Function DarwinGame.UISign_IconHeal.SetData
// 0x0014 (0x0014 - 0x0000)
struct UISign_IconHeal_SetData final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIHealPopType                                HealPopType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISign_IconHeal_SetData) == 0x000004, "Wrong alignment on UISign_IconHeal_SetData");
static_assert(sizeof(UISign_IconHeal_SetData) == 0x000014, "Wrong size on UISign_IconHeal_SetData");
static_assert(offsetof(UISign_IconHeal_SetData, Value) == 0x000000, "Member 'UISign_IconHeal_SetData::Value' has a wrong offset!");
static_assert(offsetof(UISign_IconHeal_SetData, TargetLocation) == 0x000004, "Member 'UISign_IconHeal_SetData::TargetLocation' has a wrong offset!");
static_assert(offsetof(UISign_IconHeal_SetData, HealPopType) == 0x000010, "Member 'UISign_IconHeal_SetData::HealPopType' has a wrong offset!");

// Function DarwinGame.UISign_IconHeal.SetHealPopType
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconHeal_SetHealPopType final
{
public:
	EUIHealPopType                                HealPopType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconHeal_SetHealPopType) == 0x000001, "Wrong alignment on UISign_IconHeal_SetHealPopType");
static_assert(sizeof(UISign_IconHeal_SetHealPopType) == 0x000001, "Wrong size on UISign_IconHeal_SetHealPopType");
static_assert(offsetof(UISign_IconHeal_SetHealPopType, HealPopType) == 0x000000, "Member 'UISign_IconHeal_SetHealPopType::HealPopType' has a wrong offset!");

// Function DarwinGame.UISign_IconHeal.SetHealValue
// 0x0004 (0x0004 - 0x0000)
struct UISign_IconHeal_SetHealValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconHeal_SetHealValue) == 0x000004, "Wrong alignment on UISign_IconHeal_SetHealValue");
static_assert(sizeof(UISign_IconHeal_SetHealValue) == 0x000004, "Wrong size on UISign_IconHeal_SetHealValue");
static_assert(offsetof(UISign_IconHeal_SetHealValue, Value) == 0x000000, "Member 'UISign_IconHeal_SetHealValue::Value' has a wrong offset!");

// Function DarwinGame.UISign_IconItemname.SetItem
// 0x000C (0x000C - 0x0000)
struct UISign_IconItemname_SetItem final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemDataType                                 NewParam;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISign_IconItemname_SetItem) == 0x000004, "Wrong alignment on UISign_IconItemname_SetItem");
static_assert(sizeof(UISign_IconItemname_SetItem) == 0x00000C, "Wrong size on UISign_IconItemname_SetItem");
static_assert(offsetof(UISign_IconItemname_SetItem, ID) == 0x000000, "Member 'UISign_IconItemname_SetItem::ID' has a wrong offset!");
static_assert(offsetof(UISign_IconItemname_SetItem, NewParam) == 0x000008, "Member 'UISign_IconItemname_SetItem::NewParam' has a wrong offset!");

// Function DarwinGame.UISign_IconItemname.SetNameFromCoinParam
// 0x0018 (0x0018 - 0x0000)
struct UISign_IconItemname_SetNameFromCoinParam final
{
public:
	struct FST_CoinParam                          CoinParam;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconItemname_SetNameFromCoinParam) == 0x000008, "Wrong alignment on UISign_IconItemname_SetNameFromCoinParam");
static_assert(sizeof(UISign_IconItemname_SetNameFromCoinParam) == 0x000018, "Wrong size on UISign_IconItemname_SetNameFromCoinParam");
static_assert(offsetof(UISign_IconItemname_SetNameFromCoinParam, CoinParam) == 0x000000, "Member 'UISign_IconItemname_SetNameFromCoinParam::CoinParam' has a wrong offset!");

// Function DarwinGame.UISign_IconLvup.SetData
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconLvup_SetData final
{
public:
	bool                                          IsComboUp;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconLvup_SetData) == 0x000001, "Wrong alignment on UISign_IconLvup_SetData");
static_assert(sizeof(UISign_IconLvup_SetData) == 0x000001, "Wrong size on UISign_IconLvup_SetData");
static_assert(offsetof(UISign_IconLvup_SetData, IsComboUp) == 0x000000, "Member 'UISign_IconLvup_SetData::IsComboUp' has a wrong offset!");

// Function DarwinGame.UISign_IconLvup.SetIsStatusIcon
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconLvup_SetIsStatusIcon final
{
public:
	bool                                          IsIcon;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconLvup_SetIsStatusIcon) == 0x000001, "Wrong alignment on UISign_IconLvup_SetIsStatusIcon");
static_assert(sizeof(UISign_IconLvup_SetIsStatusIcon) == 0x000001, "Wrong size on UISign_IconLvup_SetIsStatusIcon");
static_assert(offsetof(UISign_IconLvup_SetIsStatusIcon, IsIcon) == 0x000000, "Member 'UISign_IconLvup_SetIsStatusIcon::IsIcon' has a wrong offset!");

// Function DarwinGame.UISign_IconQuest.SetBalloonData
// 0x0008 (0x0008 - 0x0000)
struct UISign_IconQuest_SetBalloonData final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconQuest_SetBalloonData) == 0x000004, "Wrong alignment on UISign_IconQuest_SetBalloonData");
static_assert(sizeof(UISign_IconQuest_SetBalloonData) == 0x000008, "Wrong size on UISign_IconQuest_SetBalloonData");
static_assert(offsetof(UISign_IconQuest_SetBalloonData, QuestID) == 0x000000, "Member 'UISign_IconQuest_SetBalloonData::QuestID' has a wrong offset!");

// Function DarwinGame.UISign_IconQuest.SetBalloonType
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconQuest_SetBalloonType final
{
public:
	EBalloonIconType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconQuest_SetBalloonType) == 0x000001, "Wrong alignment on UISign_IconQuest_SetBalloonType");
static_assert(sizeof(UISign_IconQuest_SetBalloonType) == 0x000001, "Wrong size on UISign_IconQuest_SetBalloonType");
static_assert(offsetof(UISign_IconQuest_SetBalloonType, Type) == 0x000000, "Member 'UISign_IconQuest_SetBalloonType::Type' has a wrong offset!");

// Function DarwinGame.UISign_IconQuest.SetLayer
// 0x0001 (0x0001 - 0x0000)
struct UISign_IconQuest_SetLayer final
{
public:
	bool                                          IsAnother;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISign_IconQuest_SetLayer) == 0x000001, "Wrong alignment on UISign_IconQuest_SetLayer");
static_assert(sizeof(UISign_IconQuest_SetLayer) == 0x000001, "Wrong size on UISign_IconQuest_SetLayer");
static_assert(offsetof(UISign_IconQuest_SetLayer, IsAnother) == 0x000000, "Member 'UISign_IconQuest_SetLayer::IsAnother' has a wrong offset!");

// Function DarwinGame.UISkillName.SetSkillNameData
// 0x0010 (0x0010 - 0x0000)
struct UISkillName_SetSkillNameData final
{
public:
	class FName                                   OverviewID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCloseTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFriend;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISkillName_SetSkillNameData) == 0x000004, "Wrong alignment on UISkillName_SetSkillNameData");
static_assert(sizeof(UISkillName_SetSkillNameData) == 0x000010, "Wrong size on UISkillName_SetSkillNameData");
static_assert(offsetof(UISkillName_SetSkillNameData, OverviewID) == 0x000000, "Member 'UISkillName_SetSkillNameData::OverviewID' has a wrong offset!");
static_assert(offsetof(UISkillName_SetSkillNameData, InCloseTime) == 0x000008, "Member 'UISkillName_SetSkillNameData::InCloseTime' has a wrong offset!");
static_assert(offsetof(UISkillName_SetSkillNameData, IsFriend) == 0x00000C, "Member 'UISkillName_SetSkillNameData::IsFriend' has a wrong offset!");

// Function DarwinGame.UISpirit_Gauge.IsEndPercentAnim
// 0x0001 (0x0001 - 0x0000)
struct UISpirit_Gauge_IsEndPercentAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpirit_Gauge_IsEndPercentAnim) == 0x000001, "Wrong alignment on UISpirit_Gauge_IsEndPercentAnim");
static_assert(sizeof(UISpirit_Gauge_IsEndPercentAnim) == 0x000001, "Wrong size on UISpirit_Gauge_IsEndPercentAnim");
static_assert(offsetof(UISpirit_Gauge_IsEndPercentAnim, ReturnValue) == 0x000000, "Member 'UISpirit_Gauge_IsEndPercentAnim::ReturnValue' has a wrong offset!");

// Function DarwinGame.UISpirit_Gauge.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct UISpirit_Gauge_SetPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpirit_Gauge_SetPercent) == 0x000004, "Wrong alignment on UISpirit_Gauge_SetPercent");
static_assert(sizeof(UISpirit_Gauge_SetPercent) == 0x000004, "Wrong size on UISpirit_Gauge_SetPercent");
static_assert(offsetof(UISpirit_Gauge_SetPercent, Percent) == 0x000000, "Member 'UISpirit_Gauge_SetPercent::Percent' has a wrong offset!");

// Function DarwinGame.UISteal.SetData
// 0x0010 (0x0010 - 0x0000)
struct UISteal_SetData final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRangePercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISteal_SetData) == 0x000008, "Wrong alignment on UISteal_SetData");
static_assert(sizeof(UISteal_SetData) == 0x000010, "Wrong size on UISteal_SetData");
static_assert(offsetof(UISteal_SetData, Target) == 0x000000, "Member 'UISteal_SetData::Target' has a wrong offset!");
static_assert(offsetof(UISteal_SetData, HitRangePercent) == 0x000008, "Member 'UISteal_SetData::HitRangePercent' has a wrong offset!");

// Function DarwinGame.UISteal.GetRotationSeconds
// 0x0004 (0x0004 - 0x0000)
struct UISteal_GetRotationSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISteal_GetRotationSeconds) == 0x000004, "Wrong alignment on UISteal_GetRotationSeconds");
static_assert(sizeof(UISteal_GetRotationSeconds) == 0x000004, "Wrong size on UISteal_GetRotationSeconds");
static_assert(offsetof(UISteal_GetRotationSeconds, ReturnValue) == 0x000000, "Member 'UISteal_GetRotationSeconds::ReturnValue' has a wrong offset!");

// Function DarwinGame.UISteal.IsSuccess
// 0x0001 (0x0001 - 0x0000)
struct UISteal_IsSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISteal_IsSuccess) == 0x000001, "Wrong alignment on UISteal_IsSuccess");
static_assert(sizeof(UISteal_IsSuccess) == 0x000001, "Wrong size on UISteal_IsSuccess");
static_assert(offsetof(UISteal_IsSuccess, ReturnValue) == 0x000000, "Member 'UISteal_IsSuccess::ReturnValue' has a wrong offset!");

// Function DarwinGame.UITalk_BtnChoice.IsSlideIn
// 0x0001 (0x0001 - 0x0000)
struct UITalk_BtnChoice_IsSlideIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_BtnChoice_IsSlideIn) == 0x000001, "Wrong alignment on UITalk_BtnChoice_IsSlideIn");
static_assert(sizeof(UITalk_BtnChoice_IsSlideIn) == 0x000001, "Wrong size on UITalk_BtnChoice_IsSlideIn");
static_assert(offsetof(UITalk_BtnChoice_IsSlideIn, ReturnValue) == 0x000000, "Member 'UITalk_BtnChoice_IsSlideIn::ReturnValue' has a wrong offset!");

// Function DarwinGame.UITalk_BtnChoice.SetData
// 0x0010 (0x0010 - 0x0000)
struct UITalk_BtnChoice_SetData final
{
public:
	struct FChoiceItemData                        Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_BtnChoice_SetData) == 0x000008, "Wrong alignment on UITalk_BtnChoice_SetData");
static_assert(sizeof(UITalk_BtnChoice_SetData) == 0x000010, "Wrong size on UITalk_BtnChoice_SetData");
static_assert(offsetof(UITalk_BtnChoice_SetData, Data) == 0x000000, "Member 'UITalk_BtnChoice_SetData::Data' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.CallChoiceResult
// 0x0004 (0x0004 - 0x0000)
struct UITalk_WinChoice_CallChoiceResult final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_WinChoice_CallChoiceResult) == 0x000004, "Wrong alignment on UITalk_WinChoice_CallChoiceResult");
static_assert(sizeof(UITalk_WinChoice_CallChoiceResult) == 0x000004, "Wrong size on UITalk_WinChoice_CallChoiceResult");
static_assert(offsetof(UITalk_WinChoice_CallChoiceResult, Index_0) == 0x000000, "Member 'UITalk_WinChoice_CallChoiceResult::Index_0' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.CanShortCut
// 0x0002 (0x0002 - 0x0000)
struct UITalk_WinChoice_CanShortCut final
{
public:
	EAxisMappingType                              ShortCutKey;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_WinChoice_CanShortCut) == 0x000001, "Wrong alignment on UITalk_WinChoice_CanShortCut");
static_assert(sizeof(UITalk_WinChoice_CanShortCut) == 0x000002, "Wrong size on UITalk_WinChoice_CanShortCut");
static_assert(offsetof(UITalk_WinChoice_CanShortCut, ShortCutKey) == 0x000000, "Member 'UITalk_WinChoice_CanShortCut::ShortCutKey' has a wrong offset!");
static_assert(offsetof(UITalk_WinChoice_CanShortCut, ReturnValue) == 0x000001, "Member 'UITalk_WinChoice_CanShortCut::ReturnValue' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.ChangeFocus
// 0x0004 (0x0004 - 0x0000)
struct UITalk_WinChoice_ChangeFocus final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_WinChoice_ChangeFocus) == 0x000004, "Wrong alignment on UITalk_WinChoice_ChangeFocus");
static_assert(sizeof(UITalk_WinChoice_ChangeFocus) == 0x000004, "Wrong size on UITalk_WinChoice_ChangeFocus");
static_assert(offsetof(UITalk_WinChoice_ChangeFocus, Index_0) == 0x000000, "Member 'UITalk_WinChoice_ChangeFocus::Index_0' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.CheckSlideEnd
// 0x0008 (0x0008 - 0x0000)
struct UITalk_WinChoice_CheckSlideEnd final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITalk_WinChoice_CheckSlideEnd) == 0x000004, "Wrong alignment on UITalk_WinChoice_CheckSlideEnd");
static_assert(sizeof(UITalk_WinChoice_CheckSlideEnd) == 0x000008, "Wrong size on UITalk_WinChoice_CheckSlideEnd");
static_assert(offsetof(UITalk_WinChoice_CheckSlideEnd, InIndex) == 0x000000, "Member 'UITalk_WinChoice_CheckSlideEnd::InIndex' has a wrong offset!");
static_assert(offsetof(UITalk_WinChoice_CheckSlideEnd, ReturnValue) == 0x000004, "Member 'UITalk_WinChoice_CheckSlideEnd::ReturnValue' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.GetEventType
// 0x0001 (0x0001 - 0x0000)
struct UITalk_WinChoice_GetEventType final
{
public:
	EEventType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_WinChoice_GetEventType) == 0x000001, "Wrong alignment on UITalk_WinChoice_GetEventType");
static_assert(sizeof(UITalk_WinChoice_GetEventType) == 0x000001, "Wrong size on UITalk_WinChoice_GetEventType");
static_assert(offsetof(UITalk_WinChoice_GetEventType, ReturnValue) == 0x000000, "Member 'UITalk_WinChoice_GetEventType::ReturnValue' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.GetShortCutItemIndex
// 0x0008 (0x0008 - 0x0000)
struct UITalk_WinChoice_GetShortCutItemIndex final
{
public:
	EAxisMappingType                              ShortCutKey;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_WinChoice_GetShortCutItemIndex) == 0x000004, "Wrong alignment on UITalk_WinChoice_GetShortCutItemIndex");
static_assert(sizeof(UITalk_WinChoice_GetShortCutItemIndex) == 0x000008, "Wrong size on UITalk_WinChoice_GetShortCutItemIndex");
static_assert(offsetof(UITalk_WinChoice_GetShortCutItemIndex, ShortCutKey) == 0x000000, "Member 'UITalk_WinChoice_GetShortCutItemIndex::ShortCutKey' has a wrong offset!");
static_assert(offsetof(UITalk_WinChoice_GetShortCutItemIndex, ReturnValue) == 0x000004, "Member 'UITalk_WinChoice_GetShortCutItemIndex::ReturnValue' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.SetData
// 0x0068 (0x0068 - 0x0000)
struct UITalk_WinChoice_SetData final
{
public:
	struct FChoiceWindowData                      Data;                                              // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_WinChoice_SetData) == 0x000008, "Wrong alignment on UITalk_WinChoice_SetData");
static_assert(sizeof(UITalk_WinChoice_SetData) == 0x000068, "Wrong size on UITalk_WinChoice_SetData");
static_assert(offsetof(UITalk_WinChoice_SetData, Data) == 0x000000, "Member 'UITalk_WinChoice_SetData::Data' has a wrong offset!");

// Function DarwinGame.UITalk_WinChoice.ShortCut
// 0x0001 (0x0001 - 0x0000)
struct UITalk_WinChoice_ShortCut final
{
public:
	EAxisMappingType                              InputKey;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITalk_WinChoice_ShortCut) == 0x000001, "Wrong alignment on UITalk_WinChoice_ShortCut");
static_assert(sizeof(UITalk_WinChoice_ShortCut) == 0x000001, "Wrong size on UITalk_WinChoice_ShortCut");
static_assert(offsetof(UITalk_WinChoice_ShortCut, InputKey) == 0x000000, "Member 'UITalk_WinChoice_ShortCut::InputKey' has a wrong offset!");

// Function DarwinGame.UITutorialGuide.SetGuide
// 0x000C (0x000C - 0x0000)
struct UITutorialGuide_SetGuide final
{
public:
	class FName                                   GuideId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorialGuide_SetGuide) == 0x000004, "Wrong alignment on UITutorialGuide_SetGuide");
static_assert(sizeof(UITutorialGuide_SetGuide) == 0x00000C, "Wrong size on UITutorialGuide_SetGuide");
static_assert(offsetof(UITutorialGuide_SetGuide, GuideId) == 0x000000, "Member 'UITutorialGuide_SetGuide::GuideId' has a wrong offset!");
static_assert(offsetof(UITutorialGuide_SetGuide, ShowTime) == 0x000008, "Member 'UITutorialGuide_SetGuide::ShowTime' has a wrong offset!");

// Function DarwinGame.UITutorialGuide_Content.SetText
// 0x0020 (0x0020 - 0x0000)
struct UITutorialGuide_Content_SetText final
{
public:
	class FString                                 CommandText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionText;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorialGuide_Content_SetText) == 0x000008, "Wrong alignment on UITutorialGuide_Content_SetText");
static_assert(sizeof(UITutorialGuide_Content_SetText) == 0x000020, "Wrong size on UITutorialGuide_Content_SetText");
static_assert(offsetof(UITutorialGuide_Content_SetText, CommandText) == 0x000000, "Member 'UITutorialGuide_Content_SetText::CommandText' has a wrong offset!");
static_assert(offsetof(UITutorialGuide_Content_SetText, ActionText) == 0x000010, "Member 'UITutorialGuide_Content_SetText::ActionText' has a wrong offset!");

// Function DarwinGame.UIUnder_Button.SetButtonType
// 0x0008 (0x0008 - 0x0000)
struct UIUnder_Button_SetButtonType final
{
public:
	class FName                                   ButtonType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUnder_Button_SetButtonType) == 0x000004, "Wrong alignment on UIUnder_Button_SetButtonType");
static_assert(sizeof(UIUnder_Button_SetButtonType) == 0x000008, "Wrong size on UIUnder_Button_SetButtonType");
static_assert(offsetof(UIUnder_Button_SetButtonType, ButtonType) == 0x000000, "Member 'UIUnder_Button_SetButtonType::ButtonType' has a wrong offset!");

// Function DarwinGame.UIUnknownArtifact_Eff01.PlayEffect
// 0x0002 (0x0002 - 0x0000)
struct UIUnknownArtifact_Eff01_PlayEffect final
{
public:
	EArtifactType                                 ArtifactType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReplica;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUnknownArtifact_Eff01_PlayEffect) == 0x000001, "Wrong alignment on UIUnknownArtifact_Eff01_PlayEffect");
static_assert(sizeof(UIUnknownArtifact_Eff01_PlayEffect) == 0x000002, "Wrong size on UIUnknownArtifact_Eff01_PlayEffect");
static_assert(offsetof(UIUnknownArtifact_Eff01_PlayEffect, ArtifactType) == 0x000000, "Member 'UIUnknownArtifact_Eff01_PlayEffect::ArtifactType' has a wrong offset!");
static_assert(offsetof(UIUnknownArtifact_Eff01_PlayEffect, IsReplica) == 0x000001, "Member 'UIUnknownArtifact_Eff01_PlayEffect::IsReplica' has a wrong offset!");

// Function DarwinGame.UIUnknownArtifact_Pop.SetData
// 0x0010 (0x0010 - 0x0000)
struct UIUnknownArtifact_Pop_SetData final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArtifactID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArtifactType                                 ArtifactType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsReplica;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIUnknownArtifact_Pop_SetData) == 0x000008, "Wrong alignment on UIUnknownArtifact_Pop_SetData");
static_assert(sizeof(UIUnknownArtifact_Pop_SetData) == 0x000010, "Wrong size on UIUnknownArtifact_Pop_SetData");
static_assert(offsetof(UIUnknownArtifact_Pop_SetData, Target) == 0x000000, "Member 'UIUnknownArtifact_Pop_SetData::Target' has a wrong offset!");
static_assert(offsetof(UIUnknownArtifact_Pop_SetData, ArtifactID) == 0x000008, "Member 'UIUnknownArtifact_Pop_SetData::ArtifactID' has a wrong offset!");
static_assert(offsetof(UIUnknownArtifact_Pop_SetData, ArtifactType) == 0x00000C, "Member 'UIUnknownArtifact_Pop_SetData::ArtifactType' has a wrong offset!");
static_assert(offsetof(UIUnknownArtifact_Pop_SetData, InIsReplica) == 0x00000D, "Member 'UIUnknownArtifact_Pop_SetData::InIsReplica' has a wrong offset!");

// Function DarwinGame.UIUpDownIcon.InitWidget
// 0x0018 (0x0018 - 0x0000)
struct UIUpDownIcon_InitWidget final
{
public:
	class UImage*                                 iconImg;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             upTex;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             downTex;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUpDownIcon_InitWidget) == 0x000008, "Wrong alignment on UIUpDownIcon_InitWidget");
static_assert(sizeof(UIUpDownIcon_InitWidget) == 0x000018, "Wrong size on UIUpDownIcon_InitWidget");
static_assert(offsetof(UIUpDownIcon_InitWidget, iconImg) == 0x000000, "Member 'UIUpDownIcon_InitWidget::iconImg' has a wrong offset!");
static_assert(offsetof(UIUpDownIcon_InitWidget, upTex) == 0x000008, "Member 'UIUpDownIcon_InitWidget::upTex' has a wrong offset!");
static_assert(offsetof(UIUpDownIcon_InitWidget, downTex) == 0x000010, "Member 'UIUpDownIcon_InitWidget::downTex' has a wrong offset!");

// Function DarwinGame.UIUpDownIcon.SetData
// 0x0004 (0x0004 - 0x0000)
struct UIUpDownIcon_SetData final
{
public:
	int32                                         InParam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUpDownIcon_SetData) == 0x000004, "Wrong alignment on UIUpDownIcon_SetData");
static_assert(sizeof(UIUpDownIcon_SetData) == 0x000004, "Wrong size on UIUpDownIcon_SetData");
static_assert(offsetof(UIUpDownIcon_SetData, InParam) == 0x000000, "Member 'UIUpDownIcon_SetData::InParam' has a wrong offset!");

// Function DarwinGame.UIVision.Setup
// 0x0018 (0x0018 - 0x0000)
struct UIVision_Setup final
{
public:
	TArray<int32>                                 InMatchMonsterList;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstFocusIndex;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIVision_Setup) == 0x000008, "Wrong alignment on UIVision_Setup");
static_assert(sizeof(UIVision_Setup) == 0x000018, "Wrong size on UIVision_Setup");
static_assert(offsetof(UIVision_Setup, InMatchMonsterList) == 0x000000, "Member 'UIVision_Setup::InMatchMonsterList' has a wrong offset!");
static_assert(offsetof(UIVision_Setup, FirstFocusIndex) == 0x000010, "Member 'UIVision_Setup::FirstFocusIndex' has a wrong offset!");

// Function DarwinGame.UIVision_Field.FrameIn
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Field_FrameIn final
{
public:
	EVisionFrameOutFlag                           Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Field_FrameIn) == 0x000001, "Wrong alignment on UIVision_Field_FrameIn");
static_assert(sizeof(UIVision_Field_FrameIn) == 0x000001, "Wrong size on UIVision_Field_FrameIn");
static_assert(offsetof(UIVision_Field_FrameIn, Flag) == 0x000000, "Member 'UIVision_Field_FrameIn::Flag' has a wrong offset!");

// Function DarwinGame.UIVision_Field.FrameOut
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Field_FrameOut final
{
public:
	EVisionFrameOutFlag                           Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Field_FrameOut) == 0x000001, "Wrong alignment on UIVision_Field_FrameOut");
static_assert(sizeof(UIVision_Field_FrameOut) == 0x000001, "Wrong size on UIVision_Field_FrameOut");
static_assert(offsetof(UIVision_Field_FrameOut, Flag) == 0x000000, "Member 'UIVision_Field_FrameOut::Flag' has a wrong offset!");

// Function DarwinGame.UIVision_Field.SetMute
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Field_SetMute final
{
public:
	bool                                          bInIsMute;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Field_SetMute) == 0x000001, "Wrong alignment on UIVision_Field_SetMute");
static_assert(sizeof(UIVision_Field_SetMute) == 0x000001, "Wrong size on UIVision_Field_SetMute");
static_assert(offsetof(UIVision_Field_SetMute, bInIsMute) == 0x000000, "Member 'UIVision_Field_SetMute::bInIsMute' has a wrong offset!");

// Function DarwinGame.UIVision_Field.SetTutorial
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Field_SetTutorial final
{
public:
	EVisionPattern                                Pattern;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Field_SetTutorial) == 0x000001, "Wrong alignment on UIVision_Field_SetTutorial");
static_assert(sizeof(UIVision_Field_SetTutorial) == 0x000001, "Wrong size on UIVision_Field_SetTutorial");
static_assert(offsetof(UIVision_Field_SetTutorial, Pattern) == 0x000000, "Member 'UIVision_Field_SetTutorial::Pattern' has a wrong offset!");

// Function DarwinGame.UIVision_Field.SetupTutorial
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Field_SetupTutorial final
{
public:
	EVisionPattern                                Pattern;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Field_SetupTutorial) == 0x000001, "Wrong alignment on UIVision_Field_SetupTutorial");
static_assert(sizeof(UIVision_Field_SetupTutorial) == 0x000001, "Wrong size on UIVision_Field_SetupTutorial");
static_assert(offsetof(UIVision_Field_SetupTutorial, Pattern) == 0x000000, "Member 'UIVision_Field_SetupTutorial::Pattern' has a wrong offset!");

// Function DarwinGame.UIVision_Menu_Root.SetData
// 0x0018 (0x0018 - 0x0000)
struct UIVision_Menu_Root_SetData final
{
public:
	TArray<int32>                                 InMatchMonsterList;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisionPattern                                InPattern;                                         // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIVision_Menu_Root_SetData) == 0x000008, "Wrong alignment on UIVision_Menu_Root_SetData");
static_assert(sizeof(UIVision_Menu_Root_SetData) == 0x000018, "Wrong size on UIVision_Menu_Root_SetData");
static_assert(offsetof(UIVision_Menu_Root_SetData, InMatchMonsterList) == 0x000000, "Member 'UIVision_Menu_Root_SetData::InMatchMonsterList' has a wrong offset!");
static_assert(offsetof(UIVision_Menu_Root_SetData, InPattern) == 0x000010, "Member 'UIVision_Menu_Root_SetData::InPattern' has a wrong offset!");

// Function DarwinGame.UIVision_Menu_Root.SetFadeType
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Menu_Root_SetFadeType final
{
public:
	EWhiteFadeState                               InFadeState;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Menu_Root_SetFadeType) == 0x000001, "Wrong alignment on UIVision_Menu_Root_SetFadeType");
static_assert(sizeof(UIVision_Menu_Root_SetFadeType) == 0x000001, "Wrong size on UIVision_Menu_Root_SetFadeType");
static_assert(offsetof(UIVision_Menu_Root_SetFadeType, InFadeState) == 0x000000, "Member 'UIVision_Menu_Root_SetFadeType::InFadeState' has a wrong offset!");

// Function DarwinGame.UIVision_Menu_Root.SetMute
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Menu_Root_SetMute final
{
public:
	bool                                          InIsMute;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Menu_Root_SetMute) == 0x000001, "Wrong alignment on UIVision_Menu_Root_SetMute");
static_assert(sizeof(UIVision_Menu_Root_SetMute) == 0x000001, "Wrong size on UIVision_Menu_Root_SetMute");
static_assert(offsetof(UIVision_Menu_Root_SetMute, InIsMute) == 0x000000, "Member 'UIVision_Menu_Root_SetMute::InIsMute' has a wrong offset!");

// Function DarwinGame.UIVision_Menu_Root.SetTutorial
// 0x0001 (0x0001 - 0x0000)
struct UIVision_Menu_Root_SetTutorial final
{
public:
	EVisionPattern                                InPattern;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVision_Menu_Root_SetTutorial) == 0x000001, "Wrong alignment on UIVision_Menu_Root_SetTutorial");
static_assert(sizeof(UIVision_Menu_Root_SetTutorial) == 0x000001, "Wrong size on UIVision_Menu_Root_SetTutorial");
static_assert(offsetof(UIVision_Menu_Root_SetTutorial, InPattern) == 0x000000, "Member 'UIVision_Menu_Root_SetTutorial::InPattern' has a wrong offset!");

// Function DarwinGame.SizeFixProgressBar.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct SizeFixProgressBar_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SizeFixProgressBar_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on SizeFixProgressBar_SetFillColorAndOpacity");
static_assert(sizeof(SizeFixProgressBar_SetFillColorAndOpacity) == 0x000010, "Wrong size on SizeFixProgressBar_SetFillColorAndOpacity");
static_assert(offsetof(SizeFixProgressBar_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'SizeFixProgressBar_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function DarwinGame.SizeFixProgressBar.SetIsMarquee
// 0x0001 (0x0001 - 0x0000)
struct SizeFixProgressBar_SetIsMarquee final
{
public:
	bool                                          InbIsMarquee;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SizeFixProgressBar_SetIsMarquee) == 0x000001, "Wrong alignment on SizeFixProgressBar_SetIsMarquee");
static_assert(sizeof(SizeFixProgressBar_SetIsMarquee) == 0x000001, "Wrong size on SizeFixProgressBar_SetIsMarquee");
static_assert(offsetof(SizeFixProgressBar_SetIsMarquee, InbIsMarquee) == 0x000000, "Member 'SizeFixProgressBar_SetIsMarquee::InbIsMarquee' has a wrong offset!");

// Function DarwinGame.SizeFixProgressBar.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct SizeFixProgressBar_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SizeFixProgressBar_SetPercent) == 0x000004, "Wrong alignment on SizeFixProgressBar_SetPercent");
static_assert(sizeof(SizeFixProgressBar_SetPercent) == 0x000004, "Wrong size on SizeFixProgressBar_SetPercent");
static_assert(offsetof(SizeFixProgressBar_SetPercent, InPercent) == 0x000000, "Member 'SizeFixProgressBar_SetPercent::InPercent' has a wrong offset!");

// Function DarwinGame.VisionCaptureCameraBase.Capture
// 0x0010 (0x0010 - 0x0000)
struct VisionCaptureCameraBase_Capture final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VisionCaptureCameraBase_Capture) == 0x000004, "Wrong alignment on VisionCaptureCameraBase_Capture");
static_assert(sizeof(VisionCaptureCameraBase_Capture) == 0x000010, "Wrong size on VisionCaptureCameraBase_Capture");
static_assert(offsetof(VisionCaptureCameraBase_Capture, Index_0) == 0x000000, "Member 'VisionCaptureCameraBase_Capture::Index_0' has a wrong offset!");
static_assert(offsetof(VisionCaptureCameraBase_Capture, Uid) == 0x000004, "Member 'VisionCaptureCameraBase_Capture::Uid' has a wrong offset!");
static_assert(offsetof(VisionCaptureCameraBase_Capture, KindId) == 0x000008, "Member 'VisionCaptureCameraBase_Capture::KindId' has a wrong offset!");

// Function DarwinGame.VisionCaptureCameraBase.CaptureFailed
// 0x0008 (0x0008 - 0x0000)
struct VisionCaptureCameraBase_CaptureFailed final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uid;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VisionCaptureCameraBase_CaptureFailed) == 0x000004, "Wrong alignment on VisionCaptureCameraBase_CaptureFailed");
static_assert(sizeof(VisionCaptureCameraBase_CaptureFailed) == 0x000008, "Wrong size on VisionCaptureCameraBase_CaptureFailed");
static_assert(offsetof(VisionCaptureCameraBase_CaptureFailed, Index_0) == 0x000000, "Member 'VisionCaptureCameraBase_CaptureFailed::Index_0' has a wrong offset!");
static_assert(offsetof(VisionCaptureCameraBase_CaptureFailed, Uid) == 0x000004, "Member 'VisionCaptureCameraBase_CaptureFailed::Uid' has a wrong offset!");

// Function DarwinGame.WaterFallFlowBase.OnBeginOverlapCollision
// 0x00A8 (0x00A8 - 0x0000)
struct WaterFallFlowBase_OnBeginOverlapCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterFallFlowBase_OnBeginOverlapCollision) == 0x000008, "Wrong alignment on WaterFallFlowBase_OnBeginOverlapCollision");
static_assert(sizeof(WaterFallFlowBase_OnBeginOverlapCollision) == 0x0000A8, "Wrong size on WaterFallFlowBase_OnBeginOverlapCollision");
static_assert(offsetof(WaterFallFlowBase_OnBeginOverlapCollision, OverlappedComp) == 0x000000, "Member 'WaterFallFlowBase_OnBeginOverlapCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnBeginOverlapCollision, OtherActor) == 0x000008, "Member 'WaterFallFlowBase_OnBeginOverlapCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnBeginOverlapCollision, OtherComp) == 0x000010, "Member 'WaterFallFlowBase_OnBeginOverlapCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnBeginOverlapCollision, OtherBodyIndex) == 0x000018, "Member 'WaterFallFlowBase_OnBeginOverlapCollision::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnBeginOverlapCollision, bFromSweep) == 0x00001C, "Member 'WaterFallFlowBase_OnBeginOverlapCollision::bFromSweep' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnBeginOverlapCollision, SweepResult) == 0x000020, "Member 'WaterFallFlowBase_OnBeginOverlapCollision::SweepResult' has a wrong offset!");

// Function DarwinGame.WaterFallFlowBase.OnEndOverlapCollision
// 0x0020 (0x0020 - 0x0000)
struct WaterFallFlowBase_OnEndOverlapCollision final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WaterFallFlowBase_OnEndOverlapCollision) == 0x000008, "Wrong alignment on WaterFallFlowBase_OnEndOverlapCollision");
static_assert(sizeof(WaterFallFlowBase_OnEndOverlapCollision) == 0x000020, "Wrong size on WaterFallFlowBase_OnEndOverlapCollision");
static_assert(offsetof(WaterFallFlowBase_OnEndOverlapCollision, OverlappedComp) == 0x000000, "Member 'WaterFallFlowBase_OnEndOverlapCollision::OverlappedComp' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnEndOverlapCollision, OtherActor) == 0x000008, "Member 'WaterFallFlowBase_OnEndOverlapCollision::OtherActor' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnEndOverlapCollision, OtherComp) == 0x000010, "Member 'WaterFallFlowBase_OnEndOverlapCollision::OtherComp' has a wrong offset!");
static_assert(offsetof(WaterFallFlowBase_OnEndOverlapCollision, OtherBodyIndex) == 0x000018, "Member 'WaterFallFlowBase_OnEndOverlapCollision::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.WaterStateSwim.SetEffectVisiblity
// 0x0001 (0x0001 - 0x0000)
struct WaterStateSwim_SetEffectVisiblity final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterStateSwim_SetEffectVisiblity) == 0x000001, "Wrong alignment on WaterStateSwim_SetEffectVisiblity");
static_assert(sizeof(WaterStateSwim_SetEffectVisiblity) == 0x000001, "Wrong size on WaterStateSwim_SetEffectVisiblity");
static_assert(offsetof(WaterStateSwim_SetEffectVisiblity, Visibility) == 0x000000, "Member 'WaterStateSwim_SetEffectVisiblity::Visibility' has a wrong offset!");

// Function DarwinGame.WindBase.OnBeginOverlapWind
// 0x00A8 (0x00A8 - 0x0000)
struct WindBase_OnBeginOverlapWind final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindBase_OnBeginOverlapWind) == 0x000008, "Wrong alignment on WindBase_OnBeginOverlapWind");
static_assert(sizeof(WindBase_OnBeginOverlapWind) == 0x0000A8, "Wrong size on WindBase_OnBeginOverlapWind");
static_assert(offsetof(WindBase_OnBeginOverlapWind, OverlappedComp) == 0x000000, "Member 'WindBase_OnBeginOverlapWind::OverlappedComp' has a wrong offset!");
static_assert(offsetof(WindBase_OnBeginOverlapWind, OtherActor) == 0x000008, "Member 'WindBase_OnBeginOverlapWind::OtherActor' has a wrong offset!");
static_assert(offsetof(WindBase_OnBeginOverlapWind, OtherComp) == 0x000010, "Member 'WindBase_OnBeginOverlapWind::OtherComp' has a wrong offset!");
static_assert(offsetof(WindBase_OnBeginOverlapWind, OtherBodyIndex) == 0x000018, "Member 'WindBase_OnBeginOverlapWind::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(WindBase_OnBeginOverlapWind, bFromSweep) == 0x00001C, "Member 'WindBase_OnBeginOverlapWind::bFromSweep' has a wrong offset!");
static_assert(offsetof(WindBase_OnBeginOverlapWind, SweepResult) == 0x000020, "Member 'WindBase_OnBeginOverlapWind::SweepResult' has a wrong offset!");

// Function DarwinGame.WindBase.OnEndOverlapWind
// 0x0020 (0x0020 - 0x0000)
struct WindBase_OnEndOverlapWind final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WindBase_OnEndOverlapWind) == 0x000008, "Wrong alignment on WindBase_OnEndOverlapWind");
static_assert(sizeof(WindBase_OnEndOverlapWind) == 0x000020, "Wrong size on WindBase_OnEndOverlapWind");
static_assert(offsetof(WindBase_OnEndOverlapWind, OverlappedComp) == 0x000000, "Member 'WindBase_OnEndOverlapWind::OverlappedComp' has a wrong offset!");
static_assert(offsetof(WindBase_OnEndOverlapWind, OtherActor) == 0x000008, "Member 'WindBase_OnEndOverlapWind::OtherActor' has a wrong offset!");
static_assert(offsetof(WindBase_OnEndOverlapWind, OtherComp) == 0x000010, "Member 'WindBase_OnEndOverlapWind::OtherComp' has a wrong offset!");
static_assert(offsetof(WindBase_OnEndOverlapWind, OtherBodyIndex) == 0x000018, "Member 'WindBase_OnEndOverlapWind::OtherBodyIndex' has a wrong offset!");

// Function DarwinGame.WordClassUtility.SglListOf
// 0x0030 (0x0030 - 0x0000)
struct WordClassUtility_SglListOf final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WordClassUtility_SglListOf) == 0x000008, "Wrong alignment on WordClassUtility_SglListOf");
static_assert(sizeof(WordClassUtility_SglListOf) == 0x000030, "Wrong size on WordClassUtility_SglListOf");
static_assert(offsetof(WordClassUtility_SglListOf, Text) == 0x000000, "Member 'WordClassUtility_SglListOf::Text' has a wrong offset!");
static_assert(offsetof(WordClassUtility_SglListOf, ReturnValue) == 0x000018, "Member 'WordClassUtility_SglListOf::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.AddTime
// 0x000C (0x000C - 0x0000)
struct WorldTimeManager_AddTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipEvent;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldTimeManager_AddTime) == 0x000004, "Wrong alignment on WorldTimeManager_AddTime");
static_assert(sizeof(WorldTimeManager_AddTime) == 0x00000C, "Wrong size on WorldTimeManager_AddTime");
static_assert(offsetof(WorldTimeManager_AddTime, Hour) == 0x000000, "Member 'WorldTimeManager_AddTime::Hour' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_AddTime, Minute) == 0x000004, "Member 'WorldTimeManager_AddTime::Minute' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_AddTime, SkipEvent) == 0x000008, "Member 'WorldTimeManager_AddTime::SkipEvent' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.ConvertTimespanToTime
// 0x0010 (0x0010 - 0x0000)
struct WorldTimeManager_ConvertTimespanToTime final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_ConvertTimespanToTime) == 0x000008, "Wrong alignment on WorldTimeManager_ConvertTimespanToTime");
static_assert(sizeof(WorldTimeManager_ConvertTimespanToTime) == 0x000010, "Wrong size on WorldTimeManager_ConvertTimespanToTime");
static_assert(offsetof(WorldTimeManager_ConvertTimespanToTime, Timespan) == 0x000000, "Member 'WorldTimeManager_ConvertTimespanToTime::Timespan' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_ConvertTimespanToTime, ReturnValue) == 0x000008, "Member 'WorldTimeManager_ConvertTimespanToTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.GetTimeZoneType
// 0x0001 (0x0001 - 0x0000)
struct WorldTimeManager_GetTimeZoneType final
{
public:
	ETimeZoneType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_GetTimeZoneType) == 0x000001, "Wrong alignment on WorldTimeManager_GetTimeZoneType");
static_assert(sizeof(WorldTimeManager_GetTimeZoneType) == 0x000001, "Wrong size on WorldTimeManager_GetTimeZoneType");
static_assert(offsetof(WorldTimeManager_GetTimeZoneType, ReturnValue) == 0x000000, "Member 'WorldTimeManager_GetTimeZoneType::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.GetTimeZoneTypeFromTime
// 0x000C (0x000C - 0x0000)
struct WorldTimeManager_GetTimeZoneTypeFromTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeZoneType                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldTimeManager_GetTimeZoneTypeFromTime) == 0x000004, "Wrong alignment on WorldTimeManager_GetTimeZoneTypeFromTime");
static_assert(sizeof(WorldTimeManager_GetTimeZoneTypeFromTime) == 0x00000C, "Wrong size on WorldTimeManager_GetTimeZoneTypeFromTime");
static_assert(offsetof(WorldTimeManager_GetTimeZoneTypeFromTime, Hour) == 0x000000, "Member 'WorldTimeManager_GetTimeZoneTypeFromTime::Hour' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_GetTimeZoneTypeFromTime, Minute) == 0x000004, "Member 'WorldTimeManager_GetTimeZoneTypeFromTime::Minute' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_GetTimeZoneTypeFromTime, ReturnValue) == 0x000008, "Member 'WorldTimeManager_GetTimeZoneTypeFromTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.SetGameTime
// 0x0008 (0x0008 - 0x0000)
struct WorldTimeManager_SetGameTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_SetGameTime) == 0x000004, "Wrong alignment on WorldTimeManager_SetGameTime");
static_assert(sizeof(WorldTimeManager_SetGameTime) == 0x000008, "Wrong size on WorldTimeManager_SetGameTime");
static_assert(offsetof(WorldTimeManager_SetGameTime, Hour) == 0x000000, "Member 'WorldTimeManager_SetGameTime::Hour' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_SetGameTime, Minute) == 0x000004, "Member 'WorldTimeManager_SetGameTime::Minute' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.SetOneDayMinute
// 0x0004 (0x0004 - 0x0000)
struct WorldTimeManager_SetOneDayMinute final
{
public:
	int32                                         Minute;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_SetOneDayMinute) == 0x000004, "Wrong alignment on WorldTimeManager_SetOneDayMinute");
static_assert(sizeof(WorldTimeManager_SetOneDayMinute) == 0x000004, "Wrong size on WorldTimeManager_SetOneDayMinute");
static_assert(offsetof(WorldTimeManager_SetOneDayMinute, Minute) == 0x000000, "Member 'WorldTimeManager_SetOneDayMinute::Minute' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.SetRealTimeRequiredToOneDay
// 0x0004 (0x0004 - 0x0000)
struct WorldTimeManager_SetRealTimeRequiredToOneDay final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_SetRealTimeRequiredToOneDay) == 0x000004, "Wrong alignment on WorldTimeManager_SetRealTimeRequiredToOneDay");
static_assert(sizeof(WorldTimeManager_SetRealTimeRequiredToOneDay) == 0x000004, "Wrong size on WorldTimeManager_SetRealTimeRequiredToOneDay");
static_assert(offsetof(WorldTimeManager_SetRealTimeRequiredToOneDay, Time) == 0x000000, "Member 'WorldTimeManager_SetRealTimeRequiredToOneDay::Time' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.SetTime
// 0x000C (0x000C - 0x0000)
struct WorldTimeManager_SetTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipEvent;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldTimeManager_SetTime) == 0x000004, "Wrong alignment on WorldTimeManager_SetTime");
static_assert(sizeof(WorldTimeManager_SetTime) == 0x00000C, "Wrong size on WorldTimeManager_SetTime");
static_assert(offsetof(WorldTimeManager_SetTime, Hour) == 0x000000, "Member 'WorldTimeManager_SetTime::Hour' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_SetTime, Minute) == 0x000004, "Member 'WorldTimeManager_SetTime::Minute' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_SetTime, SkipEvent) == 0x000008, "Member 'WorldTimeManager_SetTime::SkipEvent' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.SetTimeSpeedMagnification
// 0x0004 (0x0004 - 0x0000)
struct WorldTimeManager_SetTimeSpeedMagnification final
{
public:
	float                                         Magnification;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_SetTimeSpeedMagnification) == 0x000004, "Wrong alignment on WorldTimeManager_SetTimeSpeedMagnification");
static_assert(sizeof(WorldTimeManager_SetTimeSpeedMagnification) == 0x000004, "Wrong size on WorldTimeManager_SetTimeSpeedMagnification");
static_assert(offsetof(WorldTimeManager_SetTimeSpeedMagnification, Magnification) == 0x000000, "Member 'WorldTimeManager_SetTimeSpeedMagnification::Magnification' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.SetWeatherTimePause
// 0x0008 (0x0008 - 0x0000)
struct WorldTimeManager_SetWeatherTimePause final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_SetWeatherTimePause) == 0x000004, "Wrong alignment on WorldTimeManager_SetWeatherTimePause");
static_assert(sizeof(WorldTimeManager_SetWeatherTimePause) == 0x000008, "Wrong size on WorldTimeManager_SetWeatherTimePause");
static_assert(offsetof(WorldTimeManager_SetWeatherTimePause, Hour) == 0x000000, "Member 'WorldTimeManager_SetWeatherTimePause::Hour' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_SetWeatherTimePause, Minute) == 0x000004, "Member 'WorldTimeManager_SetWeatherTimePause::Minute' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.UpdateGameTime
// 0x0008 (0x0008 - 0x0000)
struct WorldTimeManager_UpdateGameTime final
{
public:
	struct FTimespan                              AddTime;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_UpdateGameTime) == 0x000008, "Wrong alignment on WorldTimeManager_UpdateGameTime");
static_assert(sizeof(WorldTimeManager_UpdateGameTime) == 0x000008, "Wrong size on WorldTimeManager_UpdateGameTime");
static_assert(offsetof(WorldTimeManager_UpdateGameTime, AddTime) == 0x000000, "Member 'WorldTimeManager_UpdateGameTime::AddTime' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.ConvertTimeToTimespan
// 0x0010 (0x0010 - 0x0000)
struct WorldTimeManager_ConvertTimeToTimespan final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_ConvertTimeToTimespan) == 0x000008, "Wrong alignment on WorldTimeManager_ConvertTimeToTimespan");
static_assert(sizeof(WorldTimeManager_ConvertTimeToTimespan) == 0x000010, "Wrong size on WorldTimeManager_ConvertTimeToTimespan");
static_assert(offsetof(WorldTimeManager_ConvertTimeToTimespan, Hour) == 0x000000, "Member 'WorldTimeManager_ConvertTimeToTimespan::Hour' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_ConvertTimeToTimespan, Minute) == 0x000004, "Member 'WorldTimeManager_ConvertTimeToTimespan::Minute' has a wrong offset!");
static_assert(offsetof(WorldTimeManager_ConvertTimeToTimespan, ReturnValue) == 0x000008, "Member 'WorldTimeManager_ConvertTimeToTimespan::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.GetCurrentTimeSpan
// 0x0008 (0x0008 - 0x0000)
struct WorldTimeManager_GetCurrentTimeSpan final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_GetCurrentTimeSpan) == 0x000008, "Wrong alignment on WorldTimeManager_GetCurrentTimeSpan");
static_assert(sizeof(WorldTimeManager_GetCurrentTimeSpan) == 0x000008, "Wrong size on WorldTimeManager_GetCurrentTimeSpan");
static_assert(offsetof(WorldTimeManager_GetCurrentTimeSpan, ReturnValue) == 0x000000, "Member 'WorldTimeManager_GetCurrentTimeSpan::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.GetElapsedRateToday
// 0x0004 (0x0004 - 0x0000)
struct WorldTimeManager_GetElapsedRateToday final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_GetElapsedRateToday) == 0x000004, "Wrong alignment on WorldTimeManager_GetElapsedRateToday");
static_assert(sizeof(WorldTimeManager_GetElapsedRateToday) == 0x000004, "Wrong size on WorldTimeManager_GetElapsedRateToday");
static_assert(offsetof(WorldTimeManager_GetElapsedRateToday, ReturnValue) == 0x000000, "Member 'WorldTimeManager_GetElapsedRateToday::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.GetRealTimeRequiredToOneDay
// 0x0004 (0x0004 - 0x0000)
struct WorldTimeManager_GetRealTimeRequiredToOneDay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_GetRealTimeRequiredToOneDay) == 0x000004, "Wrong alignment on WorldTimeManager_GetRealTimeRequiredToOneDay");
static_assert(sizeof(WorldTimeManager_GetRealTimeRequiredToOneDay) == 0x000004, "Wrong size on WorldTimeManager_GetRealTimeRequiredToOneDay");
static_assert(offsetof(WorldTimeManager_GetRealTimeRequiredToOneDay, ReturnValue) == 0x000000, "Member 'WorldTimeManager_GetRealTimeRequiredToOneDay::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.GetTime
// 0x0008 (0x0008 - 0x0000)
struct WorldTimeManager_GetTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_GetTime) == 0x000008, "Wrong alignment on WorldTimeManager_GetTime");
static_assert(sizeof(WorldTimeManager_GetTime) == 0x000008, "Wrong size on WorldTimeManager_GetTime");
static_assert(offsetof(WorldTimeManager_GetTime, ReturnValue) == 0x000000, "Member 'WorldTimeManager_GetTime::ReturnValue' has a wrong offset!");

// Function DarwinGame.WorldTimeManager.GetTimeSpeedMagnification
// 0x0004 (0x0004 - 0x0000)
struct WorldTimeManager_GetTimeSpeedMagnification final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldTimeManager_GetTimeSpeedMagnification) == 0x000004, "Wrong alignment on WorldTimeManager_GetTimeSpeedMagnification");
static_assert(sizeof(WorldTimeManager_GetTimeSpeedMagnification) == 0x000004, "Wrong size on WorldTimeManager_GetTimeSpeedMagnification");
static_assert(offsetof(WorldTimeManager_GetTimeSpeedMagnification, ReturnValue) == 0x000000, "Member 'WorldTimeManager_GetTimeSpeedMagnification::ReturnValue' has a wrong offset!");

}

