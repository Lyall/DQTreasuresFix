#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PlayerSp_Stock

#include "Basic.hpp"

#include "DarwinGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PlayerSp_Stock.W_PlayerSp_Stock_C
// 0x00E8 (0x0690 - 0x05A8)
class UW_PlayerSp_Stock_C final : public UUIPlayerSp_Stock
{
public:
	class UWidgetAnimation*                       GaugeOff;                                          // 0x05A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_3_Wait;                                      // 0x05B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_2_Wait;                                      // 0x05B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_1_Wait;                                      // 0x05C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_3_Off;                                       // 0x05C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_2_Off;                                       // 0x05D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_1_Off;                                       // 0x05D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_3;                                           // 0x05E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_2;                                           // 0x05E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_1;                                           // 0x05F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Stock_0;                                           // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Gauge_Move;                                        // 0x0600(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Count_1;                                           // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Count_2;                                           // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Count_3;                                           // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Count_1_Wait;                                      // 0x0620(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Count_2_Wait;                                      // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Count_3_Wait;                                      // 0x0630(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flash;                                             // 0x0638(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flash_1;                                           // 0x0640(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flash_2;                                           // 0x0648(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flash_3;                                           // 0x0650(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flash_01;                                          // 0x0658(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flash_02;                                          // 0x0660(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flash_03;                                          // 0x0668(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Full;                                              // 0x0670(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Gauge;                                             // 0x0678(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GaugeBase;                                         // 0x0680(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 wave;                                              // 0x0688(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PlayerSp_Stock_C">();
	}
	static class UW_PlayerSp_Stock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PlayerSp_Stock_C>();
	}
};
static_assert(alignof(UW_PlayerSp_Stock_C) == 0x000008, "Wrong alignment on UW_PlayerSp_Stock_C");
static_assert(sizeof(UW_PlayerSp_Stock_C) == 0x000690, "Wrong size on UW_PlayerSp_Stock_C");
static_assert(offsetof(UW_PlayerSp_Stock_C, GaugeOff) == 0x0005A8, "Member 'UW_PlayerSp_Stock_C::GaugeOff' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_3_Wait) == 0x0005B0, "Member 'UW_PlayerSp_Stock_C::Stock_3_Wait' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_2_Wait) == 0x0005B8, "Member 'UW_PlayerSp_Stock_C::Stock_2_Wait' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_1_Wait) == 0x0005C0, "Member 'UW_PlayerSp_Stock_C::Stock_1_Wait' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_3_Off) == 0x0005C8, "Member 'UW_PlayerSp_Stock_C::Stock_3_Off' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_2_Off) == 0x0005D0, "Member 'UW_PlayerSp_Stock_C::Stock_2_Off' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_1_Off) == 0x0005D8, "Member 'UW_PlayerSp_Stock_C::Stock_1_Off' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_3) == 0x0005E0, "Member 'UW_PlayerSp_Stock_C::Stock_3' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_2) == 0x0005E8, "Member 'UW_PlayerSp_Stock_C::Stock_2' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_1) == 0x0005F0, "Member 'UW_PlayerSp_Stock_C::Stock_1' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Stock_0) == 0x0005F8, "Member 'UW_PlayerSp_Stock_C::Stock_0' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Gauge_Move) == 0x000600, "Member 'UW_PlayerSp_Stock_C::Gauge_Move' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Count_1) == 0x000608, "Member 'UW_PlayerSp_Stock_C::Count_1' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Count_2) == 0x000610, "Member 'UW_PlayerSp_Stock_C::Count_2' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Count_3) == 0x000618, "Member 'UW_PlayerSp_Stock_C::Count_3' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Count_1_Wait) == 0x000620, "Member 'UW_PlayerSp_Stock_C::Count_1_Wait' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Count_2_Wait) == 0x000628, "Member 'UW_PlayerSp_Stock_C::Count_2_Wait' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Count_3_Wait) == 0x000630, "Member 'UW_PlayerSp_Stock_C::Count_3_Wait' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Flash) == 0x000638, "Member 'UW_PlayerSp_Stock_C::Flash' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Flash_1) == 0x000640, "Member 'UW_PlayerSp_Stock_C::Flash_1' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Flash_2) == 0x000648, "Member 'UW_PlayerSp_Stock_C::Flash_2' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Flash_3) == 0x000650, "Member 'UW_PlayerSp_Stock_C::Flash_3' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Flash_01) == 0x000658, "Member 'UW_PlayerSp_Stock_C::Flash_01' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Flash_02) == 0x000660, "Member 'UW_PlayerSp_Stock_C::Flash_02' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Flash_03) == 0x000668, "Member 'UW_PlayerSp_Stock_C::Flash_03' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Full) == 0x000670, "Member 'UW_PlayerSp_Stock_C::Full' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, Gauge) == 0x000678, "Member 'UW_PlayerSp_Stock_C::Gauge' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, GaugeBase) == 0x000680, "Member 'UW_PlayerSp_Stock_C::GaugeBase' has a wrong offset!");
static_assert(offsetof(UW_PlayerSp_Stock_C, wave) == 0x000688, "Member 'UW_PlayerSp_Stock_C::wave' has a wrong offset!");

}

