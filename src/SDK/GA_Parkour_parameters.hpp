#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Parkour

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_Parkour.GA_Parkour_C.ExecuteUbergraph_GA_Parkour
// 0x0570 (0x0570 - 0x0000)
struct GA_Parkour_C_ExecuteUbergraph_GA_Parkour final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_EventTag_3;                     // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_EventData_3;                    // 0x0010(0x00B0)()
	TDelegate<void(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData)> K2Node_CreateDelegate_OutputDelegate;              // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayTag                           K2Node_CustomEvent_EventTag_2;                     // 0x00D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_EventData_2;                    // 0x00D8(0x00B0)()
	TDelegate<void(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0188(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayTag                           K2Node_CustomEvent_EventTag_1;                     // 0x0198(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_EventData_1;                    // 0x01A0(0x00B0)()
	TDelegate<void(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0250(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayTag                           K2Node_CustomEvent_EventTag;                       // 0x0260(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_EventData;                      // 0x0268(0x00B0)()
	TDelegate<void(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0318(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x0328(0x00B0)()
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x03D8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          Temp_object_Variable;                              // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICharacterMovementInterfaceForABP> K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP; // 0x03F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x040C(0x0010)(ZeroConstructor, NoDestructor)
	struct FParkour                               CallFunc_GetParkourData_ReturnValue;               // 0x041C(0x002C)(NoDestructor)
	TScriptInterface<class ICharacterInterface>   K2Node_DynamicCast_AsCharacter_Interface;          // 0x0448(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_EventTag_4;                     // 0x0468(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_EventData_4;                    // 0x0470(0x00B0)()
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character;             // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_FieldAct                           CallFunc_FindFieldActMotionData_FieldActData;      // 0x0530(0x0028)()
	bool                                          CallFunc_FindFieldActMotionData_ReturnValue;       // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_PlayMontageAndWaitEvent*   CallFunc_PlayMontageAndWaitEvent_ReturnValue;      // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour) == 0x000008, "Wrong alignment on GA_Parkour_C_ExecuteUbergraph_GA_Parkour");
static_assert(sizeof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour) == 0x000570, "Wrong size on GA_Parkour_C_ExecuteUbergraph_GA_Parkour");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, EntryPoint) == 0x000000, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventTag_3) == 0x000004, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventTag_3' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventData_3) == 0x000010, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventData_3' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CreateDelegate_OutputDelegate) == 0x0000C0, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventTag_2) == 0x0000D0, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventTag_2' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventData_2) == 0x0000D8, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventData_2' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CreateDelegate_OutputDelegate_1) == 0x000188, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventTag_1) == 0x000198, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventTag_1' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventData_1) == 0x0001A0, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventData_1' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CreateDelegate_OutputDelegate_2) == 0x000250, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventTag) == 0x000260, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventTag' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventData) == 0x000268, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventData' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CreateDelegate_OutputDelegate_3) == 0x000318, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, Temp_struct_Variable) == 0x000328, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, Temp_struct_Variable_1) == 0x0003D8, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x0003E0, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, Temp_object_Variable) == 0x0003E8, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_Event_bWasCancelled) == 0x0003F0, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP) == 0x0003F8, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_DynamicCast_bSuccess) == 0x000408, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CreateDelegate_OutputDelegate_4) == 0x00040C, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, CallFunc_GetParkourData_ReturnValue) == 0x00041C, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::CallFunc_GetParkourData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_DynamicCast_AsCharacter_Interface) == 0x000448, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_DynamicCast_AsCharacter_Interface' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_DynamicCast_bSuccess_1) == 0x000458, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, CallFunc_GetAnimInstance_ReturnValue) == 0x000460, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventTag_4) == 0x000468, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventTag_4' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_CustomEvent_EventData_4) == 0x000470, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_CustomEvent_EventData_4' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_DynamicCast_AsPlayer_Character) == 0x000520, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_DynamicCast_AsPlayer_Character' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, K2Node_DynamicCast_bSuccess_2) == 0x000528, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, CallFunc_FindFieldActMotionData_FieldActData) == 0x000530, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::CallFunc_FindFieldActMotionData_FieldActData' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, CallFunc_FindFieldActMotionData_ReturnValue) == 0x000558, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::CallFunc_FindFieldActMotionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, CallFunc_PlayMontageAndWaitEvent_ReturnValue) == 0x000560, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::CallFunc_PlayMontageAndWaitEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_ExecuteUbergraph_GA_Parkour, CallFunc_IsValid_ReturnValue) == 0x000568, "Member 'GA_Parkour_C_ExecuteUbergraph_GA_Parkour::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_Parkour.GA_Parkour_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Parkour_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Parkour_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Parkour_C_K2_OnEndAbility");
static_assert(sizeof(GA_Parkour_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Parkour_C_K2_OnEndAbility");
static_assert(offsetof(GA_Parkour_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Parkour_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Parkour.GA_Parkour_C.OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D
// 0x00B8 (0x00B8 - 0x0000)
struct GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x000008, "Wrong alignment on GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(sizeof(GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x0000B8, "Wrong size on GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(offsetof(GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D, EventTag) == 0x000000, "Member 'GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D::EventTag' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D, EventData) == 0x000008, "Member 'GA_Parkour_C_OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D::EventData' has a wrong offset!");

// Function GA_Parkour.GA_Parkour_C.OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D
// 0x00B8 (0x00B8 - 0x0000)
struct GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x000008, "Wrong alignment on GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(sizeof(GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x0000B8, "Wrong size on GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(offsetof(GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D, EventTag) == 0x000000, "Member 'GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D::EventTag' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D, EventData) == 0x000008, "Member 'GA_Parkour_C_OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D::EventData' has a wrong offset!");

// Function GA_Parkour.GA_Parkour_C.OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D
// 0x00B8 (0x00B8 - 0x0000)
struct GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x000008, "Wrong alignment on GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(sizeof(GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x0000B8, "Wrong size on GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(offsetof(GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D, EventTag) == 0x000000, "Member 'GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D::EventTag' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D, EventData) == 0x000008, "Member 'GA_Parkour_C_OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D::EventData' has a wrong offset!");

// Function GA_Parkour.GA_Parkour_C.OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D
// 0x00B8 (0x00B8 - 0x0000)
struct GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x000008, "Wrong alignment on GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(sizeof(GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x0000B8, "Wrong size on GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(offsetof(GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D, EventTag) == 0x000000, "Member 'GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D::EventTag' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D, EventData) == 0x000008, "Member 'GA_Parkour_C_OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D::EventData' has a wrong offset!");

// Function GA_Parkour.GA_Parkour_C.EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D
// 0x00B8 (0x00B8 - 0x0000)
struct GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventData;                                         // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x000008, "Wrong alignment on GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(sizeof(GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D) == 0x0000B8, "Wrong size on GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D");
static_assert(offsetof(GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D, EventTag) == 0x000000, "Member 'GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D::EventTag' has a wrong offset!");
static_assert(offsetof(GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D, EventData) == 0x000008, "Member 'GA_Parkour_C_EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D::EventData' has a wrong offset!");

}

