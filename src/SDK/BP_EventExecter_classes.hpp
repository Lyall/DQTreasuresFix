#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventExecter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_TalkSelectHistoryItem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventExecter.BP_EventExecter_C
// 0x0400 (0x0518 - 0x0118)
class UBP_EventExecter_C final : public UEventExecuter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0118(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FString                                 PlayingEventID;                                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FPrimaryAssetId>                MainLevelSequenceAssets;                           // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             EventLoadDataTable;                                // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LoadMainLevelSequenceNames;                        // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsDebug;                                           // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_LevelSequenceController_C*          BP_LevelSequenceController;                        // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventManager_C*                     BP_EventManager;                                   // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 LoadLevelSequences;                                // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ALevelSequenceActor*>            CreatedLevelSequenceActors;                        // 0x0180(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsLoadSucessed;                                    // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEventType                                    CurrentEventType;                                  // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UDataTable*>        ProvisionalEventTextList;                          // 0x0198(0x0050)(Edit, BlueprintVisible)
	class FString                                 InputID;                                           // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class ABPC_Darwin_C*                          BPC_Darwin;                                        // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EventID;                                           // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedNum;                                       // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TextIndex;                                         // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_TextWidgetData_C*                    TextWidgetData;                                    // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawTextInfo                          DrawTextInfo;                                      // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsStopPlayerMove;                                  // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Talk_WinStatus_C*                    TalkWindow;                                        // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 FastTravelPointArray;                              // 0x0238(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsTalkContinue;                                    // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSelectCancel;                                    // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEventType                                    NextEventType;                                     // 0x024A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24B[0x1];                                      // 0x024B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         tmpCancelNo;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  historyTmp;                                        // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FString, struct FST_TalkSelectHistoryItem> TalkSelectHistory;                                 // 0x0260(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             DT_FastTravelPoint;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         FastTravelSelectArray;                             // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   CurrentTextID;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NexTextId;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 textData;                                          // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         DefaultSelect;                                     // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_TextGoto>                   mTextGotoDataNew;                                  // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FST_EventTalktBranchData               mTextBranchDataNew;                                // 0x0300(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CancelSelect;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_TalkEventInfo>              BranchBaseTemp;                                    // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          SelectCancel;                                      // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSkip;                                            // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLoding;                                          // 0x033A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33B[0x1];                                      // 0x033B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventIndex;                                        // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           BonFireTextIDs;                                    // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         ChangeTime;                                        // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LiftEventIDs;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         LiftId;                                            // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StarScarId;                                        // 0x036C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CoinGachaTextIds;                                  // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   FIRST_COIN_GACHA_FLAG;                             // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFastTravel;                                      // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                FacilityQuestTextMap;                              // 0x0398(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         HubReceptionSelectIndex;                           // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           HubReceptionTextIDs;                               // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           FacilityReceptionTextIDs;                          // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   MAP_WORLD_TIME_PAUSE;                              // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FIRST_BON_FIRE;                                    // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           HunReceptionQuestIDs;                              // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           HubReceptionNewTextIDs;                            // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         FacilityReceptionSelectIndex;                      // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MQ_040_CLEAR;                                      // 0x0444(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MQ_190_BASE_AREA_BATTLE;                           // 0x044C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MQ_190_BASE_AREA_BATTLE_AFTER_JONAMAE;             // 0x0454(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CecilyTextData                     CecilyTextData;                                    // 0x0460(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   BONFIRE_TIMECHANGE_FLAG;                           // 0x0480(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class FName>                             SQ_DFC_START_QUEST_IDS;                            // 0x0488(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AfterDorakiCount;                                  // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BeforeDorakiCount;                                 // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DorakiOriginKindID;                                // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DORAKI_FRIENDS;                                    // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOrderFacilityQuest;                              // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FACILITY_UNLOCK_DISPATCH;                          // 0x04F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PLAYER_UNLOCK_TEAM_MENU_DISPATCH;                  // 0x04FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACineCameraActor*                       CurrentCineCameraActor;                            // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAperture;                                   // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EventExecter(int32 EntryPoint);
	void ExecuteFacilityReception();
	void SelectFacilityReception();
	void SkipSequencer();
	void ExecuteEvent(const struct FST_EventData& EventData);
	void CallEndEvent();
	void ExecuteFacilityReception_NoSelect();
	void ReceiveTick(float DeltaSeconds);
	void EndLevelSequence(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, bool bCameraKeep);
	void PlayLevelSequence();
	void ReceiveCloseTalkWindow();
	void ReceiveSelectResult(int32 SelectIndex);
	void DrawTalkWindow(int32 StartTextIndex);
	void ChangeNextText();
	void ChangeStateAndExecuteBonfire(int32 State);
	void ChangeTimeBonfire(int32 ToHour);
	void SelectBonfire();
	void ExecuteBonFire();
	void InitLiftEvent();
	void SelectLift();
	void ExecuteLiftEvent();
	void SelectCoinGachaEvent();
	void ExecuteCoinGachaEvent();
	void ExecuteHubReception();
	void SelectHubReception();
	void FacilityQuestOpenCheck();
	void SetNewText();
	void SetText();
	void ExecuteHubReception_NoSelect();
	void CreateLevelSequenceActors(TArray<class UObject*>& Targets);
	void UnLoadLevelSequenceAssets();
	void Init(class UBP_EventManager_C* EventManager, class UBP_LevelSequenceController_C* LevelSequencePlayer);
	void CreatePrimaryAssetIDs(TArray<class FName>& Array, TArray<struct FPrimaryAssetId>& SettingArray);
	void PrintLadFailedAssetName(const TArray<class UObject*>& InputPin, TArray<struct FPrimaryAssetId>& Array);
	void PrintAsyncLoadResults(bool Condition, const TArray<class FString>& TargetArray, TArray<class FString>& InputPin);
	void PrintAsyncLoadSequenceName();
	void PrintLoadResult(bool Result);
	void CSInput(float DelataTime, bool GamePaused, const struct FKeyInput& KeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Reply);
	void CSDisableInput();
	void CSEnableInput();
	void GetTextData(class FName TextID, class FString* Text, class FName* NextTextID, bool* isSystemMessage);
	void SetDrawTextInfo(const struct FDrawTextInfo& DrawDataInfo, const struct FST_EventTalktBranchData& TextBranchDataNew);
	void GetTextID(class FName* Text_ID);
	void ChangePlayerToEventState();
	void AddTextIndex();
	void AddTextID(class FName NextTextID);
	void FastTravel(int32 SelectResult);
	void SetPlayerStop();
	void CheckSelectText();
	void TimeChange(int32 ToHour);
	class FString CreateFastTravelSelectText(const class FString& FastTravelText);
	void SetNextText();
	void SetSelectPos();
	void CallReleaseStigmata();
	void OpenStigmataReleseText();
	void SkipLevelSequence();
	EEventType GetCurrentEventType();
	void Can_Open_Facility_Quest(const class FName InputPin, bool* ret);
	void Is_Open_Facility_Quest_Order_UIParent_Mode(TArray<class FName>& HubReceptionQuestIDs, bool* return_0);
	void IsBoneFireChangeTime(bool* IsTimeChange);
	void UpdateDailyFacilityQuest(class FName UpdateQuestID, class FName FlagName);
	void ChangeCurrentAperture();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventExecter_C">();
	}
	static class UBP_EventExecter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EventExecter_C>();
	}
};
static_assert(alignof(UBP_EventExecter_C) == 0x000008, "Wrong alignment on UBP_EventExecter_C");
static_assert(sizeof(UBP_EventExecter_C) == 0x000518, "Wrong size on UBP_EventExecter_C");
static_assert(offsetof(UBP_EventExecter_C, UberGraphFrame) == 0x000118, "Member 'UBP_EventExecter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, PlayingEventID) == 0x000120, "Member 'UBP_EventExecter_C::PlayingEventID' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, MainLevelSequenceAssets) == 0x000130, "Member 'UBP_EventExecter_C::MainLevelSequenceAssets' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, EventLoadDataTable) == 0x000140, "Member 'UBP_EventExecter_C::EventLoadDataTable' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, LoadMainLevelSequenceNames) == 0x000148, "Member 'UBP_EventExecter_C::LoadMainLevelSequenceNames' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsDebug) == 0x000158, "Member 'UBP_EventExecter_C::IsDebug' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, BP_LevelSequenceController) == 0x000160, "Member 'UBP_EventExecter_C::BP_LevelSequenceController' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, BP_EventManager) == 0x000168, "Member 'UBP_EventExecter_C::BP_EventManager' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, LoadLevelSequences) == 0x000170, "Member 'UBP_EventExecter_C::LoadLevelSequences' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CreatedLevelSequenceActors) == 0x000180, "Member 'UBP_EventExecter_C::CreatedLevelSequenceActors' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsLoadSucessed) == 0x000190, "Member 'UBP_EventExecter_C::IsLoadSucessed' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CurrentEventType) == 0x000191, "Member 'UBP_EventExecter_C::CurrentEventType' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, ProvisionalEventTextList) == 0x000198, "Member 'UBP_EventExecter_C::ProvisionalEventTextList' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, InputID) == 0x0001E8, "Member 'UBP_EventExecter_C::InputID' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, BPC_Darwin) == 0x0001F8, "Member 'UBP_EventExecter_C::BPC_Darwin' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, EventID) == 0x000200, "Member 'UBP_EventExecter_C::EventID' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, SelectedNum) == 0x000208, "Member 'UBP_EventExecter_C::SelectedNum' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, TextIndex) == 0x00020C, "Member 'UBP_EventExecter_C::TextIndex' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, TextWidgetData) == 0x000210, "Member 'UBP_EventExecter_C::TextWidgetData' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, DrawTextInfo) == 0x000218, "Member 'UBP_EventExecter_C::DrawTextInfo' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsStopPlayerMove) == 0x000228, "Member 'UBP_EventExecter_C::IsStopPlayerMove' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, TalkWindow) == 0x000230, "Member 'UBP_EventExecter_C::TalkWindow' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FastTravelPointArray) == 0x000238, "Member 'UBP_EventExecter_C::FastTravelPointArray' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsTalkContinue) == 0x000248, "Member 'UBP_EventExecter_C::IsTalkContinue' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsSelectCancel) == 0x000249, "Member 'UBP_EventExecter_C::IsSelectCancel' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, NextEventType) == 0x00024A, "Member 'UBP_EventExecter_C::NextEventType' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, tmpCancelNo) == 0x00024C, "Member 'UBP_EventExecter_C::tmpCancelNo' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, historyTmp) == 0x000250, "Member 'UBP_EventExecter_C::historyTmp' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, TalkSelectHistory) == 0x000260, "Member 'UBP_EventExecter_C::TalkSelectHistory' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, DT_FastTravelPoint) == 0x0002B0, "Member 'UBP_EventExecter_C::DT_FastTravelPoint' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FastTravelSelectArray) == 0x0002B8, "Member 'UBP_EventExecter_C::FastTravelSelectArray' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CurrentTextID) == 0x0002C8, "Member 'UBP_EventExecter_C::CurrentTextID' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, NexTextId) == 0x0002D0, "Member 'UBP_EventExecter_C::NexTextId' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, textData) == 0x0002D8, "Member 'UBP_EventExecter_C::textData' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, DefaultSelect) == 0x0002E8, "Member 'UBP_EventExecter_C::DefaultSelect' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, mTextGotoDataNew) == 0x0002F0, "Member 'UBP_EventExecter_C::mTextGotoDataNew' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, mTextBranchDataNew) == 0x000300, "Member 'UBP_EventExecter_C::mTextBranchDataNew' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CancelSelect) == 0x000320, "Member 'UBP_EventExecter_C::CancelSelect' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, BranchBaseTemp) == 0x000328, "Member 'UBP_EventExecter_C::BranchBaseTemp' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, SelectCancel) == 0x000338, "Member 'UBP_EventExecter_C::SelectCancel' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsSkip) == 0x000339, "Member 'UBP_EventExecter_C::IsSkip' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsLoding) == 0x00033A, "Member 'UBP_EventExecter_C::IsLoding' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, EventIndex) == 0x00033C, "Member 'UBP_EventExecter_C::EventIndex' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, BonFireTextIDs) == 0x000340, "Member 'UBP_EventExecter_C::BonFireTextIDs' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, ChangeTime) == 0x000350, "Member 'UBP_EventExecter_C::ChangeTime' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, LiftEventIDs) == 0x000358, "Member 'UBP_EventExecter_C::LiftEventIDs' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, LiftId) == 0x000368, "Member 'UBP_EventExecter_C::LiftId' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, StarScarId) == 0x00036C, "Member 'UBP_EventExecter_C::StarScarId' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CoinGachaTextIds) == 0x000378, "Member 'UBP_EventExecter_C::CoinGachaTextIds' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FIRST_COIN_GACHA_FLAG) == 0x000388, "Member 'UBP_EventExecter_C::FIRST_COIN_GACHA_FLAG' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsFastTravel) == 0x000390, "Member 'UBP_EventExecter_C::IsFastTravel' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FacilityQuestTextMap) == 0x000398, "Member 'UBP_EventExecter_C::FacilityQuestTextMap' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, HubReceptionSelectIndex) == 0x0003E8, "Member 'UBP_EventExecter_C::HubReceptionSelectIndex' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, HubReceptionTextIDs) == 0x0003F0, "Member 'UBP_EventExecter_C::HubReceptionTextIDs' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FacilityReceptionTextIDs) == 0x000400, "Member 'UBP_EventExecter_C::FacilityReceptionTextIDs' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, MAP_WORLD_TIME_PAUSE) == 0x000410, "Member 'UBP_EventExecter_C::MAP_WORLD_TIME_PAUSE' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FIRST_BON_FIRE) == 0x000418, "Member 'UBP_EventExecter_C::FIRST_BON_FIRE' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, HunReceptionQuestIDs) == 0x000420, "Member 'UBP_EventExecter_C::HunReceptionQuestIDs' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, HubReceptionNewTextIDs) == 0x000430, "Member 'UBP_EventExecter_C::HubReceptionNewTextIDs' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FacilityReceptionSelectIndex) == 0x000440, "Member 'UBP_EventExecter_C::FacilityReceptionSelectIndex' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, MQ_040_CLEAR) == 0x000444, "Member 'UBP_EventExecter_C::MQ_040_CLEAR' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, MQ_190_BASE_AREA_BATTLE) == 0x00044C, "Member 'UBP_EventExecter_C::MQ_190_BASE_AREA_BATTLE' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, MQ_190_BASE_AREA_BATTLE_AFTER_JONAMAE) == 0x000454, "Member 'UBP_EventExecter_C::MQ_190_BASE_AREA_BATTLE_AFTER_JONAMAE' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CecilyTextData) == 0x000460, "Member 'UBP_EventExecter_C::CecilyTextData' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, BONFIRE_TIMECHANGE_FLAG) == 0x000480, "Member 'UBP_EventExecter_C::BONFIRE_TIMECHANGE_FLAG' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, SQ_DFC_START_QUEST_IDS) == 0x000488, "Member 'UBP_EventExecter_C::SQ_DFC_START_QUEST_IDS' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, AfterDorakiCount) == 0x0004D8, "Member 'UBP_EventExecter_C::AfterDorakiCount' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, BeforeDorakiCount) == 0x0004DC, "Member 'UBP_EventExecter_C::BeforeDorakiCount' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, DorakiOriginKindID) == 0x0004E0, "Member 'UBP_EventExecter_C::DorakiOriginKindID' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, DORAKI_FRIENDS) == 0x0004E8, "Member 'UBP_EventExecter_C::DORAKI_FRIENDS' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, IsOrderFacilityQuest) == 0x0004F0, "Member 'UBP_EventExecter_C::IsOrderFacilityQuest' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, FACILITY_UNLOCK_DISPATCH) == 0x0004F4, "Member 'UBP_EventExecter_C::FACILITY_UNLOCK_DISPATCH' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, PLAYER_UNLOCK_TEAM_MENU_DISPATCH) == 0x0004FC, "Member 'UBP_EventExecter_C::PLAYER_UNLOCK_TEAM_MENU_DISPATCH' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CurrentCineCameraActor) == 0x000508, "Member 'UBP_EventExecter_C::CurrentCineCameraActor' has a wrong offset!");
static_assert(offsetof(UBP_EventExecter_C, CurrentAperture) == 0x000510, "Member 'UBP_EventExecter_C::CurrentAperture' has a wrong offset!");

}

