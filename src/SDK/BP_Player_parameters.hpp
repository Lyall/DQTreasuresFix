#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Player

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Player.BP_Player_C.ExecuteUbergraph_BP_Player
// 0x0260 (0x0260 - 0x0000)
struct BP_Player_C_ExecuteUbergraph_BP_Player final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnTheWater_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOperationModeEnum                            Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USwitchCollisionMovementComponent*      K2Node_DynamicCast_AsSwitch_Collision_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOperationModeEnum                            Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue_1;      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue;   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0018(0x0018)(HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICharacterMovementInterfaceForABP> K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP; // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x0060(0x0018)(HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICharacterMovementInterfaceForABP> K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP_1; // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsEnd_2;                              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_SkipMotion;                           // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_ApplyAttributeGameplayEffect_ReturnValue; // 0x00A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue_1; // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Location;                             // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation;                             // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x00C4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Velocity;                             // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PlayerTransformInfoForDebug_C*       CallFunc_Create_ReturnValue;                       // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0170(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCamera_C*                     CallFunc_FinishSpawningActor_ReturnValue;          // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_1; // 0x01B4(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue_2; // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESocket                                       Temp_byte_Variable_2;                              // 0x01BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x01BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_1;     // 0x01C4(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_1;                     // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESocket                                       Temp_byte_Variable_3;                              // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESocket                                       Temp_byte_Variable_4;                              // 0x01CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESocket                                       K2Node_Select_Default;                             // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESocket                                       K2Node_Select_Default_1;                           // 0x01D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01D4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01E8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EObjectEffectionEnum                          K2Node_Event_Type;                                 // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Instigator;                           // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasTag_ReturnValue_2;                     // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RemoveActiveEffectsWithGrantedTags_ReturnValue; // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_2; // 0x0208(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBattleModeContinue_ReturnValue;         // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Complete;                             // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsShow;                               // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_213[0x1];                                      // 0x0213(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0214(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0228(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddToPlayerScreen_ReturnValue;            // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_End;                                  // 0x0233(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsEnd_1;                              // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0236(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_237[0x1];                                      // 0x0237(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Event_NewRotation;                          // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_id;                                   // 0x0248(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOperationModeEnum                            K2Node_Event_Mode;                                 // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x024D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E[0x2];                                      // 0x024E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Partner;                              // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsCameraEnabled;                      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsEnd;                                // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EOperationModeEnum                            K2Node_Select_Default_2;                           // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_ExecuteUbergraph_BP_Player) == 0x000010, "Wrong alignment on BP_Player_C_ExecuteUbergraph_BP_Player");
static_assert(sizeof(BP_Player_C_ExecuteUbergraph_BP_Player) == 0x000260, "Wrong size on BP_Player_C_ExecuteUbergraph_BP_Player");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, EntryPoint) == 0x000000, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_OnTheWater_ReturnValue) == 0x000004, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_OnTheWater_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_byte_Variable) == 0x000005, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_DynamicCast_AsSwitch_Collision_Movement_Component) == 0x000008, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_DynamicCast_AsSwitch_Collision_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000011, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_byte_Variable_1) == 0x000012, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_K2_IsValidTimerHandle_ReturnValue_1) == 0x000013, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_K2_IsValidTimerHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_bool_Variable) == 0x000014, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_RemoveActiveGameplayEffect_ReturnValue) == 0x000015, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_RemoveActiveGameplayEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_Not_PreBool_ReturnValue) == 0x000016, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_InputKeyEvent_Key) == 0x000018, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000030, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_GetAnimInstance_ReturnValue) == 0x000038, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_HasTag_ReturnValue) == 0x000040, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP) == 0x000048, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_InputKeyEvent_Key_1) == 0x000060, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000078, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000080, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP_1) == 0x000088, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_DynamicCast_AsCharacter_Movement_Interface_for_ABP_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_DynamicCast_bSuccess_2) == 0x000098, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_IsEnd_2) == 0x000099, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_IsEnd_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_SkipMotion) == 0x00009A, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_SkipMotion' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_Not_PreBool_ReturnValue_1) == 0x00009B, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_IsValid_ReturnValue) == 0x00009C, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_ApplyAttributeGameplayEffect_ReturnValue) == 0x0000A0, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_ApplyAttributeGameplayEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_bool_Variable_1) == 0x0000A8, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_RemoveActiveGameplayEffect_ReturnValue_1) == 0x0000A9, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_RemoveActiveGameplayEffect_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Location) == 0x0000AC, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Rotation) == 0x0000B8, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0000C4, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x00014C, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Velocity) == 0x000150, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Velocity' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_Create_ReturnValue) == 0x000160, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_GetTransform_ReturnValue) == 0x000170, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001A0, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_FinishSpawningActor_ReturnValue) == 0x0001A8, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_DeltaSeconds) == 0x0001B0, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_1) == 0x0001B4, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001BC, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_RemoveActiveGameplayEffect_ReturnValue_2) == 0x0001BD, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_RemoveActiveGameplayEffect_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_byte_Variable_2) == 0x0001BE, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_bool_Variable_2) == 0x0001BF, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001C0, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_MakeLiteralGameplayTag_ReturnValue_1) == 0x0001C4, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_MakeLiteralGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_HasTag_ReturnValue_1) == 0x0001CC, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_HasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_byte_Variable_3) == 0x0001CD, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_bool_Variable_3) == 0x0001CE, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_byte_Variable_4) == 0x0001CF, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0001D0, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Select_Default) == 0x0001D1, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, Temp_bool_Variable_4) == 0x0001D2, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Select_Default_1) == 0x0001D3, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_CreateDelegate_OutputDelegate) == 0x0001D4, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001E8, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_IsValid_ReturnValue_1) == 0x0001F0, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Type) == 0x0001F1, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Instigator) == 0x0001F8, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_SwitchEnum_CmpSuccess) == 0x000200, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_HasTag_ReturnValue_2) == 0x000201, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_HasTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_RemoveActiveEffectsWithGrantedTags_ReturnValue) == 0x000204, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_RemoveActiveEffectsWithGrantedTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_2) == 0x000208, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_IsBattleModeContinue_ReturnValue) == 0x000210, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_IsBattleModeContinue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Complete) == 0x000211, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Complete' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_IsShow) == 0x000212, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_IsShow' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_CreateDelegate_OutputDelegate_1) == 0x000214, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000228, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_IsValid_ReturnValue_2) == 0x000230, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_AddToPlayerScreen_ReturnValue) == 0x000231, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_AddToPlayerScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_IsValid_ReturnValue_3) == 0x000232, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_End) == 0x000233, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_End' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_Not_PreBool_ReturnValue_3) == 0x000234, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_IsEnd_1) == 0x000235, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_IsEnd_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_Not_PreBool_ReturnValue_4) == 0x000236, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_NewRotation) == 0x000238, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_NewRotation' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000244, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_id) == 0x000248, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_id' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Mode) == 0x00024C, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Mode' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_SwitchEnum_CmpSuccess_1) == 0x00024D, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_Partner) == 0x000250, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_Partner' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_IsCameraEnabled) == 0x000258, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_IsCameraEnabled' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Event_IsEnd) == 0x000259, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Event_IsEnd' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ExecuteUbergraph_BP_Player, K2Node_Select_Default_2) == 0x00025A, "Member 'BP_Player_C_ExecuteUbergraph_BP_Player::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_Player.BP_Player_C.Talk
// 0x0010 (0x0010 - 0x0000)
struct BP_Player_C_Talk final
{
public:
	class AActor*                                 Partner;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCameraEnabled;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEnd;                                             // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_Talk) == 0x000008, "Wrong alignment on BP_Player_C_Talk");
static_assert(sizeof(BP_Player_C_Talk) == 0x000010, "Wrong size on BP_Player_C_Talk");
static_assert(offsetof(BP_Player_C_Talk, Partner) == 0x000000, "Member 'BP_Player_C_Talk::Partner' has a wrong offset!");
static_assert(offsetof(BP_Player_C_Talk, IsCameraEnabled) == 0x000008, "Member 'BP_Player_C_Talk::IsCameraEnabled' has a wrong offset!");
static_assert(offsetof(BP_Player_C_Talk, IsEnd) == 0x000009, "Member 'BP_Player_C_Talk::IsEnd' has a wrong offset!");

// Function BP_Player.BP_Player_C.ChangeOpeMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_C_ChangeOpeMode final
{
public:
	EOperationModeEnum                            Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_ChangeOpeMode) == 0x000001, "Wrong alignment on BP_Player_C_ChangeOpeMode");
static_assert(sizeof(BP_Player_C_ChangeOpeMode) == 0x000001, "Wrong size on BP_Player_C_ChangeOpeMode");
static_assert(offsetof(BP_Player_C_ChangeOpeMode, Mode) == 0x000000, "Member 'BP_Player_C_ChangeOpeMode::Mode' has a wrong offset!");

// Function BP_Player.BP_Player_C.FastTravel
// 0x0004 (0x0004 - 0x0000)
struct BP_Player_C_FastTravel final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_FastTravel) == 0x000004, "Wrong alignment on BP_Player_C_FastTravel");
static_assert(sizeof(BP_Player_C_FastTravel) == 0x000004, "Wrong size on BP_Player_C_FastTravel");
static_assert(offsetof(BP_Player_C_FastTravel, ID) == 0x000000, "Member 'BP_Player_C_FastTravel::ID' has a wrong offset!");

// Function BP_Player.BP_Player_C.ResetRotation
// 0x000C (0x000C - 0x0000)
struct BP_Player_C_ResetRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_ResetRotation) == 0x000004, "Wrong alignment on BP_Player_C_ResetRotation");
static_assert(sizeof(BP_Player_C_ResetRotation) == 0x00000C, "Wrong size on BP_Player_C_ResetRotation");
static_assert(offsetof(BP_Player_C_ResetRotation, NewRotation) == 0x000000, "Member 'BP_Player_C_ResetRotation::NewRotation' has a wrong offset!");

// Function BP_Player.BP_Player_C.SwitchToCutSceneMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_C_SwitchToCutSceneMode final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_SwitchToCutSceneMode) == 0x000001, "Wrong alignment on BP_Player_C_SwitchToCutSceneMode");
static_assert(sizeof(BP_Player_C_SwitchToCutSceneMode) == 0x000001, "Wrong size on BP_Player_C_SwitchToCutSceneMode");
static_assert(offsetof(BP_Player_C_SwitchToCutSceneMode, IsEnd) == 0x000000, "Member 'BP_Player_C_SwitchToCutSceneMode::IsEnd' has a wrong offset!");

// Function BP_Player.BP_Player_C.Aim
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_C_Aim final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_Aim) == 0x000001, "Wrong alignment on BP_Player_C_Aim");
static_assert(sizeof(BP_Player_C_Aim) == 0x000001, "Wrong size on BP_Player_C_Aim");
static_assert(offsetof(BP_Player_C_Aim, End) == 0x000000, "Member 'BP_Player_C_Aim::End' has a wrong offset!");

// Function BP_Player.BP_Player_C.ShowTransformInfoForDebug
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_C_ShowTransformInfoForDebug final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_ShowTransformInfoForDebug) == 0x000001, "Wrong alignment on BP_Player_C_ShowTransformInfoForDebug");
static_assert(sizeof(BP_Player_C_ShowTransformInfoForDebug) == 0x000001, "Wrong size on BP_Player_C_ShowTransformInfoForDebug");
static_assert(offsetof(BP_Player_C_ShowTransformInfoForDebug, IsShow) == 0x000000, "Member 'BP_Player_C_ShowTransformInfoForDebug::IsShow' has a wrong offset!");

// Function BP_Player.BP_Player_C.ReadyToShot
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_C_ReadyToShot final
{
public:
	bool                                          Complete;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_ReadyToShot) == 0x000001, "Wrong alignment on BP_Player_C_ReadyToShot");
static_assert(sizeof(BP_Player_C_ReadyToShot) == 0x000001, "Wrong size on BP_Player_C_ReadyToShot");
static_assert(offsetof(BP_Player_C_ReadyToShot, Complete) == 0x000000, "Member 'BP_Player_C_ReadyToShot::Complete' has a wrong offset!");

// Function BP_Player.BP_Player_C.OnReceiveHit
// 0x0010 (0x0010 - 0x0000)
struct BP_Player_C_OnReceiveHit final
{
public:
	EObjectEffectionEnum                          Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator_0;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_OnReceiveHit) == 0x000008, "Wrong alignment on BP_Player_C_OnReceiveHit");
static_assert(sizeof(BP_Player_C_OnReceiveHit) == 0x000010, "Wrong size on BP_Player_C_OnReceiveHit");
static_assert(offsetof(BP_Player_C_OnReceiveHit, Type) == 0x000000, "Member 'BP_Player_C_OnReceiveHit::Type' has a wrong offset!");
static_assert(offsetof(BP_Player_C_OnReceiveHit, Instigator_0) == 0x000008, "Member 'BP_Player_C_OnReceiveHit::Instigator_0' has a wrong offset!");

// Function BP_Player.BP_Player_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Player_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Player_C_ReceiveTick");
static_assert(sizeof(BP_Player_C_ReceiveTick) == 0x000004, "Wrong size on BP_Player_C_ReceiveTick");
static_assert(offsetof(BP_Player_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Player_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Player.BP_Player_C.Launch
// 0x000C (0x000C - 0x0000)
struct BP_Player_C_Launch final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_Launch) == 0x000004, "Wrong alignment on BP_Player_C_Launch");
static_assert(sizeof(BP_Player_C_Launch) == 0x00000C, "Wrong size on BP_Player_C_Launch");
static_assert(offsetof(BP_Player_C_Launch, Velocity) == 0x000000, "Member 'BP_Player_C_Launch::Velocity' has a wrong offset!");

// Function BP_Player.BP_Player_C.Restart
// 0x0018 (0x0018 - 0x0000)
struct BP_Player_C_Restart final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_Restart) == 0x000004, "Wrong alignment on BP_Player_C_Restart");
static_assert(sizeof(BP_Player_C_Restart) == 0x000018, "Wrong size on BP_Player_C_Restart");
static_assert(offsetof(BP_Player_C_Restart, Location) == 0x000000, "Member 'BP_Player_C_Restart::Location' has a wrong offset!");
static_assert(offsetof(BP_Player_C_Restart, Rotation) == 0x00000C, "Member 'BP_Player_C_Restart::Rotation' has a wrong offset!");

// Function BP_Player.BP_Player_C.SwitchToBattleMode
// 0x0002 (0x0002 - 0x0000)
struct BP_Player_C_SwitchToBattleMode final
{
public:
	bool                                          IsEnd;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SkipMotion;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_SwitchToBattleMode) == 0x000001, "Wrong alignment on BP_Player_C_SwitchToBattleMode");
static_assert(sizeof(BP_Player_C_SwitchToBattleMode) == 0x000002, "Wrong size on BP_Player_C_SwitchToBattleMode");
static_assert(offsetof(BP_Player_C_SwitchToBattleMode, IsEnd) == 0x000000, "Member 'BP_Player_C_SwitchToBattleMode::IsEnd' has a wrong offset!");
static_assert(offsetof(BP_Player_C_SwitchToBattleMode, SkipMotion) == 0x000001, "Member 'BP_Player_C_SwitchToBattleMode::SkipMotion' has a wrong offset!");

// Function BP_Player.BP_Player_C.InpActEvt_Three_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_Player_C_InpActEvt_Three_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_InpActEvt_Three_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on BP_Player_C_InpActEvt_Three_K2Node_InputKeyEvent_0");
static_assert(sizeof(BP_Player_C_InpActEvt_Three_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on BP_Player_C_InpActEvt_Three_K2Node_InputKeyEvent_0");
static_assert(offsetof(BP_Player_C_InpActEvt_Three_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'BP_Player_C_InpActEvt_Three_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function BP_Player.BP_Player_C.InpActEvt_RightAlt_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_Player_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on BP_Player_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_1");
static_assert(sizeof(BP_Player_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on BP_Player_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_1");
static_assert(offsetof(BP_Player_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'BP_Player_C_InpActEvt_RightAlt_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function BP_Player.BP_Player_C.InitializeTarget
// 0x0008 (0x0008 - 0x0000)
struct BP_Player_C_InitializeTarget final
{
public:
	class FName                                   IndexName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_InitializeTarget) == 0x000004, "Wrong alignment on BP_Player_C_InitializeTarget");
static_assert(sizeof(BP_Player_C_InitializeTarget) == 0x000008, "Wrong size on BP_Player_C_InitializeTarget");
static_assert(offsetof(BP_Player_C_InitializeTarget, IndexName) == 0x000000, "Member 'BP_Player_C_InitializeTarget::IndexName' has a wrong offset!");

// Function BP_Player.BP_Player_C.ShowRestartMessage
// 0x0008 (0x0008 - 0x0000)
struct BP_Player_C_ShowRestartMessage final
{
public:
	class UUIField_WinLogbox*                     CallFunc_GetFieldLogWindow_OutWidget;              // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_ShowRestartMessage) == 0x000008, "Wrong alignment on BP_Player_C_ShowRestartMessage");
static_assert(sizeof(BP_Player_C_ShowRestartMessage) == 0x000008, "Wrong size on BP_Player_C_ShowRestartMessage");
static_assert(offsetof(BP_Player_C_ShowRestartMessage, CallFunc_GetFieldLogWindow_OutWidget) == 0x000000, "Member 'BP_Player_C_ShowRestartMessage::CallFunc_GetFieldLogWindow_OutWidget' has a wrong offset!");

// Function BP_Player.BP_Player_C.GetOriginID
// 0x0008 (0x0008 - 0x0000)
struct BP_Player_C_GetOriginID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_GetOriginID) == 0x000004, "Wrong alignment on BP_Player_C_GetOriginID");
static_assert(sizeof(BP_Player_C_GetOriginID) == 0x000008, "Wrong size on BP_Player_C_GetOriginID");
static_assert(offsetof(BP_Player_C_GetOriginID, ReturnValue) == 0x000000, "Member 'BP_Player_C_GetOriginID::ReturnValue' has a wrong offset!");

// Function BP_Player.BP_Player_C.ChangeCameraState
// 0x0018 (0x0018 - 0x0000)
struct BP_Player_C_ChangeCameraState final
{
public:
	struct FGameplayTag                           NextState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICameraInterface>      CallFunc_ChangeState_self_CastInput;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_ChangeCameraState) == 0x000008, "Wrong alignment on BP_Player_C_ChangeCameraState");
static_assert(sizeof(BP_Player_C_ChangeCameraState) == 0x000018, "Wrong size on BP_Player_C_ChangeCameraState");
static_assert(offsetof(BP_Player_C_ChangeCameraState, NextState) == 0x000000, "Member 'BP_Player_C_ChangeCameraState::NextState' has a wrong offset!");
static_assert(offsetof(BP_Player_C_ChangeCameraState, CallFunc_ChangeState_self_CastInput) == 0x000008, "Member 'BP_Player_C_ChangeCameraState::CallFunc_ChangeState_self_CastInput' has a wrong offset!");

// Function BP_Player.BP_Player_C.GetDarwinCamera
// 0x0008 (0x0008 - 0x0000)
struct BP_Player_C_GetDarwinCamera final
{
public:
	class ADarwinCamera*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_GetDarwinCamera) == 0x000008, "Wrong alignment on BP_Player_C_GetDarwinCamera");
static_assert(sizeof(BP_Player_C_GetDarwinCamera) == 0x000008, "Wrong size on BP_Player_C_GetDarwinCamera");
static_assert(offsetof(BP_Player_C_GetDarwinCamera, ReturnValue) == 0x000000, "Member 'BP_Player_C_GetDarwinCamera::ReturnValue' has a wrong offset!");

// Function BP_Player.BP_Player_C.GetTargetToInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_Player_C_GetTargetToInteract final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Player_C_GetTargetToInteract) == 0x000008, "Wrong alignment on BP_Player_C_GetTargetToInteract");
static_assert(sizeof(BP_Player_C_GetTargetToInteract) == 0x000008, "Wrong size on BP_Player_C_GetTargetToInteract");
static_assert(offsetof(BP_Player_C_GetTargetToInteract, ReturnValue) == 0x000000, "Member 'BP_Player_C_GetTargetToInteract::ReturnValue' has a wrong offset!");

// Function BP_Player.BP_Player_C.IsReadyToShot
// 0x0001 (0x0001 - 0x0000)
struct BP_Player_C_IsReadyToShot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Player_C_IsReadyToShot) == 0x000001, "Wrong alignment on BP_Player_C_IsReadyToShot");
static_assert(sizeof(BP_Player_C_IsReadyToShot) == 0x000001, "Wrong size on BP_Player_C_IsReadyToShot");
static_assert(offsetof(BP_Player_C_IsReadyToShot, ReturnValue) == 0x000000, "Member 'BP_Player_C_IsReadyToShot::ReturnValue' has a wrong offset!");

}

