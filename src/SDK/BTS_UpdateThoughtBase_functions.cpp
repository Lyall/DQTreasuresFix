#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_UpdateThoughtBase

#include "Basic.hpp"

#include "BTS_UpdateThoughtBase_classes.hpp"
#include "BTS_UpdateThoughtBase_parameters.hpp"


namespace SDK
{

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.NextState
// (Public, BlueprintCallable, BlueprintEvent)

void UBTS_UpdateThoughtBase_C::NextState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "NextState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AGPACharacter*                    Target_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_UpdateThoughtBase_C::GetTarget(class AGPACharacter** Target_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "GetTarget");

	Params::BTS_UpdateThoughtBase_C_GetTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target_0 != nullptr)
		*Target_0 = Parms.Target_0;
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetMonster
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMonster*                         Monster                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_UpdateThoughtBase_C::GetMonster(class APawn* Pawn, class AMonster** Monster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "GetMonster");

	Params::BTS_UpdateThoughtBase_C_GetMonster Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Monster != nullptr)
		*Monster = Parms.Monster;
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.IsFarEnough
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Center                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    return_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBTS_UpdateThoughtBase_C::IsFarEnough(const struct FVector& Center, const struct FVector& TargetLocation_0, float Radius, bool* return_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "IsFarEnough");

	Params::BTS_UpdateThoughtBase_C_IsFarEnough Parms{};

	Parms.Center = std::move(Center);
	Parms.TargetLocation_0 = std::move(TargetLocation_0);
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);

	if (return_0 != nullptr)
		*return_0 = Parms.return_0;
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.ResetState
// (Public, BlueprintCallable, BlueprintEvent)

void UBTS_UpdateThoughtBase_C::ResetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "ResetState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TargetLocation_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_UpdateThoughtBase_C::GetTargetLocation(struct FVector* TargetLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "GetTargetLocation");

	Params::BTS_UpdateThoughtBase_C_GetTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetLocation_0 != nullptr)
		*TargetLocation_0 = std::move(Parms.TargetLocation_0);
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.SetTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGPACharacter*                    Target_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_UpdateThoughtBase_C::SetTarget(class AGPACharacter* Target_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "SetTarget");

	Params::BTS_UpdateThoughtBase_C_SetTarget Parms{};

	Parms.Target_0 = Target_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.SetTargetLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_UpdateThoughtBase_C::SetTargetLocation(const struct FVector& TargetLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "SetTargetLocation");

	Params::BTS_UpdateThoughtBase_C_SetTargetLocation Parms{};

	Parms.TargetLocation_0 = std::move(TargetLocation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetMonsterBoss
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMonsterBoss*                     MonsterBoss                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_UpdateThoughtBase_C::GetMonsterBoss(class APawn* Pawn, class AMonsterBoss** MonsterBoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "GetMonsterBoss");

	Params::BTS_UpdateThoughtBase_C_GetMonsterBoss Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (MonsterBoss != nullptr)
		*MonsterBoss = Parms.MonsterBoss;
}


// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetMonsterBase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMonsterBase*                     AsMonster_Base                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_UpdateThoughtBase_C::GetMonsterBase(class APawn* Pawn, class AMonsterBase** AsMonster_Base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_UpdateThoughtBase_C", "GetMonsterBase");

	Params::BTS_UpdateThoughtBase_C_GetMonsterBase Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (AsMonster_Base != nullptr)
		*AsMonster_Base = Parms.AsMonster_Base;
}

}

