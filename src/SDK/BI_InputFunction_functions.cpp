#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_InputFunction

#include "Basic.hpp"

#include "BI_InputFunction_classes.hpp"
#include "BI_InputFunction_parameters.hpp"


namespace SDK
{

// Function BI_InputFunction.BI_InputFunction_C.AnalogStick_LX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::AnalogStick_LX(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "AnalogStick_LX");

	Params::BI_InputFunction_C_AnalogStick_LX Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.AnalogStick_LY
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::AnalogStick_LY(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "AnalogStick_LY");

	Params::BI_InputFunction_C_AnalogStick_LY Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Button_A
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Button_A(float AxisValue, EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Button_A");

	Params::BI_InputFunction_C_Button_A Parms{};

	Parms.AxisValue = AxisValue;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Button_B
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Button_B(float AxisValue, EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Button_B");

	Params::BI_InputFunction_C_Button_B Parms{};

	Parms.AxisValue = AxisValue;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Button_X
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Button_X(float AxisValue, EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Button_X");

	Params::BI_InputFunction_C_Button_X Parms{};

	Parms.AxisValue = AxisValue;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Button_Y
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Button_Y(float AxisValue, EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Button_Y");

	Params::BI_InputFunction_C_Button_Y Parms{};

	Parms.AxisValue = AxisValue;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Left
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Left(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Left");

	Params::BI_InputFunction_C_Left Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Up
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Up(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Up");

	Params::BI_InputFunction_C_Up Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Right
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Right(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Right");

	Params::BI_InputFunction_C_Right Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Down
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Down(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Down");

	Params::BI_InputFunction_C_Down Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.AnalogStick_RX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::AnalogStick_RX(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "AnalogStick_RX");

	Params::BI_InputFunction_C_AnalogStick_RX Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.AnalogStick_RY
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::AnalogStick_RY(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "AnalogStick_RY");

	Params::BI_InputFunction_C_AnalogStick_RY Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Shoulder_L
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Shoulder_L(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Shoulder_L");

	Params::BI_InputFunction_C_Shoulder_L Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Shoulder_R
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Shoulder_R(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Shoulder_R");

	Params::BI_InputFunction_C_Shoulder_R Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Trigger_L
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Trigger_L(float AxisValue, EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Trigger_L");

	Params::BI_InputFunction_C_Trigger_L Parms{};

	Parms.AxisValue = AxisValue;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Trigger_R
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Trigger_R(float AxisValue, EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Trigger_R");

	Params::BI_InputFunction_C_Trigger_R Parms{};

	Parms.AxisValue = AxisValue;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Locking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Release                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_InputFunction_C::Locking(bool Release)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Locking");

	Params::BI_InputFunction_C_Locking Parms{};

	Parms.Release = Release;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Crouching
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Release                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_InputFunction_C::Crouching(bool Release)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Crouching");

	Params::BI_InputFunction_C_Crouching Parms{};

	Parms.Release = Release;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.Move
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MovementInput                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_InputFunction_C::Move(const struct FVector& MovementInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "Move");

	Params::BI_InputFunction_C_Move Parms{};

	Parms.MovementInput = std::move(MovementInput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_InputFunction.BI_InputFunction_C.TakeAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     ActionTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    Release                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_InputFunction_C::TakeAction(const struct FGameplayTag& ActionTag, bool Release)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_InputFunction_C", "TakeAction");

	Params::BI_InputFunction_C_TakeAction Parms{};

	Parms.ActionTag = std::move(ActionTag);
	Parms.Release = Release;

	UObject::ProcessEvent(Func, &Parms);
}

}

