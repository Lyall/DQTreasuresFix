#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_TurnTo

#include "Basic.hpp"

#include "BTTask_Base_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTTask_TurnTo.BTTask_TurnTo_C
// 0x0030 (0x0140 - 0x0110)
class UBTTask_TurnTo_C final : public UBTTask_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BTTask_TurnTo_C;                    // 0x0110(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FDateTime                              StartTime;                                         // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TemporaryRotator;                                  // 0x0124(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               TestRotator;                                       // 0x0130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BTTask_TurnTo(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTTask_TurnTo_C">();
	}
	static class UBTTask_TurnTo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_TurnTo_C>();
	}
};
static_assert(alignof(UBTTask_TurnTo_C) == 0x000008, "Wrong alignment on UBTTask_TurnTo_C");
static_assert(sizeof(UBTTask_TurnTo_C) == 0x000140, "Wrong size on UBTTask_TurnTo_C");
static_assert(offsetof(UBTTask_TurnTo_C, UberGraphFrame_BTTask_TurnTo_C) == 0x000110, "Member 'UBTTask_TurnTo_C::UberGraphFrame_BTTask_TurnTo_C' has a wrong offset!");
static_assert(offsetof(UBTTask_TurnTo_C, StartTime) == 0x000118, "Member 'UBTTask_TurnTo_C::StartTime' has a wrong offset!");
static_assert(offsetof(UBTTask_TurnTo_C, Alpha) == 0x000120, "Member 'UBTTask_TurnTo_C::Alpha' has a wrong offset!");
static_assert(offsetof(UBTTask_TurnTo_C, TemporaryRotator) == 0x000124, "Member 'UBTTask_TurnTo_C::TemporaryRotator' has a wrong offset!");
static_assert(offsetof(UBTTask_TurnTo_C, TestRotator) == 0x000130, "Member 'UBTTask_TurnTo_C::TestRotator' has a wrong offset!");

}

