#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_UpdateBossThought

#include "Basic.hpp"


namespace SDK::Params
{

// Function BTS_UpdateBossThought.BTS_UpdateBossThought_C.ExecuteUbergraph_BTS_UpdateBossThought
// 0x0050 (0x0050 - 0x0000)
struct BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonsterBoss*                           CallFunc_GetMonsterBoss_MonsterBoss;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought) == 0x000008, "Wrong alignment on BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought");
static_assert(sizeof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought) == 0x000050, "Wrong size on BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, EntryPoint) == 0x000000, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, K2Node_Event_OwnerController_2) == 0x000008, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, K2Node_Event_ControlledPawn_2) == 0x000010, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, K2Node_Event_OwnerController) == 0x000018, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, K2Node_Event_ControlledPawn) == 0x000020, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, K2Node_Event_OwnerController_1) == 0x000030, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, K2Node_Event_ControlledPawn_1) == 0x000038, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, CallFunc_GetMonsterBoss_MonsterBoss) == 0x000040, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::CallFunc_GetMonsterBoss_MonsterBoss' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BTS_UpdateBossThought_C_ExecuteUbergraph_BTS_UpdateBossThought::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTS_UpdateBossThought.BTS_UpdateBossThought_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_UpdateBossThought_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateBossThought_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_UpdateBossThought_C_ReceiveTickAI");
static_assert(sizeof(BTS_UpdateBossThought_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_UpdateBossThought_C_ReceiveTickAI");
static_assert(offsetof(BTS_UpdateBossThought_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_UpdateBossThought_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_UpdateBossThought_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_UpdateBossThought_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTS_UpdateBossThought.BTS_UpdateBossThought_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_UpdateBossThought_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateBossThought_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BTS_UpdateBossThought_C_ReceiveActivationAI");
static_assert(sizeof(BTS_UpdateBossThought_C_ReceiveActivationAI) == 0x000010, "Wrong size on BTS_UpdateBossThought_C_ReceiveActivationAI");
static_assert(offsetof(BTS_UpdateBossThought_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BTS_UpdateBossThought_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ReceiveActivationAI, ControlledPawn) == 0x000008, "Member 'BTS_UpdateBossThought_C_ReceiveActivationAI::ControlledPawn' has a wrong offset!");

// Function BTS_UpdateBossThought.BTS_UpdateBossThought_C.ReceiveDeactivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_UpdateBossThought_C_ReceiveDeactivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateBossThought_C_ReceiveDeactivationAI) == 0x000008, "Wrong alignment on BTS_UpdateBossThought_C_ReceiveDeactivationAI");
static_assert(sizeof(BTS_UpdateBossThought_C_ReceiveDeactivationAI) == 0x000010, "Wrong size on BTS_UpdateBossThought_C_ReceiveDeactivationAI");
static_assert(offsetof(BTS_UpdateBossThought_C_ReceiveDeactivationAI, OwnerController) == 0x000000, "Member 'BTS_UpdateBossThought_C_ReceiveDeactivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_UpdateBossThought_C_ReceiveDeactivationAI, ControlledPawn) == 0x000008, "Member 'BTS_UpdateBossThought_C_ReceiveDeactivationAI::ControlledPawn' has a wrong offset!");

}

