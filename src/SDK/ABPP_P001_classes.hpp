#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABPP_P001

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "KawaiiPhysics_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABPP_P001.ABPP_P001_C
// 0x2D90 (0x3000 - 0x0270)
class UABPP_P001_C final : public UAnimInstance
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0278(0x0030)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_SubInput;                            // 0x02A8(0x0078)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0320(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0340(0x0020)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_18;                    // 0x0360(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_17;                    // 0x05B0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_16;                    // 0x0800(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_15;                    // 0x0A50(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_14;                    // 0x0CA0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_13;                    // 0x0EF0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_12;                    // 0x1140(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_11;                    // 0x1390(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_10;                    // 0x15E0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_9;                     // 0x1830(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_8;                     // 0x1A80(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_7;                     // 0x1CD0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_6;                     // 0x1F20(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_5;                     // 0x2170(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_4;                     // 0x23C0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_3;                     // 0x2610(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_2;                     // 0x2860(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics_1;                     // 0x2AB0(0x0250)()
	struct FAnimNode_KawaiiPhysics                AnimGraphNode_KawaiiPhysics;                       // 0x2D00(0x0250)()
	struct FKawaiiPhysicsSettings                 PhSettings_Skirt;                                  // 0x2F50(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         DummyBoneLength;                                   // 0x2F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Teleport_Distance_Threshold;                       // 0x2F6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Teleport_Roattion_Threshold;                       // 0x2F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Gravity;                                           // 0x2F74(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableWind;                                        // 0x2F80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F81[0x3];                                     // 0x2F81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKawaiiPhysicsSettings                 PhSettings_Hair;                                   // 0x2F84(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKawaiiPhysicsSettings                 PhSettings_Ribbon;                                 // 0x2F9C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKawaiiPhysicsSettings                 PhSettings_WaistRibbon;                            // 0x2FB4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKawaiiPhysicsSettings                 PhSettings_FrontHair;                              // 0x2FCC(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         PhysicsRate;                                       // 0x2FE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsRateBefore;                                 // 0x2FE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsRateDelta;                                  // 0x2FEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsRateChangeTime;                             // 0x2FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsRateChangeTimeCount;                        // 0x2FF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABPP_P001(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void TemporarilyChangePhysicsRate(int32 Frame, float Rate);
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABPP_P001_C">();
	}
	static class UABPP_P001_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABPP_P001_C>();
	}
};
static_assert(alignof(UABPP_P001_C) == 0x000010, "Wrong alignment on UABPP_P001_C");
static_assert(sizeof(UABPP_P001_C) == 0x003000, "Wrong size on UABPP_P001_C");
static_assert(offsetof(UABPP_P001_C, UberGraphFrame) == 0x000270, "Member 'UABPP_P001_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_Root) == 0x000278, "Member 'UABPP_P001_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_SubInput) == 0x0002A8, "Member 'UABPP_P001_C::AnimGraphNode_SubInput' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_LocalToComponentSpace) == 0x000320, "Member 'UABPP_P001_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_ComponentToLocalSpace) == 0x000340, "Member 'UABPP_P001_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_18) == 0x000360, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_18' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_17) == 0x0005B0, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_17' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_16) == 0x000800, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_16' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_15) == 0x000A50, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_15' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_14) == 0x000CA0, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_14' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_13) == 0x000EF0, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_13' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_12) == 0x001140, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_12' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_11) == 0x001390, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_11' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_10) == 0x0015E0, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_10' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_9) == 0x001830, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_9' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_8) == 0x001A80, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_8' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_7) == 0x001CD0, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_7' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_6) == 0x001F20, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_6' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_5) == 0x002170, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_5' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_4) == 0x0023C0, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_4' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_3) == 0x002610, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_3' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_2) == 0x002860, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_2' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics_1) == 0x002AB0, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics_1' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, AnimGraphNode_KawaiiPhysics) == 0x002D00, "Member 'UABPP_P001_C::AnimGraphNode_KawaiiPhysics' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhSettings_Skirt) == 0x002F50, "Member 'UABPP_P001_C::PhSettings_Skirt' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, DummyBoneLength) == 0x002F68, "Member 'UABPP_P001_C::DummyBoneLength' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, Teleport_Distance_Threshold) == 0x002F6C, "Member 'UABPP_P001_C::Teleport_Distance_Threshold' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, Teleport_Roattion_Threshold) == 0x002F70, "Member 'UABPP_P001_C::Teleport_Roattion_Threshold' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, Gravity) == 0x002F74, "Member 'UABPP_P001_C::Gravity' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, EnableWind) == 0x002F80, "Member 'UABPP_P001_C::EnableWind' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhSettings_Hair) == 0x002F84, "Member 'UABPP_P001_C::PhSettings_Hair' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhSettings_Ribbon) == 0x002F9C, "Member 'UABPP_P001_C::PhSettings_Ribbon' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhSettings_WaistRibbon) == 0x002FB4, "Member 'UABPP_P001_C::PhSettings_WaistRibbon' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhSettings_FrontHair) == 0x002FCC, "Member 'UABPP_P001_C::PhSettings_FrontHair' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhysicsRate) == 0x002FE4, "Member 'UABPP_P001_C::PhysicsRate' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhysicsRateBefore) == 0x002FE8, "Member 'UABPP_P001_C::PhysicsRateBefore' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhysicsRateDelta) == 0x002FEC, "Member 'UABPP_P001_C::PhysicsRateDelta' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhysicsRateChangeTime) == 0x002FF0, "Member 'UABPP_P001_C::PhysicsRateChangeTime' has a wrong offset!");
static_assert(offsetof(UABPP_P001_C, PhysicsRateChangeTimeCount) == 0x002FF4, "Member 'UABPP_P001_C::PhysicsRateChangeTimeCount' has a wrong offset!");

}

