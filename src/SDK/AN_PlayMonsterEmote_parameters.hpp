#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AN_PlayMonsterEmote

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AN_PlayMonsterEmote.AN_PlayMonsterEmote_C.Received_Notify
// 0x00B0 (0x00B0 - 0x0000)
struct AN_PlayMonsterEmote_C_Received_Notify final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEmoteRuntimeOption*                    CallFunc_MakeEmoteRuntimeOption_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MonsterManager_C*                   CallFunc_GetMonsterManager_MonsterManager;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AMonsterBase*>                   CallFunc_GetMonsters_ReturnValue;                  // 0x0050(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AMonsterBase*                           CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetHP_ReturnValue;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMonsterStatus_ReturnValue;             // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AN_PlayMonsterEmote_C_Received_Notify) == 0x000008, "Wrong alignment on AN_PlayMonsterEmote_C_Received_Notify");
static_assert(sizeof(AN_PlayMonsterEmote_C_Received_Notify) == 0x0000B0, "Wrong size on AN_PlayMonsterEmote_C_Received_Notify");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, MeshComp) == 0x000000, "Member 'AN_PlayMonsterEmote_C_Received_Notify::MeshComp' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, Animation) == 0x000008, "Member 'AN_PlayMonsterEmote_C_Received_Notify::Animation' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, ReturnValue) == 0x000010, "Member 'AN_PlayMonsterEmote_C_Received_Notify::ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, Temp_int_Array_Index_Variable) == 0x000014, "Member 'AN_PlayMonsterEmote_C_Received_Notify::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, K2Node_DynamicCast_AsPlayer_Character) == 0x000020, "Member 'AN_PlayMonsterEmote_C_Received_Notify::K2Node_DynamicCast_AsPlayer_Character' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AN_PlayMonsterEmote_C_Received_Notify::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'AN_PlayMonsterEmote_C_Received_Notify::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_MakeEmoteRuntimeOption_ReturnValue) == 0x000040, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_MakeEmoteRuntimeOption_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_GetMonsterManager_MonsterManager) == 0x000048, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_GetMonsterManager_MonsterManager' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_GetMonsters_ReturnValue) == 0x000050, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_GetMonsters_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_Array_Get_Item) == 0x000060, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000070, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_FindLookAtRotation_ReturnValue) == 0x00007C, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_GetHP_ReturnValue) == 0x000088, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_GetHP_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_BreakRotator_Roll) == 0x00008C, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_BreakRotator_Pitch) == 0x000090, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_BreakRotator_Yaw) == 0x000094, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000098, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_MakeRotator_ReturnValue) == 0x00009C, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000A8, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_GetMonsterStatus_ReturnValue) == 0x0000A9, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_GetMonsterStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_Not_PreBool_ReturnValue) == 0x0000AA, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_PlayMonsterEmote_C_Received_Notify, CallFunc_BooleanAND_ReturnValue) == 0x0000AB, "Member 'AN_PlayMonsterEmote_C_Received_Notify::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

