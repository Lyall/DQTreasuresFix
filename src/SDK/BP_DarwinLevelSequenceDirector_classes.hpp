#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DarwinLevelSequenceDirector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C
// 0x00A0 (0x0168 - 0x00C8)
class UBP_DarwinLevelSequenceDirector_C : public UDarwinLevelSequenceDirector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_LevelSequenceController_C*          LevelSequencePlayerComponent;                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLevelSequencePlayRangeInfo>    AnimPlayRangeInfo;                                 // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDrawTextInfo                          DrawTextInfo;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SequenceLength;                                    // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingSequencer;                                // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerGravity;                                     // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGravity;                                         // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPlaySubTitleMask;                                // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultBigStarEmissive;                            // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSmallStarReduce;                            // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSmallStarEmissive;                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EnvironmentLighting_C*              ChangeEnvironmentLighting;                         // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartFramePos;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ANPCBase*                               NPCBase;                                           // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBreakWorldTimePause;                             // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MAP_WORLD_TIME_PAUSE;                              // 0x0134(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CS_InputEventName;                                 // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CS_LastInput;                                      // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NewVar_0;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DarwinLevelSequenceDirector(int32 EntryPoint);
	void PlayRangeLoopingAndLimitTIme(const struct FLevelSequencePlayRangeInfo& LoopRange, int32 LimitFrame, int32 FirstLoopStartFrameOffset);
	void DelayAndPauseEvent(float DelayAndBlendFrame);
	void Pause();
	void ResetBindings(class ALevelSequenceActor* Target);
	void DrawTalkWindow_Old(int32 MessageStartIndex);
	void BindingPlayerCharacter(class ALevelSequenceActor* Target, const struct FMovieSceneObjectBindingID& Binding);
	void Stop(class ALevelSequenceActor* Target);
	void SetPlayRange_old(class ULevelSequencePlayer* Target, int32 PlayRangeIndex, class ULevelSequencePlayer** SequencePlayer);
	void PlayRangeLooping_Old(class ALevelSequenceActor* Target, int32 PlayRangeIndex);
	void PlayRangeNormal_Old(class ALevelSequenceActor* Target, int32 PlayRangeIndex);
	void Change_Player_Camera_to_Event_Camera(class ACineCameraActor* EventCamera, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
	void PauseMain();
	void PlayMain();
	void Play(class ALevelSequenceActor* Target);
	void InitMain(bool IsGravity_0, bool bNewActorEnableCollision, bool bIsDrawCSBlackLine, bool AllNpcVisibility);
	void FinMain(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, bool CameraKeep, bool NPCHiddenKeep, bool IsResetPlayerCamera, bool StopAllLookAt, bool RemovePlayerCollision);
	void ChangeEventCameraToPlayerCamera(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
	void InitSub();
	void FinSub();
	void CallPlaySubSequence(class ALevelSequenceActor* SubLevelSequence);
	void PlayRangeLoopingSelf_Old(int32 PlayRangeIndex);
	void SetPlayerHidden();
	void SetPlayerVisible();
	void PlayBSComponent(EAtomCompCategory CompCategory, class FName SheetName, const class FString& CueName, float FadeTime, float FadeVolume);
	void StopBSComponent(EAtomCompCategory CompCategory, float FadeTime, float FadeVolume);
	void FadeByBSComponent(EAtomCompCategory CompCategory, ESoundFadeType Type, float FadeTime, float FadeVolume, ESFadeOutEndState FOState);
	void PlaySe(class FName SheetName, const class FString& CueName);
	void PlaySeByPlayer(class FName SheetName, const class FString& CueName);
	void PlayVoice(class FName SheetName, const class FString& CueName);
	void PlayBaseEnvComp();
	void StopBgmComponent(EAtomCompCategory Category, float FadeTime);
	void FadeInByCategory(ESoundVolumeCategory VolumeCategory, float FadeTime, float FadeVolume);
	void FadeOutByCategory(ESoundVolumeCategory VolumeCategory, float FadeTime, float FadeVolume);
	void SyncEventCamera();
	void ResetPlayerCamera();
	void PlayLoopAnimation(class USkeletalMeshComponent* Meth, class UAnimSequence* PlayAnimation);
	void CalcSequenceLength(int32* Length);
	void PlayRangeLoopingSelf(const struct FLevelSequencePlayRangeInfo& NewParam);
	void SetPlayRange(class ULevelSequencePlayer* Target, const struct FLevelSequencePlayRangeInfo& LevelSequencePlayRangeInfo);
	void DrawTalkWindow(const class FString& TextID);
	void DrawTalkWindowForce(const class FString& Text);
	void DrawSubTitle(class FName TextID);
	void CloseSubTitle();
	void DrawSubTitleForce(const class FString& Text);
	void BindingPlayerCharacterbyTag(class ALevelSequenceActor* LevelSequenceActor);
	void SetPlayerCharacterVisible(bool IsVisible);
	void PlaySubTitleMaskIn(float AnimationSeconds);
	void PlaySubTitleMaskOut(float AnimationSeconds);
	void CallSet_Star_Emissive(class ABP_EnvironmentLighting_C* BP_EnviromentLighting, float BigStarEmissive, float SmallStarEmissive);
	void Call_Reset_StarEmissive(class ABP_EnvironmentLighting_C* BP_EnviromentLighting);
	void Init_Sky_with_Editor(class ABP_EnvironmentLighting_C* BP_EnvironmentLighthing);
	void SetStarEmissiveWithEditor(class ABP_EnvironmentLighting_C* BP_EnvironmentLighthing, float BigStarEmissive, float SmallStarEmissive);
	void ResetStarEmissivePalamWithEditor(class ABP_EnvironmentLighting_C* BP_EnvironmentLighthing);
	void SetCollisionAndGravity(class AGameCharacter* GameCharacter, bool CollisionEnable, bool GravityEnable);
	void PlayLoopAnimationBlend(class USkeletalMeshComponent* CharacterMesh, class UAnimSequence* Anim, int32 InBlendFrame);
	void Stop_Loop_Animation_Blend(class USkeletalMeshComponent* CharacterMesh, int32 Blend_Frame);
	void Set_Select_NPCVisibility(bool Visibility, const class FName NPCDataID);
	void BindingNPC(class ALevelSequenceActor* LevelSequence, class FName NpcID, class FName BindingTag);
	void ResetBindingNPC(class ALevelSequenceActor* LevelSequence, class FName NpcID, class FName Tag);
	void Set_Look_at_Actor_or_Flg(class USkeletalMeshComponent* SkeletalMesh, const class AActor* TargetLookAtActor, const bool IsLookStart);
	void StartLookAt(class USkeletalMeshComponent* Mesh, class AActor* TargetActor, float HeadLookAtVelocity, const struct FVector2D& HeadLookAtClamp, float SpineLookAtVeocity, const struct FVector2D& SpineLookAtClamp);
	void FinLookAt(class USkeletalMeshComponent* SkeletalMesh);
	void FinLookAtDirect(class USkeletalMeshComponent* SkeletalMeshComopnent);
	void SetLookAtParamHead(class USkeletalMeshComponent* SkeletalMesh, float AnglearVelocity, float ClampVertical, float ClampHorizontal);
	void SetLookAtParamSpine(class USkeletalMeshComponent* SkeletalMesh, float AnglearVelocity, float ClampVertical, float ClampHorizontal);
	void OpenTips(class FName OpenTipsID);
	void OpenNewItemUI(class FName ItemId);
	void DelayAndPause(float DelayFrame);
	void PlayCustomLoopAnimationStartAt(class USkeletalMeshComponent* Mesh, class UAnimSequence* PlayAnimation, int32 LoopAnimStartFrame, int32 BlendTime, class FName SlotNodeName);
	void BindingMonstersByTag(class ALevelSequenceActor* rootActor);
	void DrawTalkWindowSwitch(const class FString& IsPlayer_kamyu_TextID, const class FString& IsPlayer_maya_TextID);
	void Set_Vocalize_Sync_Draw_Text_Compare_By_Tag(class AGameCharacter* Character);
	void SetWorldTime(int32 Hour, int32 Minute, bool SkipEvent);
	void ResetWorldTimePause();
	void InputProc_CS_Skip(float DeltaTime, bool bGamePaused, const struct FKeyInput& InKeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Output);
	void GetSecondPerFrame(float* second);
	void SetPlayerCollisionEnable(class ACharacter* Player_0, bool NewCollisionEnable);
	bool IsSkipDurationd(class USequencerController* m______________);
	void FadeOutIfNotYet(const struct FLinearColor& DestColor, float Float, EFadeZOrderType ZorderType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DarwinLevelSequenceDirector_C">();
	}
	static class UBP_DarwinLevelSequenceDirector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DarwinLevelSequenceDirector_C>();
	}
};
static_assert(alignof(UBP_DarwinLevelSequenceDirector_C) == 0x000008, "Wrong alignment on UBP_DarwinLevelSequenceDirector_C");
static_assert(sizeof(UBP_DarwinLevelSequenceDirector_C) == 0x000168, "Wrong size on UBP_DarwinLevelSequenceDirector_C");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, UberGraphFrame) == 0x0000C8, "Member 'UBP_DarwinLevelSequenceDirector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, LevelSequencePlayerComponent) == 0x0000D0, "Member 'UBP_DarwinLevelSequenceDirector_C::LevelSequencePlayerComponent' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, AnimPlayRangeInfo) == 0x0000D8, "Member 'UBP_DarwinLevelSequenceDirector_C::AnimPlayRangeInfo' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, DrawTextInfo) == 0x0000E8, "Member 'UBP_DarwinLevelSequenceDirector_C::DrawTextInfo' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, SequenceLength) == 0x0000F8, "Member 'UBP_DarwinLevelSequenceDirector_C::SequenceLength' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, IsPlayingSequencer) == 0x0000FC, "Member 'UBP_DarwinLevelSequenceDirector_C::IsPlayingSequencer' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, PlayerGravity) == 0x000100, "Member 'UBP_DarwinLevelSequenceDirector_C::PlayerGravity' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, IsGravity) == 0x000104, "Member 'UBP_DarwinLevelSequenceDirector_C::IsGravity' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, IsPlaySubTitleMask) == 0x000105, "Member 'UBP_DarwinLevelSequenceDirector_C::IsPlaySubTitleMask' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, DefaultBigStarEmissive) == 0x000108, "Member 'UBP_DarwinLevelSequenceDirector_C::DefaultBigStarEmissive' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, DefaultSmallStarReduce) == 0x00010C, "Member 'UBP_DarwinLevelSequenceDirector_C::DefaultSmallStarReduce' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, DefaultSmallStarEmissive) == 0x000110, "Member 'UBP_DarwinLevelSequenceDirector_C::DefaultSmallStarEmissive' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, ChangeEnvironmentLighting) == 0x000118, "Member 'UBP_DarwinLevelSequenceDirector_C::ChangeEnvironmentLighting' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, StartFramePos) == 0x000120, "Member 'UBP_DarwinLevelSequenceDirector_C::StartFramePos' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, NPCBase) == 0x000128, "Member 'UBP_DarwinLevelSequenceDirector_C::NPCBase' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, IsBreakWorldTimePause) == 0x000130, "Member 'UBP_DarwinLevelSequenceDirector_C::IsBreakWorldTimePause' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, MAP_WORLD_TIME_PAUSE) == 0x000134, "Member 'UBP_DarwinLevelSequenceDirector_C::MAP_WORLD_TIME_PAUSE' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, CS_InputEventName) == 0x000140, "Member 'UBP_DarwinLevelSequenceDirector_C::CS_InputEventName' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, CS_LastInput) == 0x000150, "Member 'UBP_DarwinLevelSequenceDirector_C::CS_LastInput' has a wrong offset!");
static_assert(offsetof(UBP_DarwinLevelSequenceDirector_C, NewVar_0) == 0x000158, "Member 'UBP_DarwinLevelSequenceDirector_C::NewVar_0' has a wrong offset!");

}

