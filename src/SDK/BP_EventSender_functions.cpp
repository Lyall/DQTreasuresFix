#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventSender

#include "Basic.hpp"

#include "BP_EventSender_classes.hpp"
#include "BP_EventSender_parameters.hpp"


namespace SDK
{

// Function BP_EventSender.BP_EventSender_C.ExecuteUbergraph_BP_EventSender
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventSender_C::ExecuteUbergraph_BP_EventSender(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "ExecuteUbergraph_BP_EventSender");

	Params::BP_EventSender_C_ExecuteUbergraph_BP_EventSender Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.CallPlayEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EEventType                              EventType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             QuestID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EQuestState                             QuestState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_EventTalktBranchData         TextBranchData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<struct FST_TextGoto>             TextGotoData                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class AActor*                           Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventSender_C::CallPlayEvent(const class FString& EventID_0, EEventType EventType, class FName QuestID, EQuestState QuestState, const struct FST_EventTalktBranchData& TextBranchData, const TArray<struct FST_TextGoto>& TextGotoData, class AActor* Sender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "CallPlayEvent");

	Params::BP_EventSender_C_CallPlayEvent Parms{};

	Parms.EventID_0 = std::move(EventID_0);
	Parms.EventType = EventType;
	Parms.QuestID = QuestID;
	Parms.QuestState = QuestState;
	Parms.TextBranchData = std::move(TextBranchData);
	Parms.TextGotoData = std::move(TextGotoData);
	Parms.Sender = Sender;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.SendEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DebugMode                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventSender_C::SendEvent(class FName EventID_0, class UActorComponent* Sender, bool DebugMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "SendEvent");

	Params::BP_EventSender_C_SendEvent Parms{};

	Parms.EventID_0 = EventID_0;
	Parms.Sender = Sender;
	Parms.DebugMode = DebugMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.SetEventSendNpc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_NPC_C*                        SendActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventSender_C::SetEventSendNpc(class ABP_NPC_C* SendActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "SetEventSendNpc");

	Params::BP_EventSender_C_SetEventSendNpc Parms{};

	Parms.SendActor = SendActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.SendLiftEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_EventSender_C*                EventSender                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LiftId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StarScarId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventSender_C::SendLiftEvent(class UBP_EventSender_C* EventSender, int32 LiftId, class FName StarScarId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "SendLiftEvent");

	Params::BP_EventSender_C_SendLiftEvent Parms{};

	Parms.EventSender = EventSender;
	Parms.LiftId = LiftId;
	Parms.StarScarId = StarScarId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_EventSender_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSender.BP_EventSender_C.CallForceMoveEvent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CallEventID                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MovePostion                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveTime_0                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventSender_C::CallForceMoveEvent(const class FName& CallEventID, const struct FVector& MovePostion, const float& MoveTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "CallForceMoveEvent");

	Params::BP_EventSender_C_CallForceMoveEvent Parms{};

	Parms.CallEventID = CallEventID;
	Parms.MovePostion = std::move(MovePostion);
	Parms.MoveTime_0 = MoveTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.CallLiftEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LiftId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StarScarId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventSender_C::CallLiftEvent(int32 LiftId, class FName StarScarId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "CallLiftEvent");

	Params::BP_EventSender_C_CallLiftEvent Parms{};

	Parms.LiftId = LiftId;
	Parms.StarScarId = StarScarId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.CallSendEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_EventSender_C::CallSendEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "CallSendEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSender.BP_EventSender_C.CallEndOverlapEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_EventSender_C::CallEndOverlapEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "CallEndOverlapEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSender.BP_EventSender_C.EndOverlapEventTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventSender_C::EndOverlapEventTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "EndOverlapEventTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSender.BP_EventSender_C.EndPlayEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEventCancel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventSender_C::EndPlayEvent(bool IsEventCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "EndPlayEvent");

	Params::BP_EventSender_C_EndPlayEvent Parms{};

	Parms.IsEventCancel = IsEventCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.OpenFieldIconAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputGuideType                         ActionType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EventSender_C::OpenFieldIconAction(EInputGuideType ActionType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "OpenFieldIconAction");

	Params::BP_EventSender_C_OpenFieldIconAction Parms{};

	Parms.ActionType_0 = ActionType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.CloseFieldIconAction
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EventSender_C::CloseFieldIconAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "CloseFieldIconAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventSender.BP_EventSender_C.CanSendEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    return_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventSender_C::CanSendEvent(bool* return_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "CanSendEvent");

	Params::BP_EventSender_C_CanSendEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (return_0 != nullptr)
		*return_0 = Parms.return_0;
}


// Function BP_EventSender.BP_EventSender_C.GetEventPlayFlag
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventSender_C::GetEventPlayFlag(bool* IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "GetEventPlayFlag");

	Params::BP_EventSender_C_GetEventPlayFlag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlay != nullptr)
		*IsPlay = Parms.IsPlay;
}


// Function BP_EventSender.BP_EventSender_C.SetEventPlayFlag
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EventSender_C::SetEventPlayFlag(bool IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "SetEventPlayFlag");

	Params::BP_EventSender_C_SetEventPlayFlag Parms{};

	Parms.IsPlay = IsPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventSender.BP_EventSender_C.Can Forced Battle Event
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_EventSender_C::Can_Forced_Battle_Event() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventSender_C", "Can Forced Battle Event");

	Params::BP_EventSender_C_Can_Forced_Battle_Event Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

