#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WorldTimeManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_WorldTimeManager.BP_WorldTimeManager_C.ExecuteUbergraph_BP_WorldTimeManager
// 0x0018 (0x0018 - 0x0000)
struct BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetTime_ReturnValue;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHours_ReturnValue;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager) == 0x000008, "Wrong alignment on BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager");
static_assert(sizeof(BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager) == 0x000018, "Wrong size on BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager");
static_assert(offsetof(BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager, EntryPoint) == 0x000000, "Member 'BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager, CallFunc_GetTime_ReturnValue) == 0x000008, "Member 'BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager::CallFunc_GetTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager, CallFunc_GetHours_ReturnValue) == 0x000010, "Member 'BP_WorldTimeManager_C_ExecuteUbergraph_BP_WorldTimeManager::CallFunc_GetHours_ReturnValue' has a wrong offset!");

// Function BP_WorldTimeManager.BP_WorldTimeManager_C.GetCurrentTime
// 0x0008 (0x0008 - 0x0000)
struct BP_WorldTimeManager_C_GetCurrentTime final
{
public:
	struct FTimespan                              CurrentTime;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldTimeManager_C_GetCurrentTime) == 0x000008, "Wrong alignment on BP_WorldTimeManager_C_GetCurrentTime");
static_assert(sizeof(BP_WorldTimeManager_C_GetCurrentTime) == 0x000008, "Wrong size on BP_WorldTimeManager_C_GetCurrentTime");
static_assert(offsetof(BP_WorldTimeManager_C_GetCurrentTime, CurrentTime) == 0x000000, "Member 'BP_WorldTimeManager_C_GetCurrentTime::CurrentTime' has a wrong offset!");

// Function BP_WorldTimeManager.BP_WorldTimeManager_C.GetOneDayMinute
// 0x0004 (0x0004 - 0x0000)
struct BP_WorldTimeManager_C_GetOneDayMinute final
{
public:
	int32                                         NewParam;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldTimeManager_C_GetOneDayMinute) == 0x000004, "Wrong alignment on BP_WorldTimeManager_C_GetOneDayMinute");
static_assert(sizeof(BP_WorldTimeManager_C_GetOneDayMinute) == 0x000004, "Wrong size on BP_WorldTimeManager_C_GetOneDayMinute");
static_assert(offsetof(BP_WorldTimeManager_C_GetOneDayMinute, NewParam) == 0x000000, "Member 'BP_WorldTimeManager_C_GetOneDayMinute::NewParam' has a wrong offset!");

// Function BP_WorldTimeManager.BP_WorldTimeManager_C.GetGameTime
// 0x0018 (0x0018 - 0x0000)
struct BP_WorldTimeManager_C_GetGameTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minute;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_GetTime_ReturnValue;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHours_ReturnValue;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMinutes_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldTimeManager_C_GetGameTime) == 0x000008, "Wrong alignment on BP_WorldTimeManager_C_GetGameTime");
static_assert(sizeof(BP_WorldTimeManager_C_GetGameTime) == 0x000018, "Wrong size on BP_WorldTimeManager_C_GetGameTime");
static_assert(offsetof(BP_WorldTimeManager_C_GetGameTime, Hour) == 0x000000, "Member 'BP_WorldTimeManager_C_GetGameTime::Hour' has a wrong offset!");
static_assert(offsetof(BP_WorldTimeManager_C_GetGameTime, Minute) == 0x000004, "Member 'BP_WorldTimeManager_C_GetGameTime::Minute' has a wrong offset!");
static_assert(offsetof(BP_WorldTimeManager_C_GetGameTime, CallFunc_GetTime_ReturnValue) == 0x000008, "Member 'BP_WorldTimeManager_C_GetGameTime::CallFunc_GetTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldTimeManager_C_GetGameTime, CallFunc_GetHours_ReturnValue) == 0x000010, "Member 'BP_WorldTimeManager_C_GetGameTime::CallFunc_GetHours_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldTimeManager_C_GetGameTime, CallFunc_GetMinutes_ReturnValue) == 0x000014, "Member 'BP_WorldTimeManager_C_GetGameTime::CallFunc_GetMinutes_ReturnValue' has a wrong offset!");

}

