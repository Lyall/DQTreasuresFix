#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPC.BP_NPC_C
// 0x02C0 (0x12F0 - 0x1030)
class ABP_NPC_C final : public ANPCBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      TalkEndCollisionCapsule;                           // 0x1038(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      FootCapsule;                                       // 0x1040(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LookAtCollision;                                   // 0x1048(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       FukidashiDrawCollision;                            // 0x1050(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x1058(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x1060(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      MoveCollisionCapsule;                              // 0x1068(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         m______4_TurnProgress_3603A6A0459137095F1F738B4197CB50; // 0x1070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            m______4__Direction_3603A6A0459137095F1F738B4197CB50; // 0x1074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1075[0x3];                                     // 0x1075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     m__________________4;                              // 0x1078(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         m______0_TurnProgress_7320AD854813D26865148C82D8091E6A; // 0x1080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            m______0__Direction_7320AD854813D26865148C82D8091E6A; // 0x1084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1085[0x3];                                     // 0x1085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     m__________________0;                              // 0x1088(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayAgainCS;                                     // 0x1090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EQuestState                                   tempQuestState;                                    // 0x1091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1092[0x6];                                     // 0x1092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Column;                                            // 0x1098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CSVStrimingBuffer;                                 // 0x10A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsExist;                                           // 0x10B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B9[0x7];                                     // 0x10B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UChildActorComponent*> AttachObjectList;                                  // 0x10C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsTurn;                                            // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1111[0x7];                                     // 0x1111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TargetDataTable;                                   // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CSVRowData;                                        // 0x1120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CSVHeader;                                         // 0x1130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsExit;                                            // 0x1140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1141[0x7];                                     // 0x1141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DT_Appearrance;                                    // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_NPCData;                                        // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_NPCAppearance                      NPCAppearance;                                     // 0x1158(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         NewRadious;                                        // 0x1220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SourceCsvFilePath;                                 // 0x1224(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CapsuleOffset;                                     // 0x122C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NPCAppearanceID;                                   // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENPCAiType                                    TempNPCAiType;                                     // 0x1240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1241[0x7];                                     // 0x1241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         WalkStopActors;                                    // 0x1248(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         CapsuleOffsetZ;                                    // 0x1258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleOffsetX;                                    // 0x125C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_NPCSplineNaviPoint_C*               SplineNaviPoint;                                   // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          NPCLooking;                                        // 0x1268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1269[0x3];                                     // 0x1269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ParticleScale;                                     // 0x126C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENPCPopState                                  TempPopState;                                      // 0x1278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1279[0x3];                                     // 0x1279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFukidashiStringLength;                          // 0x127C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TalkEndTurnTImerHandle;                            // 0x1280(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<ENPCAiType, TSoftClassPtr<class UClass>> NPCDummyABP;                                       // 0x1288(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EQuestState                                   QuestStateStart;                                   // 0x12D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D9[0x3];                                     // 0x12D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeedToPlayer;                                 // 0x12DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   TurnFunctionToPlayer;                              // 0x12E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E1[0x3];                                     // 0x12E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnBlendExpToPlayer;                              // 0x12E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurnStepToPlayer;                                  // 0x12E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnRotationLimit;                                 // 0x12EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NPC(int32 EntryPoint);
	void SetTalkStartState();
	void SetTalkEndState();
	void BndEvt__TalkEndCollision_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void TalkEndTurn();
	void EndOverlapEventTrigger();
	void BndEvt__LookAtCollision_K2Node_ComponentBoundEvent_8_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__LookAtCollision_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void SetFukidashiDrawCollisonRadious(const float Radious);
	void CallPlayEvent(const class FString& EventID, EEventType EventType_0, class FName QuestID, EQuestState QuestState_0, const struct FST_EventTalktBranchData& TextBranchData, const TArray<struct FST_TextGoto>& TextGotoData, class AActor* Sender);
	void BndEvt__FukidashiDrawCollision_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__FukidashiDrawCollision_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SendEvent(class FName EventID, class UActorComponent* Sender, bool DebugMode);
	void SetEventSendNpc(class ABP_NPC_C* SendActor);
	void ResetTalkState();
	void EnableMoveCapsule();
	void SendLiftEvent(class UBP_EventSender_C* EventSender, int32 LiftId, class FName StarScarId);
	void DisableMoveCapsule();
	void OpenFukidashi(EFukidashiEnum FukidashiType_0, const class FString& CharacterName, const class FString& FukidashiText, const bool VisibleIcon, const bool AutoClose, const class FName TalkeID);
	void OnReceiveHit(EObjectEffectionEnum Type, class AActor* Instigator_0);
	void NPCOpenFukidasiUI(const bool IconVisibility);
	void NPCResumeMovement();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BndEvt__MoveCollisionCapsule_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__MoveCollisionCapsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SetAppearance();
	void ReceiveTick(float DeltaSeconds);
	void CloseFukidashi();
	void GenerateAttachObjects();
	void AttachWeapon(const class FString& ObjectName, class FName SocketName);
	void EndPlayEvent(bool IsEventCancel);
	void ReceiveBeginPlay();
	void CloseEmoteEffect();
	void CloseStamp();
	void CloseNearUI();
	void OpenNearUI();
	void CloseFukidashiWithoutStamp();
	void OpenEmoteEffect(const EEmotionEffectID EmoteEffectID);
	void OpenStamp(EStampIconType StampType);
	void CloseIcon();
	void OpenIcon(EBalloonIconType IconType, const struct FVector& Offset);
	void m__________________0__UpdateFunc();
	void m__________________0__FinishedFunc();
	void m__________________4__UpdateFunc();
	void m__________________4__FinishedFunc();
	void UserConstructionScript();
	void SetMeshAndMaterials(bool IsConstructionScript);
	void SetEventData();
	void Look_at_Player(float InterpSpeed);
	void UpdateEventData();
	void OpenQuestIcon(EBalloonIconType Type);
	void CloseQuestIcon();
	bool IsTalkNPC();
	void OpenFukidasiUI(bool IconVisibility);
	void CloseFukidashiUI();
	void EntryDataTable();
	void SetLookAtCollision();
	void Is_Use_Talk_End_Turn(bool* UseEndTurn);
	void SetTurnAnim(const struct FRotator& Current, const struct FRotator& Target);
	bool HitFukidashiCollision();
	void Call_Talk_Look_At_Player();
	void GetAppearanceData(const class FName& NpcID_0, bool* Result, struct FST_NPCAppearance* DataInfo);
	void DebugStatePrint(const class FString& Str);
	void DebugDrawSpawnLocation();
	class FString Get_Fukidashi_Text();
	struct FVector GetNPCFukisahiOffset();
	void TalkEndTurnFunction();
	void ProcTurn(const struct FRotator& CurrentRotate, const struct FRotator& TargetRotate, bool* IsSetRotation);
	struct FRotator GetEaseTurnRotation(const struct FRotator& Current, const struct FRotator& Target, float Speed);
	void SetUIHideByObject(class UUI3DBase* ThreeDUi, bool isForceEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPC_C">();
	}
	static class ABP_NPC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPC_C>();
	}
};
static_assert(alignof(ABP_NPC_C) == 0x000010, "Wrong alignment on ABP_NPC_C");
static_assert(sizeof(ABP_NPC_C) == 0x0012F0, "Wrong size on ABP_NPC_C");
static_assert(offsetof(ABP_NPC_C, UberGraphFrame) == 0x001030, "Member 'ABP_NPC_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TalkEndCollisionCapsule) == 0x001038, "Member 'ABP_NPC_C::TalkEndCollisionCapsule' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, FootCapsule) == 0x001040, "Member 'ABP_NPC_C::FootCapsule' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, LookAtCollision) == 0x001048, "Member 'ABP_NPC_C::LookAtCollision' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, FukidashiDrawCollision) == 0x001050, "Member 'ABP_NPC_C::FukidashiDrawCollision' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TextRender) == 0x001058, "Member 'ABP_NPC_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, Spline) == 0x001060, "Member 'ABP_NPC_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, MoveCollisionCapsule) == 0x001068, "Member 'ABP_NPC_C::MoveCollisionCapsule' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, m______4_TurnProgress_3603A6A0459137095F1F738B4197CB50) == 0x001070, "Member 'ABP_NPC_C::m______4_TurnProgress_3603A6A0459137095F1F738B4197CB50' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, m______4__Direction_3603A6A0459137095F1F738B4197CB50) == 0x001074, "Member 'ABP_NPC_C::m______4__Direction_3603A6A0459137095F1F738B4197CB50' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, m__________________4) == 0x001078, "Member 'ABP_NPC_C::m__________________4' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, m______0_TurnProgress_7320AD854813D26865148C82D8091E6A) == 0x001080, "Member 'ABP_NPC_C::m______0_TurnProgress_7320AD854813D26865148C82D8091E6A' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, m______0__Direction_7320AD854813D26865148C82D8091E6A) == 0x001084, "Member 'ABP_NPC_C::m______0__Direction_7320AD854813D26865148C82D8091E6A' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, m__________________0) == 0x001088, "Member 'ABP_NPC_C::m__________________0' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, IsPlayAgainCS) == 0x001090, "Member 'ABP_NPC_C::IsPlayAgainCS' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, tempQuestState) == 0x001091, "Member 'ABP_NPC_C::tempQuestState' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, Column) == 0x001098, "Member 'ABP_NPC_C::Column' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, CSVStrimingBuffer) == 0x0010A8, "Member 'ABP_NPC_C::CSVStrimingBuffer' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, IsExist) == 0x0010B8, "Member 'ABP_NPC_C::IsExist' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, AttachObjectList) == 0x0010C0, "Member 'ABP_NPC_C::AttachObjectList' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, IsTurn) == 0x001110, "Member 'ABP_NPC_C::IsTurn' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TargetDataTable) == 0x001118, "Member 'ABP_NPC_C::TargetDataTable' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, CSVRowData) == 0x001120, "Member 'ABP_NPC_C::CSVRowData' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, CSVHeader) == 0x001130, "Member 'ABP_NPC_C::CSVHeader' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, IsExit) == 0x001140, "Member 'ABP_NPC_C::IsExit' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, DT_Appearrance) == 0x001148, "Member 'ABP_NPC_C::DT_Appearrance' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, DT_NPCData) == 0x001150, "Member 'ABP_NPC_C::DT_NPCData' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, NPCAppearance) == 0x001158, "Member 'ABP_NPC_C::NPCAppearance' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, NewRadious) == 0x001220, "Member 'ABP_NPC_C::NewRadious' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, SourceCsvFilePath) == 0x001224, "Member 'ABP_NPC_C::SourceCsvFilePath' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, CapsuleOffset) == 0x00122C, "Member 'ABP_NPC_C::CapsuleOffset' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, NPCAppearanceID) == 0x001238, "Member 'ABP_NPC_C::NPCAppearanceID' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TempNPCAiType) == 0x001240, "Member 'ABP_NPC_C::TempNPCAiType' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, WalkStopActors) == 0x001248, "Member 'ABP_NPC_C::WalkStopActors' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, CapsuleOffsetZ) == 0x001258, "Member 'ABP_NPC_C::CapsuleOffsetZ' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, CapsuleOffsetX) == 0x00125C, "Member 'ABP_NPC_C::CapsuleOffsetX' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, SplineNaviPoint) == 0x001260, "Member 'ABP_NPC_C::SplineNaviPoint' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, NPCLooking) == 0x001268, "Member 'ABP_NPC_C::NPCLooking' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, ParticleScale) == 0x00126C, "Member 'ABP_NPC_C::ParticleScale' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TempPopState) == 0x001278, "Member 'ABP_NPC_C::TempPopState' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, MaxFukidashiStringLength) == 0x00127C, "Member 'ABP_NPC_C::MaxFukidashiStringLength' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TalkEndTurnTImerHandle) == 0x001280, "Member 'ABP_NPC_C::TalkEndTurnTImerHandle' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, NPCDummyABP) == 0x001288, "Member 'ABP_NPC_C::NPCDummyABP' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, QuestStateStart) == 0x0012D8, "Member 'ABP_NPC_C::QuestStateStart' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TurnSpeedToPlayer) == 0x0012DC, "Member 'ABP_NPC_C::TurnSpeedToPlayer' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TurnFunctionToPlayer) == 0x0012E0, "Member 'ABP_NPC_C::TurnFunctionToPlayer' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TurnBlendExpToPlayer) == 0x0012E4, "Member 'ABP_NPC_C::TurnBlendExpToPlayer' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TurnStepToPlayer) == 0x0012E8, "Member 'ABP_NPC_C::TurnStepToPlayer' has a wrong offset!");
static_assert(offsetof(ABP_NPC_C, TurnRotationLimit) == 0x0012EC, "Member 'ABP_NPC_C::TurnRotationLimit' has a wrong offset!");

}

