#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCSplineNaviPoint

#include "Basic.hpp"

#include "BP_NPCSplineNaviPoint_classes.hpp"
#include "BP_NPCSplineNaviPoint_parameters.hpp"


namespace SDK
{

// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.ExecuteUbergraph_BP_NPCSplineNaviPoint
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPCSplineNaviPoint_C::ExecuteUbergraph_BP_NPCSplineNaviPoint(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "ExecuteUbergraph_BP_NPCSplineNaviPoint");

	Params::BP_NPCSplineNaviPoint_C_ExecuteUbergraph_BP_NPCSplineNaviPoint Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_NPCSplineNaviPoint_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPCSplineNaviPoint_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "ReceiveTick");

	Params::BP_NPCSplineNaviPoint_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NPCSplineNaviPoint_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.Get Current Location and RotationLocal
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NPCSplineNaviPoint_C::Get_Current_Location_and_RotationLocal(float Length, bool Loop, struct FVector* Location, struct FVector* Direction, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "Get Current Location and RotationLocal");

	Params::BP_NPCSplineNaviPoint_C_Get_Current_Location_and_RotationLocal Parms{};

	Parms.Length = Length;
	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.GetSplineLength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPCSplineNaviPoint_C::GetSplineLength(float* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "GetSplineLength");

	Params::BP_NPCSplineNaviPoint_C_GetSplineLength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.IsArrived
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsArrived_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NPCSplineNaviPoint_C::IsArrived(float Length, bool* IsArrived_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "IsArrived");

	Params::BP_NPCSplineNaviPoint_C_IsArrived Parms{};

	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);

	if (IsArrived_0 != nullptr)
		*IsArrived_0 = Parms.IsArrived_0;
}


// Function BP_NPCSplineNaviPoint.BP_NPCSplineNaviPoint_C.ConvertToCSVString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             KeyName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotate                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RangeValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutRangeValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Acceleration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENPCAiMovedState                        MoveState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             EndFlagName_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TalkEvent_ID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EmoteID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Fukidashi_ID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CSVRowString                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_NPCSplineNaviPoint_C::ConvertToCSVString(class FName KeyName, const struct FVector& Vector, const struct FRotator& Rotate, float RangeValue, float OutRangeValue, class FName Start, float Speed_, float Acceleration, ENPCAiMovedState MoveState, class FName EndFlagName_, class FName TalkEvent_ID, int32 EmoteID, class FName Fukidashi_ID, class FString* CSVRowString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCSplineNaviPoint_C", "ConvertToCSVString");

	Params::BP_NPCSplineNaviPoint_C_ConvertToCSVString Parms{};

	Parms.KeyName = KeyName;
	Parms.Vector = std::move(Vector);
	Parms.Rotate = std::move(Rotate);
	Parms.RangeValue = RangeValue;
	Parms.OutRangeValue = OutRangeValue;
	Parms.Start = Start;
	Parms.Speed_ = Speed_;
	Parms.Acceleration = Acceleration;
	Parms.MoveState = MoveState;
	Parms.EndFlagName_ = EndFlagName_;
	Parms.TalkEvent_ID = TalkEvent_ID;
	Parms.EmoteID = EmoteID;
	Parms.Fukidashi_ID = Fukidashi_ID;

	UObject::ProcessEvent(Func, &Parms);

	if (CSVRowString != nullptr)
		*CSVRowString = std::move(Parms.CSVRowString);
}

}

