#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Player

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Player.BP_Player_C
// 0x00E0 (0x0E80 - 0x0DA0)
class ABP_Player_C final : public APlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0DA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAtomListenerFocusPoint*                AtomListenerFocusPoint;                            // 0x0DA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0DB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamageElementCapsuleComponent*         DC_Center;                                         // 0x0DB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FastTravelComponent_C*              BP_FastTravelComponent;                            // 0x0DC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCamera_C*                     Ref_Camera;                                        // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength_m_;                                    // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinAlphaDistance_cm_;                              // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAlpha;                                          // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReadyToShot;                                      // 0x0DDC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DDD[0x3];                                      // 0x0DDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGPACharacter*                          DamageInstigator;                                  // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            BattleModeEffectHandle;                            // 0x0DE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BattleTimer;                                       // 0x0DF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class AEffectBase*>         Trail;                                             // 0x0DF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DamageType;                                        // 0x0E48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            TestHandle;                                        // 0x0E4C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DebugDirection;                                    // 0x0E54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            RigidTimeEffctHandle;                              // 0x0E58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RigidTimer;                                        // 0x0E60(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   UniqueName;                                        // 0x0E68(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_Player(int32 EntryPoint);
	void Talk(class AActor* Partner, bool IsCameraEnabled, bool IsEnd);
	void ChangeOpeMode(EOperationModeEnum Mode);
	void FastTravel(const int32 ID);
	void ResetRotation(const struct FRotator& NewRotation);
	void SwitchToCutSceneMode(bool IsEnd);
	void Aim(bool End);
	void ShowTransformInfoForDebug(bool IsShow);
	void ReadyToShot(bool Complete);
	void OnReceiveHit(EObjectEffectionEnum Type, class AActor* Instigator_0);
	void ReceiveBeginPlay();
	void EndRigidTime();
	void StartRigidTime();
	void ReceiveTick(float DeltaSeconds);
	void Launch(const struct FVector& Velocity);
	void Restart(const struct FVector& Location, const struct FRotator& Rotation);
	void SwitchToBattleMode(bool IsEnd, bool SkipMotion);
	void DebugPrint();
	void BackToIdle();
	void StartBattleTimer();
	void InpActEvt_Three_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_RightAlt_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InitializeTarget();
	void ShowRestartMessage();
	class FName GetOriginID();
	void ChangeCameraState(const struct FGameplayTag& NextState);
	class ADarwinCamera* GetDarwinCamera();

	class AActor* GetTargetToInteract() const;
	bool IsReadyToShot() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Player_C">();
	}
	static class ABP_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Player_C>();
	}
};
static_assert(alignof(ABP_Player_C) == 0x000010, "Wrong alignment on ABP_Player_C");
static_assert(sizeof(ABP_Player_C) == 0x000E80, "Wrong size on ABP_Player_C");
static_assert(offsetof(ABP_Player_C, UberGraphFrame) == 0x000DA0, "Member 'ABP_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, AtomListenerFocusPoint) == 0x000DA8, "Member 'ABP_Player_C::AtomListenerFocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, SceneCaptureComponent2D) == 0x000DB0, "Member 'ABP_Player_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DC_Center) == 0x000DB8, "Member 'ABP_Player_C::DC_Center' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BP_FastTravelComponent) == 0x000DC0, "Member 'ABP_Player_C::BP_FastTravelComponent' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Ref_Camera) == 0x000DC8, "Member 'ABP_Player_C::Ref_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, TraceLength_m_) == 0x000DD0, "Member 'ABP_Player_C::TraceLength_m_' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MinAlphaDistance_cm_) == 0x000DD4, "Member 'ABP_Player_C::MinAlphaDistance_cm_' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, MaxAlpha) == 0x000DD8, "Member 'ABP_Player_C::MaxAlpha' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, bReadyToShot) == 0x000DDC, "Member 'ABP_Player_C::bReadyToShot' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DamageInstigator) == 0x000DE0, "Member 'ABP_Player_C::DamageInstigator' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BattleModeEffectHandle) == 0x000DE8, "Member 'ABP_Player_C::BattleModeEffectHandle' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, BattleTimer) == 0x000DF0, "Member 'ABP_Player_C::BattleTimer' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, Trail) == 0x000DF8, "Member 'ABP_Player_C::Trail' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DamageType) == 0x000E48, "Member 'ABP_Player_C::DamageType' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, TestHandle) == 0x000E4C, "Member 'ABP_Player_C::TestHandle' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, DebugDirection) == 0x000E54, "Member 'ABP_Player_C::DebugDirection' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, RigidTimeEffctHandle) == 0x000E58, "Member 'ABP_Player_C::RigidTimeEffctHandle' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, RigidTimer) == 0x000E60, "Member 'ABP_Player_C::RigidTimer' has a wrong offset!");
static_assert(offsetof(ABP_Player_C, UniqueName) == 0x000E68, "Member 'ABP_Player_C::UniqueName' has a wrong offset!");

}

