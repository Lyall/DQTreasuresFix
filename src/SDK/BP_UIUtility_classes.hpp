#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UIUtility

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DarwinGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UIUtility.BP_UIUtility_C
// 0x0000 (0x0030 - 0x0030)
class UBP_UIUtility_C final : public UBlueprintFunctionLibrary
{
public:
	static void OpenCoinName(class AActor* TargetActor, const struct FST_CoinParam& CoinParam, class UObject* m_WorldContext, class UW_Sign_IconItemname_C** Widget, int32* Index_0);
	static void ChangeDestinationLocation(class UObject* m_WorldContext);
	static void PlayOneShotExpTargetLocation(const struct FVector& Target, int32 ExpValue, class UObject* m_WorldContext);
	static void FadeOutScreenKeepAlpha(const struct FLinearColor& DestColor, float Time, EFadeZOrderType ZorderType, class UObject* m_WorldContext);
	static void FadeOutScreen(const struct FLinearColor& DestColor, float Float, EFadeZOrderType ZorderType, class UObject* m_WorldContext);
	static void GetFade(class UObject* m_WorldContext, class UW_Fade_C** OutWidget);
	static void FadeInScreen(float Time, class UObject* m_WorldContext);
	static void GetSlingShotReticle(class UObject* m_WorldContext, class UW_Shot_IconReticle_C** OutWidget);
	static void GetSlingShotSelect(class UObject* m_WorldContext, class UW_Shot_WinStatus_C** OutWidget);
	static void GetPartyPlayerParam(class UObject* m_WorldContext, class FText* NickName, float* HP, float* MaxHP, int32* Lv, int32* Exp, int32* NextLevelExp, float* NextLevelPercent, int32* Attack, int32* Defence, int32* Agility, int32* AttackMagic, int32* RecoverMagic);
	static void SwapPartyMonster(int32 PartyIndex1, int32 PartyIndex2, class UObject* m_WorldContext);
	static void GetPlayerSimpleParam(class UObject* m_WorldContext, class FText* NickName, float* HP, float* MaxHP, int32* Lv, int32* Exp, int32* NextLevelExp, float* NextLevelPercent);
	static void PlayOneShotIconMiss(class AActor* TargetActor, class UObject* m_WorldContext, class UW_Sign_IconMiss_C** OutWidget, int32* Index_0);
	static void PlayOneShotFieldIconLvUp(class AActor* TargetActor, bool IsComboUp, class UObject* m_WorldContext);
	static void PlayOneShotFieldIconExp(class AActor* TargetActor, int32 ExpValue, class UObject* m_WorldContext);
	static void ReplaceItemIconBrush(class UImage* Image, class FName ItemId, class UObject* m_WorldContext);
	static void CloseItemName(int32 Index_0, class UObject* m_WorldContext);
	static void OpenItemname(class AActor* TargetActor, class FName ItemId, class UObject* m_WorldContext, class UW_Sign_IconItemname_C** Widget, int32* Index_0);
	static void OpenUnusedHealStatus(class AActor* TargetActor, float Value, class UObject* m_WorldContext, class UW_Sign_IconHeal_C** Widget, int32* Index_0);
	static void GetUnusedHealStatus(class UObject* m_WorldContext, class UW_Sign_IconHeal_C** Widget, int32* Index_0);
	static void Close_Map_Destination(int32 Index_0, class UObject* m_WorldContext);
	static void Open_Map_Unused_Destination(const struct FVector& Location, class UObject* m_WorldContext);
	static void ReplaceMonsterIconMat(class UImage* Image, class FName MonstreID, class UObject* m_WorldContext);
	static void GetFieldIconQuestLine(class UObject* m_WorldContext, class UW_Field_IconQuestLine_C** Result);
	static void GetMonsterLink(class UObject* m_WorldContext, class UW_Field_IconLink_C** OutWidget);
	static void GetFieldQuestWindow(class UObject* m_WorldContext, class UUIField_WinQuest** OutWidget);
	static void GetUnusedFieldIconQuest(class UObject* m_WorldContext, class UW_Sign_IconQuest_C** Result, int32* Index_0);
	static void GetFieldIconQuest(int32 Index_0, class UObject* m_WorldContext, class UW_Sign_IconQuest_C** Result);
	static void GetFieldIconAction(class UObject* m_WorldContext, class UW_Field_WinAction_C** Result);
	static void GetFieldLogWindow(class UObject* m_WorldContext, class UUIField_WinLogbox** OutWidget);
	static void GetFieldNaviMap(class UObject* m_WorldContext, class UW_Map_WinStatus_C** Result);
	static void GetMainMenu(class UObject* m_WorldContext, class UDarwinUserWidget** Result);
	static void GetChoiceWindow(class UObject* m_WorldContext, class UW_Talk_WinChoice_C** NewParam);
	static void GetFieldFriendStatus(int32 Index_0, class UObject* m_WorldContext, class UUIField_WinFStatus** Result);
	static void GetFieldPlayerStatus(class UObject* m_WorldContext, class UW_Field_WinPStatus_C** Result);
	static void GetFieldStatus(class UObject* m_WorldContext, class UW_Field_Status_C** Result);
	static void GetTalkWindow(class UObject* m_WorldContext, class UW_Talk_WinStatus_C** Result);
	static void GetBPUIManager(class UObject* m_WorldContext, class UBP_UIManager_C** Result);

	static void CalculateLeftTopPositionOfCanvasSlot(class UCanvasPanelSlot* Slot, class UObject* m_WorldContext, struct FVector2D* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UIUtility_C">();
	}
	static class UBP_UIUtility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UIUtility_C>();
	}
};
static_assert(alignof(UBP_UIUtility_C) == 0x000008, "Wrong alignment on UBP_UIUtility_C");
static_assert(sizeof(UBP_UIUtility_C) == 0x000030, "Wrong size on UBP_UIUtility_C");

}

