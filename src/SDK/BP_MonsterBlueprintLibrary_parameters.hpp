#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MonsterBlueprintLibrary

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"


namespace SDK::Params
{

// Function BP_MonsterBlueprintLibrary.BP_MonsterBlueprintLibrary_C.Add_Monster_List
// 0x0028 (0x0028 - 0x0000)
struct BP_MonsterBlueprintLibrary_C_Add_Monster_List final
{
public:
	class AMonster*                               Monster;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                m_WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MonsterManager_C*                   CallFunc_GetMonsterManager_MonsterManager;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MonsterBlueprintLibrary_C_Add_Monster_List) == 0x000008, "Wrong alignment on BP_MonsterBlueprintLibrary_C_Add_Monster_List");
static_assert(sizeof(BP_MonsterBlueprintLibrary_C_Add_Monster_List) == 0x000028, "Wrong size on BP_MonsterBlueprintLibrary_C_Add_Monster_List");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_Add_Monster_List, Monster) == 0x000000, "Member 'BP_MonsterBlueprintLibrary_C_Add_Monster_List::Monster' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_Add_Monster_List, m_WorldContext) == 0x000008, "Member 'BP_MonsterBlueprintLibrary_C_Add_Monster_List::m_WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_Add_Monster_List, CallFunc_GetBlackboard_ReturnValue) == 0x000010, "Member 'BP_MonsterBlueprintLibrary_C_Add_Monster_List::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_Add_Monster_List, CallFunc_GetMonsterManager_MonsterManager) == 0x000018, "Member 'BP_MonsterBlueprintLibrary_C_Add_Monster_List::CallFunc_GetMonsterManager_MonsterManager' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_Add_Monster_List, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_MonsterBlueprintLibrary_C_Add_Monster_List::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_Add_Monster_List, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_MonsterBlueprintLibrary_C_Add_Monster_List::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MonsterBlueprintLibrary.BP_MonsterBlueprintLibrary_C.GetFriendMonster
// 0x0030 (0x0030 - 0x0000)
struct BP_MonsterBlueprintLibrary_C_GetFriendMonster final
{
public:
	int32                                         partyIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                m_WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          PartyMonster;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AGPACharacter*>                  CallFunc_GetFriendMonsterList_EnemyList;           // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AGPACharacter*                          CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MonsterBlueprintLibrary_C_GetFriendMonster) == 0x000008, "Wrong alignment on BP_MonsterBlueprintLibrary_C_GetFriendMonster");
static_assert(sizeof(BP_MonsterBlueprintLibrary_C_GetFriendMonster) == 0x000030, "Wrong size on BP_MonsterBlueprintLibrary_C_GetFriendMonster");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonster, partyIndex) == 0x000000, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonster::partyIndex' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonster, m_WorldContext) == 0x000008, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonster::m_WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonster, PartyMonster) == 0x000010, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonster::PartyMonster' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonster, CallFunc_GetFriendMonsterList_EnemyList) == 0x000018, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonster::CallFunc_GetFriendMonsterList_EnemyList' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonster, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonster::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_MonsterBlueprintLibrary.BP_MonsterBlueprintLibrary_C.GetMonsterManager
// 0x0028 (0x0028 - 0x0000)
struct BP_MonsterBlueprintLibrary_C_GetMonsterManager final
{
public:
	class UObject*                                m_WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MonsterManager_C*                   MonsterManager;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMonsterManager*                        CallFunc_GetInstance_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MonsterManager_C*                   K2Node_DynamicCast_AsBP_Monster_Manager;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MonsterBlueprintLibrary_C_GetMonsterManager) == 0x000008, "Wrong alignment on BP_MonsterBlueprintLibrary_C_GetMonsterManager");
static_assert(sizeof(BP_MonsterBlueprintLibrary_C_GetMonsterManager) == 0x000028, "Wrong size on BP_MonsterBlueprintLibrary_C_GetMonsterManager");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetMonsterManager, m_WorldContext) == 0x000000, "Member 'BP_MonsterBlueprintLibrary_C_GetMonsterManager::m_WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetMonsterManager, MonsterManager) == 0x000008, "Member 'BP_MonsterBlueprintLibrary_C_GetMonsterManager::MonsterManager' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetMonsterManager, CallFunc_GetInstance_ReturnValue) == 0x000010, "Member 'BP_MonsterBlueprintLibrary_C_GetMonsterManager::CallFunc_GetInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetMonsterManager, K2Node_DynamicCast_AsBP_Monster_Manager) == 0x000018, "Member 'BP_MonsterBlueprintLibrary_C_GetMonsterManager::K2Node_DynamicCast_AsBP_Monster_Manager' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetMonsterManager, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MonsterBlueprintLibrary_C_GetMonsterManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_MonsterBlueprintLibrary.BP_MonsterBlueprintLibrary_C.GetEnemyMonsterList
// 0x0030 (0x0030 - 0x0000)
struct BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList final
{
public:
	class UObject*                                m_WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AGPACharacter*>                  EnemyList;                                         // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class UBP_MonsterManager_C*                   CallFunc_GetMonsterManager_MonsterManager;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AMonsterBase*>                   CallFunc_GetMonsters_ReturnValue;                  // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList) == 0x000008, "Wrong alignment on BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList");
static_assert(sizeof(BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList) == 0x000030, "Wrong size on BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList, m_WorldContext) == 0x000000, "Member 'BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList::m_WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList, EnemyList) == 0x000008, "Member 'BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList::EnemyList' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList, CallFunc_GetMonsterManager_MonsterManager) == 0x000018, "Member 'BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList::CallFunc_GetMonsterManager_MonsterManager' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList, CallFunc_GetMonsters_ReturnValue) == 0x000020, "Member 'BP_MonsterBlueprintLibrary_C_GetEnemyMonsterList::CallFunc_GetMonsters_ReturnValue' has a wrong offset!");

// Function BP_MonsterBlueprintLibrary.BP_MonsterBlueprintLibrary_C.GetFriendMonsterList
// 0x0030 (0x0030 - 0x0000)
struct BP_MonsterBlueprintLibrary_C_GetFriendMonsterList final
{
public:
	class UObject*                                m_WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AGPACharacter*>                  EnemyList;                                         // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class UBP_MonsterManager_C*                   CallFunc_GetMonsterManager_MonsterManager;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AMonsterBase*>                   CallFunc_GetMonsters_ReturnValue;                  // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_MonsterBlueprintLibrary_C_GetFriendMonsterList) == 0x000008, "Wrong alignment on BP_MonsterBlueprintLibrary_C_GetFriendMonsterList");
static_assert(sizeof(BP_MonsterBlueprintLibrary_C_GetFriendMonsterList) == 0x000030, "Wrong size on BP_MonsterBlueprintLibrary_C_GetFriendMonsterList");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonsterList, m_WorldContext) == 0x000000, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonsterList::m_WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonsterList, EnemyList) == 0x000008, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonsterList::EnemyList' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonsterList, CallFunc_GetMonsterManager_MonsterManager) == 0x000018, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonsterList::CallFunc_GetMonsterManager_MonsterManager' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetFriendMonsterList, CallFunc_GetMonsters_ReturnValue) == 0x000020, "Member 'BP_MonsterBlueprintLibrary_C_GetFriendMonsterList::CallFunc_GetMonsters_ReturnValue' has a wrong offset!");

// Function BP_MonsterBlueprintLibrary.BP_MonsterBlueprintLibrary_C.GetAllMonsterList
// 0x0040 (0x0040 - 0x0000)
struct BP_MonsterBlueprintLibrary_C_GetAllMonsterList final
{
public:
	class UObject*                                m_WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AGPACharacter*>                  EnemyList;                                         // 0x0008(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<EMonsterRegisterType>                  K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class UBP_MonsterManager_C*                   CallFunc_GetMonsterManager_MonsterManager;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AMonsterBase*>                   CallFunc_GetMonstersWithList_ReturnValue;          // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_MonsterBlueprintLibrary_C_GetAllMonsterList) == 0x000008, "Wrong alignment on BP_MonsterBlueprintLibrary_C_GetAllMonsterList");
static_assert(sizeof(BP_MonsterBlueprintLibrary_C_GetAllMonsterList) == 0x000040, "Wrong size on BP_MonsterBlueprintLibrary_C_GetAllMonsterList");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetAllMonsterList, m_WorldContext) == 0x000000, "Member 'BP_MonsterBlueprintLibrary_C_GetAllMonsterList::m_WorldContext' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetAllMonsterList, EnemyList) == 0x000008, "Member 'BP_MonsterBlueprintLibrary_C_GetAllMonsterList::EnemyList' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetAllMonsterList, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_MonsterBlueprintLibrary_C_GetAllMonsterList::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetAllMonsterList, CallFunc_GetMonsterManager_MonsterManager) == 0x000028, "Member 'BP_MonsterBlueprintLibrary_C_GetAllMonsterList::CallFunc_GetMonsterManager_MonsterManager' has a wrong offset!");
static_assert(offsetof(BP_MonsterBlueprintLibrary_C_GetAllMonsterList, CallFunc_GetMonstersWithList_ReturnValue) == 0x000030, "Member 'BP_MonsterBlueprintLibrary_C_GetAllMonsterList::CallFunc_GetMonstersWithList_ReturnValue' has a wrong offset!");

}

