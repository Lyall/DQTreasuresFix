#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ST_DrawQuestDestinations_structs.hpp"
#include "Engine_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventManager.BP_EventManager_C
// 0x0218 (0x0418 - 0x0200)
class UBP_EventManager_C final : public UEventManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0200(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsCancelTalk;                                      // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPlayingEvent_Deprecated;                         // 0x0209(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EventFadeTime;                                     // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayedFirstStigmataEvent;                        // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayingEventID_0;                                  // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   EventID;                                           // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventExecter_C*                     EventExector;                                      // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   QuestID;                                           // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuestState                                   QuestState;                                        // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             EventDataTable;                                    // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, int32>                      RewardItem;                                        // 0x0250(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, int32>                      RewardMonster;                                     // 0x02A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   QuestName;                                         // 0x02F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	EEventType                                    CurrentEventType;                                  // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   QuestType;                                         // 0x0310(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FST_DrawQuestDestinations> DrawQuestDestinationIcons;                         // 0x0328(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          PlayTitleEvent;                                    // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDrawQuestClearReportLogo;                        // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InputID;                                           // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class ABPC_Darwin_C*                          BPC_Darwin;                                        // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisableInput;                                    // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardEXP;                                         // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        Sender;                                            // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ReleaseEventFlag;                                  // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   QuestClearEventID;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NextEventID;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsQuestEvent;                                      // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReleaseQuestIDs;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         QuestLineIconDelayTime;                            // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DebugLocation;                                     // 0x03E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DebugRotator;                                      // 0x03F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugPlayFlag;                                     // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EEpisodeType                                  CurrentEpisodeType;                                // 0x03FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FE[0x2];                                      // 0x03FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BreakEventFlags;                                   // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   EventIdOfItem;                                     // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EventManager(int32 EntryPoint);
	void PlayEventImpl(class FName EventID_0, EQuestState QuestState_0);
	void PlayEventOfItemFirstAdd(const class FName& ItemFirstAdd);
	void PlayEvent(const class FName& EventID_0, EQuestState QuestState_0);
	void UpdateQuestTargetEnemyUI(int32 KindId);
	void SetEventSendNpc(class ABP_NPC_C* SendActor);
	void CallPlayEvent(const class FString& EventID_0, EEventType EventType, class FName QuestID_0, EQuestState QuestState_0, const struct FST_EventTalktBranchData& TextBranchData, const TArray<struct FST_TextGoto>& TextGotoData, class AActor* Sender_0);
	void EndPlayEvent(bool IsEventCancel);
	void SendEvent(class FName EventID_0, class UActorComponent* Sender_0, bool DebugMode);
	void SendLiftEvent(class UBP_EventSender_C* EventSender_0, int32 LiftId, class FName StarScarId);
	void EndEvent(bool CancelQuestCheck, bool IsSelectCancel, bool IsSkipEvent);
	void EndOverlapEventTrigger();
	void PlayQuestClearEvent();
	void EventFin();
	void Init(class UBP_EventExecter_C* BP_EventExector);
	void ClearEvent();
	void EventInput(float DelataTime, bool GamePaused, const struct FKeyInput& KeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Reply);
	void EventDisableInput();
	void EventEnableInput();
	void ChangeInput();
	void GrantEXP();
	void GrantReward();
	void SetEventFlag();
	void SetEventClearData();
	void SetEventData(const struct FST_EventData& EventData);
	void CheckEventData();
	void AdjustIEMessageTime();
	void SetSender(class UEventSender* Sender_0);
	void ChangeStateEventStart();
	void ChangeStateEventEnd();
	void HideAllEnemy();
	void ShowAllEnemy();
	void PauseAllEnemy();
	void ResumeAllEnemy();
	void HideAllPartyMonster();
	void ShowAllPartyMonster();
	void ResumeAllPartyMonster();
	void PauseAllPartyMonster();
	bool IsPlayingEvent();
	class AActor* GetEventActor();
	void SetSpawnEnemy(const bool IsSpawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventManager_C">();
	}
	static class UBP_EventManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EventManager_C>();
	}
};
static_assert(alignof(UBP_EventManager_C) == 0x000008, "Wrong alignment on UBP_EventManager_C");
static_assert(sizeof(UBP_EventManager_C) == 0x000418, "Wrong size on UBP_EventManager_C");
static_assert(offsetof(UBP_EventManager_C, UberGraphFrame) == 0x000200, "Member 'UBP_EventManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, IsCancelTalk) == 0x000208, "Member 'UBP_EventManager_C::IsCancelTalk' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, IsPlayingEvent_Deprecated) == 0x000209, "Member 'UBP_EventManager_C::IsPlayingEvent_Deprecated' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, EventFadeTime) == 0x00020C, "Member 'UBP_EventManager_C::EventFadeTime' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, IsPlayedFirstStigmataEvent) == 0x000210, "Member 'UBP_EventManager_C::IsPlayedFirstStigmataEvent' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, PlayingEventID_0) == 0x000218, "Member 'UBP_EventManager_C::PlayingEventID_0' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, EventID) == 0x000228, "Member 'UBP_EventManager_C::EventID' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, EventExector) == 0x000230, "Member 'UBP_EventManager_C::EventExector' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, QuestID) == 0x000238, "Member 'UBP_EventManager_C::QuestID' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, QuestState) == 0x000240, "Member 'UBP_EventManager_C::QuestState' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, EventDataTable) == 0x000248, "Member 'UBP_EventManager_C::EventDataTable' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, RewardItem) == 0x000250, "Member 'UBP_EventManager_C::RewardItem' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, RewardMonster) == 0x0002A0, "Member 'UBP_EventManager_C::RewardMonster' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, QuestName) == 0x0002F0, "Member 'UBP_EventManager_C::QuestName' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, CurrentEventType) == 0x000308, "Member 'UBP_EventManager_C::CurrentEventType' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, QuestType) == 0x000310, "Member 'UBP_EventManager_C::QuestType' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, DrawQuestDestinationIcons) == 0x000328, "Member 'UBP_EventManager_C::DrawQuestDestinationIcons' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, PlayTitleEvent) == 0x000378, "Member 'UBP_EventManager_C::PlayTitleEvent' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, IsDrawQuestClearReportLogo) == 0x000379, "Member 'UBP_EventManager_C::IsDrawQuestClearReportLogo' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, InputID) == 0x000380, "Member 'UBP_EventManager_C::InputID' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, BPC_Darwin) == 0x000390, "Member 'UBP_EventManager_C::BPC_Darwin' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, IsDisableInput) == 0x000398, "Member 'UBP_EventManager_C::IsDisableInput' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, RewardEXP) == 0x00039C, "Member 'UBP_EventManager_C::RewardEXP' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, Sender) == 0x0003A0, "Member 'UBP_EventManager_C::Sender' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, ReleaseEventFlag) == 0x0003A8, "Member 'UBP_EventManager_C::ReleaseEventFlag' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, QuestClearEventID) == 0x0003B8, "Member 'UBP_EventManager_C::QuestClearEventID' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, NextEventID) == 0x0003C0, "Member 'UBP_EventManager_C::NextEventID' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, IsQuestEvent) == 0x0003C8, "Member 'UBP_EventManager_C::IsQuestEvent' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, ReleaseQuestIDs) == 0x0003D0, "Member 'UBP_EventManager_C::ReleaseQuestIDs' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, QuestLineIconDelayTime) == 0x0003E0, "Member 'UBP_EventManager_C::QuestLineIconDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, DebugLocation) == 0x0003E4, "Member 'UBP_EventManager_C::DebugLocation' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, DebugRotator) == 0x0003F0, "Member 'UBP_EventManager_C::DebugRotator' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, DebugPlayFlag) == 0x0003FC, "Member 'UBP_EventManager_C::DebugPlayFlag' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, CurrentEpisodeType) == 0x0003FD, "Member 'UBP_EventManager_C::CurrentEpisodeType' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, BreakEventFlags) == 0x000400, "Member 'UBP_EventManager_C::BreakEventFlags' has a wrong offset!");
static_assert(offsetof(UBP_EventManager_C, EventIdOfItem) == 0x000410, "Member 'UBP_EventManager_C::EventIdOfItem' has a wrong offset!");

}

