#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCNaviMovePoint

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPCNaviMovePoint.BP_NPCNaviMovePoint_C
// 0x0080 (0x02A8 - 0x0228)
class ABP_NPCNaviMovePoint_C final : public AActor
{
public:
	class UArrowComponent*                        arrow;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExit;                                            // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CSVRowData;                                        // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CSVHeader;                                         // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             TargetDataTable;                                   // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DestinationPointID;                                // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartFlagName;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EndFlagName;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutRange;                                          // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENPCAiMovedState                              MovedState;                                        // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SerifuID;                                          // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EmoteID;                                           // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FukidashiID;                                       // 0x029C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Acceleration;                                      // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ConvertToCSVString(class FName Key, const struct FVector& Location, const struct FRotator& Rotator, float Range_0, float OutRange_0, class FName StartFlagName_0, float Speed_0, float Acceleration_0, ENPCAiMovedState MovedState_0, class FName EndFlagName_0, class FName TalkEventID, int32 EmoteID_0, class FName FukidashiID_0, class FString* CSVRowString);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPCNaviMovePoint_C">();
	}
	static class ABP_NPCNaviMovePoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPCNaviMovePoint_C>();
	}
};
static_assert(alignof(ABP_NPCNaviMovePoint_C) == 0x000008, "Wrong alignment on ABP_NPCNaviMovePoint_C");
static_assert(sizeof(ABP_NPCNaviMovePoint_C) == 0x0002A8, "Wrong size on ABP_NPCNaviMovePoint_C");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, arrow) == 0x000228, "Member 'ABP_NPCNaviMovePoint_C::arrow' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_NPCNaviMovePoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, IsExit) == 0x000238, "Member 'ABP_NPCNaviMovePoint_C::IsExit' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, CSVRowData) == 0x000240, "Member 'ABP_NPCNaviMovePoint_C::CSVRowData' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, CSVHeader) == 0x000250, "Member 'ABP_NPCNaviMovePoint_C::CSVHeader' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, TargetDataTable) == 0x000260, "Member 'ABP_NPCNaviMovePoint_C::TargetDataTable' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, DestinationPointID) == 0x000268, "Member 'ABP_NPCNaviMovePoint_C::DestinationPointID' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, StartFlagName) == 0x000270, "Member 'ABP_NPCNaviMovePoint_C::StartFlagName' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, EndFlagName) == 0x000278, "Member 'ABP_NPCNaviMovePoint_C::EndFlagName' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, Range) == 0x000280, "Member 'ABP_NPCNaviMovePoint_C::Range' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, OutRange) == 0x000284, "Member 'ABP_NPCNaviMovePoint_C::OutRange' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, Speed) == 0x000288, "Member 'ABP_NPCNaviMovePoint_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, MovedState) == 0x00028C, "Member 'ABP_NPCNaviMovePoint_C::MovedState' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, SerifuID) == 0x000290, "Member 'ABP_NPCNaviMovePoint_C::SerifuID' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, EmoteID) == 0x000298, "Member 'ABP_NPCNaviMovePoint_C::EmoteID' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, FukidashiID) == 0x00029C, "Member 'ABP_NPCNaviMovePoint_C::FukidashiID' has a wrong offset!");
static_assert(offsetof(ABP_NPCNaviMovePoint_C, Acceleration) == 0x0002A4, "Member 'ABP_NPCNaviMovePoint_C::Acceleration' has a wrong offset!");

}

