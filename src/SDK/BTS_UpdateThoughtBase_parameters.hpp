#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_UpdateThoughtBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.NextState
// 0x0008 (0x0008 - 0x0000)
struct BTS_UpdateThoughtBase_C_NextState final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_NextState) == 0x000004, "Wrong alignment on BTS_UpdateThoughtBase_C_NextState");
static_assert(sizeof(BTS_UpdateThoughtBase_C_NextState) == 0x000008, "Wrong size on BTS_UpdateThoughtBase_C_NextState");
static_assert(offsetof(BTS_UpdateThoughtBase_C_NextState, Temp_int_Variable) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_NextState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_NextState, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BTS_UpdateThoughtBase_C_NextState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetTarget
// 0x0020 (0x0020 - 0x0000)
struct BTS_UpdateThoughtBase_C_GetTarget final
{
public:
	class AGPACharacter*                          Target_0;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetBlackboardValueAsObject_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGPACharacter*                          K2Node_DynamicCast_AsGPACharacter;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_GetTarget) == 0x000008, "Wrong alignment on BTS_UpdateThoughtBase_C_GetTarget");
static_assert(sizeof(BTS_UpdateThoughtBase_C_GetTarget) == 0x000020, "Wrong size on BTS_UpdateThoughtBase_C_GetTarget");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetTarget, Target_0) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_GetTarget::Target_0' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetTarget, CallFunc_GetBlackboardValueAsObject_ReturnValue) == 0x000008, "Member 'BTS_UpdateThoughtBase_C_GetTarget::CallFunc_GetBlackboardValueAsObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetTarget, K2Node_DynamicCast_AsGPACharacter) == 0x000010, "Member 'BTS_UpdateThoughtBase_C_GetTarget::K2Node_DynamicCast_AsGPACharacter' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_UpdateThoughtBase_C_GetTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetMonster
// 0x0020 (0x0020 - 0x0000)
struct BTS_UpdateThoughtBase_C_GetMonster final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonster*                               Monster;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonster*                               K2Node_DynamicCast_AsMonster;                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_GetMonster) == 0x000008, "Wrong alignment on BTS_UpdateThoughtBase_C_GetMonster");
static_assert(sizeof(BTS_UpdateThoughtBase_C_GetMonster) == 0x000020, "Wrong size on BTS_UpdateThoughtBase_C_GetMonster");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonster, Pawn) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_GetMonster::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonster, Monster) == 0x000008, "Member 'BTS_UpdateThoughtBase_C_GetMonster::Monster' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonster, K2Node_DynamicCast_AsMonster) == 0x000010, "Member 'BTS_UpdateThoughtBase_C_GetMonster::K2Node_DynamicCast_AsMonster' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonster, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_UpdateThoughtBase_C_GetMonster::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.IsFarEnough
// 0x0038 (0x0038 - 0x0000)
struct BTS_UpdateThoughtBase_C_IsFarEnough final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation_0;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          return_0;                                          // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_IsFarEnough) == 0x000004, "Wrong alignment on BTS_UpdateThoughtBase_C_IsFarEnough");
static_assert(sizeof(BTS_UpdateThoughtBase_C_IsFarEnough) == 0x000038, "Wrong size on BTS_UpdateThoughtBase_C_IsFarEnough");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, Center) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::Center' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, TargetLocation_0) == 0x00000C, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::TargetLocation_0' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, Radius) == 0x000018, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::Radius' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, return_0) == 0x00001C, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::return_0' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000020, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, CallFunc_VSizeSquared_ReturnValue) == 0x000030, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_IsFarEnough, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'BTS_UpdateThoughtBase_C_IsFarEnough::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BTS_UpdateThoughtBase_C_GetTargetLocation final
{
public:
	struct FVector                                TargetLocation_0;                                  // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_GetTargetLocation) == 0x000004, "Wrong alignment on BTS_UpdateThoughtBase_C_GetTargetLocation");
static_assert(sizeof(BTS_UpdateThoughtBase_C_GetTargetLocation) == 0x000018, "Wrong size on BTS_UpdateThoughtBase_C_GetTargetLocation");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetTargetLocation, TargetLocation_0) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_GetTargetLocation::TargetLocation_0' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetTargetLocation, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x00000C, "Member 'BTS_UpdateThoughtBase_C_GetTargetLocation::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.SetTarget
// 0x0008 (0x0008 - 0x0000)
struct BTS_UpdateThoughtBase_C_SetTarget final
{
public:
	class AGPACharacter*                          Target_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_SetTarget) == 0x000008, "Wrong alignment on BTS_UpdateThoughtBase_C_SetTarget");
static_assert(sizeof(BTS_UpdateThoughtBase_C_SetTarget) == 0x000008, "Wrong size on BTS_UpdateThoughtBase_C_SetTarget");
static_assert(offsetof(BTS_UpdateThoughtBase_C_SetTarget, Target_0) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_SetTarget::Target_0' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.SetTargetLocation
// 0x000C (0x000C - 0x0000)
struct BTS_UpdateThoughtBase_C_SetTargetLocation final
{
public:
	struct FVector                                TargetLocation_0;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_SetTargetLocation) == 0x000004, "Wrong alignment on BTS_UpdateThoughtBase_C_SetTargetLocation");
static_assert(sizeof(BTS_UpdateThoughtBase_C_SetTargetLocation) == 0x00000C, "Wrong size on BTS_UpdateThoughtBase_C_SetTargetLocation");
static_assert(offsetof(BTS_UpdateThoughtBase_C_SetTargetLocation, TargetLocation_0) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_SetTargetLocation::TargetLocation_0' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetMonsterBoss
// 0x0020 (0x0020 - 0x0000)
struct BTS_UpdateThoughtBase_C_GetMonsterBoss final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonsterBoss*                           MonsterBoss;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonsterBoss*                           K2Node_DynamicCast_AsMonster_Boss;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_GetMonsterBoss) == 0x000008, "Wrong alignment on BTS_UpdateThoughtBase_C_GetMonsterBoss");
static_assert(sizeof(BTS_UpdateThoughtBase_C_GetMonsterBoss) == 0x000020, "Wrong size on BTS_UpdateThoughtBase_C_GetMonsterBoss");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBoss, Pawn) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBoss::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBoss, MonsterBoss) == 0x000008, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBoss::MonsterBoss' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBoss, K2Node_DynamicCast_AsMonster_Boss) == 0x000010, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBoss::K2Node_DynamicCast_AsMonster_Boss' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBoss, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBoss::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BTS_UpdateThoughtBase.BTS_UpdateThoughtBase_C.GetMonsterBase
// 0x0020 (0x0020 - 0x0000)
struct BTS_UpdateThoughtBase_C_GetMonsterBase final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonsterBase*                           AsMonster_Base;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMonsterBase*                           K2Node_DynamicCast_AsMonster_Base;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTS_UpdateThoughtBase_C_GetMonsterBase) == 0x000008, "Wrong alignment on BTS_UpdateThoughtBase_C_GetMonsterBase");
static_assert(sizeof(BTS_UpdateThoughtBase_C_GetMonsterBase) == 0x000020, "Wrong size on BTS_UpdateThoughtBase_C_GetMonsterBase");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBase, Pawn) == 0x000000, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBase::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBase, AsMonster_Base) == 0x000008, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBase::AsMonster_Base' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBase, K2Node_DynamicCast_AsMonster_Base) == 0x000010, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBase::K2Node_DynamicCast_AsMonster_Base' has a wrong offset!");
static_assert(offsetof(BTS_UpdateThoughtBase_C_GetMonsterBase, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_UpdateThoughtBase_C_GetMonsterBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

