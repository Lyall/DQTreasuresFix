#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DarwinGame

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum DarwinGame.ENotifyType
// NumValues: 0x0018
enum class ENotifyType : uint8
{
	None                                     = 0,
	BossBoostingCheck                        = 1,
	BossRotateInsightTarget                  = 2,
	BossTargetInRange                        = 3,
	TimeCheckMultipleAttack                  = 4,
	BossRetarget                             = 5,
	BossCombatDuring                         = 6,
	BossSelfhalm                             = 7,
	BossExposeWeaknesses                     = 8,
	BossPossessFlying                        = 9,
	BossPossessed                            = 10,
	BossStatueDeadWait                       = 11,
	BossStatueDestroy                        = 12,
	BossUIRestart                            = 13,
	GuideSysLog                              = 14,
	MonsterRotateInsightTarget               = 15,
	MonsterTimeCheckAttack                   = 16,
	MonsterTimeWait                          = 17,
	MonsterCheckFloorChangeSection           = 18,
	MonsterRotateToTargetWithLocationOffset  = 19,
	MonsterTargetInRangeFin                  = 20,
	MonsterIgnoreCollision                   = 21,
	Num                                      = 22,
	ENotifyType_MAX                          = 23,
};

// Enum DarwinGame.ELinkType
// NumValues: 0x0004
enum class ELinkType : uint8
{
	Field                                    = 0,
	Battle                                   = 1,
	LinkTypeNum                              = 2,
	ELinkType_MAX                            = 3,
};

// Enum DarwinGame.ESocket
// NumValues: 0x0037
enum class ESocket : uint8
{
	Common_Root                              = 0,
	Common_Center                            = 1,
	Common_LeftHand                          = 2,
	Common_RightHand                         = 3,
	Common_LeftFoot                          = 4,
	Common_RightFoot                         = 5,
	Common_LeftToe                           = 6,
	Common_RightToe                          = 7,
	Common_LeftSole                          = 8,
	Common_RightSole                         = 9,
	Common_Artifact                          = 10,
	Common_PickUpArtifact                    = 11,
	Effect_Head                              = 12,
	Effect_Center                            = 13,
	Effect_Force                             = 14,
	Effect_Guard                             = 15,
	Effect_Skill_01                          = 16,
	Effect_Magic                             = 17,
	Effect_WindTrail_Left                    = 18,
	Effect_WindTrail_Right                   = 19,
	Effect_Eletrial                          = 20,
	Weapon_01                                = 21,
	Weapon_02                                = 22,
	Weapon_03                                = 23,
	Weapon_04                                = 24,
	MultiBullet_00                           = 25,
	MultiBullet_01                           = 26,
	MultiBullet_02                           = 27,
	MultiBullet_03                           = 28,
	MultiBullet_04                           = 29,
	MultiBullet_05                           = 30,
	MultiBullet_06                           = 31,
	MultiBullet_07                           = 32,
	MultiBullet_08                           = 33,
	MultiBullet_09                           = 34,
	MultiBullet_10                           = 35,
	MultiBullet_11                           = 36,
	MultiBullet_12                           = 37,
	Breath_00                                = 38,
	Beam_00                                  = 39,
	Beam_01                                  = 40,
	UI_Head                                  = 41,
	UI_Center                                = 42,
	LookAtTarget                             = 43,
	CustomMonster_00                         = 44,
	CustomMonster_01                         = 45,
	CustomMonster_02                         = 46,
	CustomMonster_03                         = 47,
	Beast_Left_Eye                           = 48,
	Beast_Right_Eye                          = 49,
	Common_Head                              = 50,
	Common_Flag_Left                         = 51,
	Common_Flag_Right                        = 52,
	DitheringTarget                          = 53,
	ESocket_MAX                              = 54,
};

// Enum DarwinGame.ESevenStoneDirectionType
// NumValues: 0x0006
enum class ESevenStoneDirectionType : uint8
{
	None                                     = 0,
	Location                                 = 1,
	Rotation                                 = 2,
	Effect                                   = 3,
	LineEffect                               = 4,
	ESevenStoneDirectionType_MAX             = 5,
};

// Enum DarwinGame.EComboType
// NumValues: 0x0004
enum class EComboType : uint8
{
	None                                     = 0,
	Auto                                     = 1,
	Hard                                     = 2,
	EComboType_MAX                           = 3,
};

// Enum DarwinGame.EActionPointType
// NumValues: 0x0004
enum class EActionPointType : uint8
{
	Invalid                                  = 0,
	Squat                                    = 1,
	Dive                                     = 2,
	EActionPointType_MAX                     = 3,
};

// Enum DarwinGame.EActionTargetType
// NumValues: 0x0013
enum class EActionTargetType : uint8
{
	None                                     = 0,
	AlliesAlone                              = 1,
	AlliesRange                              = 2,
	AlliesAll                                = 3,
	AlliesRandom                             = 4,
	AlliesRandomMulti                        = 5,
	EnemyAlone                               = 6,
	EnemyRange                               = 7,
	EnemyAll                                 = 8,
	EnemyRandom                              = 9,
	EnemyRandomMulti                         = 10,
	AlliesEnemyAlone                         = 11,
	AlliesEnemyRange                         = 12,
	AlliesEnemyAll                           = 13,
	AlliesEnemyRandom                        = 14,
	AlliesEnemyRandomMulti                   = 15,
	MySelf                                   = 16,
	Other                                    = 17,
	EActionTargetType_MAX                    = 18,
};

// Enum DarwinGame.EActionEffectType
// NumValues: 0x000C
enum class EActionEffectType : uint8
{
	None                                     = 0,
	Attack                                   = 1,
	Heal                                     = 2,
	Debuff                                   = 3,
	Buff                                     = 4,
	Deffense                                 = 5,
	PhysicalBullet                           = 6,
	MagicalBullet                            = 7,
	MPHeal                                   = 8,
	Cure                                     = 9,
	Other                                    = 10,
	EActionEffectType_MAX                    = 11,
};

// Enum DarwinGame.EActionClassType
// NumValues: 0x000C
enum class EActionClassType : uint8
{
	None                                     = 0,
	Physics                                  = 1,
	Magic                                    = 2,
	Skill                                    = 3,
	Breath                                   = 4,
	Dance                                    = 5,
	Other                                    = 6,
	Characteristic                           = 7,
	SlingShot                                = 8,
	SelfHeal                                 = 9,
	Falling                                  = 10,
	EActionClassType_MAX                     = 11,
};

// Enum DarwinGame.EDodgeType
// NumValues: 0x0005
enum class EDodgeType : uint8
{
	None                                     = 0,
	Front                                    = 1,
	Back                                     = 2,
	SwimDash                                 = 3,
	EDodgeType_MAX                           = 4,
};

// Enum DarwinGame.EGuardType
// NumValues: 0x0005
enum class EGuardType : uint8
{
	None                                     = 0,
	Guard                                    = 1,
	Miss                                     = 2,
	JustAvoid                                = 3,
	EGuardType_MAX                           = 4,
};

// Enum DarwinGame.EDamageType
// NumValues: 0x0008
enum class EDamageType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Attribute                                = 2,
	SkillChain                               = 3,
	Falling                                  = 4,
	Gimmick                                  = 5,
	Terrain                                  = 6,
	EDamageType_MAX                          = 7,
};

// Enum DarwinGame.EMagicActorDirectType
// NumValues: 0x0003
enum class EMagicActorDirectType : uint8
{
	ToInstigator                             = 0,
	ToTarget                                 = 1,
	EMagicActorDirectType_MAX                = 2,
};

// Enum DarwinGame.EDamageCategory
// NumValues: 0x0003
enum class EDamageCategory : uint8
{
	None                                     = 0,
	HP                                       = 1,
	EDamageCategory_MAX                      = 2,
};

// Enum DarwinGame.EDamageCalcPercentagePolicy
// NumValues: 0x0004
enum class EDamageCalcPercentagePolicy : uint8
{
	None                                     = 0,
	TargetStatus                             = 1,
	Optional                                 = 2,
	EDamageCalcPercentagePolicy_MAX          = 3,
};

// Enum DarwinGame.EDamageCalcPolicy
// NumValues: 0x0004
enum class EDamageCalcPolicy : uint8
{
	None                                     = 0,
	Fixed                                    = 1,
	Percentage                               = 2,
	EDamageCalcPolicy_MAX                    = 3,
};

// Enum DarwinGame.EBenefitsType
// NumValues: 0x0005
enum class EBenefitsType : uint8
{
	None                                     = 0,
	PurchaseBenefits                         = 1,
	InGameCode                               = 2,
	DLC                                      = 3,
	EBenefitsType_MAX                        = 4,
};

// Enum DarwinGame.EAddOnContentRewordType
// NumValues: 0x0005
enum class EAddOnContentRewordType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	Monster                                  = 2,
	Coin                                     = 3,
	EAddOnContentRewordType_MAX              = 4,
};

// Enum DarwinGame.EAICautionActionResultType
// NumValues: 0x000C
enum class EAICautionActionResultType : uint8
{
	Invalid                                  = 0,
	Wait                                     = 1,
	Gesture                                  = 2,
	LookAway                                 = 3,
	SideStepLeft                             = 4,
	SideStepRight                            = 5,
	SideStep2Left                            = 6,
	SideStep2Right                           = 7,
	BackStep                                 = 8,
	Warp                                     = 9,
	Num                                      = 10,
	EAICautionActionResultType_MAX           = 11,
};

// Enum DarwinGame.EAICautionActionType
// NumValues: 0x000D
enum class EAICautionActionType : uint8
{
	Invalid                                  = 0,
	Wait                                     = 1,
	Gesture                                  = 2,
	LookAway                                 = 3,
	SideStepRandom                           = 4,
	SideStepLeft                             = 5,
	SideStepRight                            = 6,
	BackStep                                 = 7,
	SideStep2Random                          = 8,
	SideStep2Left                            = 9,
	SideStep2Right                           = 10,
	Num                                      = 11,
	EAICautionActionType_MAX                 = 12,
};

// Enum DarwinGame.AIR_SHIP_GATE
// NumValues: 0x0005
enum class EAIR_SHIP_GATE : uint8
{
	CLOSE                                    = 0,
	OPEN_LEFT                                = 1,
	OPEN_RIGHT                               = 2,
	OPEN_FULL                                = 3,
	AIR_SHIP_MAX                             = 4,
};

// Enum DarwinGame.AIR_SHIP_MODE
// NumValues: 0x0003
enum class EAIR_SHIP_MODE : uint8
{
	LANDING                                  = 0,
	FLIGHT                                   = 1,
	AIR_SHIP_MAX                             = 2,
};

// Enum DarwinGame.EAIThinkActionType
// NumValues: 0x0022
enum class EAIThinkActionType : uint8
{
	None                                     = 0,
	HpHeal                                   = 1,
	Revival                                  = 2,
	Sleep                                    = 3,
	ReleaseSleep                             = 4,
	Seal                                     = 5,
	Stun                                     = 6,
	Poison                                   = 7,
	ReleasePoison                            = 8,
	Dazzle                                   = 9,
	ReleaseDazzle                            = 10,
	AtkUp                                    = 11,
	AtkDown                                  = 12,
	DefUp                                    = 13,
	DefDown                                  = 14,
	AgiUp                                    = 15,
	AgiDown                                  = 16,
	MgkUp                                    = 17,
	MgkDown                                  = 18,
	Force                                    = 19,
	Anger                                    = 20,
	Nightmare                                = 21,
	Miasma                                   = 22,
	Baha                                     = 23,
	Kirikaeshi                               = 24,
	NotMgkDmgCorrect                         = 25,
	MpHeal                                   = 26,
	CloseupAttack                            = 27,
	ReleaseAllAbnormal                       = 28,
	ReleaseStunSleep                         = 29,
	ReleasePoisonParalysis                   = 30,
	ReleaseDazzleSeal                        = 31,
	Num                                      = 32,
	EAIThinkActionType_MAX                   = 33,
};

// Enum DarwinGame.EUpdateTiming
// NumValues: 0x0003
enum class EUpdateTiming : uint8
{
	Start                                    = 0,
	End                                      = 1,
	EUpdateTiming_MAX                        = 2,
};

// Enum DarwinGame.ECollisionType
// NumValues: 0x0003
enum class ECollisionType : uint8
{
	AvoidanceCollision                       = 0,
	CapsuleCollision                         = 1,
	ECollisionType_MAX                       = 2,
};

// Enum DarwinGame.EWarpDir
// NumValues: 0x0003
enum class EWarpDir : uint8
{
	Forward                                  = 0,
	Back                                     = 1,
	EWarpDir_MAX                             = 2,
};

// Enum DarwinGame.EAdjustJumpType
// NumValues: 0x0003
enum class EAdjustJumpType : uint8
{
	ToTarget                                 = 0,
	Vertical                                 = 1,
	EAdjustJumpType_MAX                      = 2,
};

// Enum DarwinGame.EFieldAreaCategory
// NumValues: 0x0006
enum class EFieldAreaCategory : uint8
{
	Region                                   = 0,
	District                                 = 1,
	Zone                                     = 2,
	Section                                  = 3,
	Point                                    = 4,
	Max                                      = 5,
};

// Enum DarwinGame.EAoEDecalState
// NumValues: 0x0005
enum class EAoEDecalState : uint8
{
	FadeIn                                   = 0,
	Visible                                  = 1,
	FadeOut                                  = 2,
	Hidden                                   = 3,
	EAoEDecalState_MAX                       = 4,
};

// Enum DarwinGame.EAreaType
// NumValues: 0x000C
enum class EAreaType : uint8
{
	AT_None                                  = 0,
	AT_Faskull                               = 1,
	AT_Desert                                = 2,
	AT_Volcano                               = 3,
	AT_Snow                                  = 4,
	AT_Forest                                = 5,
	AT_Base                                  = 6,
	AT_DevilCastle                           = 7,
	AT_TreasureIsland                        = 8,
	AT_Remains                               = 9,
	AT_PirateShip                            = 10,
	AT_Max                                   = 11,
};

// Enum DarwinGame.EArtifactFrameType
// NumValues: 0x0005
enum class EArtifactFrameType : uint8
{
	Copper                                   = 0,
	Silver                                   = 1,
	Gold                                     = 2,
	Rainbow                                  = 3,
	EArtifactFrameType_MAX                   = 4,
};

// Enum DarwinGame.EArtifactCategoryClassType
// NumValues: 0x0004
enum class EArtifactCategoryClassType : uint8
{
	None                                     = 0,
	Class                                    = 1,
	SubClass                                 = 2,
	EArtifactCategoryClassType_MAX           = 3,
};

// Enum DarwinGame.EArtifactDropEventType
// NumValues: 0x0006
enum class EArtifactDropEventType : uint8
{
	None                                     = 0,
	OnDamage                                 = 1,
	OnItemMenu                               = 2,
	OnDefeatBonus                            = 3,
	OnPartyChange                            = 4,
	EArtifactDropEventType_MAX               = 5,
};

// Enum DarwinGame.ECorrectionType
// NumValues: 0x0005
enum class ECorrectionType : uint8
{
	None                                     = 0,
	TeamLv                                   = 1,
	DLNum                                    = 2,
	IineNum                                  = 3,
	ECorrectionType_MAX                      = 4,
};

// Enum DarwinGame.EEstimatedValueUpType
// NumValues: 0x0006
enum class EEstimatedValueUpType : uint8
{
	None                                     = 0,
	BattleWin                                = 1,
	Download                                 = 2,
	Good                                     = 3,
	Polish                                   = 4,
	EEstimatedValueUpType_MAX                = 5,
};

// Enum DarwinGame.EArtifactLogType
// NumValues: 0x000C
enum class EArtifactLogType : uint8
{
	None                                     = 0,
	Get                                      = 1,
	BaseAreaBattleWin                        = 2,
	BaseAreaBattleLose                       = 3,
	RevengeBattleWin                         = 4,
	NameChange                               = 5,
	SendMonsterOnline                        = 6,
	SendMonsterOffline                       = 7,
	EstimatedValueUp                         = 8,
	QualityUp                                = 9,
	Num                                      = 9,
	EArtifactLogType_MAX                     = 10,
};

// Enum DarwinGame.EMyArtifactState
// NumValues: 0x0005
enum class EMyArtifactState : uint8
{
	None                                     = 0,
	Set                                      = 1,
	Target                                   = 2,
	Stolen                                   = 3,
	EMyArtifactState_MAX                     = 4,
};

// Enum DarwinGame.EArtifactPointType
// NumValues: 0x0004
enum class EArtifactPointType : uint8
{
	Invalid                                  = 0,
	Artifact                                 = 1,
	Dungeon                                  = 2,
	EArtifactPointType_MAX                   = 3,
};

// Enum DarwinGame.EArtifactMonsterVisionType
// NumValues: 0x0004
enum class EArtifactMonsterVisionType : uint8
{
	Able                                     = 0,
	Unable                                   = 1,
	Num                                      = 2,
	EArtifactMonsterVisionType_MAX           = 3,
};

// Enum DarwinGame.EArtifactNotifyType
// NumValues: 0x0008
enum class EArtifactNotifyType : uint8
{
	UnResponsive                             = 0,
	LowResponsive                            = 1,
	OutOfRangeWithoutSonar                   = 2,
	OutOfRange                               = 3,
	WithinRange                              = 4,
	CloseRange                               = 5,
	Num                                      = 6,
	EArtifactNotifyType_MAX                  = 7,
};

// Enum DarwinGame.EArtifactType
// NumValues: 0x0007
enum class EArtifactType : uint8
{
	Thousand                                 = 0,
	Million                                  = 1,
	SevenStone                               = 2,
	HighJunk                                 = 3,
	Replica                                  = 4,
	Num                                      = 5,
	EArtifactType_MAX                        = 6,
};

// Enum DarwinGame.EAttackType
// NumValues: 0x0003
enum class EAttackType : uint8
{
	Blow                                     = 0,
	Slash                                    = 1,
	EAttackType_MAX                          = 2,
};

// Enum DarwinGame.EAttributeSlipType
// NumValues: 0x0004
enum class EAttributeSlipType : uint8
{
	None                                     = 0,
	Damage                                   = 1,
	Heal                                     = 2,
	EAttributeSlipType_MAX                   = 3,
};

// Enum DarwinGame.EAttributeMaterialType
// NumValues: 0x0010
enum class EAttributeMaterialType : uint8
{
	None                                     = 0,
	WeakToFire                               = 1,
	WeakToWater                              = 2,
	WeakToWind                               = 3,
	WeakToGround                             = 4,
	WeakToExplosion                          = 5,
	WeakToFreezing                           = 6,
	WeakToLightning                          = 7,
	WeakToGravity                            = 8,
	WeakToLight                              = 9,
	WeakToDark                               = 10,
	Anger                                    = 11,
	Miasma                                   = 12,
	Nightmare                                = 13,
	Poison                                   = 14,
	EAttributeMaterialType_MAX               = 15,
};

// Enum DarwinGame.EAttributeEffectType
// NumValues: 0x0004
enum class EAttributeEffectType : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Body                                     = 2,
	EAttributeEffectType_MAX                 = 3,
};

// Enum DarwinGame.EAttributeOtherType
// NumValues: 0x0004
enum class EAttributeOtherType : uint8
{
	Unknown                                  = 0,
	Dazzle                                   = 1,
	Seal                                     = 2,
	EAttributeOtherType_MAX                  = 3,
};

// Enum DarwinGame.EDamageCorrectType
// NumValues: 0x0007
enum class EDamageCorrectType : uint8
{
	None                                     = 0,
	Resistance                               = 1,
	Magic                                    = 2,
	Breath                                   = 3,
	Force                                    = 4,
	All                                      = 5,
	EDamageCorrectType_MAX                   = 6,
};

// Enum DarwinGame.EApplicabilityType
// NumValues: 0x0007
enum class EApplicabilityType : uint8
{
	None                                     = 0,
	Resistance                               = 1,
	StunValue                                = 2,
	InWater                                  = 3,
	Death                                    = 4,
	Scout                                    = 5,
	EApplicabilityType_MAX                   = 6,
};

// Enum DarwinGame.EAttributeDurationType
// NumValues: 0x0005
enum class EAttributeDurationType : uint8
{
	None                                     = 0,
	Instant                                  = 1,
	Duration                                 = 2,
	Inifinite                                = 3,
	EAttributeDurationType_MAX               = 4,
};

// Enum DarwinGame.EInfluenceAttribute
// NumValues: 0x0005
enum class EInfluenceAttribute : uint8
{
	None                                     = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	MixBuff                                  = 3,
	EInfluenceAttribute_MAX                  = 4,
};

// Enum DarwinGame.EAttributeProcessPolicy
// NumValues: 0x0005
enum class EAttributeProcessPolicy : uint8
{
	Unknown                                  = 0,
	Default                                  = 1,
	Dungeon                                  = 2,
	All                                      = 254,
	EAttributeProcessPolicy_MAX              = 255,
};

// Enum DarwinGame.EAxisMappingType
// NumValues: 0x0047
enum class EAxisMappingType : uint8
{
	Left                                     = 0,
	Down                                     = 1,
	Right                                    = 2,
	Up                                       = 3,
	Y                                        = 4,
	B                                        = 5,
	A                                        = 6,
	X                                        = 7,
	L                                        = 8,
	ZL                                       = 9,
	R                                        = 10,
	ZR                                       = 11,
	Minus                                    = 12,
	Plus                                     = 13,
	LeftAnalog                               = 14,
	LeftAnalogX                              = 15,
	LeftAnalogY                              = 16,
	RightAnalog                              = 17,
	RightAnalogX                             = 18,
	RightAnalogY                             = 19,
	LMB                                      = 20,
	RMB                                      = 21,
	MMB                                      = 22,
	MouseWheelAxis                           = 23,
	MouseAnalogX                             = 24,
	MouseAnalogY                             = 25,
	PC_T                                     = 26,
	PC_R                                     = 27,
	UI_Left                                  = 28,
	UI_Down                                  = 29,
	UI_Right                                 = 30,
	UI_Up                                    = 31,
	UI_Y                                     = 32,
	UI_B                                     = 33,
	UI_A                                     = 34,
	UI_X                                     = 35,
	UI_L                                     = 36,
	UI_ZL                                    = 37,
	UI_R                                     = 38,
	UI_ZR                                    = 39,
	UI_Minus                                 = 40,
	UI_Plus                                  = 41,
	UI_LeftAnalogX                           = 42,
	UI_LeftAnalogY                           = 43,
	UI_RightAnalogX                          = 44,
	UI_RightAnalogY                          = 45,
	UI_RightStickUp                          = 46,
	UI_RightStickDown                        = 47,
	UI_RightStickLeft                        = 48,
	UI_RightStickRight                       = 49,
	LeftAnalog_Minimal                       = 50,
	LB_Y                                     = 51,
	LB_X                                     = 52,
	LB_A                                     = 53,
	LB_B                                     = 54,
	RB_Y                                     = 55,
	RB_X                                     = 56,
	RB_A                                     = 57,
	RB_B                                     = 58,
	LB_Y_Single                              = 59,
	LB_X_Single                              = 60,
	LB_A_Single                              = 61,
	LB_B_Single                              = 62,
	RB_Y_Single                              = 63,
	RB_X_Single                              = 64,
	RB_A_Single                              = 65,
	RB_B_Single                              = 66,
	Tab                                      = 67,
	Debug_ZL                                 = 68,
	Debug_R                                  = 69,
	EAxisMappingType_MAX                     = 70,
};

// Enum DarwinGame.EBackStepType
// NumValues: 0x0005
enum class EBackStepType : uint8
{
	Invalid                                  = 0,
	BackStep                                 = 1,
	Warp                                     = 2,
	Num                                      = 3,
	EBackStepType_MAX                        = 4,
};

// Enum DarwinGame.EBallisticType
// NumValues: 0x0009
enum class EBallisticType : uint8
{
	None                                     = 0,
	Horizontal                               = 1,
	FromFeet                                 = 2,
	Parabolic                                = 3,
	Overhead                                 = 4,
	AboveTarget                              = 5,
	FeetOfTarget                             = 6,
	Meandering                               = 7,
	EBallisticType_MAX                       = 8,
};

// Enum DarwinGame.ECalculationType
// NumValues: 0x0003
enum class ECalculationType : uint8
{
	CT_Normal                                = 0,
	CT_Fixed                                 = 1,
	CT_MAX                                   = 2,
};

// Enum DarwinGame.EBraveReason
// NumValues: 0x0013
enum class EBraveReason : uint8
{
	None                                     = 0,
	GiveWinceDamage                          = 1,
	GiveSleddingDamage                       = 2,
	GiveBlowDamage                           = 3,
	TakeWinceDamage                          = 4,
	TakeSleddingDamage                       = 5,
	TakeBlowDamage                           = 6,
	JustAvoid                                = 7,
	NiceOfDespoil                            = 8,
	PerfectOfDespoil                         = 9,
	AttackOfSlingShot                        = 10,
	HealOfSlingShot                          = 11,
	BuffOfSlingShot                          = 12,
	DeBuffOfSlingShot                        = 13,
	Revival                                  = 14,
	GivePlayerAttackDamage                   = 15,
	Num                                      = 16,
	Invalid                                  = 17,
	EBraveReason_MAX                         = 18,
};

// Enum DarwinGame.EHealCategory
// NumValues: 0x0004
enum class EHealCategory : uint8
{
	None                                     = 0,
	HP                                       = 1,
	MP                                       = 2,
	EHealCategory_MAX                        = 3,
};

// Enum DarwinGame.EHealCalcPolicy
// NumValues: 0x0003
enum class EHealCalcPolicy : uint8
{
	Fixed                                    = 0,
	Percentage                               = 1,
	EHealCalcPolicy_MAX                      = 2,
};

// Enum DarwinGame.EBulletDisplayType
// NumValues: 0x0009
enum class EBulletDisplayType : uint8
{
	None                                     = 0,
	Attack                                   = 1,
	Magic                                    = 2,
	Heal                                     = 3,
	Support                                  = 4,
	Attribute                                = 5,
	Scout                                    = 6,
	Num                                      = 7,
	EBulletDisplayType_MAX                   = 8,
};

// Enum DarwinGame.ECameraPostProcessType
// NumValues: 0x0006
enum class ECameraPostProcessType : uint8
{
	None                                     = 0,
	Search                                   = 1,
	MonsterVision                            = 2,
	Treasure                                 = 3,
	BossFinish                               = 4,
	ECameraPostProcessType_MAX               = 5,
};

// Enum DarwinGame.ECategoryMatchType
// NumValues: 0x0004
enum class ECategoryMatchType : uint8
{
	Mismatch                                 = 0,
	Partial                                  = 1,
	Perfect                                  = 2,
	ECategoryMatchType_MAX                   = 3,
};

// Enum DarwinGame.ECoinAutoEquip
// NumValues: 0x000B
enum class ECoinAutoEquip : uint8
{
	Balance                                  = 0,
	Hp                                       = 1,
	Mp                                       = 2,
	Attack                                   = 3,
	Defence                                  = 4,
	Dexterity                                = 5,
	Magic                                    = 6,
	Blank_0                                  = 7,
	Blank_1                                  = 8,
	Num                                      = 9,
	ECoinAutoEquip_MAX                       = 10,
};

// Enum DarwinGame.ECoinRarity
// NumValues: 0x0006
enum class ECoinRarity : uint8
{
	Bronze                                   = 0,
	Silver                                   = 1,
	Gold                                     = 2,
	Rainbow                                  = 3,
	Num                                      = 4,
	ECoinRarity_MAX                          = 5,
};

// Enum DarwinGame.ECoinType
// NumValues: 0x0006
enum class ECoinType : uint8
{
	None                                     = 0,
	Monster                                  = 1,
	Parameter                                = 2,
	Attribute                                = 3,
	Num                                      = 4,
	ECoinType_MAX                            = 5,
};

// Enum DarwinGame.ECoinFilter
// NumValues: 0x0006
enum class ECoinFilter : uint8
{
	Bronze                                   = 0,
	Silver                                   = 1,
	Gold                                     = 2,
	Rainbow                                  = 3,
	Num                                      = 4,
	ECoinFilter_MAX                          = 5,
};

// Enum DarwinGame.ECoinSort
// NumValues: 0x0006
enum class ECoinSort : uint8
{
	GetTime                                  = 0,
	Kind                                     = 1,
	Rarity                                   = 2,
	Etc                                      = 3,
	Num                                      = 4,
	ECoinSort_MAX                            = 5,
};

// Enum DarwinGame.ECollectionPointState
// NumValues: 0x0003
enum class ECollectionPointState : uint8
{
	Uncollected                              = 0,
	Collected                                = 1,
	Max                                      = 2,
};

// Enum DarwinGame.ECollisionTableEnum
// NumValues: 0x0004
enum class ECollisionTableEnum : uint8
{
	Invalid                                  = 0,
	TouchAttack                              = 1,
	ShootAttack                              = 2,
	ECollisionTableEnum_MAX                  = 3,
};

// Enum DarwinGame.CollisionHiddenType
// NumValues: 0x0005
enum class ECollisionHiddenType : uint8
{
	NoHide                                   = 0,
	BoneHide                                 = 1,
	ActionHide                               = 2,
	TransfomeHide                            = 4,
	CollisionHiddenType_MAX                  = 5,
};

// Enum DarwinGame.AttachTargetType
// NumValues: 0x0004
enum class EAttachTargetType : uint8
{
	None                                     = 0,
	Character                                = 1,
	Weapon                                   = 2,
	AttachTargetType_MAX                     = 3,
};

// Enum DarwinGame.ECommandType
// NumValues: 0x0003
enum class ECommandType : uint8
{
	Go                                       = 0,
	Set                                      = 1,
	MAX                                      = 2,
};

// Enum DarwinGame.ECustomEquipmentKindEn
// NumValues: 0x0007
enum class ECustomEquipmentKindEn : uint8
{
	Custom_01                                = 0,
	Custom_02                                = 1,
	Custom_03                                = 2,
	Rival                                    = 3,
	Special                                  = 4,
	Default                                  = 5,
	ECustomEquipmentKindEn_MAX               = 6,
};

// Enum DarwinGame.ECustomEquipmentKind
// NumValues: 0x0007
enum class ECustomEquipmentKind : uint8
{
	Custom_01                                = 0,
	Custom_02                                = 1,
	Custom_03                                = 2,
	Rival                                    = 3,
	Special                                  = 4,
	Default                                  = 5,
	ECustomEquipmentKind_MAX                 = 6,
};

// Enum DarwinGame.EDamageReactionType
// NumValues: 0x000A
enum class EDamageReactionType : uint8
{
	None                                     = 0,
	Wince                                    = 1,
	Sledding                                 = 2,
	Blow                                     = 3,
	Collapse                                 = 4,
	WinceInWater                             = 5,
	CollapseInWater                          = 6,
	HideBlow                                 = 7,
	DeadAtStart                              = 8,
	Max                                      = 9,
};

// Enum DarwinGame.EViewBlendRateType
// NumValues: 0x0005
enum class EViewBlendRateType : uint8
{
	Linear                                   = 0,
	EaseIn                                   = 1,
	EaseOut                                  = 2,
	EaseInOut                                = 3,
	EViewBlendRateType_MAX                   = 4,
};

// Enum DarwinGame.EViewBlendFunctionType
// NumValues: 0x0002
enum class EViewBlendFunctionType : uint8
{
	Linear                                   = 0,
	EViewBlendFunctionType_MAX               = 1,
};

// Enum DarwinGame.ECameraDirectionType
// NumValues: 0x0004
enum class ECameraDirectionType : uint8
{
	GetArtifact                              = 0,
	GetSevenStone                            = 1,
	PullOutFlag                              = 2,
	ECameraDirectionType_MAX                 = 3,
};

// Enum DarwinGame.ECameraPitchRotateSpeedRatePolicy
// NumValues: 0x0008
enum class ECameraPitchRotateSpeedRatePolicy : uint8
{
	Policy1                                  = 0,
	Policy2                                  = 1,
	Policy3                                  = 2,
	Policy4                                  = 3,
	Policy5                                  = 4,
	All                                      = 5,
	Default                                  = 2,
	ECameraPitchRotateSpeedRatePolicy_MAX    = 6,
};

// Enum DarwinGame.ECameraYawRotateSpeedRatePolicy
// NumValues: 0x0008
enum class ECameraYawRotateSpeedRatePolicy : uint8
{
	Policy1                                  = 0,
	Policy2                                  = 1,
	Policy3                                  = 2,
	Policy4                                  = 3,
	Policy5                                  = 4,
	All                                      = 5,
	Default                                  = 2,
	ECameraYawRotateSpeedRatePolicy_MAX      = 6,
};

// Enum DarwinGame.ECameraResetFunctionType
// NumValues: 0x0005
enum class ECameraResetFunctionType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	CalcByTargetLocation                     = 2,
	CalcByTargetRotation                     = 3,
	ECameraResetFunctionType_MAX             = 4,
};

// Enum DarwinGame.EWidgetAction
// NumValues: 0x0005
enum class EWidgetAction : uint8
{
	Open                                     = 0,
	Close                                    = 1,
	Suspend                                  = 2,
	Resume                                   = 3,
	EWidgetAction_MAX                        = 4,
};

// Enum DarwinGame.EWidgetDefaultAnimation
// NumValues: 0x0008
enum class EWidgetDefaultAnimation : uint8
{
	None                                     = 0,
	Open                                     = 1,
	WaitAfterOpen                            = 2,
	Close                                    = 3,
	Suspend                                  = 4,
	Resume                                   = 5,
	Num                                      = 6,
	EWidgetDefaultAnimation_MAX              = 7,
};

// Enum DarwinGame.EOpenState
// NumValues: 0x0006
enum class EOpenState : uint8
{
	Closed                                   = 0,
	OpenAnim                                 = 1,
	Open                                     = 2,
	CloseAnim                                = 3,
	Num                                      = 4,
	EOpenState_MAX                           = 5,
};

// Enum DarwinGame.EDebugRectDrawActiveType
// NumValues: 0x0005
enum class EDebugRectDrawActiveType : uint8
{
	DrawNone                                 = 0,
	DrawNotActive                            = 1,
	DrawIsActive                             = 2,
	DrawAllActive                            = 3,
	EDebugRectDrawActiveType_MAX             = 4,
};

// Enum DarwinGame.EDialogTimingType
// NumValues: 0x0006
enum class EDialogTimingType : uint8
{
	Appear                                   = 0,
	Dead                                     = 1,
	Steal                                    = 2,
	BaseAreaBattleFightStart                 = 3,
	Invalid                                  = 4,
	EDialogTimingType_MAX                    = 5,
};

// Enum DarwinGame.EDispatchEmergencyType
// NumValues: 0x0006
enum class EDispatchEmergencyType : uint8
{
	GetBack                                  = 0,
	DiscoveryArtifact                        = 1,
	DiscoveryMetal                           = 2,
	Num                                      = 3,
	None                                     = 255,
	EDispatchEmergencyType_MAX               = 256,
};

// Enum DarwinGame.EDungeonClearRank
// NumValues: 0x0006
enum class EDungeonClearRank : uint8
{
	Invalid                                  = 0,
	S                                        = 1,
	A                                        = 2,
	B                                        = 3,
	C                                        = 4,
	Max                                      = 5,
};

// Enum DarwinGame.EBossRoomBossType
// NumValues: 0x0005
enum class EBossRoomBossType : uint8
{
	Invalid                                  = 0,
	Random                                   = 1,
	MazeHierarchy1Boss                       = 2,
	MazeHierarchy2Boss                       = 3,
	Max                                      = 4,
};

// Enum DarwinGame.EDungeonEventEffectType
// NumValues: 0x000E
enum class EDungeonEventEffectType : uint8
{
	None                                     = 0,
	Miasma                                   = 1,
	Nightmare                                = 2,
	Anger                                    = 3,
	Dazzle                                   = 4,
	Seal                                     = 5,
	AttackForce                              = 6,
	MagicForce                               = 7,
	BlazeForce                               = 8,
	FreezeForce                              = 9,
	StormForce                               = 10,
	GroundForce                              = 11,
	HolyForce                                = 12,
	Max                                      = 13,
};

// Enum DarwinGame.EDungeonRoomType
// NumValues: 0x000B
enum class EDungeonRoomType : uint8
{
	Invalid                                  = 0,
	Lobby                                    = 1,
	SingleBattle                             = 2,
	MultiBattle                              = 3,
	MidBoss                                  = 4,
	Bonfire                                  = 5,
	TreasureBox                              = 6,
	Boss                                     = 7,
	Buff                                     = 8,
	BigStarScarBoss                          = 9,
	EDungeonRoomType_MAX                     = 10,
};

// Enum DarwinGame.EDungeonNestType
// NumValues: 0x0004
enum class EDungeonNestType : uint8
{
	Invalid                                  = 0,
	Normal                                   = 1,
	AncientBeastHome                         = 2,
	EDungeonNestType_MAX                     = 3,
};

// Enum DarwinGame.EDungeonType
// NumValues: 0x0004
enum class EDungeonType : uint8
{
	Invalid                                  = 0,
	Nest                                     = 1,
	Maze                                     = 2,
	EDungeonType_MAX                         = 3,
};

// Enum DarwinGame.EGimmickState
// NumValues: 0x0006
enum class EGimmickState : uint8
{
	None                                     = 0,
	InitializeWait                           = 1,
	Initialize                               = 2,
	Running                                  = 3,
	Clear                                    = 4,
	EGimmickState_MAX                        = 5,
};

// Enum DarwinGame.EEcologicalState
// NumValues: 0x0005
enum class EEcologicalState : uint8
{
	Invalid                                  = 0,
	SleepGesture                             = 1,
	HideGesture                              = 2,
	Num                                      = 3,
	EEcologicalState_MAX                     = 4,
};

// Enum DarwinGame.EEffectState
// NumValues: 0x0004
enum class EEffectState : uint8
{
	Play                                     = 0,
	Pause                                    = 1,
	PauseEmit                                = 2,
	EEffectState_MAX                         = 3,
};

// Enum DarwinGame.EDarwinCoordRule
// NumValues: 0x0003
enum class EDarwinCoordRule : uint8
{
	World                                    = 0,
	Relative                                 = 1,
	EDarwinCoordRule_MAX                     = 2,
};

// Enum DarwinGame.EEffectPlayType
// NumValues: 0x0003
enum class EEffectPlayType : uint8
{
	Default                                  = 0,
	Trail                                    = 1,
	EEffectPlayType_MAX                      = 2,
};

// Enum DarwinGame.EEffectProgress
// NumValues: 0x000B
enum class EEffectProgress : uint8
{
	Phase1                                   = 0,
	Phase2                                   = 1,
	Phase3                                   = 2,
	Phase4                                   = 3,
	Phase5                                   = 4,
	Phase6                                   = 5,
	Phase7                                   = 6,
	Phase8                                   = 7,
	Phase10                                  = 8,
	Invalid                                  = 9,
	EEffectProgress_MAX                      = 10,
};

// Enum DarwinGame.EKindEffectID
// NumValues: 0x0008
enum class EKindEffectID : uint8
{
	Invalid                                  = 0,
	Original                                 = 1,
	Sub1                                     = 2,
	Sub2                                     = 3,
	Sub3                                     = 4,
	Sub4                                     = 5,
	Sub5                                     = 6,
	Max                                      = 7,
};

// Enum DarwinGame.EMagicGradeEffectID
// NumValues: 0x0006
enum class EMagicGradeEffectID : uint8
{
	Invalid                                  = 0,
	Low                                      = 1,
	Middle                                   = 2,
	High                                     = 3,
	Highest                                  = 4,
	EMagicGradeEffectID_MAX                  = 5,
};

// Enum DarwinGame.EMagicShotPhaseEffectID
// NumValues: 0x0006
enum class EMagicShotPhaseEffectID : uint8
{
	Invalid                                  = 0,
	Shot                                     = 1,
	Bullet                                   = 2,
	Beam                                     = 3,
	Hit                                      = 4,
	EMagicShotPhaseEffectID_MAX              = 5,
};

// Enum DarwinGame.EShootAttackPhaseEffectID
// NumValues: 0x0006
enum class EShootAttackPhaseEffectID : uint8
{
	Invalid                                  = 0,
	Shot                                     = 1,
	Bullet                                   = 2,
	Vanish                                   = 3,
	Hit                                      = 4,
	EShootAttackPhaseEffectID_MAX            = 5,
};

// Enum DarwinGame.ESkillChainPhaseEffectID
// NumValues: 0x0005
enum class ESkillChainPhaseEffectID : uint8
{
	Invalid                                  = 0,
	Sign                                     = 1,
	Damage                                   = 2,
	End                                      = 3,
	ESkillChainPhaseEffectID_MAX             = 4,
};

// Enum DarwinGame.EEffectPatternID
// NumValues: 0x0006
enum class EEffectPatternID : uint8
{
	Invalid                                  = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	D                                        = 4,
	EEffectPatternID_MAX                     = 5,
};

// Enum DarwinGame.EEffectSizeID
// NumValues: 0x0006
enum class EEffectSizeID : uint8
{
	Invalid                                  = 0,
	S                                        = 1,
	M                                        = 2,
	L                                        = 3,
	NUM                                      = 4,
	EEffectSizeID_MAX                        = 5,
};

// Enum DarwinGame.EEmotionEffectID
// NumValues: 0x0009
enum class EEmotionEffectID : uint8
{
	Invalid                                  = 0,
	Exclamation                              = 1,
	Question                                 = 2,
	Sleep                                    = 3,
	Pleasant                                 = 4,
	Sweat                                    = 5,
	Sadness                                  = 6,
	Love                                     = 7,
	EEmotionEffectID_MAX                     = 8,
};

// Enum DarwinGame.EBossEffectID
// NumValues: 0x0003
enum class EBossEffectID : uint8
{
	Invalid                                  = 0,
	Core                                     = 1,
	EBossEffectID_MAX                        = 2,
};

// Enum DarwinGame.ECharacterCommonEffectID
// NumValues: 0x000F
enum class ECharacterCommonEffectID : uint8
{
	Invalid                                  = 0,
	FieldLink                                = 1,
	TargetFromFriend_Dot                     = 2,
	TargetFromFriend_Arrow                   = 3,
	TargetFromEnemy_Dot                      = 4,
	TargetFromEnemy_Arrow                    = 5,
	Despoil_Perfect                          = 6,
	VisionEnable                             = 7,
	BeastEye                                 = 8,
	MonsterSpecialAbilityWarpStart           = 9,
	MonsterSpecialAbilityWarpEnd             = 10,
	MonsterStuckEscape                       = 11,
	MonsterWaterSplash                       = 12,
	RivalTeamFightStart                      = 13,
	ECharacterCommonEffectID_MAX             = 14,
};

// Enum DarwinGame.EObjectCommonEffectID
// NumValues: 0x001C
enum class EObjectCommonEffectID : uint8
{
	Invalid                                  = 0,
	CoinAura                                 = 1,
	CoinGet                                  = 2,
	RarePillar                               = 3,
	StarSealAura                             = 4,
	StarSealSmog                             = 5,
	AltarDagger                              = 6,
	PedestalEmission                         = 7,
	PedestalAmbientLightBalls                = 8,
	AltarStainedGlassBorder                  = 9,
	AltarEleterialFire                       = 10,
	TreasureBoxOpen                          = 11,
	SearchCollectionPoint                    = 12,
	EleterialButterfly                       = 13,
	BonFire                                  = 14,
	RideOnEleterialWind                      = 15,
	ArtifactPointInRangeSt                   = 16,
	ArtifactPointInRangeLp                   = 17,
	MonsterVision                            = 18,
	PushWaveAppear                           = 19,
	PushWave                                 = 20,
	PushWaveDisappear                        = 21,
	DropArtifact                             = 22,
	NestDungeonEntrance                      = 23,
	PutMyTreasure                            = 24,
	TreasureBoxLand                          = 25,
	SevenStone                               = 26,
	EObjectCommonEffectID_MAX                = 27,
};

// Enum DarwinGame.EBattleCommonEffectID
// NumValues: 0x000A
enum class EBattleCommonEffectID : uint8
{
	Invalid                                  = 0,
	Chant                                    = 1,
	Guard                                    = 2,
	Electric                                 = 3,
	Elimination                              = 4,
	KujikenuKokoro                           = 5,
	GoldDrop                                 = 6,
	RampageChant                             = 7,
	ChargeBreak                              = 8,
	EBattleCommonEffectID_MAX                = 9,
};

// Enum DarwinGame.EDamageEffectID
// NumValues: 0x000F
enum class EDamageEffectID : uint8
{
	Invalid                                  = 0,
	Blow                                     = 1,
	Slash                                    = 2,
	Stab                                     = 3,
	Fire                                     = 4,
	Thunder                                  = 5,
	Explosion                                = 6,
	Freeze                                   = 7,
	Wind                                     = 8,
	Ground                                   = 9,
	Gravity                                  = 10,
	Dark                                     = 11,
	Water                                    = 12,
	Light                                    = 13,
	EDamageEffectID_MAX                      = 14,
};

// Enum DarwinGame.EObjectBreakEffectID
// NumValues: 0x0013
enum class EObjectBreakEffectID : uint8
{
	Invalid                                  = 0,
	GrassCut                                 = 1,
	Burn                                     = 2,
	BurnOut                                  = 3,
	Bush                                     = 4,
	Barrel                                   = 5,
	Box                                      = 6,
	Pot                                      = 7,
	Herb                                     = 8,
	Rock                                     = 9,
	Wood                                     = 10,
	Stamp                                    = 11,
	BossRock                                 = 12,
	BossPillar                               = 13,
	BossPillar_A                             = 14,
	BossPillar_B                             = 15,
	NormalTarget                             = 16,
	GoldTarget                               = 17,
	EObjectBreakEffectID_MAX                 = 18,
};

// Enum DarwinGame.EFootprintTypeID
// NumValues: 0x0007
enum class EFootprintTypeID : uint8
{
	Invalid                                  = 0,
	Print                                    = 1,
	Walk                                     = 2,
	Run                                      = 3,
	Jump                                     = 4,
	Gliding                                  = 5,
	EFootprintTypeID_MAX                     = 6,
};

// Enum DarwinGame.EFootprintEffectID
// NumValues: 0x000E
enum class EFootprintEffectID : uint8
{
	Invalid                                  = 0,
	Sand                                     = 1,
	Ash                                      = 2,
	Stone                                    = 3,
	Leaf_Normal                              = 4,
	Leaf_Color                               = 5,
	Grass                                    = 6,
	Flour                                    = 7,
	Snow                                     = 8,
	Lava                                     = 9,
	Mud                                      = 10,
	Ford                                     = 11,
	Waterside                                = 12,
	EFootprintEffectID_MAX                   = 13,
};

// Enum DarwinGame.EFootSmokeActionEffectTypeID
// NumValues: 0x0006
enum class EFootSmokeActionEffectTypeID : uint8
{
	None                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Jump                                     = 3,
	Land                                     = 4,
	EFootSmokeActionEffectTypeID_MAX         = 5,
};

// Enum DarwinGame.EFootTerrainTypeID
// NumValues: 0x0009
enum class EFootTerrainTypeID : uint8
{
	None                                     = 0,
	QuickSand                                = 1,
	Mud                                      = 2,
	PoisonSwamp                              = 3,
	Magma                                    = 4,
	MagmaRiver                               = 5,
	Oil                                      = 6,
	Num                                      = 7,
	EFootTerrainTypeID_MAX                   = 8,
};

// Enum DarwinGame.EPhysicalSurfaceEffectTypeID
// NumValues: 0x001A
enum class EPhysicalSurfaceEffectTypeID : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Grass                                    = 2,
	Soil                                     = 3,
	Stone                                    = 4,
	Wood                                     = 5,
	Sand                                     = 6,
	Gravel                                   = 7,
	Water                                    = 8,
	FallenLeaves                             = 9,
	GiantLeaf                                = 10,
	Mud                                      = 11,
	Snow                                     = 12,
	Ice                                      = 13,
	Metal                                    = 14,
	Carpet                                   = 15,
	DragonScale                              = 16,
	FlowerGarden                             = 17,
	VolcanicAshes                            = 18,
	Oil                                      = 19,
	Lava                                     = 20,
	VenomSwamp                               = 21,
	Cloth                                    = 22,
	GoldCoin                                 = 23,
	Num                                      = 24,
	EPhysicalSurfaceEffectTypeID_MAX         = 25,
};

// Enum DarwinGame.ESkillChainEffectID
// NumValues: 0x000B
enum class ESkillChainEffectID : uint8
{
	Invalid                                  = 0,
	Explosion                                = 1,
	Freeze                                   = 2,
	Lightning                                = 3,
	Gravity                                  = 4,
	Light                                    = 5,
	Dark                                     = 6,
	Slash                                    = 7,
	Blow                                     = 8,
	Stab                                     = 9,
	ESkillChainEffectID_MAX                  = 10,
};

// Enum DarwinGame.ESlingshotEffectID
// NumValues: 0x0022
enum class ESlingshotEffectID : uint8
{
	Invalid                                  = 0,
	Trajectory                               = 1,
	Stone                                    = 2,
	Mera                                     = 3,
	Zaba                                     = 4,
	Bagi                                     = 5,
	Jiba                                     = 6,
	Io                                       = 7,
	Hyado                                    = 8,
	Dein                                     = 9,
	Betan                                    = 10,
	Gira                                     = 11,
	Doruma                                   = 12,
	Hoimi                                    = 13,
	Behomara                                 = 14,
	MaHoimi                                  = 15,
	Baikiruto                                = 16,
	Sukara                                   = 17,
	Braze                                    = 18,
	Freeze                                   = 19,
	Storm                                    = 20,
	Ground                                   = 21,
	Sleep                                    = 22,
	Stun                                     = 23,
	Poison                                   = 24,
	Zaki                                     = 25,
	Manuha                                   = 26,
	Mahoton                                  = 27,
	Scout                                    = 28,
	ZakuZaku                                 = 29,
	KatiKati                                 = 30,
	TogeToge                                 = 31,
	Heal                                     = 32,
	ESlingshotEffectID_MAX                   = 33,
};

// Enum DarwinGame.ESelfBuffEffectID
// NumValues: 0x0008
enum class ESelfBuffEffectID : uint8
{
	Invalid                                  = 0,
	Difence                                  = 1,
	Standing                                 = 2,
	PowerPool                                = 3,
	BreathMagic                              = 4,
	Meditation                               = 5,
	SpellGuard                               = 6,
	ESelfBuffEffectID_MAX                    = 7,
};

// Enum DarwinGame.ESkillEffectID
// NumValues: 0x0061
enum class ESkillEffectID : uint8
{
	Invalid                                  = 0,
	M000_GroundShooting                      = 1,
	M000_AerialShooting                      = 2,
	M000_MultiMissile                        = 3,
	M000_Area                                = 4,
	M000_Laser                               = 5,
	M001_GroundShooting                      = 6,
	M001_AerialShooting                      = 7,
	M001_MultiMissile                        = 8,
	M001_Area                                = 9,
	M001_Laser                               = 10,
	M003_GroundShooting                      = 11,
	M003_AerialShooting                      = 12,
	M003_MultiMissile                        = 13,
	M003_Area                                = 14,
	M003_Laser                               = 15,
	M004_GroundShooting                      = 16,
	M004_AerialShooting                      = 17,
	M004_MultiMissile                        = 18,
	M004_Area                                = 19,
	M004_Laser                               = 20,
	M005_GroundShooting                      = 21,
	M005_AerialShooting                      = 22,
	M005_MultiMissile                        = 23,
	M005_Area                                = 24,
	M005_Laser                               = 25,
	M006_GroundShooting                      = 26,
	M006_AerialShooting                      = 27,
	M006_MultiMissile                        = 28,
	M006_Area                                = 29,
	M006_Laser                               = 30,
	M011_GroundShooting                      = 31,
	M011_AerialShooting                      = 32,
	M011_MultiMissile                        = 33,
	M011_Area                                = 34,
	M011_Laser                               = 35,
	M016_GroundShooting                      = 36,
	M016_AerialShooting                      = 37,
	M016_MultiMissile                        = 38,
	M016_Area                                = 39,
	M016_Laser                               = 40,
	M026_GroundShooting                      = 41,
	M026_AerialShooting                      = 42,
	M026_MultiMissile                        = 43,
	M026_Area                                = 44,
	M026_Laser                               = 45,
	M027_GroundShooting                      = 46,
	M027_AerialShooting                      = 47,
	M027_MultiMissile                        = 48,
	M027_Area                                = 49,
	M027_Laser                               = 50,
	M028_GroundShooting                      = 51,
	M028_AerialShooting                      = 52,
	M028_MultiMissile                        = 53,
	M028_Area                                = 54,
	M028_Laser                               = 55,
	M029_GroundShooting                      = 56,
	M029_AerialShooting                      = 57,
	M029_MultiMissile                        = 58,
	M029_Area                                = 59,
	M029_Laser                               = 60,
	M030_GroundShooting                      = 61,
	M030_AerialShooting                      = 62,
	M030_MultiMissile                        = 63,
	M030_Area                                = 64,
	M030_Laser                               = 65,
	M033_GroundShooting                      = 66,
	M033_AerialShooting                      = 67,
	M033_MultiMissile                        = 68,
	M033_Area                                = 69,
	M033_Laser                               = 70,
	M036_GroundShooting                      = 71,
	M036_AerialShooting                      = 72,
	M036_MultiMissile                        = 73,
	M036_Area                                = 74,
	M036_Laser                               = 75,
	M031_GroundShooting                      = 76,
	M031_AerialShooting                      = 77,
	M031_MultiMissile                        = 78,
	M031_Area                                = 79,
	M031_Laser                               = 80,
	M039_GroundShooting                      = 81,
	M039_AerialShooting                      = 82,
	M039_MultiMissile                        = 83,
	M039_Area                                = 84,
	M039_Laser                               = 85,
	M040_GroundShooting                      = 86,
	M040_AerialShooting                      = 87,
	M040_MultiMissile                        = 88,
	M040_Area                                = 89,
	M040_Laser                               = 90,
	N007_B_Slash                             = 91,
	N007_B_Shooting                          = 92,
	N007_B_Special                           = 93,
	N007_B_Reserve1                          = 94,
	N007_B_Reserve2                          = 95,
	ESkillEffectID_MAX                       = 96,
};

// Enum DarwinGame.EStatusEffectID
// NumValues: 0x0015
enum class EStatusEffectID : uint8
{
	Invalid                                  = 0,
	Stun                                     = 1,
	Poison                                   = 2,
	Sleep                                    = 3,
	Palsy                                    = 4,
	Up                                       = 5,
	Down                                     = 6,
	Dazzle                                   = 7,
	Anger                                    = 8,
	MagicSealed                              = 9,
	MagicShield                              = 10,
	AttackShield                             = 11,
	Insulatle                                = 12,
	BlazeForce                               = 13,
	FreezeForce                              = 14,
	StormForce                               = 15,
	GroundForce                              = 16,
	Miasma                                   = 17,
	HighTension                              = 18,
	Cure                                     = 19,
	EStatusEffectID_MAX                      = 20,
};

// Enum DarwinGame.EBlessMoveEffectID
// NumValues: 0x000A
enum class EBlessMoveEffectID : uint8
{
	Invalid                                  = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Shine                                    = 3,
	Dark                                     = 4,
	Poison                                   = 5,
	Sleep                                    = 6,
	Palsy                                    = 7,
	Confuse                                  = 8,
	EBlessMoveEffectID_MAX                   = 9,
};

// Enum DarwinGame.EBlessMovePhaseEffectID
// NumValues: 0x0004
enum class EBlessMovePhaseEffectID : uint8
{
	Invalid                                  = 0,
	Charge                                   = 1,
	Bless                                    = 2,
	EBlessMovePhaseEffectID_MAX              = 3,
};

// Enum DarwinGame.ESupportMagicEffectID
// NumValues: 0x0010
enum class ESupportMagicEffectID : uint8
{
	Invalid                                  = 0,
	Hoimi                                    = 1,
	Zaoraru                                  = 2,
	Baikiruto                                = 3,
	Sukara                                   = 4,
	Piora                                    = 5,
	Baha                                     = 6,
	Henatosu                                 = 7,
	Rukani                                   = 8,
	Bomie                                    = 9,
	Rariho                                   = 10,
	Mahoton                                  = 11,
	Medapani                                 = 12,
	Manuha                                   = 13,
	Kiary                                    = 14,
	ESupportMagicEffectID_MAX                = 15,
};

// Enum DarwinGame.EAttackMagicEffectID
// NumValues: 0x000D
enum class EAttackMagicEffectID : uint8
{
	Invalid                                  = 0,
	Mera                                     = 1,
	Hyado                                    = 2,
	Gira                                     = 3,
	Bagi                                     = 4,
	Io                                       = 5,
	Dein                                     = 6,
	Doruma                                   = 7,
	Ziba                                     = 8,
	Zaba                                     = 9,
	Betan                                    = 10,
	Zaki                                     = 11,
	EAttackMagicEffectID_MAX                 = 12,
};

// Enum DarwinGame.EEffectType
// NumValues: 0x0003
enum class EEffectType : uint8
{
	Particle                                 = 0,
	Trail                                    = 1,
	EEffectType_MAX                          = 2,
};

// Enum DarwinGame.EEffectDataTableID
// NumValues: 0x0014
enum class EEffectDataTableID : uint8
{
	Invalid                                  = 0,
	BattleCommon                             = 1,
	Damage                                   = 2,
	AttackMagic                              = 3,
	SupportMagic                             = 4,
	BlessMove                                = 5,
	ObjectCommon                             = 6,
	ObjectBreak                              = 7,
	CharacterCommon                          = 8,
	Status                                   = 9,
	Slingshot                                = 10,
	Footprint                                = 11,
	Emotion                                  = 12,
	SkillChain                               = 13,
	SelfBuff                                 = 14,
	Skill                                    = 15,
	Boss                                     = 16,
	FootSmoke                                = 17,
	FootTerrain                              = 18,
	EEffectDataTableID_MAX                   = 19,
};

// Enum DarwinGame.EEmojiVariationType
// NumValues: 0x0004
enum class EEmojiVariationType : uint8
{
	Normal                                   = 0,
	Symbol                                   = 1,
	MultiIcon                                = 2,
	EEmojiVariationType_MAX                  = 3,
};

// Enum DarwinGame.EEmoteMotionSwitch
// NumValues: 0x0004
enum class EEmoteMotionSwitch : uint8
{
	Group1                                   = 0,
	Group2                                   = 1,
	Num                                      = 2,
	EEmoteMotionSwitch_MAX                   = 3,
};

// Enum DarwinGame.EEmoteFaceValidType
// NumValues: 0x0008
enum class EEmoteFaceValidType : uint8
{
	IsValid                                  = 0,
	NoAnimInst                               = 1,
	NoFaceParameterID                        = 2,
	NoFaceAsset                              = 3,
	NotFaceTypeList                          = 4,
	InvalidFacePoseFrame                     = 5,
	Unknown                                  = 6,
	EEmoteFaceValidType_MAX                  = 7,
};

// Enum DarwinGame.EEmoteVocalizeType
// NumValues: 0x0005
enum class EEmoteVocalizeType : uint8
{
	None                                     = 0,
	Auto                                     = 1,
	Close                                    = 2,
	Open                                     = 3,
	EEmoteVocalizeType_MAX                   = 4,
};

// Enum DarwinGame.EEmoteBlinkType
// NumValues: 0x0005
enum class EEmoteBlinkType : uint8
{
	None                                     = 0,
	Auto                                     = 1,
	Close                                    = 2,
	Open                                     = 3,
	EEmoteBlinkType_MAX                      = 4,
};

// Enum DarwinGame.EEmoteFaceType
// NumValues: 0x000C
enum class EEmoteFaceType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Joy                                      = 2,
	Anger                                    = 3,
	Sorrow                                   = 4,
	Pleasant                                 = 5,
	Surprise                                 = 6,
	CommonNum                                = 7,
	Think                                    = 100,
	Tired                                    = 101,
	Smirk                                    = 102,
	EEmoteFaceType_MAX                       = 103,
};

// Enum DarwinGame.EEmoteBodyMotionPhase
// NumValues: 0x0004
enum class EEmoteBodyMotionPhase : uint8
{
	Start                                    = 0,
	Loop                                     = 1,
	End                                      = 2,
	EEmoteBodyMotionPhase_MAX                = 3,
};

// Enum DarwinGame.EEmoteMethod
// NumValues: 0x0009
enum class EEmoteMethod : uint8
{
	None                                     = 0,
	Stamp                                    = 1,
	BodyMotion                               = 2,
	SE                                       = 3,
	Facial                                   = 4,
	Blink                                    = 5,
	Vocalize                                 = 6,
	Num                                      = 7,
	EEmoteMethod_MAX                         = 8,
};

// Enum DarwinGame.EEmoteType
// NumValues: 0x00FB
enum class EEmoteType : uint8
{
	None                                     = 0,
	GoodFeel                                 = 1,
	Like                                     = 2,
	Surprised                                = 3,
	Question                                 = 4,
	Idea                                     = 5,
	Trouble                                  = 6,
	Amazed                                   = 7,
	Impatience                               = 8,
	Stunned                                  = 9,
	Think                                    = 10,
	Shy                                      = 11,
	Anger                                    = 12,
	Fuman                                    = 13,
	Expect                                   = 14,
	Depression                               = 15,
	Sleep                                    = 16,
	Laugh                                    = 17,
	Hot                                      = 18,
	Cold                                     = 19,
	Sadness                                  = 20,
	Praise                                   = 21,
	Hunger                                   = 22,
	CommonNum                                = 30,
	Monster00                                = 30,
	Monster01                                = 31,
	Monster02                                = 32,
	Monster03                                = 33,
	Monster04                                = 34,
	Monster05                                = 35,
	Monster06                                = 36,
	Monster07                                = 37,
	Monster08                                = 38,
	Monster09                                = 39,
	Monster10                                = 40,
	Monster11                                = 41,
	Monster12                                = 42,
	Monster13                                = 43,
	Monster14                                = 44,
	Monster15                                = 45,
	Monster16                                = 46,
	Monster17                                = 47,
	Monster18                                = 48,
	Monster19                                = 49,
	Monster20                                = 50,
	Monster21                                = 51,
	Monster22                                = 52,
	Monster23                                = 53,
	Monster24                                = 54,
	Monster25                                = 55,
	Monster26                                = 56,
	Monster27                                = 57,
	Monster28                                = 58,
	Monster29                                = 59,
	Monster30                                = 60,
	Monster31                                = 61,
	Monster32                                = 62,
	Monster33                                = 63,
	Monster34                                = 64,
	Monster35                                = 65,
	Monster36                                = 66,
	Monster37                                = 67,
	Monster38                                = 68,
	Monster39                                = 69,
	Monster40                                = 70,
	Monster41                                = 71,
	Monster42                                = 72,
	Monster43                                = 73,
	Monster44                                = 74,
	Monster45                                = 75,
	Monster46                                = 76,
	Monster47                                = 77,
	Monster48                                = 78,
	Monster49                                = 79,
	Monster50                                = 80,
	Monster51                                = 81,
	Monster52                                = 82,
	Monster53                                = 83,
	Monster54                                = 84,
	Monster55                                = 85,
	Monster56                                = 86,
	Monster57                                = 87,
	Monster58                                = 88,
	Monster59                                = 89,
	Monster60                                = 90,
	Monster61                                = 91,
	Monster62                                = 92,
	Monster63                                = 93,
	Monster64                                = 94,
	Monster65                                = 95,
	Monster66                                = 96,
	Monster67                                = 97,
	Monster68                                = 98,
	Monster69                                = 99,
	NPCUnique000                             = 100,
	NPCUnique001                             = 101,
	NPCUnique002                             = 102,
	NPCUnique003                             = 103,
	NPCUnique004                             = 104,
	NPCUnique005                             = 105,
	NPCUnique006                             = 106,
	NPCUnique007                             = 107,
	NPCUnique008                             = 108,
	NPCUnique009                             = 109,
	NPCUnique010                             = 110,
	NPCUnique011                             = 111,
	NPCUnique012                             = 112,
	NPCUnique013                             = 113,
	NPCUnique014                             = 114,
	NPCUnique015                             = 115,
	NPCUnique016                             = 116,
	NPCUnique017                             = 117,
	NPCUnique018                             = 118,
	NPCUnique019                             = 119,
	NPCUnique020                             = 120,
	NPCUnique021                             = 121,
	NPCUnique022                             = 122,
	NPCUnique023                             = 123,
	NPCUnique024                             = 124,
	NPCUnique025                             = 125,
	NPCUnique026                             = 126,
	NPCUnique027                             = 127,
	NPCUnique028                             = 128,
	NPCUnique029                             = 129,
	NPCUnique030                             = 130,
	NPCUnique031                             = 131,
	NPCUnique032                             = 132,
	NPCUnique033                             = 133,
	NPCUnique034                             = 134,
	NPCUnique035                             = 135,
	NPCUnique036                             = 136,
	NPCUnique037                             = 137,
	NPCUnique038                             = 138,
	NPCUnique039                             = 139,
	NPCUnique040                             = 140,
	NPCUnique041                             = 141,
	NPCUnique042                             = 142,
	NPCUnique043                             = 143,
	NPCUnique044                             = 144,
	NPCUnique045                             = 145,
	NPCUnique046                             = 146,
	NPCUnique047                             = 147,
	NPCUnique048                             = 148,
	NPCUnique049                             = 149,
	NPCUnique050                             = 150,
	NPCUnique051                             = 151,
	NPCUnique052                             = 152,
	NPCUnique053                             = 153,
	NPCUnique054                             = 154,
	NPCUnique055                             = 155,
	NPCUnique056                             = 156,
	NPCUnique057                             = 157,
	NPCUnique058                             = 158,
	NPCUnique059                             = 159,
	NPCUnique060                             = 160,
	NPCUnique061                             = 161,
	NPCUnique062                             = 162,
	NPCUnique063                             = 163,
	NPCUnique064                             = 164,
	NPCUnique065                             = 165,
	NPCUnique066                             = 166,
	NPCUnique067                             = 167,
	NPCUnique068                             = 168,
	NPCUnique069                             = 169,
	NPCUnique070                             = 170,
	NPCUnique071                             = 171,
	NPCUnique072                             = 172,
	NPCUnique073                             = 173,
	NPCUnique074                             = 174,
	NPCUnique075                             = 175,
	NPCUnique076                             = 176,
	NPCUnique077                             = 177,
	NPCUnique078                             = 178,
	NPCUnique079                             = 179,
	NPCUnique080                             = 180,
	NPCUnique081                             = 181,
	NPCUnique082                             = 182,
	NPCUnique083                             = 183,
	NPCUnique084                             = 184,
	NPCUnique085                             = 185,
	NPCUnique086                             = 186,
	NPCUnique087                             = 187,
	NPCUnique088                             = 188,
	NPCUnique089                             = 189,
	NPCUnique090                             = 190,
	NPCUnique091                             = 191,
	NPCUnique092                             = 192,
	NPCUnique093                             = 193,
	NPCUnique094                             = 194,
	NPCUnique095                             = 195,
	NPCUnique096                             = 196,
	NPCUnique097                             = 197,
	NPCUnique098                             = 198,
	NPCUnique099                             = 199,
	NPCUnique100                             = 200,
	NPCUnique101                             = 201,
	NPCUnique102                             = 202,
	NPCUnique103                             = 203,
	NPCUnique104                             = 204,
	NPCUnique105                             = 205,
	NPCUnique106                             = 206,
	NPCUnique107                             = 207,
	NPCUnique108                             = 208,
	NPCUnique109                             = 209,
	NPCUnique110                             = 210,
	NPCUnique111                             = 211,
	NPCUnique112                             = 212,
	NPCUnique113                             = 213,
	NPCUnique114                             = 214,
	NPCUnique115                             = 215,
	NPCUnique116                             = 216,
	NPCUnique117                             = 217,
	NPCUnique118                             = 218,
	NPCUnique119                             = 219,
	NPCUnique120                             = 220,
	NPCUnique121                             = 221,
	NPCUnique122                             = 222,
	NPCUnique123                             = 223,
	NPCUnique124                             = 224,
	NPCUnique125                             = 225,
	NPCUnique126                             = 226,
	NPCUnique127                             = 227,
	NPCUnique128                             = 228,
	NPCUnique129                             = 229,
	NPCUnique130                             = 230,
	NPCUnique131                             = 231,
	NPCUnique132                             = 232,
	NPCUnique133                             = 233,
	NPCUnique134                             = 234,
	NPCUnique135                             = 235,
	NPCUnique136                             = 236,
	NPCUnique137                             = 237,
	NPCUnique138                             = 238,
	NPCUnique139                             = 239,
	NPCUnique140                             = 240,
	NPCUnique141                             = 241,
	NPCUnique142                             = 242,
	NPCUnique143                             = 243,
	NPCUnique144                             = 244,
	NPCUnique145                             = 245,
	NPCUnique146                             = 246,
	NPCUnique147                             = 247,
	NPCUnique148                             = 248,
	NPCUnique149                             = 249,
	NPCUnique150                             = 250,
	NPCUnique151                             = 251,
	NPCUnique152                             = 252,
	NPCUnique153                             = 253,
	NPCUnique154                             = 254,
	NPCUnique155                             = 255,
	EEmoteType_MAX                           = 256,
};

// Enum DarwinGame.EEnemySpawnCoGenDistanceType
// NumValues: 0x0006
enum class EEnemySpawnCoGenDistanceType : uint8
{
	Disable                                  = 0,
	EnableFront                              = 1,
	EnableSide                               = 2,
	Inside                                   = 3,
	Outside                                  = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.EEnemySpawnGenDistanceType
// NumValues: 0x0004
enum class EEnemySpawnGenDistanceType : uint8
{
	Disable                                  = 0,
	Enable                                   = 1,
	Outside                                  = 2,
	MAX                                      = 3,
};

// Enum DarwinGame.EEnemySpawnTimeType
// NumValues: 0x0005
enum class EEnemySpawnTimeType : uint8
{
	Morning                                  = 0,
	Day                                      = 1,
	Evening                                  = 2,
	Night                                    = 3,
	MAX                                      = 4,
};

// Enum DarwinGame.EEnemySpawnSetType
// NumValues: 0x0003
enum class EEnemySpawnSetType : uint8
{
	Fix                                      = 0,
	Random                                   = 1,
	MAX                                      = 2,
};

// Enum DarwinGame.EEnemySpawnGeneratorType
// NumValues: 0x0005
enum class EEnemySpawnGeneratorType : uint8
{
	Direct                                   = 0,
	Random                                   = 1,
	Asset                                    = 2,
	None                                     = 3,
	MAX                                      = 4,
};

// Enum DarwinGame.EMonsterRegistType
// NumValues: 0x000F
enum class EMonsterRegistType : uint8
{
	TYPE_NONE                                = 0,
	TYPE_VERY_EFFECTIVE                      = 1,
	TYPE_EASY_TO_WORK                        = 2,
	TYPE_SLIGHTLY_EFFECTIVE                  = 3,
	TYPE_USUALLY                             = 4,
	TYPE_SLIGHTLY_INEFFECTIVE                = 5,
	TYPE_DIFFICULTY_TO_WORK                  = 6,
	TYPE_VERY_DIFFICULTY_TO_WORK             = 7,
	TYPE_HARDLY_WORKS                        = 8,
	TYPE_VERY_GOOD                           = 9,
	TYPE_GOOD                                = 10,
	TYPE_NORMAL                              = 11,
	TYPE_BAD                                 = 12,
	TYPE_MAX_NUM                             = 13,
	TYPE_MAX                                 = 14,
};

// Enum DarwinGame.EMonsterGrowType
// NumValues: 0x000C
enum class EMonsterGrowType : uint8
{
	TYPE_NONE                                = 0,
	TYPE_VERY_GOOD                           = 1,
	TYPE_GOOD                                = 2,
	TYPE_LITTLE_GOOD                         = 3,
	TYPE_VERY_MIDDLE                         = 4,
	TYPE_MIDDLE                              = 5,
	TYPE_LITLE_MIDDLE                        = 6,
	TYPE_LITTLE_LATE                         = 7,
	TYPE_LATE                                = 8,
	TYPE_VERY_LATE                           = 9,
	TYPE_MAX_NUM                             = 10,
	TYPE_MAX                                 = 11,
};

// Enum DarwinGame.EEnvironmentPostProcessType
// NumValues: 0x0002
enum class EEnvironmentPostProcessType : uint8
{
	Search                                   = 0,
	Max                                      = 1,
};

// Enum DarwinGame.EEnvironmentType
// NumValues: 0x000C
enum class EEnvironmentType : uint8
{
	ET_None                                  = 0,
	ET_Sunny                                 = 1,
	ET_Rainy                                 = 2,
	ET_SandStorm                             = 3,
	ET_Snowy                                 = 4,
	ET_Fog                                   = 5,
	ET_Thunderstorm                          = 6,
	ET_Sparks                                = 7,
	ET_Spore                                 = 8,
	ET_Miasma                                = 9,
	ET_Cloudy                                = 10,
	ET_MAX                                   = 11,
};

// Enum DarwinGame.EEnvironmentUpdatePhase
// NumValues: 0x0003
enum class EEnvironmentUpdatePhase : uint8
{
	EUP_Wait                                 = 0,
	EUP_UpdateNextSetting                    = 1,
	EUP_MAX                                  = 2,
};

// Enum DarwinGame.EEpisodeType
// NumValues: 0x0025
enum class EEpisodeType : uint8
{
	Base                                     = 0,
	MQ_010                                   = 1,
	MQ_020                                   = 2,
	MQ_030                                   = 3,
	MQ_040                                   = 4,
	MQ_045                                   = 5,
	MQ_110                                   = 6,
	MQ_120                                   = 7,
	MQ_130                                   = 8,
	MQ_140                                   = 9,
	MQ_150                                   = 10,
	MQ_160                                   = 11,
	MQ_170                                   = 12,
	MQ_180                                   = 13,
	MQ_190                                   = 14,
	MQ_200                                   = 15,
	SQ_KMQ_010                               = 16,
	SQ_CLV_010                               = 17,
	SQ_CAM_010                               = 18,
	SQ_CBS_010                               = 19,
	SQ_CGR_010                               = 20,
	SQ_CGG_010                               = 21,
	SQ_CNG_010                               = 22,
	SQ_CMI_010                               = 23,
	SQ_CDW_010                               = 24,
	SQ_CTB_010                               = 25,
	SQ_TRN_010                               = 26,
	SQ_TRC_010                               = 27,
	SQ_ETR_010                               = 28,
	SQ_EKD_010                               = 29,
	SQ_EBO_010                               = 30,
	SQ_DFC_010                               = 31,
	SQ_DDL_010                               = 32,
	MQ_500                                   = 33,
	CM_DAN                                   = 34,
	EpisodeMaxNum                            = 35,
	EEpisodeType_MAX                         = 36,
};

// Enum DarwinGame.ELuminousEffectType
// NumValues: 0x0006
enum class ELuminousEffectType : uint8
{
	None                                     = 0,
	Replica                                  = 1,
	Junk                                     = 2,
	Treasure                                 = 3,
	Legend                                   = 4,
	ELuminousEffectType_MAX                  = 5,
};

// Enum DarwinGame.EEventClearCheckJudge
// NumValues: 0x0007
enum class EEventClearCheckJudge : uint8
{
	LT                                       = 0,
	LE                                       = 1,
	EQ                                       = 2,
	GE                                       = 3,
	GT                                       = 4,
	NE                                       = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.EEventClearCheckType
// NumValues: 0x0007
enum class EEventClearCheckType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	Gold                                     = 2,
	Energy                                   = 3,
	Level                                    = 4,
	Flag                                     = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.EAreaEventCheckType
// NumValues: 0x0007
enum class EAreaEventCheckType : uint8
{
	Progress                                 = 0,
	FlagOn                                   = 1,
	FlagOff                                  = 2,
	ItemFirstGet                             = 3,
	ProgressAndFlagOn                        = 4,
	ProgressAndFlagOff                       = 5,
	EAreaEventCheckType_MAX                  = 6,
};

// Enum DarwinGame.EEventDataTableType
// NumValues: 0x0014
enum class EEventDataTableType : uint8
{
	None                                     = 0,
	DT_EventList                             = 1,
	DT_EventClearTable                       = 2,
	DT_EventTalkData                         = 3,
	DT_LoadLevelSequenceAssetList            = 4,
	DT_EventTrigger                          = 5,
	DT_EventTriggerPoint                     = 6,
	DT_EventSpawnMonster                     = 7,
	DT_MainScenarioPogress                   = 8,
	DT_EpisodeAlphaProgress                  = 9,
	DT_ScriptEventList                       = 10,
	DT_EventCondition                        = 11,
	DT_ForcedBattleEventTable                = 12,
	DT_EventBrancheData                      = 13,
	DT_EventEndPartyPoint                    = 14,
	DT_CecilyTextData                        = 15,
	DT_EventItemConvertTreasure              = 16,
	DT_EventBattleAutoSavePoint              = 17,
	EventDataTableMaxNum                     = 18,
	EEventDataTableType_MAX                  = 19,
};

// Enum DarwinGame.EEventTriggerCollisionType
// NumValues: 0x0004
enum class EEventTriggerCollisionType : uint8
{
	Default                                  = 0,
	Overlap                                  = 0,
	Block                                    = 1,
	EEventTriggerCollisionType_MAX           = 2,
};

// Enum DarwinGame.EEventType
// NumValues: 0x0013
enum class EEventType : uint8
{
	EventTypeNone                            = 0,
	SequencePlayEvent                        = 1,
	NPCTalkEvent                             = 2,
	NPCStationAttendant                      = 3,
	QuestTalkEvent                           = 4,
	QuestOrderEvent                          = 5,
	QuestClearEvent                          = 6,
	YadoyaEvent                              = 7,
	FastTravel                               = 8,
	StopTalkEvent                            = 9,
	ScriptEvent                              = 10,
	LiftEvent                                = 11,
	CoinGahaEvent                            = 12,
	HubReceptionEvent                        = 13,
	FacilityReceptionEvent                   = 14,
	HubReceptionEventNoSelect                = 15,
	FacilityReceptionEventNoSelect           = 16,
	EventTypeNum                             = 17,
	EEventType_MAX                           = 18,
};

// Enum DarwinGame.EFadeZOrderType
// NumValues: 0x0006
enum class EFadeZOrderType : uint8
{
	Fade_Default                             = 0,
	Fade_FarTalkWindow                       = 1,
	WhiteOut                                 = 2,
	Fade_Appraise                            = 3,
	Fade_FarDialog                           = 4,
	EFadeZOrderType_MAX                      = 5,
};

// Enum DarwinGame.EFastTravelLoadingShowType
// NumValues: 0x0005
enum class EFastTravelLoadingShowType : uint8
{
	None                                     = 0,
	PC                                       = 1,
	Train                                    = 2,
	Auto                                     = 3,
	EFastTravelLoadingShowType_MAX           = 4,
};

// Enum DarwinGame.EFastTravelWarpCategory
// NumValues: 0x0003
enum class EFastTravelWarpCategory : uint8
{
	None                                     = 0,
	ReturnHome                               = 1,
	EFastTravelWarpCategory_MAX              = 2,
};

// Enum DarwinGame.EFastTravelCategory
// NumValues: 0x0007
enum class EFastTravelCategory : uint8
{
	Zoom                                     = 0,
	Station                                  = 1,
	Event                                    = 2,
	Debug                                    = 3,
	NotMoveCheck                             = 4,
	LoadCheck                                = 5,
	EFastTravelCategory_MAX                  = 6,
};

// Enum DarwinGame.EFeatureOtherEffect
// NumValues: 0x0013
enum class EFeatureOtherEffect : uint8
{
	None                                     = 0,
	ImmediateHeal                            = 1,
	ImmediateMPHeal                          = 2,
	AutoHeal                                 = 3,
	AutoMPHeal                               = 4,
	ReduceMP                                 = 5,
	ReflectPhysics                           = 6,
	ReflectMagic                             = 7,
	DrainPhysics                             = 8,
	ReductionMagic                           = 9,
	RecoilPhysics                            = 10,
	RecoilMagic                              = 11,
	KujikenuKokoro                           = 12,
	ExpUP                                    = 13,
	DropUP                                   = 14,
	ComboAttack                              = 15,
	FoodCapacity                             = 16,
	GetFriendShip                            = 17,
	EFeatureOtherEffect_MAX                  = 18,
};

// Enum DarwinGame.EFeatureBuffType
// NumValues: 0x0004
enum class EFeatureBuffType : uint8
{
	None                                     = 0,
	MonsterForce                             = 1,
	StatusBuff                               = 2,
	EFeatureBuffType_MAX                     = 3,
};

// Enum DarwinGame.EFeatureAddUniqueAttributeType
// NumValues: 0x0004
enum class EFeatureAddUniqueAttributeType : uint8
{
	None                                     = 0,
	Stun                                     = 1,
	Weakness                                 = 2,
	EFeatureAddUniqueAttributeType_MAX       = 3,
};

// Enum DarwinGame.EFeatureAddEffectType
// NumValues: 0x0006
enum class EFeatureAddEffectType : uint8
{
	None                                     = 0,
	AtrributeAttack                          = 1,
	UniqueAtrributeAttack                    = 2,
	AtrributeCounter                         = 3,
	UniqueAtrributeCounter                   = 4,
	EFeatureAddEffectType_MAX                = 5,
};

// Enum DarwinGame.EFeatureTimeType
// NumValues: 0x0006
enum class EFeatureTimeType : uint8
{
	None                                     = 0,
	BuffExtend                               = 1,
	DebuffExtend                             = 2,
	QuickMagic                               = 3,
	QuickLinkAction                          = 4,
	EFeatureTimeType_MAX                     = 5,
};

// Enum DarwinGame.EFeatureJudgeType
// NumValues: 0x0007
enum class EFeatureJudgeType : uint8
{
	None                                     = 0,
	Hate                                     = 1,
	Critical                                 = 2,
	Scout                                    = 3,
	Guard                                    = 4,
	Resist                                   = 5,
	EFeatureJudgeType_MAX                    = 6,
};

// Enum DarwinGame.EFeatureFoodTimeRateType
// NumValues: 0x0004
enum class EFeatureFoodTimeRateType : uint8
{
	None                                     = 0,
	ShortestOne                              = 1,
	LongestOne                               = 2,
	EFeatureFoodTimeRateType_MAX             = 3,
};

// Enum DarwinGame.EFeatureActionEventType
// NumValues: 0x0004
enum class EFeatureActionEventType : uint8
{
	None                                     = 0,
	Critical                                 = 1,
	JustAvoid                                = 2,
	EFeatureActionEventType_MAX              = 3,
};

// Enum DarwinGame.EFeaturePositionType
// NumValues: 0x0004
enum class EFeaturePositionType : uint8
{
	None                                     = 0,
	Attacker                                 = 1,
	Deffender                                = 2,
	EFeaturePositionType_MAX                 = 3,
};

// Enum DarwinGame.EFeatureCondtionType
// NumValues: 0x000D
enum class EFeatureCondtionType : uint8
{
	None                                     = 0,
	Parameter                                = 1,
	DamageType                               = 2,
	TakenDamageType                          = 3,
	Weather                                  = 4,
	System                                   = 5,
	ActionEvent                              = 6,
	TakenActionEvent                         = 7,
	DamageCategory                           = 8,
	TakenDamageCategory                      = 9,
	LineageForce                             = 10,
	FoodTimeRate                             = 11,
	EFeatureCondtionType_MAX                 = 12,
};

// Enum DarwinGame.EFeatureSystemType
// NumValues: 0x000E
enum class EFeatureSystemType : uint8
{
	None                                     = 0,
	Parameter                                = 1,
	Damage                                   = 2,
	Judge                                    = 3,
	Time                                     = 4,
	Buff                                     = 5,
	Add                                      = 6,
	Slip                                     = 7,
	Other                                    = 8,
	BuffParameter                            = 9,
	Heal                                     = 10,
	Stun                                     = 11,
	SkillChainDamage                         = 12,
	EFeatureSystemType_MAX                   = 13,
};

// Enum DarwinGame.EFeatureEffectType
// NumValues: 0x0004
enum class EFeatureEffectType : uint8
{
	None                                     = 0,
	Fixed                                    = 1,
	Percentage                               = 2,
	EFeatureEffectType_MAX                   = 3,
};

// Enum DarwinGame.EFeatureType
// NumValues: 0x0004
enum class EFeatureType : uint8
{
	None                                     = 0,
	Congenital                               = 1,
	Acquired                                 = 2,
	EFeatureType_MAX                         = 3,
};

// Enum DarwinGame.EFieldActionEnum
// NumValues: 0x0016
enum class EFieldActionEnum : uint8
{
	None                                     = 0,
	Item                                     = 1,
	TreasureBox_Locked                       = 2,
	TreasureBox_UnLocked                     = 3,
	Groping                                  = 4,
	Dig                                      = 5,
	Pick                                     = 6,
	Command                                  = 7,
	HighJump                                 = 8,
	Search                                   = 9,
	Revive                                   = 10,
	Release                                  = 11,
	PickUpArtifact                           = 12,
	MonsterVision                            = 13,
	Stroke                                   = 14,
	BeastMode                                = 15,
	RotateOnly                               = 16,
	PullOut                                  = 17,
	GetArtifact                              = 18,
	Give                                     = 19,
	StartDive                                = 20,
	EFieldActionEnum_MAX                     = 21,
};

// Enum DarwinGame.EFieldPointType
// NumValues: 0x000C
enum class EFieldPointType : uint8
{
	None                                     = 0,
	Point01                                  = 1,
	Point02                                  = 2,
	Point03                                  = 3,
	Point04                                  = 4,
	Point05                                  = 5,
	Point06                                  = 6,
	Point07                                  = 7,
	Point08                                  = 8,
	Point09                                  = 9,
	Point10                                  = 10,
	Max                                      = 11,
};

// Enum DarwinGame.EFieldSectionType
// NumValues: 0x000C
enum class EFieldSectionType : uint8
{
	None                                     = 0,
	Section01                                = 1,
	Section02                                = 2,
	Section03                                = 3,
	Section04                                = 4,
	Section05                                = 5,
	Section06                                = 6,
	Section07                                = 7,
	Section08                                = 8,
	Section09                                = 9,
	Section10                                = 10,
	Max                                      = 11,
};

// Enum DarwinGame.EFieldZoneType
// NumValues: 0x000C
enum class EFieldZoneType : uint8
{
	None                                     = 0,
	Zone01                                   = 1,
	Zone02                                   = 2,
	Zone03                                   = 3,
	Zone04                                   = 4,
	Zone05                                   = 5,
	Zone06                                   = 6,
	Zone07                                   = 7,
	Zone08                                   = 8,
	Zone09                                   = 9,
	Zone10                                   = 10,
	Max                                      = 11,
};

// Enum DarwinGame.EFieldAreaType
// NumValues: 0x00C7
enum class EFieldAreaType : uint8
{
	None                                     = 0,
	Glassland                                = 1,
	Desert                                   = 2,
	Forest                                   = 3,
	Volcano                                  = 4,
	StrangeForest                            = 5,
	Subspace                                 = 6,
	Glacier                                  = 7,
	Wasteland                                = 8,
	Area01                                   = 9,
	Area02                                   = 10,
	Area03                                   = 11,
	Area04                                   = 12,
	Area05                                   = 13,
	Area06                                   = 14,
	Area07                                   = 15,
	Area08                                   = 16,
	Area09                                   = 17,
	Area10                                   = 18,
	Area11                                   = 19,
	Area12                                   = 20,
	Area13                                   = 21,
	Area14                                   = 22,
	Area15                                   = 23,
	Area16                                   = 24,
	Area17                                   = 25,
	Area18                                   = 26,
	Area19                                   = 27,
	Area20                                   = 28,
	Area21                                   = 29,
	Area22                                   = 30,
	Area23                                   = 31,
	Area24                                   = 32,
	Area25                                   = 33,
	Area26                                   = 34,
	Area27                                   = 35,
	Area28                                   = 36,
	Area29                                   = 37,
	Area30                                   = 38,
	Area31                                   = 39,
	Area32                                   = 40,
	Area33                                   = 41,
	Area34                                   = 42,
	Area35                                   = 43,
	Area36                                   = 44,
	Area37                                   = 45,
	Area38                                   = 46,
	Area39                                   = 47,
	Area40                                   = 48,
	Area41                                   = 49,
	Area42                                   = 50,
	Area43                                   = 51,
	Area44                                   = 52,
	Area45                                   = 53,
	Area46                                   = 54,
	Area47                                   = 55,
	Area48                                   = 56,
	Area49                                   = 57,
	Area50                                   = 58,
	Area51                                   = 59,
	Area52                                   = 60,
	Area53                                   = 61,
	Area54                                   = 62,
	Area55                                   = 63,
	Area56                                   = 64,
	Area57                                   = 65,
	Area58                                   = 66,
	Area59                                   = 67,
	Area60                                   = 68,
	Area61                                   = 69,
	Area62                                   = 70,
	Area63                                   = 71,
	Area64                                   = 72,
	Area65                                   = 73,
	Area66                                   = 74,
	Area67                                   = 75,
	Area68                                   = 76,
	Area69                                   = 77,
	Area70                                   = 78,
	Area71                                   = 79,
	Area72                                   = 80,
	Area73                                   = 81,
	Area74                                   = 82,
	Area75                                   = 83,
	Area76                                   = 84,
	Area77                                   = 85,
	Area78                                   = 86,
	Area79                                   = 87,
	Area80                                   = 88,
	Area81                                   = 89,
	Area82                                   = 90,
	Area83                                   = 91,
	Area84                                   = 92,
	Area85                                   = 93,
	Area86                                   = 94,
	Area87                                   = 95,
	Area88                                   = 96,
	Area89                                   = 97,
	Area90                                   = 98,
	Area91                                   = 99,
	Area92                                   = 100,
	Area93                                   = 101,
	Area94                                   = 102,
	Area95                                   = 103,
	Area96                                   = 104,
	Area97                                   = 105,
	Area98                                   = 106,
	Area99                                   = 107,
	Area100                                  = 108,
	Area101                                  = 109,
	Area102                                  = 110,
	Area103                                  = 111,
	Area104                                  = 112,
	Area105                                  = 113,
	Area106                                  = 114,
	Area107                                  = 115,
	Area108                                  = 116,
	Area109                                  = 117,
	Area110                                  = 118,
	Area111                                  = 119,
	Area112                                  = 120,
	Area113                                  = 121,
	Area114                                  = 122,
	Area115                                  = 123,
	Area116                                  = 124,
	Area117                                  = 125,
	Area118                                  = 126,
	Area119                                  = 127,
	Area120                                  = 128,
	Area121                                  = 129,
	Area122                                  = 130,
	Area123                                  = 131,
	Area124                                  = 132,
	Area125                                  = 133,
	Area126                                  = 134,
	Area127                                  = 135,
	Area128                                  = 136,
	Area129                                  = 137,
	Area130                                  = 138,
	Area131                                  = 139,
	Area132                                  = 140,
	Area133                                  = 141,
	Area134                                  = 142,
	Area135                                  = 143,
	Area136                                  = 144,
	Area137                                  = 145,
	Area138                                  = 146,
	Area139                                  = 147,
	Area140                                  = 148,
	Area141                                  = 149,
	Area142                                  = 150,
	Area143                                  = 151,
	Area144                                  = 152,
	Area145                                  = 153,
	Area146                                  = 154,
	Area147                                  = 155,
	Area148                                  = 156,
	Area149                                  = 157,
	Area150                                  = 158,
	Area151                                  = 159,
	Area152                                  = 160,
	Area153                                  = 161,
	Area154                                  = 162,
	Area155                                  = 163,
	Area156                                  = 164,
	Area157                                  = 165,
	Area158                                  = 166,
	Area159                                  = 167,
	Area160                                  = 168,
	Area161                                  = 169,
	Area162                                  = 170,
	Area163                                  = 171,
	Area164                                  = 172,
	Area165                                  = 173,
	Area166                                  = 174,
	Area167                                  = 175,
	Area168                                  = 176,
	Area169                                  = 177,
	Area170                                  = 178,
	Area171                                  = 179,
	Area172                                  = 180,
	Area173                                  = 181,
	Area174                                  = 182,
	Area175                                  = 183,
	Area176                                  = 184,
	Area177                                  = 185,
	Area178                                  = 186,
	Area179                                  = 187,
	Area180                                  = 188,
	Area181                                  = 189,
	Area182                                  = 190,
	Area183                                  = 191,
	Area184                                  = 192,
	Area185                                  = 193,
	Area186                                  = 194,
	Area187                                  = 195,
	Area188                                  = 196,
	Area189                                  = 197,
	Max                                      = 198,
};

// Enum DarwinGame.EFieldRegionType
// NumValues: 0x0004
enum class EFieldRegionType : uint8
{
	None                                     = 0,
	Region01                                 = 1,
	Region02                                 = 2,
	Max                                      = 3,
};

// Enum DarwinGame.ETextVisibility
// NumValues: 0x0004
enum class ETextVisibility : uint8
{
	BothSides                                = 0,
	FrontOnly                                = 1,
	BackOnly                                 = 2,
	ETextVisibility_MAX                      = 3,
};

// Enum DarwinGame.ECommentCategory
// NumValues: 0x0005
enum class ECommentCategory : uint8
{
	None                                     = 0,
	Review                                   = 1,
	Fixme                                    = 2,
	ViewPoint                                = 3,
	ECommentCategory_MAX                     = 4,
};

// Enum DarwinGame.EFieldTerrainEffectType
// NumValues: 0x0006
enum class EFieldTerrainEffectType : uint8
{
	None                                     = 0,
	VeryEasy                                 = 10,
	Easy                                     = 11,
	Normal                                   = 12,
	Hard                                     = 13,
	EFieldTerrainEffectType_MAX              = 14,
};

// Enum DarwinGame.EFieldTerrainType
// NumValues: 0x000C
enum class EFieldTerrainType : uint8
{
	None                                     = 0,
	QuickSand                                = 1,
	Water                                    = 2,
	Wind                                     = 3,
	PoisonSwamp                              = 4,
	Magma                                    = 5,
	MagmaRiver                               = 6,
	Oil                                      = 7,
	Mud                                      = 8,
	IceRiver                                 = 9,
	WaterFall                                = 10,
	EFieldTerrainType_MAX                    = 11,
};

// Enum DarwinGame.EFlagShape
// NumValues: 0x0004
enum class EFlagShape : uint8
{
	NONE                                     = 0,
	NORMAL                                   = 1,
	CROSS                                    = 2,
	EFlagShape_MAX                           = 3,
};

// Enum DarwinGame.EDoorStatus
// NumValues: 0x0005
enum class EDoorStatus : uint8
{
	Invalid                                  = 0,
	Close                                    = 1,
	FrontOpen                                = 2,
	BackOpen                                 = 3,
	EDoorStatus_MAX                          = 4,
};

// Enum DarwinGame.EDoorOpenType
// NumValues: 0x0005
enum class EDoorOpenType : uint8
{
	Invalid                                  = 0,
	Both                                     = 1,
	Front                                    = 2,
	Back                                     = 3,
	EDoorOpenType_MAX                        = 4,
};

// Enum DarwinGame.EFoodCalcType
// NumValues: 0x0004
enum class EFoodCalcType : uint8
{
	None                                     = 0,
	Fixed                                    = 1,
	Percentage                               = 2,
	MAX                                      = 3,
};

// Enum DarwinGame.EFoodJudgeType
// NumValues: 0x0004
enum class EFoodJudgeType : uint8
{
	None                                     = 0,
	Critical                                 = 1,
	DamageGuard                              = 2,
	MAX                                      = 3,
};

// Enum DarwinGame.EFoodEffectType
// NumValues: 0x000F
enum class EFoodEffectType : uint8
{
	None                                     = 0,
	StatusParam                              = 1,
	Resistance                               = 2,
	ActionResist                             = 3,
	MultiResist1                             = 4,
	MultiResist2                             = 5,
	RegenHP                                  = 6,
	RegenMP                                  = 7,
	Judge                                    = 8,
	AttackEffect                             = 9,
	Heal                                     = 10,
	GainEXP                                  = 11,
	LotteryDrop                              = 12,
	StunDamage                               = 13,
	MAX                                      = 14,
};

// Enum DarwinGame.EDishCategory
// NumValues: 0x0006
enum class EDishCategory : uint8
{
	None                                     = 0,
	MeatVegi                                 = 1,
	NoodlesRice                              = 2,
	Sweets                                   = 3,
	Drink                                    = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.EFoodType
// NumValues: 0x0005
enum class EFoodType : uint8
{
	None                                     = 0,
	Common                                   = 1,
	Wild                                     = 2,
	Sheff                                    = 3,
	MAX                                      = 4,
};

// Enum DarwinGame.EFootEffectActionType
// NumValues: 0x000B
enum class EFootEffectActionType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Walk                                     = 2,
	Run                                      = 3,
	Jump                                     = 4,
	Land                                     = 5,
	Crouch                                   = 6,
	CrouchMove                               = 7,
	Attack                                   = 8,
	SuckerAttack                             = 9,
	EFootEffectActionType_MAX                = 10,
};

// Enum DarwinGame.EFootEffectCategory
// NumValues: 0x0005
enum class EFootEffectCategory : uint8
{
	Sound                                    = 0,
	Smoke                                    = 1,
	Footprint                                = 2,
	All                                      = 3,
	EFootEffectCategory_MAX                  = 4,
};

// Enum DarwinGame.EForcedBattleAreaShapeType
// NumValues: 0x0005
enum class EForcedBattleAreaShapeType : uint8
{
	None                                     = 0,
	Box                                      = 1,
	Cylinder                                 = 2,
	Wall                                     = 3,
	Max                                      = 4,
};

// Enum DarwinGame.EForcedBattleAreaCollisionType
// NumValues: 0x0004
enum class EForcedBattleAreaCollisionType : uint8
{
	None                                     = 0,
	Block                                    = 1,
	OverlapEnd                               = 2,
	Max                                      = 3,
};

// Enum DarwinGame.ForcedBattleEndType
// NumValues: 0x0009
enum class EForcedBattleEndType : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Timer                                    = 2,
	Lose                                     = 3,
	GetItem                                  = 4,
	EnemyDamage                              = 5,
	Flag                                     = 6,
	Num                                      = 7,
	ForcedBattleEndType_MAX                  = 8,
};

// Enum DarwinGame.EForceMoveEventType
// NumValues: 0x0006
enum class EForceMoveEventType : uint8
{
	None                                     = 0,
	Fade                                     = 1,
	Move                                     = 2,
	Rverse                                   = 3,
	ForceMoveEventType                       = 4,
	EForceMoveEventType_MAX                  = 5,
};

// Enum DarwinGame.EForceType
// NumValues: 0x0005
enum class EForceType : uint8
{
	None                                     = 0,
	Wind                                     = 1,
	GravityToCenterOfWind                    = 2,
	QuickSand                                = 3,
	EForceType_MAX                           = 4,
};

// Enum DarwinGame.ETalkFukidashiColor
// NumValues: 0x0005
enum class ETalkFukidashiColor : uint8
{
	White                                    = 0,
	Blue                                     = 1,
	Yellow                                   = 2,
	Purple                                   = 3,
	MAX                                      = 4,
};

// Enum DarwinGame.ETalkFukidashiType
// NumValues: 0x0006
enum class ETalkFukidashiType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Cloud                                    = 2,
	Round                                    = 3,
	Star                                     = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.EFukidashiEnum
// NumValues: 0x000D
enum class EFukidashiEnum : uint8
{
	Fukidashi_Flavor                         = 0,
	Fukidashi_Talk                           = 1,
	Fukidashi_Talk_Hint                      = 2,
	Fukidashi_Quest                          = 3,
	Fukidashi_Hint_Quest                     = 4,
	Fukidashi_Enemy                          = 5,
	Fukidashi_Start_MainQuest                = 6,
	Fukidashi_Goal_MainQuest                 = 7,
	Fukidashi_Start_SubQuest                 = 8,
	Fukidashi_Goal_SubQuest                  = 9,
	Fukidashi_Start_Current_Quest            = 10,
	Fukidashi_Goal_Current_Quest             = 11,
	Fukidashi_MAX                            = 12,
};

// Enum DarwinGame.EBalloonIconType
// NumValues: 0x000E
enum class EBalloonIconType : uint8
{
	None                                     = 0,
	Talk                                     = 1,
	Talk_Hint                                = 2,
	Main_Quest_Circle                        = 3,
	Main_Quest                               = 4,
	Sub_Quest_Circle                         = 5,
	Sub_Quest                                = 6,
	Sub_Quest_Current_Circle                 = 7,
	Sub_Quest_Current                        = 8,
	Sub_Quest_Current_Target_Circle          = 9,
	Sub_Quest_Current_Target                 = 10,
	Traveller_Return                         = 11,
	Lift                                     = 12,
	EBalloonIconType_MAX                     = 13,
};

// Enum DarwinGame.EGuestType
// NumValues: 0x0003
enum class EGuestType : uint8
{
	KamyuMaya                                = 0,
	Max                                      = 1,
	All                                      = 255,
};

// Enum DarwinGame.ELayoutKeyboard
// NumValues: 0x0007
enum class ELayoutKeyboard : uint8
{
	Qwerty_English                           = 0,
	Qwerty_Italy                             = 1,
	Qwerty_Spain                             = 2,
	Qwertz                                   = 3,
	Azerty                                   = 4,
	Unset                                    = 5,
	ELayoutKeyboard_MAX                      = 6,
};

// Enum DarwinGame.ELayoutController
// NumValues: 0x0003
enum class ELayoutController : uint8
{
	Xbox                                     = 0,
	Dualshock                                = 1,
	ELayoutController_MAX                    = 2,
};

// Enum DarwinGame.EOptionBloom
// NumValues: 0x0003
enum class EOptionBloom : uint8
{
	Bloom_On                                 = 0,
	Bloom_Off                                = 1,
	Bloom_MAX                                = 2,
};

// Enum DarwinGame.EOptionReflection
// NumValues: 0x0003
enum class EOptionReflection : uint8
{
	Reflection_On                            = 0,
	Reflection_Off                           = 1,
	Reflection_MAX                           = 2,
};

// Enum DarwinGame.EOptionLOD
// NumValues: 0x0007
enum class EOptionLOD : uint8
{
	LOD_1                                    = 0,
	LOD_2                                    = 1,
	LOD_3                                    = 2,
	LOD_4                                    = 3,
	LOD_5                                    = 4,
	LOD_Num                                  = 5,
	LOD_MAX                                  = 6,
};

// Enum DarwinGame.EOptionGraphicsQuality
// NumValues: 0x0004
enum class EOptionGraphicsQuality : uint8
{
	Quality_Low                              = 0,
	Quality_Medium                           = 1,
	Quality_High                             = 2,
	Quality_MAX                              = 3,
};

// Enum DarwinGame.EOptionDensity
// NumValues: 0x0007
enum class EOptionDensity : uint8
{
	Density_1                                = 0,
	Density_2                                = 1,
	Density_3                                = 2,
	Density_4                                = 3,
	Density_5                                = 4,
	Density_Num                              = 5,
	Density_MAX                              = 6,
};

// Enum DarwinGame.EOptionShadow
// NumValues: 0x0004
enum class EOptionShadow : uint8
{
	Shadow_Low                               = 0,
	Shadow_Medium                            = 1,
	Shadow_High                              = 2,
	Shadow_MAX                               = 3,
};

// Enum DarwinGame.EOptionAmbient
// NumValues: 0x0005
enum class EOptionAmbient : uint8
{
	Ambient_None                             = 0,
	Ambient_Low                              = 1,
	Ambient_Medium                           = 2,
	Ambient_High                             = 3,
	Ambient_MAX                              = 4,
};

// Enum DarwinGame.EOptionAntialiasing
// NumValues: 0x0007
enum class EOptionAntialiasing : uint8
{
	Setting_0x                               = 0,
	Setting_1x                               = 1,
	Setting_2x                               = 2,
	Setting_3x                               = 3,
	Setting_4x                               = 4,
	Setting_5x                               = 5,
	Setting_MAX                              = 6,
};

// Enum DarwinGame.EOptionPreset
// NumValues: 0x0006
enum class EOptionPreset : uint8
{
	Preset_Low                               = 0,
	Preset_Medium                            = 1,
	Preset_High                              = 2,
	Preset_Custom                            = 3,
	Preset_Default                           = 4,
	Preset_MAX                               = 5,
};

// Enum DarwinGame.EOptionBrightness
// NumValues: 0x000C
enum class EOptionBrightness : uint8
{
	Brightness_0                             = 0,
	Brightness_1                             = 1,
	Brightness_2                             = 2,
	Brightness_3                             = 3,
	Brightness_4                             = 4,
	Brightness_5                             = 5,
	Brightness_6                             = 6,
	Brightness_7                             = 7,
	Brightness_8                             = 8,
	Brightness_9                             = 9,
	Brightness_10                            = 10,
	Brightness_MAX                           = 11,
};

// Enum DarwinGame.EOptionWindowMode
// NumValues: 0x0005
enum class EOptionWindowMode : uint8
{
	Mode_FullScreen                          = 0,
	Mode_Borderless                          = 1,
	Mode_Windowed                            = 2,
	Mode_Unset                               = 3,
	Mode_MAX                                 = 4,
};

// Enum DarwinGame.EOptionResolutionIndex
// NumValues: 0x0008
enum class EOptionResolutionIndex : uint8
{
	Index_1280x720                           = 0,
	Index_1366x768                           = 1,
	Index_1600x900                           = 2,
	Index_1920x1080                          = 3,
	Index_2560x1440                          = 4,
	Index_3840x2160                          = 5,
	Index_Unset                              = 6,
	Index_MAX                                = 7,
};

// Enum DarwinGame.EOptionSoundVolume
// NumValues: 0x0007
enum class EOptionSoundVolume : uint8
{
	Volume_None                              = 0,
	Volume_1                                 = 1,
	Volume_2                                 = 2,
	Volume_3                                 = 3,
	Volume_4                                 = 4,
	Volume_5                                 = 5,
	Volume_MAX                               = 6,
};

// Enum DarwinGame.EPartyType
// NumValues: 0x0003
enum class EPartyType : uint8
{
	Main                                     = 0,
	Max                                      = 1,
	All                                      = 255,
};

// Enum DarwinGame.EPersistentLevelID
// NumValues: 0x000F
enum class EPersistentLevelID : uint8
{
	Invalid                                  = 0,
	GameStart                                = 1,
	GameInitalize                            = 2,
	Title                                    = 3,
	MainWorld                                = 4,
	PirateShip                               = 5,
	RuinIsland                               = 6,
	TreasureIsland                           = 7,
	DebugLauncher                            = 8,
	Regulation                               = 9,
	Supervision                              = 10,
	Dummy                                    = 11,
	GameReset                                = 12,
	TrialDirectorMessage                     = 13,
	EPersistentLevelID_MAX                   = 14,
};

// Enum DarwinGame.EObjectMaterialCategory
// NumValues: 0x000A
enum class EObjectMaterialCategory : uint8
{
	Invalid                                  = 0,
	Common                                   = 1,
	Wood                                     = 2,
	Metal                                    = 3,
	Rock                                     = 4,
	Gas                                      = 5,
	Liquid                                   = 6,
	Slime                                    = 7,
	Amorphous                                = 8,
	EObjectMaterialCategory_MAX              = 9,
};

// Enum DarwinGame.EObjectWeightCategory
// NumValues: 0x0008
enum class EObjectWeightCategory : uint8
{
	Invalid                                  = 0,
	VeryLight                                = 1,
	Light                                    = 2,
	Normal                                   = 3,
	Heavy                                    = 4,
	VeryHeavy                                = 5,
	Unmeasurable                             = 6,
	EObjectWeightCategory_MAX                = 7,
};

// Enum DarwinGame.EAddProgressType
// NumValues: 0x0003
enum class EAddProgressType : uint8
{
	ALL_CLEAR                                = 0,
	RANDOM_CLEAR                             = 1,
	EAddProgressType_MAX                     = 2,
};

// Enum DarwinGame.EGameScriptCheckType
// NumValues: 0x0003
enum class EGameScriptCheckType : uint8
{
	Progress                                 = 0,
	Flag                                     = 1,
	EGameScriptCheckType_MAX                 = 2,
};

// Enum DarwinGame.EHolderGrowthType
// NumValues: 0x0007
enum class EHolderGrowthType : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Earty                                    = 2,
	Normal                                   = 3,
	Late                                     = 4,
	Num                                      = 5,
	EHolderGrowthType_MAX                    = 6,
};

// Enum DarwinGame.EGrowParameterTypeEnum
// NumValues: 0x000E
enum class EGrowParameterTypeEnum : uint8
{
	GP_Invalid                               = 0,
	GP_Type01                                = 1,
	GP_Type02                                = 2,
	GP_Type03                                = 3,
	GP_Type04                                = 4,
	GP_Type05                                = 5,
	GP_Type06                                = 6,
	GP_Type07                                = 7,
	GP_Type08                                = 8,
	GP_Type09                                = 9,
	GP_Num                                   = 10,
	GP_Start                                 = 1,
	GP_End                                   = 9,
	GP_MAX                                   = 11,
};

// Enum DarwinGame.EPatchim
// NumValues: 0x0004
enum class EPatchim : uint8
{
	NotExist                                 = 0,
	Exist                                    = 1,
	Rieul                                    = 2,
	EPatchim_MAX                             = 3,
};

// Enum DarwinGame.EHitEffectType
// NumValues: 0x0009
enum class EHitEffectType : uint8
{
	None                                     = 0,
	Physical                                 = 1,
	AttackMagic                              = 2,
	SupportMagic                             = 3,
	SlingShot                                = 4,
	Breath                                   = 5,
	SelfBuff                                 = 6,
	Skill                                    = 7,
	EHitEffectType_MAX                       = 8,
};

// Enum DarwinGame.EEndPointType
// NumValues: 0x0003
enum class EEndPointType : uint8
{
	None                                     = 0,
	MonsterVehicle                           = 1,
	EEndPointType_MAX                        = 2,
};

// Enum DarwinGame.EIndoorType
// NumValues: 0x0004
enum class EIndoorType : uint8
{
	IT_None                                  = 0,
	IT_Indoor                                = 1,
	IT_Outdoor                               = 2,
	IT_Max                                   = 3,
};

// Enum DarwinGame.EIndoorHierarchyType
// NumValues: 0x000C
enum class EIndoorHierarchyType : uint8
{
	IHT_None                                 = 0,
	IHT_FirstFloor                           = 1,
	IHT_SecondFloor                          = 2,
	IHT_ThirdFloor                           = 3,
	IHT_FourthFloor                          = 4,
	IHT_FifthFloor                           = 5,
	IHT_SixthFloor                           = 6,
	IHT_SeventhFloor                         = 7,
	IHT_EighthFloor                          = 8,
	IHT_NinthFloor                           = 9,
	IHT_TenthFloor                           = 10,
	IHT_Max                                  = 11,
};

// Enum DarwinGame.EInputGuideType
// NumValues: 0x0015
enum class EInputGuideType : uint8
{
	None                                     = 0,
	Check                                    = 1,
	Open                                     = 2,
	Pickup                                   = 3,
	Talk                                     = 4,
	Resuscitation                            = 5,
	SurpriseAttack                           = 6,
	Release                                  = 7,
	Hold                                     = 8,
	PickupArtifact                           = 9,
	DigUp                                    = 10,
	Steal                                    = 11,
	Recovery                                 = 12,
	PullOutFlag                              = 13,
	Give                                     = 14,
	GetBack                                  = 15,
	NextDungeonRoom                          = 16,
	Decide                                   = 17,
	Cancel                                   = 18,
	Back                                     = 19,
	EInputGuideType_MAX                      = 20,
};

// Enum DarwinGame.EInputType
// NumValues: 0x0006
enum class EInputType : uint8
{
	JustPressed                              = 0,
	Pressed                                  = 1,
	RepeatPressed                            = 2,
	JustReleased                             = 3,
	Released                                 = 4,
	EInputType_MAX                           = 5,
};

// Enum DarwinGame.EItemUnitNameType
// NumValues: 0x0006
enum class EItemUnitNameType : uint8
{
	None                                     = 0,
	Ko                                       = 1,
	Mai                                      = 2,
	Satu                                     = 3,
	Hon                                      = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.EItemUseTypeText
// NumValues: 0x0005
enum class EItemUseTypeText : uint8
{
	None                                     = 0,
	Use                                      = 1,
	Eat                                      = 2,
	Drink                                    = 3,
	MAX                                      = 4,
};

// Enum DarwinGame.EItemUseAreaType
// NumValues: 0x0007
enum class EItemUseAreaType : uint8
{
	None                                     = 0,
	Target                                   = 1,
	Party                                    = 2,
	Area1                                    = 3,
	Area2                                    = 4,
	Area3                                    = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.EItemUseType
// NumValues: 0x0006
enum class EItemUseType : uint8
{
	None                                     = 0,
	NG                                       = 1,
	SelectTarget                             = 2,
	Put                                      = 3,
	Recover                                  = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.EItemDiscardType
// NumValues: 0x0006
enum class EItemDiscardType : uint8
{
	None                                     = 0,
	OK                                       = 1,
	NG                                       = 2,
	Confirm1                                 = 3,
	Confirm2                                 = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.EItemDataSubType
// NumValues: 0x0008
enum class EItemDataSubType : uint8
{
	None                                     = 0,
	Trap                                     = 1,
	Bullet                                   = 2,
	Tresure                                  = 3,
	MonsterMaterial                          = 4,
	CommonMaterial                           = 5,
	Seal                                     = 6,
	MAX                                      = 7,
};

// Enum DarwinGame.EItemDataType
// NumValues: 0x0009
enum class EItemDataType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	Bullet                                   = 2,
	Important                                = 3,
	Material                                 = 4,
	Food                                     = 5,
	Recipe                                   = 6,
	Others                                   = 7,
	MAX                                      = 8,
};

// Enum DarwinGame.ELifeCycleTypeEnum
// NumValues: 0x0005
enum class ELifeCycleTypeEnum : uint8
{
	LC_None                                  = 0,
	LC_GoHome                                = 1,
	LC_GoEating                              = 2,
	LC_GoBathing                             = 3,
	LC_MaxValue                              = 4,
};

// Enum DarwinGame.ELiftPositionType
// NumValues: 0x0004
enum class ELiftPositionType : uint8
{
	Invalid                                  = 0,
	FaskullIslandUpper                       = 1,
	FaskullIslandLower                       = 2,
	ELiftPositionType_MAX                    = 3,
};

// Enum DarwinGame.ELineageCategory
// NumValues: 0x000D
enum class ELineageCategory : uint8
{
	None                                     = 0,
	Slime                                    = 1,
	Dragon                                   = 2,
	Animal                                   = 3,
	Bird                                     = 4,
	Nature                                   = 5,
	Devil                                    = 6,
	Undead                                   = 7,
	Material                                 = 8,
	Machine                                  = 9,
	Phantom                                  = 10,
	UMA                                      = 11,
	ELineageCategory_MAX                     = 12,
};

// Enum DarwinGame.EGenerateType
// NumValues: 0x0006
enum class EGenerateType : uint8
{
	None                                     = 0,
	Ground                                   = 1,
	Air                                      = 2,
	Side                                     = 3,
	Under                                    = 4,
	EGenerateType_MAX                        = 5,
};

// Enum DarwinGame.EBattleLinkType
// NumValues: 0x0007
enum class EBattleLinkType : uint8
{
	None                                     = 0,
	Launch                                   = 1,
	Slam                                     = 2,
	Blow                                     = 3,
	Comb                                     = 4,
	Range                                    = 5,
	EBattleLinkType_MAX                      = 6,
};

// Enum DarwinGame.EFieldLinkType
// NumValues: 0x0008
enum class EFieldLinkType : uint8
{
	None                                     = 0,
	Jump                                     = 1,
	Glide                                    = 2,
	Speed                                    = 3,
	Dive                                     = 4,
	Search                                   = 5,
	Num                                      = 6,
	EFieldLinkType_MAX                       = 7,
};

// Enum DarwinGame.ESpaceInsertLocale
// NumValues: 0x0009
enum class ESpaceInsertLocale : uint8
{
	None                                     = 0,
	F                                        = 1,
	G                                        = 2,
	S                                        = 3,
	FG                                       = 4,
	FS                                       = 5,
	GS                                       = 6,
	FGS                                      = 7,
	ESpaceInsertLocale_MAX                   = 8,
};

// Enum DarwinGame.ELogDataSpecialWaitType
// NumValues: 0x0003
enum class ELogDataSpecialWaitType : uint8
{
	None                                     = 0,
	GetUp                                    = 1,
	ELogDataSpecialWaitType_MAX              = 2,
};

// Enum DarwinGame.ELogDataPanelColor
// NumValues: 0x000B
enum class ELogDataPanelColor : uint8
{
	Green                                    = 0,
	Blue                                     = 1,
	Orange                                   = 2,
	SkyBlue                                  = 3,
	Purple                                   = 4,
	Pink                                     = 5,
	Red                                      = 6,
	Yellow                                   = 7,
	Gray                                     = 8,
	Num                                      = 9,
	ELogDataPanelColor_MAX                   = 10,
};

// Enum DarwinGame.ELogDataNumberType
// NumValues: 0x0004
enum class ELogDataNumberType : uint8
{
	None                                     = 0,
	Number                                   = 1,
	NumberIfMulti                            = 2,
	ELogDataNumberType_MAX                   = 3,
};

// Enum DarwinGame.ELogDataType
// NumValues: 0x0006
enum class ELogDataType : uint8
{
	None                                     = 0,
	Character                                = 1,
	Item                                     = 2,
	Coin                                     = 3,
	Quest                                    = 4,
	ELogDataType_MAX                         = 5,
};

// Enum DarwinGame.EArtifactLostFlag
// NumValues: 0x0006
enum class EArtifactLostFlag : uint32
{
	None                                     = 0,
	LostProperty                             = 2,
	Stealed                                  = 4,
	ProcessEnemyDropping                     = 8,
	All                                      = 4294967295,
	EArtifactLostFlag_MAX                    = 4294967296,
};

// Enum DarwinGame.EManagedUIGroup2
// NumValues: 0x0015
enum class EManagedUIGroup2 : uint8
{
	GiveFood                                 = 0,
	GameOver                                 = 1,
	NetworkTerms                             = 2,
	QuestOrder                               = 3,
	Ending                                   = 4,
	ArtifactReward                           = 5,
	Vision                                   = 6,
	StaffRoll                                = 7,
	Trial                                    = 8,
	ArtifactComplete                         = 9,
	TitleLogoEvent                           = 10,
	NetworkMemberSend                        = 11,
	NetworkTreasureHide                      = 12,
	NetworkTreasureHide_Inf                  = 13,
	NetworkUserProfile                       = 14,
	NetworkMemberSend_Member                 = 15,
	NetworkMemberSend_Artifact               = 16,
	DispatchStation                          = 17,
	DispatchMember                           = 18,
	Num                                      = 19,
	EManagedUIGroup2_MAX                     = 20,
};

// Enum DarwinGame.EManagedUIGroup1
// NumValues: 0x0022
enum class EManagedUIGroup1 : uint8
{
	Resident                                 = 0,
	Title                                    = 1,
	Field                                    = 2,
	Station                                  = 3,
	Dispatch                                 = 4,
	Swap                                     = 5,
	Shop                                     = 6,
	Board                                    = 7,
	Facility                                 = 8,
	BaseAreaBattle                           = 9,
	Network                                  = 10,
	Main_Item                                = 11,
	Main_Party                               = 12,
	Main_Quest                               = 13,
	Main_Dict                                = 14,
	Main_Team                                = 15,
	Main_Setting                             = 16,
	MyArtifact                               = 17,
	FoodBullet                               = 18,
	Main_Coin                                = 19,
	Estimate                                 = 20,
	PriceUp                                  = 21,
	ArtifactGet                              = 22,
	Good                                     = 23,
	Hub_Status                               = 24,
	DeliveryMonster                          = 25,
	DeliveryItem                             = 26,
	Reward                                   = 27,
	DispatchResult                           = 28,
	TravellerEvent                           = 29,
	Main_Top                                 = 30,
	MapMenu                                  = 31,
	Num                                      = 32,
	EManagedUIGroup1_MAX                     = 33,
};

// Enum DarwinGame.EManagedUIGroup
// NumValues: 0x0035
enum class EManagedUIGroup : uint8
{
	Resident                                 = 0,
	Title                                    = 1,
	Field                                    = 2,
	Station                                  = 3,
	Dispatch                                 = 4,
	Swap                                     = 5,
	Shop                                     = 6,
	Board                                    = 7,
	Facility                                 = 8,
	BaseAreaBattle                           = 9,
	Network                                  = 10,
	Main_Item                                = 11,
	Main_Party                               = 12,
	Main_Quest                               = 13,
	Main_Dict                                = 14,
	Main_Team                                = 15,
	Main_Setting                             = 16,
	MyArtifact                               = 17,
	FoodBullet                               = 18,
	Main_Coin                                = 19,
	Estimate                                 = 20,
	PriceUp                                  = 21,
	ArtifactGet                              = 22,
	Good                                     = 23,
	Hub_Status                               = 24,
	DeliveryMonster                          = 25,
	DeliveryItem                             = 26,
	Reward                                   = 27,
	DispatchResult                           = 28,
	TravellerEvent                           = 29,
	Main_Top                                 = 30,
	MapMenu                                  = 31,
	GiveFood                                 = 32,
	GameOver                                 = 33,
	NetworkTerms                             = 34,
	QuestOrder                               = 35,
	Ending                                   = 36,
	ArtifactReward                           = 37,
	Vision                                   = 38,
	StaffRoll                                = 39,
	Trial                                    = 40,
	ArtifactComplete                         = 41,
	TitleLogoEvent                           = 42,
	NetworkMemberSend                        = 43,
	NetworkTreasureHide                      = 44,
	NetworkTreasureHide_Inf                  = 45,
	NetworkUserProfile                       = 46,
	NetworkMemberSend_Member                 = 47,
	NetworkMemberSend_Artifact               = 48,
	DispatchStation                          = 49,
	DispatchMember                           = 50,
	Num                                      = 51,
	EManagedUIGroup_MAX                      = 52,
};

// Enum DarwinGame.ETalkWindowNameTabState
// NumValues: 0x0004
enum class ETalkWindowNameTabState : uint8
{
	None                                     = 0,
	Hide                                     = 1,
	Empty                                    = 2,
	MAX                                      = 3,
};

// Enum DarwinGame.EBranchParametorType
// NumValues: 0x0007
enum class EBranchParametorType : uint8
{
	Flag                                     = 0,
	Gold                                     = 1,
	Hp                                       = 2,
	Item                                     = 3,
	Level                                    = 4,
	PartyNum                                 = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.EBranchParametorJudge
// NumValues: 0x0007
enum class EBranchParametorJudge : uint8
{
	LT                                       = 0,
	LE                                       = 1,
	EQ                                       = 2,
	GE                                       = 3,
	GT                                       = 4,
	NE                                       = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.EEndType
// NumValues: 0x0005
enum class EEndType : uint8
{
	Br                                       = 0,
	End                                      = 1,
	TalkEnd                                  = 2,
	CS_Select                                = 3,
	MAX                                      = 4,
};

// Enum DarwinGame.ETextTalkChart
// NumValues: 0x0017
enum class ETextTalkChart : uint8
{
	Shop                                     = 0,
	Church                                   = 1,
	Inn                                      = 2,
	Bank                                     = 3,
	Ship                                     = 4,
	Camp                                     = 5,
	Coin                                     = 6,
	Prize                                    = 7,
	Medal                                    = 8,
	MedalBranch                              = 9,
	QuestStart                               = 10,
	QuestDelivery                            = 11,
	QuestReward                              = 12,
	QuestComplete                            = 13,
	Screen                                   = 14,
	Race                                     = 15,
	Navi                                     = 16,
	VIP                                      = 17,
	PreDive                                  = 18,
	JewelShop                                = 19,
	HatShop                                  = 20,
	None                                     = 21,
	MAX                                      = 22,
};

// Enum DarwinGame.ETextTalkFacialLower
// NumValues: 0x0007
enum class ETextTalkFacialLower : uint8
{
	FA_Low_Normal                            = 0,
	FA_Low_Angry1                            = 1,
	FA_Low_Sad1                              = 2,
	FA_Low_Smile1                            = 3,
	FA_Low_Smile2                            = 4,
	FA_Low_Tired                             = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.ETextTalkFacialUpper
// NumValues: 0x0008
enum class ETextTalkFacialUpper : uint8
{
	FA_Up_Normal                             = 0,
	FA_Up_Angry1                             = 1,
	FA_Up_Sad1                               = 2,
	FA_Up_Smile1                             = 3,
	FA_Up_Smile2                             = 4,
	FA_Up_Surprise                           = 5,
	FA_Up_Tired                              = 6,
	MAX                                      = 7,
};

// Enum DarwinGame.ETextTalkEmotion
// NumValues: 0x0028
enum class ETextTalkEmotion : uint8
{
	Talk_Normal                              = 0,
	Talk_Angry1                              = 1,
	Talk_Angry2                              = 2,
	Talk_Angry3                              = 3,
	Talk_Cry1                                = 4,
	Talk_Cry2                                = 5,
	Talk_Cry3                                = 6,
	Talk_Fear1                               = 7,
	Talk_Fear2                               = 8,
	Talk_Fear3                               = 9,
	Talk_Joy1                                = 10,
	Talk_Joy2                                = 11,
	Talk_Joy3                                = 12,
	Talk_Shock1                              = 13,
	Talk_Shock2                              = 14,
	Talk_Shock3                              = 15,
	Talk_Shy1                                = 16,
	Talk_Shy2                                = 17,
	Talk_Shy3                                = 18,
	Talk_Sigh1                               = 19,
	Talk_Sigh2                               = 20,
	Talk_Sigh3                               = 21,
	Talk_Worried1                            = 22,
	Talk_Worried2                            = 23,
	Talk_Worried3                            = 24,
	PartyTalk_Normal                         = 25,
	PartyTalk_Angry1                         = 26,
	PartyTalk_Joy1                           = 27,
	PartyTalk_Sad1                           = 28,
	PartyTalk_Shock1                         = 29,
	PartyTalk_Shock2                         = 30,
	PartyTalk_Shock2_Ed                      = 31,
	PartyTalk_Sigh1                          = 32,
	PartyTalk_Sigh2                          = 33,
	PartyTalk_Sigh2_Ed                       = 34,
	PartyTalk_Special_Martina                = 35,
	PartyTalk_Special_Sylvia                 = 36,
	PartyTalk_Special_Veronica               = 37,
	PartyTalk_Special_Ed                     = 38,
	MAX                                      = 39,
};

// Enum DarwinGame.ETextTalkIcon
// NumValues: 0x0004
enum class ETextTalkIcon : uint8
{
	None                                     = 0,
	Exclamation                              = 1,
	Question                                 = 2,
	MAX                                      = 3,
};

// Enum DarwinGame.EModeAnimMode
// NumValues: 0x0007
enum class EModeAnimMode : uint8
{
	Invalid                                  = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	D                                        = 4,
	E                                        = 5,
	EModeAnimMode_MAX                        = 6,
};

// Enum DarwinGame.EEcoGestureAnimDataID
// NumValues: 0x0005
enum class EEcoGestureAnimDataID : uint8
{
	Sleep                                    = 0,
	Hide                                     = 1,
	Num                                      = 2,
	Invalid                                  = 3,
	EEcoGestureAnimDataID_MAX                = 4,
};

// Enum DarwinGame.EMonsterEcologicalMotion
// NumValues: 0x0011
enum class EMonsterEcologicalMotion : uint8
{
	Invalid                                  = 0,
	BackStep                                 = 1,
	CautionWarp                              = 2,
	SideStepLeft                             = 3,
	SideStepRight                            = 4,
	SideStep2Left                            = 5,
	SideStep2Right                           = 6,
	TurnSlowlyL                              = 7,
	TurnSlowlyR                              = 8,
	TurnQuickL                               = 9,
	TurnQuickR                               = 10,
	ActionCycleGesture                       = 11,
	TraceWaitGesture                         = 12,
	EcoSleepGesture                          = 13,
	EcoHideGesture                           = 14,
	Num                                      = 15,
	EMonsterEcologicalMotion_MAX             = 16,
};

// Enum DarwinGame.EMonsterTimer
// NumValues: 0x0013
enum class EMonsterTimer : uint8
{
	Hearing                                  = 0,
	ActionCycle                              = 1,
	LoseSight                                = 2,
	Jump                                     = 3,
	Fall                                     = 4,
	PriorAttack                              = 5,
	Revive                                   = 6,
	Formation                                = 7,
	FormationToRelocation                    = 8,
	Escape                                   = 9,
	CloseDiscoveryUI                         = 10,
	Visible                                  = 11,
	RivalUI                                  = 12,
	CommandUI                                = 13,
	ChangesMaterialToBerserk                 = 14,
	ReturnFromWater                          = 15,
	MagicChanting                            = 16,
	Invalid                                  = 17,
	EMonsterTimer_MAX                        = 18,
};

// Enum DarwinGame.EMonsterLookAtType
// NumValues: 0x0004
enum class EMonsterLookAtType : uint8
{
	None                                     = 0,
	Away                                     = 1,
	Follow                                   = 2,
	EMonsterLookAtType_MAX                   = 3,
};

// Enum DarwinGame.EMonsterMoveType
// NumValues: 0x0003
enum class EMonsterMoveType : uint8
{
	Walk                                     = 0,
	Fly                                      = 1,
	EMonsterMoveType_MAX                     = 2,
};

// Enum DarwinGame.EMonsterBTTask
// NumValues: 0x0014
enum class EMonsterBTTask : uint8
{
	TraceTo                                  = 0,
	FormTo                                   = 1,
	JumpTo                                   = 2,
	Relocation                               = 3,
	WaitState                                = 4,
	JumpingMoveTo                            = 5,
	Warp                                     = 6,
	GazePlayer                               = 7,
	BackStep                                 = 8,
	SideStep                                 = 9,
	TurnToLocation                           = 10,
	TurnToAngle                              = 11,
	EmoteWait                                = 12,
	ActionCycleGesture                       = 13,
	SearchNearestArtifact                    = 14,
	PlayMontage                              = 15,
	SpecialAbilityStart                      = 16,
	SpecialAbilityEnd                        = 17,
	Invalid                                  = 18,
	EMonsterBTTask_MAX                       = 19,
};

// Enum DarwinGame.EMonsterService
// NumValues: 0x000F
enum class EMonsterService : uint8
{
	FarEnough                                = 0,
	CloseEnough                              = 1,
	CloseEnoughToLocation                    = 2,
	EventWhileTracing                        = 3,
	SearchTargetOutsideTerritory             = 4,
	UpdatePerception                         = 5,
	CompleteVigilance                        = 6,
	TimerRemaining                           = 7,
	EventWhileWaiting                        = 8,
	PlayReserveMotion                        = 9,
	CallingEnemy                             = 10,
	SearchInArea                             = 11,
	EscapeTimer                              = 12,
	Invalid                                  = 13,
	EMonsterService_MAX                      = 14,
};

// Enum DarwinGame.EMonsterBehavior
// NumValues: 0x0036
enum class EMonsterBehavior : uint8
{
	RandomWalk                               = 0,
	MoveCloseToLocation                      = 1,
	MoveAway                                 = 2,
	Return                                   = 3,
	MoveToAttackLocation                     = 4,
	Attack                                   = 5,
	Magic                                    = 6,
	MakeAwayLocation                         = 7,
	MakeEscapeLocation                       = 8,
	Trace                                    = 9,
	Formation                                = 10,
	Relocation                               = 11,
	Avoid                                    = 12,
	Wait                                     = 13,
	WaitActionCycle                          = 14,
	Jump                                     = 15,
	BackStep                                 = 16,
	SideStep                                 = 17,
	FieldCoordination                        = 18,
	ReturnToNavi                             = 19,
	DeepSleep                                = 20,
	EcologicalWait                           = 21,
	TurnToLocation                           = 22,
	TurnToLocationTemp                       = 23,
	TurnToAngle                              = 24,
	Warp                                     = 25,
	SetupActionLocation                      = 26,
	JumpingMoveTo                            = 27,
	MoveSelect                               = 28,
	PreAction                                = 29,
	StartActionCycle                         = 30,
	ActionCycle                              = 31,
	ActionCycleMoveSelect                    = 32,
	OneShotMotion                            = 33,
	WaitKeep                                 = 34,
	Escape                                   = 35,
	GazePlayer                               = 36,
	SearchArtifact                           = 37,
	MoveToArtifact                           = 38,
	PickUpArtifact                           = 39,
	Withdrawal                               = 40,
	EmoteWait                                = 41,
	ActionCycleGesture                       = 42,
	CautionWarp                              = 43,
	CheckDistancingToBehavior                = 44,
	SpecialAbility                           = 45,
	OriginReturn                             = 128,
	MoveToAvoidLocation                      = 129,
	FirstBarrierOn                           = 130,
	Barrier                                  = 131,
	ChangeBody                               = 132,
	Encount                                  = 133,
	None                                     = 134,
	EMonsterBehavior_MAX                     = 135,
};

// Enum DarwinGame.EMonsterUpdatePhese
// NumValues: 0x0004
enum class EMonsterUpdatePhese : uint8
{
	Initialzing                              = 0,
	FinishInitialze                          = 1,
	Normal                                   = 2,
	EMonsterUpdatePhese_MAX                  = 3,
};

// Enum DarwinGame.EDispatchMonsterType
// NumValues: 0x0002
enum class EDispatchMonsterType : uint8
{
	Num                                      = 0,
	EDispatchMonsterType_MAX                 = 1,
};

// Enum DarwinGame.ELocationOffsetDir
// NumValues: 0x0006
enum class ELocationOffsetDir : uint8
{
	Forward                                  = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Foot                                     = 4,
	ELocationOffsetDir_MAX                   = 5,
};

// Enum DarwinGame.EMonsterCombatState
// NumValues: 0x0023
enum class EMonsterCombatState : uint8
{
	Invalid                                  = 0,
	StartHostile                             = 1,
	TurnToHostilePosition                    = 2,
	MoveToHostilePosition                    = 3,
	HostileAction                            = 4,
	EndHostile                               = 5,
	StartAttack                              = 6,
	TurnToAttackPosition                     = 7,
	MoveToAttackPosition                     = 8,
	AttackAction                             = 9,
	EndAttack                                = 10,
	StartAssist                              = 11,
	TurnToAssistPosition                     = 12,
	MoveToAssistPosition                     = 13,
	AssistAction                             = 14,
	EndAssist                                = 15,
	RushAttackPreparatory                    = 16,
	RushAttackRunUp                          = 17,
	RushAttackRun                            = 18,
	RushAttackPushUp                         = 19,
	InfiltrationPreparatory                  = 20,
	InfiltrationMove                         = 21,
	InfiltrationPushUp                       = 22,
	ObstacleAvoidanceMoveto                  = 23,
	ChangeBodyInfiltrationMoveTo             = 24,
	Escape                                   = 25,
	Withdrawal                               = 26,
	MoveToArtifact                           = 27,
	PickUpArtifact                           = 28,
	Alert                                    = 29,
	PossessionSwitching                      = 30,
	Possessioning                            = 31,
	None                                     = 32,
	Num                                      = 33,
	Max                                      = 33,
};

// Enum DarwinGame.EMonsterPhase
// NumValues: 0x0004
enum class EMonsterPhase : uint8
{
	Enter                                    = 0,
	Action                                   = 1,
	Num                                      = 2,
	EMonsterPhase_MAX                        = 3,
};

// Enum DarwinGame.EMonsterInitializeStep
// NumValues: 0x0006
enum class EMonsterInitializeStep : uint8
{
	StartInitialize                          = 0,
	InitializeStep1                          = 1,
	FinishInitialize                         = 2,
	Invalid                                  = 3,
	Num                                      = 4,
	EMonsterInitializeStep_MAX               = 5,
};

// Enum DarwinGame.EMonsterBattleAIPart
// NumValues: 0x0008
enum class EMonsterBattleAIPart : uint8
{
	Invalid                                  = 0,
	Think                                    = 1,
	Distancing                               = 2,
	Action                                   = 3,
	SpecialAbility                           = 4,
	ActionCycleWaiting                       = 5,
	CautionAvoidance                         = 6,
	EMonsterBattleAIPart_MAX                 = 7,
};

// Enum DarwinGame.EMonsterBossScriptCode
// NumValues: 0x0012
enum class EMonsterBossScriptCode : uint8
{
	END                                      = 0,
	PREACTION                                = 1,
	SECUREDISTANCE                           = 2,
	ORIGINRETURN                             = 3,
	FOLLOWUP                                 = 4,
	TARGETRESELECTION                        = 5,
	GOALBEHAVIOR                             = 6,
	WAITING                                  = 7,
	PUTOFFBARRIER                            = 8,
	PUTONBARRIER                             = 9,
	GOALBEHAVIORCONT                         = 10,
	ENCOUNT                                  = 11,
	SEQCONTROLSMAX                           = 12,
	SEQCONTROLSLIV                           = 13,
	POSSESS                                  = 14,
	SEQCONTROLSTLIV                          = 15,
	Num                                      = 16,
	EMonsterBossScriptCode_MAX               = 17,
};

// Enum DarwinGame.EMonsterBossPhase
// NumValues: 0x0007
enum class EMonsterBossPhase : uint8
{
	Enter                                    = 0,
	Battle                                   = 1,
	Dying                                    = 2,
	TheEnd                                   = 3,
	GameOver                                 = 4,
	Num                                      = 5,
	EMonsterBossPhase_MAX                    = 6,
};

// Enum DarwinGame.EMonsterBossScenarioType
// NumValues: 0x0005
enum class EMonsterBossScenarioType : uint8
{
	AttackSingle                             = 0,
	AttackAll                                = 1,
	Healing                                  = 2,
	AuxSpell                                 = 3,
	EMonsterBossScenarioType_MAX             = 4,
};

// Enum DarwinGame.EMonsterBossScenarioScripts
// NumValues: 0x0006
enum class EMonsterBossScenarioScripts : uint8
{
	Attack                                   = 0,
	Healing                                  = 1,
	Spell                                    = 2,
	ReTarget                                 = 3,
	Return                                   = 4,
	EMonsterBossScenarioScripts_MAX          = 5,
};

// Enum DarwinGame.EMonsterBossActionSelectType
// NumValues: 0x0005
enum class EMonsterBossActionSelectType : uint8
{
	TargetSelect                             = 0,
	ActionSelect                             = 1,
	SelfAction                               = 2,
	Num                                      = 3,
	EMonsterBossActionSelectType_MAX         = 4,
};

// Enum DarwinGame.EMonsterBossSightType
// NumValues: 0x0007
enum class EMonsterBossSightType : uint8
{
	Front                                    = 0,
	SideFront                                = 1,
	SideBack                                 = 2,
	Back                                     = 3,
	Outsight                                 = 4,
	Num                                      = 5,
	EMonsterBossSightType_MAX                = 6,
};

// Enum DarwinGame.EMonsterBossDistanceType
// NumValues: 0x0007
enum class EMonsterBossDistanceType : uint8
{
	CloseDistance                            = 0,
	NearDistance                             = 1,
	MidDistance                              = 2,
	LongDistance                             = 3,
	Outside                                  = 4,
	Num                                      = 5,
	EMonsterBossDistanceType_MAX             = 6,
};

// Enum DarwinGame.EMonsterBossBarrierAppend
// NumValues: 0x0006
enum class EMonsterBossBarrierAppend : uint8
{
	BarrierRestraint1                        = 0,
	BarrierRestraint2                        = 1,
	BarrierRestraint3                        = 2,
	NoneAppend                               = 3,
	Num                                      = 4,
	EMonsterBossBarrierAppend_MAX            = 5,
};

// Enum DarwinGame.EMonsterBossBarrierStep
// NumValues: 0x0011
enum class EMonsterBossBarrierStep : uint8
{
	BarrierStart                             = 0,
	BarrierLoop                              = 1,
	BarrierEnd                               = 2,
	BarrierBreak                             = 3,
	BarrierRestart                           = 4,
	BarrierChargeBreak                       = 5,
	BarrierChargeBreak1                      = 6,
	BarrierChargeBreak2                      = 7,
	BarrierChargeBreak3                      = 8,
	BarrierCooling1                          = 9,
	BarrierCooling2                          = 10,
	BarrierBreakOff                          = 11,
	BarrierReturn                            = 12,
	BarrierWait                              = 13,
	BarrierOff                               = 14,
	Num                                      = 15,
	EMonsterBossBarrierStep_MAX              = 16,
};

// Enum DarwinGame.EMonsterBossRedeyeStep
// NumValues: 0x0006
enum class EMonsterBossRedeyeStep : uint8
{
	RedeyeStart                              = 0,
	RedeyeLoop                               = 1,
	RedeyeEnd                                = 2,
	RedeyeWait                               = 3,
	Num                                      = 4,
	EMonsterBossRedeyeStep_MAX               = 5,
};

// Enum DarwinGame.EMonsterBossBodyType
// NumValues: 0x0009
enum class EMonsterBossBodyType : uint8
{
	NormalBody                               = 0,
	Stg2Body                                 = 1,
	Stg3Body                                 = 2,
	AutoBody                                 = 3,
	Stg2Force                                = 4,
	Stg3Force                                = 5,
	BoostBody                                = 6,
	Num                                      = 7,
	EMonsterBossBodyType_MAX                 = 8,
};

// Enum DarwinGame.EMonsterBossCombatDuring
// NumValues: 0x0009
enum class EMonsterBossCombatDuring : uint8
{
	RushAttack                               = 0,
	InfiltrationAttack                       = 1,
	QuicksandAttack                          = 2,
	ChangeBoost                              = 3,
	ObstacleAvoidance                        = 4,
	Possessioning                            = 5,
	None                                     = 6,
	Num                                      = 7,
	EMonsterBossCombatDuring_MAX             = 8,
};

// Enum DarwinGame.EMonsterBossSensorHit
// NumValues: 0x0009
enum class EMonsterBossSensorHit : uint8
{
	NoneHit                                  = 0,
	LeftHit                                  = 1,
	RightHit                                 = 2,
	BothHit                                  = 3,
	LeftHitSoft                              = 4,
	RightHitSoft                             = 5,
	BothHitSoft                              = 6,
	Num                                      = 7,
	EMonsterBossSensorHit_MAX                = 8,
};

// Enum DarwinGame.EMonsterBossDerived
// NumValues: 0x0008
enum class EMonsterBossDerived : uint8
{
	EvilMask                                 = 0,
	GuardianBeast                            = 1,
	CursedStatue                             = 2,
	LastBossNormal                           = 3,
	CharaQuestNormal                         = 4,
	InvalidDerived                           = 5,
	Num                                      = 6,
	EMonsterBossDerived_MAX                  = 7,
};

// Enum DarwinGame.EMonsterBossForm
// NumValues: 0x0008
enum class EMonsterBossForm : uint8
{
	DesertForm                               = 0,
	VolcanoForm                              = 1,
	IceForm                                  = 2,
	LastBossForm                             = 3,
	CharaQuestForm                           = 4,
	InvalidForm                              = 5,
	Num                                      = 6,
	EMonsterBossForm_MAX                     = 7,
};

// Enum DarwinGame.EMonsterBossType
// NumValues: 0x000E
enum class EMonsterBossType : uint8
{
	DesertBoss                               = 0,
	VolcanoBoss                              = 1,
	IceBoss                                  = 2,
	DesertBossNormal                         = 3,
	VolcanoBossNormal                        = 4,
	IceBossNormal                            = 5,
	DesertBossStatue                         = 6,
	VolcanoBossStatue                        = 7,
	IceBossStatue                            = 8,
	LastBoss                                 = 9,
	CharaQuest                               = 10,
	InvalidBoss                              = 11,
	Num                                      = 12,
	EMonsterBossType_MAX                     = 13,
};

// Enum DarwinGame.EMonsterBossTargetType
// NumValues: 0x000D
enum class EMonsterBossTargetType : uint8
{
	AttackTarget                             = 0,
	Center                                   = 1,
	Home                                     = 2,
	FarSide                                  = 3,
	Fixed                                    = 4,
	FixedInsight                             = 5,
	Player                                   = 6,
	Possess                                  = 7,
	PossessCenterHigh                        = 8,
	PossessHigh                              = 9,
	Stay                                     = 10,
	Num                                      = 11,
	EMonsterBossTargetType_MAX               = 12,
};

// Enum DarwinGame.EMonsterBossJudgementLocationType
// NumValues: 0x0006
enum class EMonsterBossJudgementLocationType : uint8
{
	TempLocation                             = 0,
	AttackTarget                             = 1,
	Player                                   = 2,
	None                                     = 3,
	Num                                      = 4,
	EMonsterBossJudgementLocationType_MAX    = 5,
};

// Enum DarwinGame.EMonsterBossJudgementRangeType
// NumValues: 0x0006
enum class EMonsterBossJudgementRangeType : uint8
{
	WithinRange                              = 0,
	OutOfRange                               = 1,
	About1m                                  = 2,
	About2m                                  = 3,
	Num                                      = 4,
	EMonsterBossJudgementRangeType_MAX       = 5,
};

// Enum DarwinGame.EMonsterBossJudgementConditionType
// NumValues: 0x0004
enum class EMonsterBossJudgementConditionType : uint8
{
	ConditionOR                              = 0,
	ConditionAND                             = 1,
	Num                                      = 2,
	EMonsterBossJudgementConditionType_MAX   = 3,
};

// Enum DarwinGame.EMonsterBossTransitionType
// NumValues: 0x0005
enum class EMonsterBossTransitionType : uint8
{
	None                                     = 0,
	Start                                    = 1,
	End                                      = 2,
	Num                                      = 3,
	EMonsterBossTransitionType_MAX           = 4,
};

// Enum DarwinGame.EMonsterBossCameraControllType
// NumValues: 0x0006
enum class EMonsterBossCameraControllType : uint8
{
	None                                     = 0,
	End                                      = 1,
	Trans                                    = 2,
	Result                                   = 3,
	Num                                      = 4,
	EMonsterBossCameraControllType_MAX       = 5,
};

// Enum DarwinGame.EMonsterBossCameraType
// NumValues: 0x0010
enum class EMonsterBossCameraType : uint8
{
	None                                     = 0,
	ChangePhase                              = 1,
	RockBlast                                = 2,
	Boss_Start                               = 3,
	Boss_End                                 = 4,
	BreakLeft                                = 5,
	BreakRight                               = 6,
	BreakLeftBL                              = 7,
	BreakRightBL                             = 8,
	SpiritOn                                 = 9,
	SpiritChange1                            = 10,
	SpiritChange2                            = 11,
	SpiritChange3                            = 12,
	SpiritChange4                            = 13,
	Num                                      = 14,
	EMonsterBossCameraType_MAX               = 15,
};

// Enum DarwinGame.EMonsterBossPossessedStep
// NumValues: 0x0007
enum class EMonsterBossPossessedStep : uint8
{
	EffectWait                               = 0,
	HideStatue                               = 1,
	AppearCursedStatue                       = 2,
	AdjustPos                                = 3,
	Invalid                                  = 4,
	Num                                      = 5,
	EMonsterBossPossessedStep_MAX            = 6,
};

// Enum DarwinGame.EMonsterLastBossEffect
// NumValues: 0x0006
enum class EMonsterLastBossEffect : uint8
{
	PossedLoop                               = 0,
	Aura1                                    = 1,
	Aura2                                    = 2,
	EffectOff                                = 3,
	Num                                      = 4,
	EMonsterLastBossEffect_MAX               = 5,
};

// Enum DarwinGame.EMonsterBossLogConditionType
// NumValues: 0x0006
enum class EMonsterBossLogConditionType : uint8
{
	Default                                  = 0,
	Continuous                               = 1,
	ChargeBreak                              = 2,
	BigStun                                  = 3,
	Num                                      = 4,
	EMonsterBossLogConditionType_MAX         = 5,
};

// Enum DarwinGame.EMonsterHideObjectToComponent
// NumValues: 0x0005
enum class EMonsterHideObjectToComponent : uint8
{
	Invalid                                  = 0,
	FriendRing                               = 1,
	TargetArrow_Enemy                        = 2,
	TargetArrow_Friend                       = 3,
	EMonsterHideObjectToComponent_MAX        = 4,
};

// Enum DarwinGame.EMonsterHideEffect
// NumValues: 0x001C
enum class EMonsterHideEffect : uint8
{
	All                                      = 0,
	BattleCommon                             = 1,
	Damage                                   = 2,
	AttackMagic                              = 3,
	SupportMagic                             = 4,
	BlessMove                                = 5,
	ObjectCommon                             = 6,
	ObjectBreak                              = 7,
	CharacterCommon                          = 8,
	Status                                   = 9,
	Slingshot                                = 10,
	Footprint                                = 11,
	Emotion                                  = 12,
	SkillChain                               = 13,
	SelfBuff                                 = 14,
	Skill                                    = 15,
	Boss                                     = 16,
	FootSmoke                                = 17,
	FootTerrain                              = 18,
	Common                                   = 19,
	Ring                                     = 20,
	TargetArrow                              = 21,
	TargetArrow_Enemy                        = 22,
	TargetArrow_Friend                       = 23,
	MonsterSkill                             = 24,
	Magic                                    = 25,
	Invalid                                  = 26,
	EMonsterHideEffect_MAX                   = 27,
};

// Enum DarwinGame.EMonsterActionType
// NumValues: 0x0004
enum class EMonsterActionType : uint8
{
	Default                                  = 0,
	Always                                   = 1,
	Other                                    = 2,
	EMonsterActionType_MAX                   = 3,
};

// Enum DarwinGame.EMonsterStatus
// NumValues: 0x0006
enum class EMonsterStatus : uint8
{
	Invalid                                  = 0,
	Damaged                                  = 1,
	Healed                                   = 2,
	Battle                                   = 4,
	IntoBattle                               = 5,
	EMonsterStatus_MAX                       = 6,
};

// Enum DarwinGame.EMonsterRegisterType
// NumValues: 0x000B
enum class EMonsterRegisterType : uint8
{
	Start                                    = 0,
	MR_Misc                                  = 0,
	MR_Enemy                                 = 1,
	MR_Friend                                = 2,
	MR_Stock                                 = 3,
	MR_Guest                                 = 4,
	MR_DispatchQuest                         = 5,
	MR_UI                                    = 6,
	Num                                      = 7,
	Invalid                                  = 255,
	EMonsterRegisterType_MAX                 = 256,
};

// Enum DarwinGame.ECheckFloorDirection
// NumValues: 0x0003
enum class ECheckFloorDirection : uint8
{
	Front                                    = 0,
	Down                                     = 1,
	ECheckFloorDirection_MAX                 = 2,
};

// Enum DarwinGame.EMonsterCameraControllType
// NumValues: 0x0004
enum class EMonsterCameraControllType : uint8
{
	None                                     = 0,
	End                                      = 1,
	Num                                      = 2,
	EMonsterCameraControllType_MAX           = 3,
};

// Enum DarwinGame.EMonsterCameraType
// NumValues: 0x0004
enum class EMonsterCameraType : uint8
{
	None                                     = 0,
	Subjugation                              = 1,
	Num                                      = 2,
	EMonsterCameraType_MAX                   = 3,
};

// Enum DarwinGame.EMonsterDragonStone
// NumValues: 0x000A
enum class EMonsterDragonStone : uint8
{
	DragonHorn                               = 0,
	DragonFangs                              = 1,
	DragonWing                               = 2,
	DragonClaw                               = 3,
	DragonTail                               = 4,
	DragonEyes                               = 5,
	DragonHart                               = 6,
	Invalid                                  = 7,
	Num                                      = 8,
	EMonsterDragonStone_MAX                  = 9,
};

// Enum DarwinGame.EMonsterDeadStep
// NumValues: 0x0007
enum class EMonsterDeadStep : uint8
{
	MotionWait                               = 0,
	LevelUpMeWait                            = 1,
	LevelUpWait                              = 2,
	DestroyWait                              = 3,
	Invalid                                  = 4,
	Num                                      = 5,
	EMonsterDeadStep_MAX                     = 6,
};

// Enum DarwinGame.EMonsterThoughtType
// NumValues: 0x000D
enum class EMonsterThoughtType : uint8
{
	RandomWalk                               = 0,
	Sleep                                    = 1,
	Keeper                                   = 2,
	Berserk                                  = 3,
	Hide                                     = 4,
	Guardian                                 = 5,
	Event                                    = 6,
	Footpad                                  = 7,
	Hyena                                    = 8,
	ForceCombat                              = 9,
	RevengeRival                             = 10,
	Invalid                                  = 11,
	EMonsterThoughtType_MAX                  = 12,
};

// Enum DarwinGame.EMonsterWaitKind
// NumValues: 0x0005
enum class EMonsterWaitKind : uint8
{
	Wait                                     = 0,
	WaitAction                               = 1,
	SleepIn                                  = 2,
	SleepAction                              = 3,
	EMonsterWaitKind_MAX                     = 4,
};

// Enum DarwinGame.EMonsterMoveKind
// NumValues: 0x0005
enum class EMonsterMoveKind : uint8
{
	RandomWalk                               = 0,
	Point                                    = 1,
	Return                                   = 2,
	Patroll                                  = 3,
	EMonsterMoveKind_MAX                     = 4,
};

// Enum DarwinGame.EMonsterRelaxAction
// NumValues: 0x0004
enum class EMonsterRelaxAction : uint8
{
	Wait                                     = 0,
	Move                                     = 1,
	Special                                  = 2,
	EMonsterRelaxAction_MAX                  = 3,
};

// Enum DarwinGame.EMonsterGetUpType
// NumValues: 0x0005
enum class EMonsterGetUpType : uint8
{
	Normal                                   = 0,
	AlwaysGetUp                              = 1,
	NeverGetUp                               = 2,
	MonsterGetUpTypeNum                      = 3,
	EMonsterGetUpType_MAX                    = 4,
};

// Enum DarwinGame.EMonsterRequirementType
// NumValues: 0x0004
enum class EMonsterRequirementType : uint8
{
	None                                     = 0,
	Gold                                     = 1,
	Item                                     = 2,
	EMonsterRequirementType_MAX              = 3,
};

// Enum DarwinGame.EMonsterSort
// NumValues: 0x0008
enum class EMonsterSort : uint8
{
	Kind                                     = 0,
	Name50                                   = 1,
	Time                                     = 2,
	Level                                    = 3,
	Evaluation                               = 4,
	Motivation                               = 5,
	Num                                      = 6,
	EMonsterSort_MAX                         = 7,
};

// Enum DarwinGame.EMonsterType
// NumValues: 0x000E
enum class EMonsterType : uint8
{
	Default                                  = 0,
	StrongMonster                            = 1,
	Boss                                     = 2,
	BigStarScarBoss                          = 3,
	LastBoss                                 = 4,
	Summon                                   = 5,
	MetalDiscover                            = 6,
	ArtifactDiscover                         = 7,
	GuestPlayer                              = 8,
	BaseAreaBattle                           = 9,
	Jewel                                    = 10,
	Dungeon                                  = 11,
	Invalid                                  = 12,
	EMonsterType_MAX                         = 13,
};

// Enum DarwinGame.EVisionColorType
// NumValues: 0x000B
enum class EVisionColorType : uint8
{
	None                                     = 0,
	Monochrome                               = 1,
	HueShift                                 = 2,
	NegativePositive                         = 3,
	Red                                      = 4,
	Yellow                                   = 5,
	Posterization                            = 6,
	Holo                                     = 7,
	Aula                                     = 8,
	Num                                      = 9,
	EVisionColorType_MAX                     = 10,
};

// Enum DarwinGame.EVisionSightType
// NumValues: 0x0009
enum class EVisionSightType : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Normal                                   = 2,
	Narrow                                   = 3,
	Blur                                     = 4,
	Noise                                    = 5,
	BirdEye                                  = 6,
	Num                                      = 7,
	EVisionSightType_MAX                     = 8,
};

// Enum DarwinGame.EVisionHeightType
// NumValues: 0x0007
enum class EVisionHeightType : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Normal                                   = 2,
	High                                     = 3,
	Highest                                  = 4,
	Num                                      = 5,
	EVisionHeightType_MAX                    = 6,
};

// Enum DarwinGame.ENavLinkThroughType
// NumValues: 0x0003
enum class ENavLinkThroughType : uint8
{
	Jump                                     = 0,
	Walk                                     = 1,
	ENavLinkThroughType_MAX                  = 2,
};

// Enum DarwinGame.EMoveEventType
// NumValues: 0x0003
enum class EMoveEventType : uint8
{
	ForcedMove                               = 0,
	Warp                                     = 1,
	EMoveEventType_MAX                       = 2,
};

// Enum DarwinGame.ENpcOpenNearUIType
// NumValues: 0x0007
enum class ENpcOpenNearUIType : uint8
{
	None                                     = 0,
	Fukidahi                                 = 1,
	LocalizeIcon                             = 2,
	Stamp                                    = 3,
	EmoteEffect                              = 4,
	QuestIcon                                = 5,
	ENpcOpenNearUIType_MAX                   = 6,
};

// Enum DarwinGame.ENPCBaseAreaType
// NumValues: 0x0009
enum class ENPCBaseAreaType : uint8
{
	None                                     = 0,
	Party1                                   = 1,
	Party2                                   = 2,
	Party3                                   = 3,
	Normal                                   = 4,
	UnderGround                              = 5,
	General                                  = 6,
	Traveler                                 = 7,
	ENPCBaseAreaType_MAX                     = 8,
};

// Enum DarwinGame.ENPCEmotePart
// NumValues: 0x0008
enum class ENPCEmotePart : uint8
{
	Idle                                     = 0,
	TurnRitght                               = 1,
	TurnLeft                                 = 2,
	Talk                                     = 3,
	ExAction                                 = 4,
	Sleep                                    = 5,
	Stand2                                   = 6,
	ENPCEmotePart_MAX                        = 7,
};

// Enum DarwinGame.ENPCAiMovedState
// NumValues: 0x0007
enum class ENPCAiMovedState : uint8
{
	None                                     = 0,
	End                                      = 1,
	Delete                                   = 2,
	ExAction                                 = 3,
	ExStand                                  = 4,
	EmoteID                                  = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.ENpcSeType
// NumValues: 0x0006
enum class ENpcSeType : uint8
{
	Middle                                   = 0,
	Lowest                                   = 1,
	Low                                      = 2,
	High                                     = 3,
	Highest                                  = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.ENPCCollisionShape
// NumValues: 0x0005
enum class ENPCCollisionShape : uint8
{
	Normal                                   = 0,
	Cupsule                                  = 1,
	Box                                      = 2,
	Sphear                                   = 3,
	MAX                                      = 4,
};

// Enum DarwinGame.ENPCCollisionType
// NumValues: 0x0003
enum class ENPCCollisionType : uint8
{
	Normal                                   = 0,
	Fix                                      = 1,
	MAX                                      = 2,
};

// Enum DarwinGame.ENPCAiType
// NumValues: 0x000B
enum class ENPCAiType : uint8
{
	Normal                                   = 0,
	Sleep                                    = 1,
	RandomWalk                               = 2,
	AreaWalk                                 = 3,
	Stand2                                   = 4,
	SittingFloor                             = 5,
	SittingChair                             = 6,
	Navigate                                 = 7,
	AirNavigate                              = 8,
	Hide                                     = 9,
	MAX                                      = 10,
};

// Enum DarwinGame.ENPCPopState
// NumValues: 0x0007
enum class ENPCPopState : uint8
{
	Normal                                   = 0,
	Sleep                                    = 1,
	Extra                                    = 2,
	Float                                    = 3,
	ZeroGravity                              = 4,
	NPCPopStateNum                           = 5,
	ENPCPopState_MAX                         = 6,
};

// Enum DarwinGame.ENPCType
// NumValues: 0x000C
enum class ENPCType : uint8
{
	None                                     = 0,
	Nomal                                    = 1,
	Talk                                     = 2,
	Quest                                    = 3,
	Hint                                     = 4,
	NoTalk                                   = 5,
	Dipron                                   = 6,
	Cecily                                   = 7,
	Janema                                   = 8,
	Traveller                                = 9,
	NPCTypeNum                               = 10,
	ENPCType_MAX                             = 11,
};

// Enum DarwinGame.EMonsterActionEnum
// NumValues: 0x0004
enum class EMonsterActionEnum : uint8
{
	None                                     = 0,
	Lift                                     = 1,
	Ride                                     = 2,
	EMonsterActionEnum_MAX                   = 3,
};

// Enum DarwinGame.EObjectReactionType
// NumValues: 0x0017
enum class EObjectReactionType : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	SuckerPunch                              = 2,
	PickUp                                   = 3,
	Revive                                   = 4,
	Stroke                                   = 5,
	Release                                  = 6,
	Collection                               = 7,
	DigUp                                    = 8,
	PickUpArtifact                           = 9,
	Talk                                     = 10,
	OpenBox                                  = 11,
	OpenDoor                                 = 12,
	Search                                   = 13,
	Despoil                                  = 14,
	Cure                                     = 15,
	PullOut                                  = 16,
	GetBack                                  = 17,
	Give                                     = 18,
	Find                                     = 19,
	NextDungeonRoom                          = 20,
	Num                                      = 21,
	EObjectReactionType_MAX                  = 22,
};

// Enum DarwinGame.EObjectEffectionEnum
// NumValues: 0x0012
enum class EObjectEffectionEnum : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Slash                                    = 2,
	Contact                                  = 3,
	Search                                   = 4,
	Interval                                 = 5,
	Find                                     = 6,
	LoseSight                                = 7,
	NPCFind                                  = 8,
	NPCLoseSight                             = 9,
	BreakDown                                = 10,
	Burn                                     = 11,
	Targeted                                 = 12,
	UnTargeted                               = 13,
	EndAccess                                = 14,
	ReadyAccess                              = 15,
	NotReadyAccess                           = 16,
	EObjectEffectionEnum_MAX                 = 17,
};

// Enum DarwinGame.EObjectReactionTargetUIType
// NumValues: 0x0005
enum class EObjectReactionTargetUIType : uint8
{
	Default                                  = 0,
	ItemName                                 = 1,
	Coin                                     = 2,
	None                                     = 3,
	EObjectReactionTargetUIType_MAX          = 4,
};

// Enum DarwinGame.EObjectReactionCollisionType
// NumValues: 0x0005
enum class EObjectReactionCollisionType : uint8
{
	Invalid                                  = 0,
	Sphere                                   = 1,
	Box                                      = 2,
	Capsule                                  = 3,
	EObjectReactionCollisionType_MAX         = 4,
};

// Enum DarwinGame.EEventIDWhileAccess
// NumValues: 0x0003
enum class EEventIDWhileAccess : uint8
{
	InValid                                  = 0,
	FilledUp                                 = 1,
	EEventIDWhileAccess_MAX                  = 2,
};

// Enum DarwinGame.ECustomObjectType
// NumValues: 0x0005
enum class ECustomObjectType : uint8
{
	Player                                   = 0,
	Enemy                                    = 1,
	NPC                                      = 2,
	Parkour                                  = 3,
	ECustomObjectType_MAX                    = 4,
};

// Enum DarwinGame.EOperationModeEnum
// NumValues: 0x0004
enum class EOperationModeEnum : uint8
{
	OM_None                                  = 0,
	OM_CameraOnly                            = 1,
	OM_CanNotAnything                        = 2,
	OM_MAX                                   = 3,
};

// Enum DarwinGame.EOutbreakQuestGimmickType
// NumValues: 0x0007
enum class EOutbreakQuestGimmickType : uint8
{
	None                                     = 0,
	RevengeBattle                            = 1,
	GetBackBattle                            = 2,
	DiscoveryArtifact                        = 3,
	DiscoveryMetal                           = 4,
	GetBackQuest                             = 5,
	EOutbreakQuestGimmickType_MAX            = 6,
};

// Enum DarwinGame.EDarwinAchievementsID
// NumValues: 0x0034
enum class EDarwinAchievementsID : uint8
{
	ACH_01                                   = 0,
	ACH_02                                   = 1,
	ACH_03                                   = 2,
	ACH_04                                   = 3,
	ACH_05                                   = 4,
	ACH_06                                   = 5,
	ACH_07                                   = 6,
	ACH_08                                   = 7,
	ACH_09                                   = 8,
	ACH_10                                   = 9,
	ACH_15                                   = 10,
	ACH_16                                   = 11,
	ACH_17                                   = 12,
	ACH_18                                   = 13,
	ACH_19                                   = 14,
	ACH_20                                   = 15,
	ACH_21                                   = 16,
	ACH_22                                   = 17,
	ACH_23                                   = 18,
	ACH_24                                   = 19,
	ACH_25                                   = 20,
	ACH_27                                   = 21,
	ACH_28                                   = 22,
	ACH_29                                   = 23,
	ACH_30                                   = 24,
	ACH_31                                   = 25,
	ACH_32                                   = 26,
	ACH_33                                   = 27,
	ACH_34                                   = 28,
	ACH_35                                   = 29,
	ACH_52                                   = 30,
	ACH_54                                   = 31,
	ACH_36                                   = 32,
	ACH_37                                   = 33,
	ACH_38                                   = 34,
	ACH_39                                   = 35,
	ACH_40                                   = 36,
	ACH_53                                   = 37,
	ACH_41                                   = 38,
	ACH_42                                   = 39,
	ACH_43                                   = 40,
	ACH_55                                   = 41,
	ACH_44                                   = 42,
	ACH_45                                   = 43,
	ACH_46                                   = 44,
	ACH_47                                   = 45,
	ACH_48                                   = 46,
	ACH_51                                   = 47,
	ACH_49                                   = 48,
	ACH_50                                   = 49,
	ACH_NUM                                  = 50,
	ACH_MAX                                  = 51,
};

// Enum DarwinGame.EEnvironmentSoundPatternID
// NumValues: 0x0007
enum class EEnvironmentSoundPatternID : uint8
{
	Invalid                                  = 0,
	Pattern_0                                = 1,
	Pattern_1                                = 2,
	Pattern_2                                = 3,
	Pattern_3                                = 4,
	Pattern_4                                = 5,
	EEnvironmentSoundPatternID_MAX           = 6,
};

// Enum DarwinGame.EEnvironmentSoundCollisionType
// NumValues: 0x0004
enum class EEnvironmentSoundCollisionType : uint8
{
	Invalid                                  = 0,
	Box                                      = 1,
	Sphere                                   = 2,
	EEnvironmentSoundCollisionType_MAX       = 3,
};

// Enum DarwinGame.EPostProcessMaterialType
// NumValues: 0x0002
enum class EPostProcessMaterialType : uint8
{
	PPMT_Dummy                               = 0,
	PPMT_MAX                                 = 1,
};

// Enum DarwinGame.EQuestClearJudgeType
// NumValues: 0x0024
enum class EQuestClearJudgeType : uint8
{
	None                                     = 0,
	Gold                                     = 1,
	KillMonster                              = 2,
	ScoutMonster                             = 3,
	StealMonster                             = 4,
	DeliveryMonster                          = 5,
	ItemGet                                  = 6,
	ItemHave                                 = 7,
	ItemUse                                  = 8,
	ItemDelivery                             = 9,
	ItemBuy                                  = 10,
	ItemSell                                 = 11,
	ItemMake                                 = 12,
	Give                                     = 13,
	Collect                                  = 14,
	OrderQuest                               = 15,
	ClearQuest                               = 16,
	EventFlag                                = 17,
	TeamRank                                 = 18,
	FriendMonsterNum                         = 19,
	PlayerActionNum                          = 20,
	TargetDestroyNum                         = 21,
	DetectArtifactGet                        = 22,
	DetectArtifactNum                        = 23,
	DisplayArtifact                          = 24,
	ArtifactSum                              = 25,
	MonsterVision                            = 26,
	DestinationRect                          = 27,
	FieldLink                                = 28,
	TeamCommand                              = 29,
	KillMonsterParam                         = 30,
	RivalTeam                                = 31,
	CoinNum                                  = 32,
	FriendJoinMonster                        = 33,
	MaxNum                                   = 34,
	EQuestClearJudgeType_MAX                 = 35,
};

// Enum DarwinGame.EQuestClearTEamCommandType
// NumValues: 0x0005
enum class EQuestClearTEamCommandType : uint8
{
	None                                     = 0,
	Go                                       = 1,
	Set                                      = 2,
	MaxNum                                   = 3,
	EQuestClearTEamCommandType_MAX           = 4,
};

// Enum DarwinGame.EQuestClearPlayerActionType
// NumValues: 0x0017
enum class EQuestClearPlayerActionType : uint8
{
	None                                     = 0,
	Talk                                     = 1,
	Change                                   = 2,
	Detect                                   = 3,
	HealSelf                                 = 4,
	BeastMode                                = 5,
	SlingShot                                = 6,
	BoneFire                                 = 7,
	SpecialAttack                            = 8,
	Coin                                     = 9,
	ActionCountNum                           = 10,
	DisplayArtifact_Tresure                  = 30,
	DisplayArtifact_Junk                     = 31,
	DisplayArtifact_Seven                    = 32,
	DisplayArtifact_Upper                    = 33,
	DisplayArtifact_Replica                  = 34,
	MonsterVision_Faskull                    = 35,
	MonsterVision_Desert                     = 36,
	MonsterVision_Volcano                    = 37,
	MonsterVision_Snow                       = 38,
	MonsterVision_Forest                     = 39,
	MaxNum                                   = 40,
	EQuestClearPlayerActionType_MAX          = 41,
};

// Enum DarwinGame.EQuestCountClearType
// NumValues: 0x0008
enum class EQuestCountClearType : uint8
{
	QUEST_CLEAR_TYPE_ETC                     = 0,
	QUEST_CLEAR_TYPE_GET_GOLD                = 1,
	QUEST_CLEAR_TYPE_KILL_MONCSTR            = 2,
	QUEST_CLEAR_TYPE_SCOUT_MONCSTR           = 3,
	QUEST_CLEAR_TYPE_GET_ITEM                = 4,
	QUEST_CLEAR_TYPE_USE_ITEM                = 5,
	QUEST_CLEAR_TYPE_DELIVERY_ITEM           = 6,
	QUEST_CLEAR_TYPE_MAX                     = 7,
};

// Enum DarwinGame.EQuestPointType
// NumValues: 0x000A
enum class EQuestPointType : uint8
{
	QuestDestination                         = 0,
	EventPoint                               = 1,
	NPCPoint                                 = 2,
	NPC_ID                                   = 3,
	RevengeBattleQuest                       = 4,
	EmergencyQuest                           = 5,
	TreasureMapQuest                         = 6,
	GetBackQuest                             = 7,
	DailyQuestDestination                    = 8,
	MAX                                      = 9,
};

// Enum DarwinGame.EQuestPointState
// NumValues: 0x0004
enum class EQuestPointState : uint8
{
	None                                     = 0,
	Exclamation                              = 1,
	Star                                     = 2,
	EQuestPointState_MAX                     = 3,
};

// Enum DarwinGame.EQuestClearStartType
// NumValues: 0x0003
enum class EQuestClearStartType : uint8
{
	Auto                                     = 0,
	Link                                     = 1,
	MAX                                      = 2,
};

// Enum DarwinGame.EQuestConjunctionType
// NumValues: 0x0003
enum class EQuestConjunctionType : uint8
{
	And                                      = 0,
	Or                                       = 1,
	MAX                                      = 2,
};

// Enum DarwinGame.EQuestRank
// NumValues: 0x0006
enum class EQuestRank : uint8
{
	Easy                                     = 0,
	Nomal                                    = 1,
	Hard                                     = 2,
	VeryHard                                 = 3,
	MaxNum                                   = 4,
	EQuestRank_MAX                           = 5,
};

// Enum DarwinGame.EQuestState
// NumValues: 0x000A
enum class EQuestState : uint8
{
	None                                     = 0,
	Close                                    = 1,
	Open                                     = 2,
	Order                                    = 3,
	Clear                                    = 4,
	Cleared                                  = 5,
	Update                                   = 6,
	Failed                                   = 7,
	MaxNum                                   = 8,
	EQuestState_MAX                          = 9,
};

// Enum DarwinGame.EQuestType
// NumValues: 0x002C
enum class EQuestType : uint8
{
	MQ_010                                   = 0,
	MQ_020                                   = 1,
	MQ_030                                   = 2,
	MQ_040                                   = 3,
	MQ_045                                   = 4,
	MQ_110                                   = 5,
	MQ_120                                   = 6,
	MQ_130                                   = 7,
	MQ_140                                   = 8,
	MQ_150                                   = 9,
	MQ_160                                   = 10,
	MQ_170                                   = 11,
	MQ_180                                   = 12,
	MQ_190                                   = 13,
	MQ_200                                   = 14,
	MQ_500                                   = 15,
	SQ_KMQ_010                               = 20,
	SQ_CLV_010                               = 21,
	SQ_CAM_010                               = 22,
	SQ_CBS_010                               = 23,
	SQ_CGR_010                               = 24,
	SQ_CGG_010                               = 25,
	SQ_CNG_010                               = 26,
	SQ_CMI_010                               = 27,
	SQ_CKG_010                               = 28,
	SQ_CTB_010                               = 29,
	SQ_CDW_010                               = 30,
	SQ_TRN_010                               = 40,
	SQ_TRC_010                               = 70,
	SQ_DRM_010                               = 100,
	SQ_ETR_010                               = 120,
	SQ_EKD_010                               = 121,
	SQ_EBO_010                               = 122,
	DQ_BA_001                                = 150,
	RQ_BA_001                                = 160,
	EQ_001                                   = 170,
	NQ_001                                   = 180,
	TQ_001                                   = 190,
	GQ_001                                   = 200,
	SQ_DFC_010                               = 210,
	SQ_DDL_010                               = 220,
	SQ_TF_010                                = 230,
	QuestTypeMaxNum                          = 231,
	EQuestType_MAX                           = 232,
};

// Enum DarwinGame.EQuestCategory
// NumValues: 0x000C
enum class EQuestCategory : uint8
{
	Main                                     = 0,
	Seven                                    = 1,
	Train                                    = 2,
	Chara                                    = 3,
	Team                                     = 4,
	Daily                                    = 5,
	Treasure                                 = 6,
	Dispatch                                 = 7,
	Network                                  = 8,
	TeamFlag                                 = 9,
	QuestCategoryNum                         = 10,
	EQuestCategory_MAX                       = 11,
};

// Enum DarwinGame.EQuestDestinationRectShapeType
// NumValues: 0x0004
enum class EQuestDestinationRectShapeType : uint8
{
	Box                                      = 0,
	Capsule                                  = 1,
	Sphere                                   = 2,
	Max                                      = 3,
};

// Enum DarwinGame.EQuestClearRandamTableCategory
// NumValues: 0x0008
enum class EQuestClearRandamTableCategory : uint8
{
	None                                     = 0,
	Item                                     = 1,
	Monster                                  = 2,
	BulletRecipe                             = 3,
	FoodRecipe                               = 4,
	Material                                 = 5,
	Num                                      = 6,
	EQuestClearRandamTableCategory_MAX       = 7,
};

// Enum DarwinGame.EQuestArtifactSmallCategory
// NumValues: 0x001A
enum class EQuestArtifactSmallCategory : uint8
{
	SevenStone                               = 0,
	Legend                                   = 1,
	History                                  = 2,
	PlayMemory                               = 3,
	DestnyTresure                            = 4,
	DragonLand                               = 5,
	LegWeapon                                = 6,
	LegArmor                                 = 7,
	LegTresure                               = 8,
	Weapon                                   = 9,
	Armor                                    = 10,
	Accessory                                = 11,
	Tresure                                  = 12,
	Item                                     = 13,
	Figure                                   = 14,
	Deamon                                   = 15,
	Monster                                  = 16,
	Another                                  = 17,
	Card                                     = 18,
	Jewel                                    = 19,
	Fake                                     = 20,
	Costume                                  = 21,
	MonsterJewel                             = 22,
	Memory                                   = 23,
	Num                                      = 24,
	EQuestArtifactSmallCategory_MAX          = 25,
};

// Enum DarwinGame.EQuestArtifactCategory
// NumValues: 0x0010
enum class EQuestArtifactCategory : uint8
{
	None                                     = 0,
	Weapon                                   = 1,
	Armor                                    = 2,
	Accessory                                = 3,
	Treasure                                 = 4,
	Item                                     = 5,
	DQ_A                                     = 6,
	DQ_B                                     = 7,
	DQ_C                                     = 8,
	Fig_Mons1                                = 9,
	Fig_Mons2                                = 10,
	Card                                     = 11,
	Correct1                                 = 12,
	Correct2                                 = 13,
	Num                                      = 14,
	EQuestArtifactCategory_MAX               = 15,
};

// Enum DarwinGame.EQuestArtifactQuality
// NumValues: 0x0008
enum class EQuestArtifactQuality : uint8
{
	D                                        = 0,
	C                                        = 1,
	B                                        = 2,
	A                                        = 3,
	S                                        = 4,
	SS                                       = 5,
	Num                                      = 6,
	EQuestArtifactQuality_MAX                = 7,
};

// Enum DarwinGame.EQuestArtifactTrigger
// NumValues: 0x0004
enum class EQuestArtifactTrigger : uint8
{
	Local                                    = 0,
	Total                                    = 1,
	Num                                      = 2,
	EQuestArtifactTrigger_MAX                = 3,
};

// Enum DarwinGame.EQuestClearCollectionMap
// NumValues: 0x0009
enum class EQuestClearCollectionMap : uint8
{
	None                                     = 0,
	Faskull                                  = 1,
	Desert                                   = 2,
	Volcano                                  = 3,
	Snow                                     = 4,
	Forest                                   = 5,
	Random                                   = 6,
	All                                      = 7,
	EQuestClearCollectionMap_MAX             = 8,
};

// Enum DarwinGame.EQuestClearItemTarget
// NumValues: 0x0005
enum class EQuestClearItemTarget : uint8
{
	None                                     = 0,
	Friend                                   = 1,
	Enemy                                    = 2,
	All                                      = 3,
	EQuestClearItemTarget_MAX                = 4,
};

// Enum DarwinGame.EQuestClearItemConditionType
// NumValues: 0x0009
enum class EQuestClearItemConditionType : uint8
{
	None                                     = 0,
	Get                                      = 1,
	Have                                     = 2,
	Use                                      = 3,
	Delivery                                 = 4,
	Buy                                      = 5,
	Sell                                     = 6,
	Make                                     = 7,
	EQuestClearItemConditionType_MAX         = 8,
};

// Enum DarwinGame.EQuestClearMonsterIsNightmare
// NumValues: 0x0005
enum class EQuestClearMonsterIsNightmare : uint8
{
	None                                     = 0,
	Enable                                   = 1,
	Disable                                  = 2,
	Num                                      = 3,
	EQuestClearMonsterIsNightmare_MAX        = 4,
};

// Enum DarwinGame.EQuestClearMonsterConditionType
// NumValues: 0x0008
enum class EQuestClearMonsterConditionType : uint8
{
	None                                     = 0,
	Kill                                     = 1,
	Scout                                    = 2,
	Steal                                    = 3,
	Delivery                                 = 4,
	FriendJoin                               = 5,
	Num                                      = 6,
	EQuestClearMonsterConditionType_MAX      = 7,
};

// Enum DarwinGame.EDifficulty
// NumValues: 0x0004
enum class EDifficulty : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	EDifficulty_MAX                          = 3,
};

// Enum DarwinGame.EResistanceCalcType
// NumValues: 0x0009
enum class EResistanceCalcType : uint8
{
	Weak                                     = 0,
	Normal                                   = 1,
	ThreeQuarter                             = 2,
	Half                                     = 3,
	Quarter                                  = 4,
	Nothing                                  = 5,
	Absorb                                   = 6,
	Reflect                                  = 7,
	EResistanceCalcType_MAX                  = 8,
};

// Enum DarwinGame.EResistanceType
// NumValues: 0x001A
enum class EResistanceType : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Water                                    = 2,
	Wind                                     = 3,
	Earth                                    = 4,
	Explosion                                = 5,
	Freezing                                 = 6,
	Lightning                                = 7,
	Gravity                                  = 8,
	Light                                    = 9,
	Dark                                     = 10,
	Slash                                    = 11,
	Blow                                     = 12,
	Piercing                                 = 13,
	Sleep                                    = 14,
	Stun                                     = 15,
	Poison                                   = 16,
	Paralysis                                = 17,
	Confusion                                = 18,
	Death                                    = 19,
	Weak                                     = 20,
	MAX                                      = 21,
	DamageStart                              = 1,
	DamageEnd                                = 13,
	AbnormalStart                            = 14,
	AbnormalEnd                              = 20,
};

// Enum DarwinGame.EResistJudgeType
// NumValues: 0x0004
enum class EResistJudgeType : uint8
{
	Common                                   = 0,
	Analog                                   = 1,
	Digital                                  = 2,
	EResistJudgeType_MAX                     = 3,
};

// Enum DarwinGame.RivalTeamForceEn
// NumValues: 0x000C
enum class ERivalTeamForceEn : uint8
{
	Pirates                                  = 0,
	Kingdom                                  = 1,
	Robbin                                   = 2,
	HyenaThief                               = 3,
	PhantomThief                             = 4,
	PinkieClowns                             = 5,
	Twilight                                 = 6,
	Mellein                                  = 7,
	Gales                                    = 8,
	None                                     = 9,
	Num                                      = 10,
	RivalTeamForceEn_MAX                     = 11,
};

// Enum DarwinGame.RivalTeamForce
// NumValues: 0x000C
enum class ERivalTeamForce : uint8
{
	Pirates                                  = 0,
	Kingdom                                  = 1,
	Robbin                                   = 2,
	HyenaThief                               = 3,
	PhantomThief                             = 4,
	PinkieClowns                             = 5,
	Twilight                                 = 6,
	Mellein                                  = 7,
	Gales                                    = 8,
	None                                     = 9,
	Num                                      = 10,
	RivalTeamForce_MAX                       = 11,
};

// Enum DarwinGame.ESceneCaptureAdjust
// NumValues: 0x0005
enum class ESceneCaptureAdjust : uint8
{
	None                                     = 0,
	Party                                    = 1,
	Main                                     = 2,
	Dict                                     = 3,
	ESceneCaptureAdjust_MAX                  = 4,
};

// Enum DarwinGame.ESectorAoEAngle
// NumValues: 0x0008
enum class ESectorAoEAngle : uint8
{
	Deg30                                    = 0,
	Deg45                                    = 1,
	Deg60                                    = 2,
	Deg90                                    = 3,
	Deg120                                   = 4,
	Deg180                                   = 5,
	Deg360                                   = 6,
	ESectorAoEAngle_MAX                      = 7,
};

// Enum DarwinGame.ESequenserPlayState
// NumValues: 0x0005
enum class ESequenserPlayState : uint8
{
	None                                     = 0,
	Play                                     = 1,
	Pause                                    = 2,
	Loop                                     = 3,
	ESequenserPlayState_MAX                  = 4,
};

// Enum DarwinGame.EVoiceTimingQuest
// NumValues: 0x0006
enum class EVoiceTimingQuest : uint8
{
	Invalid                                  = 0,
	Gen_Order                                = 1,
	Gen_Order_New                            = 2,
	Gen_Clear                                = 3,
	Gen_Reward                               = 4,
	Max                                      = 5,
};

// Enum DarwinGame.EVoiceTimingRival
// NumValues: 0x000F
enum class EVoiceTimingRival : uint8
{
	Invalid                                  = 0,
	Gen_Appear                               = 1,
	Gen_Steal                                = 2,
	Gen_Escape                               = 3,
	Gen_BaseBtl_St                           = 4,
	Gen_BaseBtl_Lose                         = 5,
	Gen_BaseBtl_Win                          = 6,
	Gen_Revenge_St                           = 7,
	Gen_Unique1                              = 8,
	Gen_Unique2                              = 9,
	Gen_Unique3                              = 10,
	Gen_Unique4                              = 11,
	Gen_Unique5                              = 12,
	Gen_GetBack_St                           = 13,
	Max                                      = 14,
};

// Enum DarwinGame.EVoiceTimingDiplomat
// NumValues: 0x0014
enum class EVoiceTimingDiplomat : uint8
{
	Invalid                                  = 0,
	Gen_St_Trg                               = 1,
	Gen_Input                                = 2,
	Gen_Profile                              = 3,
	Gen_Hide_Search_1                        = 4,
	Gen_Hide_Search_2                        = 5,
	Gen_Hide_Search_3                        = 6,
	Gen_Hide_Search_4                        = 7,
	Gen_Depart_Invite_1                      = 8,
	Gen_Depart_Invite_2                      = 9,
	Gen_Other_1                              = 10,
	Gen_Other_2                              = 11,
	Gen_Other_3                              = 12,
	Gen_Other_4                              = 13,
	Gen_Other_5                              = 14,
	Gen_Other_6                              = 15,
	Gen_Reserved_1                           = 16,
	Gen_Reserved_2                           = 17,
	Gen_Reserved_3                           = 18,
	Max                                      = 19,
};

// Enum DarwinGame.EVoiceTimingFacility
// NumValues: 0x0009
enum class EVoiceTimingFacility : uint8
{
	Invalid                                  = 0,
	Gen_St_Trg                               = 1,
	Gen_New                                  = 2,
	Gen_Exec_Trg                             = 3,
	Gen_Directing_1                          = 4,
	Gen_Directing_2                          = 5,
	Gen_Ed                                   = 6,
	Gen_Sell                                 = 7,
	Max                                      = 8,
};

// Enum DarwinGame.EVoiceTimingInstructor
// NumValues: 0x000F
enum class EVoiceTimingInstructor : uint8
{
	Invalid                                  = 0,
	Gen_St_Trg                               = 1,
	Gen_Change_Trg                           = 2,
	Gen_Farewell                             = 3,
	Gen_Dispatch                             = 4,
	Gen_Dispatch_Place                       = 5,
	Gen_Dispatch_Who                         = 6,
	Gen_Dispatch_Arrival                     = 7,
	Gen_Dispatch_Success                     = 8,
	Gen_Dispatch_Great                       = 9,
	Gen_Confirm                              = 10,
	Gen_Dispatch_Return                      = 11,
	Gen_Dispatch_Progress                    = 12,
	Gen_Dispatch_Nothing                     = 13,
	Max                                      = 14,
};

// Enum DarwinGame.EVoiceTimingReception
// NumValues: 0x0009
enum class EVoiceTimingReception : uint8
{
	Invalid                                  = 0,
	Gen_St_Trg                               = 1,
	Gen_New                                  = 2,
	Gen_Loop_Trg                             = 3,
	Gen_Join_Appry_Trg                       = 4,
	Gen_Join_Lack                            = 5,
	Gen_Join_Confirm                         = 6,
	Gen_Join_Result                          = 7,
	Max                                      = 8,
};

// Enum DarwinGame.EVoiceTimingStationStaff
// NumValues: 0x0024
enum class EVoiceTimingStationStaff : uint8
{
	Invalid                                  = 0,
	Gen_TeamMenu_St_Trg                      = 1,
	Gen_RankUp_fall_Trg                      = 2,
	Gen_RankUp_Stack_Trg                     = 3,
	Gen_RankUp_1                             = 4,
	Gen_RankUp_2                             = 5,
	Gen_RankUp_3                             = 6,
	Gen_RankUp_4                             = 7,
	Gen_RankUp_5                             = 8,
	Gen_RankUp_6                             = 9,
	Gen_RankUp_7                             = 10,
	Gen_RankUp_8                             = 11,
	Gen_RankUp_Result_1                      = 12,
	Gen_RankUp_Result_2                      = 13,
	Gen_RankUp_Result_3                      = 14,
	Gen_RankUp_Result_4                      = 15,
	Gen_RankUp_Result_5                      = 16,
	Gen_Appraise_St_Trg                      = 17,
	Gen_Train_Arrival_Trg                    = 18,
	Gen_Train_Depart_Base                    = 19,
	Gen_Train_Depart_1                       = 20,
	Gen_Train_Depart_2                       = 21,
	Gen_Train_Depart_3                       = 22,
	Gen_Train_Depart_4                       = 23,
	Gen_Train_Depart_5                       = 24,
	Gen_Train_Depart_6                       = 25,
	Gen_Train_Depart_7                       = 26,
	Gen_Train_Depart_8                       = 27,
	Gen_Train_Depart_9                       = 28,
	Gen_Train_Depart_10                      = 29,
	Gen_Train_Depart_11                      = 30,
	Gen_Train_Depart_12                      = 31,
	Gen_Train_Depart_13                      = 32,
	Gen_Train_Depart_14                      = 33,
	Gen_Train_Depart_15                      = 34,
	Max                                      = 35,
};

// Enum DarwinGame.EVoiceTimingBoss
// NumValues: 0x001E
enum class EVoiceTimingBoss : uint8
{
	Invalid                                  = 0,
	Btl_React_1                              = 1,
	Btl_React_2                              = 2,
	Btl_React_3                              = 3,
	Btl_React_4                              = 4,
	Btl_Sleep                                = 5,
	Btl_Angry                                = 6,
	Btl_Dead                                 = 7,
	Btl_Special_1                            = 8,
	Btl_Special_2                            = 9,
	Btl_Special_3                            = 10,
	Btl_Special_4                            = 11,
	Btl_Special_5                            = 12,
	Btl_Special_6                            = 13,
	Btl_Special_7                            = 14,
	Btl_Special_8                            = 15,
	Btl_Special_9                            = 16,
	Btl_Atk_1                                = 17,
	Btl_Atk_2                                = 18,
	Btl_Atk_3                                = 19,
	Btl_Magic                                = 20,
	Btl_Bress                                = 21,
	Btl_QTE_Success                          = 22,
	Btl_QTE_failure                          = 23,
	Btl_QTE_Recover                          = 24,
	Btl_St                                   = 25,
	Btl_Middle_1                             = 26,
	Btl_Middle_2                             = 27,
	Btl_Other                                = 28,
	Max                                      = 29,
};

// Enum DarwinGame.EVoiceTiming
// NumValues: 0x0024
enum class EVoiceTiming : uint8
{
	Invalid                                  = 0,
	Gen_Positive                             = 1,
	Gen_Positive_En                          = 2,
	Gen_Negative                             = 3,
	Gen_Agree                                = 4,
	Gen_Angry                                = 5,
	Gen_Sleep                                = 6,
	Gen_Meal                                 = 7,
	Gen_Eco_1                                = 8,
	Gen_Eco_2                                = 9,
	Gen_Eco_3                                = 10,
	Gen_Eco_4                                = 11,
	Gen_Eco_5                                = 12,
	Gen_Cop                                  = 13,
	Gen_Scare                                = 14,
	Gen_Lively                               = 15,
	Btl_React_1                              = 16,
	Btl_React_2                              = 17,
	Btl_React_3                              = 18,
	Btl_Dead                                 = 19,
	Btl_Special                              = 20,
	Btl_Atk_1                                = 21,
	Btl_Atk_2                                = 22,
	Btl_Atk_3                                = 23,
	Btl_Magic                                = 24,
	Btl_Bress                                = 25,
	Art_React_1                              = 26,
	Art_React_2                              = 27,
	Art_React_3                              = 28,
	Art_React_4                              = 29,
	Btl_St                                   = 30,
	Btl_Mid                                  = 31,
	Gen_Board                                = 32,
	Gen_Command_1                            = 33,
	Gen_Command_2                            = 34,
	Max                                      = 35,
};

// Enum DarwinGame.EVoiceTimingGuide
// NumValues: 0x002C
enum class EVoiceTimingGuide : uint8
{
	Invalid                                  = 0,
	Gen_Talk_St_Ka                           = 1,
	Gen_Talk_St_Ma                           = 2,
	Gen_ArtChange_1                          = 3,
	Gen_ArtChange_2                          = 4,
	Gen_ArtChange_3                          = 5,
	Gen_Notify_1                             = 6,
	Gen_Notify_2                             = 7,
	Gen_Notify_3                             = 8,
	Gen_Guide_1                              = 9,
	Gen_Guide_2                              = 10,
	Gen_Guide_3                              = 11,
	Gen_Guide_4                              = 12,
	Gen_Guide_5                              = 13,
	Gen_Guide_6                              = 14,
	Gen_Guide_7                              = 15,
	Gen_Guide_8                              = 16,
	Gen_Guide_9                              = 17,
	Gen_Guide_10                             = 18,
	Gen_Guide_boss_1                         = 19,
	Gen_Guide_boss_2                         = 20,
	Gen_Guide_boss_3                         = 21,
	Gen_Guide_boss_4                         = 22,
	Gen_Guide_boss_5                         = 23,
	Gen_Guide_boss_6                         = 24,
	Gen_Guide_boss_7                         = 25,
	Gen_ArtPoint                             = 26,
	Gen_Fortune_1                            = 27,
	Gen_Fortune_2                            = 28,
	Gen_Fortune_3                            = 29,
	Gen_Fortune_4                            = 30,
	Gen_Fortune_5                            = 31,
	Gen_Fortune_6                            = 32,
	Gen_Fortune_7                            = 33,
	Gen_Fortune_8                            = 34,
	Gen_Fortune_9                            = 35,
	Gen_Notify_4                             = 36,
	Gen_Notify_5                             = 37,
	Gen_Notify_6                             = 38,
	Gen_Tips                                 = 39,
	Gen_Guide_Alert_Low                      = 40,
	Gen_Guide_Alert_Mid                      = 41,
	Gen_Guide_Alert_High                     = 42,
	Max                                      = 43,
};

// Enum DarwinGame.EVoiceTimingPC
// NumValues: 0x0068
enum class EVoiceTimingPC : uint8
{
	Invalid                                  = 0,
	Gen_Talk_St_Guest                        = 1,
	Gen_Talk_St_Cmn_Trg                      = 2,
	Gen_Talk_Ed_Trg                          = 3,
	Gen_PCChange                             = 4,
	Gen_Join_Trg                             = 5,
	Gen_Cooking_Success                      = 6,
	Gen_Cooking_GreatSuccess                 = 7,
	Gen_Make_Success                         = 8,
	Gen_Train_Depart_Trg                     = 9,
	Gen_Train_Arrival_Trg                    = 10,
	Gen_Artifact_Place                       = 11,
	Gen_Rest_Morning                         = 12,
	Gen_Rest_Night                           = 13,
	Gen_Team_RankUp_1                        = 14,
	Gen_Team_RankUp_2                        = 15,
	Gen_Team_RankUp_3                        = 16,
	Gen_Team_RankUp_4                        = 17,
	Gen_Team_RankUp_5                        = 18,
	Gen_Dispatch_Depart                      = 19,
	Gen_Dispatch_Depart_Success              = 20,
	Gen_Dispatch_Depart_Failure              = 21,
	Gen_Notify_GetBack                       = 22,
	Gen_Notify_Revival                       = 23,
	Gen_Notify_Hunger                        = 24,
	Gen_Notify_Discover_Artifact             = 25,
	Gen_Notify_Discover_Metal                = 26,
	Gen_Dangeon_Clear_1                      = 27,
	Gen_Dangeon_Clear_2                      = 28,
	Gen_Appraise_St_Trg                      = 29,
	Gen_Appraise_Result_New_Trg              = 30,
	Gen_Appraise_Result_Trg                  = 31,
	Gen_Network_Monster_Send                 = 32,
	Gen_Network_Monster_Call                 = 33,
	Gen_Network_Monster_Invite               = 34,
	Gen_Network_Artifact                     = 35,
	Gen_System_VoiceSetting                  = 36,
	Gen_System_VoiceSetting_En               = 37,
	Btl_Idle                                 = 38,
	Btl_Jump                                 = 39,
	Btl_Avoid                                = 40,
	Btl_BoxOpen                              = 41,
	Btl_Parkour_1                            = 42,
	Btl_Parkour_2                            = 43,
	Btl_Command_Go                           = 44,
	Btl_Command_Gather                       = 45,
	Btl_Cop_HighJump_Trg                     = 46,
	Btl_Cop_Glide_Trg                        = 47,
	Btl_Cop_HighSpeedMove_Trg                = 48,
	Btl_Cop_Dive_Trg                         = 49,
	Btl_Cop_Search_Trg                       = 50,
	Btl_Atk_1                                = 51,
	Btl_Atk_2                                = 52,
	Btl_Atk_3                                = 53,
	Btl_Atk_4                                = 54,
	Btl_Atk_5                                = 55,
	Btl_JumpAtk_1                            = 56,
	Btl_JumpAtk_2                            = 57,
	Btl_JumpAtk_3                            = 58,
	Btl_SurpriseAtk                          = 59,
	Btl_Slingshot_Atk                        = 60,
	Btl_Slingshot_Heal                       = 61,
	Btl_Slingshot_Debuf                      = 62,
	Btl_Slingshot_Buf                        = 63,
	Btl_React_1                              = 64,
	Btl_React_2                              = 65,
	Btl_React_3                              = 66,
	Btl_React_4                              = 67,
	Btl_Dead                                 = 68,
	Btl_Abnormal                             = 69,
	Btl_Sleep                                = 70,
	Btl_Angry                                = 71,
	Btl_BeastMode                            = 72,
	Btl_Charge_St                            = 73,
	Btl_Charge_Exec                          = 74,
	Btl_Stroke                               = 75,
	Btl_Grab_Success                         = 76,
	Btl_Grab_Failure                         = 77,
	Btl_Boss_St                              = 78,
	Btl_Boss_Win                             = 79,
	Btl_LastBoss_St                          = 80,
	Btl_LastBoss_Win                         = 81,
	Btl_LastBoss_QTE_Success                 = 82,
	Btl_LastBoss_QTE_Failure                 = 83,
	Art_Compass_St                           = 84,
	Art_Compass_Far_1                        = 85,
	Art_Compass_Far_2                        = 86,
	Art_Compass_Near_1                       = 87,
	Art_Compass_Near_2                       = 88,
	Art_DigUp_Trg                            = 89,
	Art_Discover_Trg                         = 90,
	Art_Appear_Rival_A_Trg                   = 91,
	Art_Appear_Rival_B_Trg                   = 92,
	Art_PickUp                               = 93,
	Art_PickUp_Success                       = 94,
	Art_Flag_PullOut                         = 95,
	Art_Flag_PullOut_Success                 = 96,
	Art_BaseBtl_St_Trg                       = 97,
	Art_BaseBtl_Win_Trg                      = 98,
	Art_BaseBtl_Lose_Trg                     = 99,
	Art_Compass_Nothing                      = 100,
	Btl_Abyss                                = 101,
	Gen_DailyQuest_Destinations              = 102,
	Max                                      = 103,
};

// Enum DarwinGame.EAreaSoundCollisionType
// NumValues: 0x0003
enum class EAreaSoundCollisionType : uint8
{
	Box                                      = 0,
	Shpere                                   = 1,
	EAreaSoundCollisionType_MAX              = 2,
};

// Enum DarwinGame.EAreaSoundType
// NumValues: 0x00BF
enum class EAreaSoundType : uint8
{
	None                                     = 0,
	Area01                                   = 1,
	Area02                                   = 2,
	Area03                                   = 3,
	Area04                                   = 4,
	Area05                                   = 5,
	Area06                                   = 6,
	Area07                                   = 7,
	Area08                                   = 8,
	Area09                                   = 9,
	Area10                                   = 10,
	Area11                                   = 11,
	Area12                                   = 12,
	Area13                                   = 13,
	Area14                                   = 14,
	Area15                                   = 15,
	Area16                                   = 16,
	Area17                                   = 17,
	Area18                                   = 18,
	Area19                                   = 19,
	Area20                                   = 20,
	Area21                                   = 21,
	Area22                                   = 22,
	Area23                                   = 23,
	Area24                                   = 24,
	Area25                                   = 25,
	Area26                                   = 26,
	Area27                                   = 27,
	Area28                                   = 28,
	Area29                                   = 29,
	Area30                                   = 30,
	Area31                                   = 31,
	Area32                                   = 32,
	Area33                                   = 33,
	Area34                                   = 34,
	Area35                                   = 35,
	Area36                                   = 36,
	Area37                                   = 37,
	Area38                                   = 38,
	Area39                                   = 39,
	Area40                                   = 40,
	Area41                                   = 41,
	Area42                                   = 42,
	Area43                                   = 43,
	Area44                                   = 44,
	Area45                                   = 45,
	Area46                                   = 46,
	Area47                                   = 47,
	Area48                                   = 48,
	Area49                                   = 49,
	Area50                                   = 50,
	Area51                                   = 51,
	Area52                                   = 52,
	Area53                                   = 53,
	Area54                                   = 54,
	Area55                                   = 55,
	Area56                                   = 56,
	Area57                                   = 57,
	Area58                                   = 58,
	Area59                                   = 59,
	Area60                                   = 60,
	Area61                                   = 61,
	Area62                                   = 62,
	Area63                                   = 63,
	Area64                                   = 64,
	Area65                                   = 65,
	Area66                                   = 66,
	Area67                                   = 67,
	Area68                                   = 68,
	Area69                                   = 69,
	Area70                                   = 70,
	Area71                                   = 71,
	Area72                                   = 72,
	Area73                                   = 73,
	Area74                                   = 74,
	Area75                                   = 75,
	Area76                                   = 76,
	Area77                                   = 77,
	Area78                                   = 78,
	Area79                                   = 79,
	Area80                                   = 80,
	Area81                                   = 81,
	Area82                                   = 82,
	Area83                                   = 83,
	Area84                                   = 84,
	Area85                                   = 85,
	Area86                                   = 86,
	Area87                                   = 87,
	Area88                                   = 88,
	Area89                                   = 89,
	Area90                                   = 90,
	Area91                                   = 91,
	Area92                                   = 92,
	Area93                                   = 93,
	Area94                                   = 94,
	Area95                                   = 95,
	Area96                                   = 96,
	Area97                                   = 97,
	Area98                                   = 98,
	Area99                                   = 99,
	Area100                                  = 100,
	Area101                                  = 101,
	Area102                                  = 102,
	Area103                                  = 103,
	Area104                                  = 104,
	Area105                                  = 105,
	Area106                                  = 106,
	Area107                                  = 107,
	Area108                                  = 108,
	Area109                                  = 109,
	Area110                                  = 110,
	Area111                                  = 111,
	Area112                                  = 112,
	Area113                                  = 113,
	Area114                                  = 114,
	Area115                                  = 115,
	Area116                                  = 116,
	Area117                                  = 117,
	Area118                                  = 118,
	Area119                                  = 119,
	Area120                                  = 120,
	Area121                                  = 121,
	Area122                                  = 122,
	Area123                                  = 123,
	Area124                                  = 124,
	Area125                                  = 125,
	Area126                                  = 126,
	Area127                                  = 127,
	Area128                                  = 128,
	Area129                                  = 129,
	Area130                                  = 130,
	Area131                                  = 131,
	Area132                                  = 132,
	Area133                                  = 133,
	Area134                                  = 134,
	Area135                                  = 135,
	Area136                                  = 136,
	Area137                                  = 137,
	Area138                                  = 138,
	Area139                                  = 139,
	Area140                                  = 140,
	Area141                                  = 141,
	Area142                                  = 142,
	Area143                                  = 143,
	Area144                                  = 144,
	Area145                                  = 145,
	Area146                                  = 146,
	Area147                                  = 147,
	Area148                                  = 148,
	Area149                                  = 149,
	Area150                                  = 150,
	Area151                                  = 151,
	Area152                                  = 152,
	Area153                                  = 153,
	Area154                                  = 154,
	Area155                                  = 155,
	Area156                                  = 156,
	Area157                                  = 157,
	Area158                                  = 158,
	Area159                                  = 159,
	Area160                                  = 160,
	Area161                                  = 161,
	Area162                                  = 162,
	Area163                                  = 163,
	Area164                                  = 164,
	Area165                                  = 165,
	Area166                                  = 166,
	Area167                                  = 167,
	Area168                                  = 168,
	Area169                                  = 169,
	Area170                                  = 170,
	Area171                                  = 171,
	Area172                                  = 172,
	Area173                                  = 173,
	Area174                                  = 174,
	Area175                                  = 175,
	Area176                                  = 176,
	Area177                                  = 177,
	Area178                                  = 178,
	Area179                                  = 179,
	Area180                                  = 180,
	Area181                                  = 181,
	Area182                                  = 182,
	Area183                                  = 183,
	Area184                                  = 184,
	Area185                                  = 185,
	Area186                                  = 186,
	Area187                                  = 187,
	Area188                                  = 188,
	Area189                                  = 189,
	Max                                      = 190,
};

// Enum DarwinGame.EEnvSoundType
// NumValues: 0x0004
enum class EEnvSoundType : uint8
{
	None                                     = 0,
	Nature                                   = 1,
	Creature                                 = 2,
	EEnvSoundType_MAX                        = 3,
};

// Enum DarwinGame.ETextSoundTableCategory
// NumValues: 0x0006
enum class ETextSoundTableCategory : uint8
{
	None                                     = 0,
	SerifuCS                                 = 1,
	SerifuSIE                                = 2,
	SerifuIE                                 = 3,
	SerifuFukidashi                          = 4,
	ETextSoundTableCategory_MAX              = 5,
};

// Enum DarwinGame.ESoundTriggerTiming
// NumValues: 0x0004
enum class ESoundTriggerTiming : uint8
{
	Invalid                                  = 0,
	Begin                                    = 1,
	End                                      = 2,
	ESoundTriggerTiming_MAX                  = 3,
};

// Enum DarwinGame.EEmotionSoundType
// NumValues: 0x000A
enum class EEmotionSoundType : uint8
{
	Invalid                                  = 0,
	Joy                                      = 1,
	Anger                                    = 2,
	Sad                                      = 3,
	Happy                                    = 4,
	Sleep                                    = 5,
	Notice                                   = 6,
	Question                                 = 7,
	Artifact                                 = 8,
	EEmotionSoundType_MAX                    = 9,
};

// Enum DarwinGame.EStampSoundType
// NumValues: 0x0011
enum class EStampSoundType : uint8
{
	Invalid                                  = 0,
	MusicalNote                              = 1,
	Heart                                    = 2,
	Exclamation                              = 3,
	Question                                 = 4,
	Sweat1                                   = 5,
	Sweat2                                   = 6,
	ThreePoints                              = 7,
	Anger                                    = 8,
	Misty                                    = 9,
	Sleep                                    = 10,
	Crisis                                   = 11,
	Junk                                     = 12,
	Artifact                                 = 13,
	ArtifactNear                             = 14,
	ArtifactBig                              = 15,
	EStampSoundType_MAX                      = 16,
};

// Enum DarwinGame.ELanguageVoiceType
// NumValues: 0x0004
enum class ELanguageVoiceType : uint8
{
	Invalid                                  = 0,
	Vo_Ja                                    = 1,
	Vo_En                                    = 2,
	ELanguageVoiceType_MAX                   = 3,
};

// Enum DarwinGame.EAttackReactionSound
// NumValues: 0x000A
enum class EAttackReactionSound : uint8
{
	Invalid                                  = 0,
	Miss                                     = 1,
	Guard                                    = 2,
	Satisfaction                             = 3,
	Grief                                    = 4,
	Weak                                     = 5,
	Metal                                    = 6,
	Down                                     = 7,
	Up                                       = 8,
	EAttackReactionSound_MAX                 = 9,
};

// Enum DarwinGame.ECueSheetTableCategory
// NumValues: 0x0006
enum class ECueSheetTableCategory : uint8
{
	None                                     = 0,
	General                                  = 1,
	BaseEnv                                  = 2,
	Voice                                    = 3,
	Debug                                    = 4,
	ECueSheetTableCategory_MAX               = 5,
};

// Enum DarwinGame.EObjectSoundCategory
// NumValues: 0x0005
enum class EObjectSoundCategory : uint8
{
	Invalid                                  = 0,
	Touch                                    = 1,
	Gimmick                                  = 2,
	CollectionPoint                          = 3,
	EObjectSoundCategory_MAX                 = 4,
};

// Enum DarwinGame.ESoundTableCategory
// NumValues: 0x0006
enum class ESoundTableCategory : uint8
{
	None                                     = 0,
	EffectSound                              = 1,
	ItemSound                                = 2,
	CollectionPointSound                     = 3,
	FootSoundNPC                             = 4,
	ESoundTableCategory_MAX                  = 5,
};

// Enum DarwinGame.EActionSoundType
// NumValues: 0x0008
enum class EActionSoundType : uint8
{
	Walk                                     = 0,
	Run                                      = 1,
	Jump                                     = 2,
	Land                                     = 3,
	Squat                                    = 4,
	Turn                                     = 5,
	Down                                     = 6,
	EActionSoundType_MAX                     = 7,
};

// Enum DarwinGame.EAtomCueSheetCategory
// NumValues: 0x0004
enum class EAtomCueSheetCategory : uint8
{
	Me                                       = 0,
	SystemSe                                 = 1,
	MessageVo                                = 2,
	EAtomCueSheetCategory_MAX                = 3,
};

// Enum DarwinGame.ESoundControlType
// NumValues: 0x0006
enum class ESoundControlType : uint8
{
	Invalid                                  = 0,
	Play                                     = 1,
	Stop                                     = 2,
	Pause                                    = 3,
	Resume                                   = 4,
	ESoundControlType_MAX                    = 5,
};

// Enum DarwinGame.ESoundInsulationType
// NumValues: 0x0006
enum class ESoundInsulationType : uint8
{
	Invalid                                  = 0,
	Default                                  = 1,
	Ignore                                   = 2,
	Force                                    = 3,
	Half                                     = 4,
	ESoundInsulationType_MAX                 = 5,
};

// Enum DarwinGame.EAtomCompCategory
// NumValues: 0x000B
enum class EAtomCompCategory : uint8
{
	Bgm                                      = 0,
	Bgm2                                     = 1,
	BaseEnv                                  = 2,
	Weather                                  = 3,
	Bgm3                                     = 4,
	Bgm4                                     = 5,
	Bgm5                                     = 6,
	Bgm6                                     = 7,
	Bgm7                                     = 8,
	Max                                      = 9,
	None                                     = 10,
};

// Enum DarwinGame.ESFadeOutEndState
// NumValues: 0x0004
enum class ESFadeOutEndState : uint8
{
	None                                     = 0,
	Stop                                     = 1,
	Pause                                    = 2,
	ESFadeOutEndState_MAX                    = 3,
};

// Enum DarwinGame.ESFadeState
// NumValues: 0x0007
enum class ESFadeState : uint8
{
	None                                     = 0,
	FadeIn                                   = 1,
	FadeInEnd                                = 2,
	FadeOut                                  = 3,
	FadeOutEnd                               = 4,
	End                                      = 5,
	ESFadeState_MAX                          = 6,
};

// Enum DarwinGame.ESoundFadeType
// NumValues: 0x0004
enum class ESoundFadeType : uint8
{
	None                                     = 0,
	FadeIn                                   = 1,
	FadeOut                                  = 2,
	ESoundFadeType_MAX                       = 3,
};

// Enum DarwinGame.ESoundVolumeType
// NumValues: 0x0005
enum class ESoundVolumeType : uint8
{
	None                                     = 0,
	Master                                   = 1,
	Sub                                      = 2,
	Fade                                     = 3,
	ESoundVolumeType_MAX                     = 4,
};

// Enum DarwinGame.ESoundVolumeCategory
// NumValues: 0x0005
enum class ESoundVolumeCategory : uint8
{
	None                                     = 0,
	Bgm                                      = 1,
	Se                                       = 2,
	Voice                                    = 3,
	ESoundVolumeCategory_MAX                 = 4,
};

// Enum DarwinGame.ESpawnFieldObjectID
// NumValues: 0x0010
enum class ESpawnFieldObjectID : uint8
{
	None                                     = 0,
	CoinRare0                                = 1,
	CoinRare1                                = 2,
	CoinRare2                                = 3,
	CoinRare3                                = 4,
	CommonItem                               = 5,
	MillionArtifact                          = 6,
	ThousandArtifact                         = 7,
	ReplicaArtifact                          = 8,
	DungeonTreasureBox                       = 9,
	DungeonNextFloorWarpPoint                = 10,
	TreasureMap                              = 11,
	Train                                    = 12,
	PushWave                                 = 13,
	MyTeamFlag                               = 14,
	Max                                      = 15,
};

// Enum DarwinGame.ESplineMeshObjectState
// NumValues: 0x0005
enum class ESplineMeshObjectState : uint8
{
	None                                     = 0,
	InitializeSplineMesh                     = 1,
	InitializeObject                         = 2,
	Update                                   = 3,
	ESplineMeshObjectState_MAX               = 4,
};

// Enum DarwinGame.ESizeFixProgressBarFillType
// NumValues: 0x0006
enum class ESizeFixProgressBarFillType : uint8
{
	LeftToRight                              = 0,
	RightToLeft                              = 1,
	FillFromCenter                           = 2,
	TopToBottom                              = 3,
	BottomToTop                              = 4,
	ESizeFixProgressBarFillType_MAX          = 5,
};

// Enum DarwinGame.EStateChangeCause
// NumValues: 0x0004
enum class EStateChangeCause : uint8
{
	None                                     = 0,
	Attribute                                = 1,
	FoodEffect                               = 2,
	EStateChangeCause_MAX                    = 3,
};

// Enum DarwinGame.EStampType
// NumValues: 0x0012
enum class EStampType : uint8
{
	NoStamp                                  = 0,
	Surprise                                 = 1,
	Question                                 = 2,
	Hart                                     = 3,
	Onpu                                     = 4,
	Glitter                                  = 5,
	Joy                                      = 6,
	Anger                                    = 7,
	Sad                                      = 8,
	Shay                                     = 9,
	Trouble                                  = 10,
	Panic                                    = 11,
	OffGuard                                 = 12,
	Sleep                                    = 13,
	Hunger                                   = 14,
	Star                                     = 15,
	UnableAct                                = 16,
	EStampType_MAX                           = 17,
};

// Enum DarwinGame.EDebugPlayType
// NumValues: 0x0005
enum class EDebugPlayType : uint8
{
	FreePlay                                 = 0,
	ScenarioPlay                             = 1,
	RomCheck                                 = 2,
	BossCheck                                = 3,
	EDebugPlayType_MAX                       = 4,
};

// Enum DarwinGame.EElevatorState
// NumValues: 0x0008
enum class EElevatorState : uint8
{
	Invalid                                  = 0,
	BottomWait                               = 1,
	TopWait                                  = 2,
	AscendTopEvent                           = 3,
	DescendBottomEvent                       = 4,
	AscendEndEvent                           = 5,
	DescendEndEvent                          = 6,
	EElevatorState_MAX                       = 7,
};

// Enum DarwinGame.EStatusParamType
// NumValues: 0x000B
enum class EStatusParamType : uint8
{
	None                                     = 0,
	MaxHP                                    = 1,
	MaxMP                                    = 2,
	Attack                                   = 3,
	Defense                                  = 4,
	Dexterity                                = 5,
	Magic                                    = 6,
	Attribute                                = 7,
	Other                                    = 8,
	All                                      = 9,
	EStatusParamType_MAX                     = 10,
};

// Enum DarwinGame.EStreamingCheckType
// NumValues: 0x0005
enum class EStreamingCheckType : uint8
{
	Check                                    = 0,
	Load                                     = 1,
	LOD                                      = 2,
	Hiden                                    = 3,
	EStreamingCheckType_MAX                  = 4,
};

// Enum DarwinGame.EAreaCenterType
// NumValues: 0x0006
enum class EAreaCenterType : uint8
{
	None                                     = 0,
	Owner                                    = 1,
	Target                                   = 2,
	Location                                 = 3,
	StartTimingTargetLocation                = 4,
	EAreaCenterType_MAX                      = 5,
};

// Enum DarwinGame.EAreaShapeType
// NumValues: 0x000A
enum class EAreaShapeType : uint8
{
	None                                     = 0,
	Square                                   = 1,
	Circle                                   = 2,
	Fan30                                    = 3,
	Fan45                                    = 4,
	Fan60                                    = 5,
	Fan90                                    = 6,
	Fan120                                   = 7,
	Fan180                                   = 8,
	EAreaShapeType_MAX                       = 9,
};

// Enum DarwinGame.ETargetObjectType
// NumValues: 0x0004
enum class ETargetObjectType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Gold                                     = 2,
	ETargetObjectType_MAX                    = 3,
};

// Enum DarwinGame.ETextTimeType
// NumValues: 0x0019
enum class ETextTimeType : uint8
{
	Morning                                  = 0,
	Daytime                                  = 1,
	Evening                                  = 2,
	Night                                    = 3,
	Midnight                                 = 4,
	EarlyMorning                             = 5,
	Other                                    = 6,
	Trigger                                  = 7,
	CS                                       = 8,
	None                                     = 9,
	INVALID                                  = 10,
	ABBREV_Daytime                           = 11,
	ABBREV_Night                             = 12,
	ABBREV_All                               = 13,
	Condition_Normal                         = 14,
	Condition_SCENARIO                       = 15,
	Condition_SITUATION                      = 16,
	Condition_FlagBefore                     = 17,
	Condition_FlagAfter                      = 18,
	Condition_QuestBefore                    = 19,
	Condition_QuestClear                     = 20,
	Condition_QuestAfter                     = 21,
	Condition_QuestNow                       = 22,
	Condition_QuestFailed                    = 23,
	Max                                      = 24,
};

// Enum DarwinGame.ETextSubcategoryType
// NumValues: 0x0065
enum class ETextSubcategoryType : uint8
{
	None                                     = 0,
	Slect1                                   = 1,
	Slect2                                   = 2,
	Slect3                                   = 3,
	Slect4                                   = 4,
	Slect5                                   = 5,
	Slect6                                   = 6,
	Slect7                                   = 7,
	Slect8                                   = 8,
	Slect9                                   = 9,
	Slect10                                  = 10,
	Slect11                                  = 11,
	Slect12                                  = 12,
	Slect13                                  = 13,
	Slect14                                  = 14,
	Slect15                                  = 15,
	Slect16                                  = 16,
	Slect17                                  = 17,
	Slect18                                  = 18,
	Slect19                                  = 19,
	Slect20                                  = 20,
	Slect21                                  = 21,
	Slect22                                  = 22,
	Slect23                                  = 23,
	Slect24                                  = 24,
	Slect25                                  = 25,
	Slect26                                  = 26,
	Slect27                                  = 27,
	Slect28                                  = 28,
	Slect29                                  = 29,
	Slect30                                  = 30,
	Slect31                                  = 31,
	Slect32                                  = 32,
	Slect33                                  = 33,
	Slect34                                  = 34,
	Slect35                                  = 35,
	Slect36                                  = 36,
	Slect37                                  = 37,
	Slect38                                  = 38,
	Slect39                                  = 39,
	Slect40                                  = 40,
	Slect41                                  = 41,
	Slect42                                  = 42,
	Slect43                                  = 43,
	Slect44                                  = 44,
	Slect45                                  = 45,
	Slect46                                  = 46,
	Slect47                                  = 47,
	Slect48                                  = 48,
	Slect49                                  = 49,
	Slect50                                  = 50,
	Slect51                                  = 51,
	Slect52                                  = 52,
	Slect53                                  = 53,
	Slect54                                  = 54,
	Slect55                                  = 55,
	Slect56                                  = 56,
	Slect57                                  = 57,
	Slect58                                  = 58,
	Slect59                                  = 59,
	Slect60                                  = 60,
	Slect61                                  = 61,
	Slect62                                  = 62,
	Slect63                                  = 63,
	Slect64                                  = 64,
	Slect65                                  = 65,
	Slect66                                  = 66,
	Slect67                                  = 67,
	Slect68                                  = 68,
	Slect69                                  = 69,
	Slect70                                  = 70,
	Slect71                                  = 71,
	Slect72                                  = 72,
	Slect73                                  = 73,
	Slect74                                  = 74,
	Slect75                                  = 75,
	Slect76                                  = 76,
	Slect77                                  = 77,
	Slect78                                  = 78,
	Slect79                                  = 79,
	Slect80                                  = 80,
	Slect81                                  = 81,
	Slect82                                  = 82,
	Slect83                                  = 83,
	Slect84                                  = 84,
	Slect85                                  = 85,
	Slect86                                  = 86,
	Slect87                                  = 87,
	Slect88                                  = 88,
	Slect89                                  = 89,
	Slect90                                  = 90,
	Slect91                                  = 91,
	Slect92                                  = 92,
	Slect93                                  = 93,
	Slect94                                  = 94,
	Slect95                                  = 95,
	Slect96                                  = 96,
	Slect97                                  = 97,
	Slect98                                  = 98,
	Slect99                                  = 99,
	ETextSubcategoryType_MAX                 = 100,
};

// Enum DarwinGame.ETextJoukenType
// NumValues: 0x001D
enum class ETextJoukenType : uint8
{
	None                                     = 0,
	Flag1                                    = 1,
	Flag2                                    = 2,
	Flag3                                    = 3,
	Flag4                                    = 4,
	Flag5                                    = 5,
	Flag6                                    = 6,
	Flag7                                    = 7,
	Flag8                                    = 8,
	Flag9                                    = 9,
	Flag10                                   = 10,
	Sleep                                    = 11,
	Eat                                      = 12,
	Action                                   = 13,
	Talk                                     = 14,
	Preparation                              = 15,
	Damage                                   = 16,
	Fight                                    = 17,
	Escape                                   = 18,
	DontMove                                 = 19,
	Rescue                                   = 20,
	Sunny                                    = 21,
	Rainy                                    = 22,
	Snowed                                   = 23,
	Windy                                    = 24,
	EarthEcho                                = 25,
	WarCry                                   = 26,
	Invalid                                  = 27,
	ETextJoukenType_MAX                      = 28,
};

// Enum DarwinGame.ETextQuestType
// NumValues: 0x0007
enum class ETextQuestType : uint8
{
	None                                     = 0,
	Before                                   = 1,
	Now                                      = 2,
	Clear                                    = 3,
	After                                    = 4,
	Fail                                     = 5,
	ETextQuestType_MAX                       = 6,
};

// Enum DarwinGame.ETextWeatherType
// NumValues: 0x0006
enum class ETextWeatherType : uint8
{
	None                                     = 0,
	Sunny                                    = 1,
	Rain                                     = 2,
	Snow                                     = 3,
	Fog                                      = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.ETextPatternType
// NumValues: 0x001A
enum class ETextPatternType : uint8
{
	NotSpecified                             = 0,
	InTransition                             = 1,
	Talk_1st                                 = 2,
	Talk_2nd                                 = 3,
	Talk_3rd                                 = 4,
	Talk_4th                                 = 5,
	Talk_5th                                 = 6,
	Talk_6th                                 = 7,
	Talk_7th                                 = 8,
	Talk_8th                                 = 9,
	Talk_9th                                 = 10,
	Trigger_1st                              = 11,
	Trigger_2nd                              = 12,
	Trigger_3rd                              = 13,
	Trigger_4th                              = 14,
	Trigger_5th                              = 15,
	Trigger_6th                              = 16,
	Trigger_7th                              = 17,
	Trigger_8th                              = 18,
	Trigger_9th                              = 19,
	Condition_Normal                         = 20,
	Condition_Move                           = 21,
	CS                                       = 22,
	CS_Branch                                = 23,
	INVALID                                  = 24,
	MAX                                      = 25,
};

// Enum DarwinGame.ETextPCType
// NumValues: 0x0004
enum class ETextPCType : uint8
{
	Common                                   = 0,
	Kamyu                                    = 1,
	Maya                                     = 2,
	MAX                                      = 3,
};

// Enum DarwinGame.ETextLanguage
// NumValues: 0x000A
enum class ETextLanguage : uint8
{
	ja                                       = 0,
	en                                       = 1,
	es                                       = 2,
	fr                                       = 3,
	de                                       = 4,
	it                                       = 5,
	ko                                       = 6,
	zh_tw                                    = 7,
	Max                                      = 8,
	All                                      = 8,
};

// Enum DarwinGame.ETextIdWeather
// NumValues: 0x0006
enum class ETextIdWeather : uint8
{
	None                                     = 0,
	Sunny                                    = 1,
	Rain                                     = 2,
	Snow                                     = 3,
	Fog                                      = 4,
	Max                                      = 5,
};

// Enum DarwinGame.ETextIdTime
// NumValues: 0x0019
enum class ETextIdTime : uint8
{
	Morning                                  = 0,
	Daytime                                  = 1,
	Evening                                  = 2,
	Night                                    = 3,
	Midnight                                 = 4,
	EarlyMorning                             = 5,
	Other                                    = 6,
	Trigger                                  = 7,
	CS                                       = 8,
	None                                     = 9,
	INVALID                                  = 10,
	ABBREV_Daytime                           = 11,
	ABBREV_Night                             = 12,
	ABBREV_All                               = 13,
	Condition_Normal                         = 14,
	Condition_SCENARIO                       = 15,
	Condition_SITUATION                      = 16,
	Condition_FlagBefore                     = 17,
	Condition_FlagAfter                      = 18,
	Condition_QuestBefore                    = 19,
	Condition_QuestNow                       = 20,
	Condition_QuestClear                     = 21,
	Condition_QuestAfter                     = 22,
	Condition_QuestFailed                    = 23,
	Max                                      = 24,
};

// Enum DarwinGame.ETextIdPlayerType
// NumValues: 0x0004
enum class ETextIdPlayerType : uint8
{
	Common                                   = 0,
	Kamyu                                    = 1,
	Maya                                     = 2,
	Max                                      = 3,
};

// Enum DarwinGame.ETextDataCategory
// NumValues: 0x000C
enum class ETextDataCategory : uint8
{
	Common                                   = 0,
	CS                                       = 1,
	IE                                       = 2,
	SIE                                      = 3,
	Fukidasi                                 = 4,
	System                                   = 5,
	Shop                                     = 6,
	Yadoya                                   = 7,
	Guide                                    = 8,
	Invalid                                  = 9,
	End                                      = 10,
	ETextDataCategory_MAX                    = 11,
};

// Enum DarwinGame.ETextWindow
// NumValues: 0x0003
enum class ETextWindow : uint8
{
	Mine                                     = 0,
	Talker                                   = 1,
	ETextWindow_MAX                          = 2,
};

// Enum DarwinGame.ETextVerticalAlignment
// NumValues: 0x0004
enum class ETextVerticalAlignment : uint8
{
	Top                                      = 0,
	Center                                   = 1,
	Bottom                                   = 2,
	ETextVerticalAlignment_MAX               = 3,
};

// Enum DarwinGame.ETimeZoneType
// NumValues: 0x0006
enum class ETimeZoneType : uint8
{
	TZT_None                                 = 0,
	TZT_Morning                              = 1,
	TZT_DayTime                              = 2,
	TZT_Evening                              = 3,
	TZT_Night                                = 4,
	TZT_MAX                                  = 5,
};

// Enum DarwinGame.ETipsEnum
// NumValues: 0x0002
enum class ETipsEnum : uint8
{
	Tips_Slingshot                           = 0,
	Tips_MAX                                 = 1,
};

// Enum DarwinGame.EVisibilityOperatorType
// NumValues: 0x0007
enum class EVisibilityOperatorType : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	OrMore                                   = 2,
	MoreThan                                 = 3,
	OrLess                                   = 4,
	LessThan                                 = 5,
	Max                                      = 6,
};

// Enum DarwinGame.EVisibilityConditionType
// NumValues: 0x0004
enum class EVisibilityConditionType : uint8
{
	GameDataFlag                             = 0,
	DebugTrue                                = 1,
	DebugFalse                               = 2,
	Max                                      = 3,
};

// Enum DarwinGame.TrainStepID
// NumValues: 0x0005
enum class ETrainStepID : uint8
{
	AR                                       = 0,
	AL                                       = 1,
	BR                                       = 2,
	BL                                       = 3,
	TrainStepID_MAX                          = 4,
};

// Enum DarwinGame.ETreasureBoxType
// NumValues: 0x0003
enum class ETreasureBoxType : uint8
{
	Fix                                      = 0,
	Change                                   = 1,
	ETreasureBoxType_MAX                     = 2,
};

// Enum DarwinGame.EFigureType
// NumValues: 0x0004
enum class EFigureType : uint8
{
	Defalut                                  = 0,
	Replica                                  = 1,
	Robbed                                   = 2,
	EFigureType_MAX                          = 3,
};

// Enum DarwinGame.EUIArtifactCondition
// NumValues: 0x0004
enum class EUIArtifactCondition : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Drop                                     = 2,
	EUIArtifactCondition_MAX                 = 3,
};

// Enum DarwinGame.EBaseBattleType
// NumValues: 0x0004
enum class EBaseBattleType : uint8
{
	Start                                    = 0,
	Win                                      = 1,
	Lose                                     = 2,
	EBaseBattleType_MAX                      = 3,
};

// Enum DarwinGame.EVoiceDataType
// NumValues: 0x000C
enum class EVoiceDataType : uint8
{
	Vo_Type1                                 = 0,
	Vo_Type2                                 = 1,
	Vo_Type3                                 = 2,
	Vo_Type4                                 = 3,
	Vo_Type5                                 = 4,
	Vo_Type6                                 = 5,
	Vo_Type7                                 = 6,
	Vo_Type8                                 = 7,
	Vo_Type9                                 = 8,
	Vo_Type10                                = 9,
	EVoiceDataType_Max                       = 10,
	EVoiceDataType_None                      = 11,
};

// Enum DarwinGame.EControllerLayoutType
// NumValues: 0x0004
enum class EControllerLayoutType : uint8
{
	GENERIC                                  = 0,
	PLAYSTATION_4                            = 1,
	XBOX_ONE                                 = 2,
	EControllerLayoutType_MAX                = 3,
};

// Enum DarwinGame.EKeyMapStatus
// NumValues: 0x0004
enum class EKeyMapStatus : uint8
{
	NORMAL                                   = 0,
	OVERLAP                                  = 1,
	NO_OVERLAP                               = 2,
	EKeyMapStatus_MAX                        = 3,
};

// Enum DarwinGame.EKeyboardButtonMapping
// NumValues: 0x0078
enum class EKeyboardButtonMapping : uint8
{
	Button_NONE                              = 0,
	Button_Key_Inv_Exclamation               = 1,
	Button_Key_0                             = 2,
	Button_Key_1                             = 3,
	Button_Key_2                             = 4,
	Button_Key_3                             = 5,
	Button_Key_4                             = 6,
	Button_Key_5                             = 7,
	Button_Key_6                             = 8,
	Button_Key_7                             = 9,
	Button_Key_8                             = 10,
	Button_Key_9                             = 11,
	Button_Key_A                             = 12,
	Button_Key_A_Grave                       = 13,
	Button_Key_A_Umlaut                      = 14,
	Button_Key_Alt_L                         = 15,
	Button_Key_Alt_R                         = 16,
	Button_Key_And                           = 17,
	Button_Key_Asterisk                      = 18,
	Button_Key_B                             = 19,
	Button_Key_BackSlash                     = 20,
	Button_Key_BackSpace                     = 21,
	Button_Key_Brackets_End                  = 22,
	Button_Key_Brackets_Start                = 23,
	Button_Key_C                             = 24,
	Button_Key_C_Cedilla                     = 25,
	Button_Key_Ctrl_L                        = 26,
	Button_Key_Ctrl_R                        = 27,
	Button_Key_D                             = 28,
	Button_Key_Delete                        = 29,
	Button_Key_Dollar                        = 30,
	Button_Key_DoubleQ                       = 31,
	Button_Key_Down                          = 32,
	Button_Key_E                             = 33,
	Button_Key_E_Acute                       = 34,
	Button_Key_E_Grave                       = 35,
	Button_Key_End                           = 36,
	Button_Key_Enter                         = 37,
	Button_Key_equal                         = 38,
	Button_Key_Esc                           = 39,
	Button_Key_Exclamation                   = 40,
	Button_Key_F                             = 41,
	Button_Key_F1                            = 42,
	Button_Key_F2                            = 43,
	Button_Key_F3                            = 44,
	Button_Key_F4                            = 45,
	Button_Key_F5                            = 46,
	Button_Key_F6                            = 47,
	Button_Key_F7                            = 48,
	Button_Key_F8                            = 49,
	Button_Key_F9                            = 50,
	Button_Key_F10                           = 51,
	Button_Key_F11                           = 52,
	Button_Key_F12                           = 53,
	Button_Key_G                             = 54,
	Button_Key_H                             = 55,
	Button_Key_Home                          = 56,
	Button_Key_I                             = 57,
	Button_Key_I_Grave                       = 58,
	Button_Key_Insert                        = 59,
	Button_Key_J                             = 60,
	Button_Key_K                             = 61,
	Button_Key_L                             = 62,
	Button_Key_Left                          = 63,
	Button_Key_M                             = 64,
	Button_Key_Minus                         = 65,
	Button_Key_N                             = 66,
	Button_Key_N_Enye                        = 67,
	Button_Key_Num0                          = 68,
	Button_Key_Num1                          = 69,
	Button_Key_Num2                          = 70,
	Button_Key_Num3                          = 71,
	Button_Key_Num4                          = 72,
	Button_Key_Num5                          = 73,
	Button_Key_Num6                          = 74,
	Button_Key_Num7                          = 75,
	Button_Key_Num8                          = 76,
	Button_Key_Num9                          = 77,
	Button_Key_NumAsterisk                   = 78,
	Button_Key_NumMinus                      = 79,
	Button_Key_NumPeriod                     = 80,
	Button_Key_NumPlus                       = 81,
	Button_Key_NumSlash                      = 82,
	Button_Key_O                             = 83,
	Button_Key_O_Grave                       = 84,
	Button_Key_P                             = 85,
	Button_Key_Pause                         = 86,
	Button_Key_Plus                          = 87,
	Button_Key_Q                             = 88,
	Button_Key_R                             = 89,
	Button_Key_Right                         = 90,
	Button_Key_S                             = 91,
	Button_Key_ScrollLock                    = 92,
	Button_Key_Shift_L                       = 93,
	Button_Key_Shift_R                       = 94,
	Button_Key_Space                         = 95,
	Button_Key_T                             = 96,
	Button_Key_Tab                           = 97,
	Button_Key_U                             = 98,
	Button_Key_U_Grave                       = 99,
	Button_Key_Underline                     = 100,
	Button_Key_Up                            = 101,
	Button_Key_V                             = 102,
	Button_Key_W                             = 103,
	Button_Key_X                             = 104,
	Button_Key_Y                             = 105,
	Button_Key_Z                             = 106,
	Button_Key_Ampersand                     = 107,
	Button_Key_E_AccentAigu                  = 108,
	Button_Key_Quote                         = 109,
	Button_Key_Apostrophe                    = 110,
	Button_Key_LeftParantheses               = 111,
	Button_Key_E_AccentGrave                 = 112,
	Button_Key_Underscore                    = 113,
	Button_Key_C_Cedille                     = 114,
	Button_Key_A_AccentGrave                 = 115,
	Button_Key_RightParantheses              = 116,
	Button_Key_Asterix                       = 117,
	Button_Num                               = 118,
	Button_MAX                               = 119,
};

// Enum DarwinGame.EButtonBaseMapping
// NumValues: 0x0016
enum class EButtonBaseMapping : uint8
{
	Base_None                                = 0,
	Base_Button                              = 1,
	Base_Plus                                = 2,
	Base_L1                                  = 3,
	Base_L2                                  = 4,
	Base_LB                                  = 5,
	Base_LT                                  = 6,
	Base_Options                             = 7,
	Base_R1                                  = 8,
	Base_R2                                  = 9,
	Base_RB                                  = 10,
	Base_RT                                  = 11,
	Base_Cross_DualShock                     = 12,
	Base_Cross_XBox                          = 13,
	Base_Key                                 = 14,
	Base_Stick                               = 15,
	Base_Stick_H                             = 16,
	Base_Stick_V                             = 17,
	Base_Stick_Button                        = 18,
	Base_Touch_Pad                           = 19,
	Base_Share                               = 20,
	Base_MAX                                 = 21,
};

// Enum DarwinGame.EGenericControllerMapping
// NumValues: 0x001B
enum class EGenericControllerMapping : uint8
{
	Button_X                                 = 0,
	Button_Y                                 = 1,
	Button_A                                 = 2,
	Button_B                                 = 3,
	Button_R1                                = 4,
	Button_R2                                = 5,
	Button_L1                                = 6,
	Button_L2                                = 7,
	Button_SELECT                            = 8,
	Button_START                             = 9,
	Button_L3                                = 10,
	Button_R3                                = 11,
	Button_DPAD_UP                           = 12,
	Button_DPAD_DOWN                         = 13,
	Button_DPAD_LEFT                         = 14,
	Button_DPAD_RIGHT                        = 15,
	Button_LEFT_STICK_H                      = 16,
	Button_LEFT_STICK_V                      = 17,
	Button_RIGHT_STICK_H                     = 18,
	Button_RIGHT_STICK_V                     = 19,
	Button_LEFT_STICK                        = 20,
	Button_RIGHT_STICK                       = 21,
	Button_DPAD                              = 22,
	Button_DPAD_H                            = 23,
	Button_DPAD_V                            = 24,
	Button_NONE                              = 25,
	Button_MAX                               = 26,
};

// Enum DarwinGame.ECautionRivalType
// NumValues: 0x0005
enum class ECautionRivalType : uint8
{
	NormalRival                              = 0,
	StrongRival                              = 1,
	VeryStrongRival                          = 2,
	None                                     = 3,
	ECautionRivalType_MAX                    = 4,
};

// Enum DarwinGame.ECoinHolderType
// NumValues: 0x0003
enum class ECoinHolderType : uint8
{
	PartyMenu                                = 0,
	CoinMenu                                 = 1,
	ECoinHolderType_MAX                      = 2,
};

// Enum DarwinGame.EDispatch_Effect
// NumValues: 0x0003
enum class EDispatch_Effect : uint8
{
	Success                                  = 0,
	SuccessLoop                              = 1,
	EDispatch_MAX                            = 2,
};

// Enum DarwinGame.EDispatchTrainMovieType
// NumValues: 0x0004
enum class EDispatchTrainMovieType : uint8
{
	Depature                                 = 0,
	Return                                   = 1,
	Num                                      = 2,
	EDispatchTrainMovieType_MAX              = 3,
};

// Enum DarwinGame.EDispatch_DirectingType
// NumValues: 0x0007
enum class EDispatch_DirectingType : uint8
{
	None                                     = 0,
	Depature                                 = 1,
	ResultSuccess                            = 2,
	ResultFailed                             = 3,
	ResultGreatSuccess                       = 4,
	Num                                      = 5,
	EDispatch_MAX                            = 6,
};

// Enum DarwinGame.EArtifactIconType
// NumValues: 0x0004
enum class EArtifactIconType : uint8
{
	Gold                                     = 0,
	Silver                                   = 1,
	Blue                                     = 2,
	EArtifactIconType_MAX                    = 3,
};

// Enum DarwinGame.EBulletItemCategory
// NumValues: 0x0006
enum class EBulletItemCategory : uint8
{
	None                                     = 0,
	All                                      = 1,
	Attack                                   = 2,
	Recovery                                 = 3,
	Other                                    = 4,
	MAX                                      = 5,
};

// Enum DarwinGame.EFoodItemCategory
// NumValues: 0x0007
enum class EFoodItemCategory : uint8
{
	None                                     = 0,
	All                                      = 1,
	MeatVegetable                            = 2,
	NoodlesRice                              = 3,
	Sweets                                   = 4,
	Drink                                    = 5,
	MAX                                      = 6,
};

// Enum DarwinGame.EFacilityMenuOpenState
// NumValues: 0x0003
enum class EFacilityMenuOpenState : uint8
{
	None                                     = 0,
	BoardMenu                                = 1,
	EFacilityMenuOpenState_MAX               = 2,
};

// Enum DarwinGame.EUIFadeType
// NumValues: 0x0003
enum class EUIFadeType : uint8
{
	FadeIn                                   = 0,
	FadeOut                                  = 1,
	EUIFadeType_MAX                          = 2,
};

// Enum DarwinGame.EUIFeatureType
// NumValues: 0x0003
enum class EUIFeatureType : uint8
{
	FeatureType_Kind                         = 0,
	FeatureType_Coin                         = 1,
	FeatureType_MAX                          = 2,
};

// Enum DarwinGame.EFieldStatusOpenType
// NumValues: 0x0005
enum class EFieldStatusOpenType : uint8
{
	Normal                                   = 0,
	QuestLine                                = 1,
	BaseAreaBattle                           = 2,
	QuestOrder                               = 3,
	EFieldStatusOpenType_MAX                 = 4,
};

// Enum DarwinGame.EGoodHeartType
// NumValues: 0x0007
enum class EGoodHeartType : uint8
{
	Type_None                                = 0,
	Type_1                                   = 1,
	Type_2                                   = 2,
	Type_3                                   = 3,
	Type_4                                   = 4,
	Type_5                                   = 5,
	Type_Max                                 = 6,
};

// Enum DarwinGame.EGoodStateEffectType
// NumValues: 0x0005
enum class EGoodStateEffectType : uint8
{
	Gold                                     = 0,
	Red                                      = 1,
	Rainbow                                  = 2,
	None                                     = 3,
	Max                                      = 4,
};

// Enum DarwinGame.EDisplayHubType
// NumValues: 0x000F
enum class EDisplayHubType : uint8
{
	HubTop                                   = 0,
	Yorozuya                                 = 1,
	Station_01                               = 2,
	Station_02                               = 3,
	Station_03                               = 4,
	Station_04                               = 5,
	OtherShop01                              = 6,
	BulletShop                               = 7,
	FoodShop                                 = 8,
	NetWorkTop                               = 9,
	Dungeon_01                               = 10,
	Dungeon_02                               = 11,
	Dungeon_03                               = 12,
	Dungeon_04                               = 13,
	EDisplayHubType_MAX                      = 14,
};

// Enum DarwinGame.EInputGuideCaution
// NumValues: 0x0018
enum class EInputGuideCaution : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Battle                                   = 2,
	NoArtifactResponse                       = 3,
	NotEnoghMp                               = 4,
	CanNotHaveArtifacts                      = 5,
	BadConditions                            = 6,
	Dead                                     = 7,
	CanNotOpenOrderUI                        = 8,
	NotEnoughRomanGauge                      = 9,
	FriendMonsterDown                        = 10,
	NotHaveFood                              = 11,
	CanNotHaveCoins                          = 12,
	CanNotHaveTreasureMaps                   = 13,
	ArtifactIsNear                           = 14,
	Buried                                   = 15,
	CanNotFindPlace                          = 16,
	AlreadyLinkExecuted                      = 17,
	InWater                                  = 18,
	InAir                                    = 19,
	SpecialAbilityExecuted                   = 20,
	InRecastTime                             = 21,
	NotAssigned                              = 22,
	EInputGuideCaution_MAX                   = 23,
};

// Enum DarwinGame.EItemMenuType
// NumValues: 0x0007
enum class EItemMenuType : uint8
{
	None                                     = 0,
	Food                                     = 1,
	Bullet                                   = 2,
	Material                                 = 3,
	Important                                = 4,
	Artifact                                 = 5,
	EItemMenuType_MAX                        = 6,
};

// Enum DarwinGame.EFacilityMenuType
// NumValues: 0x0004
enum class EFacilityMenuType : uint8
{
	EBullet                                  = 0,
	EFood                                    = 1,
	ESelectNum                               = 2,
	EFacilityMenuType_MAX                    = 3,
};

// Enum DarwinGame.ETradePlace
// NumValues: 0x000F
enum class ETradePlace : uint8
{
	None                                     = 0,
	Home                                     = 1,
	Station_01                               = 2,
	Station_02                               = 3,
	Station_03                               = 4,
	Station_04                               = 5,
	OtherShop01                              = 6,
	Home_BulletShop                          = 7,
	Home_FoodShop                            = 8,
	Dungeon_01                               = 9,
	Dungeon_02                               = 10,
	Dungeon_03                               = 11,
	Dungeon_04                               = 12,
	Num                                      = 12,
	ETradePlace_MAX                          = 13,
};

// Enum DarwinGame.EShopItemCategory
// NumValues: 0x000A
enum class EShopItemCategory : uint8
{
	None                                     = 0,
	All                                      = 1,
	Food                                     = 2,
	Bullet                                   = 3,
	Material                                 = 4,
	Recipe                                   = 5,
	Artifact                                 = 6,
	Replica                                  = 7,
	Others                                   = 8,
	EShopItemCategory_MAX                    = 9,
};

// Enum DarwinGame.ETradeCategory
// NumValues: 0x0004
enum class ETradeCategory : uint8
{
	None                                     = 0,
	Buy                                      = 1,
	Sell                                     = 2,
	ETradeCategory_MAX                       = 3,
};

// Enum DarwinGame.EKnowledgeCategoryType
// NumValues: 0x0007
enum class EKnowledgeCategoryType : uint8
{
	All                                      = 0,
	Search                                   = 1,
	Battle                                   = 2,
	Base                                     = 3,
	Menu                                     = 4,
	Other                                    = 5,
	EKnowledgeCategoryType_MAX               = 6,
};

// Enum DarwinGame.EMainMenuCategoryType
// NumValues: 0x000C
enum class EMainMenuCategoryType : uint8
{
	Coin                                     = 0,
	Party                                    = 1,
	Quest                                    = 2,
	Item                                     = 3,
	Team                                     = 4,
	Dict                                     = 5,
	Setting                                  = 6,
	Home                                     = 7,
	ChimeraWing                              = 8,
	Num                                      = 9,
	MainNum                                  = 6,
	EMainMenuCategoryType_MAX                = 10,
};

// Enum DarwinGame.EUIMapType
// NumValues: 0x0003
enum class EUIMapType : uint8
{
	Navi                                     = 0,
	Menu                                     = 1,
	EUIMapType_MAX                           = 2,
};

// Enum DarwinGame.EMapQuestIconCategory
// NumValues: 0x0003
enum class EMapQuestIconCategory : uint8
{
	Main                                     = 0,
	Sub                                      = 1,
	EMapQuestIconCategory_MAX                = 2,
};

// Enum DarwinGame.EMapQuestIconType
// NumValues: 0x0003
enum class EMapQuestIconType : uint8
{
	Point                                    = 0,
	Circle                                   = 1,
	EMapQuestIconType_MAX                    = 2,
};

// Enum DarwinGame.EMapSymbolType
// NumValues: 0x0030
enum class EMapSymbolType : uint8
{
	None                                     = 0,
	Base                                     = 1,
	Station_Big                              = 2,
	Station_Big_Lock                         = 3,
	Station_Small                            = 4,
	Station_Small_Lock                       = 5,
	Fire                                     = 6,
	Quest_Start                              = 7,
	Main_Quest_Start                         = 7,
	Main_Quest_Circle                        = 7,
	Main_Quest                               = 8,
	Main_Quest_End                           = 8,
	Sub_Quest_Start                          = 9,
	Sub_Quest_Circle                         = 9,
	Sub_Quest                                = 10,
	Sub_Quest_Current_Start                  = 11,
	Sub_Quest_Current_Circle                 = 11,
	Sub_Quest_Current                        = 12,
	Sub_Quest_Current_Target_Start           = 13,
	Sub_Quest_Current_Target_Circle          = 13,
	Sub_Quest_Current_Target                 = 14,
	Sub_Quest_Current_Target_End             = 14,
	Sub_Quest_Current_End                    = 14,
	Sub_Quest_End                            = 14,
	Quest_End                                = 14,
	Treasure                                 = 15,
	Enemy                                    = 16,
	Dungeon                                  = 17,
	Star                                     = 18,
	Door                                     = 19,
	Lift_Up                                  = 20,
	Lift_Down                                = 21,
	Lift_Up_Another                          = 22,
	Lift_Down_Another                        = 23,
	Million_Artifact                         = 24,
	Replica_Auto_Artifact                    = 25,
	Million_Artifact_Drop                    = 26,
	Thousand_Artifact_Drop                   = 27,
	HighJunk_Artifact_Drop                   = 28,
	Replica_Auto_Artifact_Drop               = 29,
	Replica_Manual_Artifact_Drop             = 30,
	Sign_Icon_Red                            = 31,
	Sign_Icon_Blue                           = 32,
	Sign_Icon_Yellow                         = 33,
	Friend_Coffin_First                      = 34,
	Friend_Coffin_Second                     = 35,
	Friend_Coffin_Third                      = 36,
	Max                                      = 37,
};

// Enum DarwinGame.ESettingMode
// NumValues: 0x0003
enum class ESettingMode : uint8
{
	MainMenu                                 = 0,
	Title                                    = 1,
	ESettingMode_MAX                         = 2,
};

// Enum DarwinGame.ESettingCategory
// NumValues: 0x0007
enum class ESettingCategory : uint8
{
	Save                                     = 0,
	Load                                     = 1,
	Screen                                   = 2,
	Sound                                    = 3,
	Graphics                                 = 4,
	Operation                                = 5,
	ESettingCategory_MAX                     = 6,
};

// Enum DarwinGame.EDictAppearanceTime
// NumValues: 0x0007
enum class EDictAppearanceTime : uint8
{
	None                                     = 0,
	Daytime                                  = 1,
	Night                                    = 2,
	AllDay                                   = 3,
	NoConcept                                = 4,
	Unknown                                  = 5,
	EDictAppearanceTime_MAX                  = 6,
};

// Enum DarwinGame.EMonsterIconType
// NumValues: 0x0003
enum class EMonsterIconType : uint8
{
	IconM                                    = 0,
	FaceTexture                              = 1,
	EMonsterIconType_MAX                     = 2,
};

// Enum DarwinGame.EOpenNetworkUIType
// NumValues: 0x0003
enum class EOpenNetworkUIType : uint8
{
	NetworkTop                               = 0,
	TreasureHideInfo                         = 1,
	EOpenNetworkUIType_MAX                   = 2,
};

// Enum DarwinGame.EButton
// NumValues: 0x000C
enum class EButton : uint8
{
	Quality                                  = 0,
	AntiAlias                                = 1,
	Ambient_Occlussion                       = 2,
	Shadow                                   = 3,
	Texture_Filter                           = 4,
	Texture_Detail                           = 5,
	Density                                  = 6,
	LOD                                      = 7,
	Reflection                               = 8,
	Bloom                                    = 9,
	Num                                      = 10,
	EButton_MAX                              = 11,
};

// Enum DarwinGame.EButtonOperation
// NumValues: 0x000A
enum class EButtonOperation : uint8
{
	ControllerMapping                        = 0,
	ControllerIconSetting                    = 1,
	KeyboardMapping                          = 2,
	KeyboardLayoutSetting                    = 3,
	CameraLeftRightOrientation               = 4,
	CameraUpDownOrientation                  = 5,
	CameraLeftRightSpeed                     = 6,
	CameraUpDownSpeed                        = 7,
	Num                                      = 8,
	EButtonOperation_MAX                     = 9,
};

// Enum DarwinGame.PanelDirection
// NumValues: 0x0003
enum class EPanelDirection : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	PanelDirection_MAX                       = 2,
};

// Enum DarwinGame.PanelType
// NumValues: 0x0009
enum class EPanelType : uint8
{
	None                                     = 0,
	VolumeLow                                = 1,
	Volume                                   = 2,
	VolumeHigh                               = 3,
	OneButton                                = 4,
	OneButton_PopUp                          = 5,
	TwoButtons                               = 6,
	ThreeButtons                             = 7,
	PanelType_MAX                            = 8,
};

// Enum DarwinGame.EButtonScreenPC
// NumValues: 0x0008
enum class EButtonScreenPC : uint8
{
	Window_Mode                              = 0,
	Resolution                               = 1,
	FPS                                      = 2,
	Vsync                                    = 3,
	Brightness                               = 4,
	Subtitles                                = 5,
	Num                                      = 6,
	EButtonScreenPC_MAX                      = 7,
};

// Enum DarwinGame.ButtonMapDirection
// NumValues: 0x0003
enum class EButtonMapDirection : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	ButtonMapDirection_MAX                   = 2,
};

// Enum DarwinGame.EUIKindResistanceLevel
// NumValues: 0x0007
enum class EUIKindResistanceLevel : uint8
{
	Week                                     = 0,
	Normal                                   = 1,
	SomewahtStrong                           = 2,
	Strong                                   = 3,
	VeryStrong                               = 4,
	Invincible                               = 5,
	EUIKindResistanceLevel_MAX               = 6,
};

// Enum DarwinGame.EPageType
// NumValues: 0x0005
enum class EPageType : uint8
{
	EPageType_None                           = 0,
	EPageType_PartyMenu                      = 1,
	EPageType_CoinMenu                       = 2,
	EPageType_ItemMenu                       = 3,
	EPageType_MAX                            = 4,
};

// Enum DarwinGame.EPanelQuestCurrentType
// NumValues: 0x0004
enum class EPanelQuestCurrentType : uint8
{
	None                                     = 0,
	NormalCurrent                            = 1,
	TargetCurrent                            = 2,
	EPanelQuestCurrentType_MAX               = 3,
};

// Enum DarwinGame.EPanelQuestColorType
// NumValues: 0x0004
enum class EPanelQuestColorType : uint8
{
	Normal                                   = 0,
	Cleared                                  = 1,
	Parent                                   = 2,
	EPanelQuestColorType_MAX                 = 3,
};

// Enum DarwinGame.EQuestMenuOpenType
// NumValues: 0x0004
enum class EQuestMenuOpenType : uint8
{
	MainMenuRoot                             = 0,
	QuestConfirmation                        = 1,
	Event                                    = 2,
	EQuestMenuOpenType_MAX                   = 3,
};

// Enum DarwinGame.EUIQuestQueueProcessType
// NumValues: 0x0008
enum class EUIQuestQueueProcessType : uint8
{
	Open                                     = 0,
	Order                                    = 1,
	Clear                                    = 2,
	Cleared                                  = 3,
	ChangeCurrent                            = 4,
	Update                                   = 5,
	Failed                                   = 6,
	EUIQuestQueueProcessType_MAX             = 7,
};

// Enum DarwinGame.EUIRewardItemType
// NumValues: 0x0009
enum class EUIRewardItemType : uint8
{
	Material                                 = 0,
	Coin                                     = 1,
	Monster                                  = 2,
	Food                                     = 3,
	Bullet                                   = 4,
	Recipe                                   = 5,
	Important                                = 6,
	Artifact                                 = 7,
	EUIRewardItemType_MAX                    = 8,
};

// Enum DarwinGame.EUICautionRank
// NumValues: 0x0006
enum class EUICautionRank : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	RivalAppearance                          = 4,
	EUICautionRank_MAX                       = 5,
};

// Enum DarwinGame.EArrowWidgetVisibleType
// NumValues: 0x0003
enum class EArrowWidgetVisibleType : uint8
{
	Normal                                   = 0,
	Tips                                     = 1,
	EArrowWidgetVisibleType_MAX              = 2,
};

// Enum DarwinGame.EScrollBarMoveType
// NumValues: 0x0003
enum class EScrollBarMoveType : uint8
{
	Vertical                                 = 0,
	Horizontal                               = 1,
	EScrollBarMoveType_MAX                   = 2,
};

// Enum DarwinGame.EMapSignColorType
// NumValues: 0x0005
enum class EMapSignColorType : uint8
{
	None                                     = 0,
	Red                                      = 1,
	Blue                                     = 2,
	Yellow                                   = 3,
	EMapSignColorType_MAX                    = 4,
};

// Enum DarwinGame.EDamageSizeType
// NumValues: 0x0004
enum class EDamageSizeType : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	Normal                                   = 2,
	EDamageSizeType_MAX                      = 3,
};

// Enum DarwinGame.EDamageCriticalType
// NumValues: 0x0005
enum class EDamageCriticalType : uint8
{
	Normal                                   = 0,
	Critical                                 = 1,
	Critical_Small_Success                   = 2,
	Critical_Big_Success                     = 3,
	EDamageCriticalType_MAX                  = 4,
};

// Enum DarwinGame.UIHealPopType
// NumValues: 0x0004
enum class EUIHealPopType : uint8
{
	None                                     = 0,
	HP                                       = 1,
	MP                                       = 2,
	UIHealPopType_MAX                        = 3,
};

// Enum DarwinGame.EIconDrawType
// NumValues: 0x0003
enum class EIconDrawType : uint8
{
	AR                                       = 0,
	HeadUp                                   = 1,
	EIconDrawType_MAX                        = 2,
};

// Enum DarwinGame.EStaffRollTextColor
// NumValues: 0x0003
enum class EStaffRollTextColor : uint8
{
	White                                    = 0,
	Yellow                                   = 1,
	EStaffRollTextColor_MAX                  = 2,
};

// Enum DarwinGame.EStampFrameType
// NumValues: 0x0005
enum class EStampFrameType : uint8
{
	StampFrame_Speech_Left                   = 0,
	StampFrame_Speech_Right                  = 1,
	StampFrame_Think_Left                    = 2,
	StampFrame_Think_Right                   = 3,
	StampFrame_MAX                           = 4,
};

// Enum DarwinGame.EStampIconType
// NumValues: 0x0034
enum class EStampIconType : uint8
{
	None                                     = 0,
	StampIcon_MusicalNote                    = 1,
	StampIcon_Heart                          = 2,
	StampIcon_Exclamation                    = 3,
	StampIcon_Question                       = 4,
	StampIcon_Idea                           = 5,
	StampIcon_Amazed                         = 6,
	StampIcon_Impatience                     = 7,
	StampIcon_Stunned                        = 8,
	StampIcon_Shy                            = 9,
	StampIcon_Anger                          = 10,
	StampIcon_Misty                          = 11,
	StampIcon_Twinkle                        = 12,
	StampIcon_Depression                     = 13,
	StampIcon_Sleep                          = 14,
	StampIcon_Meal                           = 15,
	StampIcon_Hunger                         = 16,
	StampIcon_Laugh                          = 17,
	StampIcon_WantSleep                      = 18,
	StampIcon_WantEat                        = 19,
	StampIcon_WantDrink                      = 20,
	StampIcon_WantHide                       = 21,
	StampIcon_Hot                            = 22,
	StampIcon_Cold                           = 23,
	StampIcon_JoyEmotion                     = 24,
	StampIcon_AngerEmotion                   = 25,
	StampIcon_SadEmotion                     = 26,
	StampIcon_SurpriseEmotion                = 27,
	StampIcon_Panic                          = 28,
	StampIcon_Death                          = 29,
	StampIcon_ArtifactMillion                = 30,
	StampIcon_ArtifactThousand               = 31,
	StampIcon_ArtifactHighJunk               = 32,
	StampIcon_ArtifactReplica                = 33,
	StampIcon_ArtifactAutoReplica            = 34,
	StampIcon_DropArtifactMillion            = 35,
	StampIcon_DropArtifactThousand           = 36,
	StampIcon_DropArtifactHighJunk           = 37,
	StampIcon_DropArtifactReplica            = 38,
	StampIcon_DropArtifactAutoReplica        = 39,
	StampIcon_ArtifactThousand_Near          = 40,
	StampIcon_ArtifactHighJunk_Near          = 41,
	StampIcon_ArtifactReplica_Near           = 42,
	StampIcon_ArtifactThousand_Leave         = 43,
	StampIcon_ArtifactHighJunk_Leave         = 44,
	StampIcon_ArtifactReplica_Leave          = 45,
	StampIcon_Character_01                   = 46,
	StampIcon_Character_02                   = 47,
	StampIcon_ArtifactThousandBig            = 48,
	StampIcon_DigReplica                     = 49,
	StampIcon_Traveller_Come                 = 50,
	MAX                                      = 51,
};

// Enum DarwinGame.EStationMenuOpenState
// NumValues: 0x0003
enum class EStationMenuOpenState : uint8
{
	Station                                  = 0,
	Dispatch                                 = 1,
	EStationMenuOpenState_MAX                = 2,
};

// Enum DarwinGame.EFacilityReceptionType
// NumValues: 0x0006
enum class EFacilityReceptionType : uint8
{
	SwapMenu                                 = 0,
	Dispatch                                 = 1,
	Facility                                 = 2,
	Cancel                                   = 3,
	Num                                      = 4,
	EFacilityReceptionType_MAX               = 5,
};

// Enum DarwinGame.EHubReceptionType
// NumValues: 0x0009
enum class EHubReceptionType : uint8
{
	BoardMenu                                = 0,
	Shop                                     = 1,
	Food                                     = 2,
	Bullet                                   = 3,
	Quest                                    = 4,
	Party                                    = 5,
	Cancel                                   = 6,
	Num                                      = 7,
	EHubReceptionType_MAX                    = 8,
};

// Enum DarwinGame.EUITeamMenuItemType
// NumValues: 0x0007
enum class EUITeamMenuItemType : uint8
{
	None                                     = 0,
	ArtifactRoom                             = 1,
	Dispatch                                 = 2,
	TeamFlagChange                           = 3,
	TeamNameChange                           = 4,
	InputCode                                = 5,
	EUITeamMenuItemType_MAX                  = 6,
};

// Enum DarwinGame.EUITimingType
// NumValues: 0x0004
enum class EUITimingType : uint8
{
	Normal                                   = 0,
	Nice                                     = 1,
	Perfect                                  = 2,
	EUITimingType_MAX                        = 3,
};

// Enum DarwinGame.EArtifactCompCategoryType
// NumValues: 0x0006
enum class EArtifactCompCategoryType : uint8
{
	None                                     = 0,
	Class                                    = 1,
	SubClass                                 = 2,
	ArtifactType                             = 3,
	OtherAll                                 = 4,
	EArtifactCompCategoryType_MAX            = 5,
};

// Enum DarwinGame.EArtifactLeftMenuType
// NumValues: 0x0005
enum class EArtifactLeftMenuType : uint8
{
	Treasure                                 = 0,
	Class                                    = 1,
	SubClass                                 = 2,
	Other                                    = 3,
	Max                                      = 4,
};

// Enum DarwinGame.EArtifactOpenType
// NumValues: 0x0004
enum class EArtifactOpenType : uint8
{
	MyTreasure                               = 0,
	TeamStatus                               = 1,
	NetworkManagement                        = 2,
	EArtifactOpenType_MAX                    = 3,
};

// Enum DarwinGame.EArtifactCategoryType
// NumValues: 0x000C
enum class EArtifactCategoryType : uint8
{
	SevenStone                               = 0,
	Treasure                                 = 1,
	HighJunk                                 = 2,
	Junk                                     = 3,
	Replica                                  = 4,
	Class                                    = 5,
	SubClass                                 = 6,
	MyTreasure                               = 7,
	EstimatedTopX                            = 8,
	ALL                                      = 9,
	None                                     = 10,
	EArtifactCategoryType_MAX                = 11,
};

// Enum DarwinGame.ETutorialGuideType
// NumValues: 0x001C
enum class ETutorialGuideType : uint8
{
	None                                     = 0,
	Move                                     = 1,
	Jump                                     = 2,
	Decide                                   = 3,
	Avoid                                    = 4,
	Camera                                   = 5,
	Menu                                     = 6,
	StandToCrouch                            = 7,
	Shot                                     = 8,
	BulletsSelect                            = 9,
	Vision                                   = 10,
	Attack                                   = 11,
	Go                                       = 12,
	BulletsMoveCategory                      = 13,
	BulletsMoveType                          = 14,
	Link                                     = 15,
	SneakAttack                              = 16,
	Revival                                  = 17,
	Heal                                     = 18,
	SpecialAttack                            = 19,
	TargetChage                              = 20,
	Steal                                    = 21,
	ComeOver                                 = 22,
	Map                                      = 23,
	VisionLook                               = 24,
	Squeeze                                  = 25,
	BulletShot                               = 26,
	ETutorialGuideType_MAX                   = 27,
};

// Enum DarwinGame.EVisionPattern
// NumValues: 0x0009
enum class EVisionPattern : uint8
{
	None                                     = 0,
	Tutorial1                                = 1,
	Tutorial2                                = 2,
	Tutorial3                                = 3,
	Tutorial4                                = 4,
	Tutorial5                                = 5,
	Tutorial6                                = 6,
	Normal                                   = 7,
	EVisionPattern_MAX                       = 8,
};

// Enum DarwinGame.EUnknownArtifactEffectType
// NumValues: 0x0005
enum class EUnknownArtifactEffectType : uint8
{
	None                                     = 0,
	GoldBox                                  = 1,
	SilverBox                                = 2,
	ReplicaBox                               = 3,
	EUnknownArtifactEffectType_MAX           = 4,
};

// Enum DarwinGame.ELastBtlQTELogType
// NumValues: 0x0005
enum class ELastBtlQTELogType : uint8
{
	LastBtlQTELogType_1                      = 0,
	LastBtlQTELogType_2                      = 1,
	LastBtlQTELogType_3                      = 2,
	Num                                      = 3,
	ELastBtlQTELogType_MAX                   = 4,
};

// Enum DarwinGame.EVisionFrameOutFlag
// NumValues: 0x0005
enum class EVisionFrameOutFlag : uint8
{
	Battle                                   = 0,
	Area                                     = 1,
	Rival                                    = 2,
	FlagEnd                                  = 3,
	EVisionFrameOutFlag_MAX                  = 4,
};

// Enum DarwinGame.EWhiteFadeState
// NumValues: 0x0006
enum class EWhiteFadeState : uint8
{
	Hidden                                   = 0,
	FadeIn                                   = 1,
	FadeOut                                  = 2,
	FadeIn_Half                              = 3,
	FadeOut_Half                             = 4,
	EWhiteFadeState_MAX                      = 5,
};

// Enum DarwinGame.EWinKeyboardTexture
// NumValues: 0x0006
enum class EWinKeyboardTexture : uint8
{
	QWERTY_ENGLISH                           = 0,
	QWERTY_ITALY                             = 1,
	QWERTY_SPAIN                             = 2,
	QWERTZ                                   = 3,
	AZERTY                                   = 4,
	EWinKeyboardTexture_MAX                  = 5,
};

// Enum DarwinGame.EWinControllerTexture
// NumValues: 0x0003
enum class EWinControllerTexture : uint8
{
	XBOX                                     = 0,
	DUALSHOCK                                = 1,
	EWinControllerTexture_MAX                = 2,
};

// Enum DarwinGame.EAxisConfigType
// NumValues: 0x0005
enum class EAxisConfigType : uint8
{
	Normal                                   = 0,
	Bidirectional                            = 1,
	QuadDirAnalog                            = 2,
	QuadDirDigital                           = 3,
	EAxisConfigType_MAX                      = 4,
};

// Enum DarwinGame.EButtonRestictionGroup
// NumValues: 0x0009
enum class EButtonRestictionGroup : uint8
{
	None                                     = 0,
	Face_Buttons                             = 1,
	Special_Buttons                          = 2,
	Cross_Buttons                            = 3,
	Analog_Sticks                            = 4,
	Analog_Buttons                           = 5,
	Shoulder_Buttons                         = 6,
	Analog_Cursor_Sticks                     = 7,
	EButtonRestictionGroup_MAX               = 8,
};

// Enum DarwinGame.EWinMenuNameCloseResultType
// NumValues: 0x0004
enum class EWinMenuNameCloseResultType : uint8
{
	Yes                                      = 0,
	No                                       = 1,
	Error                                    = 2,
	EWinMenuNameCloseResultType_MAX          = 3,
};

// Enum DarwinGame.EGenderType
// NumValues: 0x0004
enum class EGenderType : uint8
{
	Male                                     = 0,
	Female                                   = 1,
	Neutral                                  = 2,
	EGenderType_MAX                          = 3,
};

// ScriptStruct DarwinGame.ActionGameplayEffectContainerSpec
// 0x0038 (0x0038 - 0x0000)
struct FActionGameplayEffectContainerSpec final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      TargetGameplayEffectSpecs;                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionGameplayEffectContainerSpec) == 0x000008, "Wrong alignment on FActionGameplayEffectContainerSpec");
static_assert(sizeof(FActionGameplayEffectContainerSpec) == 0x000038, "Wrong size on FActionGameplayEffectContainerSpec");
static_assert(offsetof(FActionGameplayEffectContainerSpec, TargetData) == 0x000000, "Member 'FActionGameplayEffectContainerSpec::TargetData' has a wrong offset!");
static_assert(offsetof(FActionGameplayEffectContainerSpec, TargetGameplayEffectSpecs) == 0x000028, "Member 'FActionGameplayEffectContainerSpec::TargetGameplayEffectSpecs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MyTeamRankName
// 0x0020 (0x0028 - 0x0008)
struct FST_MyTeamRankName final : public FTableRowBase
{
public:
	class FText                                   RankName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PlateGrade;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MyTeamRankName) == 0x000008, "Wrong alignment on FST_MyTeamRankName");
static_assert(sizeof(FST_MyTeamRankName) == 0x000028, "Wrong size on FST_MyTeamRankName");
static_assert(offsetof(FST_MyTeamRankName, RankName) == 0x000008, "Member 'FST_MyTeamRankName::RankName' has a wrong offset!");
static_assert(offsetof(FST_MyTeamRankName, PlateGrade) == 0x000020, "Member 'FST_MyTeamRankName::PlateGrade' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ActionGrowthData
// 0x000C (0x000C - 0x0000)
struct FST_ActionGrowthData final
{
public:
	int32                                         GroupID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowthStep;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasteryLevel;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ActionGrowthData) == 0x000004, "Wrong alignment on FST_ActionGrowthData");
static_assert(sizeof(FST_ActionGrowthData) == 0x00000C, "Wrong size on FST_ActionGrowthData");
static_assert(offsetof(FST_ActionGrowthData, GroupID) == 0x000000, "Member 'FST_ActionGrowthData::GroupID' has a wrong offset!");
static_assert(offsetof(FST_ActionGrowthData, GrowthStep) == 0x000004, "Member 'FST_ActionGrowthData::GrowthStep' has a wrong offset!");
static_assert(offsetof(FST_ActionGrowthData, MasteryLevel) == 0x000008, "Member 'FST_ActionGrowthData::MasteryLevel' has a wrong offset!");

// ScriptStruct DarwinGame.AttackCollisionOverlapKey
// 0x000C (0x000C - 0x0000)
struct FAttackCollisionOverlapKey final
{
public:
	int32                                         ActionColliosinUniqueId;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttackElementId;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackCollisionOverlapKey) == 0x000004, "Wrong alignment on FAttackCollisionOverlapKey");
static_assert(sizeof(FAttackCollisionOverlapKey) == 0x00000C, "Wrong size on FAttackCollisionOverlapKey");
static_assert(offsetof(FAttackCollisionOverlapKey, ActionColliosinUniqueId) == 0x000000, "Member 'FAttackCollisionOverlapKey::ActionColliosinUniqueId' has a wrong offset!");
static_assert(offsetof(FAttackCollisionOverlapKey, AttackElementId) == 0x000004, "Member 'FAttackCollisionOverlapKey::AttackElementId' has a wrong offset!");

// ScriptStruct DarwinGame.OverlapEventInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FOverlapEventInfo final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOverlapEventInfo) == 0x000008, "Wrong alignment on FOverlapEventInfo");
static_assert(sizeof(FOverlapEventInfo) == 0x0000A8, "Wrong size on FOverlapEventInfo");
static_assert(offsetof(FOverlapEventInfo, OverlappedComponent) == 0x000000, "Member 'FOverlapEventInfo::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FOverlapEventInfo, OtherActor) == 0x000008, "Member 'FOverlapEventInfo::OtherActor' has a wrong offset!");
static_assert(offsetof(FOverlapEventInfo, OtherComp) == 0x000010, "Member 'FOverlapEventInfo::OtherComp' has a wrong offset!");
static_assert(offsetof(FOverlapEventInfo, OtherBodyIndex) == 0x000018, "Member 'FOverlapEventInfo::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FOverlapEventInfo, bFromSweep) == 0x00001C, "Member 'FOverlapEventInfo::bFromSweep' has a wrong offset!");
static_assert(offsetof(FOverlapEventInfo, SweepResult) == 0x000020, "Member 'FOverlapEventInfo::SweepResult' has a wrong offset!");

// ScriptStruct DarwinGame.AttackCollisionEventInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FAttackCollisionEventInfo final
{
public:
	struct FAttackCollisionOverlapKey             Key;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOverlapEventInfo                      eventInfo;                                         // 0x0010(0x00A8)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackCollisionEventInfo) == 0x000008, "Wrong alignment on FAttackCollisionEventInfo");
static_assert(sizeof(FAttackCollisionEventInfo) == 0x0000B8, "Wrong size on FAttackCollisionEventInfo");
static_assert(offsetof(FAttackCollisionEventInfo, Key) == 0x000000, "Member 'FAttackCollisionEventInfo::Key' has a wrong offset!");
static_assert(offsetof(FAttackCollisionEventInfo, eventInfo) == 0x000010, "Member 'FAttackCollisionEventInfo::eventInfo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIHubBackMonsterInfo
// 0x0014 (0x0014 - 0x0000)
struct FST_UIHubBackMonsterInfo final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotate;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIHubBackMonsterInfo) == 0x000004, "Wrong alignment on FST_UIHubBackMonsterInfo");
static_assert(sizeof(FST_UIHubBackMonsterInfo) == 0x000014, "Wrong size on FST_UIHubBackMonsterInfo");
static_assert(offsetof(FST_UIHubBackMonsterInfo, Scale) == 0x000000, "Member 'FST_UIHubBackMonsterInfo::Scale' has a wrong offset!");
static_assert(offsetof(FST_UIHubBackMonsterInfo, Rotate) == 0x000004, "Member 'FST_UIHubBackMonsterInfo::Rotate' has a wrong offset!");
static_assert(offsetof(FST_UIHubBackMonsterInfo, Pos) == 0x000008, "Member 'FST_UIHubBackMonsterInfo::Pos' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIHubBackMonsterData
// 0x0030 (0x0038 - 0x0008)
struct FST_UIHubBackMonsterData final : public FTableRowBase
{
public:
	TArray<struct FST_UIHubBackMonsterInfo>       ShopList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_UIHubBackMonsterInfo>       BulletList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_UIHubBackMonsterInfo>       FoodList;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIHubBackMonsterData) == 0x000008, "Wrong alignment on FST_UIHubBackMonsterData");
static_assert(sizeof(FST_UIHubBackMonsterData) == 0x000038, "Wrong size on FST_UIHubBackMonsterData");
static_assert(offsetof(FST_UIHubBackMonsterData, ShopList) == 0x000008, "Member 'FST_UIHubBackMonsterData::ShopList' has a wrong offset!");
static_assert(offsetof(FST_UIHubBackMonsterData, BulletList) == 0x000018, "Member 'FST_UIHubBackMonsterData::BulletList' has a wrong offset!");
static_assert(offsetof(FST_UIHubBackMonsterData, FoodList) == 0x000028, "Member 'FST_UIHubBackMonsterData::FoodList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GameScriptTable
// 0x0038 (0x0040 - 0x0008)
struct FST_GameScriptTable final : public FTableRowBase
{
public:
	EEpisodeType                                  EpisodeType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameScriptCheckType                          GameScriptCheckType;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SpawnNpcIDs;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CreateEventTriggerIDs;                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LoadLevelNames;                                    // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_GameScriptTable) == 0x000008, "Wrong alignment on FST_GameScriptTable");
static_assert(sizeof(FST_GameScriptTable) == 0x000040, "Wrong size on FST_GameScriptTable");
static_assert(offsetof(FST_GameScriptTable, EpisodeType) == 0x000008, "Member 'FST_GameScriptTable::EpisodeType' has a wrong offset!");
static_assert(offsetof(FST_GameScriptTable, GameScriptCheckType) == 0x000009, "Member 'FST_GameScriptTable::GameScriptCheckType' has a wrong offset!");
static_assert(offsetof(FST_GameScriptTable, SpawnNpcIDs) == 0x000010, "Member 'FST_GameScriptTable::SpawnNpcIDs' has a wrong offset!");
static_assert(offsetof(FST_GameScriptTable, CreateEventTriggerIDs) == 0x000020, "Member 'FST_GameScriptTable::CreateEventTriggerIDs' has a wrong offset!");
static_assert(offsetof(FST_GameScriptTable, LoadLevelNames) == 0x000030, "Member 'FST_GameScriptTable::LoadLevelNames' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Attribute
// 0x000C (0x000C - 0x0000)
struct FST_Attribute final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Attribute) == 0x000004, "Wrong alignment on FST_Attribute");
static_assert(sizeof(FST_Attribute) == 0x00000C, "Wrong size on FST_Attribute");
static_assert(offsetof(FST_Attribute, ID) == 0x000000, "Member 'FST_Attribute::ID' has a wrong offset!");
static_assert(offsetof(FST_Attribute, Level) == 0x000008, "Member 'FST_Attribute::Level' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ActionRequirements
// 0x000C (0x000C - 0x0000)
struct FST_ActionRequirements final
{
public:
	EAIThinkActionType                            AIThinkActionType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistance;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ActionRequirements) == 0x000004, "Wrong alignment on FST_ActionRequirements");
static_assert(sizeof(FST_ActionRequirements) == 0x00000C, "Wrong size on FST_ActionRequirements");
static_assert(offsetof(FST_ActionRequirements, AIThinkActionType) == 0x000000, "Member 'FST_ActionRequirements::AIThinkActionType' has a wrong offset!");
static_assert(offsetof(FST_ActionRequirements, MinDistance) == 0x000004, "Member 'FST_ActionRequirements::MinDistance' has a wrong offset!");
static_assert(offsetof(FST_ActionRequirements, MaxDistance) == 0x000008, "Member 'FST_ActionRequirements::MaxDistance' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ActionPerformance
// 0x0044 (0x0044 - 0x0000)
struct FST_ActionPerformance final
{
public:
	float                                         CorrectDistance;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorrectHeight;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextMontageSection;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAngle;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHitNum;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitIntervalTime;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubActionDetailID00;                               // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubActionDetailID01;                               // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubActionDetailID02;                               // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime2;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuctionPower;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuctionRadius;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ActionPerformance) == 0x000004, "Wrong alignment on FST_ActionPerformance");
static_assert(sizeof(FST_ActionPerformance) == 0x000044, "Wrong size on FST_ActionPerformance");
static_assert(offsetof(FST_ActionPerformance, CorrectDistance) == 0x000000, "Member 'FST_ActionPerformance::CorrectDistance' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, CorrectHeight) == 0x000004, "Member 'FST_ActionPerformance::CorrectHeight' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, NextMontageSection) == 0x000008, "Member 'FST_ActionPerformance::NextMontageSection' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, TargetAngle) == 0x000010, "Member 'FST_ActionPerformance::TargetAngle' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, MaxHitNum) == 0x000014, "Member 'FST_ActionPerformance::MaxHitNum' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, HitIntervalTime) == 0x000018, "Member 'FST_ActionPerformance::HitIntervalTime' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, SubActionDetailID00) == 0x00001C, "Member 'FST_ActionPerformance::SubActionDetailID00' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, SubActionDetailID01) == 0x000024, "Member 'FST_ActionPerformance::SubActionDetailID01' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, SubActionDetailID02) == 0x00002C, "Member 'FST_ActionPerformance::SubActionDetailID02' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, WaitTime) == 0x000034, "Member 'FST_ActionPerformance::WaitTime' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, WaitTime2) == 0x000038, "Member 'FST_ActionPerformance::WaitTime2' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, SuctionPower) == 0x00003C, "Member 'FST_ActionPerformance::SuctionPower' has a wrong offset!");
static_assert(offsetof(FST_ActionPerformance, SuctionRadius) == 0x000040, "Member 'FST_ActionPerformance::SuctionRadius' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BallisticPerformance
// 0x0050 (0x0050 - 0x0000)
struct FST_BallisticPerformance final
{
public:
	EBallisticType                                BallisticType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionID;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrawl;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerforate;                                        // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesNotGenerateBulletsUntilFired;                 // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHoming;                                         // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingAcceleration;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingOffAngle;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomingTime;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceleStartTime;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceleEndSpeed;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardDistance;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDistance;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDistanceMin;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime2;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeX;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeY;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeZ;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BallisticPerformance) == 0x000004, "Wrong alignment on FST_BallisticPerformance");
static_assert(sizeof(FST_BallisticPerformance) == 0x000050, "Wrong size on FST_BallisticPerformance");
static_assert(offsetof(FST_BallisticPerformance, BallisticType) == 0x000000, "Member 'FST_BallisticPerformance::BallisticType' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, CollisionID) == 0x000004, "Member 'FST_BallisticPerformance::CollisionID' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, bCrawl) == 0x00000C, "Member 'FST_BallisticPerformance::bCrawl' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, bPerforate) == 0x00000D, "Member 'FST_BallisticPerformance::bPerforate' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, bDoesNotGenerateBulletsUntilFired) == 0x00000E, "Member 'FST_BallisticPerformance::bDoesNotGenerateBulletsUntilFired' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, bIsHoming) == 0x00000F, "Member 'FST_BallisticPerformance::bIsHoming' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, HomingAcceleration) == 0x000010, "Member 'FST_BallisticPerformance::HomingAcceleration' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, HomingOffAngle) == 0x000014, "Member 'FST_BallisticPerformance::HomingOffAngle' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, HomingTime) == 0x000018, "Member 'FST_BallisticPerformance::HomingTime' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, InitialSpeed) == 0x00001C, "Member 'FST_BallisticPerformance::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, AcceleStartTime) == 0x000020, "Member 'FST_BallisticPerformance::AcceleStartTime' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, Acceleration) == 0x000024, "Member 'FST_BallisticPerformance::Acceleration' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, AcceleEndSpeed) == 0x000028, "Member 'FST_BallisticPerformance::AcceleEndSpeed' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, GravityScale) == 0x00002C, "Member 'FST_BallisticPerformance::GravityScale' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, ForwardDistance) == 0x000030, "Member 'FST_BallisticPerformance::ForwardDistance' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, UpDistance) == 0x000034, "Member 'FST_BallisticPerformance::UpDistance' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, UpDistanceMin) == 0x000038, "Member 'FST_BallisticPerformance::UpDistanceMin' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, LifeTime) == 0x00003C, "Member 'FST_BallisticPerformance::LifeTime' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, LifeTime2) == 0x000040, "Member 'FST_BallisticPerformance::LifeTime2' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, SizeX) == 0x000044, "Member 'FST_BallisticPerformance::SizeX' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, SizeY) == 0x000048, "Member 'FST_BallisticPerformance::SizeY' has a wrong offset!");
static_assert(offsetof(FST_BallisticPerformance, SizeZ) == 0x00004C, "Member 'FST_BallisticPerformance::SizeZ' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LaserPerformance
// 0x0024 (0x0024 - 0x0000)
struct FST_LaserPerformance final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartForwardDistance;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndForwardDistance;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionID;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LaserPerformance) == 0x000004, "Wrong alignment on FST_LaserPerformance");
static_assert(sizeof(FST_LaserPerformance) == 0x000024, "Wrong size on FST_LaserPerformance");
static_assert(offsetof(FST_LaserPerformance, Time) == 0x000000, "Member 'FST_LaserPerformance::Time' has a wrong offset!");
static_assert(offsetof(FST_LaserPerformance, Radius) == 0x000004, "Member 'FST_LaserPerformance::Radius' has a wrong offset!");
static_assert(offsetof(FST_LaserPerformance, Speed) == 0x000008, "Member 'FST_LaserPerformance::Speed' has a wrong offset!");
static_assert(offsetof(FST_LaserPerformance, StartForwardDistance) == 0x00000C, "Member 'FST_LaserPerformance::StartForwardDistance' has a wrong offset!");
static_assert(offsetof(FST_LaserPerformance, EndForwardDistance) == 0x000010, "Member 'FST_LaserPerformance::EndForwardDistance' has a wrong offset!");
static_assert(offsetof(FST_LaserPerformance, CollisionID) == 0x000014, "Member 'FST_LaserPerformance::CollisionID' has a wrong offset!");
static_assert(offsetof(FST_LaserPerformance, actionDetailID) == 0x00001C, "Member 'FST_LaserPerformance::actionDetailID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ChildActionPerformance
// 0x0018 (0x0018 - 0x0000)
struct FST_ChildActionPerformance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ChildActionPerformance) == 0x000004, "Wrong alignment on FST_ChildActionPerformance");
static_assert(sizeof(FST_ChildActionPerformance) == 0x000018, "Wrong size on FST_ChildActionPerformance");
static_assert(offsetof(FST_ChildActionPerformance, Distance) == 0x000000, "Member 'FST_ChildActionPerformance::Distance' has a wrong offset!");
static_assert(offsetof(FST_ChildActionPerformance, Interval) == 0x000004, "Member 'FST_ChildActionPerformance::Interval' has a wrong offset!");
static_assert(offsetof(FST_ChildActionPerformance, CollisionID) == 0x000008, "Member 'FST_ChildActionPerformance::CollisionID' has a wrong offset!");
static_assert(offsetof(FST_ChildActionPerformance, actionDetailID) == 0x000010, "Member 'FST_ChildActionPerformance::actionDetailID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_OverHeadFallPerformanceDefine
// 0x000C (0x000C - 0x0000)
struct FST_OverHeadFallPerformanceDefine final
{
public:
	float                                         CollisionGenerationTiming;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_OverHeadFallPerformanceDefine) == 0x000004, "Wrong alignment on FST_OverHeadFallPerformanceDefine");
static_assert(sizeof(FST_OverHeadFallPerformanceDefine) == 0x00000C, "Wrong size on FST_OverHeadFallPerformanceDefine");
static_assert(offsetof(FST_OverHeadFallPerformanceDefine, CollisionGenerationTiming) == 0x000000, "Member 'FST_OverHeadFallPerformanceDefine::CollisionGenerationTiming' has a wrong offset!");
static_assert(offsetof(FST_OverHeadFallPerformanceDefine, Offset) == 0x000004, "Member 'FST_OverHeadFallPerformanceDefine::Offset' has a wrong offset!");
static_assert(offsetof(FST_OverHeadFallPerformanceDefine, Length) == 0x000008, "Member 'FST_OverHeadFallPerformanceDefine::Length' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ShotgunActionPerformance
// 0x0024 (0x0024 - 0x0000)
struct FST_ShotgunActionPerformance final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearRange;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarRange;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageNum;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageInterval;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ShotgunActionPerformance) == 0x000004, "Wrong alignment on FST_ShotgunActionPerformance");
static_assert(sizeof(FST_ShotgunActionPerformance) == 0x000024, "Wrong size on FST_ShotgunActionPerformance");
static_assert(offsetof(FST_ShotgunActionPerformance, Offset) == 0x000000, "Member 'FST_ShotgunActionPerformance::Offset' has a wrong offset!");
static_assert(offsetof(FST_ShotgunActionPerformance, Angle) == 0x000004, "Member 'FST_ShotgunActionPerformance::Angle' has a wrong offset!");
static_assert(offsetof(FST_ShotgunActionPerformance, Height) == 0x000008, "Member 'FST_ShotgunActionPerformance::Height' has a wrong offset!");
static_assert(offsetof(FST_ShotgunActionPerformance, NearRange) == 0x00000C, "Member 'FST_ShotgunActionPerformance::NearRange' has a wrong offset!");
static_assert(offsetof(FST_ShotgunActionPerformance, FarRange) == 0x000010, "Member 'FST_ShotgunActionPerformance::FarRange' has a wrong offset!");
static_assert(offsetof(FST_ShotgunActionPerformance, DamageNum) == 0x000014, "Member 'FST_ShotgunActionPerformance::DamageNum' has a wrong offset!");
static_assert(offsetof(FST_ShotgunActionPerformance, DamageInterval) == 0x000018, "Member 'FST_ShotgunActionPerformance::DamageInterval' has a wrong offset!");
static_assert(offsetof(FST_ShotgunActionPerformance, actionDetailID) == 0x00001C, "Member 'FST_ShotgunActionPerformance::actionDetailID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TargetArea
// 0x001C (0x001C - 0x0000)
struct FST_TargetArea final
{
public:
	int32                                         ShapeKind;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CenterKind;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offest_X;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offest_Y;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TargetArea) == 0x000004, "Wrong alignment on FST_TargetArea");
static_assert(sizeof(FST_TargetArea) == 0x00001C, "Wrong size on FST_TargetArea");
static_assert(offsetof(FST_TargetArea, ShapeKind) == 0x000000, "Member 'FST_TargetArea::ShapeKind' has a wrong offset!");
static_assert(offsetof(FST_TargetArea, Radius) == 0x000004, "Member 'FST_TargetArea::Radius' has a wrong offset!");
static_assert(offsetof(FST_TargetArea, CenterKind) == 0x000008, "Member 'FST_TargetArea::CenterKind' has a wrong offset!");
static_assert(offsetof(FST_TargetArea, Width) == 0x00000C, "Member 'FST_TargetArea::Width' has a wrong offset!");
static_assert(offsetof(FST_TargetArea, Length) == 0x000010, "Member 'FST_TargetArea::Length' has a wrong offset!");
static_assert(offsetof(FST_TargetArea, Offest_X) == 0x000014, "Member 'FST_TargetArea::Offest_X' has a wrong offset!");
static_assert(offsetof(FST_TargetArea, Offest_Y) == 0x000018, "Member 'FST_TargetArea::Offest_Y' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ActionOverview
// 0x01C0 (0x01C8 - 0x0008)
struct FST_ActionOverview final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EActionClassType                              ClassType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionTargetType                             TargetType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionEffectType                             EffectType;                                        // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCurve;                                         // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequiredMP;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CastTime;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOffset;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOffseted;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EResistanceType>                       ResistanceTypes;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnalogByAlly;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnalogByEnemy;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DigitalByAlly;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DigitalByEnemy;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_Attribute>                  Attributes;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_ActionGrowthData                   GrowthData;                                        // 0x0078(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_ActionRequirements                 Requirements;                                      // 0x0084(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_ActionPerformance                  ActPerformance;                                    // 0x0090(0x0044)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_BallisticPerformance               Performance;                                       // 0x00D4(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_LaserPerformance                   LaserPerformance;                                  // 0x0124(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_ChildActionPerformance             ChildActionPerformance;                            // 0x0148(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_OverHeadFallPerformanceDefine      OverHeadFallPerformance;                           // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_ShotgunActionPerformance>   ShotgunActionPerformance;                          // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0180(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FST_TargetArea                         TargetArea;                                        // 0x0198(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IconTypes;                                         // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ActionOverview) == 0x000008, "Wrong alignment on FST_ActionOverview");
static_assert(sizeof(FST_ActionOverview) == 0x0001C8, "Wrong size on FST_ActionOverview");
static_assert(offsetof(FST_ActionOverview, Name) == 0x000008, "Member 'FST_ActionOverview::Name' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, ClassType) == 0x000020, "Member 'FST_ActionOverview::ClassType' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, TargetType) == 0x000021, "Member 'FST_ActionOverview::TargetType' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, EffectType) == 0x000022, "Member 'FST_ActionOverview::EffectType' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, bUseCurve) == 0x000023, "Member 'FST_ActionOverview::bUseCurve' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, RequiredMP) == 0x000024, "Member 'FST_ActionOverview::RequiredMP' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, CastTime) == 0x000028, "Member 'FST_ActionOverview::CastTime' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, CoolTime) == 0x00002C, "Member 'FST_ActionOverview::CoolTime' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, bOffset) == 0x000030, "Member 'FST_ActionOverview::bOffset' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, bOffseted) == 0x000031, "Member 'FST_ActionOverview::bOffseted' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, ResistanceTypes) == 0x000038, "Member 'FST_ActionOverview::ResistanceTypes' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, AnalogByAlly) == 0x000048, "Member 'FST_ActionOverview::AnalogByAlly' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, AnalogByEnemy) == 0x000050, "Member 'FST_ActionOverview::AnalogByEnemy' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, DigitalByAlly) == 0x000058, "Member 'FST_ActionOverview::DigitalByAlly' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, DigitalByEnemy) == 0x000060, "Member 'FST_ActionOverview::DigitalByEnemy' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, Attributes) == 0x000068, "Member 'FST_ActionOverview::Attributes' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, GrowthData) == 0x000078, "Member 'FST_ActionOverview::GrowthData' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, Requirements) == 0x000084, "Member 'FST_ActionOverview::Requirements' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, ActPerformance) == 0x000090, "Member 'FST_ActionOverview::ActPerformance' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, Performance) == 0x0000D4, "Member 'FST_ActionOverview::Performance' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, LaserPerformance) == 0x000124, "Member 'FST_ActionOverview::LaserPerformance' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, ChildActionPerformance) == 0x000148, "Member 'FST_ActionOverview::ChildActionPerformance' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, OverHeadFallPerformance) == 0x000160, "Member 'FST_ActionOverview::OverHeadFallPerformance' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, ShotgunActionPerformance) == 0x000170, "Member 'FST_ActionOverview::ShotgunActionPerformance' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, Description) == 0x000180, "Member 'FST_ActionOverview::Description' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, TargetArea) == 0x000198, "Member 'FST_ActionOverview::TargetArea' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, SortId) == 0x0001B4, "Member 'FST_ActionOverview::SortId' has a wrong offset!");
static_assert(offsetof(FST_ActionOverview, IconTypes) == 0x0001B8, "Member 'FST_ActionOverview::IconTypes' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NotifyBase
// 0x0018 (0x0018 - 0x0000)
struct FST_NotifyBase final
{
public:
	class USkeletalMeshComponent*                 mMeshComp;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      mAnimation;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mDeltaTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotifyType                                   mNotifyType;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NotifyBase) == 0x000008, "Wrong alignment on FST_NotifyBase");
static_assert(sizeof(FST_NotifyBase) == 0x000018, "Wrong size on FST_NotifyBase");
static_assert(offsetof(FST_NotifyBase, mMeshComp) == 0x000000, "Member 'FST_NotifyBase::mMeshComp' has a wrong offset!");
static_assert(offsetof(FST_NotifyBase, mAnimation) == 0x000008, "Member 'FST_NotifyBase::mAnimation' has a wrong offset!");
static_assert(offsetof(FST_NotifyBase, mDeltaTime) == 0x000010, "Member 'FST_NotifyBase::mDeltaTime' has a wrong offset!");
static_assert(offsetof(FST_NotifyBase, mNotifyType) == 0x000014, "Member 'FST_NotifyBase::mNotifyType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CommonCollision
// 0x0060 (0x0068 - 0x0008)
struct FST_CommonCollision : public FTableRowBase
{
public:
	class FName                                   HitGroupId;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CollisionClass;                                    // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotateOffset;                                      // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AttackPriority;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackDamageRate;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CommonCollision) == 0x000008, "Wrong alignment on FST_CommonCollision");
static_assert(sizeof(FST_CommonCollision) == 0x000068, "Wrong size on FST_CommonCollision");
static_assert(offsetof(FST_CommonCollision, HitGroupId) == 0x000008, "Member 'FST_CommonCollision::HitGroupId' has a wrong offset!");
static_assert(offsetof(FST_CommonCollision, CollisionClass) == 0x000010, "Member 'FST_CommonCollision::CollisionClass' has a wrong offset!");
static_assert(offsetof(FST_CommonCollision, Size) == 0x000038, "Member 'FST_CommonCollision::Size' has a wrong offset!");
static_assert(offsetof(FST_CommonCollision, Offset) == 0x000044, "Member 'FST_CommonCollision::Offset' has a wrong offset!");
static_assert(offsetof(FST_CommonCollision, RotateOffset) == 0x000050, "Member 'FST_CommonCollision::RotateOffset' has a wrong offset!");
static_assert(offsetof(FST_CommonCollision, AttackPriority) == 0x00005C, "Member 'FST_CommonCollision::AttackPriority' has a wrong offset!");
static_assert(offsetof(FST_CommonCollision, AttackDamageRate) == 0x000060, "Member 'FST_CommonCollision::AttackDamageRate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyRewardItemData
// 0x0018 (0x0018 - 0x0000)
struct FST_QuestDailyRewardItemData final
{
public:
	int32                                         Wait;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestDailyRewardItemData) == 0x000008, "Wrong alignment on FST_QuestDailyRewardItemData");
static_assert(sizeof(FST_QuestDailyRewardItemData) == 0x000018, "Wrong size on FST_QuestDailyRewardItemData");
static_assert(offsetof(FST_QuestDailyRewardItemData, Wait) == 0x000000, "Member 'FST_QuestDailyRewardItemData::Wait' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyRewardItemData, ItemId) == 0x000008, "Member 'FST_QuestDailyRewardItemData::ItemId' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyRewardData
// 0x0018 (0x0020 - 0x0008)
struct FST_QuestDailyRewardData final : public FTableRowBase
{
public:
	int32                                         Gold;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_QuestDailyRewardItemData>   Items;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestDailyRewardData) == 0x000008, "Wrong alignment on FST_QuestDailyRewardData");
static_assert(sizeof(FST_QuestDailyRewardData) == 0x000020, "Wrong size on FST_QuestDailyRewardData");
static_assert(offsetof(FST_QuestDailyRewardData, Gold) == 0x000008, "Member 'FST_QuestDailyRewardData::Gold' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyRewardData, Items) == 0x000010, "Member 'FST_QuestDailyRewardData::Items' has a wrong offset!");

// ScriptStruct DarwinGame.RequestSpawnParamQueue
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FRequestSpawnParamQueue final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestSpawnParamQueue) == 0x000010, "Wrong alignment on FRequestSpawnParamQueue");
static_assert(sizeof(FRequestSpawnParamQueue) == 0x0000D0, "Wrong size on FRequestSpawnParamQueue");

// ScriptStruct DarwinGame.ST_AttackCollisionClass
// 0x0030 (0x0038 - 0x0008)
struct FST_AttackCollisionClass final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   CollisionClass;                                    // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreateNum;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AttackCollisionClass) == 0x000008, "Wrong alignment on FST_AttackCollisionClass");
static_assert(sizeof(FST_AttackCollisionClass) == 0x000038, "Wrong size on FST_AttackCollisionClass");
static_assert(offsetof(FST_AttackCollisionClass, CollisionClass) == 0x000008, "Member 'FST_AttackCollisionClass::CollisionClass' has a wrong offset!");
static_assert(offsetof(FST_AttackCollisionClass, CreateNum) == 0x000030, "Member 'FST_AttackCollisionClass::CreateNum' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Bullet
// 0x0038 (0x0040 - 0x0008)
struct FST_Bullet final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   actionDetailID;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletDisplayType                            CategoryType;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   IconType;                                          // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_Bullet) == 0x000008, "Wrong alignment on FST_Bullet");
static_assert(sizeof(FST_Bullet) == 0x000040, "Wrong size on FST_Bullet");
static_assert(offsetof(FST_Bullet, Name) == 0x000008, "Member 'FST_Bullet::Name' has a wrong offset!");
static_assert(offsetof(FST_Bullet, actionDetailID) == 0x000020, "Member 'FST_Bullet::actionDetailID' has a wrong offset!");
static_assert(offsetof(FST_Bullet, IconTexture) == 0x000028, "Member 'FST_Bullet::IconTexture' has a wrong offset!");
static_assert(offsetof(FST_Bullet, CategoryType) == 0x000030, "Member 'FST_Bullet::CategoryType' has a wrong offset!");
static_assert(offsetof(FST_Bullet, IconType) == 0x000034, "Member 'FST_Bullet::IconType' has a wrong offset!");

// ScriptStruct DarwinGame.KeyInput
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FKeyInput final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyInput) == 0x000008, "Wrong alignment on FKeyInput");
static_assert(sizeof(FKeyInput) == 0x000010, "Wrong size on FKeyInput");

// ScriptStruct DarwinGame.ST_HitEffect
// 0x001C (0x001C - 0x0000)
struct FST_HitEffect final
{
public:
	EHitEffectType                                Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         System;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitEffectAttachSocketName;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageEffectID                               DamageEffect;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Grade;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateOnlyZ;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_HitEffect) == 0x000004, "Wrong alignment on FST_HitEffect");
static_assert(sizeof(FST_HitEffect) == 0x00001C, "Wrong size on FST_HitEffect");
static_assert(offsetof(FST_HitEffect, Type) == 0x000000, "Member 'FST_HitEffect::Type' has a wrong offset!");
static_assert(offsetof(FST_HitEffect, System) == 0x000004, "Member 'FST_HitEffect::System' has a wrong offset!");
static_assert(offsetof(FST_HitEffect, HitEffectAttachSocketName) == 0x000008, "Member 'FST_HitEffect::HitEffectAttachSocketName' has a wrong offset!");
static_assert(offsetof(FST_HitEffect, DamageEffect) == 0x000010, "Member 'FST_HitEffect::DamageEffect' has a wrong offset!");
static_assert(offsetof(FST_HitEffect, Grade) == 0x000014, "Member 'FST_HitEffect::Grade' has a wrong offset!");
static_assert(offsetof(FST_HitEffect, bRotateOnlyZ) == 0x000018, "Member 'FST_HitEffect::bRotateOnlyZ' has a wrong offset!");

// ScriptStruct DarwinGame.PersistentLevelRecord
// 0x000C (0x000C - 0x0000)
struct FPersistentLevelRecord final
{
public:
	class FName                                   LevelPath;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDebug;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStartup;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersistentLevelRecord) == 0x000004, "Wrong alignment on FPersistentLevelRecord");
static_assert(sizeof(FPersistentLevelRecord) == 0x00000C, "Wrong size on FPersistentLevelRecord");
static_assert(offsetof(FPersistentLevelRecord, LevelPath) == 0x000000, "Member 'FPersistentLevelRecord::LevelPath' has a wrong offset!");
static_assert(offsetof(FPersistentLevelRecord, IsDebug) == 0x000008, "Member 'FPersistentLevelRecord::IsDebug' has a wrong offset!");
static_assert(offsetof(FPersistentLevelRecord, IsStartup) == 0x000009, "Member 'FPersistentLevelRecord::IsStartup' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NotifyBegin
// 0x02A8 (0x02A8 - 0x0000)
struct FST_NotifyBegin final
{
public:
	class USkeletalMeshComponent*                 mMeshComp;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      mAnimation;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mDeltaTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotifyType                                   mNotifyType;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x293];                                     // 0x0015(0x0293)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NotifyBegin) == 0x000008, "Wrong alignment on FST_NotifyBegin");
static_assert(sizeof(FST_NotifyBegin) == 0x0002A8, "Wrong size on FST_NotifyBegin");
static_assert(offsetof(FST_NotifyBegin, mMeshComp) == 0x000000, "Member 'FST_NotifyBegin::mMeshComp' has a wrong offset!");
static_assert(offsetof(FST_NotifyBegin, mAnimation) == 0x000008, "Member 'FST_NotifyBegin::mAnimation' has a wrong offset!");
static_assert(offsetof(FST_NotifyBegin, mDeltaTime) == 0x000010, "Member 'FST_NotifyBegin::mDeltaTime' has a wrong offset!");
static_assert(offsetof(FST_NotifyBegin, mNotifyType) == 0x000014, "Member 'FST_NotifyBegin::mNotifyType' has a wrong offset!");

// ScriptStruct DarwinGame.CommonSpawnParam
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FCommonSpawnParam final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonSpawnParam) == 0x000010, "Wrong alignment on FCommonSpawnParam");
static_assert(sizeof(FCommonSpawnParam) == 0x0000C0, "Wrong size on FCommonSpawnParam");

// ScriptStruct DarwinGame.ST_BGMCollisionSettingData
// 0x0028 (0x0028 - 0x0000)
struct FST_BGMCollisionSettingData final
{
public:
	bool                                          IsBox;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0004(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0010(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x001C(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BGMCollisionSettingData) == 0x000004, "Wrong alignment on FST_BGMCollisionSettingData");
static_assert(sizeof(FST_BGMCollisionSettingData) == 0x000028, "Wrong size on FST_BGMCollisionSettingData");
static_assert(offsetof(FST_BGMCollisionSettingData, IsBox) == 0x000000, "Member 'FST_BGMCollisionSettingData::IsBox' has a wrong offset!");
static_assert(offsetof(FST_BGMCollisionSettingData, Pos) == 0x000004, "Member 'FST_BGMCollisionSettingData::Pos' has a wrong offset!");
static_assert(offsetof(FST_BGMCollisionSettingData, Size) == 0x000010, "Member 'FST_BGMCollisionSettingData::Size' has a wrong offset!");
static_assert(offsetof(FST_BGMCollisionSettingData, Rotator) == 0x00001C, "Member 'FST_BGMCollisionSettingData::Rotator' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BGMAreaSettingData
// 0x00D8 (0x00D8 - 0x0000)
struct FST_BGMAreaSettingData final
{
public:
	TMap<class FName, class FName>                BGMFlagList;                                       // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FST_BGMCollisionSettingData            OverCollision;                                     // 0x0050(0x0028)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x007C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearVolume;                                        // 0x0080(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarVolume;                                         // 0x0084(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FST_BGMCollisionSettingData> CollisionList;                                     // 0x0088(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BGMAreaSettingData) == 0x000008, "Wrong alignment on FST_BGMAreaSettingData");
static_assert(sizeof(FST_BGMAreaSettingData) == 0x0000D8, "Wrong size on FST_BGMAreaSettingData");
static_assert(offsetof(FST_BGMAreaSettingData, BGMFlagList) == 0x000000, "Member 'FST_BGMAreaSettingData::BGMFlagList' has a wrong offset!");
static_assert(offsetof(FST_BGMAreaSettingData, OverCollision) == 0x000050, "Member 'FST_BGMAreaSettingData::OverCollision' has a wrong offset!");
static_assert(offsetof(FST_BGMAreaSettingData, InnerRadius) == 0x000078, "Member 'FST_BGMAreaSettingData::InnerRadius' has a wrong offset!");
static_assert(offsetof(FST_BGMAreaSettingData, OuterRadius) == 0x00007C, "Member 'FST_BGMAreaSettingData::OuterRadius' has a wrong offset!");
static_assert(offsetof(FST_BGMAreaSettingData, NearVolume) == 0x000080, "Member 'FST_BGMAreaSettingData::NearVolume' has a wrong offset!");
static_assert(offsetof(FST_BGMAreaSettingData, FarVolume) == 0x000084, "Member 'FST_BGMAreaSettingData::FarVolume' has a wrong offset!");
static_assert(offsetof(FST_BGMAreaSettingData, CollisionList) == 0x000088, "Member 'FST_BGMAreaSettingData::CollisionList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TalkEventInfo
// 0x0018 (0x0018 - 0x0000)
struct FST_TalkEventInfo final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventType                                    EventType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_TalkEventInfo) == 0x000008, "Wrong alignment on FST_TalkEventInfo");
static_assert(sizeof(FST_TalkEventInfo) == 0x000018, "Wrong size on FST_TalkEventInfo");
static_assert(offsetof(FST_TalkEventInfo, EventID) == 0x000000, "Member 'FST_TalkEventInfo::EventID' has a wrong offset!");
static_assert(offsetof(FST_TalkEventInfo, EventType) == 0x000010, "Member 'FST_TalkEventInfo::EventType' has a wrong offset!");

// ScriptStruct DarwinGame.ActionGameplayEffectContainer
// 0x0018 (0x0018 - 0x0000)
struct FActionGameplayEffectContainer final
{
public:
	TSubclassOf<class UActionTargetType>          TargetType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    TargetGameplayEffectClasses;                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionGameplayEffectContainer) == 0x000008, "Wrong alignment on FActionGameplayEffectContainer");
static_assert(sizeof(FActionGameplayEffectContainer) == 0x000018, "Wrong size on FActionGameplayEffectContainer");
static_assert(offsetof(FActionGameplayEffectContainer, TargetType) == 0x000000, "Member 'FActionGameplayEffectContainer::TargetType' has a wrong offset!");
static_assert(offsetof(FActionGameplayEffectContainer, TargetGameplayEffectClasses) == 0x000008, "Member 'FActionGameplayEffectContainer::TargetGameplayEffectClasses' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DeriVateActionInfo
// 0x000C (0x000C - 0x0000)
struct FST_DeriVateActionInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DeriVateActionInfo) == 0x000004, "Wrong alignment on FST_DeriVateActionInfo");
static_assert(sizeof(FST_DeriVateActionInfo) == 0x00000C, "Wrong size on FST_DeriVateActionInfo");
static_assert(offsetof(FST_DeriVateActionInfo, ID) == 0x000000, "Member 'FST_DeriVateActionInfo::ID' has a wrong offset!");
static_assert(offsetof(FST_DeriVateActionInfo, Rate) == 0x000008, "Member 'FST_DeriVateActionInfo::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DerivateAction
// 0x0028 (0x0030 - 0x0008)
struct FST_DerivateAction final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FST_DeriVateActionInfo>         DeriVateActionInfos;                               // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DerivateAction) == 0x000008, "Wrong alignment on FST_DerivateAction");
static_assert(sizeof(FST_DerivateAction) == 0x000030, "Wrong size on FST_DerivateAction");
static_assert(offsetof(FST_DerivateAction, Name) == 0x000008, "Member 'FST_DerivateAction::Name' has a wrong offset!");
static_assert(offsetof(FST_DerivateAction, DeriVateActionInfos) == 0x000020, "Member 'FST_DerivateAction::DeriVateActionInfos' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ItemInfoData
// 0x0120 (0x0128 - 0x0008)
struct FST_ItemInfoData final : public FTableRowBase
{
public:
	class FText                                   ItemName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemDataType                                 Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rarity;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSale;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Sale;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Buy;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemDiscardType                              DiscardType;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetME;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemUnitNameType                             UnitNameID;                                        // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUse;                                             // 0x0075(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHand;                                            // 0x0076(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquip;                                           // 0x0077(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectHP;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectMP;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectPow;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectDef;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectAgi;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectInt;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemUseAreaType                              EffectArea;                                        // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectTime;                                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseTypeID;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           GetFlags;                                          // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EEpisodeType>                          UpdateEpisodeTypes;                                // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EffectText;                                        // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   BelongingEffectText;                               // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EAreaType>                             AreaIdList;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemDataSubType                              SubType;                                           // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemUseTypeText                              UseText;                                           // 0x0119(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsConsume;                                         // 0x011A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemUseType                                  UsedType;                                          // 0x011B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderName50;                                       // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderKind;                                         // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ItemInfoData) == 0x000008, "Wrong alignment on FST_ItemInfoData");
static_assert(sizeof(FST_ItemInfoData) == 0x000128, "Wrong size on FST_ItemInfoData");
static_assert(offsetof(FST_ItemInfoData, ItemName) == 0x000008, "Member 'FST_ItemInfoData::ItemName' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, Name) == 0x000020, "Member 'FST_ItemInfoData::Name' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, Type) == 0x000030, "Member 'FST_ItemInfoData::Type' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, Rarity) == 0x000034, "Member 'FST_ItemInfoData::Rarity' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, IsSale) == 0x000038, "Member 'FST_ItemInfoData::IsSale' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, Sale) == 0x00003C, "Member 'FST_ItemInfoData::Sale' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, Buy) == 0x000040, "Member 'FST_ItemInfoData::Buy' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, DiscardType) == 0x000044, "Member 'FST_ItemInfoData::DiscardType' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, IconTexture) == 0x000048, "Member 'FST_ItemInfoData::IconTexture' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, GetME) == 0x000070, "Member 'FST_ItemInfoData::GetME' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, UnitNameID) == 0x000074, "Member 'FST_ItemInfoData::UnitNameID' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, IsUse) == 0x000075, "Member 'FST_ItemInfoData::IsUse' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, IsHand) == 0x000076, "Member 'FST_ItemInfoData::IsHand' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, IsEquip) == 0x000077, "Member 'FST_ItemInfoData::IsEquip' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectHP) == 0x000078, "Member 'FST_ItemInfoData::EffectHP' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectMP) == 0x00007C, "Member 'FST_ItemInfoData::EffectMP' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectPow) == 0x000080, "Member 'FST_ItemInfoData::EffectPow' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectDef) == 0x000084, "Member 'FST_ItemInfoData::EffectDef' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectAgi) == 0x000088, "Member 'FST_ItemInfoData::EffectAgi' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectInt) == 0x00008C, "Member 'FST_ItemInfoData::EffectInt' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectArea) == 0x000090, "Member 'FST_ItemInfoData::EffectArea' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectTime) == 0x000094, "Member 'FST_ItemInfoData::EffectTime' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, UseTypeID) == 0x000098, "Member 'FST_ItemInfoData::UseTypeID' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, Text) == 0x0000A0, "Member 'FST_ItemInfoData::Text' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, GetFlags) == 0x0000B8, "Member 'FST_ItemInfoData::GetFlags' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, UpdateEpisodeTypes) == 0x0000C8, "Member 'FST_ItemInfoData::UpdateEpisodeTypes' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, EffectText) == 0x0000D8, "Member 'FST_ItemInfoData::EffectText' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, BelongingEffectText) == 0x0000F0, "Member 'FST_ItemInfoData::BelongingEffectText' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, AreaIdList) == 0x000108, "Member 'FST_ItemInfoData::AreaIdList' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, SubType) == 0x000118, "Member 'FST_ItemInfoData::SubType' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, UseText) == 0x000119, "Member 'FST_ItemInfoData::UseText' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, IsConsume) == 0x00011A, "Member 'FST_ItemInfoData::IsConsume' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, UsedType) == 0x00011B, "Member 'FST_ItemInfoData::UsedType' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, OrderName50) == 0x00011C, "Member 'FST_ItemInfoData::OrderName50' has a wrong offset!");
static_assert(offsetof(FST_ItemInfoData, OrderKind) == 0x000120, "Member 'FST_ItemInfoData::OrderKind' has a wrong offset!");

// ScriptStruct DarwinGame.ST_HitStop
// 0x0008 (0x0008 - 0x0000)
struct FST_HitStop final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_HitStop) == 0x000004, "Wrong alignment on FST_HitStop");
static_assert(sizeof(FST_HitStop) == 0x000008, "Wrong size on FST_HitStop");
static_assert(offsetof(FST_HitStop, enable) == 0x000000, "Member 'FST_HitStop::enable' has a wrong offset!");
static_assert(offsetof(FST_HitStop, Time) == 0x000004, "Member 'FST_HitStop::Time' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ActionDetail
// 0x0088 (0x0090 - 0x0008)
struct FST_ActionDetail final : public FTableRowBase
{
public:
	class FName                                   OverviewID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAttribute;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAttribute;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinEffectByAlly;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEffectByAlly;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinEffectByEnemy;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEffectByEnemy;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CorrectValue;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealPercentage;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionID;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageReactionType                           ReactionType;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInstigatorPos;                                 // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BlowVelocity;                                      // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvasionRate;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowRate;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunValue;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockValue;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuperArmorPenetration;                             // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectEffectionEnum>                  Effections;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_HitEffect                          HitEffect;                                         // 0x0068(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHitEffectNotAutoPlay;                             // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_HitStop                            HitStop;                                           // 0x0088(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ActionDetail) == 0x000008, "Wrong alignment on FST_ActionDetail");
static_assert(sizeof(FST_ActionDetail) == 0x000090, "Wrong size on FST_ActionDetail");
static_assert(offsetof(FST_ActionDetail, OverviewID) == 0x000008, "Member 'FST_ActionDetail::OverviewID' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, MinAttribute) == 0x000010, "Member 'FST_ActionDetail::MinAttribute' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, MaxAttribute) == 0x000014, "Member 'FST_ActionDetail::MaxAttribute' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, MinEffectByAlly) == 0x000018, "Member 'FST_ActionDetail::MinEffectByAlly' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, MaxEffectByAlly) == 0x00001C, "Member 'FST_ActionDetail::MaxEffectByAlly' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, MinEffectByEnemy) == 0x000020, "Member 'FST_ActionDetail::MinEffectByEnemy' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, MaxEffectByEnemy) == 0x000024, "Member 'FST_ActionDetail::MaxEffectByEnemy' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, CorrectValue) == 0x000028, "Member 'FST_ActionDetail::CorrectValue' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, HealPercentage) == 0x00002C, "Member 'FST_ActionDetail::HealPercentage' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, CollisionID) == 0x000030, "Member 'FST_ActionDetail::CollisionID' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, ReactionType) == 0x000038, "Member 'FST_ActionDetail::ReactionType' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, bUseInstigatorPos) == 0x000039, "Member 'FST_ActionDetail::bUseInstigatorPos' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, BlowVelocity) == 0x00003C, "Member 'FST_ActionDetail::BlowVelocity' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, EvasionRate) == 0x000044, "Member 'FST_ActionDetail::EvasionRate' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, BlowRate) == 0x000048, "Member 'FST_ActionDetail::BlowRate' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, StunValue) == 0x00004C, "Member 'FST_ActionDetail::StunValue' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, KnockValue) == 0x000050, "Member 'FST_ActionDetail::KnockValue' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, SuperArmorPenetration) == 0x000054, "Member 'FST_ActionDetail::SuperArmorPenetration' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, Effections) == 0x000058, "Member 'FST_ActionDetail::Effections' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, HitEffect) == 0x000068, "Member 'FST_ActionDetail::HitEffect' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, bHitEffectNotAutoPlay) == 0x000084, "Member 'FST_ActionDetail::bHitEffectNotAutoPlay' has a wrong offset!");
static_assert(offsetof(FST_ActionDetail, HitStop) == 0x000088, "Member 'FST_ActionDetail::HitStop' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GlyphData
// 0x0018 (0x0020 - 0x0008)
struct FST_GlyphData final : public FTableRowBase
{
public:
	class FString                                 Character;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterCode;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPatchim                                      patchim;                                           // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_GlyphData) == 0x000008, "Wrong alignment on FST_GlyphData");
static_assert(sizeof(FST_GlyphData) == 0x000020, "Wrong size on FST_GlyphData");
static_assert(offsetof(FST_GlyphData, Character) == 0x000008, "Member 'FST_GlyphData::Character' has a wrong offset!");
static_assert(offsetof(FST_GlyphData, characterCode) == 0x000018, "Member 'FST_GlyphData::characterCode' has a wrong offset!");
static_assert(offsetof(FST_GlyphData, patchim) == 0x00001C, "Member 'FST_GlyphData::patchim' has a wrong offset!");

// ScriptStruct DarwinGame.ST_RegulationCheckMotionInfo
// 0x00A8 (0x00B0 - 0x0008)
struct FST_RegulationCheckMotionInfo final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshOffset;                                        // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              BattleMotionTable;                                 // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimeBP;                                           // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDefaultLength;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GazePointHeight;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneNames;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_RegulationCheckMotionInfo) == 0x000008, "Wrong alignment on FST_RegulationCheckMotionInfo");
static_assert(sizeof(FST_RegulationCheckMotionInfo) == 0x0000B0, "Wrong size on FST_RegulationCheckMotionInfo");
static_assert(offsetof(FST_RegulationCheckMotionInfo, Mesh) == 0x000008, "Member 'FST_RegulationCheckMotionInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, CapsuleHalfHeight) == 0x000030, "Member 'FST_RegulationCheckMotionInfo::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, CapsuleRadius) == 0x000034, "Member 'FST_RegulationCheckMotionInfo::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, MeshOffset) == 0x000038, "Member 'FST_RegulationCheckMotionInfo::MeshOffset' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, BattleMotionTable) == 0x000048, "Member 'FST_RegulationCheckMotionInfo::BattleMotionTable' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, AnimeBP) == 0x000070, "Member 'FST_RegulationCheckMotionInfo::AnimeBP' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, CameraDefaultLength) == 0x000098, "Member 'FST_RegulationCheckMotionInfo::CameraDefaultLength' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, GazePointHeight) == 0x00009C, "Member 'FST_RegulationCheckMotionInfo::GazePointHeight' has a wrong offset!");
static_assert(offsetof(FST_RegulationCheckMotionInfo, BoneNames) == 0x0000A0, "Member 'FST_RegulationCheckMotionInfo::BoneNames' has a wrong offset!");

// ScriptStruct DarwinGame.ReactionEventBaseStruct
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FReactionEventBaseStruct
{
};
#pragma pack(pop)
static_assert(alignof(FReactionEventBaseStruct) == 0x000001, "Wrong alignment on FReactionEventBaseStruct");
static_assert(sizeof(FReactionEventBaseStruct) == 0x000001, "Wrong size on FReactionEventBaseStruct");

// ScriptStruct DarwinGame.GetItemEventStruct
// 0x00A8 (0x00A8 - 0x0000)
struct FGetItemEventStruct final : public FReactionEventBaseStruct
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      ItemList;                                          // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      CoinList;                                          // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetItemEventStruct) == 0x000008, "Wrong alignment on FGetItemEventStruct");
static_assert(sizeof(FGetItemEventStruct) == 0x0000A8, "Wrong size on FGetItemEventStruct");
static_assert(offsetof(FGetItemEventStruct, Target) == 0x000000, "Member 'FGetItemEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FGetItemEventStruct, ItemList) == 0x000008, "Member 'FGetItemEventStruct::ItemList' has a wrong offset!");
static_assert(offsetof(FGetItemEventStruct, CoinList) == 0x000058, "Member 'FGetItemEventStruct::CoinList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ResourceInputIcons
// 0x0040 (0x0048 - 0x0008)
struct FST_ResourceInputIcons final : public FTableRowBase
{
public:
	class UTexture2D*                             GenericTexture;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             QwertyItalyTexture;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             QwertySpainTexture;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             QwertzTexture;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             AzertyTexture;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PS4Texture;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             XboxTexture;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderButtonTextureSizeX;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderButtonTextureSizeY;                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ResourceInputIcons) == 0x000008, "Wrong alignment on FST_ResourceInputIcons");
static_assert(sizeof(FST_ResourceInputIcons) == 0x000048, "Wrong size on FST_ResourceInputIcons");
static_assert(offsetof(FST_ResourceInputIcons, GenericTexture) == 0x000008, "Member 'FST_ResourceInputIcons::GenericTexture' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, QwertyItalyTexture) == 0x000010, "Member 'FST_ResourceInputIcons::QwertyItalyTexture' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, QwertySpainTexture) == 0x000018, "Member 'FST_ResourceInputIcons::QwertySpainTexture' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, QwertzTexture) == 0x000020, "Member 'FST_ResourceInputIcons::QwertzTexture' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, AzertyTexture) == 0x000028, "Member 'FST_ResourceInputIcons::AzertyTexture' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, PS4Texture) == 0x000030, "Member 'FST_ResourceInputIcons::PS4Texture' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, XboxTexture) == 0x000038, "Member 'FST_ResourceInputIcons::XboxTexture' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, UnderButtonTextureSizeX) == 0x000040, "Member 'FST_ResourceInputIcons::UnderButtonTextureSizeX' has a wrong offset!");
static_assert(offsetof(FST_ResourceInputIcons, UnderButtonTextureSizeY) == 0x000044, "Member 'FST_ResourceInputIcons::UnderButtonTextureSizeY' has a wrong offset!");

// ScriptStruct DarwinGame.LogItemData
// 0x0028 (0x0028 - 0x0000)
struct FLogItemData final
{
public:
	TArray<class UTextWidgetData*>                TextDataList;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogDataPanelColor                            PanelColor;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0xF];                                       // 0x0019(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLogItemData) == 0x000008, "Wrong alignment on FLogItemData");
static_assert(sizeof(FLogItemData) == 0x000028, "Wrong size on FLogItemData");
static_assert(offsetof(FLogItemData, TextDataList) == 0x000000, "Member 'FLogItemData::TextDataList' has a wrong offset!");
static_assert(offsetof(FLogItemData, IconTexture) == 0x000010, "Member 'FLogItemData::IconTexture' has a wrong offset!");
static_assert(offsetof(FLogItemData, PanelColor) == 0x000018, "Member 'FLogItemData::PanelColor' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinFeature
// 0x000C (0x000C - 0x0000)
struct FST_CoinFeature final
{
public:
	class FName                                   featureId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         step;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CoinFeature) == 0x000004, "Wrong alignment on FST_CoinFeature");
static_assert(sizeof(FST_CoinFeature) == 0x00000C, "Wrong size on FST_CoinFeature");
static_assert(offsetof(FST_CoinFeature, featureId) == 0x000000, "Member 'FST_CoinFeature::featureId' has a wrong offset!");
static_assert(offsetof(FST_CoinFeature, step) == 0x000008, "Member 'FST_CoinFeature::step' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinParam
// 0x0018 (0x0018 - 0x0000)
struct FST_CoinParam final
{
public:
	ECoinType                                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoinRarity                                   Rarity;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MonsterKindId;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_CoinFeature>                FeatureList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CoinParam) == 0x000008, "Wrong alignment on FST_CoinParam");
static_assert(sizeof(FST_CoinParam) == 0x000018, "Wrong size on FST_CoinParam");
static_assert(offsetof(FST_CoinParam, Type) == 0x000000, "Member 'FST_CoinParam::Type' has a wrong offset!");
static_assert(offsetof(FST_CoinParam, Rarity) == 0x000001, "Member 'FST_CoinParam::Rarity' has a wrong offset!");
static_assert(offsetof(FST_CoinParam, MonsterKindId) == 0x000004, "Member 'FST_CoinParam::MonsterKindId' has a wrong offset!");
static_assert(offsetof(FST_CoinParam, FeatureList) == 0x000008, "Member 'FST_CoinParam::FeatureList' has a wrong offset!");

// ScriptStruct DarwinGame.GetCoinEventStruct
// 0x0020 (0x0020 - 0x0000)
struct FGetCoinEventStruct final : public FReactionEventBaseStruct
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_CoinParam                          CoinParam;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetCoinEventStruct) == 0x000008, "Wrong alignment on FGetCoinEventStruct");
static_assert(sizeof(FGetCoinEventStruct) == 0x000020, "Wrong size on FGetCoinEventStruct");
static_assert(offsetof(FGetCoinEventStruct, Target) == 0x000000, "Member 'FGetCoinEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FGetCoinEventStruct, CoinParam) == 0x000008, "Member 'FGetCoinEventStruct::CoinParam' has a wrong offset!");

// ScriptStruct DarwinGame.StealEventStruct
// 0x0020 (0x0020 - 0x0000)
struct FStealEventStruct final : public FReactionEventBaseStruct
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemIDName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStealEventStruct) == 0x000008, "Wrong alignment on FStealEventStruct");
static_assert(sizeof(FStealEventStruct) == 0x000020, "Wrong size on FStealEventStruct");
static_assert(offsetof(FStealEventStruct, bSuccess) == 0x000000, "Member 'FStealEventStruct::bSuccess' has a wrong offset!");
static_assert(offsetof(FStealEventStruct, Target) == 0x000008, "Member 'FStealEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FStealEventStruct, ItemIDName) == 0x000010, "Member 'FStealEventStruct::ItemIDName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LinkData
// 0x0030 (0x0038 - 0x0008)
struct FST_LinkData final : public FTableRowBase
{
public:
	int32                                         LinkType;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInAir;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGenerateType                                 GenerateType;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Forward;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Up;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationOffset;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinkStartJumpOffset;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecastTime;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value1;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value2;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value3;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value4;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LinkData) == 0x000008, "Wrong alignment on FST_LinkData");
static_assert(sizeof(FST_LinkData) == 0x000038, "Wrong size on FST_LinkData");
static_assert(offsetof(FST_LinkData, LinkType) == 0x000008, "Member 'FST_LinkData::LinkType' has a wrong offset!");
static_assert(offsetof(FST_LinkData, bEnableInAir) == 0x00000C, "Member 'FST_LinkData::bEnableInAir' has a wrong offset!");
static_assert(offsetof(FST_LinkData, GenerateType) == 0x00000D, "Member 'FST_LinkData::GenerateType' has a wrong offset!");
static_assert(offsetof(FST_LinkData, Forward) == 0x000010, "Member 'FST_LinkData::Forward' has a wrong offset!");
static_assert(offsetof(FST_LinkData, Right) == 0x000014, "Member 'FST_LinkData::Right' has a wrong offset!");
static_assert(offsetof(FST_LinkData, Up) == 0x000018, "Member 'FST_LinkData::Up' has a wrong offset!");
static_assert(offsetof(FST_LinkData, RotationOffset) == 0x00001C, "Member 'FST_LinkData::RotationOffset' has a wrong offset!");
static_assert(offsetof(FST_LinkData, LinkStartJumpOffset) == 0x000020, "Member 'FST_LinkData::LinkStartJumpOffset' has a wrong offset!");
static_assert(offsetof(FST_LinkData, RecastTime) == 0x000024, "Member 'FST_LinkData::RecastTime' has a wrong offset!");
static_assert(offsetof(FST_LinkData, Value1) == 0x000028, "Member 'FST_LinkData::Value1' has a wrong offset!");
static_assert(offsetof(FST_LinkData, Value2) == 0x00002C, "Member 'FST_LinkData::Value2' has a wrong offset!");
static_assert(offsetof(FST_LinkData, Value3) == 0x000030, "Member 'FST_LinkData::Value3' has a wrong offset!");
static_assert(offsetof(FST_LinkData, Value4) == 0x000034, "Member 'FST_LinkData::Value4' has a wrong offset!");

// ScriptStruct DarwinGame.ST_WordClassTableInfo
// 0x00C0 (0x00C8 - 0x0008)
struct FST_WordClassTableInfo final : public FTableRowBase
{
public:
	class FString                                 LabelName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGenderType                                   Gender;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefSgl;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IndefSgl;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SglM;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SglF;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SglN;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefPlr;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IndefPlr;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IndefPlrIT;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Plr;                                               // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SglList;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPluralNoun;                                      // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVowel;                                           // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLastS;                                           // 0x00C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsProperNoun;                                      // 0x00C3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_WordClassTableInfo) == 0x000008, "Wrong alignment on FST_WordClassTableInfo");
static_assert(sizeof(FST_WordClassTableInfo) == 0x0000C8, "Wrong size on FST_WordClassTableInfo");
static_assert(offsetof(FST_WordClassTableInfo, LabelName) == 0x000008, "Member 'FST_WordClassTableInfo::LabelName' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, Gender) == 0x000018, "Member 'FST_WordClassTableInfo::Gender' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, DefSgl) == 0x000020, "Member 'FST_WordClassTableInfo::DefSgl' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, IndefSgl) == 0x000030, "Member 'FST_WordClassTableInfo::IndefSgl' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, SglM) == 0x000040, "Member 'FST_WordClassTableInfo::SglM' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, SglF) == 0x000050, "Member 'FST_WordClassTableInfo::SglF' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, SglN) == 0x000060, "Member 'FST_WordClassTableInfo::SglN' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, DefPlr) == 0x000070, "Member 'FST_WordClassTableInfo::DefPlr' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, IndefPlr) == 0x000080, "Member 'FST_WordClassTableInfo::IndefPlr' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, IndefPlrIT) == 0x000090, "Member 'FST_WordClassTableInfo::IndefPlrIT' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, Plr) == 0x0000A0, "Member 'FST_WordClassTableInfo::Plr' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, SglList) == 0x0000B0, "Member 'FST_WordClassTableInfo::SglList' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, IsPluralNoun) == 0x0000C0, "Member 'FST_WordClassTableInfo::IsPluralNoun' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, IsVowel) == 0x0000C1, "Member 'FST_WordClassTableInfo::IsVowel' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, IsLastS) == 0x0000C2, "Member 'FST_WordClassTableInfo::IsLastS' has a wrong offset!");
static_assert(offsetof(FST_WordClassTableInfo, IsProperNoun) == 0x0000C3, "Member 'FST_WordClassTableInfo::IsProperNoun' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LotteryBattleID
// 0x000C (0x000C - 0x0000)
struct FST_LotteryBattleID final
{
public:
	int32                                         LotteryRate;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleID;                                          // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LotteryBattleID) == 0x000004, "Wrong alignment on FST_LotteryBattleID");
static_assert(sizeof(FST_LotteryBattleID) == 0x00000C, "Wrong size on FST_LotteryBattleID");
static_assert(offsetof(FST_LotteryBattleID, LotteryRate) == 0x000000, "Member 'FST_LotteryBattleID::LotteryRate' has a wrong offset!");
static_assert(offsetof(FST_LotteryBattleID, BattleID) == 0x000004, "Member 'FST_LotteryBattleID::BattleID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_HyenaBattleIdInfo
// 0x0018 (0x0020 - 0x0008)
struct FST_HyenaBattleIdInfo final : public FTableRowBase
{
public:
	int32                                         PlayerUpperLevel;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_LotteryBattleID>            LotteryBattleIDs;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_HyenaBattleIdInfo) == 0x000008, "Wrong alignment on FST_HyenaBattleIdInfo");
static_assert(sizeof(FST_HyenaBattleIdInfo) == 0x000020, "Wrong size on FST_HyenaBattleIdInfo");
static_assert(offsetof(FST_HyenaBattleIdInfo, PlayerUpperLevel) == 0x000008, "Member 'FST_HyenaBattleIdInfo::PlayerUpperLevel' has a wrong offset!");
static_assert(offsetof(FST_HyenaBattleIdInfo, LotteryBattleIDs) == 0x000010, "Member 'FST_HyenaBattleIdInfo::LotteryBattleIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LoadLevelSequenceAssetList
// 0x0048 (0x0050 - 0x0008)
struct FST_LoadLevelSequenceAssetList final : public FTableRowBase
{
public:
	TArray<class FName>                           LoadLevelSequenceAssetNames;                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LoadUIDataIDs;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadLevelName;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadSEPackID;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadVoicePackID;                                   // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BindingMonsterTags;                                // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LoadLevelSequenceAssetList) == 0x000008, "Wrong alignment on FST_LoadLevelSequenceAssetList");
static_assert(sizeof(FST_LoadLevelSequenceAssetList) == 0x000050, "Wrong size on FST_LoadLevelSequenceAssetList");
static_assert(offsetof(FST_LoadLevelSequenceAssetList, LoadLevelSequenceAssetNames) == 0x000008, "Member 'FST_LoadLevelSequenceAssetList::LoadLevelSequenceAssetNames' has a wrong offset!");
static_assert(offsetof(FST_LoadLevelSequenceAssetList, LoadUIDataIDs) == 0x000018, "Member 'FST_LoadLevelSequenceAssetList::LoadUIDataIDs' has a wrong offset!");
static_assert(offsetof(FST_LoadLevelSequenceAssetList, LoadLevelName) == 0x000028, "Member 'FST_LoadLevelSequenceAssetList::LoadLevelName' has a wrong offset!");
static_assert(offsetof(FST_LoadLevelSequenceAssetList, LoadSEPackID) == 0x000030, "Member 'FST_LoadLevelSequenceAssetList::LoadSEPackID' has a wrong offset!");
static_assert(offsetof(FST_LoadLevelSequenceAssetList, LoadVoicePackID) == 0x000038, "Member 'FST_LoadLevelSequenceAssetList::LoadVoicePackID' has a wrong offset!");
static_assert(offsetof(FST_LoadLevelSequenceAssetList, BindingMonsterTags) == 0x000040, "Member 'FST_LoadLevelSequenceAssetList::BindingMonsterTags' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SynthesisMaterialInfo
// 0x000C (0x000C - 0x0000)
struct FST_SynthesisMaterialInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SynthesisMaterialInfo) == 0x000004, "Wrong alignment on FST_SynthesisMaterialInfo");
static_assert(sizeof(FST_SynthesisMaterialInfo) == 0x00000C, "Wrong size on FST_SynthesisMaterialInfo");
static_assert(offsetof(FST_SynthesisMaterialInfo, ID) == 0x000000, "Member 'FST_SynthesisMaterialInfo::ID' has a wrong offset!");
static_assert(offsetof(FST_SynthesisMaterialInfo, Num) == 0x000008, "Member 'FST_SynthesisMaterialInfo::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFacilityFoodItem
// 0x0020 (0x0028 - 0x0008)
struct FST_UIFacilityFoodItem : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LuxuryItemId;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_SynthesisMaterialInfo>      Material;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIFacilityFoodItem) == 0x000008, "Wrong alignment on FST_UIFacilityFoodItem");
static_assert(sizeof(FST_UIFacilityFoodItem) == 0x000028, "Wrong size on FST_UIFacilityFoodItem");
static_assert(offsetof(FST_UIFacilityFoodItem, ItemId) == 0x000008, "Member 'FST_UIFacilityFoodItem::ItemId' has a wrong offset!");
static_assert(offsetof(FST_UIFacilityFoodItem, LuxuryItemId) == 0x000010, "Member 'FST_UIFacilityFoodItem::LuxuryItemId' has a wrong offset!");
static_assert(offsetof(FST_UIFacilityFoodItem, Material) == 0x000018, "Member 'FST_UIFacilityFoodItem::Material' has a wrong offset!");

// ScriptStruct DarwinGame.DeadCause
// 0x0008 (0x0008 - 0x0000)
struct FDeadCause final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeadCause) == 0x000004, "Wrong alignment on FDeadCause");
static_assert(sizeof(FDeadCause) == 0x000008, "Wrong size on FDeadCause");
static_assert(offsetof(FDeadCause, AttributeID) == 0x000000, "Member 'FDeadCause::AttributeID' has a wrong offset!");

// ScriptStruct DarwinGame.ActionResult
// 0x0030 (0x0030 - 0x0000)
struct FActionResult final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttackerLocation;                                  // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeID;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeadCause                             DeadCause;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionResult) == 0x000004, "Wrong alignment on FActionResult");
static_assert(sizeof(FActionResult) == 0x000030, "Wrong size on FActionResult");
static_assert(offsetof(FActionResult, actionDetailID) == 0x000000, "Member 'FActionResult::actionDetailID' has a wrong offset!");
static_assert(offsetof(FActionResult, HitLocation) == 0x000008, "Member 'FActionResult::HitLocation' has a wrong offset!");
static_assert(offsetof(FActionResult, AttackerLocation) == 0x000014, "Member 'FActionResult::AttackerLocation' has a wrong offset!");
static_assert(offsetof(FActionResult, AttributeID) == 0x000020, "Member 'FActionResult::AttributeID' has a wrong offset!");
static_assert(offsetof(FActionResult, DeadCause) == 0x000028, "Member 'FActionResult::DeadCause' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MainScenarioDestinationPostion
// 0x0010 (0x0018 - 0x0008)
struct FST_MainScenarioDestinationPostion final : public FTableRowBase
{
public:
	struct FVector                                Postion;                                           // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MainScenarioDestinationPostion) == 0x000008, "Wrong alignment on FST_MainScenarioDestinationPostion");
static_assert(sizeof(FST_MainScenarioDestinationPostion) == 0x000018, "Wrong size on FST_MainScenarioDestinationPostion");
static_assert(offsetof(FST_MainScenarioDestinationPostion, Postion) == 0x000008, "Member 'FST_MainScenarioDestinationPostion::Postion' has a wrong offset!");

// ScriptStruct DarwinGame.AdditionalDamageParam
// 0x0018 (0x0018 - 0x0000)
struct FAdditionalDamageParam final
{
public:
	float                                         OptionalValue;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageCalcPolicy                             CalcPolicy;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageCalcPercentagePolicy                   CalcPercentagePolicy;                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageCategory                               DamageCategory;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PopLocation;                                       // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdditionalDamageParam) == 0x000004, "Wrong alignment on FAdditionalDamageParam");
static_assert(sizeof(FAdditionalDamageParam) == 0x000018, "Wrong size on FAdditionalDamageParam");
static_assert(offsetof(FAdditionalDamageParam, OptionalValue) == 0x000000, "Member 'FAdditionalDamageParam::OptionalValue' has a wrong offset!");
static_assert(offsetof(FAdditionalDamageParam, EffectValue) == 0x000004, "Member 'FAdditionalDamageParam::EffectValue' has a wrong offset!");
static_assert(offsetof(FAdditionalDamageParam, CalcPolicy) == 0x000008, "Member 'FAdditionalDamageParam::CalcPolicy' has a wrong offset!");
static_assert(offsetof(FAdditionalDamageParam, CalcPercentagePolicy) == 0x000009, "Member 'FAdditionalDamageParam::CalcPercentagePolicy' has a wrong offset!");
static_assert(offsetof(FAdditionalDamageParam, DamageCategory) == 0x00000A, "Member 'FAdditionalDamageParam::DamageCategory' has a wrong offset!");
static_assert(offsetof(FAdditionalDamageParam, PopLocation) == 0x00000C, "Member 'FAdditionalDamageParam::PopLocation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListReward
// 0x0100 (0x0108 - 0x0008)
struct FST_QuestListReward final : public FTableRowBase
{
public:
	int32                                         Exp;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Monsters;                                          // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Items;                                             // 0x0060(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Coins;                                             // 0x00B0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsAutoRewardDialog;                               // 0x0100(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestListReward) == 0x000008, "Wrong alignment on FST_QuestListReward");
static_assert(sizeof(FST_QuestListReward) == 0x000108, "Wrong size on FST_QuestListReward");
static_assert(offsetof(FST_QuestListReward, Exp) == 0x000008, "Member 'FST_QuestListReward::Exp' has a wrong offset!");
static_assert(offsetof(FST_QuestListReward, Gold) == 0x00000C, "Member 'FST_QuestListReward::Gold' has a wrong offset!");
static_assert(offsetof(FST_QuestListReward, Monsters) == 0x000010, "Member 'FST_QuestListReward::Monsters' has a wrong offset!");
static_assert(offsetof(FST_QuestListReward, Items) == 0x000060, "Member 'FST_QuestListReward::Items' has a wrong offset!");
static_assert(offsetof(FST_QuestListReward, Coins) == 0x0000B0, "Member 'FST_QuestListReward::Coins' has a wrong offset!");
static_assert(offsetof(FST_QuestListReward, bIsAutoRewardDialog) == 0x000100, "Member 'FST_QuestListReward::bIsAutoRewardDialog' has a wrong offset!");

// ScriptStruct DarwinGame.LostArtifactProperty
// 0x0008 (0x0008 - 0x0000)
struct FLostArtifactProperty final
{
public:
	int32                                         ArtifactUID;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArtifactLostFlag                             LostFlags;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLostArtifactProperty) == 0x000004, "Wrong alignment on FLostArtifactProperty");
static_assert(sizeof(FLostArtifactProperty) == 0x000008, "Wrong size on FLostArtifactProperty");
static_assert(offsetof(FLostArtifactProperty, ArtifactUID) == 0x000000, "Member 'FLostArtifactProperty::ArtifactUID' has a wrong offset!");
static_assert(offsetof(FLostArtifactProperty, LostFlags) == 0x000004, "Member 'FLostArtifactProperty::LostFlags' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AddOnContentMaster
// 0x0018 (0x0020 - 0x0008)
struct FST_AddOnContentMaster final : public FTableRowBase
{
public:
	int32                                         GroupID;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBenefitsType                                 Type;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChunkId;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AddOnContentMaster) == 0x000008, "Wrong alignment on FST_AddOnContentMaster");
static_assert(sizeof(FST_AddOnContentMaster) == 0x000020, "Wrong size on FST_AddOnContentMaster");
static_assert(offsetof(FST_AddOnContentMaster, GroupID) == 0x000008, "Member 'FST_AddOnContentMaster::GroupID' has a wrong offset!");
static_assert(offsetof(FST_AddOnContentMaster, Type) == 0x00000C, "Member 'FST_AddOnContentMaster::Type' has a wrong offset!");
static_assert(offsetof(FST_AddOnContentMaster, ChunkId) == 0x000010, "Member 'FST_AddOnContentMaster::ChunkId' has a wrong offset!");
static_assert(offsetof(FST_AddOnContentMaster, Tag) == 0x000014, "Member 'FST_AddOnContentMaster::Tag' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AddOnContentRewardGroup
// 0x0018 (0x0020 - 0x0008)
struct FST_AddOnContentRewardGroup final : public FTableRowBase
{
public:
	int32                                         GroupID;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAddOnContentRewordType                       Type;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RewardID;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AddOnContentRewardGroup) == 0x000008, "Wrong alignment on FST_AddOnContentRewardGroup");
static_assert(sizeof(FST_AddOnContentRewardGroup) == 0x000020, "Wrong size on FST_AddOnContentRewardGroup");
static_assert(offsetof(FST_AddOnContentRewardGroup, GroupID) == 0x000008, "Member 'FST_AddOnContentRewardGroup::GroupID' has a wrong offset!");
static_assert(offsetof(FST_AddOnContentRewardGroup, Type) == 0x00000C, "Member 'FST_AddOnContentRewardGroup::Type' has a wrong offset!");
static_assert(offsetof(FST_AddOnContentRewardGroup, RewardID) == 0x000010, "Member 'FST_AddOnContentRewardGroup::RewardID' has a wrong offset!");
static_assert(offsetof(FST_AddOnContentRewardGroup, Num) == 0x000018, "Member 'FST_AddOnContentRewardGroup::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListPoint
// 0x0010 (0x0018 - 0x0008)
struct FST_QuestListPoint final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestListPoint) == 0x000008, "Wrong alignment on FST_QuestListPoint");
static_assert(sizeof(FST_QuestListPoint) == 0x000018, "Wrong size on FST_QuestListPoint");
static_assert(offsetof(FST_QuestListPoint, Location) == 0x000008, "Member 'FST_QuestListPoint::Location' has a wrong offset!");

// ScriptStruct DarwinGame.DepthOfFieldSetting
// 0x0028 (0x0028 - 0x0000)
struct FDepthOfFieldSetting final
{
public:
	bool                                          HighQualityGaussianDOFonMobile;                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocalDistance;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthBlurkmfor50Persent;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthBlurRadius;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalRegion;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearTransitionRegion;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarTransitionRegion;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearBlurSize;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarBlurSize;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDepthOfFieldSetting) == 0x000004, "Wrong alignment on FDepthOfFieldSetting");
static_assert(sizeof(FDepthOfFieldSetting) == 0x000028, "Wrong size on FDepthOfFieldSetting");
static_assert(offsetof(FDepthOfFieldSetting, HighQualityGaussianDOFonMobile) == 0x000000, "Member 'FDepthOfFieldSetting::HighQualityGaussianDOFonMobile' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, FocalDistance) == 0x000004, "Member 'FDepthOfFieldSetting::FocalDistance' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, DepthBlurkmfor50Persent) == 0x000008, "Member 'FDepthOfFieldSetting::DepthBlurkmfor50Persent' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, DepthBlurRadius) == 0x00000C, "Member 'FDepthOfFieldSetting::DepthBlurRadius' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, FocalRegion) == 0x000010, "Member 'FDepthOfFieldSetting::FocalRegion' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, NearTransitionRegion) == 0x000014, "Member 'FDepthOfFieldSetting::NearTransitionRegion' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, FarTransitionRegion) == 0x000018, "Member 'FDepthOfFieldSetting::FarTransitionRegion' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, Scale) == 0x00001C, "Member 'FDepthOfFieldSetting::Scale' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, NearBlurSize) == 0x000020, "Member 'FDepthOfFieldSetting::NearBlurSize' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldSetting, FarBlurSize) == 0x000024, "Member 'FDepthOfFieldSetting::FarBlurSize' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingLevelList
// 0x0010 (0x0010 - 0x0000)
struct FST_StreamingLevelList final
{
public:
	TArray<class FName>                           LevelList;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StreamingLevelList) == 0x000008, "Wrong alignment on FST_StreamingLevelList");
static_assert(sizeof(FST_StreamingLevelList) == 0x000010, "Wrong size on FST_StreamingLevelList");
static_assert(offsetof(FST_StreamingLevelList, LevelList) == 0x000000, "Member 'FST_StreamingLevelList::LevelList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AmbientStreamingLevelData
// 0x0040 (0x0040 - 0x0000)
struct FST_AmbientStreamingLevelData final
{
public:
	struct FST_StreamingLevelList                 mMain;                                             // 0x0000(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FST_StreamingLevelList                 mShip;                                             // 0x0010(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FST_StreamingLevelList                 mRemains;                                          // 0x0020(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FST_StreamingLevelList                 mTreasure;                                         // 0x0030(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_AmbientStreamingLevelData) == 0x000008, "Wrong alignment on FST_AmbientStreamingLevelData");
static_assert(sizeof(FST_AmbientStreamingLevelData) == 0x000040, "Wrong size on FST_AmbientStreamingLevelData");
static_assert(offsetof(FST_AmbientStreamingLevelData, mMain) == 0x000000, "Member 'FST_AmbientStreamingLevelData::mMain' has a wrong offset!");
static_assert(offsetof(FST_AmbientStreamingLevelData, mShip) == 0x000010, "Member 'FST_AmbientStreamingLevelData::mShip' has a wrong offset!");
static_assert(offsetof(FST_AmbientStreamingLevelData, mRemains) == 0x000020, "Member 'FST_AmbientStreamingLevelData::mRemains' has a wrong offset!");
static_assert(offsetof(FST_AmbientStreamingLevelData, mTreasure) == 0x000030, "Member 'FST_AmbientStreamingLevelData::mTreasure' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ItemMenuType
// 0x0028 (0x0028 - 0x0000)
struct FST_ItemMenuType final
{
public:
	EItemMenuType                                 ItemMenuType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ItemMenuType) == 0x000008, "Wrong alignment on FST_ItemMenuType");
static_assert(sizeof(FST_ItemMenuType) == 0x000028, "Wrong size on FST_ItemMenuType");
static_assert(offsetof(FST_ItemMenuType, ItemMenuType) == 0x000000, "Member 'FST_ItemMenuType::ItemMenuType' has a wrong offset!");
static_assert(offsetof(FST_ItemMenuType, Icon) == 0x000008, "Member 'FST_ItemMenuType::Icon' has a wrong offset!");
static_assert(offsetof(FST_ItemMenuType, Name) == 0x000010, "Member 'FST_ItemMenuType::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonNormalMonsterBattleID
// 0x0018 (0x0020 - 0x0008)
struct FST_DungeonNormalMonsterBattleID final : public FTableRowBase
{
public:
	struct FST_LotteryBattleID                    BattleIdData;                                      // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DungeonDifficulty;                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonNormalMonsterBattleID) == 0x000008, "Wrong alignment on FST_DungeonNormalMonsterBattleID");
static_assert(sizeof(FST_DungeonNormalMonsterBattleID) == 0x000020, "Wrong size on FST_DungeonNormalMonsterBattleID");
static_assert(offsetof(FST_DungeonNormalMonsterBattleID, BattleIdData) == 0x000008, "Member 'FST_DungeonNormalMonsterBattleID::BattleIdData' has a wrong offset!");
static_assert(offsetof(FST_DungeonNormalMonsterBattleID, AreaType) == 0x000014, "Member 'FST_DungeonNormalMonsterBattleID::AreaType' has a wrong offset!");
static_assert(offsetof(FST_DungeonNormalMonsterBattleID, DungeonDifficulty) == 0x000018, "Member 'FST_DungeonNormalMonsterBattleID::DungeonDifficulty' has a wrong offset!");

// ScriptStruct DarwinGame.InstanceEffectInfo
// 0x0004 (0x0004 - 0x0000)
struct FInstanceEffectInfo final
{
public:
	int32                                         GenerateNum;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstanceEffectInfo) == 0x000004, "Wrong alignment on FInstanceEffectInfo");
static_assert(sizeof(FInstanceEffectInfo) == 0x000004, "Wrong size on FInstanceEffectInfo");
static_assert(offsetof(FInstanceEffectInfo, GenerateNum) == 0x000000, "Member 'FInstanceEffectInfo::GenerateNum' has a wrong offset!");

// ScriptStruct DarwinGame.UsableEffectInfo
// 0x0010 (0x0018 - 0x0008)
struct FUsableEffectInfo final : public FTableRowBase
{
public:
	TSubclassOf<class AEffectBase>                EffectBase;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInstanceEffectInfo                    InstantiateInfo;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsInstance;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUsableEffectInfo) == 0x000008, "Wrong alignment on FUsableEffectInfo");
static_assert(sizeof(FUsableEffectInfo) == 0x000018, "Wrong size on FUsableEffectInfo");
static_assert(offsetof(FUsableEffectInfo, EffectBase) == 0x000008, "Member 'FUsableEffectInfo::EffectBase' has a wrong offset!");
static_assert(offsetof(FUsableEffectInfo, InstantiateInfo) == 0x000010, "Member 'FUsableEffectInfo::InstantiateInfo' has a wrong offset!");
static_assert(offsetof(FUsableEffectInfo, IsInstance) == 0x000014, "Member 'FUsableEffectInfo::IsInstance' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AmbientStreamingLevelDataEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_AmbientStreamingLevelDataEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AmbientStreamingLevelDataEditor) == 0x000001, "Wrong alignment on FST_AmbientStreamingLevelDataEditor");
static_assert(sizeof(FST_AmbientStreamingLevelDataEditor) == 0x000001, "Wrong size on FST_AmbientStreamingLevelDataEditor");

// ScriptStruct DarwinGame.AnimNode_ModifyBoneFromAttachParent
// 0x0010 (0x0118 - 0x0108)
struct FAnimNode_ModifyBoneFromAttachParent final : public FAnimNode_ModifyBone
{
public:
	class FName                                   ParentSocketName;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableParentTranslation;                          // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableParentRotation;                             // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFindDepth;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_ModifyBoneFromAttachParent) == 0x000008, "Wrong alignment on FAnimNode_ModifyBoneFromAttachParent");
static_assert(sizeof(FAnimNode_ModifyBoneFromAttachParent) == 0x000118, "Wrong size on FAnimNode_ModifyBoneFromAttachParent");
static_assert(offsetof(FAnimNode_ModifyBoneFromAttachParent, ParentSocketName) == 0x000108, "Member 'FAnimNode_ModifyBoneFromAttachParent::ParentSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBoneFromAttachParent, bEnableParentTranslation) == 0x000110, "Member 'FAnimNode_ModifyBoneFromAttachParent::bEnableParentTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBoneFromAttachParent, bEnableParentRotation) == 0x000111, "Member 'FAnimNode_ModifyBoneFromAttachParent::bEnableParentRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBoneFromAttachParent, MaxFindDepth) == 0x000114, "Member 'FAnimNode_ModifyBoneFromAttachParent::MaxFindDepth' has a wrong offset!");

// ScriptStruct DarwinGame.AnimNode_PrintLog
// 0x0038 (0x0048 - 0x0010)
struct FAnimNode_PrintLog final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInitializa;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUpdate;                                       // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEvaluate;                                     // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCasheBones;                                   // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x14];                                      // 0x0034(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PrintLog) == 0x000008, "Wrong alignment on FAnimNode_PrintLog");
static_assert(sizeof(FAnimNode_PrintLog) == 0x000048, "Wrong size on FAnimNode_PrintLog");
static_assert(offsetof(FAnimNode_PrintLog, InputPose) == 0x000010, "Member 'FAnimNode_PrintLog::InputPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_PrintLog, Message) == 0x000020, "Member 'FAnimNode_PrintLog::Message' has a wrong offset!");
static_assert(offsetof(FAnimNode_PrintLog, bShowInitializa) == 0x000030, "Member 'FAnimNode_PrintLog::bShowInitializa' has a wrong offset!");
static_assert(offsetof(FAnimNode_PrintLog, bShowUpdate) == 0x000031, "Member 'FAnimNode_PrintLog::bShowUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_PrintLog, bShowEvaluate) == 0x000032, "Member 'FAnimNode_PrintLog::bShowEvaluate' has a wrong offset!");
static_assert(offsetof(FAnimNode_PrintLog, bShowCasheBones) == 0x000033, "Member 'FAnimNode_PrintLog::bShowCasheBones' has a wrong offset!");

// ScriptStruct DarwinGame.AnimNotifyMaterialParameterInfoBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FAnimNotifyMaterialParameterInfoBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNotifyMaterialParameterInfoBase) == 0x000008, "Wrong alignment on FAnimNotifyMaterialParameterInfoBase");
static_assert(sizeof(FAnimNotifyMaterialParameterInfoBase) == 0x000010, "Wrong size on FAnimNotifyMaterialParameterInfoBase");

// ScriptStruct DarwinGame.ST_DungeonBossMonsterBattleID
// 0x0018 (0x0020 - 0x0008)
struct FST_DungeonBossMonsterBattleID final : public FTableRowBase
{
public:
	struct FST_LotteryBattleID                    BattleIdData;                                      // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DungeonDifficulty;                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonBossMonsterBattleID) == 0x000008, "Wrong alignment on FST_DungeonBossMonsterBattleID");
static_assert(sizeof(FST_DungeonBossMonsterBattleID) == 0x000020, "Wrong size on FST_DungeonBossMonsterBattleID");
static_assert(offsetof(FST_DungeonBossMonsterBattleID, BattleIdData) == 0x000008, "Member 'FST_DungeonBossMonsterBattleID::BattleIdData' has a wrong offset!");
static_assert(offsetof(FST_DungeonBossMonsterBattleID, AreaType) == 0x000014, "Member 'FST_DungeonBossMonsterBattleID::AreaType' has a wrong offset!");
static_assert(offsetof(FST_DungeonBossMonsterBattleID, DungeonDifficulty) == 0x000018, "Member 'FST_DungeonBossMonsterBattleID::DungeonDifficulty' has a wrong offset!");

// ScriptStruct DarwinGame.AnimNotifyMaterialParameterLinearColorInfo
// 0x0038 (0x0048 - 0x0010)
struct FAnimNotifyMaterialParameterLinearColorInfo final : public FAnimNotifyMaterialParameterInfoBase
{
public:
	class UCurveLinearColor*                      ParameterCurve;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterRName;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterGName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterBName;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterAName;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           CurrentValue;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNotifyMaterialParameterLinearColorInfo) == 0x000008, "Wrong alignment on FAnimNotifyMaterialParameterLinearColorInfo");
static_assert(sizeof(FAnimNotifyMaterialParameterLinearColorInfo) == 0x000048, "Wrong size on FAnimNotifyMaterialParameterLinearColorInfo");
static_assert(offsetof(FAnimNotifyMaterialParameterLinearColorInfo, ParameterCurve) == 0x000010, "Member 'FAnimNotifyMaterialParameterLinearColorInfo::ParameterCurve' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterLinearColorInfo, ParameterRName) == 0x000018, "Member 'FAnimNotifyMaterialParameterLinearColorInfo::ParameterRName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterLinearColorInfo, ParameterGName) == 0x000020, "Member 'FAnimNotifyMaterialParameterLinearColorInfo::ParameterGName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterLinearColorInfo, ParameterBName) == 0x000028, "Member 'FAnimNotifyMaterialParameterLinearColorInfo::ParameterBName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterLinearColorInfo, ParameterAName) == 0x000030, "Member 'FAnimNotifyMaterialParameterLinearColorInfo::ParameterAName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterLinearColorInfo, CurrentValue) == 0x000038, "Member 'FAnimNotifyMaterialParameterLinearColorInfo::CurrentValue' has a wrong offset!");

// ScriptStruct DarwinGame.AnimNotifyMaterialParameterVectorInfo
// 0x0030 (0x0040 - 0x0010)
struct FAnimNotifyMaterialParameterVectorInfo final : public FAnimNotifyMaterialParameterInfoBase
{
public:
	class UCurveVector*                           ParameterCurve;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterXName;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterYName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterZName;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentValue;                                      // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNotifyMaterialParameterVectorInfo) == 0x000008, "Wrong alignment on FAnimNotifyMaterialParameterVectorInfo");
static_assert(sizeof(FAnimNotifyMaterialParameterVectorInfo) == 0x000040, "Wrong size on FAnimNotifyMaterialParameterVectorInfo");
static_assert(offsetof(FAnimNotifyMaterialParameterVectorInfo, ParameterCurve) == 0x000010, "Member 'FAnimNotifyMaterialParameterVectorInfo::ParameterCurve' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterVectorInfo, ParameterXName) == 0x000018, "Member 'FAnimNotifyMaterialParameterVectorInfo::ParameterXName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterVectorInfo, ParameterYName) == 0x000020, "Member 'FAnimNotifyMaterialParameterVectorInfo::ParameterYName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterVectorInfo, ParameterZName) == 0x000028, "Member 'FAnimNotifyMaterialParameterVectorInfo::ParameterZName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterVectorInfo, CurrentValue) == 0x000030, "Member 'FAnimNotifyMaterialParameterVectorInfo::CurrentValue' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearArtifact
// 0x0040 (0x0040 - 0x0000)
struct FST_QuestClearArtifact final
{
public:
	TArray<EArtifactType>                         Types;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TypesIsRandom;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Trigger;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quality;                                           // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmallCategory;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetNum;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetectNum;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayNum;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Duplicate;                                         // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Sum;                                               // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreStolenTreasures;                             // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestClearArtifact) == 0x000008, "Wrong alignment on FST_QuestClearArtifact");
static_assert(sizeof(FST_QuestClearArtifact) == 0x000040, "Wrong size on FST_QuestClearArtifact");
static_assert(offsetof(FST_QuestClearArtifact, Types) == 0x000000, "Member 'FST_QuestClearArtifact::Types' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, TypesIsRandom) == 0x000010, "Member 'FST_QuestClearArtifact::TypesIsRandom' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, Trigger) == 0x000014, "Member 'FST_QuestClearArtifact::Trigger' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, Category) == 0x000018, "Member 'FST_QuestClearArtifact::Category' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, Quality) == 0x00001C, "Member 'FST_QuestClearArtifact::Quality' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, SmallCategory) == 0x000020, "Member 'FST_QuestClearArtifact::SmallCategory' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, GetNum) == 0x000024, "Member 'FST_QuestClearArtifact::GetNum' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, Price) == 0x000028, "Member 'FST_QuestClearArtifact::Price' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, DetectNum) == 0x00002C, "Member 'FST_QuestClearArtifact::DetectNum' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, DisplayNum) == 0x000030, "Member 'FST_QuestClearArtifact::DisplayNum' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, Duplicate) == 0x000034, "Member 'FST_QuestClearArtifact::Duplicate' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, Sum) == 0x000038, "Member 'FST_QuestClearArtifact::Sum' has a wrong offset!");
static_assert(offsetof(FST_QuestClearArtifact, IgnoreStolenTreasures) == 0x00003C, "Member 'FST_QuestClearArtifact::IgnoreStolenTreasures' has a wrong offset!");

// ScriptStruct DarwinGame.AnimNotifyMaterialParameterFloatInfo
// 0x0018 (0x0028 - 0x0010)
struct FAnimNotifyMaterialParameterFloatInfo final : public FAnimNotifyMaterialParameterInfoBase
{
public:
	class UCurveFloat*                            ParameterCurve;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParameterName;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentValue;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNotifyMaterialParameterFloatInfo) == 0x000008, "Wrong alignment on FAnimNotifyMaterialParameterFloatInfo");
static_assert(sizeof(FAnimNotifyMaterialParameterFloatInfo) == 0x000028, "Wrong size on FAnimNotifyMaterialParameterFloatInfo");
static_assert(offsetof(FAnimNotifyMaterialParameterFloatInfo, ParameterCurve) == 0x000010, "Member 'FAnimNotifyMaterialParameterFloatInfo::ParameterCurve' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterFloatInfo, ParameterName) == 0x000018, "Member 'FAnimNotifyMaterialParameterFloatInfo::ParameterName' has a wrong offset!");
static_assert(offsetof(FAnimNotifyMaterialParameterFloatInfo, CurrentValue) == 0x000020, "Member 'FAnimNotifyMaterialParameterFloatInfo::CurrentValue' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UITutorialVisionData
// 0x0030 (0x0030 - 0x0000)
struct FST_UITutorialVisionData final
{
public:
	TSoftObjectPtr<class UTexture2D>              VisionTexture;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UITutorialVisionData) == 0x000008, "Wrong alignment on FST_UITutorialVisionData");
static_assert(sizeof(FST_UITutorialVisionData) == 0x000030, "Wrong size on FST_UITutorialVisionData");
static_assert(offsetof(FST_UITutorialVisionData, VisionTexture) == 0x000000, "Member 'FST_UITutorialVisionData::VisionTexture' has a wrong offset!");
static_assert(offsetof(FST_UITutorialVisionData, KindId) == 0x000028, "Member 'FST_UITutorialVisionData::KindId' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BoolXYZ
// 0x0003 (0x0003 - 0x0000)
struct FST_BoolXYZ final
{
public:
	bool                                          X;                                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Y;                                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Z;                                                 // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BoolXYZ) == 0x000001, "Wrong alignment on FST_BoolXYZ");
static_assert(sizeof(FST_BoolXYZ) == 0x000003, "Wrong size on FST_BoolXYZ");
static_assert(offsetof(FST_BoolXYZ, X) == 0x000000, "Member 'FST_BoolXYZ::X' has a wrong offset!");
static_assert(offsetof(FST_BoolXYZ, Y) == 0x000001, "Member 'FST_BoolXYZ::Y' has a wrong offset!");
static_assert(offsetof(FST_BoolXYZ, Z) == 0x000002, "Member 'FST_BoolXYZ::Z' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SwitchDamageCollisionTransform
// 0x0038 (0x0038 - 0x0000)
struct FST_SwitchDamageCollisionTransform final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_BoolXYZ                            enableLocation;                                    // 0x0008(0x0003)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_BoolXYZ                            enableRotate;                                      // 0x0018(0x0003)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotate;                                            // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_BoolXYZ                            enableScale;                                       // 0x0028(0x0003)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SwitchDamageCollisionTransform) == 0x000004, "Wrong alignment on FST_SwitchDamageCollisionTransform");
static_assert(sizeof(FST_SwitchDamageCollisionTransform) == 0x000038, "Wrong size on FST_SwitchDamageCollisionTransform");
static_assert(offsetof(FST_SwitchDamageCollisionTransform, Name) == 0x000000, "Member 'FST_SwitchDamageCollisionTransform::Name' has a wrong offset!");
static_assert(offsetof(FST_SwitchDamageCollisionTransform, enableLocation) == 0x000008, "Member 'FST_SwitchDamageCollisionTransform::enableLocation' has a wrong offset!");
static_assert(offsetof(FST_SwitchDamageCollisionTransform, Location) == 0x00000C, "Member 'FST_SwitchDamageCollisionTransform::Location' has a wrong offset!");
static_assert(offsetof(FST_SwitchDamageCollisionTransform, enableRotate) == 0x000018, "Member 'FST_SwitchDamageCollisionTransform::enableRotate' has a wrong offset!");
static_assert(offsetof(FST_SwitchDamageCollisionTransform, Rotate) == 0x00001C, "Member 'FST_SwitchDamageCollisionTransform::Rotate' has a wrong offset!");
static_assert(offsetof(FST_SwitchDamageCollisionTransform, enableScale) == 0x000028, "Member 'FST_SwitchDamageCollisionTransform::enableScale' has a wrong offset!");
static_assert(offsetof(FST_SwitchDamageCollisionTransform, Scale) == 0x00002C, "Member 'FST_SwitchDamageCollisionTransform::Scale' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossRotateInsightTarget
// 0x0024 (0x0024 - 0x0000)
struct FST_BossRotateInsightTarget final
{
public:
	float                                         mReversalTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mDurationTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mInsightAngle;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mChase;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   mFailSection;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSuccessSection;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mElapsedTime;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossRotateInsightTarget) == 0x000004, "Wrong alignment on FST_BossRotateInsightTarget");
static_assert(sizeof(FST_BossRotateInsightTarget) == 0x000024, "Wrong size on FST_BossRotateInsightTarget");
static_assert(offsetof(FST_BossRotateInsightTarget, mReversalTime) == 0x000000, "Member 'FST_BossRotateInsightTarget::mReversalTime' has a wrong offset!");
static_assert(offsetof(FST_BossRotateInsightTarget, mDurationTime) == 0x000004, "Member 'FST_BossRotateInsightTarget::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_BossRotateInsightTarget, mInsightAngle) == 0x000008, "Member 'FST_BossRotateInsightTarget::mInsightAngle' has a wrong offset!");
static_assert(offsetof(FST_BossRotateInsightTarget, mChase) == 0x00000C, "Member 'FST_BossRotateInsightTarget::mChase' has a wrong offset!");
static_assert(offsetof(FST_BossRotateInsightTarget, mFailSection) == 0x000010, "Member 'FST_BossRotateInsightTarget::mFailSection' has a wrong offset!");
static_assert(offsetof(FST_BossRotateInsightTarget, mSuccessSection) == 0x000018, "Member 'FST_BossRotateInsightTarget::mSuccessSection' has a wrong offset!");
static_assert(offsetof(FST_BossRotateInsightTarget, mElapsedTime) == 0x000020, "Member 'FST_BossRotateInsightTarget::mElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearFieldLink
// 0x0008 (0x0008 - 0x0000)
struct FST_QuestClearFieldLink final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearFieldLink) == 0x000004, "Wrong alignment on FST_QuestClearFieldLink");
static_assert(sizeof(FST_QuestClearFieldLink) == 0x000008, "Wrong size on FST_QuestClearFieldLink");
static_assert(offsetof(FST_QuestClearFieldLink, Type) == 0x000000, "Member 'FST_QuestClearFieldLink::Type' has a wrong offset!");
static_assert(offsetof(FST_QuestClearFieldLink, Num) == 0x000004, "Member 'FST_QuestClearFieldLink::Num' has a wrong offset!");

// ScriptStruct DarwinGame.SoundVolumeParamter
// 0x0008 (0x0010 - 0x0008)
struct FSoundVolumeParamter final : public FTableRowBase
{
public:
	float                                         MainVolume;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolume;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundVolumeParamter) == 0x000008, "Wrong alignment on FSoundVolumeParamter");
static_assert(sizeof(FSoundVolumeParamter) == 0x000010, "Wrong size on FSoundVolumeParamter");
static_assert(offsetof(FSoundVolumeParamter, MainVolume) == 0x000008, "Member 'FSoundVolumeParamter::MainVolume' has a wrong offset!");
static_assert(offsetof(FSoundVolumeParamter, FadeVolume) == 0x00000C, "Member 'FSoundVolumeParamter::FadeVolume' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AreaData
// 0x0058 (0x0060 - 0x0008)
struct FST_AreaData final : public FTableRowBase
{
public:
	class FName                                   AreaID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AreaName;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InitIsReleased;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbyssBorder;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnvironmentID;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnvironmentEffectID;                               // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSafeArea;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventID;                                           // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStation;                                         // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AreaData) == 0x000008, "Wrong alignment on FST_AreaData");
static_assert(sizeof(FST_AreaData) == 0x000060, "Wrong size on FST_AreaData");
static_assert(offsetof(FST_AreaData, AreaID) == 0x000008, "Member 'FST_AreaData::AreaID' has a wrong offset!");
static_assert(offsetof(FST_AreaData, MapID) == 0x000010, "Member 'FST_AreaData::MapID' has a wrong offset!");
static_assert(offsetof(FST_AreaData, AreaType) == 0x000018, "Member 'FST_AreaData::AreaType' has a wrong offset!");
static_assert(offsetof(FST_AreaData, AreaName) == 0x000020, "Member 'FST_AreaData::AreaName' has a wrong offset!");
static_assert(offsetof(FST_AreaData, InitIsReleased) == 0x000038, "Member 'FST_AreaData::InitIsReleased' has a wrong offset!");
static_assert(offsetof(FST_AreaData, AbyssBorder) == 0x00003C, "Member 'FST_AreaData::AbyssBorder' has a wrong offset!");
static_assert(offsetof(FST_AreaData, EnvironmentID) == 0x000040, "Member 'FST_AreaData::EnvironmentID' has a wrong offset!");
static_assert(offsetof(FST_AreaData, EnvironmentEffectID) == 0x000048, "Member 'FST_AreaData::EnvironmentEffectID' has a wrong offset!");
static_assert(offsetof(FST_AreaData, IsSafeArea) == 0x000050, "Member 'FST_AreaData::IsSafeArea' has a wrong offset!");
static_assert(offsetof(FST_AreaData, EventID) == 0x000054, "Member 'FST_AreaData::EventID' has a wrong offset!");
static_assert(offsetof(FST_AreaData, IsStation) == 0x00005C, "Member 'FST_AreaData::IsStation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterCustomEquipment
// 0x0060 (0x0060 - 0x0000)
struct FST_MonsterCustomEquipment final
{
public:
	ESocket                                       SocketType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquipmentType;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterCustomEquipment) == 0x000008, "Wrong alignment on FST_MonsterCustomEquipment");
static_assert(sizeof(FST_MonsterCustomEquipment) == 0x000060, "Wrong size on FST_MonsterCustomEquipment");
static_assert(offsetof(FST_MonsterCustomEquipment, SocketType) == 0x000000, "Member 'FST_MonsterCustomEquipment::SocketType' has a wrong offset!");
static_assert(offsetof(FST_MonsterCustomEquipment, EquipmentType) == 0x000004, "Member 'FST_MonsterCustomEquipment::EquipmentType' has a wrong offset!");
static_assert(offsetof(FST_MonsterCustomEquipment, SkeletalMesh) == 0x000010, "Member 'FST_MonsterCustomEquipment::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FST_MonsterCustomEquipment, StaticMesh) == 0x000038, "Member 'FST_MonsterCustomEquipment::StaticMesh' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AreaListData
// 0x0050 (0x0058 - 0x0008)
struct FST_AreaListData final : public FTableRowBase
{
public:
	class FName                                   MapID;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AreaName;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InitIsReleased;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbyssBorder;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnvironmentID;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnvironmentEffectID;                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSafeArea;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventID;                                           // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStation;                                         // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AreaListData) == 0x000008, "Wrong alignment on FST_AreaListData");
static_assert(sizeof(FST_AreaListData) == 0x000058, "Wrong size on FST_AreaListData");
static_assert(offsetof(FST_AreaListData, MapID) == 0x000008, "Member 'FST_AreaListData::MapID' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, AreaType) == 0x000010, "Member 'FST_AreaListData::AreaType' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, AreaName) == 0x000018, "Member 'FST_AreaListData::AreaName' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, InitIsReleased) == 0x000030, "Member 'FST_AreaListData::InitIsReleased' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, AbyssBorder) == 0x000034, "Member 'FST_AreaListData::AbyssBorder' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, EnvironmentID) == 0x000038, "Member 'FST_AreaListData::EnvironmentID' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, EnvironmentEffectID) == 0x000040, "Member 'FST_AreaListData::EnvironmentEffectID' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, IsSafeArea) == 0x000048, "Member 'FST_AreaListData::IsSafeArea' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, EventID) == 0x00004C, "Member 'FST_AreaListData::EventID' has a wrong offset!");
static_assert(offsetof(FST_AreaListData, IsStation) == 0x000054, "Member 'FST_AreaListData::IsStation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactData
// 0x0130 (0x0138 - 0x0008)
struct FST_ArtifactData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EArtifactType                                 Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Categories;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SmallCategories;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDummy;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ConvertItemID;                                     // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FigureID;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  EnableAreas;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagId;                                            // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPop;                                             // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Authorities;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEtcFlg;                                          // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         No;                                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderName50;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderKind;                                         // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FlavorText;                                        // 0x00D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Artifact;                                          // 0x00E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EstimateArtifact;                                  // 0x0110(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtifactData) == 0x000008, "Wrong alignment on FST_ArtifactData");
static_assert(sizeof(FST_ArtifactData) == 0x000138, "Wrong size on FST_ArtifactData");
static_assert(offsetof(FST_ArtifactData, Name) == 0x000008, "Member 'FST_ArtifactData::Name' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, Type) == 0x000020, "Member 'FST_ArtifactData::Type' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, Categories) == 0x000028, "Member 'FST_ArtifactData::Categories' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, SmallCategories) == 0x000038, "Member 'FST_ArtifactData::SmallCategories' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, Value) == 0x000048, "Member 'FST_ArtifactData::Value' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, Rarity) == 0x00004C, "Member 'FST_ArtifactData::Rarity' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, IsDummy) == 0x000050, "Member 'FST_ArtifactData::IsDummy' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, ConvertItemID) == 0x000054, "Member 'FST_ArtifactData::ConvertItemID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, IconTexture) == 0x000060, "Member 'FST_ArtifactData::IconTexture' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, FigureID) == 0x000088, "Member 'FST_ArtifactData::FigureID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, EnableAreas) == 0x000090, "Member 'FST_ArtifactData::EnableAreas' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, FlagId) == 0x0000A0, "Member 'FST_ArtifactData::FlagId' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, Probability) == 0x0000A8, "Member 'FST_ArtifactData::Probability' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, IsPop) == 0x0000AC, "Member 'FST_ArtifactData::IsPop' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, Authorities) == 0x0000B0, "Member 'FST_ArtifactData::Authorities' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, IsEtcFlg) == 0x0000C0, "Member 'FST_ArtifactData::IsEtcFlg' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, No) == 0x0000C4, "Member 'FST_ArtifactData::No' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, OrderName50) == 0x0000C8, "Member 'FST_ArtifactData::OrderName50' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, OrderKind) == 0x0000CC, "Member 'FST_ArtifactData::OrderKind' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, FlavorText) == 0x0000D0, "Member 'FST_ArtifactData::FlavorText' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, Artifact) == 0x0000E8, "Member 'FST_ArtifactData::Artifact' has a wrong offset!");
static_assert(offsetof(FST_ArtifactData, EstimateArtifact) == 0x000110, "Member 'FST_ArtifactData::EstimateArtifact' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCIdleEmoteListItem
// 0x000C (0x000C - 0x0000)
struct FST_NPCIdleEmoteListItem final
{
public:
	int32                                         Emote;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DispTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomTime;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCIdleEmoteListItem) == 0x000004, "Wrong alignment on FST_NPCIdleEmoteListItem");
static_assert(sizeof(FST_NPCIdleEmoteListItem) == 0x00000C, "Wrong size on FST_NPCIdleEmoteListItem");
static_assert(offsetof(FST_NPCIdleEmoteListItem, Emote) == 0x000000, "Member 'FST_NPCIdleEmoteListItem::Emote' has a wrong offset!");
static_assert(offsetof(FST_NPCIdleEmoteListItem, DispTime) == 0x000004, "Member 'FST_NPCIdleEmoteListItem::DispTime' has a wrong offset!");
static_assert(offsetof(FST_NPCIdleEmoteListItem, RandomTime) == 0x000008, "Member 'FST_NPCIdleEmoteListItem::RandomTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterCautionActionData
// 0x0008 (0x0010 - 0x0008)
struct FST_MonsterCautionActionData final : public FTableRowBase
{
public:
	EAICautionActionType                          CautionActionType;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterCautionActionData) == 0x000008, "Wrong alignment on FST_MonsterCautionActionData");
static_assert(sizeof(FST_MonsterCautionActionData) == 0x000010, "Wrong size on FST_MonsterCautionActionData");
static_assert(offsetof(FST_MonsterCautionActionData, CautionActionType) == 0x000008, "Member 'FST_MonsterCautionActionData::CautionActionType' has a wrong offset!");
static_assert(offsetof(FST_MonsterCautionActionData, Probability) == 0x00000C, "Member 'FST_MonsterCautionActionData::Probability' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactRarityPriceSetting
// 0x0008 (0x0008 - 0x0000)
struct FST_ArtifactRarityPriceSetting final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtifactRarityPriceSetting) == 0x000004, "Wrong alignment on FST_ArtifactRarityPriceSetting");
static_assert(sizeof(FST_ArtifactRarityPriceSetting) == 0x000008, "Wrong size on FST_ArtifactRarityPriceSetting");
static_assert(offsetof(FST_ArtifactRarityPriceSetting, Min) == 0x000000, "Member 'FST_ArtifactRarityPriceSetting::Min' has a wrong offset!");
static_assert(offsetof(FST_ArtifactRarityPriceSetting, Max) == 0x000004, "Member 'FST_ArtifactRarityPriceSetting::Max' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactRarityProbability
// 0x0010 (0x0010 - 0x0000)
struct FST_ArtifactRarityProbability final
{
public:
	TArray<int32>                                 ProbabilityList;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtifactRarityProbability) == 0x000008, "Wrong alignment on FST_ArtifactRarityProbability");
static_assert(sizeof(FST_ArtifactRarityProbability) == 0x000010, "Wrong size on FST_ArtifactRarityProbability");
static_assert(offsetof(FST_ArtifactRarityProbability, ProbabilityList) == 0x000000, "Member 'FST_ArtifactRarityProbability::ProbabilityList' has a wrong offset!");

// ScriptStruct DarwinGame.EventCalledWhileAccess
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEventCalledWhileAccess final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventCalledWhileAccess) == 0x000008, "Wrong alignment on FEventCalledWhileAccess");
static_assert(sizeof(FEventCalledWhileAccess) == 0x000018, "Wrong size on FEventCalledWhileAccess");

// ScriptStruct DarwinGame.ST_MonsterAvoidanceInfo
// 0x0018 (0x0018 - 0x0000)
struct FST_MonsterAvoidanceInfo final
{
public:
	class USphereComponent*                       Sphere;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterAvoidanceInfo) == 0x000008, "Wrong alignment on FST_MonsterAvoidanceInfo");
static_assert(sizeof(FST_MonsterAvoidanceInfo) == 0x000018, "Wrong size on FST_MonsterAvoidanceInfo");
static_assert(offsetof(FST_MonsterAvoidanceInfo, Sphere) == 0x000000, "Member 'FST_MonsterAvoidanceInfo::Sphere' has a wrong offset!");
static_assert(offsetof(FST_MonsterAvoidanceInfo, Location) == 0x000008, "Member 'FST_MonsterAvoidanceInfo::Location' has a wrong offset!");
static_assert(offsetof(FST_MonsterAvoidanceInfo, Radius) == 0x000014, "Member 'FST_MonsterAvoidanceInfo::Radius' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIArtifactFrameTypeData
// 0x0010 (0x0018 - 0x0008)
struct FST_UIArtifactFrameTypeData final : public FTableRowBase
{
public:
	EArtifactFrameType                            FrameType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         FrameValue;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIArtifactFrameTypeData) == 0x000008, "Wrong alignment on FST_UIArtifactFrameTypeData");
static_assert(sizeof(FST_UIArtifactFrameTypeData) == 0x000018, "Wrong size on FST_UIArtifactFrameTypeData");
static_assert(offsetof(FST_UIArtifactFrameTypeData, FrameType) == 0x000008, "Member 'FST_UIArtifactFrameTypeData::FrameType' has a wrong offset!");
static_assert(offsetof(FST_UIArtifactFrameTypeData, FrameValue) == 0x000010, "Member 'FST_UIArtifactFrameTypeData::FrameValue' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactPointEventCheckData
// 0x0058 (0x0058 - 0x0000)
struct FST_ArtifactPointEventCheckData final
{
public:
	TMap<class FName, bool>                       Flag;                                              // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EArtifactPointType                            Type;                                              // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Vision;                                            // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ArtifactPointEventCheckData) == 0x000008, "Wrong alignment on FST_ArtifactPointEventCheckData");
static_assert(sizeof(FST_ArtifactPointEventCheckData) == 0x000058, "Wrong size on FST_ArtifactPointEventCheckData");
static_assert(offsetof(FST_ArtifactPointEventCheckData, Flag) == 0x000000, "Member 'FST_ArtifactPointEventCheckData::Flag' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointEventCheckData, Type) == 0x000050, "Member 'FST_ArtifactPointEventCheckData::Type' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointEventCheckData, Vision) == 0x000051, "Member 'FST_ArtifactPointEventCheckData::Vision' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactPointSetting
// 0x0008 (0x0008 - 0x0000)
struct FST_ArtifactPointSetting final
{
public:
	int32                                         NestSpawnRadius;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NestEraseRadius;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FST_ArtifactPointSetting) == 0x000004, "Wrong alignment on FST_ArtifactPointSetting");
static_assert(sizeof(FST_ArtifactPointSetting) == 0x000008, "Wrong size on FST_ArtifactPointSetting");
static_assert(offsetof(FST_ArtifactPointSetting, NestSpawnRadius) == 0x000000, "Member 'FST_ArtifactPointSetting::NestSpawnRadius' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointSetting, NestEraseRadius) == 0x000004, "Member 'FST_ArtifactPointSetting::NestEraseRadius' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactCompleteData
// 0x0020 (0x0028 - 0x0008)
struct FST_ArtifactCompleteData final : public FTableRowBase
{
public:
	int32                                         ClassId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArtifactType                                 ArtifactType;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExistCompReward;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RewardID;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ArtifactCompleteData) == 0x000008, "Wrong alignment on FST_ArtifactCompleteData");
static_assert(sizeof(FST_ArtifactCompleteData) == 0x000028, "Wrong size on FST_ArtifactCompleteData");
static_assert(offsetof(FST_ArtifactCompleteData, ClassId) == 0x000008, "Member 'FST_ArtifactCompleteData::ClassId' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompleteData, ArtifactType) == 0x00000C, "Member 'FST_ArtifactCompleteData::ArtifactType' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompleteData, OtherId) == 0x000010, "Member 'FST_ArtifactCompleteData::OtherId' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompleteData, ExistCompReward) == 0x000014, "Member 'FST_ArtifactCompleteData::ExistCompReward' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompleteData, RewardID) == 0x000018, "Member 'FST_ArtifactCompleteData::RewardID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompleteData, Order) == 0x000020, "Member 'FST_ArtifactCompleteData::Order' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossStatueDestroy
// 0x0008 (0x0008 - 0x0000)
struct FST_BossStatueDestroy final
{
public:
	class FName                                   mSectionName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossStatueDestroy) == 0x000004, "Wrong alignment on FST_BossStatueDestroy");
static_assert(sizeof(FST_BossStatueDestroy) == 0x000008, "Wrong size on FST_BossStatueDestroy");
static_assert(offsetof(FST_BossStatueDestroy, mSectionName) == 0x000000, "Member 'FST_BossStatueDestroy::mSectionName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactPointData
// 0x0040 (0x0048 - 0x0008)
struct FST_ArtifactPointData final : public FTableRowBase
{
public:
	class FName                                   AreaID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     Area;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFix;                                             // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ArtifactID;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEvent;                                          // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDummy;                                           // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EventID;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtifactPointData) == 0x000008, "Wrong alignment on FST_ArtifactPointData");
static_assert(sizeof(FST_ArtifactPointData) == 0x000048, "Wrong size on FST_ArtifactPointData");
static_assert(offsetof(FST_ArtifactPointData, AreaID) == 0x000008, "Member 'FST_ArtifactPointData::AreaID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, ID) == 0x000010, "Member 'FST_ArtifactPointData::ID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, Area) == 0x000018, "Member 'FST_ArtifactPointData::Area' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, Location) == 0x00001C, "Member 'FST_ArtifactPointData::Location' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, Difficulty) == 0x000028, "Member 'FST_ArtifactPointData::Difficulty' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, IsFix) == 0x00002C, "Member 'FST_ArtifactPointData::IsFix' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, ArtifactID) == 0x000030, "Member 'FST_ArtifactPointData::ArtifactID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, UseEvent) == 0x000034, "Member 'FST_ArtifactPointData::UseEvent' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, IsDummy) == 0x000035, "Member 'FST_ArtifactPointData::IsDummy' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointData, EventID) == 0x000038, "Member 'FST_ArtifactPointData::EventID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactPointListData
// 0x0028 (0x0030 - 0x0008)
struct FST_ArtifactPointListData final : public FTableRowBase
{
public:
	class FName                                   AreaID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     Area;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreasureCorrect;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArtifactID;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEvent;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDummy;                                           // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ArtifactPointListData) == 0x000008, "Wrong alignment on FST_ArtifactPointListData");
static_assert(sizeof(FST_ArtifactPointListData) == 0x000030, "Wrong size on FST_ArtifactPointListData");
static_assert(offsetof(FST_ArtifactPointListData, AreaID) == 0x000008, "Member 'FST_ArtifactPointListData::AreaID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointListData, Area) == 0x000010, "Member 'FST_ArtifactPointListData::Area' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointListData, Location) == 0x000014, "Member 'FST_ArtifactPointListData::Location' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointListData, TreasureCorrect) == 0x000020, "Member 'FST_ArtifactPointListData::TreasureCorrect' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointListData, ArtifactID) == 0x000024, "Member 'FST_ArtifactPointListData::ArtifactID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointListData, UseEvent) == 0x000028, "Member 'FST_ArtifactPointListData::UseEvent' has a wrong offset!");
static_assert(offsetof(FST_ArtifactPointListData, IsDummy) == 0x000029, "Member 'FST_ArtifactPointListData::IsDummy' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListPointData
// 0x0014 (0x0014 - 0x0000)
struct FST_QuestListPointData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapQuestIconType                             MapQuestIconType;                                  // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CircleSize;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestPointType                               Type;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestListPointData) == 0x000004, "Wrong alignment on FST_QuestListPointData");
static_assert(sizeof(FST_QuestListPointData) == 0x000014, "Wrong size on FST_QuestListPointData");
static_assert(offsetof(FST_QuestListPointData, ID) == 0x000000, "Member 'FST_QuestListPointData::ID' has a wrong offset!");
static_assert(offsetof(FST_QuestListPointData, AreaType) == 0x000008, "Member 'FST_QuestListPointData::AreaType' has a wrong offset!");
static_assert(offsetof(FST_QuestListPointData, MapQuestIconType) == 0x000009, "Member 'FST_QuestListPointData::MapQuestIconType' has a wrong offset!");
static_assert(offsetof(FST_QuestListPointData, CircleSize) == 0x00000C, "Member 'FST_QuestListPointData::CircleSize' has a wrong offset!");
static_assert(offsetof(FST_QuestListPointData, Type) == 0x000010, "Member 'FST_QuestListPointData::Type' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossRetarget
// 0x0020 (0x0020 - 0x0000)
struct FST_BossRetarget final
{
public:
	float                                         mAttackTargetDistance;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossTargetType                        mNearTargetLocationType;                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   mNearSection;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossTargetType                        mFarTargetLocationType;                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   mFarSection;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossTransitionType                    mTransitionType;                                   // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_BossRetarget) == 0x000004, "Wrong alignment on FST_BossRetarget");
static_assert(sizeof(FST_BossRetarget) == 0x000020, "Wrong size on FST_BossRetarget");
static_assert(offsetof(FST_BossRetarget, mAttackTargetDistance) == 0x000000, "Member 'FST_BossRetarget::mAttackTargetDistance' has a wrong offset!");
static_assert(offsetof(FST_BossRetarget, mNearTargetLocationType) == 0x000004, "Member 'FST_BossRetarget::mNearTargetLocationType' has a wrong offset!");
static_assert(offsetof(FST_BossRetarget, mNearSection) == 0x000008, "Member 'FST_BossRetarget::mNearSection' has a wrong offset!");
static_assert(offsetof(FST_BossRetarget, mFarTargetLocationType) == 0x000010, "Member 'FST_BossRetarget::mFarTargetLocationType' has a wrong offset!");
static_assert(offsetof(FST_BossRetarget, mFarSection) == 0x000014, "Member 'FST_BossRetarget::mFarSection' has a wrong offset!");
static_assert(offsetof(FST_BossRetarget, mTransitionType) == 0x00001C, "Member 'FST_BossRetarget::mTransitionType' has a wrong offset!");

// ScriptStruct DarwinGame.AttachedEffect
// 0x0010 (0x0010 - 0x0000)
struct FAttachedEffect final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEffectBase*                            Effect;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachedEffect) == 0x000008, "Wrong alignment on FAttachedEffect");
static_assert(sizeof(FAttachedEffect) == 0x000010, "Wrong size on FAttachedEffect");
static_assert(offsetof(FAttachedEffect, ID) == 0x000000, "Member 'FAttachedEffect::ID' has a wrong offset!");
static_assert(offsetof(FAttachedEffect, Effect) == 0x000008, "Member 'FAttachedEffect::Effect' has a wrong offset!");

// ScriptStruct DarwinGame.AttachObject
// 0x0038 (0x0038 - 0x0000)
struct FAttachObject final
{
public:
	class FName                                   ObjectName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AttachClass;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoketName;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachObject) == 0x000008, "Wrong alignment on FAttachObject");
static_assert(sizeof(FAttachObject) == 0x000038, "Wrong size on FAttachObject");
static_assert(offsetof(FAttachObject, ObjectName) == 0x000000, "Member 'FAttachObject::ObjectName' has a wrong offset!");
static_assert(offsetof(FAttachObject, AttachClass) == 0x000008, "Member 'FAttachObject::AttachClass' has a wrong offset!");
static_assert(offsetof(FAttachObject, SoketName) == 0x000030, "Member 'FAttachObject::SoketName' has a wrong offset!");

// ScriptStruct DarwinGame.AttackCollisionParameter
// 0x0028 (0x0028 - 0x0000)
struct FAttackCollisionParameter final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OrderId;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitGroupId;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttackCollisionParameter) == 0x000004, "Wrong alignment on FAttackCollisionParameter");
static_assert(sizeof(FAttackCollisionParameter) == 0x000028, "Wrong size on FAttackCollisionParameter");
static_assert(offsetof(FAttackCollisionParameter, actionDetailID) == 0x000000, "Member 'FAttackCollisionParameter::actionDetailID' has a wrong offset!");
static_assert(offsetof(FAttackCollisionParameter, OrderId) == 0x000008, "Member 'FAttackCollisionParameter::OrderId' has a wrong offset!");
static_assert(offsetof(FAttackCollisionParameter, HitGroupId) == 0x000010, "Member 'FAttackCollisionParameter::HitGroupId' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossSelfhalm
// 0x0014 (0x0014 - 0x0000)
struct FST_BossSelfhalm final
{
public:
	bool                                          mSubtractionType;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mPauseAutoRecover;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         mSubtractionChargeAll;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mSubtractionHPAll;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mSubtractionCharge;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mSubtractionHP;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossSelfhalm) == 0x000004, "Wrong alignment on FST_BossSelfhalm");
static_assert(sizeof(FST_BossSelfhalm) == 0x000014, "Wrong size on FST_BossSelfhalm");
static_assert(offsetof(FST_BossSelfhalm, mSubtractionType) == 0x000000, "Member 'FST_BossSelfhalm::mSubtractionType' has a wrong offset!");
static_assert(offsetof(FST_BossSelfhalm, mPauseAutoRecover) == 0x000001, "Member 'FST_BossSelfhalm::mPauseAutoRecover' has a wrong offset!");
static_assert(offsetof(FST_BossSelfhalm, mSubtractionChargeAll) == 0x000004, "Member 'FST_BossSelfhalm::mSubtractionChargeAll' has a wrong offset!");
static_assert(offsetof(FST_BossSelfhalm, mSubtractionHPAll) == 0x000008, "Member 'FST_BossSelfhalm::mSubtractionHPAll' has a wrong offset!");
static_assert(offsetof(FST_BossSelfhalm, mSubtractionCharge) == 0x00000C, "Member 'FST_BossSelfhalm::mSubtractionCharge' has a wrong offset!");
static_assert(offsetof(FST_BossSelfhalm, mSubtractionHP) == 0x000010, "Member 'FST_BossSelfhalm::mSubtractionHP' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StartupScreenSetting
// 0x0010 (0x0010 - 0x0000)
struct FST_StartupScreenSetting final
{
public:
	class FName                                   PageChangeAnimName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDisplayOtherLocale;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StartupScreenSetting) == 0x000004, "Wrong alignment on FST_StartupScreenSetting");
static_assert(sizeof(FST_StartupScreenSetting) == 0x000010, "Wrong size on FST_StartupScreenSetting");
static_assert(offsetof(FST_StartupScreenSetting, PageChangeAnimName) == 0x000000, "Member 'FST_StartupScreenSetting::PageChangeAnimName' has a wrong offset!");
static_assert(offsetof(FST_StartupScreenSetting, Time) == 0x000008, "Member 'FST_StartupScreenSetting::Time' has a wrong offset!");
static_assert(offsetof(FST_StartupScreenSetting, isDisplayOtherLocale) == 0x00000C, "Member 'FST_StartupScreenSetting::isDisplayOtherLocale' has a wrong offset!");

// ScriptStruct DarwinGame.AttackElementParameter
// 0x0010 (0x0010 - 0x0000)
struct FAttackElementParameter final
{
public:
	class FName                                   idName;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         damageRate;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackElementParameter) == 0x000004, "Wrong alignment on FAttackElementParameter");
static_assert(sizeof(FAttackElementParameter) == 0x000010, "Wrong size on FAttackElementParameter");
static_assert(offsetof(FAttackElementParameter, idName) == 0x000000, "Member 'FAttackElementParameter::idName' has a wrong offset!");
static_assert(offsetof(FAttackElementParameter, Priority) == 0x000008, "Member 'FAttackElementParameter::Priority' has a wrong offset!");
static_assert(offsetof(FAttackElementParameter, damageRate) == 0x00000C, "Member 'FAttackElementParameter::damageRate' has a wrong offset!");

// ScriptStruct DarwinGame.StateChangeKey
// 0x0010 (0x0010 - 0x0000)
struct FStateChangeKey final
{
public:
	EStateChangeCause                             Cause;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FoodHandle;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateChangeKey) == 0x000004, "Wrong alignment on FStateChangeKey");
static_assert(sizeof(FStateChangeKey) == 0x000010, "Wrong size on FStateChangeKey");
static_assert(offsetof(FStateChangeKey, Cause) == 0x000000, "Member 'FStateChangeKey::Cause' has a wrong offset!");
static_assert(offsetof(FStateChangeKey, FoodHandle) == 0x000004, "Member 'FStateChangeKey::FoodHandle' has a wrong offset!");
static_assert(offsetof(FStateChangeKey, AttributeID) == 0x000008, "Member 'FStateChangeKey::AttributeID' has a wrong offset!");

// ScriptStruct DarwinGame.AttackInfo
// 0x0040 (0x0048 - 0x0008)
struct FAttackInfo final : public FTableRowBase
{
public:
	TArray<EObjectEffectionEnum>                  EffecttionTypes;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AttackMotion;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CollisionIDList;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EffectIDList;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackInfo) == 0x000008, "Wrong alignment on FAttackInfo");
static_assert(sizeof(FAttackInfo) == 0x000048, "Wrong size on FAttackInfo");
static_assert(offsetof(FAttackInfo, EffecttionTypes) == 0x000008, "Member 'FAttackInfo::EffecttionTypes' has a wrong offset!");
static_assert(offsetof(FAttackInfo, AttackType) == 0x000018, "Member 'FAttackInfo::AttackType' has a wrong offset!");
static_assert(offsetof(FAttackInfo, AttackMotion) == 0x000020, "Member 'FAttackInfo::AttackMotion' has a wrong offset!");
static_assert(offsetof(FAttackInfo, CollisionIDList) == 0x000028, "Member 'FAttackInfo::CollisionIDList' has a wrong offset!");
static_assert(offsetof(FAttackInfo, EffectIDList) == 0x000038, "Member 'FAttackInfo::EffectIDList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIOneShopDataStruct
// 0x0010 (0x0018 - 0x0008)
struct FST_UIOneShopDataStruct final : public FTableRowBase
{
public:
	bool                                          bCanBuy;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventFlagID;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIOneShopDataStruct) == 0x000008, "Wrong alignment on FST_UIOneShopDataStruct");
static_assert(sizeof(FST_UIOneShopDataStruct) == 0x000018, "Wrong size on FST_UIOneShopDataStruct");
static_assert(offsetof(FST_UIOneShopDataStruct, bCanBuy) == 0x000008, "Member 'FST_UIOneShopDataStruct::bCanBuy' has a wrong offset!");
static_assert(offsetof(FST_UIOneShopDataStruct, EventFlagID) == 0x00000C, "Member 'FST_UIOneShopDataStruct::EventFlagID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIShopArtifactDataStruct
// 0x0020 (0x0028 - 0x0008)
struct FST_UIShopArtifactDataStruct final : public FTableRowBase
{
public:
	class FName                                   ArtifactID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_UIOneShopDataStruct>        ShopData;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIShopArtifactDataStruct) == 0x000008, "Wrong alignment on FST_UIShopArtifactDataStruct");
static_assert(sizeof(FST_UIShopArtifactDataStruct) == 0x000028, "Wrong size on FST_UIShopArtifactDataStruct");
static_assert(offsetof(FST_UIShopArtifactDataStruct, ArtifactID) == 0x000008, "Member 'FST_UIShopArtifactDataStruct::ArtifactID' has a wrong offset!");
static_assert(offsetof(FST_UIShopArtifactDataStruct, Value) == 0x000010, "Member 'FST_UIShopArtifactDataStruct::Value' has a wrong offset!");
static_assert(offsetof(FST_UIShopArtifactDataStruct, ShopData) == 0x000018, "Member 'FST_UIShopArtifactDataStruct::ShopData' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterRotateInsightTarget
// 0x0024 (0x0024 - 0x0000)
struct FST_MonsterRotateInsightTarget final
{
public:
	float                                         mReversalTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mDurationTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mInsightAngle;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mChase;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   mFailSection;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSuccessSection;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mElapsedTime;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterRotateInsightTarget) == 0x000004, "Wrong alignment on FST_MonsterRotateInsightTarget");
static_assert(sizeof(FST_MonsterRotateInsightTarget) == 0x000024, "Wrong size on FST_MonsterRotateInsightTarget");
static_assert(offsetof(FST_MonsterRotateInsightTarget, mReversalTime) == 0x000000, "Member 'FST_MonsterRotateInsightTarget::mReversalTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateInsightTarget, mDurationTime) == 0x000004, "Member 'FST_MonsterRotateInsightTarget::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateInsightTarget, mInsightAngle) == 0x000008, "Member 'FST_MonsterRotateInsightTarget::mInsightAngle' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateInsightTarget, mChase) == 0x00000C, "Member 'FST_MonsterRotateInsightTarget::mChase' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateInsightTarget, mFailSection) == 0x000010, "Member 'FST_MonsterRotateInsightTarget::mFailSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateInsightTarget, mSuccessSection) == 0x000018, "Member 'FST_MonsterRotateInsightTarget::mSuccessSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateInsightTarget, mElapsedTime) == 0x000020, "Member 'FST_MonsterRotateInsightTarget::mElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SkillDataTable
// 0x0010 (0x0018 - 0x0008)
struct FST_SkillDataTable final : public FTableRowBase
{
public:
	ECalculationType                              CalcType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditionalValue;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_SkillDataTable) == 0x000008, "Wrong alignment on FST_SkillDataTable");
static_assert(sizeof(FST_SkillDataTable) == 0x000018, "Wrong size on FST_SkillDataTable");
static_assert(offsetof(FST_SkillDataTable, CalcType) == 0x000008, "Member 'FST_SkillDataTable::CalcType' has a wrong offset!");
static_assert(offsetof(FST_SkillDataTable, AdditionalValue) == 0x00000C, "Member 'FST_SkillDataTable::AdditionalValue' has a wrong offset!");
static_assert(offsetof(FST_SkillDataTable, Rate) == 0x000010, "Member 'FST_SkillDataTable::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.AttackCollisionInfo
// 0x0048 (0x0050 - 0x0008)
struct FAttackCollisionInfo final : public FTableRowBase
{
public:
	struct FST_SkillDataTable                     Data;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetAngle;                                       // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttackCollisionInfo) == 0x000008, "Wrong alignment on FAttackCollisionInfo");
static_assert(sizeof(FAttackCollisionInfo) == 0x000050, "Wrong size on FAttackCollisionInfo");
static_assert(offsetof(FAttackCollisionInfo, Data) == 0x000008, "Member 'FAttackCollisionInfo::Data' has a wrong offset!");
static_assert(offsetof(FAttackCollisionInfo, Offset) == 0x000020, "Member 'FAttackCollisionInfo::Offset' has a wrong offset!");
static_assert(offsetof(FAttackCollisionInfo, OffsetAngle) == 0x00002C, "Member 'FAttackCollisionInfo::OffsetAngle' has a wrong offset!");
static_assert(offsetof(FAttackCollisionInfo, Height) == 0x000038, "Member 'FAttackCollisionInfo::Height' has a wrong offset!");
static_assert(offsetof(FAttackCollisionInfo, Radius) == 0x00003C, "Member 'FAttackCollisionInfo::Radius' has a wrong offset!");
static_assert(offsetof(FAttackCollisionInfo, bAttached) == 0x000040, "Member 'FAttackCollisionInfo::bAttached' has a wrong offset!");
static_assert(offsetof(FAttackCollisionInfo, SocketName) == 0x000044, "Member 'FAttackCollisionInfo::SocketName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossPossessed
// 0x0008 (0x0008 - 0x0000)
struct FST_BossPossessed final
{
public:
	class FName                                   mSectionName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossPossessed) == 0x000004, "Wrong alignment on FST_BossPossessed");
static_assert(sizeof(FST_BossPossessed) == 0x000008, "Wrong size on FST_BossPossessed");
static_assert(offsetof(FST_BossPossessed, mSectionName) == 0x000000, "Member 'FST_BossPossessed::mSectionName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AppraisePerformanceData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FST_AppraisePerformanceData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AppraisePerformanceData) == 0x000004, "Wrong alignment on FST_AppraisePerformanceData");
static_assert(sizeof(FST_AppraisePerformanceData) == 0x000014, "Wrong size on FST_AppraisePerformanceData");

// ScriptStruct DarwinGame.AttackPreHitParameter
// 0x0001 (0x0001 - 0x0000)
struct FAttackPreHitParameter final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttackPreHitParameter) == 0x000001, "Wrong alignment on FAttackPreHitParameter");
static_assert(sizeof(FAttackPreHitParameter) == 0x000001, "Wrong size on FAttackPreHitParameter");

// ScriptStruct DarwinGame.AttackHitParameter
// 0x0024 (0x0024 - 0x0000)
struct FAttackHitParameter final
{
public:
	float                                         AttackDamageRate;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagedRate;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeakPoint;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttackerLocation;                                  // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackHitParameter) == 0x000004, "Wrong alignment on FAttackHitParameter");
static_assert(sizeof(FAttackHitParameter) == 0x000024, "Wrong size on FAttackHitParameter");
static_assert(offsetof(FAttackHitParameter, AttackDamageRate) == 0x000000, "Member 'FAttackHitParameter::AttackDamageRate' has a wrong offset!");
static_assert(offsetof(FAttackHitParameter, DamagedRate) == 0x000004, "Member 'FAttackHitParameter::DamagedRate' has a wrong offset!");
static_assert(offsetof(FAttackHitParameter, IsWeakPoint) == 0x000008, "Member 'FAttackHitParameter::IsWeakPoint' has a wrong offset!");
static_assert(offsetof(FAttackHitParameter, HitLocation) == 0x00000C, "Member 'FAttackHitParameter::HitLocation' has a wrong offset!");
static_assert(offsetof(FAttackHitParameter, AttackerLocation) == 0x000018, "Member 'FAttackHitParameter::AttackerLocation' has a wrong offset!");

// ScriptStruct DarwinGame.AttackHitResultStruct
// 0x0040 (0x0040 - 0x0000)
struct FAttackHitResultStruct final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamagePopLocation;                                 // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttackPreHitParameter                 PreHitParam;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttackHitParameter                    HitParam;                                          // 0x0018(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DamageCapsuleRadius;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackHitResultStruct) == 0x000004, "Wrong alignment on FAttackHitResultStruct");
static_assert(sizeof(FAttackHitResultStruct) == 0x000040, "Wrong size on FAttackHitResultStruct");
static_assert(offsetof(FAttackHitResultStruct, actionDetailID) == 0x000000, "Member 'FAttackHitResultStruct::actionDetailID' has a wrong offset!");
static_assert(offsetof(FAttackHitResultStruct, DamagePopLocation) == 0x000008, "Member 'FAttackHitResultStruct::DamagePopLocation' has a wrong offset!");
static_assert(offsetof(FAttackHitResultStruct, PreHitParam) == 0x000014, "Member 'FAttackHitResultStruct::PreHitParam' has a wrong offset!");
static_assert(offsetof(FAttackHitResultStruct, HitParam) == 0x000018, "Member 'FAttackHitResultStruct::HitParam' has a wrong offset!");
static_assert(offsetof(FAttackHitResultStruct, DamageCapsuleRadius) == 0x00003C, "Member 'FAttackHitResultStruct::DamageCapsuleRadius' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossCombatDuring
// 0x000C (0x000C - 0x0000)
struct FST_BossCombatDuring final
{
public:
	bool                                          mOffAtEnd;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossCombatDuring                      mCombatDuring;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterCombatState                           mCombatState;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   mSkipSection;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossCombatDuring) == 0x000004, "Wrong alignment on FST_BossCombatDuring");
static_assert(sizeof(FST_BossCombatDuring) == 0x00000C, "Wrong size on FST_BossCombatDuring");
static_assert(offsetof(FST_BossCombatDuring, mOffAtEnd) == 0x000000, "Member 'FST_BossCombatDuring::mOffAtEnd' has a wrong offset!");
static_assert(offsetof(FST_BossCombatDuring, mCombatDuring) == 0x000001, "Member 'FST_BossCombatDuring::mCombatDuring' has a wrong offset!");
static_assert(offsetof(FST_BossCombatDuring, mCombatState) == 0x000002, "Member 'FST_BossCombatDuring::mCombatState' has a wrong offset!");
static_assert(offsetof(FST_BossCombatDuring, mSkipSection) == 0x000004, "Member 'FST_BossCombatDuring::mSkipSection' has a wrong offset!");

// ScriptStruct DarwinGame.ActionContext
// 0x000C (0x000C - 0x0000)
struct FActionContext final
{
public:
	bool                                          IsCritical;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuardType                                    GuardType;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageLevel;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageSizeType                               PopType;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionContext) == 0x000004, "Wrong alignment on FActionContext");
static_assert(sizeof(FActionContext) == 0x00000C, "Wrong size on FActionContext");
static_assert(offsetof(FActionContext, IsCritical) == 0x000000, "Member 'FActionContext::IsCritical' has a wrong offset!");
static_assert(offsetof(FActionContext, DamageType) == 0x000001, "Member 'FActionContext::DamageType' has a wrong offset!");
static_assert(offsetof(FActionContext, GuardType) == 0x000002, "Member 'FActionContext::GuardType' has a wrong offset!");
static_assert(offsetof(FActionContext, DamageLevel) == 0x000004, "Member 'FActionContext::DamageLevel' has a wrong offset!");
static_assert(offsetof(FActionContext, PopType) == 0x000008, "Member 'FActionContext::PopType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterIgnoreCollision
// 0x000C (0x000C - 0x0000)
struct FST_MonsterIgnoreCollision final
{
public:
	bool                                          mDisableCollision;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         mHiddenTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mDisableHiddenTimer;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mKeepHidden;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterIgnoreCollision) == 0x000004, "Wrong alignment on FST_MonsterIgnoreCollision");
static_assert(sizeof(FST_MonsterIgnoreCollision) == 0x00000C, "Wrong size on FST_MonsterIgnoreCollision");
static_assert(offsetof(FST_MonsterIgnoreCollision, mDisableCollision) == 0x000000, "Member 'FST_MonsterIgnoreCollision::mDisableCollision' has a wrong offset!");
static_assert(offsetof(FST_MonsterIgnoreCollision, mHiddenTime) == 0x000004, "Member 'FST_MonsterIgnoreCollision::mHiddenTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterIgnoreCollision, mDisableHiddenTimer) == 0x000008, "Member 'FST_MonsterIgnoreCollision::mDisableHiddenTimer' has a wrong offset!");
static_assert(offsetof(FST_MonsterIgnoreCollision, mKeepHidden) == 0x000009, "Member 'FST_MonsterIgnoreCollision::mKeepHidden' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QualityUpBonusData
// 0x0008 (0x0010 - 0x0008)
struct FST_QualityUpBonusData final : public FTableRowBase
{
public:
	int64                                         Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QualityUpBonusData) == 0x000008, "Wrong alignment on FST_QualityUpBonusData");
static_assert(sizeof(FST_QualityUpBonusData) == 0x000010, "Wrong size on FST_QualityUpBonusData");
static_assert(offsetof(FST_QualityUpBonusData, Value) == 0x000008, "Member 'FST_QualityUpBonusData::Value' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AttributeEffect
// 0x000C (0x000C - 0x0000)
struct FST_AttributeEffect final
{
public:
	bool                                          bLooping;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   socket;                                            // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_AttributeEffect) == 0x000004, "Wrong alignment on FST_AttributeEffect");
static_assert(sizeof(FST_AttributeEffect) == 0x00000C, "Wrong size on FST_AttributeEffect");
static_assert(offsetof(FST_AttributeEffect, bLooping) == 0x000000, "Member 'FST_AttributeEffect::bLooping' has a wrong offset!");
static_assert(offsetof(FST_AttributeEffect, socket) == 0x000004, "Member 'FST_AttributeEffect::socket' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AttributeSlipData
// 0x0014 (0x0014 - 0x0000)
struct FST_AttributeSlipData final
{
public:
	EAttributeSlipType                            Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusParamType                              UseParamType;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Percent;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEffect;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_AttributeSlipData) == 0x000004, "Wrong alignment on FST_AttributeSlipData");
static_assert(sizeof(FST_AttributeSlipData) == 0x000014, "Wrong size on FST_AttributeSlipData");
static_assert(offsetof(FST_AttributeSlipData, Type) == 0x000000, "Member 'FST_AttributeSlipData::Type' has a wrong offset!");
static_assert(offsetof(FST_AttributeSlipData, Interval) == 0x000004, "Member 'FST_AttributeSlipData::Interval' has a wrong offset!");
static_assert(offsetof(FST_AttributeSlipData, UseParamType) == 0x000008, "Member 'FST_AttributeSlipData::UseParamType' has a wrong offset!");
static_assert(offsetof(FST_AttributeSlipData, Percent) == 0x00000C, "Member 'FST_AttributeSlipData::Percent' has a wrong offset!");
static_assert(offsetof(FST_AttributeSlipData, MaxEffect) == 0x000010, "Member 'FST_AttributeSlipData::MaxEffect' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AttributeData
// 0x0110 (0x0118 - 0x0008)
struct FST_AttributeData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AttributeTag;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInfluenceAttribute                           InfluenceType;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EApplicabilityType>                    ApplicabilityTypes;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteLevel;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinLevel;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinAttribute;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAttribute;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReleasedByBreak;                                  // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeDurationType                        DurationType;                                      // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMinEffectTime;                                 // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinEffectTimeByAlly;                               // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEffectTimeByAlly;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinEffectTimeByEnemy;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEffectTimeByEnemy;                              // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_AttributeSlipData                  SlipData;                                          // 0x0068(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EffectType;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectOne;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectTwo;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReleasedRateByDamage;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  Occursion;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  Release;                                           // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_AttributeEffect                    EffectInfo;                                        // 0x00E0(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   StatusIconID;                                      // 0x00EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x00F8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAttributeProcessPolicy                       Policy;                                            // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AttributeData) == 0x000008, "Wrong alignment on FST_AttributeData");
static_assert(sizeof(FST_AttributeData) == 0x000118, "Wrong size on FST_AttributeData");
static_assert(offsetof(FST_AttributeData, Name) == 0x000008, "Member 'FST_AttributeData::Name' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, AttributeTag) == 0x000020, "Member 'FST_AttributeData::AttributeTag' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, InfluenceType) == 0x000028, "Member 'FST_AttributeData::InfluenceType' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, ApplicabilityTypes) == 0x000030, "Member 'FST_AttributeData::ApplicabilityTypes' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, bOverwriteLevel) == 0x000040, "Member 'FST_AttributeData::bOverwriteLevel' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MinLevel) == 0x000044, "Member 'FST_AttributeData::MinLevel' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MaxLevel) == 0x000048, "Member 'FST_AttributeData::MaxLevel' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MinAttribute) == 0x00004C, "Member 'FST_AttributeData::MinAttribute' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MaxAttribute) == 0x000050, "Member 'FST_AttributeData::MaxAttribute' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, bReleasedByBreak) == 0x000054, "Member 'FST_AttributeData::bReleasedByBreak' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, DurationType) == 0x000055, "Member 'FST_AttributeData::DurationType' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, bUseMinEffectTime) == 0x000056, "Member 'FST_AttributeData::bUseMinEffectTime' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MinEffectTimeByAlly) == 0x000058, "Member 'FST_AttributeData::MinEffectTimeByAlly' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MaxEffectTimeByAlly) == 0x00005C, "Member 'FST_AttributeData::MaxEffectTimeByAlly' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MinEffectTimeByEnemy) == 0x000060, "Member 'FST_AttributeData::MinEffectTimeByEnemy' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, MaxEffectTimeByEnemy) == 0x000064, "Member 'FST_AttributeData::MaxEffectTimeByEnemy' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, SlipData) == 0x000068, "Member 'FST_AttributeData::SlipData' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, EffectType) == 0x000080, "Member 'FST_AttributeData::EffectType' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, EffectOne) == 0x000090, "Member 'FST_AttributeData::EffectOne' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, EffectTwo) == 0x0000A0, "Member 'FST_AttributeData::EffectTwo' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, ReleasedRateByDamage) == 0x0000B0, "Member 'FST_AttributeData::ReleasedRateByDamage' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, Occursion) == 0x0000C0, "Member 'FST_AttributeData::Occursion' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, Release) == 0x0000D0, "Member 'FST_AttributeData::Release' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, EffectInfo) == 0x0000E0, "Member 'FST_AttributeData::EffectInfo' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, StatusIconID) == 0x0000EC, "Member 'FST_AttributeData::StatusIconID' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, Description) == 0x0000F8, "Member 'FST_AttributeData::Description' has a wrong offset!");
static_assert(offsetof(FST_AttributeData, Policy) == 0x000110, "Member 'FST_AttributeData::Policy' has a wrong offset!");

// ScriptStruct DarwinGame.EnvironmentSoundCollisionData
// 0x0030 (0x0030 - 0x0000)
struct FEnvironmentSoundCollisionData final
{
public:
	EEnvironmentSoundCollisionType                CollisionType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxSize;                                           // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtomReactionOffset;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnvironmentSoundCollisionData) == 0x000004, "Wrong alignment on FEnvironmentSoundCollisionData");
static_assert(sizeof(FEnvironmentSoundCollisionData) == 0x000030, "Wrong size on FEnvironmentSoundCollisionData");
static_assert(offsetof(FEnvironmentSoundCollisionData, CollisionType) == 0x000000, "Member 'FEnvironmentSoundCollisionData::CollisionType' has a wrong offset!");
static_assert(offsetof(FEnvironmentSoundCollisionData, BoxSize) == 0x000004, "Member 'FEnvironmentSoundCollisionData::BoxSize' has a wrong offset!");
static_assert(offsetof(FEnvironmentSoundCollisionData, Rotator) == 0x000010, "Member 'FEnvironmentSoundCollisionData::Rotator' has a wrong offset!");
static_assert(offsetof(FEnvironmentSoundCollisionData, Radius) == 0x00001C, "Member 'FEnvironmentSoundCollisionData::Radius' has a wrong offset!");
static_assert(offsetof(FEnvironmentSoundCollisionData, Offset) == 0x000020, "Member 'FEnvironmentSoundCollisionData::Offset' has a wrong offset!");
static_assert(offsetof(FEnvironmentSoundCollisionData, AtomReactionOffset) == 0x00002C, "Member 'FEnvironmentSoundCollisionData::AtomReactionOffset' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Status
// 0x0018 (0x0018 - 0x0000)
struct FST_Status final
{
public:
	float                                         MaxHP;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMP;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Attack;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Defense;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dexterity;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magic;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Status) == 0x000004, "Wrong alignment on FST_Status");
static_assert(sizeof(FST_Status) == 0x000018, "Wrong size on FST_Status");
static_assert(offsetof(FST_Status, MaxHP) == 0x000000, "Member 'FST_Status::MaxHP' has a wrong offset!");
static_assert(offsetof(FST_Status, MaxMP) == 0x000004, "Member 'FST_Status::MaxMP' has a wrong offset!");
static_assert(offsetof(FST_Status, Attack) == 0x000008, "Member 'FST_Status::Attack' has a wrong offset!");
static_assert(offsetof(FST_Status, Defense) == 0x00000C, "Member 'FST_Status::Defense' has a wrong offset!");
static_assert(offsetof(FST_Status, Dexterity) == 0x000010, "Member 'FST_Status::Dexterity' has a wrong offset!");
static_assert(offsetof(FST_Status, Magic) == 0x000014, "Member 'FST_Status::Magic' has a wrong offset!");

// ScriptStruct DarwinGame.EditGuestMonsterData
// 0x0024 (0x0024 - 0x0000)
struct FEditGuestMonsterData final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             LastStatus;                                        // 0x000C(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditGuestMonsterData) == 0x000004, "Wrong alignment on FEditGuestMonsterData");
static_assert(sizeof(FEditGuestMonsterData) == 0x000024, "Wrong size on FEditGuestMonsterData");
static_assert(offsetof(FEditGuestMonsterData, Uid) == 0x000000, "Member 'FEditGuestMonsterData::Uid' has a wrong offset!");
static_assert(offsetof(FEditGuestMonsterData, HP) == 0x000004, "Member 'FEditGuestMonsterData::HP' has a wrong offset!");
static_assert(offsetof(FEditGuestMonsterData, MP) == 0x000008, "Member 'FEditGuestMonsterData::MP' has a wrong offset!");
static_assert(offsetof(FEditGuestMonsterData, LastStatus) == 0x00000C, "Member 'FEditGuestMonsterData::LastStatus' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIAppraiseCountResource
// 0x0030 (0x0038 - 0x0008)
struct FST_UIAppraiseCountResource final : public FTableRowBase
{
public:
	class UTexture2D*                             NormalYellowTexture;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             NormalPinkTexture;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FlashYellowTexture;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FlashPinkTexture;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PopupYellowTexture;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PopupPinkTexture;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIAppraiseCountResource) == 0x000008, "Wrong alignment on FST_UIAppraiseCountResource");
static_assert(sizeof(FST_UIAppraiseCountResource) == 0x000038, "Wrong size on FST_UIAppraiseCountResource");
static_assert(offsetof(FST_UIAppraiseCountResource, NormalYellowTexture) == 0x000008, "Member 'FST_UIAppraiseCountResource::NormalYellowTexture' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseCountResource, NormalPinkTexture) == 0x000010, "Member 'FST_UIAppraiseCountResource::NormalPinkTexture' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseCountResource, FlashYellowTexture) == 0x000018, "Member 'FST_UIAppraiseCountResource::FlashYellowTexture' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseCountResource, FlashPinkTexture) == 0x000020, "Member 'FST_UIAppraiseCountResource::FlashPinkTexture' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseCountResource, PopupYellowTexture) == 0x000028, "Member 'FST_UIAppraiseCountResource::PopupYellowTexture' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseCountResource, PopupPinkTexture) == 0x000030, "Member 'FST_UIAppraiseCountResource::PopupPinkTexture' has a wrong offset!");

// ScriptStruct DarwinGame.EventAttributeRequest
// 0x0030 (0x0030 - 0x0000)
struct FEventAttributeRequest final
{
public:
	class FName                                   AttributeID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventAttributeRequest) == 0x000008, "Wrong alignment on FEventAttributeRequest");
static_assert(sizeof(FEventAttributeRequest) == 0x000030, "Wrong size on FEventAttributeRequest");
static_assert(offsetof(FEventAttributeRequest, AttributeID) == 0x000000, "Member 'FEventAttributeRequest::AttributeID' has a wrong offset!");
static_assert(offsetof(FEventAttributeRequest, Level) == 0x000008, "Member 'FEventAttributeRequest::Level' has a wrong offset!");
static_assert(offsetof(FEventAttributeRequest, TargetTags) == 0x000010, "Member 'FEventAttributeRequest::TargetTags' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GameScriptSpawnInfoBase
// 0x0030 (0x0030 - 0x0000)
struct FST_GameScriptSpawnInfoBase
{
public:
	TArray<class FName>                           SpawnNpcIdList;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEventTrigger*>                  CreateEventTriggerList;                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LoadLevelName;                                     // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_GameScriptSpawnInfoBase) == 0x000008, "Wrong alignment on FST_GameScriptSpawnInfoBase");
static_assert(sizeof(FST_GameScriptSpawnInfoBase) == 0x000030, "Wrong size on FST_GameScriptSpawnInfoBase");
static_assert(offsetof(FST_GameScriptSpawnInfoBase, SpawnNpcIdList) == 0x000000, "Member 'FST_GameScriptSpawnInfoBase::SpawnNpcIdList' has a wrong offset!");
static_assert(offsetof(FST_GameScriptSpawnInfoBase, CreateEventTriggerList) == 0x000010, "Member 'FST_GameScriptSpawnInfoBase::CreateEventTriggerList' has a wrong offset!");
static_assert(offsetof(FST_GameScriptSpawnInfoBase, LoadLevelName) == 0x000020, "Member 'FST_GameScriptSpawnInfoBase::LoadLevelName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EpisodeSpawnInfo
// 0x0008 (0x0038 - 0x0030)
struct FST_EpisodeSpawnInfo final : public FST_GameScriptSpawnInfoBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EpisodeSpawnInfo) == 0x000008, "Wrong alignment on FST_EpisodeSpawnInfo");
static_assert(sizeof(FST_EpisodeSpawnInfo) == 0x000038, "Wrong size on FST_EpisodeSpawnInfo");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_Feature_Data
// 0x0050 (0x0050 - 0x0000)
struct FST_PM_DetaileWin_Feature_Data final
{
public:
	TArray<class UTexture2D*>                     IconS;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FeatureName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixed;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BodyText;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_Feature_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_Feature_Data");
static_assert(sizeof(FST_PM_DetaileWin_Feature_Data) == 0x000050, "Wrong size on FST_PM_DetaileWin_Feature_Data");
static_assert(offsetof(FST_PM_DetaileWin_Feature_Data, IconS) == 0x000000, "Member 'FST_PM_DetaileWin_Feature_Data::IconS' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Feature_Data, FeatureName) == 0x000010, "Member 'FST_PM_DetaileWin_Feature_Data::FeatureName' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Feature_Data, Rank) == 0x000028, "Member 'FST_PM_DetaileWin_Feature_Data::Rank' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Feature_Data, Value) == 0x00002C, "Member 'FST_PM_DetaileWin_Feature_Data::Value' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Feature_Data, IsFixed) == 0x000030, "Member 'FST_PM_DetaileWin_Feature_Data::IsFixed' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Feature_Data, BodyText) == 0x000038, "Member 'FST_PM_DetaileWin_Feature_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AvatarDataTable
// 0x0078 (0x0080 - 0x0008)
struct FST_AvatarDataTable : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CapsuleSize;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationClass;                                    // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInstance>> Materials;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttachObject>                  AttachObjects;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_AvatarDataTable) == 0x000008, "Wrong alignment on FST_AvatarDataTable");
static_assert(sizeof(FST_AvatarDataTable) == 0x000080, "Wrong size on FST_AvatarDataTable");
static_assert(offsetof(FST_AvatarDataTable, Mesh) == 0x000008, "Member 'FST_AvatarDataTable::Mesh' has a wrong offset!");
static_assert(offsetof(FST_AvatarDataTable, CapsuleSize) == 0x000030, "Member 'FST_AvatarDataTable::CapsuleSize' has a wrong offset!");
static_assert(offsetof(FST_AvatarDataTable, AnimationClass) == 0x000038, "Member 'FST_AvatarDataTable::AnimationClass' has a wrong offset!");
static_assert(offsetof(FST_AvatarDataTable, Materials) == 0x000060, "Member 'FST_AvatarDataTable::Materials' has a wrong offset!");
static_assert(offsetof(FST_AvatarDataTable, AttachObjects) == 0x000070, "Member 'FST_AvatarDataTable::AttachObjects' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestBaseAreaBattleData
// 0x0020 (0x0028 - 0x0008)
struct FST_QuestBaseAreaBattleData final : public FTableRowBase
{
public:
	float                                         TimeLimit;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERivalTeamForce>                       EnemyTeams;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RevengeBattleQuestID;                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestBaseAreaBattleData) == 0x000008, "Wrong alignment on FST_QuestBaseAreaBattleData");
static_assert(sizeof(FST_QuestBaseAreaBattleData) == 0x000028, "Wrong size on FST_QuestBaseAreaBattleData");
static_assert(offsetof(FST_QuestBaseAreaBattleData, TimeLimit) == 0x000008, "Member 'FST_QuestBaseAreaBattleData::TimeLimit' has a wrong offset!");
static_assert(offsetof(FST_QuestBaseAreaBattleData, EnemyTeams) == 0x000010, "Member 'FST_QuestBaseAreaBattleData::EnemyTeams' has a wrong offset!");
static_assert(offsetof(FST_QuestBaseAreaBattleData, RevengeBattleQuestID) == 0x000020, "Member 'FST_QuestBaseAreaBattleData::RevengeBattleQuestID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCAvatarDataTable
// 0x0000 (0x0080 - 0x0080)
struct FST_NPCAvatarDataTable final : public FST_AvatarDataTable
{
};
static_assert(alignof(FST_NPCAvatarDataTable) == 0x000008, "Wrong alignment on FST_NPCAvatarDataTable");
static_assert(sizeof(FST_NPCAvatarDataTable) == 0x000080, "Wrong size on FST_NPCAvatarDataTable");

// ScriptStruct DarwinGame.ST_BossUIRestart
// 0x0010 (0x0010 - 0x0000)
struct FST_BossUIRestart final
{
public:
	float                                         mChangeTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mWaitChildBoss;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   mSectionName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossUIRestart) == 0x000004, "Wrong alignment on FST_BossUIRestart");
static_assert(sizeof(FST_BossUIRestart) == 0x000010, "Wrong size on FST_BossUIRestart");
static_assert(offsetof(FST_BossUIRestart, mChangeTime) == 0x000000, "Member 'FST_BossUIRestart::mChangeTime' has a wrong offset!");
static_assert(offsetof(FST_BossUIRestart, mWaitChildBoss) == 0x000004, "Member 'FST_BossUIRestart::mWaitChildBoss' has a wrong offset!");
static_assert(offsetof(FST_BossUIRestart, mSectionName) == 0x000008, "Member 'FST_BossUIRestart::mSectionName' has a wrong offset!");

// ScriptStruct DarwinGame.PersistentLevelData
// 0x0010 (0x0018 - 0x0008)
struct FPersistentLevelData final : public FTableRowBase
{
public:
	EPersistentLevelID                            LevelID;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelPath;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDebug;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStartup;                                         // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersistentLevelData) == 0x000008, "Wrong alignment on FPersistentLevelData");
static_assert(sizeof(FPersistentLevelData) == 0x000018, "Wrong size on FPersistentLevelData");
static_assert(offsetof(FPersistentLevelData, LevelID) == 0x000008, "Member 'FPersistentLevelData::LevelID' has a wrong offset!");
static_assert(offsetof(FPersistentLevelData, LevelPath) == 0x00000C, "Member 'FPersistentLevelData::LevelPath' has a wrong offset!");
static_assert(offsetof(FPersistentLevelData, IsDebug) == 0x000014, "Member 'FPersistentLevelData::IsDebug' has a wrong offset!");
static_assert(offsetof(FPersistentLevelData, IsStartup) == 0x000015, "Member 'FPersistentLevelData::IsStartup' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaBattleConfig
// 0x001C (0x001C - 0x0000)
struct FBaseAreaBattleConfig final
{
public:
	int32                                         Interval;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckInterval;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeLimit;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartBaseValue;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTeamLevelRate;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartMyArtifactRate;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartBaseBattleMyTeamLevel;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaBattleConfig) == 0x000004, "Wrong alignment on FBaseAreaBattleConfig");
static_assert(sizeof(FBaseAreaBattleConfig) == 0x00001C, "Wrong size on FBaseAreaBattleConfig");
static_assert(offsetof(FBaseAreaBattleConfig, Interval) == 0x000000, "Member 'FBaseAreaBattleConfig::Interval' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleConfig, CheckInterval) == 0x000004, "Member 'FBaseAreaBattleConfig::CheckInterval' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleConfig, TimeLimit) == 0x000008, "Member 'FBaseAreaBattleConfig::TimeLimit' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleConfig, StartBaseValue) == 0x00000C, "Member 'FBaseAreaBattleConfig::StartBaseValue' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleConfig, StartTeamLevelRate) == 0x000010, "Member 'FBaseAreaBattleConfig::StartTeamLevelRate' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleConfig, StartMyArtifactRate) == 0x000014, "Member 'FBaseAreaBattleConfig::StartMyArtifactRate' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleConfig, StartBaseBattleMyTeamLevel) == 0x000018, "Member 'FBaseAreaBattleConfig::StartBaseBattleMyTeamLevel' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestEmergencyData
// 0x0008 (0x0010 - 0x0008)
struct FST_QuestEmergencyData final : public FTableRowBase
{
public:
	EDispatchEmergencyType                        Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLimit;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestEmergencyData) == 0x000008, "Wrong alignment on FST_QuestEmergencyData");
static_assert(sizeof(FST_QuestEmergencyData) == 0x000010, "Wrong size on FST_QuestEmergencyData");
static_assert(offsetof(FST_QuestEmergencyData, Type) == 0x000008, "Member 'FST_QuestEmergencyData::Type' has a wrong offset!");
static_assert(offsetof(FST_QuestEmergencyData, TimeLimit) == 0x00000C, "Member 'FST_QuestEmergencyData::TimeLimit' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaBattleMonsterLocation
// 0x0028 (0x0028 - 0x0000)
struct FBaseAreaBattleMonsterLocation final
{
public:
	struct FVector                                RivalTeamMonsterSpawnLocation;                     // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DialogRivalTeamMonsterSpawnLocation;               // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        FriendMonsterSpawnLocation;                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaBattleMonsterLocation) == 0x000008, "Wrong alignment on FBaseAreaBattleMonsterLocation");
static_assert(sizeof(FBaseAreaBattleMonsterLocation) == 0x000028, "Wrong size on FBaseAreaBattleMonsterLocation");
static_assert(offsetof(FBaseAreaBattleMonsterLocation, RivalTeamMonsterSpawnLocation) == 0x000000, "Member 'FBaseAreaBattleMonsterLocation::RivalTeamMonsterSpawnLocation' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleMonsterLocation, DialogRivalTeamMonsterSpawnLocation) == 0x00000C, "Member 'FBaseAreaBattleMonsterLocation::DialogRivalTeamMonsterSpawnLocation' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleMonsterLocation, FriendMonsterSpawnLocation) == 0x000018, "Member 'FBaseAreaBattleMonsterLocation::FriendMonsterSpawnLocation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GameScriptSpawnTransformTable
// 0x0028 (0x0030 - 0x0008)
struct FST_GameScriptSpawnTransformTable final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_GameScriptSpawnTransformTable) == 0x000008, "Wrong alignment on FST_GameScriptSpawnTransformTable");
static_assert(sizeof(FST_GameScriptSpawnTransformTable) == 0x000030, "Wrong size on FST_GameScriptSpawnTransformTable");
static_assert(offsetof(FST_GameScriptSpawnTransformTable, Location) == 0x000008, "Member 'FST_GameScriptSpawnTransformTable::Location' has a wrong offset!");
static_assert(offsetof(FST_GameScriptSpawnTransformTable, Rotation) == 0x000014, "Member 'FST_GameScriptSpawnTransformTable::Rotation' has a wrong offset!");
static_assert(offsetof(FST_GameScriptSpawnTransformTable, Scale) == 0x000020, "Member 'FST_GameScriptSpawnTransformTable::Scale' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaBattleWaitTime
// 0x0010 (0x0010 - 0x0000)
struct FBaseAreaBattleWaitTime final
{
public:
	float                                         PreStartWaitTime;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleStartWaitTime;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleWinEndWaitTime;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleLoseEndWaitTime;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaBattleWaitTime) == 0x000004, "Wrong alignment on FBaseAreaBattleWaitTime");
static_assert(sizeof(FBaseAreaBattleWaitTime) == 0x000010, "Wrong size on FBaseAreaBattleWaitTime");
static_assert(offsetof(FBaseAreaBattleWaitTime, PreStartWaitTime) == 0x000000, "Member 'FBaseAreaBattleWaitTime::PreStartWaitTime' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleWaitTime, BattleStartWaitTime) == 0x000004, "Member 'FBaseAreaBattleWaitTime::BattleStartWaitTime' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleWaitTime, BattleWinEndWaitTime) == 0x000008, "Member 'FBaseAreaBattleWaitTime::BattleWinEndWaitTime' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleWaitTime, BattleLoseEndWaitTime) == 0x00000C, "Member 'FBaseAreaBattleWaitTime::BattleLoseEndWaitTime' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaBattleResultEvent
// 0x0010 (0x0010 - 0x0000)
struct FBaseAreaBattleResultEvent final
{
public:
	class FName                                   BattleResultWinEventID;                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleResultLoseEventID;                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaBattleResultEvent) == 0x000004, "Wrong alignment on FBaseAreaBattleResultEvent");
static_assert(sizeof(FBaseAreaBattleResultEvent) == 0x000010, "Wrong size on FBaseAreaBattleResultEvent");
static_assert(offsetof(FBaseAreaBattleResultEvent, BattleResultWinEventID) == 0x000000, "Member 'FBaseAreaBattleResultEvent::BattleResultWinEventID' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleResultEvent, BattleResultLoseEventID) == 0x000008, "Member 'FBaseAreaBattleResultEvent::BattleResultLoseEventID' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaBattleEventPreset
// 0x0010 (0x0010 - 0x0000)
struct FBaseAreaBattleEventPreset final
{
public:
	class FName                                   PreBattleEventID;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AfterBattleEventID;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaBattleEventPreset) == 0x000004, "Wrong alignment on FBaseAreaBattleEventPreset");
static_assert(sizeof(FBaseAreaBattleEventPreset) == 0x000010, "Wrong size on FBaseAreaBattleEventPreset");
static_assert(offsetof(FBaseAreaBattleEventPreset, PreBattleEventID) == 0x000000, "Member 'FBaseAreaBattleEventPreset::PreBattleEventID' has a wrong offset!");
static_assert(offsetof(FBaseAreaBattleEventPreset, AfterBattleEventID) == 0x000008, "Member 'FBaseAreaBattleEventPreset::AfterBattleEventID' has a wrong offset!");

// ScriptStruct DarwinGame.EffectDataTableRawBase
// 0x0000 (0x0008 - 0x0008)
struct FEffectDataTableRawBase : public FTableRowBase
{
};
static_assert(alignof(FEffectDataTableRawBase) == 0x000008, "Wrong alignment on FEffectDataTableRawBase");
static_assert(sizeof(FEffectDataTableRawBase) == 0x000008, "Wrong size on FEffectDataTableRawBase");

// ScriptStruct DarwinGame.KindEffectData
// 0x00F0 (0x00F8 - 0x0008)
struct FKindEffectData : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mOriginal;                                         // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mSub1;                                             // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mSub2;                                             // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mSub3;                                             // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mSub4;                                             // 0x00A8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mSub5;                                             // 0x00D0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKindEffectData) == 0x000008, "Wrong alignment on FKindEffectData");
static_assert(sizeof(FKindEffectData) == 0x0000F8, "Wrong size on FKindEffectData");
static_assert(offsetof(FKindEffectData, mOriginal) == 0x000008, "Member 'FKindEffectData::mOriginal' has a wrong offset!");
static_assert(offsetof(FKindEffectData, mSub1) == 0x000030, "Member 'FKindEffectData::mSub1' has a wrong offset!");
static_assert(offsetof(FKindEffectData, mSub2) == 0x000058, "Member 'FKindEffectData::mSub2' has a wrong offset!");
static_assert(offsetof(FKindEffectData, mSub3) == 0x000080, "Member 'FKindEffectData::mSub3' has a wrong offset!");
static_assert(offsetof(FKindEffectData, mSub4) == 0x0000A8, "Member 'FKindEffectData::mSub4' has a wrong offset!");
static_assert(offsetof(FKindEffectData, mSub5) == 0x0000D0, "Member 'FKindEffectData::mSub5' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterTargetInRangeFin
// 0x0010 (0x0010 - 0x0000)
struct FST_MonsterTargetInRangeFin final
{
public:
	float                                         mRange;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mDurationTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mWatePassageTime;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterTargetInRangeFin) == 0x000004, "Wrong alignment on FST_MonsterTargetInRangeFin");
static_assert(sizeof(FST_MonsterTargetInRangeFin) == 0x000010, "Wrong size on FST_MonsterTargetInRangeFin");
static_assert(offsetof(FST_MonsterTargetInRangeFin, mRange) == 0x000000, "Member 'FST_MonsterTargetInRangeFin::mRange' has a wrong offset!");
static_assert(offsetof(FST_MonsterTargetInRangeFin, mDurationTime) == 0x000004, "Member 'FST_MonsterTargetInRangeFin::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterTargetInRangeFin, mWatePassageTime) == 0x000008, "Member 'FST_MonsterTargetInRangeFin::mWatePassageTime' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaLevelUpEventData
// 0x0010 (0x0018 - 0x0008)
struct FBaseAreaLevelUpEventData final : public FTableRowBase
{
public:
	class FName                                   gameFlag;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventID;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaLevelUpEventData) == 0x000008, "Wrong alignment on FBaseAreaLevelUpEventData");
static_assert(sizeof(FBaseAreaLevelUpEventData) == 0x000018, "Wrong size on FBaseAreaLevelUpEventData");
static_assert(offsetof(FBaseAreaLevelUpEventData, gameFlag) == 0x000008, "Member 'FBaseAreaLevelUpEventData::gameFlag' has a wrong offset!");
static_assert(offsetof(FBaseAreaLevelUpEventData, EventID) == 0x000010, "Member 'FBaseAreaLevelUpEventData::EventID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TipsConditions
// 0x0078 (0x0080 - 0x0008)
struct FST_TipsConditions final : public FTableRowBase
{
public:
	float                                         TipsOpenDelayTime;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ShowRequiredTipsIDs;                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FirstFlags;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      DefeatedByMonsters;                                // 0x0030(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TipsConditions) == 0x000008, "Wrong alignment on FST_TipsConditions");
static_assert(sizeof(FST_TipsConditions) == 0x000080, "Wrong size on FST_TipsConditions");
static_assert(offsetof(FST_TipsConditions, TipsOpenDelayTime) == 0x000008, "Member 'FST_TipsConditions::TipsOpenDelayTime' has a wrong offset!");
static_assert(offsetof(FST_TipsConditions, ShowRequiredTipsIDs) == 0x000010, "Member 'FST_TipsConditions::ShowRequiredTipsIDs' has a wrong offset!");
static_assert(offsetof(FST_TipsConditions, FirstFlags) == 0x000020, "Member 'FST_TipsConditions::FirstFlags' has a wrong offset!");
static_assert(offsetof(FST_TipsConditions, DefeatedByMonsters) == 0x000030, "Member 'FST_TipsConditions::DefeatedByMonsters' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaLevelUpGameFlagList
// 0x0010 (0x0010 - 0x0000)
struct FBaseAreaLevelUpGameFlagList final
{
public:
	TArray<class FName>                           list;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaLevelUpGameFlagList) == 0x000008, "Wrong alignment on FBaseAreaLevelUpGameFlagList");
static_assert(sizeof(FBaseAreaLevelUpGameFlagList) == 0x000010, "Wrong size on FBaseAreaLevelUpGameFlagList");
static_assert(offsetof(FBaseAreaLevelUpGameFlagList, list) == 0x000000, "Member 'FBaseAreaLevelUpGameFlagList::list' has a wrong offset!");

// ScriptStruct DarwinGame.BaseAreaLevelUpGameFlagData
// 0x0018 (0x0020 - 0x0008)
struct FBaseAreaLevelUpGameFlagData final : public FTableRowBase
{
public:
	int32                                         teamLevel;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBaseAreaLevelUpGameFlagList           gameFlagList;                                      // 0x0010(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseAreaLevelUpGameFlagData) == 0x000008, "Wrong alignment on FBaseAreaLevelUpGameFlagData");
static_assert(sizeof(FBaseAreaLevelUpGameFlagData) == 0x000020, "Wrong size on FBaseAreaLevelUpGameFlagData");
static_assert(offsetof(FBaseAreaLevelUpGameFlagData, teamLevel) == 0x000008, "Member 'FBaseAreaLevelUpGameFlagData::teamLevel' has a wrong offset!");
static_assert(offsetof(FBaseAreaLevelUpGameFlagData, gameFlagList) == 0x000010, "Member 'FBaseAreaLevelUpGameFlagData::gameFlagList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ReleaseBigStarScarBossTypeData
// 0x0010 (0x0010 - 0x0000)
struct FST_ReleaseBigStarScarBossTypeData final
{
public:
	TArray<EMonsterBossType>                      BossTyps;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ReleaseBigStarScarBossTypeData) == 0x000008, "Wrong alignment on FST_ReleaseBigStarScarBossTypeData");
static_assert(sizeof(FST_ReleaseBigStarScarBossTypeData) == 0x000010, "Wrong size on FST_ReleaseBigStarScarBossTypeData");
static_assert(offsetof(FST_ReleaseBigStarScarBossTypeData, BossTyps) == 0x000000, "Member 'FST_ReleaseBigStarScarBossTypeData::BossTyps' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingGameFlagLevel
// 0x0020 (0x0020 - 0x0000)
struct FST_StreamingGameFlagLevel final
{
public:
	struct FST_StreamingLevelList                 FalseList;                                         // 0x0000(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FST_StreamingLevelList                 TrueList;                                          // 0x0010(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StreamingGameFlagLevel) == 0x000008, "Wrong alignment on FST_StreamingGameFlagLevel");
static_assert(sizeof(FST_StreamingGameFlagLevel) == 0x000020, "Wrong size on FST_StreamingGameFlagLevel");
static_assert(offsetof(FST_StreamingGameFlagLevel, FalseList) == 0x000000, "Member 'FST_StreamingGameFlagLevel::FalseList' has a wrong offset!");
static_assert(offsetof(FST_StreamingGameFlagLevel, TrueList) == 0x000010, "Member 'FST_StreamingGameFlagLevel::TrueList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingGameFlagExclusiveLevel
// 0x0050 (0x0050 - 0x0000)
struct FST_StreamingGameFlagExclusiveLevel final
{
public:
	TMap<class FName, struct FST_StreamingLevelList> Data;                                              // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StreamingGameFlagExclusiveLevel) == 0x000008, "Wrong alignment on FST_StreamingGameFlagExclusiveLevel");
static_assert(sizeof(FST_StreamingGameFlagExclusiveLevel) == 0x000050, "Wrong size on FST_StreamingGameFlagExclusiveLevel");
static_assert(offsetof(FST_StreamingGameFlagExclusiveLevel, Data) == 0x000000, "Member 'FST_StreamingGameFlagExclusiveLevel::Data' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingLevelDataBase
// 0x0070 (0x0070 - 0x0000)
struct FST_StreamingLevelDataBase
{
public:
	TMap<class FName, struct FST_StreamingGameFlagLevel> gameFlag;                                          // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FST_StreamingGameFlagExclusiveLevel> GameFlagExclusive;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_StreamingLevelList                 AlwaysLoad;                                        // 0x0060(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StreamingLevelDataBase) == 0x000008, "Wrong alignment on FST_StreamingLevelDataBase");
static_assert(sizeof(FST_StreamingLevelDataBase) == 0x000070, "Wrong size on FST_StreamingLevelDataBase");
static_assert(offsetof(FST_StreamingLevelDataBase, gameFlag) == 0x000000, "Member 'FST_StreamingLevelDataBase::gameFlag' has a wrong offset!");
static_assert(offsetof(FST_StreamingLevelDataBase, GameFlagExclusive) == 0x000050, "Member 'FST_StreamingLevelDataBase::GameFlagExclusive' has a wrong offset!");
static_assert(offsetof(FST_StreamingLevelDataBase, AlwaysLoad) == 0x000060, "Member 'FST_StreamingLevelDataBase::AlwaysLoad' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterSkillEffectToComponentInfo
// 0x0018 (0x0018 - 0x0000)
struct FST_MonsterSkillEffectToComponentInfo final
{
public:
	class UParticleSystemComponent*               Effect;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterSkillEffectToComponentInfo) == 0x000008, "Wrong alignment on FST_MonsterSkillEffectToComponentInfo");
static_assert(sizeof(FST_MonsterSkillEffectToComponentInfo) == 0x000018, "Wrong size on FST_MonsterSkillEffectToComponentInfo");
static_assert(offsetof(FST_MonsterSkillEffectToComponentInfo, Effect) == 0x000000, "Member 'FST_MonsterSkillEffectToComponentInfo::Effect' has a wrong offset!");

// ScriptStruct DarwinGame.RevengeBattleBgmParameter
// 0x0010 (0x0018 - 0x0008)
struct FRevengeBattleBgmParameter final : public FTableRowBase
{
public:
	class FString                                 CueName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRevengeBattleBgmParameter) == 0x000008, "Wrong alignment on FRevengeBattleBgmParameter");
static_assert(sizeof(FRevengeBattleBgmParameter) == 0x000018, "Wrong size on FRevengeBattleBgmParameter");
static_assert(offsetof(FRevengeBattleBgmParameter, CueName) == 0x000008, "Member 'FRevengeBattleBgmParameter::CueName' has a wrong offset!");

// ScriptStruct DarwinGame.MagicShotPhaseEffectData
// 0x00A0 (0x00A8 - 0x0008)
struct FMagicShotPhaseEffectData final : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mShot;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mBullet;                                           // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mBeam;                                             // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mHit;                                              // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMagicShotPhaseEffectData) == 0x000008, "Wrong alignment on FMagicShotPhaseEffectData");
static_assert(sizeof(FMagicShotPhaseEffectData) == 0x0000A8, "Wrong size on FMagicShotPhaseEffectData");
static_assert(offsetof(FMagicShotPhaseEffectData, mShot) == 0x000008, "Member 'FMagicShotPhaseEffectData::mShot' has a wrong offset!");
static_assert(offsetof(FMagicShotPhaseEffectData, mBullet) == 0x000030, "Member 'FMagicShotPhaseEffectData::mBullet' has a wrong offset!");
static_assert(offsetof(FMagicShotPhaseEffectData, mBeam) == 0x000058, "Member 'FMagicShotPhaseEffectData::mBeam' has a wrong offset!");
static_assert(offsetof(FMagicShotPhaseEffectData, mHit) == 0x000080, "Member 'FMagicShotPhaseEffectData::mHit' has a wrong offset!");

// ScriptStruct DarwinGame.AttackMagicEffectData
// 0x02A0 (0x02A8 - 0x0008)
struct FAttackMagicEffectData final : public FEffectDataTableRawBase
{
public:
	struct FMagicShotPhaseEffectData              mLow;                                              // 0x0008(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mMiddle;                                           // 0x00B0(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mHigh;                                             // 0x0158(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mHighest;                                          // 0x0200(0x00A8)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackMagicEffectData) == 0x000008, "Wrong alignment on FAttackMagicEffectData");
static_assert(sizeof(FAttackMagicEffectData) == 0x0002A8, "Wrong size on FAttackMagicEffectData");
static_assert(offsetof(FAttackMagicEffectData, mLow) == 0x000008, "Member 'FAttackMagicEffectData::mLow' has a wrong offset!");
static_assert(offsetof(FAttackMagicEffectData, mMiddle) == 0x0000B0, "Member 'FAttackMagicEffectData::mMiddle' has a wrong offset!");
static_assert(offsetof(FAttackMagicEffectData, mHigh) == 0x000158, "Member 'FAttackMagicEffectData::mHigh' has a wrong offset!");
static_assert(offsetof(FAttackMagicEffectData, mHighest) == 0x000200, "Member 'FAttackMagicEffectData::mHighest' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIKnowledeCategory
// 0x0020 (0x0028 - 0x0008)
struct FST_UIKnowledeCategory final : public FTableRowBase
{
public:
	EKnowledgeCategoryType                        KnowledgeCategory;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CategoryText;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIKnowledeCategory) == 0x000008, "Wrong alignment on FST_UIKnowledeCategory");
static_assert(sizeof(FST_UIKnowledeCategory) == 0x000028, "Wrong size on FST_UIKnowledeCategory");
static_assert(offsetof(FST_UIKnowledeCategory, KnowledgeCategory) == 0x000008, "Member 'FST_UIKnowledeCategory::KnowledgeCategory' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeCategory, CategoryText) == 0x000010, "Member 'FST_UIKnowledeCategory::CategoryText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BaseAreaBasementStreamingData
// 0x0058 (0x0058 - 0x0000)
struct FST_BaseAreaBasementStreamingData final
{
public:
	class FName                                   UnloadFlag;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FST_StreamingGameFlagLevel> gameFlagList;                                      // 0x0008(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BaseAreaBasementStreamingData) == 0x000008, "Wrong alignment on FST_BaseAreaBasementStreamingData");
static_assert(sizeof(FST_BaseAreaBasementStreamingData) == 0x000058, "Wrong size on FST_BaseAreaBasementStreamingData");
static_assert(offsetof(FST_BaseAreaBasementStreamingData, UnloadFlag) == 0x000000, "Member 'FST_BaseAreaBasementStreamingData::UnloadFlag' has a wrong offset!");
static_assert(offsetof(FST_BaseAreaBasementStreamingData, gameFlagList) == 0x000008, "Member 'FST_BaseAreaBasementStreamingData::gameFlagList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BaseStreamingLevelData
// 0x0058 (0x00C8 - 0x0070)
struct FST_BaseStreamingLevelData final : public FST_StreamingLevelDataBase
{
public:
	struct FST_BaseAreaBasementStreamingData      BasementData;                                      // 0x0070(0x0058)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BaseStreamingLevelData) == 0x000008, "Wrong alignment on FST_BaseStreamingLevelData");
static_assert(sizeof(FST_BaseStreamingLevelData) == 0x0000C8, "Wrong size on FST_BaseStreamingLevelData");
static_assert(offsetof(FST_BaseStreamingLevelData, BasementData) == 0x000070, "Member 'FST_BaseStreamingLevelData::BasementData' has a wrong offset!");

// ScriptStruct DarwinGame.TargetSystemFilterSetting
// 0x0038 (0x0038 - 0x0000)
struct FTargetSystemFilterSetting final
{
public:
	float                                         SearchRadius;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchAngle;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepDistance;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalAimDistance;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialAimDistance;                                // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAngle;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAssistScreenRate;                               // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ComponentClassFilter;                              // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      TargetTypeList;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetSystemFilterSetting) == 0x000008, "Wrong alignment on FTargetSystemFilterSetting");
static_assert(sizeof(FTargetSystemFilterSetting) == 0x000038, "Wrong size on FTargetSystemFilterSetting");
static_assert(offsetof(FTargetSystemFilterSetting, SearchRadius) == 0x000000, "Member 'FTargetSystemFilterSetting::SearchRadius' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, SearchAngle) == 0x000004, "Member 'FTargetSystemFilterSetting::SearchAngle' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, KeepDistance) == 0x000008, "Member 'FTargetSystemFilterSetting::KeepDistance' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, NormalAimDistance) == 0x00000C, "Member 'FTargetSystemFilterSetting::NormalAimDistance' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, SpecialAimDistance) == 0x000010, "Member 'FTargetSystemFilterSetting::SpecialAimDistance' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, AimAngle) == 0x000014, "Member 'FTargetSystemFilterSetting::AimAngle' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, AimAssistScreenRate) == 0x000018, "Member 'FTargetSystemFilterSetting::AimAssistScreenRate' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, ComponentClassFilter) == 0x000020, "Member 'FTargetSystemFilterSetting::ComponentClassFilter' has a wrong offset!");
static_assert(offsetof(FTargetSystemFilterSetting, TargetTypeList) == 0x000028, "Member 'FTargetSystemFilterSetting::TargetTypeList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_FieldLink_Data
// 0x0038 (0x0038 - 0x0000)
struct FST_PM_DetaileWin_FieldLink_Data final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FieldLinkName;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailDesc;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_FieldLink_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_FieldLink_Data");
static_assert(sizeof(FST_PM_DetaileWin_FieldLink_Data) == 0x000038, "Wrong size on FST_PM_DetaileWin_FieldLink_Data");
static_assert(offsetof(FST_PM_DetaileWin_FieldLink_Data, Icon) == 0x000000, "Member 'FST_PM_DetaileWin_FieldLink_Data::Icon' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_FieldLink_Data, FieldLinkName) == 0x000008, "Member 'FST_PM_DetaileWin_FieldLink_Data::FieldLinkName' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_FieldLink_Data, DetailDesc) == 0x000020, "Member 'FST_PM_DetaileWin_FieldLink_Data::DetailDesc' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonSettingIDData
// 0x0050 (0x0050 - 0x0000)
struct FST_DungeonSettingIDData final
{
public:
	TMap<int32, class FName>                      DungeonSettingID;                                  // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonSettingIDData) == 0x000008, "Wrong alignment on FST_DungeonSettingIDData");
static_assert(sizeof(FST_DungeonSettingIDData) == 0x000050, "Wrong size on FST_DungeonSettingIDData");
static_assert(offsetof(FST_DungeonSettingIDData, DungeonSettingID) == 0x000000, "Member 'FST_DungeonSettingIDData::DungeonSettingID' has a wrong offset!");

// ScriptStruct DarwinGame.TimeZoneInfo
// 0x0018 (0x0020 - 0x0008)
struct FTimeZoneInfo final : public FTableRowBase
{
public:
	ETimeZoneType                                 Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartHour;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartMinute;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndHour;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMinute;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeZoneInfo) == 0x000008, "Wrong alignment on FTimeZoneInfo");
static_assert(sizeof(FTimeZoneInfo) == 0x000020, "Wrong size on FTimeZoneInfo");
static_assert(offsetof(FTimeZoneInfo, Type) == 0x000008, "Member 'FTimeZoneInfo::Type' has a wrong offset!");
static_assert(offsetof(FTimeZoneInfo, StartHour) == 0x00000C, "Member 'FTimeZoneInfo::StartHour' has a wrong offset!");
static_assert(offsetof(FTimeZoneInfo, StartMinute) == 0x000010, "Member 'FTimeZoneInfo::StartMinute' has a wrong offset!");
static_assert(offsetof(FTimeZoneInfo, EndHour) == 0x000014, "Member 'FTimeZoneInfo::EndHour' has a wrong offset!");
static_assert(offsetof(FTimeZoneInfo, EndMinute) == 0x000018, "Member 'FTimeZoneInfo::EndMinute' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingLevelDataEditorBase
// 0x0001 (0x0001 - 0x0000)
struct FST_StreamingLevelDataEditorBase
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StreamingLevelDataEditorBase) == 0x000001, "Wrong alignment on FST_StreamingLevelDataEditorBase");
static_assert(sizeof(FST_StreamingLevelDataEditorBase) == 0x000001, "Wrong size on FST_StreamingLevelDataEditorBase");

// ScriptStruct DarwinGame.ST_UIMyTeamMenuObjectData
// 0x0038 (0x0040 - 0x0008)
struct FST_UIMyTeamMenuObjectData final : public FTableRowBase
{
public:
	int32                                         teamLevel;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PanelName;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMyTeamMenuObjectData) == 0x000008, "Wrong alignment on FST_UIMyTeamMenuObjectData");
static_assert(sizeof(FST_UIMyTeamMenuObjectData) == 0x000040, "Wrong size on FST_UIMyTeamMenuObjectData");
static_assert(offsetof(FST_UIMyTeamMenuObjectData, teamLevel) == 0x000008, "Member 'FST_UIMyTeamMenuObjectData::teamLevel' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuObjectData, PanelName) == 0x00000C, "Member 'FST_UIMyTeamMenuObjectData::PanelName' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuObjectData, Texture) == 0x000018, "Member 'FST_UIMyTeamMenuObjectData::Texture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BaseStreamingLevelDataEditor
// 0x0000 (0x0001 - 0x0001)
struct FST_BaseStreamingLevelDataEditor final : public FST_StreamingLevelDataEditorBase
{
};
static_assert(alignof(FST_BaseStreamingLevelDataEditor) == 0x000001, "Wrong alignment on FST_BaseStreamingLevelDataEditor");
static_assert(sizeof(FST_BaseStreamingLevelDataEditor) == 0x000001, "Wrong size on FST_BaseStreamingLevelDataEditor");

// ScriptStruct DarwinGame.ST_MonsterSpawnPoint
// 0x0018 (0x0018 - 0x0000)
struct FST_MonsterSpawnPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterSpawnPoint) == 0x000004, "Wrong alignment on FST_MonsterSpawnPoint");
static_assert(sizeof(FST_MonsterSpawnPoint) == 0x000018, "Wrong size on FST_MonsterSpawnPoint");
static_assert(offsetof(FST_MonsterSpawnPoint, Location) == 0x000000, "Member 'FST_MonsterSpawnPoint::Location' has a wrong offset!");
static_assert(offsetof(FST_MonsterSpawnPoint, Rotation) == 0x00000C, "Member 'FST_MonsterSpawnPoint::Rotation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ParameterTypeDataTable
// 0x0028 (0x0030 - 0x0008)
struct FST_ParameterTypeDataTable final : public FTableRowBase
{
public:
	int32                                         STATUS01;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS02;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS03;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS04;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS05;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS06;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS07;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS08;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         STATUS09;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ParameterTypeDataTable) == 0x000008, "Wrong alignment on FST_ParameterTypeDataTable");
static_assert(sizeof(FST_ParameterTypeDataTable) == 0x000030, "Wrong size on FST_ParameterTypeDataTable");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS01) == 0x000008, "Member 'FST_ParameterTypeDataTable::STATUS01' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS02) == 0x00000C, "Member 'FST_ParameterTypeDataTable::STATUS02' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS03) == 0x000010, "Member 'FST_ParameterTypeDataTable::STATUS03' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS04) == 0x000014, "Member 'FST_ParameterTypeDataTable::STATUS04' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS05) == 0x000018, "Member 'FST_ParameterTypeDataTable::STATUS05' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS06) == 0x00001C, "Member 'FST_ParameterTypeDataTable::STATUS06' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS07) == 0x000020, "Member 'FST_ParameterTypeDataTable::STATUS07' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS08) == 0x000024, "Member 'FST_ParameterTypeDataTable::STATUS08' has a wrong offset!");
static_assert(offsetof(FST_ParameterTypeDataTable, STATUS09) == 0x000028, "Member 'FST_ParameterTypeDataTable::STATUS09' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BaseAreaBasementStreamingDataEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_BaseAreaBasementStreamingDataEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_BaseAreaBasementStreamingDataEditor) == 0x000001, "Wrong alignment on FST_BaseAreaBasementStreamingDataEditor");
static_assert(sizeof(FST_BaseAreaBasementStreamingDataEditor) == 0x000001, "Wrong size on FST_BaseAreaBasementStreamingDataEditor");

// ScriptStruct DarwinGame.ST_HitData
// 0x0018 (0x0018 - 0x0000)
struct FST_HitData final
{
public:
	class FName                                   HitEffectID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopFrame;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShake>               HitCameraShake;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_HitData) == 0x000008, "Wrong alignment on FST_HitData");
static_assert(sizeof(FST_HitData) == 0x000018, "Wrong size on FST_HitData");
static_assert(offsetof(FST_HitData, HitEffectID) == 0x000000, "Member 'FST_HitData::HitEffectID' has a wrong offset!");
static_assert(offsetof(FST_HitData, StopFrame) == 0x000008, "Member 'FST_HitData::StopFrame' has a wrong offset!");
static_assert(offsetof(FST_HitData, HitCameraShake) == 0x000010, "Member 'FST_HitData::HitCameraShake' has a wrong offset!");

// ScriptStruct DarwinGame.OrderQuestArtifactData
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FOrderQuestArtifactData final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrderQuestArtifactData) == 0x000004, "Wrong alignment on FOrderQuestArtifactData");
static_assert(sizeof(FOrderQuestArtifactData) == 0x000004, "Wrong size on FOrderQuestArtifactData");

// ScriptStruct DarwinGame.ST_SoftMonsterDataTable
// 0x00A0 (0x00A8 - 0x0008)
struct FST_SoftMonsterDataTable final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   ObjectPath;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              BattleMotionDataTablePath;                         // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              EcologicalMotionDataTablePath;                     // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              BattleBossMotionDataTablePath;                     // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SoftMonsterDataTable) == 0x000008, "Wrong alignment on FST_SoftMonsterDataTable");
static_assert(sizeof(FST_SoftMonsterDataTable) == 0x0000A8, "Wrong size on FST_SoftMonsterDataTable");
static_assert(offsetof(FST_SoftMonsterDataTable, ObjectPath) == 0x000008, "Member 'FST_SoftMonsterDataTable::ObjectPath' has a wrong offset!");
static_assert(offsetof(FST_SoftMonsterDataTable, BattleMotionDataTablePath) == 0x000030, "Member 'FST_SoftMonsterDataTable::BattleMotionDataTablePath' has a wrong offset!");
static_assert(offsetof(FST_SoftMonsterDataTable, EcologicalMotionDataTablePath) == 0x000058, "Member 'FST_SoftMonsterDataTable::EcologicalMotionDataTablePath' has a wrong offset!");
static_assert(offsetof(FST_SoftMonsterDataTable, BattleBossMotionDataTablePath) == 0x000080, "Member 'FST_SoftMonsterDataTable::BattleBossMotionDataTablePath' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonRoomLotteryData
// 0x0050 (0x0050 - 0x0000)
struct FST_DungeonRoomLotteryData final
{
public:
	TMap<EDungeonRoomType, int32>                 Lottery;                                           // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonRoomLotteryData) == 0x000008, "Wrong alignment on FST_DungeonRoomLotteryData");
static_assert(sizeof(FST_DungeonRoomLotteryData) == 0x000050, "Wrong size on FST_DungeonRoomLotteryData");
static_assert(offsetof(FST_DungeonRoomLotteryData, Lottery) == 0x000000, "Member 'FST_DungeonRoomLotteryData::Lottery' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonLevelLotteryData
// 0x0010 (0x0010 - 0x0000)
struct FST_DungeonLevelLotteryData final
{
public:
	TArray<struct FST_DungeonRoomLotteryData>     Level;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonLevelLotteryData) == 0x000008, "Wrong alignment on FST_DungeonLevelLotteryData");
static_assert(sizeof(FST_DungeonLevelLotteryData) == 0x000010, "Wrong size on FST_DungeonLevelLotteryData");
static_assert(offsetof(FST_DungeonLevelLotteryData, Level) == 0x000000, "Member 'FST_DungeonLevelLotteryData::Level' has a wrong offset!");

// ScriptStruct DarwinGame.ST_OptionPanelData
// 0x0020 (0x0020 - 0x0000)
struct FST_OptionPanelData final
{
public:
	class FText                                   HeaderText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EPanelType                                    PanelType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_OptionPanelData) == 0x000008, "Wrong alignment on FST_OptionPanelData");
static_assert(sizeof(FST_OptionPanelData) == 0x000020, "Wrong size on FST_OptionPanelData");
static_assert(offsetof(FST_OptionPanelData, HeaderText) == 0x000000, "Member 'FST_OptionPanelData::HeaderText' has a wrong offset!");
static_assert(offsetof(FST_OptionPanelData, PanelType) == 0x000018, "Member 'FST_OptionPanelData::PanelType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MagicDataTable
// 0x0010 (0x0018 - 0x0008)
struct FST_MagicDataTable final : public FTableRowBase
{
public:
	int32                                         MinPower;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPower;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinMagicPower;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMagicPower;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MagicDataTable) == 0x000008, "Wrong alignment on FST_MagicDataTable");
static_assert(sizeof(FST_MagicDataTable) == 0x000018, "Wrong size on FST_MagicDataTable");
static_assert(offsetof(FST_MagicDataTable, MinPower) == 0x000008, "Member 'FST_MagicDataTable::MinPower' has a wrong offset!");
static_assert(offsetof(FST_MagicDataTable, MaxPower) == 0x00000C, "Member 'FST_MagicDataTable::MaxPower' has a wrong offset!");
static_assert(offsetof(FST_MagicDataTable, MinMagicPower) == 0x000010, "Member 'FST_MagicDataTable::MinMagicPower' has a wrong offset!");
static_assert(offsetof(FST_MagicDataTable, MaxMagicPower) == 0x000014, "Member 'FST_MagicDataTable::MaxMagicPower' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BattleData
// 0x0030 (0x0030 - 0x0000)
struct FST_BattleData final
{
public:
	struct FST_SkillDataTable                     SkillData;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FST_MagicDataTable                     MagicData;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BattleData) == 0x000008, "Wrong alignment on FST_BattleData");
static_assert(sizeof(FST_BattleData) == 0x000030, "Wrong size on FST_BattleData");
static_assert(offsetof(FST_BattleData, SkillData) == 0x000000, "Member 'FST_BattleData::SkillData' has a wrong offset!");
static_assert(offsetof(FST_BattleData, MagicData) == 0x000018, "Member 'FST_BattleData::MagicData' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonAreaNameSetting
// 0x0058 (0x0058 - 0x0000)
struct FST_DungeonAreaNameSetting final
{
public:
	class FName                                   MazeAreaName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EDungeonNestType, class FName>           NestAreaName;                                      // 0x0008(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonAreaNameSetting) == 0x000008, "Wrong alignment on FST_DungeonAreaNameSetting");
static_assert(sizeof(FST_DungeonAreaNameSetting) == 0x000058, "Wrong size on FST_DungeonAreaNameSetting");
static_assert(offsetof(FST_DungeonAreaNameSetting, MazeAreaName) == 0x000000, "Member 'FST_DungeonAreaNameSetting::MazeAreaName' has a wrong offset!");
static_assert(offsetof(FST_DungeonAreaNameSetting, NestAreaName) == 0x000008, "Member 'FST_DungeonAreaNameSetting::NestAreaName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BattleMonsterParam
// 0x0010 (0x0010 - 0x0000)
struct FST_BattleMonsterParam final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaceType;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EcologicalAiType;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BattleMonsterParam) == 0x000004, "Wrong alignment on FST_BattleMonsterParam");
static_assert(sizeof(FST_BattleMonsterParam) == 0x000010, "Wrong size on FST_BattleMonsterParam");
static_assert(offsetof(FST_BattleMonsterParam, ID) == 0x000000, "Member 'FST_BattleMonsterParam::ID' has a wrong offset!");
static_assert(offsetof(FST_BattleMonsterParam, PlaceType) == 0x000004, "Member 'FST_BattleMonsterParam::PlaceType' has a wrong offset!");
static_assert(offsetof(FST_BattleMonsterParam, EcologicalAiType) == 0x000008, "Member 'FST_BattleMonsterParam::EcologicalAiType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BattleIdDataInfo
// 0x0010 (0x0018 - 0x0008)
struct FST_BattleIdDataInfo final : public FTableRowBase
{
public:
	TArray<struct FST_BattleMonsterParam>         Monsters;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BattleIdDataInfo) == 0x000008, "Wrong alignment on FST_BattleIdDataInfo");
static_assert(sizeof(FST_BattleIdDataInfo) == 0x000018, "Wrong size on FST_BattleIdDataInfo");
static_assert(offsetof(FST_BattleIdDataInfo, Monsters) == 0x000008, "Member 'FST_BattleIdDataInfo::Monsters' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonMazeHierarchyReleaseConditionData
// 0x0018 (0x0020 - 0x0008)
struct FST_DungeonMazeHierarchyReleaseConditionData final : public FTableRowBase
{
public:
	class FName                                   GameDataFlag;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClearHierarchy;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamLevel;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendNum;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonMazeHierarchyReleaseConditionData) == 0x000008, "Wrong alignment on FST_DungeonMazeHierarchyReleaseConditionData");
static_assert(sizeof(FST_DungeonMazeHierarchyReleaseConditionData) == 0x000020, "Wrong size on FST_DungeonMazeHierarchyReleaseConditionData");
static_assert(offsetof(FST_DungeonMazeHierarchyReleaseConditionData, GameDataFlag) == 0x000008, "Member 'FST_DungeonMazeHierarchyReleaseConditionData::GameDataFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonMazeHierarchyReleaseConditionData, ClearHierarchy) == 0x000010, "Member 'FST_DungeonMazeHierarchyReleaseConditionData::ClearHierarchy' has a wrong offset!");
static_assert(offsetof(FST_DungeonMazeHierarchyReleaseConditionData, teamLevel) == 0x000014, "Member 'FST_DungeonMazeHierarchyReleaseConditionData::teamLevel' has a wrong offset!");
static_assert(offsetof(FST_DungeonMazeHierarchyReleaseConditionData, FriendNum) == 0x000018, "Member 'FST_DungeonMazeHierarchyReleaseConditionData::FriendNum' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PhysicalAttackData
// 0x001C (0x001C - 0x0000)
struct FST_PhysicalAttackData final
{
public:
	bool                                          bCanceledWhenLand;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigidTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootScale;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoCorrection;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootValue;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PhysicalAttackData) == 0x000004, "Wrong alignment on FST_PhysicalAttackData");
static_assert(sizeof(FST_PhysicalAttackData) == 0x00001C, "Wrong size on FST_PhysicalAttackData");
static_assert(offsetof(FST_PhysicalAttackData, bCanceledWhenLand) == 0x000000, "Member 'FST_PhysicalAttackData::bCanceledWhenLand' has a wrong offset!");
static_assert(offsetof(FST_PhysicalAttackData, RigidTime) == 0x000004, "Member 'FST_PhysicalAttackData::RigidTime' has a wrong offset!");
static_assert(offsetof(FST_PhysicalAttackData, RootScale) == 0x000008, "Member 'FST_PhysicalAttackData::RootScale' has a wrong offset!");
static_assert(offsetof(FST_PhysicalAttackData, bDoCorrection) == 0x00000C, "Member 'FST_PhysicalAttackData::bDoCorrection' has a wrong offset!");
static_assert(offsetof(FST_PhysicalAttackData, RootValue) == 0x000010, "Member 'FST_PhysicalAttackData::RootValue' has a wrong offset!");
static_assert(offsetof(FST_PhysicalAttackData, Distance) == 0x000014, "Member 'FST_PhysicalAttackData::Distance' has a wrong offset!");
static_assert(offsetof(FST_PhysicalAttackData, Height) == 0x000018, "Member 'FST_PhysicalAttackData::Height' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MagicalAttackData
// 0x0010 (0x0010 - 0x0000)
struct FST_MagicalAttackData final
{
public:
	TSubclassOf<class AMagicBase>                 MagicClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       socket;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MagicalAttackData) == 0x000008, "Wrong alignment on FST_MagicalAttackData");
static_assert(sizeof(FST_MagicalAttackData) == 0x000010, "Wrong size on FST_MagicalAttackData");
static_assert(offsetof(FST_MagicalAttackData, MagicClass) == 0x000000, "Member 'FST_MagicalAttackData::MagicClass' has a wrong offset!");
static_assert(offsetof(FST_MagicalAttackData, socket) == 0x000008, "Member 'FST_MagicalAttackData::socket' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BattleMotionData
// 0x0078 (0x0080 - 0x0008)
struct FST_BattleMotionData final : public FTableRowBase
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceToPlay;                               // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeOfLevelSequenceToPlay;                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnd;                               // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlying;                                           // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootScale;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultForward;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultUp;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_PhysicalAttackData                 PhysicalAttackData;                                // 0x0050(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_MagicalAttackData                  MagicalAttackData;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BattleMotionData) == 0x000008, "Wrong alignment on FST_BattleMotionData");
static_assert(sizeof(FST_BattleMotionData) == 0x000080, "Wrong size on FST_BattleMotionData");
static_assert(offsetof(FST_BattleMotionData, MontageToPlay) == 0x000008, "Member 'FST_BattleMotionData::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, LevelSequenceToPlay) == 0x000010, "Member 'FST_BattleMotionData::LevelSequenceToPlay' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, BlendTimeOfLevelSequenceToPlay) == 0x000038, "Member 'FST_BattleMotionData::BlendTimeOfLevelSequenceToPlay' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, bStopWhenAbilityEnd) == 0x00003C, "Member 'FST_BattleMotionData::bStopWhenAbilityEnd' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, bFlying) == 0x00003D, "Member 'FST_BattleMotionData::bFlying' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, RootScale) == 0x000040, "Member 'FST_BattleMotionData::RootScale' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, Height) == 0x000044, "Member 'FST_BattleMotionData::Height' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, DefaultForward) == 0x000048, "Member 'FST_BattleMotionData::DefaultForward' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, DefaultUp) == 0x00004C, "Member 'FST_BattleMotionData::DefaultUp' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, PhysicalAttackData) == 0x000050, "Member 'FST_BattleMotionData::PhysicalAttackData' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionData, MagicalAttackData) == 0x000070, "Member 'FST_BattleMotionData::MagicalAttackData' has a wrong offset!");

// ScriptStruct DarwinGame.StunDamageParam
// 0x0014 (0x0014 - 0x0000)
struct FStunDamageParam final
{
public:
	class FName                                   actionDetailID;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResistID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunValueBase;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStunDamageParam) == 0x000004, "Wrong alignment on FStunDamageParam");
static_assert(sizeof(FStunDamageParam) == 0x000014, "Wrong size on FStunDamageParam");
static_assert(offsetof(FStunDamageParam, actionDetailID) == 0x000000, "Member 'FStunDamageParam::actionDetailID' has a wrong offset!");
static_assert(offsetof(FStunDamageParam, ResistID) == 0x000008, "Member 'FStunDamageParam::ResistID' has a wrong offset!");
static_assert(offsetof(FStunDamageParam, StunValueBase) == 0x000010, "Member 'FStunDamageParam::StunValueBase' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonlLightingLevelListEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_DungeonlLightingLevelListEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonlLightingLevelListEditor) == 0x000001, "Wrong alignment on FST_DungeonlLightingLevelListEditor");
static_assert(sizeof(FST_DungeonlLightingLevelListEditor) == 0x000001, "Wrong size on FST_DungeonlLightingLevelListEditor");

// ScriptStruct DarwinGame.ST_MonsterIconTextures
// 0x0020 (0x0020 - 0x0000)
struct FST_MonsterIconTextures final
{
public:
	class UTexture2D*                             Base;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Parts1;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Parts2;                                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Parts3;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterIconTextures) == 0x000008, "Wrong alignment on FST_MonsterIconTextures");
static_assert(sizeof(FST_MonsterIconTextures) == 0x000020, "Wrong size on FST_MonsterIconTextures");
static_assert(offsetof(FST_MonsterIconTextures, Base) == 0x000000, "Member 'FST_MonsterIconTextures::Base' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconTextures, Parts1) == 0x000008, "Member 'FST_MonsterIconTextures::Parts1' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconTextures, Parts2) == 0x000010, "Member 'FST_MonsterIconTextures::Parts2' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconTextures, Parts3) == 0x000018, "Member 'FST_MonsterIconTextures::Parts3' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DashAttackData
// 0x0010 (0x0010 - 0x0000)
struct FST_DashAttackData final
{
public:
	bool                                          bCanDash;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeleeDistance;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashDistance;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardDashDistance;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DashAttackData) == 0x000004, "Wrong alignment on FST_DashAttackData");
static_assert(sizeof(FST_DashAttackData) == 0x000010, "Wrong size on FST_DashAttackData");
static_assert(offsetof(FST_DashAttackData, bCanDash) == 0x000000, "Member 'FST_DashAttackData::bCanDash' has a wrong offset!");
static_assert(offsetof(FST_DashAttackData, MeleeDistance) == 0x000004, "Member 'FST_DashAttackData::MeleeDistance' has a wrong offset!");
static_assert(offsetof(FST_DashAttackData, DashDistance) == 0x000008, "Member 'FST_DashAttackData::DashDistance' has a wrong offset!");
static_assert(offsetof(FST_DashAttackData, HardDashDistance) == 0x00000C, "Member 'FST_DashAttackData::HardDashDistance' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BattleMotionDataList
// 0x0018 (0x0020 - 0x0008)
struct FST_BattleMotionDataList final : public FTableRowBase
{
public:
	class UDataTable*                             BattleMotionDataList;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_DashAttackData                     DashData;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BattleMotionDataList) == 0x000008, "Wrong alignment on FST_BattleMotionDataList");
static_assert(sizeof(FST_BattleMotionDataList) == 0x000020, "Wrong size on FST_BattleMotionDataList");
static_assert(offsetof(FST_BattleMotionDataList, BattleMotionDataList) == 0x000008, "Member 'FST_BattleMotionDataList::BattleMotionDataList' has a wrong offset!");
static_assert(offsetof(FST_BattleMotionDataList, DashData) == 0x000010, "Member 'FST_BattleMotionDataList::DashData' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonRoomLotteryDataTable
// 0x0018 (0x0020 - 0x0008)
struct FST_DungeonRoomLotteryDataTable final : public FTableRowBase
{
public:
	EDungeonRoomType                              RoomType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Lottery;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonRoomLotteryDataTable) == 0x000008, "Wrong alignment on FST_DungeonRoomLotteryDataTable");
static_assert(sizeof(FST_DungeonRoomLotteryDataTable) == 0x000020, "Wrong size on FST_DungeonRoomLotteryDataTable");
static_assert(offsetof(FST_DungeonRoomLotteryDataTable, RoomType) == 0x000008, "Member 'FST_DungeonRoomLotteryDataTable::RoomType' has a wrong offset!");
static_assert(offsetof(FST_DungeonRoomLotteryDataTable, Lottery) == 0x000010, "Member 'FST_DungeonRoomLotteryDataTable::Lottery' has a wrong offset!");

// ScriptStruct DarwinGame.CustomEquipmentType
// 0x0010 (0x0010 - 0x0000)
struct FCustomEquipmentType final
{
public:
	ECustomEquipmentKind                          CustomKind;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecialResourceId;                                 // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdditionalEquipment;                               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdditionalMaterial;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomEquipmentType) == 0x000004, "Wrong alignment on FCustomEquipmentType");
static_assert(sizeof(FCustomEquipmentType) == 0x000010, "Wrong size on FCustomEquipmentType");
static_assert(offsetof(FCustomEquipmentType, CustomKind) == 0x000000, "Member 'FCustomEquipmentType::CustomKind' has a wrong offset!");
static_assert(offsetof(FCustomEquipmentType, SpecialResourceId) == 0x000004, "Member 'FCustomEquipmentType::SpecialResourceId' has a wrong offset!");
static_assert(offsetof(FCustomEquipmentType, AdditionalEquipment) == 0x00000C, "Member 'FCustomEquipmentType::AdditionalEquipment' has a wrong offset!");
static_assert(offsetof(FCustomEquipmentType, AdditionalMaterial) == 0x00000D, "Member 'FCustomEquipmentType::AdditionalMaterial' has a wrong offset!");

// ScriptStruct DarwinGame.NPCInfoData
// 0x0078 (0x0080 - 0x0008)
struct FNPCInfoData final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NickName1;                                         // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NickName2;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ENpcSeType                                    SeType;                                            // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AppearanceID;                                      // 0x0054(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AiSettingID;                                       // 0x005C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartVoiceType;                                     // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomEquipmentType                   EquipmentInfo;                                     // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ERivalTeamForce                               RivalTeamForce;                                    // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeader;                                         // 0x0079(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNPCInfoData) == 0x000008, "Wrong alignment on FNPCInfoData");
static_assert(sizeof(FNPCInfoData) == 0x000080, "Wrong size on FNPCInfoData");
static_assert(offsetof(FNPCInfoData, DisplayName) == 0x000008, "Member 'FNPCInfoData::DisplayName' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, NickName1) == 0x000020, "Member 'FNPCInfoData::NickName1' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, NickName2) == 0x000038, "Member 'FNPCInfoData::NickName2' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, SeType) == 0x000050, "Member 'FNPCInfoData::SeType' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, AppearanceID) == 0x000054, "Member 'FNPCInfoData::AppearanceID' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, AiSettingID) == 0x00005C, "Member 'FNPCInfoData::AiSettingID' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, PartVoiceType) == 0x000064, "Member 'FNPCInfoData::PartVoiceType' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, EquipmentInfo) == 0x000068, "Member 'FNPCInfoData::EquipmentInfo' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, RivalTeamForce) == 0x000078, "Member 'FNPCInfoData::RivalTeamForce' has a wrong offset!");
static_assert(offsetof(FNPCInfoData, bIsLeader) == 0x000079, "Member 'FNPCInfoData::bIsLeader' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AttackData
// 0x0020 (0x0028 - 0x0008)
struct FST_AttackData final : public FTableRowBase
{
public:
	EDamageReactionType                           Reaction;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DodgeRevision;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlowRevision;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunValue;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPower;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPower;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMagic;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMagic;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_AttackData) == 0x000008, "Wrong alignment on FST_AttackData");
static_assert(sizeof(FST_AttackData) == 0x000028, "Wrong size on FST_AttackData");
static_assert(offsetof(FST_AttackData, Reaction) == 0x000008, "Member 'FST_AttackData::Reaction' has a wrong offset!");
static_assert(offsetof(FST_AttackData, DodgeRevision) == 0x00000C, "Member 'FST_AttackData::DodgeRevision' has a wrong offset!");
static_assert(offsetof(FST_AttackData, BlowRevision) == 0x000010, "Member 'FST_AttackData::BlowRevision' has a wrong offset!");
static_assert(offsetof(FST_AttackData, StunValue) == 0x000014, "Member 'FST_AttackData::StunValue' has a wrong offset!");
static_assert(offsetof(FST_AttackData, MinPower) == 0x000018, "Member 'FST_AttackData::MinPower' has a wrong offset!");
static_assert(offsetof(FST_AttackData, MaxPower) == 0x00001C, "Member 'FST_AttackData::MaxPower' has a wrong offset!");
static_assert(offsetof(FST_AttackData, MinMagic) == 0x000020, "Member 'FST_AttackData::MinMagic' has a wrong offset!");
static_assert(offsetof(FST_AttackData, MaxMagic) == 0x000024, "Member 'FST_AttackData::MaxMagic' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NetworkMenuCategory
// 0x0030 (0x0030 - 0x0000)
struct FST_NetworkMenuCategory final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   HubMessageKey;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisable;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NetworkMenuCategory) == 0x000008, "Wrong alignment on FST_NetworkMenuCategory");
static_assert(sizeof(FST_NetworkMenuCategory) == 0x000030, "Wrong size on FST_NetworkMenuCategory");
static_assert(offsetof(FST_NetworkMenuCategory, Icon) == 0x000000, "Member 'FST_NetworkMenuCategory::Icon' has a wrong offset!");
static_assert(offsetof(FST_NetworkMenuCategory, Name) == 0x000008, "Member 'FST_NetworkMenuCategory::Name' has a wrong offset!");
static_assert(offsetof(FST_NetworkMenuCategory, HubMessageKey) == 0x000020, "Member 'FST_NetworkMenuCategory::HubMessageKey' has a wrong offset!");
static_assert(offsetof(FST_NetworkMenuCategory, bIsDisable) == 0x000028, "Member 'FST_NetworkMenuCategory::bIsDisable' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonEventEffectProbabilityData
// 0x0030 (0x0038 - 0x0008)
struct FST_DungeonEventEffectProbabilityData final : public FTableRowBase
{
public:
	int32                                         Miasma;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nightmare;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         anger;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dazzle;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seal;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackForce;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicForce;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlazeForce;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreezeForce;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StormForce;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroundForce;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HolyForce;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonEventEffectProbabilityData) == 0x000008, "Wrong alignment on FST_DungeonEventEffectProbabilityData");
static_assert(sizeof(FST_DungeonEventEffectProbabilityData) == 0x000038, "Wrong size on FST_DungeonEventEffectProbabilityData");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, Miasma) == 0x000008, "Member 'FST_DungeonEventEffectProbabilityData::Miasma' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, Nightmare) == 0x00000C, "Member 'FST_DungeonEventEffectProbabilityData::Nightmare' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, anger) == 0x000010, "Member 'FST_DungeonEventEffectProbabilityData::anger' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, Dazzle) == 0x000014, "Member 'FST_DungeonEventEffectProbabilityData::Dazzle' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, Seal) == 0x000018, "Member 'FST_DungeonEventEffectProbabilityData::Seal' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, AttackForce) == 0x00001C, "Member 'FST_DungeonEventEffectProbabilityData::AttackForce' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, MagicForce) == 0x000020, "Member 'FST_DungeonEventEffectProbabilityData::MagicForce' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, BlazeForce) == 0x000024, "Member 'FST_DungeonEventEffectProbabilityData::BlazeForce' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, FreezeForce) == 0x000028, "Member 'FST_DungeonEventEffectProbabilityData::FreezeForce' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, StormForce) == 0x00002C, "Member 'FST_DungeonEventEffectProbabilityData::StormForce' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, GroundForce) == 0x000030, "Member 'FST_DungeonEventEffectProbabilityData::GroundForce' has a wrong offset!");
static_assert(offsetof(FST_DungeonEventEffectProbabilityData, HolyForce) == 0x000034, "Member 'FST_DungeonEventEffectProbabilityData::HolyForce' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TipsManagement
// 0x0068 (0x0070 - 0x0008)
struct FST_TipsManagement final : public FTableRowBase
{
public:
	class FName                                   TipsName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNumber;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TipsTitle;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TipsText;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TipsImage;                                         // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TipsManagement) == 0x000008, "Wrong alignment on FST_TipsManagement");
static_assert(sizeof(FST_TipsManagement) == 0x000070, "Wrong size on FST_TipsManagement");
static_assert(offsetof(FST_TipsManagement, TipsName) == 0x000008, "Member 'FST_TipsManagement::TipsName' has a wrong offset!");
static_assert(offsetof(FST_TipsManagement, PageNumber) == 0x000010, "Member 'FST_TipsManagement::PageNumber' has a wrong offset!");
static_assert(offsetof(FST_TipsManagement, TipsTitle) == 0x000018, "Member 'FST_TipsManagement::TipsTitle' has a wrong offset!");
static_assert(offsetof(FST_TipsManagement, TipsText) == 0x000030, "Member 'FST_TipsManagement::TipsText' has a wrong offset!");
static_assert(offsetof(FST_TipsManagement, TipsImage) == 0x000048, "Member 'FST_TipsManagement::TipsImage' has a wrong offset!");

// ScriptStruct DarwinGame.BattleParameterEffectBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBattleParameterEffectBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleParameterEffectBase) == 0x000008, "Wrong alignment on FBattleParameterEffectBase");
static_assert(sizeof(FBattleParameterEffectBase) == 0x000010, "Wrong size on FBattleParameterEffectBase");

// ScriptStruct DarwinGame.ST_BGMFlagPairDataEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_BGMFlagPairDataEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_BGMFlagPairDataEditor) == 0x000001, "Wrong alignment on FST_BGMFlagPairDataEditor");
static_assert(sizeof(FST_BGMFlagPairDataEditor) == 0x000001, "Wrong size on FST_BGMFlagPairDataEditor");

// ScriptStruct DarwinGame.ST_NPCEmoteData
// 0x0020 (0x0028 - 0x0008)
struct FST_NPCEmoteData final : public FTableRowBase
{
public:
	int32                                         Idle;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurnRight;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TurnLeft;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Talk;                                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExAction;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sleep;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stand2;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NPCEmoteData) == 0x000008, "Wrong alignment on FST_NPCEmoteData");
static_assert(sizeof(FST_NPCEmoteData) == 0x000028, "Wrong size on FST_NPCEmoteData");
static_assert(offsetof(FST_NPCEmoteData, Idle) == 0x000008, "Member 'FST_NPCEmoteData::Idle' has a wrong offset!");
static_assert(offsetof(FST_NPCEmoteData, TurnRight) == 0x00000C, "Member 'FST_NPCEmoteData::TurnRight' has a wrong offset!");
static_assert(offsetof(FST_NPCEmoteData, TurnLeft) == 0x000010, "Member 'FST_NPCEmoteData::TurnLeft' has a wrong offset!");
static_assert(offsetof(FST_NPCEmoteData, Talk) == 0x000014, "Member 'FST_NPCEmoteData::Talk' has a wrong offset!");
static_assert(offsetof(FST_NPCEmoteData, ExAction) == 0x000018, "Member 'FST_NPCEmoteData::ExAction' has a wrong offset!");
static_assert(offsetof(FST_NPCEmoteData, sleep) == 0x00001C, "Member 'FST_NPCEmoteData::sleep' has a wrong offset!");
static_assert(offsetof(FST_NPCEmoteData, Stand2) == 0x000020, "Member 'FST_NPCEmoteData::Stand2' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ColorTagTableItem
// 0x0010 (0x0018 - 0x0008)
struct FST_ColorTagTableItem final : public FTableRowBase
{
public:
	float                                         R;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ColorTagTableItem) == 0x000008, "Wrong alignment on FST_ColorTagTableItem");
static_assert(sizeof(FST_ColorTagTableItem) == 0x000018, "Wrong size on FST_ColorTagTableItem");
static_assert(offsetof(FST_ColorTagTableItem, R) == 0x000008, "Member 'FST_ColorTagTableItem::R' has a wrong offset!");
static_assert(offsetof(FST_ColorTagTableItem, G) == 0x00000C, "Member 'FST_ColorTagTableItem::G' has a wrong offset!");
static_assert(offsetof(FST_ColorTagTableItem, B) == 0x000010, "Member 'FST_ColorTagTableItem::B' has a wrong offset!");
static_assert(offsetof(FST_ColorTagTableItem, A) == 0x000014, "Member 'FST_ColorTagTableItem::A' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonStreamingLevelDataEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_DungeonStreamingLevelDataEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonStreamingLevelDataEditor) == 0x000001, "Wrong alignment on FST_DungeonStreamingLevelDataEditor");
static_assert(sizeof(FST_DungeonStreamingLevelDataEditor) == 0x000001, "Wrong size on FST_DungeonStreamingLevelDataEditor");

// ScriptStruct DarwinGame.ST_BGMRegionSettingData
// 0x00A0 (0x00A0 - 0x0000)
struct FST_BGMRegionSettingData final
{
public:
	TMap<class FName, class FName>                BGMFlagList;                                       // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, struct FST_BGMAreaSettingData> AreaDataList;                                      // 0x0050(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BGMRegionSettingData) == 0x000008, "Wrong alignment on FST_BGMRegionSettingData");
static_assert(sizeof(FST_BGMRegionSettingData) == 0x0000A0, "Wrong size on FST_BGMRegionSettingData");
static_assert(offsetof(FST_BGMRegionSettingData, BGMFlagList) == 0x000000, "Member 'FST_BGMRegionSettingData::BGMFlagList' has a wrong offset!");
static_assert(offsetof(FST_BGMRegionSettingData, AreaDataList) == 0x000050, "Member 'FST_BGMRegionSettingData::AreaDataList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalWaitRateInfo
// 0x000C (0x000C - 0x0000)
struct FST_EcologicalWaitRateInfo final
{
public:
	class FName                                   WaitID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EcologicalWaitRateInfo) == 0x000004, "Wrong alignment on FST_EcologicalWaitRateInfo");
static_assert(sizeof(FST_EcologicalWaitRateInfo) == 0x00000C, "Wrong size on FST_EcologicalWaitRateInfo");
static_assert(offsetof(FST_EcologicalWaitRateInfo, WaitID) == 0x000000, "Member 'FST_EcologicalWaitRateInfo::WaitID' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitRateInfo, Rate) == 0x000008, "Member 'FST_EcologicalWaitRateInfo::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BoardMonsterRank
// 0x0050 (0x0058 - 0x0008)
struct FST_BoardMonsterRank final : public FTableRowBase
{
public:
	TMap<int32, int32>                            ValueMap;                                          // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BoardMonsterRank) == 0x000008, "Wrong alignment on FST_BoardMonsterRank");
static_assert(sizeof(FST_BoardMonsterRank) == 0x000058, "Wrong size on FST_BoardMonsterRank");
static_assert(offsetof(FST_BoardMonsterRank, ValueMap) == 0x000008, "Member 'FST_BoardMonsterRank::ValueMap' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonTreasureBoxSetting
// 0x0008 (0x0010 - 0x0008)
struct FST_DungeonTreasureBoxSetting final : public FTableRowBase
{
public:
	int32                                         LevelCorrection;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonTreasureBoxSetting) == 0x000008, "Wrong alignment on FST_DungeonTreasureBoxSetting");
static_assert(sizeof(FST_DungeonTreasureBoxSetting) == 0x000010, "Wrong size on FST_DungeonTreasureBoxSetting");
static_assert(offsetof(FST_DungeonTreasureBoxSetting, LevelCorrection) == 0x000008, "Member 'FST_DungeonTreasureBoxSetting::LevelCorrection' has a wrong offset!");
static_assert(offsetof(FST_DungeonTreasureBoxSetting, CoinNum) == 0x00000C, "Member 'FST_DungeonTreasureBoxSetting::CoinNum' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonTreasureBoxRoomSetting
// 0x0018 (0x0018 - 0x0000)
struct FST_DungeonTreasureBoxRoomSetting final
{
public:
	TArray<struct FST_DungeonTreasureBoxSetting>  TreasureBoxSetting;                                // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LotteryNum;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonTreasureBoxRoomSetting) == 0x000008, "Wrong alignment on FST_DungeonTreasureBoxRoomSetting");
static_assert(sizeof(FST_DungeonTreasureBoxRoomSetting) == 0x000018, "Wrong size on FST_DungeonTreasureBoxRoomSetting");
static_assert(offsetof(FST_DungeonTreasureBoxRoomSetting, TreasureBoxSetting) == 0x000000, "Member 'FST_DungeonTreasureBoxRoomSetting::TreasureBoxSetting' has a wrong offset!");
static_assert(offsetof(FST_DungeonTreasureBoxRoomSetting, LotteryNum) == 0x000010, "Member 'FST_DungeonTreasureBoxRoomSetting::LotteryNum' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AnimationDataTable
// 0x0058 (0x0060 - 0x0008)
struct FST_AnimationDataTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimClass;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOfHip;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOfNeck;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_AnimationDataTable) == 0x000008, "Wrong alignment on FST_AnimationDataTable");
static_assert(sizeof(FST_AnimationDataTable) == 0x000060, "Wrong size on FST_AnimationDataTable");
static_assert(offsetof(FST_AnimationDataTable, Mesh) == 0x000008, "Member 'FST_AnimationDataTable::Mesh' has a wrong offset!");
static_assert(offsetof(FST_AnimationDataTable, AnimClass) == 0x000030, "Member 'FST_AnimationDataTable::AnimClass' has a wrong offset!");
static_assert(offsetof(FST_AnimationDataTable, RangeOfHip) == 0x000058, "Member 'FST_AnimationDataTable::RangeOfHip' has a wrong offset!");
static_assert(offsetof(FST_AnimationDataTable, RangeOfNeck) == 0x00005C, "Member 'FST_AnimationDataTable::RangeOfNeck' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BoardSceneData
// 0x0028 (0x0030 - 0x0008)
struct FST_BoardSceneData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class ULevelSequence>          Scene;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BoardSceneData) == 0x000008, "Wrong alignment on FST_BoardSceneData");
static_assert(sizeof(FST_BoardSceneData) == 0x000030, "Wrong size on FST_BoardSceneData");
static_assert(offsetof(FST_BoardSceneData, Scene) == 0x000008, "Member 'FST_BoardSceneData::Scene' has a wrong offset!");

// ScriptStruct DarwinGame.WeatherSound
// 0x0018 (0x0020 - 0x0008)
struct FWeatherSound final : public FTableRowBase
{
public:
	EEnvironmentType                              EnvType;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CueName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherSound) == 0x000008, "Wrong alignment on FWeatherSound");
static_assert(sizeof(FWeatherSound) == 0x000020, "Wrong size on FWeatherSound");
static_assert(offsetof(FWeatherSound, EnvType) == 0x000008, "Member 'FWeatherSound::EnvType' has a wrong offset!");
static_assert(offsetof(FWeatherSound, CueName) == 0x000010, "Member 'FWeatherSound::CueName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Bonfire
// 0x0020 (0x0028 - 0x0008)
struct FST_Bonfire final : public FTableRowBase
{
public:
	class FName                                   AreaID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefIgnition;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BigStarScarID;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StationID;                                         // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Bonfire) == 0x000008, "Wrong alignment on FST_Bonfire");
static_assert(sizeof(FST_Bonfire) == 0x000028, "Wrong size on FST_Bonfire");
static_assert(offsetof(FST_Bonfire, AreaID) == 0x000008, "Member 'FST_Bonfire::AreaID' has a wrong offset!");
static_assert(offsetof(FST_Bonfire, IsDefIgnition) == 0x000010, "Member 'FST_Bonfire::IsDefIgnition' has a wrong offset!");
static_assert(offsetof(FST_Bonfire, BigStarScarID) == 0x000014, "Member 'FST_Bonfire::BigStarScarID' has a wrong offset!");
static_assert(offsetof(FST_Bonfire, StationID) == 0x00001C, "Member 'FST_Bonfire::StationID' has a wrong offset!");
static_assert(offsetof(FST_Bonfire, Size) == 0x000024, "Member 'FST_Bonfire::Size' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonRoomLevelList
// 0x0018 (0x0018 - 0x0000)
struct FST_DungeonRoomLevelList final
{
public:
	EAreaType                                     AreaType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLastLayer;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStrong;                                          // 0x0002(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelList;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonRoomLevelList) == 0x000008, "Wrong alignment on FST_DungeonRoomLevelList");
static_assert(sizeof(FST_DungeonRoomLevelList) == 0x000018, "Wrong size on FST_DungeonRoomLevelList");
static_assert(offsetof(FST_DungeonRoomLevelList, AreaType) == 0x000000, "Member 'FST_DungeonRoomLevelList::AreaType' has a wrong offset!");
static_assert(offsetof(FST_DungeonRoomLevelList, IsLastLayer) == 0x000001, "Member 'FST_DungeonRoomLevelList::IsLastLayer' has a wrong offset!");
static_assert(offsetof(FST_DungeonRoomLevelList, IsStrong) == 0x000002, "Member 'FST_DungeonRoomLevelList::IsStrong' has a wrong offset!");
static_assert(offsetof(FST_DungeonRoomLevelList, LevelList) == 0x000008, "Member 'FST_DungeonRoomLevelList::LevelList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonStreamingLevelData
// 0x00B0 (0x00B0 - 0x0000)
struct FST_DungeonStreamingLevelData final
{
public:
	TMap<EMonsterBossForm, struct FST_StreamingLevelList> mBossRoomList;                                     // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FST_DungeonRoomLevelList>       mRoomList;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EDungeonRoomType, struct FST_StreamingLevelList> mGimmickList;                                      // 0x0060(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonStreamingLevelData) == 0x000008, "Wrong alignment on FST_DungeonStreamingLevelData");
static_assert(sizeof(FST_DungeonStreamingLevelData) == 0x0000B0, "Wrong size on FST_DungeonStreamingLevelData");
static_assert(offsetof(FST_DungeonStreamingLevelData, mBossRoomList) == 0x000000, "Member 'FST_DungeonStreamingLevelData::mBossRoomList' has a wrong offset!");
static_assert(offsetof(FST_DungeonStreamingLevelData, mRoomList) == 0x000050, "Member 'FST_DungeonStreamingLevelData::mRoomList' has a wrong offset!");
static_assert(offsetof(FST_DungeonStreamingLevelData, mGimmickList) == 0x000060, "Member 'FST_DungeonStreamingLevelData::mGimmickList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterActionInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_BossMonsterActionInfo final
{
public:
	float                                         CycleMin;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CycleMax;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionListID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterActionInfo) == 0x000004, "Wrong alignment on FST_BossMonsterActionInfo");
static_assert(sizeof(FST_BossMonsterActionInfo) == 0x000010, "Wrong size on FST_BossMonsterActionInfo");
static_assert(offsetof(FST_BossMonsterActionInfo, CycleMin) == 0x000000, "Member 'FST_BossMonsterActionInfo::CycleMin' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionInfo, CycleMax) == 0x000004, "Member 'FST_BossMonsterActionInfo::CycleMax' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionInfo, ActionListID) == 0x000008, "Member 'FST_BossMonsterActionInfo::ActionListID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterParameterDataInfo
// 0x00F0 (0x00F8 - 0x0008)
struct FST_BossMonsterParameterDataInfo final : public FTableRowBase
{
public:
	EMonsterBossType                              BossType;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossForm                              BossForm;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossDerived                           BossDerived;                                       // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PhRatio;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 StagePrd;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 RevMin;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 RevMax;                                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevHP;                                             // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FaintedAction;                                     // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimePoint;                                         // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathblowMax;                                      // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BstPointMin;                                       // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BstPointMax;                                       // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attenuation;                                       // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ChangeBody;                                        // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SightAng;                                          // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AreaRad;                                           // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SightHM;                                           // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 DisHM;                                             // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadiusCoefficient;                          // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SequenceIDs;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_BossMonsterActionInfo>      DeathBlowIDs;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterParameterDataInfo) == 0x000008, "Wrong alignment on FST_BossMonsterParameterDataInfo");
static_assert(sizeof(FST_BossMonsterParameterDataInfo) == 0x0000F8, "Wrong size on FST_BossMonsterParameterDataInfo");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, BossType) == 0x000008, "Member 'FST_BossMonsterParameterDataInfo::BossType' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, BossForm) == 0x000009, "Member 'FST_BossMonsterParameterDataInfo::BossForm' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, BossDerived) == 0x00000A, "Member 'FST_BossMonsterParameterDataInfo::BossDerived' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, PhRatio) == 0x000010, "Member 'FST_BossMonsterParameterDataInfo::PhRatio' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, StagePrd) == 0x000020, "Member 'FST_BossMonsterParameterDataInfo::StagePrd' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, RevMin) == 0x000030, "Member 'FST_BossMonsterParameterDataInfo::RevMin' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, RevMax) == 0x000040, "Member 'FST_BossMonsterParameterDataInfo::RevMax' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, RevHP) == 0x000050, "Member 'FST_BossMonsterParameterDataInfo::RevHP' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, FaintedAction) == 0x000058, "Member 'FST_BossMonsterParameterDataInfo::FaintedAction' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, TimePoint) == 0x000068, "Member 'FST_BossMonsterParameterDataInfo::TimePoint' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, DeathblowMax) == 0x00006C, "Member 'FST_BossMonsterParameterDataInfo::DeathblowMax' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, BstPointMin) == 0x000070, "Member 'FST_BossMonsterParameterDataInfo::BstPointMin' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, BstPointMax) == 0x000074, "Member 'FST_BossMonsterParameterDataInfo::BstPointMax' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, Attenuation) == 0x000078, "Member 'FST_BossMonsterParameterDataInfo::Attenuation' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, ChangeBody) == 0x000080, "Member 'FST_BossMonsterParameterDataInfo::ChangeBody' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, SightAng) == 0x000090, "Member 'FST_BossMonsterParameterDataInfo::SightAng' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, AreaRad) == 0x0000A0, "Member 'FST_BossMonsterParameterDataInfo::AreaRad' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, SightHM) == 0x0000B0, "Member 'FST_BossMonsterParameterDataInfo::SightHM' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, DisHM) == 0x0000C0, "Member 'FST_BossMonsterParameterDataInfo::DisHM' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, CapsuleRadiusCoefficient) == 0x0000D0, "Member 'FST_BossMonsterParameterDataInfo::CapsuleRadiusCoefficient' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, SequenceIDs) == 0x0000D8, "Member 'FST_BossMonsterParameterDataInfo::SequenceIDs' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterParameterDataInfo, DeathBlowIDs) == 0x0000E8, "Member 'FST_BossMonsterParameterDataInfo::DeathBlowIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ProgressAreaBgmParameter
// 0x0028 (0x0030 - 0x0008)
struct FProgressAreaBgmParameter final : public FTableRowBase
{
public:
	class FName                                   FlagName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BgmID;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBgmChangeNight;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Comment;                                           // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProgressAreaBgmParameter) == 0x000008, "Wrong alignment on FProgressAreaBgmParameter");
static_assert(sizeof(FProgressAreaBgmParameter) == 0x000030, "Wrong size on FProgressAreaBgmParameter");
static_assert(offsetof(FProgressAreaBgmParameter, FlagName) == 0x000008, "Member 'FProgressAreaBgmParameter::FlagName' has a wrong offset!");
static_assert(offsetof(FProgressAreaBgmParameter, BgmID) == 0x000010, "Member 'FProgressAreaBgmParameter::BgmID' has a wrong offset!");
static_assert(offsetof(FProgressAreaBgmParameter, IsBgmChangeNight) == 0x000020, "Member 'FProgressAreaBgmParameter::IsBgmChangeNight' has a wrong offset!");
static_assert(offsetof(FProgressAreaBgmParameter, Comment) == 0x000024, "Member 'FProgressAreaBgmParameter::Comment' has a wrong offset!");

// ScriptStruct DarwinGame.AreaBgmInfo
// 0x0048 (0x0050 - 0x0008)
struct FAreaBgmInfo final : public FTableRowBase
{
public:
	class FName                                   Comment;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBgmChangeNight;                                  // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BgmID_Default;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProgressAreaBgmParameter>      BgmID_Progess;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BgmID_Safe;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAreaBgmInfo) == 0x000008, "Wrong alignment on FAreaBgmInfo");
static_assert(sizeof(FAreaBgmInfo) == 0x000050, "Wrong size on FAreaBgmInfo");
static_assert(offsetof(FAreaBgmInfo, Comment) == 0x000008, "Member 'FAreaBgmInfo::Comment' has a wrong offset!");
static_assert(offsetof(FAreaBgmInfo, Volume) == 0x000010, "Member 'FAreaBgmInfo::Volume' has a wrong offset!");
static_assert(offsetof(FAreaBgmInfo, IsBgmChangeNight) == 0x000014, "Member 'FAreaBgmInfo::IsBgmChangeNight' has a wrong offset!");
static_assert(offsetof(FAreaBgmInfo, BgmID_Default) == 0x000018, "Member 'FAreaBgmInfo::BgmID_Default' has a wrong offset!");
static_assert(offsetof(FAreaBgmInfo, BgmID_Progess) == 0x000028, "Member 'FAreaBgmInfo::BgmID_Progess' has a wrong offset!");
static_assert(offsetof(FAreaBgmInfo, BgmID_Safe) == 0x000038, "Member 'FAreaBgmInfo::BgmID_Safe' has a wrong offset!");
static_assert(offsetof(FAreaBgmInfo, FadeOutTime) == 0x000048, "Member 'FAreaBgmInfo::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FAreaBgmInfo, FadeInTime) == 0x00004C, "Member 'FAreaBgmInfo::FadeInTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TimerPlayStatusUpEffect
// 0x001C (0x001C - 0x0000)
struct FST_TimerPlayStatusUpEffect final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_CoinFeature                        Feature;                                           // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayEffect;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_TimerPlayStatusUpEffect) == 0x000004, "Wrong alignment on FST_TimerPlayStatusUpEffect");
static_assert(sizeof(FST_TimerPlayStatusUpEffect) == 0x00001C, "Wrong size on FST_TimerPlayStatusUpEffect");
static_assert(offsetof(FST_TimerPlayStatusUpEffect, Position) == 0x000000, "Member 'FST_TimerPlayStatusUpEffect::Position' has a wrong offset!");
static_assert(offsetof(FST_TimerPlayStatusUpEffect, Feature) == 0x000008, "Member 'FST_TimerPlayStatusUpEffect::Feature' has a wrong offset!");
static_assert(offsetof(FST_TimerPlayStatusUpEffect, Interval) == 0x000014, "Member 'FST_TimerPlayStatusUpEffect::Interval' has a wrong offset!");
static_assert(offsetof(FST_TimerPlayStatusUpEffect, IsPlayEffect) == 0x000018, "Member 'FST_TimerPlayStatusUpEffect::IsPlayEffect' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterCombatSequence
// 0x0010 (0x0018 - 0x0008)
struct FST_BossMonsterCombatSequence final : public FTableRowBase
{
public:
	TArray<struct FST_BossMonsterActionInfo>      ActionInfos;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterCombatSequence) == 0x000008, "Wrong alignment on FST_BossMonsterCombatSequence");
static_assert(sizeof(FST_BossMonsterCombatSequence) == 0x000018, "Wrong size on FST_BossMonsterCombatSequence");
static_assert(offsetof(FST_BossMonsterCombatSequence, ActionInfos) == 0x000008, "Member 'FST_BossMonsterCombatSequence::ActionInfos' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapFloorResource
// 0x0040 (0x0048 - 0x0008)
struct FST_UIMapFloorResource final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaID;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FloorGroup;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapScale;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridX;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridY;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIMapFloorResource) == 0x000008, "Wrong alignment on FST_UIMapFloorResource");
static_assert(sizeof(FST_UIMapFloorResource) == 0x000048, "Wrong size on FST_UIMapFloorResource");
static_assert(offsetof(FST_UIMapFloorResource, Texture) == 0x000008, "Member 'FST_UIMapFloorResource::Texture' has a wrong offset!");
static_assert(offsetof(FST_UIMapFloorResource, AreaID) == 0x000030, "Member 'FST_UIMapFloorResource::AreaID' has a wrong offset!");
static_assert(offsetof(FST_UIMapFloorResource, FloorGroup) == 0x000034, "Member 'FST_UIMapFloorResource::FloorGroup' has a wrong offset!");
static_assert(offsetof(FST_UIMapFloorResource, MapScale) == 0x000038, "Member 'FST_UIMapFloorResource::MapScale' has a wrong offset!");
static_assert(offsetof(FST_UIMapFloorResource, GridX) == 0x00003C, "Member 'FST_UIMapFloorResource::GridX' has a wrong offset!");
static_assert(offsetof(FST_UIMapFloorResource, GridY) == 0x000040, "Member 'FST_UIMapFloorResource::GridY' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterScenarioID
// 0x0010 (0x0010 - 0x0000)
struct FST_BossMonsterScenarioID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterScenarioID) == 0x000004, "Wrong alignment on FST_BossMonsterScenarioID");
static_assert(sizeof(FST_BossMonsterScenarioID) == 0x000010, "Wrong size on FST_BossMonsterScenarioID");
static_assert(offsetof(FST_BossMonsterScenarioID, ID) == 0x000000, "Member 'FST_BossMonsterScenarioID::ID' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterScenarioID, Rate) == 0x000008, "Member 'FST_BossMonsterScenarioID::Rate' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterScenarioID, Limit) == 0x00000C, "Member 'FST_BossMonsterScenarioID::Limit' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterActionList
// 0x0018 (0x0020 - 0x0008)
struct FST_BossMonsterActionList final : public FTableRowBase
{
public:
	int32                                         SelectType;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_BossMonsterScenarioID>      ScenarioIDs;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterActionList) == 0x000008, "Wrong alignment on FST_BossMonsterActionList");
static_assert(sizeof(FST_BossMonsterActionList) == 0x000020, "Wrong size on FST_BossMonsterActionList");
static_assert(offsetof(FST_BossMonsterActionList, SelectType) == 0x000008, "Member 'FST_BossMonsterActionList::SelectType' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionList, ScenarioIDs) == 0x000010, "Member 'FST_BossMonsterActionList::ScenarioIDs' has a wrong offset!");

// ScriptStruct DarwinGame.SizeEffectData
// 0x0078 (0x0080 - 0x0008)
struct FSizeEffectData : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mS;                                                // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mM;                                                // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mL;                                                // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSizeEffectData) == 0x000008, "Wrong alignment on FSizeEffectData");
static_assert(sizeof(FSizeEffectData) == 0x000080, "Wrong size on FSizeEffectData");
static_assert(offsetof(FSizeEffectData, mS) == 0x000008, "Member 'FSizeEffectData::mS' has a wrong offset!");
static_assert(offsetof(FSizeEffectData, mM) == 0x000030, "Member 'FSizeEffectData::mM' has a wrong offset!");
static_assert(offsetof(FSizeEffectData, mL) == 0x000058, "Member 'FSizeEffectData::mL' has a wrong offset!");

// ScriptStruct DarwinGame.DamageEffectData
// 0x0000 (0x0080 - 0x0080)
struct FDamageEffectData final : public FSizeEffectData
{
};
static_assert(alignof(FDamageEffectData) == 0x000008, "Wrong alignment on FDamageEffectData");
static_assert(sizeof(FDamageEffectData) == 0x000080, "Wrong size on FDamageEffectData");

// ScriptStruct DarwinGame.ST_QuestClearPlayerAction
// 0x0008 (0x0008 - 0x0000)
struct FST_QuestClearPlayerAction final
{
public:
	EQuestClearPlayerActionType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearPlayerAction) == 0x000004, "Wrong alignment on FST_QuestClearPlayerAction");
static_assert(sizeof(FST_QuestClearPlayerAction) == 0x000008, "Wrong size on FST_QuestClearPlayerAction");
static_assert(offsetof(FST_QuestClearPlayerAction, Type) == 0x000000, "Member 'FST_QuestClearPlayerAction::Type' has a wrong offset!");
static_assert(offsetof(FST_QuestClearPlayerAction, Num) == 0x000004, "Member 'FST_QuestClearPlayerAction::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterScriptCodeSet
// 0x000C (0x000C - 0x0000)
struct FST_BossMonsterScriptCodeSet final
{
public:
	EMonsterBossScriptCode                        Code;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Option;                                            // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterScriptCodeSet) == 0x000004, "Wrong alignment on FST_BossMonsterScriptCodeSet");
static_assert(sizeof(FST_BossMonsterScriptCodeSet) == 0x00000C, "Wrong size on FST_BossMonsterScriptCodeSet");
static_assert(offsetof(FST_BossMonsterScriptCodeSet, Code) == 0x000000, "Member 'FST_BossMonsterScriptCodeSet::Code' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterScriptCodeSet, Option) == 0x000004, "Member 'FST_BossMonsterScriptCodeSet::Option' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterActionScenario
// 0x0038 (0x0040 - 0x0008)
struct FST_BossMonsterActionScenario final : public FTableRowBase
{
public:
	EActionClassType                              ClassType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionTargetType                             TargetType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionEffectType                             EffectType;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SightRM;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 DisRM;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_BossMonsterScriptCodeSet>   CodeSet;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterActionScenario) == 0x000008, "Wrong alignment on FST_BossMonsterActionScenario");
static_assert(sizeof(FST_BossMonsterActionScenario) == 0x000040, "Wrong size on FST_BossMonsterActionScenario");
static_assert(offsetof(FST_BossMonsterActionScenario, ClassType) == 0x000008, "Member 'FST_BossMonsterActionScenario::ClassType' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionScenario, TargetType) == 0x000009, "Member 'FST_BossMonsterActionScenario::TargetType' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionScenario, EffectType) == 0x00000A, "Member 'FST_BossMonsterActionScenario::EffectType' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionScenario, SightRM) == 0x000010, "Member 'FST_BossMonsterActionScenario::SightRM' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionScenario, DisRM) == 0x000020, "Member 'FST_BossMonsterActionScenario::DisRM' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionScenario, CodeSet) == 0x000030, "Member 'FST_BossMonsterActionScenario::CodeSet' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NetworkTermsData
// 0x0028 (0x0030 - 0x0008)
struct FST_NetworkTermsData final : public FTableRowBase
{
public:
	class FString                                 TermsVer;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NetworkTermsData) == 0x000008, "Wrong alignment on FST_NetworkTermsData");
static_assert(sizeof(FST_NetworkTermsData) == 0x000030, "Wrong size on FST_NetworkTermsData");
static_assert(offsetof(FST_NetworkTermsData, TermsVer) == 0x000008, "Member 'FST_NetworkTermsData::TermsVer' has a wrong offset!");
static_assert(offsetof(FST_NetworkTermsData, Message) == 0x000018, "Member 'FST_NetworkTermsData::Message' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestTreasureMapData
// 0x0010 (0x0018 - 0x0008)
struct FST_QuestTreasureMapData final : public FTableRowBase
{
public:
	class FString                                 Dummy;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestTreasureMapData) == 0x000008, "Wrong alignment on FST_QuestTreasureMapData");
static_assert(sizeof(FST_QuestTreasureMapData) == 0x000018, "Wrong size on FST_QuestTreasureMapData");
static_assert(offsetof(FST_QuestTreasureMapData, Dummy) == 0x000008, "Member 'FST_QuestTreasureMapData::Dummy' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterActionConvert
// 0x0020 (0x0028 - 0x0008)
struct FST_BossMonsterActionConvert final : public FTableRowBase
{
public:
	class FName                                   ActionCode;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBehavior                              Behavior;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AttackRange;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterActionConvert) == 0x000008, "Wrong alignment on FST_BossMonsterActionConvert");
static_assert(sizeof(FST_BossMonsterActionConvert) == 0x000028, "Wrong size on FST_BossMonsterActionConvert");
static_assert(offsetof(FST_BossMonsterActionConvert, ActionCode) == 0x000008, "Member 'FST_BossMonsterActionConvert::ActionCode' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionConvert, Behavior) == 0x000010, "Member 'FST_BossMonsterActionConvert::Behavior' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterActionConvert, AttackRange) == 0x000018, "Member 'FST_BossMonsterActionConvert::AttackRange' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterBodyMaterial
// 0x0018 (0x0020 - 0x0008)
struct FST_BossMonsterBodyMaterial final : public FTableRowBase
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> Materials;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossMonsterBodyMaterial) == 0x000008, "Wrong alignment on FST_BossMonsterBodyMaterial");
static_assert(sizeof(FST_BossMonsterBodyMaterial) == 0x000020, "Wrong size on FST_BossMonsterBodyMaterial");
static_assert(offsetof(FST_BossMonsterBodyMaterial, MaterialSlotName) == 0x000008, "Member 'FST_BossMonsterBodyMaterial::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterBodyMaterial, Materials) == 0x000010, "Member 'FST_BossMonsterBodyMaterial::Materials' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossMonsterGuide
// 0x0038 (0x0040 - 0x0008)
struct FST_BossMonsterGuide final : public FTableRowBase
{
public:
	EMonsterBossLogConditionType                  ConditionType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KamyuMessageID;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MayaMessageID;                                     // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstMessageID;                                    // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondMessageID;                                   // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitTimes;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrecedingMessage;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interval;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_BossMonsterGuide) == 0x000008, "Wrong alignment on FST_BossMonsterGuide");
static_assert(sizeof(FST_BossMonsterGuide) == 0x000040, "Wrong size on FST_BossMonsterGuide");
static_assert(offsetof(FST_BossMonsterGuide, ConditionType) == 0x000008, "Member 'FST_BossMonsterGuide::ConditionType' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterGuide, KamyuMessageID) == 0x00000C, "Member 'FST_BossMonsterGuide::KamyuMessageID' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterGuide, MayaMessageID) == 0x000014, "Member 'FST_BossMonsterGuide::MayaMessageID' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterGuide, FirstMessageID) == 0x00001C, "Member 'FST_BossMonsterGuide::FirstMessageID' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterGuide, SecondMessageID) == 0x000024, "Member 'FST_BossMonsterGuide::SecondMessageID' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterGuide, LimitTimes) == 0x00002C, "Member 'FST_BossMonsterGuide::LimitTimes' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterGuide, PrecedingMessage) == 0x000030, "Member 'FST_BossMonsterGuide::PrecedingMessage' has a wrong offset!");
static_assert(offsetof(FST_BossMonsterGuide, Interval) == 0x000038, "Member 'FST_BossMonsterGuide::Interval' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BraveData
// 0x0008 (0x0010 - 0x0008)
struct FST_BraveData final : public FTableRowBase
{
public:
	EBraveReason                                  reason;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BraveData) == 0x000008, "Wrong alignment on FST_BraveData");
static_assert(sizeof(FST_BraveData) == 0x000010, "Wrong size on FST_BraveData");
static_assert(offsetof(FST_BraveData, reason) == 0x000008, "Member 'FST_BraveData::reason' has a wrong offset!");
static_assert(offsetof(FST_BraveData, Value) == 0x00000C, "Member 'FST_BraveData::Value' has a wrong offset!");

// ScriptStruct DarwinGame.ST_HealRequest
// 0x0018 (0x0018 - 0x0000)
struct FST_HealRequest final
{
public:
	EHealCategory                                 Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealCalcPolicy                               CalcPolicy;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPop;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_HealRequest) == 0x000004, "Wrong alignment on FST_HealRequest");
static_assert(sizeof(FST_HealRequest) == 0x000018, "Wrong size on FST_HealRequest");
static_assert(offsetof(FST_HealRequest, Category) == 0x000000, "Member 'FST_HealRequest::Category' has a wrong offset!");
static_assert(offsetof(FST_HealRequest, CalcPolicy) == 0x000001, "Member 'FST_HealRequest::CalcPolicy' has a wrong offset!");
static_assert(offsetof(FST_HealRequest, bShowPop) == 0x000002, "Member 'FST_HealRequest::bShowPop' has a wrong offset!");
static_assert(offsetof(FST_HealRequest, EffectValue) == 0x000004, "Member 'FST_HealRequest::EffectValue' has a wrong offset!");

// ScriptStruct DarwinGame.GenEnvSoundBase
// 0x0030 (0x0038 - 0x0008)
struct FGenEnvSoundBase final : public FTableRowBase
{
public:
	class FString                                 ObjectName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           NatureList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           CreatureList;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenEnvSoundBase) == 0x000008, "Wrong alignment on FGenEnvSoundBase");
static_assert(sizeof(FGenEnvSoundBase) == 0x000038, "Wrong size on FGenEnvSoundBase");
static_assert(offsetof(FGenEnvSoundBase, ObjectName) == 0x000008, "Member 'FGenEnvSoundBase::ObjectName' has a wrong offset!");
static_assert(offsetof(FGenEnvSoundBase, NatureList) == 0x000018, "Member 'FGenEnvSoundBase::NatureList' has a wrong offset!");
static_assert(offsetof(FGenEnvSoundBase, CreatureList) == 0x000028, "Member 'FGenEnvSoundBase::CreatureList' has a wrong offset!");

// ScriptStruct DarwinGame.GenEnvSoundParameter
// 0x0010 (0x0018 - 0x0008)
struct FGenEnvSoundParameter final : public FTableRowBase
{
public:
	TArray<struct FGenEnvSoundBase>               list;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenEnvSoundParameter) == 0x000008, "Wrong alignment on FGenEnvSoundParameter");
static_assert(sizeof(FGenEnvSoundParameter) == 0x000018, "Wrong size on FGenEnvSoundParameter");
static_assert(offsetof(FGenEnvSoundParameter, list) == 0x000008, "Member 'FGenEnvSoundParameter::list' has a wrong offset!");

// ScriptStruct DarwinGame.CommonEffectData
// 0x0028 (0x0030 - 0x0008)
struct FCommonEffectData : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mEffect;                                           // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonEffectData) == 0x000008, "Wrong alignment on FCommonEffectData");
static_assert(sizeof(FCommonEffectData) == 0x000030, "Wrong size on FCommonEffectData");
static_assert(offsetof(FCommonEffectData, mEffect) == 0x000008, "Member 'FCommonEffectData::mEffect' has a wrong offset!");

// ScriptStruct DarwinGame.UIInputPriorityData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FUIInputPriorityData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIInputPriorityData) == 0x000008, "Wrong alignment on FUIInputPriorityData");
static_assert(sizeof(FUIInputPriorityData) == 0x000018, "Wrong size on FUIInputPriorityData");

// ScriptStruct DarwinGame.ST_RequestCorrectionParam
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FST_RequestCorrectionParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_RequestCorrectionParam) == 0x000004, "Wrong alignment on FST_RequestCorrectionParam");
static_assert(sizeof(FST_RequestCorrectionParam) == 0x000008, "Wrong size on FST_RequestCorrectionParam");

// ScriptStruct DarwinGame.CharacterCommonEffectData
// 0x0000 (0x0080 - 0x0080)
struct FCharacterCommonEffectData final : public FSizeEffectData
{
};
static_assert(alignof(FCharacterCommonEffectData) == 0x000008, "Wrong alignment on FCharacterCommonEffectData");
static_assert(sizeof(FCharacterCommonEffectData) == 0x000080, "Wrong size on FCharacterCommonEffectData");

// ScriptStruct DarwinGame.ST_ResourceButton
// 0x0018 (0x0020 - 0x0008)
struct FST_ResourceButton final : public FTableRowBase
{
public:
	EAxisMappingType                              Key;                                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SmallTexture;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ResourceButton) == 0x000008, "Wrong alignment on FST_ResourceButton");
static_assert(sizeof(FST_ResourceButton) == 0x000020, "Wrong size on FST_ResourceButton");
static_assert(offsetof(FST_ResourceButton, Key) == 0x000008, "Member 'FST_ResourceButton::Key' has a wrong offset!");
static_assert(offsetof(FST_ResourceButton, Texture) == 0x000010, "Member 'FST_ResourceButton::Texture' has a wrong offset!");
static_assert(offsetof(FST_ResourceButton, SmallTexture) == 0x000018, "Member 'FST_ResourceButton::SmallTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterRivalTeamLotteryWeight
// 0x0010 (0x0018 - 0x0008)
struct FST_MonsterRivalTeamLotteryWeight final : public FTableRowBase
{
public:
	ERivalTeamForce                               Force;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LotteryWeight;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnableFlagName;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterRivalTeamLotteryWeight) == 0x000008, "Wrong alignment on FST_MonsterRivalTeamLotteryWeight");
static_assert(sizeof(FST_MonsterRivalTeamLotteryWeight) == 0x000018, "Wrong size on FST_MonsterRivalTeamLotteryWeight");
static_assert(offsetof(FST_MonsterRivalTeamLotteryWeight, Force) == 0x000008, "Member 'FST_MonsterRivalTeamLotteryWeight::Force' has a wrong offset!");
static_assert(offsetof(FST_MonsterRivalTeamLotteryWeight, LotteryWeight) == 0x00000C, "Member 'FST_MonsterRivalTeamLotteryWeight::LotteryWeight' has a wrong offset!");
static_assert(offsetof(FST_MonsterRivalTeamLotteryWeight, EnableFlagName) == 0x000010, "Member 'FST_MonsterRivalTeamLotteryWeight::EnableFlagName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CecilyTextData
// 0x0018 (0x0020 - 0x0008)
struct FST_CecilyTextData final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagName;                                          // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TestID;                                            // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBreakFlagEventAfter;                             // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CecilyTextData) == 0x000008, "Wrong alignment on FST_CecilyTextData");
static_assert(sizeof(FST_CecilyTextData) == 0x000020, "Wrong size on FST_CecilyTextData");
static_assert(offsetof(FST_CecilyTextData, Priority) == 0x000008, "Member 'FST_CecilyTextData::Priority' has a wrong offset!");
static_assert(offsetof(FST_CecilyTextData, FlagName) == 0x00000C, "Member 'FST_CecilyTextData::FlagName' has a wrong offset!");
static_assert(offsetof(FST_CecilyTextData, TestID) == 0x000014, "Member 'FST_CecilyTextData::TestID' has a wrong offset!");
static_assert(offsetof(FST_CecilyTextData, IsBreakFlagEventAfter) == 0x00001C, "Member 'FST_CecilyTextData::IsBreakFlagEventAfter' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapPlaceData
// 0x0008 (0x0010 - 0x0008)
struct FST_UIMapPlaceData final : public FTableRowBase
{
public:
	struct FVector2D                              Position;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMapPlaceData) == 0x000008, "Wrong alignment on FST_UIMapPlaceData");
static_assert(sizeof(FST_UIMapPlaceData) == 0x000010, "Wrong size on FST_UIMapPlaceData");
static_assert(offsetof(FST_UIMapPlaceData, Position) == 0x000008, "Member 'FST_UIMapPlaceData::Position' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalMotionData
// 0x0020 (0x0028 - 0x0008)
struct FST_EcologicalMotionData final : public FTableRowBase
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SequenceToPlay;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlying;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootScale;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EcologicalMotionData) == 0x000008, "Wrong alignment on FST_EcologicalMotionData");
static_assert(sizeof(FST_EcologicalMotionData) == 0x000028, "Wrong size on FST_EcologicalMotionData");
static_assert(offsetof(FST_EcologicalMotionData, MontageToPlay) == 0x000008, "Member 'FST_EcologicalMotionData::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FST_EcologicalMotionData, SequenceToPlay) == 0x000010, "Member 'FST_EcologicalMotionData::SequenceToPlay' has a wrong offset!");
static_assert(offsetof(FST_EcologicalMotionData, bFlying) == 0x000018, "Member 'FST_EcologicalMotionData::bFlying' has a wrong offset!");
static_assert(offsetof(FST_EcologicalMotionData, Distance) == 0x00001C, "Member 'FST_EcologicalMotionData::Distance' has a wrong offset!");
static_assert(offsetof(FST_EcologicalMotionData, RootScale) == 0x000020, "Member 'FST_EcologicalMotionData::RootScale' has a wrong offset!");

// ScriptStruct DarwinGame.ST_HolderCoin
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FST_HolderCoin final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_HolderCoin) == 0x000008, "Wrong alignment on FST_HolderCoin");
static_assert(sizeof(FST_HolderCoin) == 0x000030, "Wrong size on FST_HolderCoin");

// ScriptStruct DarwinGame.FeaturePossessionInfo
// 0x000C (0x000C - 0x0000)
struct FFeaturePossessionInfo final
{
public:
	class FName                                   featureId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         step;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeaturePossessionInfo) == 0x000004, "Wrong alignment on FFeaturePossessionInfo");
static_assert(sizeof(FFeaturePossessionInfo) == 0x00000C, "Wrong size on FFeaturePossessionInfo");
static_assert(offsetof(FFeaturePossessionInfo, featureId) == 0x000000, "Member 'FFeaturePossessionInfo::featureId' has a wrong offset!");
static_assert(offsetof(FFeaturePossessionInfo, step) == 0x000008, "Member 'FFeaturePossessionInfo::step' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinData
// 0x0028 (0x0028 - 0x0000)
struct FST_CoinData final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CoinParam                          Param;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CoinData) == 0x000008, "Wrong alignment on FST_CoinData");
static_assert(sizeof(FST_CoinData) == 0x000028, "Wrong size on FST_CoinData");
static_assert(offsetof(FST_CoinData, Uid) == 0x000000, "Member 'FST_CoinData::Uid' has a wrong offset!");
static_assert(offsetof(FST_CoinData, Param) == 0x000008, "Member 'FST_CoinData::Param' has a wrong offset!");
static_assert(offsetof(FST_CoinData, IsNew) == 0x000020, "Member 'FST_CoinData::IsNew' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TempCharaDataForDamageCalc
// 0x0120 (0x0120 - 0x0000)
struct FST_TempCharaDataForDamageCalc final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnemy;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HP;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MP;                                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FP;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             Status;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             LastStatus;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFeaturePossessionInfo>         Features;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_CoinData>                   EquipmentCoins;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      AttributeList;                                     // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EResistanceType, int32>                  ResistMap;                                         // 0x00C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x10];                                     // 0x0110(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_TempCharaDataForDamageCalc) == 0x000008, "Wrong alignment on FST_TempCharaDataForDamageCalc");
static_assert(sizeof(FST_TempCharaDataForDamageCalc) == 0x000120, "Wrong size on FST_TempCharaDataForDamageCalc");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, CharacterID) == 0x000000, "Member 'FST_TempCharaDataForDamageCalc::CharacterID' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, Level) == 0x000008, "Member 'FST_TempCharaDataForDamageCalc::Level' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, bIsEnemy) == 0x00000C, "Member 'FST_TempCharaDataForDamageCalc::bIsEnemy' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, HP) == 0x000010, "Member 'FST_TempCharaDataForDamageCalc::HP' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, MP) == 0x000014, "Member 'FST_TempCharaDataForDamageCalc::MP' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, FP) == 0x000018, "Member 'FST_TempCharaDataForDamageCalc::FP' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, DamageAmount) == 0x00001C, "Member 'FST_TempCharaDataForDamageCalc::DamageAmount' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, Status) == 0x000020, "Member 'FST_TempCharaDataForDamageCalc::Status' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, LastStatus) == 0x000038, "Member 'FST_TempCharaDataForDamageCalc::LastStatus' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, Features) == 0x000050, "Member 'FST_TempCharaDataForDamageCalc::Features' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, EquipmentCoins) == 0x000060, "Member 'FST_TempCharaDataForDamageCalc::EquipmentCoins' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, AttributeList) == 0x000070, "Member 'FST_TempCharaDataForDamageCalc::AttributeList' has a wrong offset!");
static_assert(offsetof(FST_TempCharaDataForDamageCalc, ResistMap) == 0x0000C0, "Member 'FST_TempCharaDataForDamageCalc::ResistMap' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterRivalTeamEquipment
// 0x0058 (0x0058 - 0x0000)
struct FST_MonsterRivalTeamEquipment final
{
public:
	ERivalTeamForce                               Force;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterRivalTeamEquipment) == 0x000008, "Wrong alignment on FST_MonsterRivalTeamEquipment");
static_assert(sizeof(FST_MonsterRivalTeamEquipment) == 0x000058, "Wrong size on FST_MonsterRivalTeamEquipment");
static_assert(offsetof(FST_MonsterRivalTeamEquipment, Force) == 0x000000, "Member 'FST_MonsterRivalTeamEquipment::Force' has a wrong offset!");
static_assert(offsetof(FST_MonsterRivalTeamEquipment, SkeletalMesh) == 0x000008, "Member 'FST_MonsterRivalTeamEquipment::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FST_MonsterRivalTeamEquipment, StaticMesh) == 0x000030, "Member 'FST_MonsterRivalTeamEquipment::StaticMesh' has a wrong offset!");

// ScriptStruct DarwinGame.ST_RivalTeamEquipmentData
// 0x0038 (0x0040 - 0x0008)
struct FST_RivalTeamEquipmentData final : public FTableRowBase
{
public:
	class FName                                   OrigineID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       SocketType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquipmentType;                                     // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_MonsterRivalTeamEquipment>  LeaderEquipments;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_MonsterRivalTeamEquipment>  SubordinateEquipments;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_RivalTeamEquipmentData) == 0x000008, "Wrong alignment on FST_RivalTeamEquipmentData");
static_assert(sizeof(FST_RivalTeamEquipmentData) == 0x000040, "Wrong size on FST_RivalTeamEquipmentData");
static_assert(offsetof(FST_RivalTeamEquipmentData, OrigineID) == 0x000008, "Member 'FST_RivalTeamEquipmentData::OrigineID' has a wrong offset!");
static_assert(offsetof(FST_RivalTeamEquipmentData, SocketType) == 0x000010, "Member 'FST_RivalTeamEquipmentData::SocketType' has a wrong offset!");
static_assert(offsetof(FST_RivalTeamEquipmentData, EquipmentType) == 0x000014, "Member 'FST_RivalTeamEquipmentData::EquipmentType' has a wrong offset!");
static_assert(offsetof(FST_RivalTeamEquipmentData, LeaderEquipments) == 0x000020, "Member 'FST_RivalTeamEquipmentData::LeaderEquipments' has a wrong offset!");
static_assert(offsetof(FST_RivalTeamEquipmentData, SubordinateEquipments) == 0x000030, "Member 'FST_RivalTeamEquipmentData::SubordinateEquipments' has a wrong offset!");

// ScriptStruct DarwinGame.KindVoiceParameter
// 0x0050 (0x0058 - 0x0008)
struct FKindVoiceParameter final : public FTableRowBase
{
public:
	class FName                                   Vo_Type1;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type2;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type3;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type4;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type5;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type6;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type7;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type8;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type9;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Vo_Type10;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKindVoiceParameter) == 0x000008, "Wrong alignment on FKindVoiceParameter");
static_assert(sizeof(FKindVoiceParameter) == 0x000058, "Wrong size on FKindVoiceParameter");
static_assert(offsetof(FKindVoiceParameter, Vo_Type1) == 0x000008, "Member 'FKindVoiceParameter::Vo_Type1' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type2) == 0x000010, "Member 'FKindVoiceParameter::Vo_Type2' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type3) == 0x000018, "Member 'FKindVoiceParameter::Vo_Type3' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type4) == 0x000020, "Member 'FKindVoiceParameter::Vo_Type4' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type5) == 0x000028, "Member 'FKindVoiceParameter::Vo_Type5' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type6) == 0x000030, "Member 'FKindVoiceParameter::Vo_Type6' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type7) == 0x000038, "Member 'FKindVoiceParameter::Vo_Type7' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type8) == 0x000040, "Member 'FKindVoiceParameter::Vo_Type8' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type9) == 0x000048, "Member 'FKindVoiceParameter::Vo_Type9' has a wrong offset!");
static_assert(offsetof(FKindVoiceParameter, Vo_Type10) == 0x000050, "Member 'FKindVoiceParameter::Vo_Type10' has a wrong offset!");

// ScriptStruct DarwinGame.SelfBuffEffectData
// 0x0000 (0x0080 - 0x0080)
struct FSelfBuffEffectData final : public FSizeEffectData
{
};
static_assert(alignof(FSelfBuffEffectData) == 0x000008, "Wrong alignment on FSelfBuffEffectData");
static_assert(sizeof(FSelfBuffEffectData) == 0x000080, "Wrong size on FSelfBuffEffectData");

// ScriptStruct DarwinGame.UIOneShotWidget
// 0x0010 (0x0010 - 0x0000)
struct FUIOneShotWidget final
{
public:
	class FName                                   OneShotName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDarwinUserWidget*                      Widget;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIOneShotWidget) == 0x000008, "Wrong alignment on FUIOneShotWidget");
static_assert(sizeof(FUIOneShotWidget) == 0x000010, "Wrong size on FUIOneShotWidget");
static_assert(offsetof(FUIOneShotWidget, OneShotName) == 0x000000, "Member 'FUIOneShotWidget::OneShotName' has a wrong offset!");
static_assert(offsetof(FUIOneShotWidget, Widget) == 0x000008, "Member 'FUIOneShotWidget::Widget' has a wrong offset!");

// ScriptStruct DarwinGame.BlessMovePhaseEffectData
// 0x0050 (0x0058 - 0x0008)
struct FBlessMovePhaseEffectData final : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mCharge;                                           // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mBless;                                            // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlessMovePhaseEffectData) == 0x000008, "Wrong alignment on FBlessMovePhaseEffectData");
static_assert(sizeof(FBlessMovePhaseEffectData) == 0x000058, "Wrong size on FBlessMovePhaseEffectData");
static_assert(offsetof(FBlessMovePhaseEffectData, mCharge) == 0x000008, "Member 'FBlessMovePhaseEffectData::mCharge' has a wrong offset!");
static_assert(offsetof(FBlessMovePhaseEffectData, mBless) == 0x000030, "Member 'FBlessMovePhaseEffectData::mBless' has a wrong offset!");

// ScriptStruct DarwinGame.BlessMoveEffectData
// 0x0160 (0x0168 - 0x0008)
struct FBlessMoveEffectData final : public FEffectDataTableRawBase
{
public:
	struct FBlessMovePhaseEffectData              mLow;                                              // 0x0008(0x0058)(Edit, NativeAccessSpecifierPublic)
	struct FBlessMovePhaseEffectData              mMiddle;                                           // 0x0060(0x0058)(Edit, NativeAccessSpecifierPublic)
	struct FBlessMovePhaseEffectData              mHigh;                                             // 0x00B8(0x0058)(Edit, NativeAccessSpecifierPublic)
	struct FBlessMovePhaseEffectData              mHighest;                                          // 0x0110(0x0058)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlessMoveEffectData) == 0x000008, "Wrong alignment on FBlessMoveEffectData");
static_assert(sizeof(FBlessMoveEffectData) == 0x000168, "Wrong size on FBlessMoveEffectData");
static_assert(offsetof(FBlessMoveEffectData, mLow) == 0x000008, "Member 'FBlessMoveEffectData::mLow' has a wrong offset!");
static_assert(offsetof(FBlessMoveEffectData, mMiddle) == 0x000060, "Member 'FBlessMoveEffectData::mMiddle' has a wrong offset!");
static_assert(offsetof(FBlessMoveEffectData, mHigh) == 0x0000B8, "Member 'FBlessMoveEffectData::mHigh' has a wrong offset!");
static_assert(offsetof(FBlessMoveEffectData, mHighest) == 0x000110, "Member 'FBlessMoveEffectData::mHighest' has a wrong offset!");

// ScriptStruct DarwinGame.FootprintTypeData
// 0x0000 (0x0080 - 0x0080)
struct FFootprintTypeData final : public FSizeEffectData
{
};
static_assert(alignof(FFootprintTypeData) == 0x000008, "Wrong alignment on FFootprintTypeData");
static_assert(sizeof(FFootprintTypeData) == 0x000080, "Wrong size on FFootprintTypeData");

// ScriptStruct DarwinGame.FootprintEffectData
// 0x0280 (0x0288 - 0x0008)
struct FFootprintEffectData final : public FEffectDataTableRawBase
{
public:
	struct FFootprintTypeData                     mPrint;                                            // 0x0008(0x0080)(Edit, NativeAccessSpecifierPublic)
	struct FFootprintTypeData                     mWalk;                                             // 0x0088(0x0080)(Edit, NativeAccessSpecifierPublic)
	struct FFootprintTypeData                     mRun;                                              // 0x0108(0x0080)(Edit, NativeAccessSpecifierPublic)
	struct FFootprintTypeData                     mJump;                                             // 0x0188(0x0080)(Edit, NativeAccessSpecifierPublic)
	struct FFootprintTypeData                     mGliding;                                          // 0x0208(0x0080)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootprintEffectData) == 0x000008, "Wrong alignment on FFootprintEffectData");
static_assert(sizeof(FFootprintEffectData) == 0x000288, "Wrong size on FFootprintEffectData");
static_assert(offsetof(FFootprintEffectData, mPrint) == 0x000008, "Member 'FFootprintEffectData::mPrint' has a wrong offset!");
static_assert(offsetof(FFootprintEffectData, mWalk) == 0x000088, "Member 'FFootprintEffectData::mWalk' has a wrong offset!");
static_assert(offsetof(FFootprintEffectData, mRun) == 0x000108, "Member 'FFootprintEffectData::mRun' has a wrong offset!");
static_assert(offsetof(FFootprintEffectData, mJump) == 0x000188, "Member 'FFootprintEffectData::mJump' has a wrong offset!");
static_assert(offsetof(FFootprintEffectData, mGliding) == 0x000208, "Member 'FFootprintEffectData::mGliding' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventNPCLookAt
// 0x0028 (0x0028 - 0x0000)
struct FST_EventNPCLookAt final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clamp1H;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clamp1V;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity1;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clamp2H;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clamp2V;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity2;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventNPCLookAt) == 0x000004, "Wrong alignment on FST_EventNPCLookAt");
static_assert(sizeof(FST_EventNPCLookAt) == 0x000028, "Wrong size on FST_EventNPCLookAt");
static_assert(offsetof(FST_EventNPCLookAt, Use) == 0x000000, "Member 'FST_EventNPCLookAt::Use' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Distance) == 0x000004, "Member 'FST_EventNPCLookAt::Distance' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Angle) == 0x000008, "Member 'FST_EventNPCLookAt::Angle' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, BlendTime) == 0x00000C, "Member 'FST_EventNPCLookAt::BlendTime' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Clamp1H) == 0x000010, "Member 'FST_EventNPCLookAt::Clamp1H' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Clamp1V) == 0x000014, "Member 'FST_EventNPCLookAt::Clamp1V' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Velocity1) == 0x000018, "Member 'FST_EventNPCLookAt::Velocity1' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Clamp2H) == 0x00001C, "Member 'FST_EventNPCLookAt::Clamp2H' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Clamp2V) == 0x000020, "Member 'FST_EventNPCLookAt::Clamp2V' has a wrong offset!");
static_assert(offsetof(FST_EventNPCLookAt, Velocity2) == 0x000024, "Member 'FST_EventNPCLookAt::Velocity2' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCDataAIParam
// 0x0038 (0x0038 - 0x0000)
struct FST_NPCDataAIParam final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExAction;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExInterval;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExRandom;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopFlag;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Points;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlag;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCDataAIParam) == 0x000008, "Wrong alignment on FST_NPCDataAIParam");
static_assert(sizeof(FST_NPCDataAIParam) == 0x000038, "Wrong size on FST_NPCDataAIParam");
static_assert(offsetof(FST_NPCDataAIParam, Speed) == 0x000000, "Member 'FST_NPCDataAIParam::Speed' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, Length) == 0x000004, "Member 'FST_NPCDataAIParam::Length' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, Radius) == 0x000008, "Member 'FST_NPCDataAIParam::Radius' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, Interval) == 0x00000C, "Member 'FST_NPCDataAIParam::Interval' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, bExAction) == 0x000010, "Member 'FST_NPCDataAIParam::bExAction' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, ExInterval) == 0x000014, "Member 'FST_NPCDataAIParam::ExInterval' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, ExRandom) == 0x000018, "Member 'FST_NPCDataAIParam::ExRandom' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, LoopFlag) == 0x00001C, "Member 'FST_NPCDataAIParam::LoopFlag' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, Points) == 0x000020, "Member 'FST_NPCDataAIParam::Points' has a wrong offset!");
static_assert(offsetof(FST_NPCDataAIParam, StartFlag) == 0x000030, "Member 'FST_NPCDataAIParam::StartFlag' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCCollisionData
// 0x0034 (0x0034 - 0x0000)
struct FST_NPCCollisionData final
{
public:
	struct FVector                                Size;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ENPCCollisionType                             Type;                                              // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCCollisionShape                            Shape;                                             // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExtraEventID;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraRadius;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCCollisionData) == 0x000004, "Wrong alignment on FST_NPCCollisionData");
static_assert(sizeof(FST_NPCCollisionData) == 0x000034, "Wrong size on FST_NPCCollisionData");
static_assert(offsetof(FST_NPCCollisionData, Size) == 0x000000, "Member 'FST_NPCCollisionData::Size' has a wrong offset!");
static_assert(offsetof(FST_NPCCollisionData, Offset) == 0x00000C, "Member 'FST_NPCCollisionData::Offset' has a wrong offset!");
static_assert(offsetof(FST_NPCCollisionData, Rotator) == 0x000018, "Member 'FST_NPCCollisionData::Rotator' has a wrong offset!");
static_assert(offsetof(FST_NPCCollisionData, Type) == 0x000024, "Member 'FST_NPCCollisionData::Type' has a wrong offset!");
static_assert(offsetof(FST_NPCCollisionData, Shape) == 0x000025, "Member 'FST_NPCCollisionData::Shape' has a wrong offset!");
static_assert(offsetof(FST_NPCCollisionData, ExtraEventID) == 0x000028, "Member 'FST_NPCCollisionData::ExtraEventID' has a wrong offset!");
static_assert(offsetof(FST_NPCCollisionData, ExtraRadius) == 0x000030, "Member 'FST_NPCCollisionData::ExtraRadius' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCData
// 0x0198 (0x01A0 - 0x0008)
struct FST_NPCData final : public FTableRowBase
{
public:
	class FName                                   NPCListID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCType                                      NPCType;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCPopState                                  NPCPopState;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpwanLocationKeep;                                 // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRespawnDayAndNight;                              // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EventListIDs;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FukidashiListIDs;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestClearEventID;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestNotClearEventID;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUseOrderUIOneQuest;                              // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           QuestIDs;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReleaseFlagNames;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSearchTurn;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalkStartTurn;                                    // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalkEndTurnBack;                                  // 0x0072(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalkLookAtEnable;                                 // 0x0073(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccessCapsuleOffset;                               // 0x0074(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WidgetRadius;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FukidashiOnFrame;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FukidashiOffFrame;                                 // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FukidashiOffset;                                   // 0x008C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StampOffset;                                       // 0x0098(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_EventNPCLookAt                     LookAtParams;                                      // 0x00A4(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_EventNPCLookAt                     LookAtBodyParams;                                  // 0x00CC(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ENPCAiType                                    NPCAiType;                                         // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_NPCDataAIParam                     AiParam;                                           // 0x00F8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   AnimSetName;                                       // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteBlinkType                               BlinkType;                                         // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmoteType                                    FaceType;                                          // 0x0139(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_NPCIdleEmoteListItem>       IdleEmoteList;                                     // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_NPCCollisionData                   collision;                                         // 0x0150(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TalkVE;                                            // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MovementEnable;                                    // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NPCData) == 0x000008, "Wrong alignment on FST_NPCData");
static_assert(sizeof(FST_NPCData) == 0x0001A0, "Wrong size on FST_NPCData");
static_assert(offsetof(FST_NPCData, NPCListID) == 0x000008, "Member 'FST_NPCData::NPCListID' has a wrong offset!");
static_assert(offsetof(FST_NPCData, NPCType) == 0x000010, "Member 'FST_NPCData::NPCType' has a wrong offset!");
static_assert(offsetof(FST_NPCData, NPCPopState) == 0x000011, "Member 'FST_NPCData::NPCPopState' has a wrong offset!");
static_assert(offsetof(FST_NPCData, SpwanLocationKeep) == 0x000012, "Member 'FST_NPCData::SpwanLocationKeep' has a wrong offset!");
static_assert(offsetof(FST_NPCData, IsRespawnDayAndNight) == 0x000013, "Member 'FST_NPCData::IsRespawnDayAndNight' has a wrong offset!");
static_assert(offsetof(FST_NPCData, EventListIDs) == 0x000018, "Member 'FST_NPCData::EventListIDs' has a wrong offset!");
static_assert(offsetof(FST_NPCData, FukidashiListIDs) == 0x000028, "Member 'FST_NPCData::FukidashiListIDs' has a wrong offset!");
static_assert(offsetof(FST_NPCData, QuestClearEventID) == 0x000038, "Member 'FST_NPCData::QuestClearEventID' has a wrong offset!");
static_assert(offsetof(FST_NPCData, QuestNotClearEventID) == 0x000040, "Member 'FST_NPCData::QuestNotClearEventID' has a wrong offset!");
static_assert(offsetof(FST_NPCData, IsUseOrderUIOneQuest) == 0x000048, "Member 'FST_NPCData::IsUseOrderUIOneQuest' has a wrong offset!");
static_assert(offsetof(FST_NPCData, QuestIDs) == 0x000050, "Member 'FST_NPCData::QuestIDs' has a wrong offset!");
static_assert(offsetof(FST_NPCData, ReleaseFlagNames) == 0x000060, "Member 'FST_NPCData::ReleaseFlagNames' has a wrong offset!");
static_assert(offsetof(FST_NPCData, bSearchTurn) == 0x000070, "Member 'FST_NPCData::bSearchTurn' has a wrong offset!");
static_assert(offsetof(FST_NPCData, bTalkStartTurn) == 0x000071, "Member 'FST_NPCData::bTalkStartTurn' has a wrong offset!");
static_assert(offsetof(FST_NPCData, bTalkEndTurnBack) == 0x000072, "Member 'FST_NPCData::bTalkEndTurnBack' has a wrong offset!");
static_assert(offsetof(FST_NPCData, bTalkLookAtEnable) == 0x000073, "Member 'FST_NPCData::bTalkLookAtEnable' has a wrong offset!");
static_assert(offsetof(FST_NPCData, AccessCapsuleOffset) == 0x000074, "Member 'FST_NPCData::AccessCapsuleOffset' has a wrong offset!");
static_assert(offsetof(FST_NPCData, WidgetRadius) == 0x000080, "Member 'FST_NPCData::WidgetRadius' has a wrong offset!");
static_assert(offsetof(FST_NPCData, FukidashiOnFrame) == 0x000084, "Member 'FST_NPCData::FukidashiOnFrame' has a wrong offset!");
static_assert(offsetof(FST_NPCData, FukidashiOffFrame) == 0x000088, "Member 'FST_NPCData::FukidashiOffFrame' has a wrong offset!");
static_assert(offsetof(FST_NPCData, FukidashiOffset) == 0x00008C, "Member 'FST_NPCData::FukidashiOffset' has a wrong offset!");
static_assert(offsetof(FST_NPCData, StampOffset) == 0x000098, "Member 'FST_NPCData::StampOffset' has a wrong offset!");
static_assert(offsetof(FST_NPCData, LookAtParams) == 0x0000A4, "Member 'FST_NPCData::LookAtParams' has a wrong offset!");
static_assert(offsetof(FST_NPCData, LookAtBodyParams) == 0x0000CC, "Member 'FST_NPCData::LookAtBodyParams' has a wrong offset!");
static_assert(offsetof(FST_NPCData, NPCAiType) == 0x0000F4, "Member 'FST_NPCData::NPCAiType' has a wrong offset!");
static_assert(offsetof(FST_NPCData, AiParam) == 0x0000F8, "Member 'FST_NPCData::AiParam' has a wrong offset!");
static_assert(offsetof(FST_NPCData, AnimSetName) == 0x000130, "Member 'FST_NPCData::AnimSetName' has a wrong offset!");
static_assert(offsetof(FST_NPCData, BlinkType) == 0x000138, "Member 'FST_NPCData::BlinkType' has a wrong offset!");
static_assert(offsetof(FST_NPCData, FaceType) == 0x000139, "Member 'FST_NPCData::FaceType' has a wrong offset!");
static_assert(offsetof(FST_NPCData, IdleEmoteList) == 0x000140, "Member 'FST_NPCData::IdleEmoteList' has a wrong offset!");
static_assert(offsetof(FST_NPCData, collision) == 0x000150, "Member 'FST_NPCData::collision' has a wrong offset!");
static_assert(offsetof(FST_NPCData, TalkVE) == 0x000188, "Member 'FST_NPCData::TalkVE' has a wrong offset!");
static_assert(offsetof(FST_NPCData, MovementEnable) == 0x000198, "Member 'FST_NPCData::MovementEnable' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SoundRange
// 0x0008 (0x0010 - 0x0008)
struct FST_SoundRange final : public FTableRowBase
{
public:
	EActionSoundType                              SoundType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundRange;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SoundRange) == 0x000008, "Wrong alignment on FST_SoundRange");
static_assert(sizeof(FST_SoundRange) == 0x000010, "Wrong size on FST_SoundRange");
static_assert(offsetof(FST_SoundRange, SoundType) == 0x000008, "Member 'FST_SoundRange::SoundType' has a wrong offset!");
static_assert(offsetof(FST_SoundRange, SoundRange) == 0x00000C, "Member 'FST_SoundRange::SoundRange' has a wrong offset!");

// ScriptStruct DarwinGame.PlayBgmParameter
// 0x0018 (0x0020 - 0x0008)
struct FPlayBgmParameter final : public FTableRowBase
{
public:
	EAtomCompCategory                             Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BgmName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayBgmParameter) == 0x000008, "Wrong alignment on FPlayBgmParameter");
static_assert(sizeof(FPlayBgmParameter) == 0x000020, "Wrong size on FPlayBgmParameter");
static_assert(offsetof(FPlayBgmParameter, Category) == 0x000008, "Member 'FPlayBgmParameter::Category' has a wrong offset!");
static_assert(offsetof(FPlayBgmParameter, BgmName) == 0x000010, "Member 'FPlayBgmParameter::BgmName' has a wrong offset!");

// ScriptStruct DarwinGame.EventSoundParameter
// 0x0058 (0x0060 - 0x0008)
struct FEventSoundParameter final : public FTableRowBase
{
public:
	ESoundControlType                             FinishBattleBgm;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStopBgm;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EventStartStopBgmFadeTime;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFadeOutEnv;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FadeOutEnvGroup;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayBgmParameter                      PlayBgm;                                           // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   BlackOutStart;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InitMain;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FinMain;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlackOutEnd;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventSoundParameter) == 0x000008, "Wrong alignment on FEventSoundParameter");
static_assert(sizeof(FEventSoundParameter) == 0x000060, "Wrong size on FEventSoundParameter");
static_assert(offsetof(FEventSoundParameter, FinishBattleBgm) == 0x000008, "Member 'FEventSoundParameter::FinishBattleBgm' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, IsStopBgm) == 0x000009, "Member 'FEventSoundParameter::IsStopBgm' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, EventStartStopBgmFadeTime) == 0x00000C, "Member 'FEventSoundParameter::EventStartStopBgmFadeTime' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, IsFadeOutEnv) == 0x000010, "Member 'FEventSoundParameter::IsFadeOutEnv' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, FadeOutEnvGroup) == 0x000014, "Member 'FEventSoundParameter::FadeOutEnvGroup' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, PlayBgm) == 0x000020, "Member 'FEventSoundParameter::PlayBgm' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, BlackOutStart) == 0x000040, "Member 'FEventSoundParameter::BlackOutStart' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, InitMain) == 0x000048, "Member 'FEventSoundParameter::InitMain' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, FinMain) == 0x000050, "Member 'FEventSoundParameter::FinMain' has a wrong offset!");
static_assert(offsetof(FEventSoundParameter, BlackOutEnd) == 0x000058, "Member 'FEventSoundParameter::BlackOutEnd' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StatusEffectBase
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FST_StatusEffectBase
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StatusEffectBase) == 0x000008, "Wrong alignment on FST_StatusEffectBase");
static_assert(sizeof(FST_StatusEffectBase) == 0x000038, "Wrong size on FST_StatusEffectBase");

// ScriptStruct DarwinGame.PatternEffectData
// 0x00A0 (0x00A8 - 0x0008)
struct FPatternEffectData : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mA;                                                // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mB;                                                // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mC;                                                // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mD;                                                // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatternEffectData) == 0x000008, "Wrong alignment on FPatternEffectData");
static_assert(sizeof(FPatternEffectData) == 0x0000A8, "Wrong size on FPatternEffectData");
static_assert(offsetof(FPatternEffectData, mA) == 0x000008, "Member 'FPatternEffectData::mA' has a wrong offset!");
static_assert(offsetof(FPatternEffectData, mB) == 0x000030, "Member 'FPatternEffectData::mB' has a wrong offset!");
static_assert(offsetof(FPatternEffectData, mC) == 0x000058, "Member 'FPatternEffectData::mC' has a wrong offset!");
static_assert(offsetof(FPatternEffectData, mD) == 0x000080, "Member 'FPatternEffectData::mD' has a wrong offset!");

// ScriptStruct DarwinGame.ObjectCommonEffectData
// 0x0000 (0x00A8 - 0x00A8)
struct FObjectCommonEffectData final : public FPatternEffectData
{
};
static_assert(alignof(FObjectCommonEffectData) == 0x000008, "Wrong alignment on FObjectCommonEffectData");
static_assert(sizeof(FObjectCommonEffectData) == 0x0000A8, "Wrong size on FObjectCommonEffectData");

// ScriptStruct DarwinGame.ST_CharacterExeActionInfo
// 0x000C (0x000C - 0x0000)
struct FST_CharacterExeActionInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExeRate;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CharacterExeActionInfo) == 0x000004, "Wrong alignment on FST_CharacterExeActionInfo");
static_assert(sizeof(FST_CharacterExeActionInfo) == 0x00000C, "Wrong size on FST_CharacterExeActionInfo");
static_assert(offsetof(FST_CharacterExeActionInfo, ID) == 0x000000, "Member 'FST_CharacterExeActionInfo::ID' has a wrong offset!");
static_assert(offsetof(FST_CharacterExeActionInfo, ExeRate) == 0x000008, "Member 'FST_CharacterExeActionInfo::ExeRate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CharacterFeatureInfo
// 0x000C (0x000C - 0x0000)
struct FST_CharacterFeatureInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CharacterFeatureInfo) == 0x000004, "Wrong alignment on FST_CharacterFeatureInfo");
static_assert(sizeof(FST_CharacterFeatureInfo) == 0x00000C, "Wrong size on FST_CharacterFeatureInfo");
static_assert(offsetof(FST_CharacterFeatureInfo, ID) == 0x000000, "Member 'FST_CharacterFeatureInfo::ID' has a wrong offset!");
static_assert(offsetof(FST_CharacterFeatureInfo, Rate) == 0x000008, "Member 'FST_CharacterFeatureInfo::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.SkillChainEffectData
// 0x0078 (0x0080 - 0x0008)
struct FSkillChainEffectData final : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mS;                                                // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mM;                                                // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mL;                                                // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillChainEffectData) == 0x000008, "Wrong alignment on FSkillChainEffectData");
static_assert(sizeof(FSkillChainEffectData) == 0x000080, "Wrong size on FSkillChainEffectData");
static_assert(offsetof(FSkillChainEffectData, mS) == 0x000008, "Member 'FSkillChainEffectData::mS' has a wrong offset!");
static_assert(offsetof(FSkillChainEffectData, mM) == 0x000030, "Member 'FSkillChainEffectData::mM' has a wrong offset!");
static_assert(offsetof(FSkillChainEffectData, mL) == 0x000058, "Member 'FSkillChainEffectData::mL' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CharacterActionInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_CharacterActionInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExeRate;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CharacterActionInfo) == 0x000004, "Wrong alignment on FST_CharacterActionInfo");
static_assert(sizeof(FST_CharacterActionInfo) == 0x000010, "Wrong size on FST_CharacterActionInfo");
static_assert(offsetof(FST_CharacterActionInfo, ID) == 0x000000, "Member 'FST_CharacterActionInfo::ID' has a wrong offset!");
static_assert(offsetof(FST_CharacterActionInfo, Rate) == 0x000008, "Member 'FST_CharacterActionInfo::Rate' has a wrong offset!");
static_assert(offsetof(FST_CharacterActionInfo, ExeRate) == 0x00000C, "Member 'FST_CharacterActionInfo::ExeRate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GuideSysLog
// 0x0018 (0x0018 - 0x0000)
struct FST_GuideSysLog final
{
public:
	class FName                                   mMessageID;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mVolcanoCollided;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mVolcanoUnCollided;                                // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         mOutputTimes;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         mContinuousTimes;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         mIntervalTimes;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_GuideSysLog) == 0x000004, "Wrong alignment on FST_GuideSysLog");
static_assert(sizeof(FST_GuideSysLog) == 0x000018, "Wrong size on FST_GuideSysLog");
static_assert(offsetof(FST_GuideSysLog, mMessageID) == 0x000000, "Member 'FST_GuideSysLog::mMessageID' has a wrong offset!");
static_assert(offsetof(FST_GuideSysLog, mVolcanoCollided) == 0x000008, "Member 'FST_GuideSysLog::mVolcanoCollided' has a wrong offset!");
static_assert(offsetof(FST_GuideSysLog, mVolcanoUnCollided) == 0x000009, "Member 'FST_GuideSysLog::mVolcanoUnCollided' has a wrong offset!");
static_assert(offsetof(FST_GuideSysLog, mOutputTimes) == 0x00000C, "Member 'FST_GuideSysLog::mOutputTimes' has a wrong offset!");
static_assert(offsetof(FST_GuideSysLog, mContinuousTimes) == 0x000010, "Member 'FST_GuideSysLog::mContinuousTimes' has a wrong offset!");
static_assert(offsetof(FST_GuideSysLog, mIntervalTimes) == 0x000014, "Member 'FST_GuideSysLog::mIntervalTimes' has a wrong offset!");

// ScriptStruct DarwinGame.ChoiceItemData
// 0x0010 (0x0010 - 0x0000)
struct FChoiceItemData final
{
public:
	class UTextWidgetData*                        Text;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidShortCutKey;                                  // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxisMappingType                              ShortCutKey;                                       // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChoiceItemData) == 0x000008, "Wrong alignment on FChoiceItemData");
static_assert(sizeof(FChoiceItemData) == 0x000010, "Wrong size on FChoiceItemData");
static_assert(offsetof(FChoiceItemData, Text) == 0x000000, "Member 'FChoiceItemData::Text' has a wrong offset!");
static_assert(offsetof(FChoiceItemData, ValidShortCutKey) == 0x000008, "Member 'FChoiceItemData::ValidShortCutKey' has a wrong offset!");
static_assert(offsetof(FChoiceItemData, ShortCutKey) == 0x000009, "Member 'FChoiceItemData::ShortCutKey' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SynthesisMenu
// 0x0020 (0x0020 - 0x0000)
struct FST_SynthesisMenu final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SynthesisMenu) == 0x000008, "Wrong alignment on FST_SynthesisMenu");
static_assert(sizeof(FST_SynthesisMenu) == 0x000020, "Wrong size on FST_SynthesisMenu");
static_assert(offsetof(FST_SynthesisMenu, Icon) == 0x000000, "Member 'FST_SynthesisMenu::Icon' has a wrong offset!");
static_assert(offsetof(FST_SynthesisMenu, Name) == 0x000008, "Member 'FST_SynthesisMenu::Name' has a wrong offset!");

// ScriptStruct DarwinGame.SkillEffectData
// 0x03F0 (0x03F8 - 0x0008)
struct FSkillEffectData final : public FEffectDataTableRawBase
{
public:
	struct FMagicShotPhaseEffectData              mOriginal;                                         // 0x0008(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mSub1;                                             // 0x00B0(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mSub2;                                             // 0x0158(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mSub3;                                             // 0x0200(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mSub4;                                             // 0x02A8(0x00A8)(Edit, NativeAccessSpecifierPublic)
	struct FMagicShotPhaseEffectData              mSub5;                                             // 0x0350(0x00A8)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillEffectData) == 0x000008, "Wrong alignment on FSkillEffectData");
static_assert(sizeof(FSkillEffectData) == 0x0003F8, "Wrong size on FSkillEffectData");
static_assert(offsetof(FSkillEffectData, mOriginal) == 0x000008, "Member 'FSkillEffectData::mOriginal' has a wrong offset!");
static_assert(offsetof(FSkillEffectData, mSub1) == 0x0000B0, "Member 'FSkillEffectData::mSub1' has a wrong offset!");
static_assert(offsetof(FSkillEffectData, mSub2) == 0x000158, "Member 'FSkillEffectData::mSub2' has a wrong offset!");
static_assert(offsetof(FSkillEffectData, mSub3) == 0x000200, "Member 'FSkillEffectData::mSub3' has a wrong offset!");
static_assert(offsetof(FSkillEffectData, mSub4) == 0x0002A8, "Member 'FSkillEffectData::mSub4' has a wrong offset!");
static_assert(offsetof(FSkillEffectData, mSub5) == 0x000350, "Member 'FSkillEffectData::mSub5' has a wrong offset!");

// ScriptStruct DarwinGame.ChoiceWindowData
// 0x0068 (0x0068 - 0x0000)
struct FChoiceWindowData final
{
public:
	TArray<struct FChoiceItemData>                ItemList;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAxisMappingType, int32>                 ShortCutKeyMap;                                    // 0x0010(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         DefaultItemIndex;                                  // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChoiceWindowData) == 0x000008, "Wrong alignment on FChoiceWindowData");
static_assert(sizeof(FChoiceWindowData) == 0x000068, "Wrong size on FChoiceWindowData");
static_assert(offsetof(FChoiceWindowData, ItemList) == 0x000000, "Member 'FChoiceWindowData::ItemList' has a wrong offset!");
static_assert(offsetof(FChoiceWindowData, ShortCutKeyMap) == 0x000010, "Member 'FChoiceWindowData::ShortCutKeyMap' has a wrong offset!");
static_assert(offsetof(FChoiceWindowData, DefaultItemIndex) == 0x000060, "Member 'FChoiceWindowData::DefaultItemIndex' has a wrong offset!");

// ScriptStruct DarwinGame.ST_RevengeBattleIdInfo
// 0x0018 (0x0020 - 0x0008)
struct FST_RevengeBattleIdInfo final : public FTableRowBase
{
public:
	ERivalTeamForce                               Force;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerUpperLevel;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_LotteryBattleID>            LotteryBattleIDs;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_RevengeBattleIdInfo) == 0x000008, "Wrong alignment on FST_RevengeBattleIdInfo");
static_assert(sizeof(FST_RevengeBattleIdInfo) == 0x000020, "Wrong size on FST_RevengeBattleIdInfo");
static_assert(offsetof(FST_RevengeBattleIdInfo, Force) == 0x000008, "Member 'FST_RevengeBattleIdInfo::Force' has a wrong offset!");
static_assert(offsetof(FST_RevengeBattleIdInfo, PlayerUpperLevel) == 0x00000C, "Member 'FST_RevengeBattleIdInfo::PlayerUpperLevel' has a wrong offset!");
static_assert(offsetof(FST_RevengeBattleIdInfo, LotteryBattleIDs) == 0x000010, "Member 'FST_RevengeBattleIdInfo::LotteryBattleIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinFixedDataTable
// 0x0020 (0x0028 - 0x0008)
struct FST_CoinFixedDataTable final : public FTableRowBase
{
public:
	int32                                         GroupID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoinType                                     Type;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoinRarity                                   Rarity;                                            // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KindId;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_CoinFeature>                FeatureList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CoinFixedDataTable) == 0x000008, "Wrong alignment on FST_CoinFixedDataTable");
static_assert(sizeof(FST_CoinFixedDataTable) == 0x000028, "Wrong size on FST_CoinFixedDataTable");
static_assert(offsetof(FST_CoinFixedDataTable, GroupID) == 0x000008, "Member 'FST_CoinFixedDataTable::GroupID' has a wrong offset!");
static_assert(offsetof(FST_CoinFixedDataTable, Type) == 0x00000C, "Member 'FST_CoinFixedDataTable::Type' has a wrong offset!");
static_assert(offsetof(FST_CoinFixedDataTable, Rarity) == 0x00000D, "Member 'FST_CoinFixedDataTable::Rarity' has a wrong offset!");
static_assert(offsetof(FST_CoinFixedDataTable, KindId) == 0x000010, "Member 'FST_CoinFixedDataTable::KindId' has a wrong offset!");
static_assert(offsetof(FST_CoinFixedDataTable, FeatureList) == 0x000018, "Member 'FST_CoinFixedDataTable::FeatureList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_KnowledgeCategoryMenu
// 0x0003 (0x0003 - 0x0000)
struct FST_KnowledgeCategoryMenu final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_KnowledgeCategoryMenu) == 0x000001, "Wrong alignment on FST_KnowledgeCategoryMenu");
static_assert(sizeof(FST_KnowledgeCategoryMenu) == 0x000003, "Wrong size on FST_KnowledgeCategoryMenu");

// ScriptStruct DarwinGame.SupportMagicPhaseEffectData
// 0x00F8 (0x0100 - 0x0008)
struct FSupportMagicPhaseEffectData final : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mShot;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mBullet;                                           // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mBeam;                                             // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSizeEffectData                        mHit;                                              // 0x0080(0x0080)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupportMagicPhaseEffectData) == 0x000008, "Wrong alignment on FSupportMagicPhaseEffectData");
static_assert(sizeof(FSupportMagicPhaseEffectData) == 0x000100, "Wrong size on FSupportMagicPhaseEffectData");
static_assert(offsetof(FSupportMagicPhaseEffectData, mShot) == 0x000008, "Member 'FSupportMagicPhaseEffectData::mShot' has a wrong offset!");
static_assert(offsetof(FSupportMagicPhaseEffectData, mBullet) == 0x000030, "Member 'FSupportMagicPhaseEffectData::mBullet' has a wrong offset!");
static_assert(offsetof(FSupportMagicPhaseEffectData, mBeam) == 0x000058, "Member 'FSupportMagicPhaseEffectData::mBeam' has a wrong offset!");
static_assert(offsetof(FSupportMagicPhaseEffectData, mHit) == 0x000080, "Member 'FSupportMagicPhaseEffectData::mHit' has a wrong offset!");

// ScriptStruct DarwinGame.SupportMagicEffectData
// 0x0400 (0x0408 - 0x0008)
struct FSupportMagicEffectData final : public FEffectDataTableRawBase
{
public:
	struct FSupportMagicPhaseEffectData           mLow;                                              // 0x0008(0x0100)(Edit, NativeAccessSpecifierPublic)
	struct FSupportMagicPhaseEffectData           mMiddle;                                           // 0x0108(0x0100)(Edit, NativeAccessSpecifierPublic)
	struct FSupportMagicPhaseEffectData           mHigh;                                             // 0x0208(0x0100)(Edit, NativeAccessSpecifierPublic)
	struct FSupportMagicPhaseEffectData           mHighest;                                          // 0x0308(0x0100)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupportMagicEffectData) == 0x000008, "Wrong alignment on FSupportMagicEffectData");
static_assert(sizeof(FSupportMagicEffectData) == 0x000408, "Wrong size on FSupportMagicEffectData");
static_assert(offsetof(FSupportMagicEffectData, mLow) == 0x000008, "Member 'FSupportMagicEffectData::mLow' has a wrong offset!");
static_assert(offsetof(FSupportMagicEffectData, mMiddle) == 0x000108, "Member 'FSupportMagicEffectData::mMiddle' has a wrong offset!");
static_assert(offsetof(FSupportMagicEffectData, mHigh) == 0x000208, "Member 'FSupportMagicEffectData::mHigh' has a wrong offset!");
static_assert(offsetof(FSupportMagicEffectData, mHighest) == 0x000308, "Member 'FSupportMagicEffectData::mHighest' has a wrong offset!");

// ScriptStruct DarwinGame.BaseEnvCueSheetList
// 0x0038 (0x0040 - 0x0008)
struct FBaseEnvCueSheetList final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundAtomCueSheet>      CueSheet;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loaded;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Comment;                                           // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseEnvCueSheetList) == 0x000008, "Wrong alignment on FBaseEnvCueSheetList");
static_assert(sizeof(FBaseEnvCueSheetList) == 0x000040, "Wrong size on FBaseEnvCueSheetList");
static_assert(offsetof(FBaseEnvCueSheetList, CueSheet) == 0x000008, "Member 'FBaseEnvCueSheetList::CueSheet' has a wrong offset!");
static_assert(offsetof(FBaseEnvCueSheetList, Loaded) == 0x000030, "Member 'FBaseEnvCueSheetList::Loaded' has a wrong offset!");
static_assert(offsetof(FBaseEnvCueSheetList, Comment) == 0x000034, "Member 'FBaseEnvCueSheetList::Comment' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinNameSortData
// 0x0010 (0x0018 - 0x0008)
struct FST_CoinNameSortData final : public FTableRowBase
{
public:
	class FName                                   StringTableKey;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Name50Order;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CoinNameSortData) == 0x000008, "Wrong alignment on FST_CoinNameSortData");
static_assert(sizeof(FST_CoinNameSortData) == 0x000018, "Wrong size on FST_CoinNameSortData");
static_assert(offsetof(FST_CoinNameSortData, StringTableKey) == 0x000008, "Member 'FST_CoinNameSortData::StringTableKey' has a wrong offset!");
static_assert(offsetof(FST_CoinNameSortData, Name50Order) == 0x000010, "Member 'FST_CoinNameSortData::Name50Order' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MainMenuCategory
// 0x0030 (0x0030 - 0x0000)
struct FST_MainMenuCategory final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMainMenuCategoryType                         Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UnlockFlag;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MainMenuCategory) == 0x000008, "Wrong alignment on FST_MainMenuCategory");
static_assert(sizeof(FST_MainMenuCategory) == 0x000030, "Wrong size on FST_MainMenuCategory");
static_assert(offsetof(FST_MainMenuCategory, Text) == 0x000000, "Member 'FST_MainMenuCategory::Text' has a wrong offset!");
static_assert(offsetof(FST_MainMenuCategory, Image) == 0x000018, "Member 'FST_MainMenuCategory::Image' has a wrong offset!");
static_assert(offsetof(FST_MainMenuCategory, Type) == 0x000020, "Member 'FST_MainMenuCategory::Type' has a wrong offset!");
static_assert(offsetof(FST_MainMenuCategory, UnlockFlag) == 0x000024, "Member 'FST_MainMenuCategory::UnlockFlag' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinRarityDataTable
// 0x0018 (0x0020 - 0x0008)
struct FST_CoinRarityDataTable final : public FTableRowBase
{
public:
	int32                                         LevelMin;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Rarity;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CoinRarityDataTable) == 0x000008, "Wrong alignment on FST_CoinRarityDataTable");
static_assert(sizeof(FST_CoinRarityDataTable) == 0x000020, "Wrong size on FST_CoinRarityDataTable");
static_assert(offsetof(FST_CoinRarityDataTable, LevelMin) == 0x000008, "Member 'FST_CoinRarityDataTable::LevelMin' has a wrong offset!");
static_assert(offsetof(FST_CoinRarityDataTable, LevelMax) == 0x00000C, "Member 'FST_CoinRarityDataTable::LevelMax' has a wrong offset!");
static_assert(offsetof(FST_CoinRarityDataTable, Rarity) == 0x000010, "Member 'FST_CoinRarityDataTable::Rarity' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinSlotParameterDataTable
// 0x0010 (0x0018 - 0x0008)
struct FST_CoinSlotParameterDataTable final : public FTableRowBase
{
public:
	TArray<int32>                                 LevelArray;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CoinSlotParameterDataTable) == 0x000008, "Wrong alignment on FST_CoinSlotParameterDataTable");
static_assert(sizeof(FST_CoinSlotParameterDataTable) == 0x000018, "Wrong size on FST_CoinSlotParameterDataTable");
static_assert(offsetof(FST_CoinSlotParameterDataTable, LevelArray) == 0x000008, "Member 'FST_CoinSlotParameterDataTable::LevelArray' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MovementDataTable
// 0x0070 (0x0078 - 0x0008)
struct FST_MovementDataTable final : public FTableRowBase
{
public:
	float                                         MaxWalkSpeed;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEcoWalkSpeed;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEcoAcceleration;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootSpeed;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeedLocked;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootSpeedLocked;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEscapeWalkSpeed;                                // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeedCrouched;                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStepHeight;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkableFloorAngle;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxJumpHeight;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFlySpeed;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirControl;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageStartHeight;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEscapeWalkSpeedToFootpad;                       // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToIdleState;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToSheathe;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanParkour;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ParkourStartSpeed;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AngleToObject;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IncidentAngleToObject;                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunUpRayLength;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRunUpHeight;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightThatChangeToSwim;                            // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSwimSpeed;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationalInterpSpeedInWater;                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightThatRaiseSlpash;                             // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MovementDataTable) == 0x000008, "Wrong alignment on FST_MovementDataTable");
static_assert(sizeof(FST_MovementDataTable) == 0x000078, "Wrong size on FST_MovementDataTable");
static_assert(offsetof(FST_MovementDataTable, MaxWalkSpeed) == 0x000008, "Member 'FST_MovementDataTable::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxEcoWalkSpeed) == 0x00000C, "Member 'FST_MovementDataTable::MaxEcoWalkSpeed' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxEcoAcceleration) == 0x000010, "Member 'FST_MovementDataTable::MaxEcoAcceleration' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, RootSpeed) == 0x000014, "Member 'FST_MovementDataTable::RootSpeed' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxWalkSpeedLocked) == 0x000018, "Member 'FST_MovementDataTable::MaxWalkSpeedLocked' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, RootSpeedLocked) == 0x00001C, "Member 'FST_MovementDataTable::RootSpeedLocked' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxEscapeWalkSpeed) == 0x000020, "Member 'FST_MovementDataTable::MaxEscapeWalkSpeed' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxWalkSpeedCrouched) == 0x000024, "Member 'FST_MovementDataTable::MaxWalkSpeedCrouched' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxStepHeight) == 0x000028, "Member 'FST_MovementDataTable::MaxStepHeight' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, WalkableFloorAngle) == 0x00002C, "Member 'FST_MovementDataTable::WalkableFloorAngle' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxJumpHeight) == 0x000030, "Member 'FST_MovementDataTable::MaxJumpHeight' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, GravityScale) == 0x000034, "Member 'FST_MovementDataTable::GravityScale' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxFlySpeed) == 0x000038, "Member 'FST_MovementDataTable::MaxFlySpeed' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, AirControl) == 0x00003C, "Member 'FST_MovementDataTable::AirControl' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, DamageStartHeight) == 0x000040, "Member 'FST_MovementDataTable::DamageStartHeight' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxEscapeWalkSpeedToFootpad) == 0x000044, "Member 'FST_MovementDataTable::MaxEscapeWalkSpeedToFootpad' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, TimeToIdleState) == 0x000048, "Member 'FST_MovementDataTable::TimeToIdleState' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, TimeToSheathe) == 0x00004C, "Member 'FST_MovementDataTable::TimeToSheathe' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, bCanParkour) == 0x000050, "Member 'FST_MovementDataTable::bCanParkour' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, ParkourStartSpeed) == 0x000054, "Member 'FST_MovementDataTable::ParkourStartSpeed' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, AngleToObject) == 0x000058, "Member 'FST_MovementDataTable::AngleToObject' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, IncidentAngleToObject) == 0x00005C, "Member 'FST_MovementDataTable::IncidentAngleToObject' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, RunUpRayLength) == 0x000060, "Member 'FST_MovementDataTable::RunUpRayLength' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxRunUpHeight) == 0x000064, "Member 'FST_MovementDataTable::MaxRunUpHeight' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, HeightThatChangeToSwim) == 0x000068, "Member 'FST_MovementDataTable::HeightThatChangeToSwim' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, MaxSwimSpeed) == 0x00006C, "Member 'FST_MovementDataTable::MaxSwimSpeed' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, RotationalInterpSpeedInWater) == 0x000070, "Member 'FST_MovementDataTable::RotationalInterpSpeedInWater' has a wrong offset!");
static_assert(offsetof(FST_MovementDataTable, HeightThatRaiseSlpash) == 0x000074, "Member 'FST_MovementDataTable::HeightThatRaiseSlpash' has a wrong offset!");

// ScriptStruct DarwinGame.FootTerrainEffectData
// 0x00A0 (0x00A8 - 0x0008)
struct FFootTerrainEffectData final : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mWalk;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mRun;                                              // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mJump;                                             // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mLand;                                             // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootTerrainEffectData) == 0x000008, "Wrong alignment on FFootTerrainEffectData");
static_assert(sizeof(FFootTerrainEffectData) == 0x0000A8, "Wrong size on FFootTerrainEffectData");
static_assert(offsetof(FFootTerrainEffectData, mWalk) == 0x000008, "Member 'FFootTerrainEffectData::mWalk' has a wrong offset!");
static_assert(offsetof(FFootTerrainEffectData, mRun) == 0x000030, "Member 'FFootTerrainEffectData::mRun' has a wrong offset!");
static_assert(offsetof(FFootTerrainEffectData, mJump) == 0x000058, "Member 'FFootTerrainEffectData::mJump' has a wrong offset!");
static_assert(offsetof(FFootTerrainEffectData, mLand) == 0x000080, "Member 'FFootTerrainEffectData::mLand' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CollectionPointData
// 0x001C (0x001C - 0x0000)
struct FST_CollectionPointData final
{
public:
	EAreaType                                     AreaType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjID;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnupID;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPick;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPick;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemTableID;                                       // 0x0014(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CollectionPointData) == 0x000004, "Wrong alignment on FST_CollectionPointData");
static_assert(sizeof(FST_CollectionPointData) == 0x00001C, "Wrong size on FST_CollectionPointData");
static_assert(offsetof(FST_CollectionPointData, AreaType) == 0x000000, "Member 'FST_CollectionPointData::AreaType' has a wrong offset!");
static_assert(offsetof(FST_CollectionPointData, ObjID) == 0x000004, "Member 'FST_CollectionPointData::ObjID' has a wrong offset!");
static_assert(offsetof(FST_CollectionPointData, UnupID) == 0x000008, "Member 'FST_CollectionPointData::UnupID' has a wrong offset!");
static_assert(offsetof(FST_CollectionPointData, MinPick) == 0x00000C, "Member 'FST_CollectionPointData::MinPick' has a wrong offset!");
static_assert(offsetof(FST_CollectionPointData, MaxPick) == 0x000010, "Member 'FST_CollectionPointData::MaxPick' has a wrong offset!");
static_assert(offsetof(FST_CollectionPointData, ItemTableID) == 0x000014, "Member 'FST_CollectionPointData::ItemTableID' has a wrong offset!");

// ScriptStruct DarwinGame.STPlayerActionReleaseTable
// 0x00D0 (0x00D8 - 0x0008)
struct FSTPlayerActionReleaseTable final : public FTableRowBase
{
public:
	class FString                                 FlagName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedClearedEventID1;                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedClearedEventID2;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedClearedEventID3;                               // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedClearedQuestID1;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedClearedQuestID2;                               // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedClearedQuestID3;                               // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedItemID1;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedItemID2;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedItemID3;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedCharacterID1;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedCharacterID2;                                  // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NeedCharacterID3;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSTPlayerActionReleaseTable) == 0x000008, "Wrong alignment on FSTPlayerActionReleaseTable");
static_assert(sizeof(FSTPlayerActionReleaseTable) == 0x0000D8, "Wrong size on FSTPlayerActionReleaseTable");
static_assert(offsetof(FSTPlayerActionReleaseTable, FlagName) == 0x000008, "Member 'FSTPlayerActionReleaseTable::FlagName' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedClearedEventID1) == 0x000018, "Member 'FSTPlayerActionReleaseTable::NeedClearedEventID1' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedClearedEventID2) == 0x000028, "Member 'FSTPlayerActionReleaseTable::NeedClearedEventID2' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedClearedEventID3) == 0x000038, "Member 'FSTPlayerActionReleaseTable::NeedClearedEventID3' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedClearedQuestID1) == 0x000048, "Member 'FSTPlayerActionReleaseTable::NeedClearedQuestID1' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedClearedQuestID2) == 0x000058, "Member 'FSTPlayerActionReleaseTable::NeedClearedQuestID2' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedClearedQuestID3) == 0x000068, "Member 'FSTPlayerActionReleaseTable::NeedClearedQuestID3' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedItemID1) == 0x000078, "Member 'FSTPlayerActionReleaseTable::NeedItemID1' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedItemID2) == 0x000088, "Member 'FSTPlayerActionReleaseTable::NeedItemID2' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedItemID3) == 0x000098, "Member 'FSTPlayerActionReleaseTable::NeedItemID3' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedCharacterID1) == 0x0000A8, "Member 'FSTPlayerActionReleaseTable::NeedCharacterID1' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedCharacterID2) == 0x0000B8, "Member 'FSTPlayerActionReleaseTable::NeedCharacterID2' has a wrong offset!");
static_assert(offsetof(FSTPlayerActionReleaseTable, NeedCharacterID3) == 0x0000C8, "Member 'FSTPlayerActionReleaseTable::NeedCharacterID3' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventReplaceText
// 0x0018 (0x0020 - 0x0008)
struct FST_EventReplaceText final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventReplaceText) == 0x000008, "Wrong alignment on FST_EventReplaceText");
static_assert(sizeof(FST_EventReplaceText) == 0x000020, "Wrong size on FST_EventReplaceText");
static_assert(offsetof(FST_EventReplaceText, Text) == 0x000008, "Member 'FST_EventReplaceText::Text' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CollectionPoint
// 0x0018 (0x0020 - 0x0008)
struct FST_CollectionPoint final : public FTableRowBase
{
public:
	EAreaType                                     AreaType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollectionPointState                         State;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinPick;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPick;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemTableID;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErosionRateRecovery;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CollectionPoint) == 0x000008, "Wrong alignment on FST_CollectionPoint");
static_assert(sizeof(FST_CollectionPoint) == 0x000020, "Wrong size on FST_CollectionPoint");
static_assert(offsetof(FST_CollectionPoint, AreaType) == 0x000008, "Member 'FST_CollectionPoint::AreaType' has a wrong offset!");
static_assert(offsetof(FST_CollectionPoint, State) == 0x000009, "Member 'FST_CollectionPoint::State' has a wrong offset!");
static_assert(offsetof(FST_CollectionPoint, MinPick) == 0x00000C, "Member 'FST_CollectionPoint::MinPick' has a wrong offset!");
static_assert(offsetof(FST_CollectionPoint, MaxPick) == 0x000010, "Member 'FST_CollectionPoint::MaxPick' has a wrong offset!");
static_assert(offsetof(FST_CollectionPoint, ItemTableID) == 0x000014, "Member 'FST_CollectionPoint::ItemTableID' has a wrong offset!");
static_assert(offsetof(FST_CollectionPoint, ErosionRateRecovery) == 0x00001C, "Member 'FST_CollectionPoint::ErosionRateRecovery' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIHubClerkData
// 0x0058 (0x0060 - 0x0008)
struct FST_UIHubClerkData final : public FTableRowBase
{
public:
	EDisplayHubType                               HubType;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KindId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCListID;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClearEquipments;                                 // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scall;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotate;                                            // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 FirstPlayAnimationPath;                            // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIHubClerkData) == 0x000008, "Wrong alignment on FST_UIHubClerkData");
static_assert(sizeof(FST_UIHubClerkData) == 0x000060, "Wrong size on FST_UIHubClerkData");
static_assert(offsetof(FST_UIHubClerkData, HubType) == 0x000008, "Member 'FST_UIHubClerkData::HubType' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, KindId) == 0x00000C, "Member 'FST_UIHubClerkData::KindId' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, NPCListID) == 0x000010, "Member 'FST_UIHubClerkData::NPCListID' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, ObjectPath) == 0x000018, "Member 'FST_UIHubClerkData::ObjectPath' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, IsClearEquipments) == 0x000030, "Member 'FST_UIHubClerkData::IsClearEquipments' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, Position) == 0x000034, "Member 'FST_UIHubClerkData::Position' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, Scall) == 0x000040, "Member 'FST_UIHubClerkData::Scall' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, Rotate) == 0x000044, "Member 'FST_UIHubClerkData::Rotate' has a wrong offset!");
static_assert(offsetof(FST_UIHubClerkData, FirstPlayAnimationPath) == 0x000050, "Member 'FST_UIHubClerkData::FirstPlayAnimationPath' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CollectionPointItemInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_CollectionPointItemInfo final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CollectionPointItemInfo) == 0x000004, "Wrong alignment on FST_CollectionPointItemInfo");
static_assert(sizeof(FST_CollectionPointItemInfo) == 0x000010, "Wrong size on FST_CollectionPointItemInfo");
static_assert(offsetof(FST_CollectionPointItemInfo, ItemId) == 0x000000, "Member 'FST_CollectionPointItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FST_CollectionPointItemInfo, Num) == 0x000008, "Member 'FST_CollectionPointItemInfo::Num' has a wrong offset!");
static_assert(offsetof(FST_CollectionPointItemInfo, Probability) == 0x00000C, "Member 'FST_CollectionPointItemInfo::Probability' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CollectionPointGetItem
// 0x0010 (0x0018 - 0x0008)
struct FST_CollectionPointGetItem final : public FTableRowBase
{
public:
	TArray<struct FST_CollectionPointItemInfo>    Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CollectionPointGetItem) == 0x000008, "Wrong alignment on FST_CollectionPointGetItem");
static_assert(sizeof(FST_CollectionPointGetItem) == 0x000018, "Wrong size on FST_CollectionPointGetItem");
static_assert(offsetof(FST_CollectionPointGetItem, Items) == 0x000008, "Member 'FST_CollectionPointGetItem::Items' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteBodyMotionSetting
// 0x0010 (0x0010 - 0x0000)
struct FEmoteBodyMotionSetting final
{
public:
	EEmoteBodyMotionPhase                         InitPhase;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCycleLoop;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteBodyMotionSetting) == 0x000004, "Wrong alignment on FEmoteBodyMotionSetting");
static_assert(sizeof(FEmoteBodyMotionSetting) == 0x000010, "Wrong size on FEmoteBodyMotionSetting");
static_assert(offsetof(FEmoteBodyMotionSetting, InitPhase) == 0x000000, "Member 'FEmoteBodyMotionSetting::InitPhase' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionSetting, LoopTime) == 0x000004, "Member 'FEmoteBodyMotionSetting::LoopTime' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionSetting, bCycleLoop) == 0x000008, "Member 'FEmoteBodyMotionSetting::bCycleLoop' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionSetting, BlendTime) == 0x00000C, "Member 'FEmoteBodyMotionSetting::BlendTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TextSelectInfo
// 0x0020 (0x0020 - 0x0000)
struct FST_TextSelectInfo final
{
public:
	int32                                         BaseIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NextIndex;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSelectNo;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CancelSelectNo;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TextSelectInfo) == 0x000008, "Wrong alignment on FST_TextSelectInfo");
static_assert(sizeof(FST_TextSelectInfo) == 0x000020, "Wrong size on FST_TextSelectInfo");
static_assert(offsetof(FST_TextSelectInfo, BaseIndex) == 0x000000, "Member 'FST_TextSelectInfo::BaseIndex' has a wrong offset!");
static_assert(offsetof(FST_TextSelectInfo, NextIndex) == 0x000008, "Member 'FST_TextSelectInfo::NextIndex' has a wrong offset!");
static_assert(offsetof(FST_TextSelectInfo, DefaultSelectNo) == 0x000018, "Member 'FST_TextSelectInfo::DefaultSelectNo' has a wrong offset!");
static_assert(offsetof(FST_TextSelectInfo, CancelSelectNo) == 0x00001C, "Member 'FST_TextSelectInfo::CancelSelectNo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TextGotoInfo
// 0x0008 (0x0008 - 0x0000)
struct FST_TextGotoInfo final
{
public:
	int32                                         FromID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToID;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TextGotoInfo) == 0x000004, "Wrong alignment on FST_TextGotoInfo");
static_assert(sizeof(FST_TextGotoInfo) == 0x000008, "Wrong size on FST_TextGotoInfo");
static_assert(offsetof(FST_TextGotoInfo, FromID) == 0x000000, "Member 'FST_TextGotoInfo::FromID' has a wrong offset!");
static_assert(offsetof(FST_TextGotoInfo, ToID) == 0x000004, "Member 'FST_TextGotoInfo::ToID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventTalkData
// 0x0038 (0x0040 - 0x0008)
struct FST_EventTalkData final : public FTableRowBase
{
public:
	class FName                                   TextID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextIdList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_TextSelectInfo>             TextSelectInfo;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_TextGotoInfo>               TextGotoInfo;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventTalkData) == 0x000008, "Wrong alignment on FST_EventTalkData");
static_assert(sizeof(FST_EventTalkData) == 0x000040, "Wrong size on FST_EventTalkData");
static_assert(offsetof(FST_EventTalkData, TextID) == 0x000008, "Member 'FST_EventTalkData::TextID' has a wrong offset!");
static_assert(offsetof(FST_EventTalkData, TextIdList) == 0x000010, "Member 'FST_EventTalkData::TextIdList' has a wrong offset!");
static_assert(offsetof(FST_EventTalkData, TextSelectInfo) == 0x000020, "Member 'FST_EventTalkData::TextSelectInfo' has a wrong offset!");
static_assert(offsetof(FST_EventTalkData, TextGotoInfo) == 0x000030, "Member 'FST_EventTalkData::TextGotoInfo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TouchAttackCollision
// 0x0010 (0x0078 - 0x0068)
struct FST_TouchAttackCollision final : public FST_CommonCollision
{
public:
	class FName                                   AttachSocketName;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachTargetType                             Target;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_TouchAttackCollision) == 0x000008, "Wrong alignment on FST_TouchAttackCollision");
static_assert(sizeof(FST_TouchAttackCollision) == 0x000078, "Wrong size on FST_TouchAttackCollision");
static_assert(offsetof(FST_TouchAttackCollision, AttachSocketName) == 0x000068, "Member 'FST_TouchAttackCollision::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FST_TouchAttackCollision, Target) == 0x000070, "Member 'FST_TouchAttackCollision::Target' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ShootAttackCollision
// 0x0000 (0x0068 - 0x0068)
struct FST_ShootAttackCollision final : public FST_CommonCollision
{
};
static_assert(alignof(FST_ShootAttackCollision) == 0x000008, "Wrong alignment on FST_ShootAttackCollision");
static_assert(sizeof(FST_ShootAttackCollision) == 0x000068, "Wrong size on FST_ShootAttackCollision");

// ScriptStruct DarwinGame.ST_UIAppraisePopupCountResource
// 0x0010 (0x0018 - 0x0008)
struct FST_UIAppraisePopupCountResource final : public FTableRowBase
{
public:
	class UTexture2D*                             YellowCountTexture;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PinkCountTexture;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIAppraisePopupCountResource) == 0x000008, "Wrong alignment on FST_UIAppraisePopupCountResource");
static_assert(sizeof(FST_UIAppraisePopupCountResource) == 0x000018, "Wrong size on FST_UIAppraisePopupCountResource");
static_assert(offsetof(FST_UIAppraisePopupCountResource, YellowCountTexture) == 0x000008, "Member 'FST_UIAppraisePopupCountResource::YellowCountTexture' has a wrong offset!");
static_assert(offsetof(FST_UIAppraisePopupCountResource, PinkCountTexture) == 0x000010, "Member 'FST_UIAppraisePopupCountResource::PinkCountTexture' has a wrong offset!");

// ScriptStruct DarwinGame.EventProgressLevelDataSub
// 0x0010 (0x0010 - 0x0000)
struct FEventProgressLevelDataSub final
{
public:
	TArray<class FName>                           LevelName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventProgressLevelDataSub) == 0x000008, "Wrong alignment on FEventProgressLevelDataSub");
static_assert(sizeof(FEventProgressLevelDataSub) == 0x000010, "Wrong size on FEventProgressLevelDataSub");
static_assert(offsetof(FEventProgressLevelDataSub, LevelName) == 0x000000, "Member 'FEventProgressLevelDataSub::LevelName' has a wrong offset!");

// ScriptStruct DarwinGame.EventProgressLevelData
// 0x0010 (0x0018 - 0x0008)
struct FEventProgressLevelData final : public FTableRowBase
{
public:
	TArray<struct FEventProgressLevelDataSub>     LevelList;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventProgressLevelData) == 0x000008, "Wrong alignment on FEventProgressLevelData");
static_assert(sizeof(FEventProgressLevelData) == 0x000018, "Wrong size on FEventProgressLevelData");
static_assert(offsetof(FEventProgressLevelData, LevelList) == 0x000008, "Member 'FEventProgressLevelData::LevelList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_Parameter_Data
// 0x0048 (0x0048 - 0x0000)
struct FST_PM_DetaileWin_Parameter_Data final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Category;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BodyText;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_Parameter_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_Parameter_Data");
static_assert(sizeof(FST_PM_DetaileWin_Parameter_Data) == 0x000048, "Wrong size on FST_PM_DetaileWin_Parameter_Data");
static_assert(offsetof(FST_PM_DetaileWin_Parameter_Data, Icon) == 0x000000, "Member 'FST_PM_DetaileWin_Parameter_Data::Icon' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Parameter_Data, Category) == 0x000008, "Member 'FST_PM_DetaileWin_Parameter_Data::Category' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Parameter_Data, BodyText) == 0x000030, "Member 'FST_PM_DetaileWin_Parameter_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.ColorGradingWhiteBalanceSetting
// 0x0008 (0x0008 - 0x0000)
struct FColorGradingWhiteBalanceSetting final
{
public:
	float                                         Temp;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tint;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorGradingWhiteBalanceSetting) == 0x000004, "Wrong alignment on FColorGradingWhiteBalanceSetting");
static_assert(sizeof(FColorGradingWhiteBalanceSetting) == 0x000008, "Wrong size on FColorGradingWhiteBalanceSetting");
static_assert(offsetof(FColorGradingWhiteBalanceSetting, Temp) == 0x000000, "Member 'FColorGradingWhiteBalanceSetting::Temp' has a wrong offset!");
static_assert(offsetof(FColorGradingWhiteBalanceSetting, Tint) == 0x000004, "Member 'FColorGradingWhiteBalanceSetting::Tint' has a wrong offset!");

// ScriptStruct DarwinGame.ColorGradingShadowsSetting
// 0x0010 (0x0060 - 0x0050)
struct FColorGradingShadowsSetting final : public FColorGradePerRangeSettings
{
public:
	float                                         ShadowsMax;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorGradingShadowsSetting) == 0x000010, "Wrong alignment on FColorGradingShadowsSetting");
static_assert(sizeof(FColorGradingShadowsSetting) == 0x000060, "Wrong size on FColorGradingShadowsSetting");
static_assert(offsetof(FColorGradingShadowsSetting, ShadowsMax) == 0x000050, "Member 'FColorGradingShadowsSetting::ShadowsMax' has a wrong offset!");

// ScriptStruct DarwinGame.ColorGradingHighlightsSetting
// 0x0010 (0x0060 - 0x0050)
struct FColorGradingHighlightsSetting final : public FColorGradePerRangeSettings
{
public:
	float                                         HightlightsMin;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorGradingHighlightsSetting) == 0x000010, "Wrong alignment on FColorGradingHighlightsSetting");
static_assert(sizeof(FColorGradingHighlightsSetting) == 0x000060, "Wrong size on FColorGradingHighlightsSetting");
static_assert(offsetof(FColorGradingHighlightsSetting, HightlightsMin) == 0x000050, "Member 'FColorGradingHighlightsSetting::HightlightsMin' has a wrong offset!");

// ScriptStruct DarwinGame.ColorGradingMiscSetting
// 0x0028 (0x0028 - 0x0000)
struct FColorGradingMiscSetting final
{
public:
	float                                         BlueCorrection;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpandGamut;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneColorTint;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorGradingLUTIntensity;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ColorGrandingLUT;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorGradingMiscSetting) == 0x000008, "Wrong alignment on FColorGradingMiscSetting");
static_assert(sizeof(FColorGradingMiscSetting) == 0x000028, "Wrong size on FColorGradingMiscSetting");
static_assert(offsetof(FColorGradingMiscSetting, BlueCorrection) == 0x000000, "Member 'FColorGradingMiscSetting::BlueCorrection' has a wrong offset!");
static_assert(offsetof(FColorGradingMiscSetting, ExpandGamut) == 0x000004, "Member 'FColorGradingMiscSetting::ExpandGamut' has a wrong offset!");
static_assert(offsetof(FColorGradingMiscSetting, SceneColorTint) == 0x000008, "Member 'FColorGradingMiscSetting::SceneColorTint' has a wrong offset!");
static_assert(offsetof(FColorGradingMiscSetting, ColorGradingLUTIntensity) == 0x000018, "Member 'FColorGradingMiscSetting::ColorGradingLUTIntensity' has a wrong offset!");
static_assert(offsetof(FColorGradingMiscSetting, ColorGrandingLUT) == 0x000020, "Member 'FColorGradingMiscSetting::ColorGrandingLUT' has a wrong offset!");

// ScriptStruct DarwinGame.ColorGradingSetting
// 0x01E0 (0x01E0 - 0x0000)
struct FColorGradingSetting final
{
public:
	struct FColorGradingWhiteBalanceSetting       WhiteBalance;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditWhiteBalance;                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradePerRangeSettings            Global;                                            // 0x0010(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditGlobal;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradingShadowsSetting            Shadows;                                           // 0x0070(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditShadows;                                     // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0xF];                                       // 0x00D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradePerRangeSettings            Midtones;                                          // 0x00E0(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditMidtones;                                    // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0xF];                                      // 0x0131(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradingHighlightsSetting         Highlights;                                        // 0x0140(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditHighLights;                                  // 0x01A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradingMiscSetting               Misc;                                              // 0x01A8(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditMisc;                                        // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0xF];                                      // 0x01D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorGradingSetting) == 0x000010, "Wrong alignment on FColorGradingSetting");
static_assert(sizeof(FColorGradingSetting) == 0x0001E0, "Wrong size on FColorGradingSetting");
static_assert(offsetof(FColorGradingSetting, WhiteBalance) == 0x000000, "Member 'FColorGradingSetting::WhiteBalance' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, IsEditWhiteBalance) == 0x000008, "Member 'FColorGradingSetting::IsEditWhiteBalance' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, Global) == 0x000010, "Member 'FColorGradingSetting::Global' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, IsEditGlobal) == 0x000060, "Member 'FColorGradingSetting::IsEditGlobal' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, Shadows) == 0x000070, "Member 'FColorGradingSetting::Shadows' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, IsEditShadows) == 0x0000D0, "Member 'FColorGradingSetting::IsEditShadows' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, Midtones) == 0x0000E0, "Member 'FColorGradingSetting::Midtones' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, IsEditMidtones) == 0x000130, "Member 'FColorGradingSetting::IsEditMidtones' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, Highlights) == 0x000140, "Member 'FColorGradingSetting::Highlights' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, IsEditHighLights) == 0x0001A0, "Member 'FColorGradingSetting::IsEditHighLights' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, Misc) == 0x0001A8, "Member 'FColorGradingSetting::Misc' has a wrong offset!");
static_assert(offsetof(FColorGradingSetting, IsEditMisc) == 0x0001D0, "Member 'FColorGradingSetting::IsEditMisc' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFukidashiColor
// 0x0030 (0x0038 - 0x0008)
struct FST_UIFukidashiColor final : public FTableRowBase
{
public:
	struct FLinearColor                           BackgroundColor;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextOutLineColor;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIFukidashiColor) == 0x000008, "Wrong alignment on FST_UIFukidashiColor");
static_assert(sizeof(FST_UIFukidashiColor) == 0x000038, "Wrong size on FST_UIFukidashiColor");
static_assert(offsetof(FST_UIFukidashiColor, BackgroundColor) == 0x000008, "Member 'FST_UIFukidashiColor::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FST_UIFukidashiColor, TextColor) == 0x000018, "Member 'FST_UIFukidashiColor::TextColor' has a wrong offset!");
static_assert(offsetof(FST_UIFukidashiColor, TextOutLineColor) == 0x000028, "Member 'FST_UIFukidashiColor::TextOutLineColor' has a wrong offset!");

// ScriptStruct DarwinGame.ST_VisionSelectPanelData
// 0x0018 (0x0018 - 0x0000)
struct FST_VisionSelectPanelData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 Capture;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TutorialCapture;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_VisionSelectPanelData) == 0x000008, "Wrong alignment on FST_VisionSelectPanelData");
static_assert(sizeof(FST_VisionSelectPanelData) == 0x000018, "Wrong size on FST_VisionSelectPanelData");
static_assert(offsetof(FST_VisionSelectPanelData, Capture) == 0x000008, "Member 'FST_VisionSelectPanelData::Capture' has a wrong offset!");
static_assert(offsetof(FST_VisionSelectPanelData, TutorialCapture) == 0x000010, "Member 'FST_VisionSelectPanelData::TutorialCapture' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteBodyMotionAsset
// 0x0018 (0x0018 - 0x0000)
struct FEmoteBodyMotionAsset final
{
public:
	class UAnimSequence*                          Start;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Loop;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          End;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteBodyMotionAsset) == 0x000008, "Wrong alignment on FEmoteBodyMotionAsset");
static_assert(sizeof(FEmoteBodyMotionAsset) == 0x000018, "Wrong size on FEmoteBodyMotionAsset");
static_assert(offsetof(FEmoteBodyMotionAsset, Start) == 0x000000, "Member 'FEmoteBodyMotionAsset::Start' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionAsset, Loop) == 0x000008, "Member 'FEmoteBodyMotionAsset::Loop' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionAsset, End) == 0x000010, "Member 'FEmoteBodyMotionAsset::End' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteBodyMotionRequest
// 0x0030 (0x0030 - 0x0000)
struct FEmoteBodyMotionRequest final
{
public:
	struct FEmoteBodyMotionAsset                  AnimAssets;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEmoteBodyMotionSetting                Setting;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmoteBodyMotionRequest) == 0x000008, "Wrong alignment on FEmoteBodyMotionRequest");
static_assert(sizeof(FEmoteBodyMotionRequest) == 0x000030, "Wrong size on FEmoteBodyMotionRequest");
static_assert(offsetof(FEmoteBodyMotionRequest, AnimAssets) == 0x000000, "Member 'FEmoteBodyMotionRequest::AnimAssets' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionRequest, Setting) == 0x000018, "Member 'FEmoteBodyMotionRequest::Setting' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionRequest, PlayTime) == 0x000028, "Member 'FEmoteBodyMotionRequest::PlayTime' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteBodyMotionInfo
// 0x0038 (0x0038 - 0x0000)
struct FEmoteBodyMotionInfo final
{
public:
	struct FEmoteBodyMotionRequest                Request;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsPlayMotion;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequestStopMotion;                                // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTrigger;                                       // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmoteBodyMotionInfo) == 0x000008, "Wrong alignment on FEmoteBodyMotionInfo");
static_assert(sizeof(FEmoteBodyMotionInfo) == 0x000038, "Wrong size on FEmoteBodyMotionInfo");
static_assert(offsetof(FEmoteBodyMotionInfo, Request) == 0x000000, "Member 'FEmoteBodyMotionInfo::Request' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionInfo, bIsPlayMotion) == 0x000030, "Member 'FEmoteBodyMotionInfo::bIsPlayMotion' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionInfo, bRequestStopMotion) == 0x000031, "Member 'FEmoteBodyMotionInfo::bRequestStopMotion' has a wrong offset!");
static_assert(offsetof(FEmoteBodyMotionInfo, bEndTrigger) == 0x000032, "Member 'FEmoteBodyMotionInfo::bEndTrigger' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteSwitchMotionData
// 0x0018 (0x0018 - 0x0000)
struct FEmoteSwitchMotionData final
{
public:
	EEmoteMotionSwitch                            CurrentGroup;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEmoteBodyMotionInfo>           Groups;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteSwitchMotionData) == 0x000008, "Wrong alignment on FEmoteSwitchMotionData");
static_assert(sizeof(FEmoteSwitchMotionData) == 0x000018, "Wrong size on FEmoteSwitchMotionData");
static_assert(offsetof(FEmoteSwitchMotionData, CurrentGroup) == 0x000000, "Member 'FEmoteSwitchMotionData::CurrentGroup' has a wrong offset!");
static_assert(offsetof(FEmoteSwitchMotionData, Groups) == 0x000008, "Member 'FEmoteSwitchMotionData::Groups' has a wrong offset!");

// ScriptStruct DarwinGame.LiftEventStruct
// 0x0050 (0x0050 - 0x0000)
struct FLiftEventStruct final : public FReactionEventBaseStruct
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsEnd;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiftEventStruct) == 0x000010, "Wrong alignment on FLiftEventStruct");
static_assert(sizeof(FLiftEventStruct) == 0x000050, "Wrong size on FLiftEventStruct");
static_assert(offsetof(FLiftEventStruct, Target) == 0x000000, "Member 'FLiftEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FLiftEventStruct, RelativeTransform) == 0x000010, "Member 'FLiftEventStruct::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FLiftEventStruct, bIsEnd) == 0x000040, "Member 'FLiftEventStruct::bIsEnd' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BranchSelectInfo
// 0x0018 (0x0018 - 0x0000)
struct FST_BranchSelectInfo final
{
public:
	TArray<int32>                                 NextIndex;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSelectNo;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CancelSelectNo;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BranchSelectInfo) == 0x000008, "Wrong alignment on FST_BranchSelectInfo");
static_assert(sizeof(FST_BranchSelectInfo) == 0x000018, "Wrong size on FST_BranchSelectInfo");
static_assert(offsetof(FST_BranchSelectInfo, NextIndex) == 0x000000, "Member 'FST_BranchSelectInfo::NextIndex' has a wrong offset!");
static_assert(offsetof(FST_BranchSelectInfo, DefaultSelectNo) == 0x000010, "Member 'FST_BranchSelectInfo::DefaultSelectNo' has a wrong offset!");
static_assert(offsetof(FST_BranchSelectInfo, CancelSelectNo) == 0x000014, "Member 'FST_BranchSelectInfo::CancelSelectNo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventTalktBranchData
// 0x0020 (0x0020 - 0x0000)
struct FST_EventTalktBranchData final
{
public:
	TArray<struct FST_TalkEventInfo>              BranchBase;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_BranchSelectInfo>           BranchTo;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventTalktBranchData) == 0x000008, "Wrong alignment on FST_EventTalktBranchData");
static_assert(sizeof(FST_EventTalktBranchData) == 0x000020, "Wrong size on FST_EventTalktBranchData");
static_assert(offsetof(FST_EventTalktBranchData, BranchBase) == 0x000000, "Member 'FST_EventTalktBranchData::BranchBase' has a wrong offset!");
static_assert(offsetof(FST_EventTalktBranchData, BranchTo) == 0x000010, "Member 'FST_EventTalktBranchData::BranchTo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TextGoto
// 0x0014 (0x0014 - 0x0000)
struct FST_TextGoto final
{
public:
	class FName                                   FromID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToID;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventType                                    EventType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_TextGoto) == 0x000004, "Wrong alignment on FST_TextGoto");
static_assert(sizeof(FST_TextGoto) == 0x000014, "Wrong size on FST_TextGoto");
static_assert(offsetof(FST_TextGoto, FromID) == 0x000000, "Member 'FST_TextGoto::FromID' has a wrong offset!");
static_assert(offsetof(FST_TextGoto, ToID) == 0x000008, "Member 'FST_TextGoto::ToID' has a wrong offset!");
static_assert(offsetof(FST_TextGoto, EventType) == 0x000010, "Member 'FST_TextGoto::EventType' has a wrong offset!");

// ScriptStruct DarwinGame.CallEventStruct
// 0x0058 (0x0058 - 0x0000)
struct FCallEventStruct final : public FReactionEventBaseStruct
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventType                                    EventType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuestID;                                           // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   QuestState;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_EventTalktBranchData               TalkBranchSettingsNew;                             // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FST_TextGoto>                   TextGotoSettingNew;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCallEventStruct) == 0x000008, "Wrong alignment on FCallEventStruct");
static_assert(sizeof(FCallEventStruct) == 0x000058, "Wrong size on FCallEventStruct");
static_assert(offsetof(FCallEventStruct, EventID) == 0x000000, "Member 'FCallEventStruct::EventID' has a wrong offset!");
static_assert(offsetof(FCallEventStruct, EventType) == 0x000010, "Member 'FCallEventStruct::EventType' has a wrong offset!");
static_assert(offsetof(FCallEventStruct, QuestID) == 0x000014, "Member 'FCallEventStruct::QuestID' has a wrong offset!");
static_assert(offsetof(FCallEventStruct, QuestState) == 0x00001C, "Member 'FCallEventStruct::QuestState' has a wrong offset!");
static_assert(offsetof(FCallEventStruct, HitActor) == 0x000020, "Member 'FCallEventStruct::HitActor' has a wrong offset!");
static_assert(offsetof(FCallEventStruct, TalkBranchSettingsNew) == 0x000028, "Member 'FCallEventStruct::TalkBranchSettingsNew' has a wrong offset!");
static_assert(offsetof(FCallEventStruct, TextGotoSettingNew) == 0x000048, "Member 'FCallEventStruct::TextGotoSettingNew' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UI3DDispatchDirectingResource
// 0x00B8 (0x00C0 - 0x0008)
struct FST_UI3DDispatchDirectingResource final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UAnimSequence>           DeparturesAnimationPath;                           // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeparturesTime;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeparturesLocation;                                // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           SuccessAnimationPath;                              // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessTime;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuccessLocation;                                   // 0x006C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           FailedAnimationPath;                               // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedTime;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FailedLocation;                                    // 0x00A4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StampLocation;                                     // 0x00B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UI3DDispatchDirectingResource) == 0x000008, "Wrong alignment on FST_UI3DDispatchDirectingResource");
static_assert(sizeof(FST_UI3DDispatchDirectingResource) == 0x0000C0, "Wrong size on FST_UI3DDispatchDirectingResource");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, DeparturesAnimationPath) == 0x000008, "Member 'FST_UI3DDispatchDirectingResource::DeparturesAnimationPath' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, DeparturesTime) == 0x000030, "Member 'FST_UI3DDispatchDirectingResource::DeparturesTime' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, DeparturesLocation) == 0x000034, "Member 'FST_UI3DDispatchDirectingResource::DeparturesLocation' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, SuccessAnimationPath) == 0x000040, "Member 'FST_UI3DDispatchDirectingResource::SuccessAnimationPath' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, SuccessTime) == 0x000068, "Member 'FST_UI3DDispatchDirectingResource::SuccessTime' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, SuccessLocation) == 0x00006C, "Member 'FST_UI3DDispatchDirectingResource::SuccessLocation' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, FailedAnimationPath) == 0x000078, "Member 'FST_UI3DDispatchDirectingResource::FailedAnimationPath' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, FailedTime) == 0x0000A0, "Member 'FST_UI3DDispatchDirectingResource::FailedTime' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, FailedLocation) == 0x0000A4, "Member 'FST_UI3DDispatchDirectingResource::FailedLocation' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, Scale) == 0x0000B0, "Member 'FST_UI3DDispatchDirectingResource::Scale' has a wrong offset!");
static_assert(offsetof(FST_UI3DDispatchDirectingResource, StampLocation) == 0x0000B4, "Member 'FST_UI3DDispatchDirectingResource::StampLocation' has a wrong offset!");

// ScriptStruct DarwinGame.EmotePlayingData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FEmotePlayingData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmotePlayingData) == 0x000008, "Wrong alignment on FEmotePlayingData");
static_assert(sizeof(FEmotePlayingData) == 0x000050, "Wrong size on FEmotePlayingData");

// ScriptStruct DarwinGame.ST_ComboTimngDataTable
// 0x0008 (0x0010 - 0x0008)
struct FST_ComboTimngDataTable final : public FTableRowBase
{
public:
	int32                                         Min;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ComboTimngDataTable) == 0x000008, "Wrong alignment on FST_ComboTimngDataTable");
static_assert(sizeof(FST_ComboTimngDataTable) == 0x000010, "Wrong size on FST_ComboTimngDataTable");
static_assert(offsetof(FST_ComboTimngDataTable, Min) == 0x000008, "Member 'FST_ComboTimngDataTable::Min' has a wrong offset!");
static_assert(offsetof(FST_ComboTimngDataTable, Max) == 0x00000C, "Member 'FST_ComboTimngDataTable::Max' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteStampSetting
// 0x0008 (0x0008 - 0x0000)
struct FEmoteStampSetting final
{
public:
	EStampFrameType                               FrameType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteStampSetting) == 0x000004, "Wrong alignment on FEmoteStampSetting");
static_assert(sizeof(FEmoteStampSetting) == 0x000008, "Wrong size on FEmoteStampSetting");
static_assert(offsetof(FEmoteStampSetting, FrameType) == 0x000000, "Member 'FEmoteStampSetting::FrameType' has a wrong offset!");
static_assert(offsetof(FEmoteStampSetting, LoopCount) == 0x000004, "Member 'FEmoteStampSetting::LoopCount' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CommonEmoteSettingData
// 0x0010 (0x0018 - 0x0008)
struct FST_CommonEmoteSettingData final : public FTableRowBase
{
public:
	EStampIconType                                StampType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteStampSetting                     StampSetting;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EEmoteFaceType                                FaceType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CommonEmoteSettingData) == 0x000008, "Wrong alignment on FST_CommonEmoteSettingData");
static_assert(sizeof(FST_CommonEmoteSettingData) == 0x000018, "Wrong size on FST_CommonEmoteSettingData");
static_assert(offsetof(FST_CommonEmoteSettingData, StampType) == 0x000008, "Member 'FST_CommonEmoteSettingData::StampType' has a wrong offset!");
static_assert(offsetof(FST_CommonEmoteSettingData, StampSetting) == 0x00000C, "Member 'FST_CommonEmoteSettingData::StampSetting' has a wrong offset!");
static_assert(offsetof(FST_CommonEmoteSettingData, FaceType) == 0x000014, "Member 'FST_CommonEmoteSettingData::FaceType' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteVocalizeSetting
// 0x0008 (0x0008 - 0x0000)
struct FEmoteVocalizeSetting final
{
public:
	EEmoteVocalizeType                            VocalizeType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteVocalizeSetting) == 0x000004, "Wrong alignment on FEmoteVocalizeSetting");
static_assert(sizeof(FEmoteVocalizeSetting) == 0x000008, "Wrong size on FEmoteVocalizeSetting");
static_assert(offsetof(FEmoteVocalizeSetting, VocalizeType) == 0x000000, "Member 'FEmoteVocalizeSetting::VocalizeType' has a wrong offset!");
static_assert(offsetof(FEmoteVocalizeSetting, BlendTime) == 0x000004, "Member 'FEmoteVocalizeSetting::BlendTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GeneraterAreaInfo
// 0x000C (0x000C - 0x0000)
struct FST_GeneraterAreaInfo final
{
public:
	float                                         Front;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Side;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Back;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_GeneraterAreaInfo) == 0x000004, "Wrong alignment on FST_GeneraterAreaInfo");
static_assert(sizeof(FST_GeneraterAreaInfo) == 0x00000C, "Wrong size on FST_GeneraterAreaInfo");
static_assert(offsetof(FST_GeneraterAreaInfo, Front) == 0x000000, "Member 'FST_GeneraterAreaInfo::Front' has a wrong offset!");
static_assert(offsetof(FST_GeneraterAreaInfo, Side) == 0x000004, "Member 'FST_GeneraterAreaInfo::Side' has a wrong offset!");
static_assert(offsetof(FST_GeneraterAreaInfo, Back) == 0x000008, "Member 'FST_GeneraterAreaInfo::Back' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CommonGenereterEnableInfo
// 0x0010 (0x0018 - 0x0008)
struct FST_CommonGenereterEnableInfo final : public FTableRowBase
{
public:
	struct FST_GeneraterAreaInfo                  Exclusion;                                         // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CommonGenereterEnableInfo) == 0x000008, "Wrong alignment on FST_CommonGenereterEnableInfo");
static_assert(sizeof(FST_CommonGenereterEnableInfo) == 0x000018, "Wrong size on FST_CommonGenereterEnableInfo");
static_assert(offsetof(FST_CommonGenereterEnableInfo, Exclusion) == 0x000008, "Member 'FST_CommonGenereterEnableInfo::Exclusion' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteBlendDataBase
// 0x0010 (0x0010 - 0x0000)
struct FEmoteBlendDataBase
{
public:
	float                                         OpenPoseFrameTime;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClosePoseFrameTime;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEmote;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendRate;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteBlendDataBase) == 0x000004, "Wrong alignment on FEmoteBlendDataBase");
static_assert(sizeof(FEmoteBlendDataBase) == 0x000010, "Wrong size on FEmoteBlendDataBase");
static_assert(offsetof(FEmoteBlendDataBase, OpenPoseFrameTime) == 0x000000, "Member 'FEmoteBlendDataBase::OpenPoseFrameTime' has a wrong offset!");
static_assert(offsetof(FEmoteBlendDataBase, ClosePoseFrameTime) == 0x000004, "Member 'FEmoteBlendDataBase::ClosePoseFrameTime' has a wrong offset!");
static_assert(offsetof(FEmoteBlendDataBase, bUseEmote) == 0x000008, "Member 'FEmoteBlendDataBase::bUseEmote' has a wrong offset!");
static_assert(offsetof(FEmoteBlendDataBase, BlendRate) == 0x00000C, "Member 'FEmoteBlendDataBase::BlendRate' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteBlinkData
// 0x0000 (0x0010 - 0x0010)
struct FEmoteBlinkData final : public FEmoteBlendDataBase
{
};
static_assert(alignof(FEmoteBlinkData) == 0x000004, "Wrong alignment on FEmoteBlinkData");
static_assert(sizeof(FEmoteBlinkData) == 0x000010, "Wrong size on FEmoteBlinkData");

// ScriptStruct DarwinGame.ST_CommonMonsterAssetData
// 0x0028 (0x0030 - 0x0008)
struct FST_CommonMonsterAssetData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 SoftAssetPtr;                                      // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CommonMonsterAssetData) == 0x000008, "Wrong alignment on FST_CommonMonsterAssetData");
static_assert(sizeof(FST_CommonMonsterAssetData) == 0x000030, "Wrong size on FST_CommonMonsterAssetData");
static_assert(offsetof(FST_CommonMonsterAssetData, SoftAssetPtr) == 0x000008, "Member 'FST_CommonMonsterAssetData::SoftAssetPtr' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFacilityFoodData
// 0x0008 (0x0030 - 0x0028)
struct FST_UIFacilityFoodData final : public FST_UIFacilityFoodItem
{
public:
	EFoodItemCategory                             Category;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIFacilityFoodData) == 0x000008, "Wrong alignment on FST_UIFacilityFoodData");
static_assert(sizeof(FST_UIFacilityFoodData) == 0x000030, "Wrong size on FST_UIFacilityFoodData");
static_assert(offsetof(FST_UIFacilityFoodData, Category) == 0x000028, "Member 'FST_UIFacilityFoodData::Category' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EnemySpawnAreaDistance
// 0x0008 (0x0008 - 0x0000)
struct FST_EnemySpawnAreaDistance final
{
public:
	float                                         Near;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Far;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EnemySpawnAreaDistance) == 0x000004, "Wrong alignment on FST_EnemySpawnAreaDistance");
static_assert(sizeof(FST_EnemySpawnAreaDistance) == 0x000008, "Wrong size on FST_EnemySpawnAreaDistance");
static_assert(offsetof(FST_EnemySpawnAreaDistance, Near) == 0x000000, "Member 'FST_EnemySpawnAreaDistance::Near' has a wrong offset!");
static_assert(offsetof(FST_EnemySpawnAreaDistance, Far) == 0x000004, "Member 'FST_EnemySpawnAreaDistance::Far' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtfifactCategoryInfo
// 0x0028 (0x0028 - 0x0000)
struct FST_ArtfifactCategoryInfo final
{
public:
	EArtifactCategoryType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EArtifactLeftMenuType                         LeftMenuType;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CategoryId;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtfifactCategoryInfo) == 0x000008, "Wrong alignment on FST_ArtfifactCategoryInfo");
static_assert(sizeof(FST_ArtfifactCategoryInfo) == 0x000028, "Wrong size on FST_ArtfifactCategoryInfo");
static_assert(offsetof(FST_ArtfifactCategoryInfo, Type) == 0x000000, "Member 'FST_ArtfifactCategoryInfo::Type' has a wrong offset!");
static_assert(offsetof(FST_ArtfifactCategoryInfo, Name) == 0x000008, "Member 'FST_ArtfifactCategoryInfo::Name' has a wrong offset!");
static_assert(offsetof(FST_ArtfifactCategoryInfo, LeftMenuType) == 0x000020, "Member 'FST_ArtfifactCategoryInfo::LeftMenuType' has a wrong offset!");
static_assert(offsetof(FST_ArtfifactCategoryInfo, CategoryId) == 0x000024, "Member 'FST_ArtfifactCategoryInfo::CategoryId' has a wrong offset!");

// ScriptStruct DarwinGame.CustomEquipmentInfomation
// 0x001C (0x001C - 0x0000)
struct FCustomEquipmentInfomation final
{
public:
	class FName                                   KindId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomEquipmentType                   CustomEquipmentsState;                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ERivalTeamForce                               RivalTeamForce;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeader;                                         // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomEquipmentInfomation) == 0x000004, "Wrong alignment on FCustomEquipmentInfomation");
static_assert(sizeof(FCustomEquipmentInfomation) == 0x00001C, "Wrong size on FCustomEquipmentInfomation");
static_assert(offsetof(FCustomEquipmentInfomation, KindId) == 0x000000, "Member 'FCustomEquipmentInfomation::KindId' has a wrong offset!");
static_assert(offsetof(FCustomEquipmentInfomation, CustomEquipmentsState) == 0x000008, "Member 'FCustomEquipmentInfomation::CustomEquipmentsState' has a wrong offset!");
static_assert(offsetof(FCustomEquipmentInfomation, RivalTeamForce) == 0x000018, "Member 'FCustomEquipmentInfomation::RivalTeamForce' has a wrong offset!");
static_assert(offsetof(FCustomEquipmentInfomation, bIsLeader) == 0x000019, "Member 'FCustomEquipmentInfomation::bIsLeader' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ResistanceResult
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FST_ResistanceResult final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ResistanceResult) == 0x000004, "Wrong alignment on FST_ResistanceResult");
static_assert(sizeof(FST_ResistanceResult) == 0x000008, "Wrong size on FST_ResistanceResult");

// ScriptStruct DarwinGame.DamageShapeSetting
// 0x000C (0x000C - 0x0000)
struct FDamageShapeSetting final
{
public:
	bool                                          EnableTwoBoneScale;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetBoneName;                                    // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageShapeSetting) == 0x000004, "Wrong alignment on FDamageShapeSetting");
static_assert(sizeof(FDamageShapeSetting) == 0x00000C, "Wrong size on FDamageShapeSetting");
static_assert(offsetof(FDamageShapeSetting, EnableTwoBoneScale) == 0x000000, "Member 'FDamageShapeSetting::EnableTwoBoneScale' has a wrong offset!");
static_assert(offsetof(FDamageShapeSetting, TargetBoneName) == 0x000004, "Member 'FDamageShapeSetting::TargetBoneName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIZOrderDataTableRow
// 0x0008 (0x0010 - 0x0008)
struct FST_UIZOrderDataTableRow final : public FTableRowBase
{
public:
	int32                                         ZOrder;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIZOrderDataTableRow) == 0x000008, "Wrong alignment on FST_UIZOrderDataTableRow");
static_assert(sizeof(FST_UIZOrderDataTableRow) == 0x000010, "Wrong size on FST_UIZOrderDataTableRow");
static_assert(offsetof(FST_UIZOrderDataTableRow, ZOrder) == 0x000008, "Member 'FST_UIZOrderDataTableRow::ZOrder' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIHubMessageData
// 0x0020 (0x0028 - 0x0008)
struct FST_UIHubMessageData final : public FTableRowBase
{
public:
	EDisplayHubType                               HubType;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIHubMessageData) == 0x000008, "Wrong alignment on FST_UIHubMessageData");
static_assert(sizeof(FST_UIHubMessageData) == 0x000028, "Wrong size on FST_UIHubMessageData");
static_assert(offsetof(FST_UIHubMessageData, HubType) == 0x000008, "Member 'FST_UIHubMessageData::HubType' has a wrong offset!");
static_assert(offsetof(FST_UIHubMessageData, IsNew) == 0x000009, "Member 'FST_UIHubMessageData::IsNew' has a wrong offset!");
static_assert(offsetof(FST_UIHubMessageData, Message) == 0x000010, "Member 'FST_UIHubMessageData::Message' has a wrong offset!");

// ScriptStruct DarwinGame.DamagePointBaseData
// 0x000C (0x000C - 0x0000)
struct FDamagePointBaseData final
{
public:
	bool                                          fatalPoint;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         damageRate;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isActionOnly;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamagePointBaseData) == 0x000004, "Wrong alignment on FDamagePointBaseData");
static_assert(sizeof(FDamagePointBaseData) == 0x00000C, "Wrong size on FDamagePointBaseData");
static_assert(offsetof(FDamagePointBaseData, fatalPoint) == 0x000000, "Member 'FDamagePointBaseData::fatalPoint' has a wrong offset!");
static_assert(offsetof(FDamagePointBaseData, damageRate) == 0x000004, "Member 'FDamagePointBaseData::damageRate' has a wrong offset!");
static_assert(offsetof(FDamagePointBaseData, isActionOnly) == 0x000008, "Member 'FDamagePointBaseData::isActionOnly' has a wrong offset!");

// ScriptStruct DarwinGame.DamagePointFlag
// 0x0002 (0x0002 - 0x0000)
struct FDamagePointFlag final
{
public:
	bool                                          enableFatalPoint;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         hiddenFlag;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FDamagePointFlag) == 0x000001, "Wrong alignment on FDamagePointFlag");
static_assert(sizeof(FDamagePointFlag) == 0x000002, "Wrong size on FDamagePointFlag");
static_assert(offsetof(FDamagePointFlag, enableFatalPoint) == 0x000000, "Member 'FDamagePointFlag::enableFatalPoint' has a wrong offset!");
static_assert(offsetof(FDamagePointFlag, hiddenFlag) == 0x000001, "Member 'FDamagePointFlag::hiddenFlag' has a wrong offset!");

// ScriptStruct DarwinGame.DamagePointParameter
// 0x0010 (0x0010 - 0x0000)
struct FDamagePointParameter final
{
public:
	struct FDamagePointBaseData                   Data;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamagePointFlag                       Flags;                                             // 0x000C(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamagePointParameter) == 0x000004, "Wrong alignment on FDamagePointParameter");
static_assert(sizeof(FDamagePointParameter) == 0x000010, "Wrong size on FDamagePointParameter");
static_assert(offsetof(FDamagePointParameter, Data) == 0x000000, "Member 'FDamagePointParameter::Data' has a wrong offset!");
static_assert(offsetof(FDamagePointParameter, Flags) == 0x00000C, "Member 'FDamagePointParameter::Flags' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListTextDataInfo
// 0x0120 (0x0128 - 0x0008)
struct FST_QuestListTextDataInfo final : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BeforeText;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AfterText;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ChildPreText;                                      // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   OpenText;                                          // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BeforeQuoteText;                                   // 0x0098(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AfterQuoteText;                                    // 0x00B0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DeliveryCancelText;                                // 0x00C8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HeadLine;                                          // 0x00E0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ClearEventID;                                      // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CancelEventID;                                     // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotOrderTexrtID;                                   // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OrderTextID;                                       // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearableTextID;                                   // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearedTextID;                                     // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestListTextDataInfo) == 0x000008, "Wrong alignment on FST_QuestListTextDataInfo");
static_assert(sizeof(FST_QuestListTextDataInfo) == 0x000128, "Wrong size on FST_QuestListTextDataInfo");
static_assert(offsetof(FST_QuestListTextDataInfo, Title) == 0x000008, "Member 'FST_QuestListTextDataInfo::Title' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, BeforeText) == 0x000020, "Member 'FST_QuestListTextDataInfo::BeforeText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, AfterText) == 0x000038, "Member 'FST_QuestListTextDataInfo::AfterText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, ChildPreText) == 0x000050, "Member 'FST_QuestListTextDataInfo::ChildPreText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, GuideText) == 0x000068, "Member 'FST_QuestListTextDataInfo::GuideText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, OpenText) == 0x000080, "Member 'FST_QuestListTextDataInfo::OpenText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, BeforeQuoteText) == 0x000098, "Member 'FST_QuestListTextDataInfo::BeforeQuoteText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, AfterQuoteText) == 0x0000B0, "Member 'FST_QuestListTextDataInfo::AfterQuoteText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, DeliveryCancelText) == 0x0000C8, "Member 'FST_QuestListTextDataInfo::DeliveryCancelText' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, HeadLine) == 0x0000E0, "Member 'FST_QuestListTextDataInfo::HeadLine' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, ClearEventID) == 0x0000F8, "Member 'FST_QuestListTextDataInfo::ClearEventID' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, CancelEventID) == 0x000100, "Member 'FST_QuestListTextDataInfo::CancelEventID' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, NotOrderTexrtID) == 0x000108, "Member 'FST_QuestListTextDataInfo::NotOrderTexrtID' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, OrderTextID) == 0x000110, "Member 'FST_QuestListTextDataInfo::OrderTextID' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, ClearableTextID) == 0x000118, "Member 'FST_QuestListTextDataInfo::ClearableTextID' has a wrong offset!");
static_assert(offsetof(FST_QuestListTextDataInfo, ClearedTextID) == 0x000120, "Member 'FST_QuestListTextDataInfo::ClearedTextID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIEnemyTextColor
// 0x0020 (0x0028 - 0x0008)
struct FST_UIEnemyTextColor final : public FTableRowBase
{
public:
	struct FLinearColor                           TextColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextOutLineColor;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIEnemyTextColor) == 0x000008, "Wrong alignment on FST_UIEnemyTextColor");
static_assert(sizeof(FST_UIEnemyTextColor) == 0x000028, "Wrong size on FST_UIEnemyTextColor");
static_assert(offsetof(FST_UIEnemyTextColor, TextColor) == 0x000008, "Member 'FST_UIEnemyTextColor::TextColor' has a wrong offset!");
static_assert(offsetof(FST_UIEnemyTextColor, TextOutLineColor) == 0x000018, "Member 'FST_UIEnemyTextColor::TextOutLineColor' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EnemyAssignmentDataTable
// 0x0020 (0x0028 - 0x0008)
struct FST_EnemyAssignmentDataTable final : public FTableRowBase
{
public:
	class FName                                   OneEnemyParamIDName;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIParamIDName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIThinkIDName;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIRootIDName;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EnemyAssignmentDataTable) == 0x000008, "Wrong alignment on FST_EnemyAssignmentDataTable");
static_assert(sizeof(FST_EnemyAssignmentDataTable) == 0x000028, "Wrong size on FST_EnemyAssignmentDataTable");
static_assert(offsetof(FST_EnemyAssignmentDataTable, OneEnemyParamIDName) == 0x000008, "Member 'FST_EnemyAssignmentDataTable::OneEnemyParamIDName' has a wrong offset!");
static_assert(offsetof(FST_EnemyAssignmentDataTable, AIParamIDName) == 0x000010, "Member 'FST_EnemyAssignmentDataTable::AIParamIDName' has a wrong offset!");
static_assert(offsetof(FST_EnemyAssignmentDataTable, AIThinkIDName) == 0x000018, "Member 'FST_EnemyAssignmentDataTable::AIThinkIDName' has a wrong offset!");
static_assert(offsetof(FST_EnemyAssignmentDataTable, AIRootIDName) == 0x000020, "Member 'FST_EnemyAssignmentDataTable::AIRootIDName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UITutorialGuideText
// 0x0048 (0x0050 - 0x0008)
struct FST_UITutorialGuideText final : public FTableRowBase
{
public:
	class FText                                   CommandText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CommandText_Keyboard;                              // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ActionText;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UITutorialGuideText) == 0x000008, "Wrong alignment on FST_UITutorialGuideText");
static_assert(sizeof(FST_UITutorialGuideText) == 0x000050, "Wrong size on FST_UITutorialGuideText");
static_assert(offsetof(FST_UITutorialGuideText, CommandText) == 0x000008, "Member 'FST_UITutorialGuideText::CommandText' has a wrong offset!");
static_assert(offsetof(FST_UITutorialGuideText, CommandText_Keyboard) == 0x000020, "Member 'FST_UITutorialGuideText::CommandText_Keyboard' has a wrong offset!");
static_assert(offsetof(FST_UITutorialGuideText, ActionText) == 0x000038, "Member 'FST_UITutorialGuideText::ActionText' has a wrong offset!");

// ScriptStruct DarwinGame.ASyncLoadInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FASyncLoadInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASyncLoadInfo) == 0x000008, "Wrong alignment on FASyncLoadInfo");
static_assert(sizeof(FASyncLoadInfo) == 0x000010, "Wrong size on FASyncLoadInfo");

// ScriptStruct DarwinGame.SkyLightSetting
// 0x0010 (0x0010 - 0x0000)
struct FSkyLightSetting final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      LightColorCurve;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyLightSetting) == 0x000008, "Wrong alignment on FSkyLightSetting");
static_assert(sizeof(FSkyLightSetting) == 0x000010, "Wrong size on FSkyLightSetting");
static_assert(offsetof(FSkyLightSetting, Intensity) == 0x000000, "Member 'FSkyLightSetting::Intensity' has a wrong offset!");
static_assert(offsetof(FSkyLightSetting, LightColorCurve) == 0x000008, "Member 'FSkyLightSetting::LightColorCurve' has a wrong offset!");

// ScriptStruct DarwinGame.DarwinViewBlendRequestParam
// 0x0024 (0x0024 - 0x0000)
struct FDarwinViewBlendRequestParam final
{
public:
	EViewBlendFunctionType                        BlendFunctionType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewBlendRateType                            BlendRateType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BeginLocation;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BeginRotation;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRateEaseExpo;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDarwinViewBlendRequestParam) == 0x000004, "Wrong alignment on FDarwinViewBlendRequestParam");
static_assert(sizeof(FDarwinViewBlendRequestParam) == 0x000024, "Wrong size on FDarwinViewBlendRequestParam");
static_assert(offsetof(FDarwinViewBlendRequestParam, BlendFunctionType) == 0x000000, "Member 'FDarwinViewBlendRequestParam::BlendFunctionType' has a wrong offset!");
static_assert(offsetof(FDarwinViewBlendRequestParam, BlendRateType) == 0x000001, "Member 'FDarwinViewBlendRequestParam::BlendRateType' has a wrong offset!");
static_assert(offsetof(FDarwinViewBlendRequestParam, BeginLocation) == 0x000004, "Member 'FDarwinViewBlendRequestParam::BeginLocation' has a wrong offset!");
static_assert(offsetof(FDarwinViewBlendRequestParam, BeginRotation) == 0x000010, "Member 'FDarwinViewBlendRequestParam::BeginRotation' has a wrong offset!");
static_assert(offsetof(FDarwinViewBlendRequestParam, BlendTime) == 0x00001C, "Member 'FDarwinViewBlendRequestParam::BlendTime' has a wrong offset!");
static_assert(offsetof(FDarwinViewBlendRequestParam, BlendRateEaseExpo) == 0x000020, "Member 'FDarwinViewBlendRequestParam::BlendRateEaseExpo' has a wrong offset!");

// ScriptStruct DarwinGame.DarwinViewBlendParam
// 0x0028 (0x0028 - 0x0000)
struct FDarwinViewBlendParam final
{
public:
	struct FDarwinViewBlendRequestParam           RequestParam;                                      // 0x0000(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDarwinViewBlendParam) == 0x000004, "Wrong alignment on FDarwinViewBlendParam");
static_assert(sizeof(FDarwinViewBlendParam) == 0x000028, "Wrong size on FDarwinViewBlendParam");
static_assert(offsetof(FDarwinViewBlendParam, RequestParam) == 0x000000, "Member 'FDarwinViewBlendParam::RequestParam' has a wrong offset!");
static_assert(offsetof(FDarwinViewBlendParam, ElapsedTime) == 0x000024, "Member 'FDarwinViewBlendParam::ElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.GetEletrialEventStruct
// 0x0010 (0x0010 - 0x0000)
struct FGetEletrialEventStruct final : public FReactionEventBaseStruct
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EletrialPoint;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetEletrialEventStruct) == 0x000008, "Wrong alignment on FGetEletrialEventStruct");
static_assert(sizeof(FGetEletrialEventStruct) == 0x000010, "Wrong size on FGetEletrialEventStruct");
static_assert(offsetof(FGetEletrialEventStruct, Target) == 0x000000, "Member 'FGetEletrialEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FGetEletrialEventStruct, EletrialPoint) == 0x000008, "Member 'FGetEletrialEventStruct::EletrialPoint' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterGrowTypeStatus
// 0x0006 (0x0006 - 0x0000)
struct FST_MonsterGrowTypeStatus final
{
public:
	EMonsterGrowType                              HP;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterGrowType                              MP;                                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterGrowType                              Str;                                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterGrowType                              Def;                                               // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterGrowType                              Dex;                                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterGrowType                              Mag;                                               // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterGrowTypeStatus) == 0x000001, "Wrong alignment on FST_MonsterGrowTypeStatus");
static_assert(sizeof(FST_MonsterGrowTypeStatus) == 0x000006, "Wrong size on FST_MonsterGrowTypeStatus");
static_assert(offsetof(FST_MonsterGrowTypeStatus, HP) == 0x000000, "Member 'FST_MonsterGrowTypeStatus::HP' has a wrong offset!");
static_assert(offsetof(FST_MonsterGrowTypeStatus, MP) == 0x000001, "Member 'FST_MonsterGrowTypeStatus::MP' has a wrong offset!");
static_assert(offsetof(FST_MonsterGrowTypeStatus, Str) == 0x000002, "Member 'FST_MonsterGrowTypeStatus::Str' has a wrong offset!");
static_assert(offsetof(FST_MonsterGrowTypeStatus, Def) == 0x000003, "Member 'FST_MonsterGrowTypeStatus::Def' has a wrong offset!");
static_assert(offsetof(FST_MonsterGrowTypeStatus, Dex) == 0x000004, "Member 'FST_MonsterGrowTypeStatus::Dex' has a wrong offset!");
static_assert(offsetof(FST_MonsterGrowTypeStatus, Mag) == 0x000005, "Member 'FST_MonsterGrowTypeStatus::Mag' has a wrong offset!");

// ScriptStruct DarwinGame.DarwinCameraResetParam
// 0x001C (0x001C - 0x0000)
struct FDarwinCameraResetParam final
{
public:
	ECameraResetFunctionType                      ResetFunction;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDarwinCameraResetParam) == 0x000004, "Wrong alignment on FDarwinCameraResetParam");
static_assert(sizeof(FDarwinCameraResetParam) == 0x00001C, "Wrong size on FDarwinCameraResetParam");
static_assert(offsetof(FDarwinCameraResetParam, ResetFunction) == 0x000000, "Member 'FDarwinCameraResetParam::ResetFunction' has a wrong offset!");
static_assert(offsetof(FDarwinCameraResetParam, TargetLocation) == 0x000004, "Member 'FDarwinCameraResetParam::TargetLocation' has a wrong offset!");
static_assert(offsetof(FDarwinCameraResetParam, TargetRotation) == 0x000010, "Member 'FDarwinCameraResetParam::TargetRotation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_RequirementInfo
// 0x000C (0x000C - 0x0000)
struct FST_RequirementInfo final
{
public:
	EMonsterRequirementType                       Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_RequirementInfo) == 0x000004, "Wrong alignment on FST_RequirementInfo");
static_assert(sizeof(FST_RequirementInfo) == 0x00000C, "Wrong size on FST_RequirementInfo");
static_assert(offsetof(FST_RequirementInfo, Type) == 0x000000, "Member 'FST_RequirementInfo::Type' has a wrong offset!");
static_assert(offsetof(FST_RequirementInfo, ID) == 0x000004, "Member 'FST_RequirementInfo::ID' has a wrong offset!");
static_assert(offsetof(FST_RequirementInfo, Num) == 0x000008, "Member 'FST_RequirementInfo::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIBoardRequireItem
// 0x0058 (0x0060 - 0x0008)
struct FST_UIBoardRequireItem final : public FTableRowBase
{
public:
	int32                                         KindId;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankId;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_RequirementInfo                    ConfirmRequirement;                                // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_RequirementInfo>            RandRequirement1;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_RequirementInfo>            RandRequirement2;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_RequirementInfo>            RandRequirement3;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_RequirementInfo>            RandRequirement4;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIBoardRequireItem) == 0x000008, "Wrong alignment on FST_UIBoardRequireItem");
static_assert(sizeof(FST_UIBoardRequireItem) == 0x000060, "Wrong size on FST_UIBoardRequireItem");
static_assert(offsetof(FST_UIBoardRequireItem, KindId) == 0x000008, "Member 'FST_UIBoardRequireItem::KindId' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireItem, RankId) == 0x00000C, "Member 'FST_UIBoardRequireItem::RankId' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireItem, ConfirmRequirement) == 0x000010, "Member 'FST_UIBoardRequireItem::ConfirmRequirement' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireItem, RandRequirement1) == 0x000020, "Member 'FST_UIBoardRequireItem::RandRequirement1' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireItem, RandRequirement2) == 0x000030, "Member 'FST_UIBoardRequireItem::RandRequirement2' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireItem, RandRequirement3) == 0x000040, "Member 'FST_UIBoardRequireItem::RandRequirement3' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireItem, RandRequirement4) == 0x000050, "Member 'FST_UIBoardRequireItem::RandRequirement4' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DarwinFlagDefinition
// 0x0010 (0x0018 - 0x0008)
struct FST_DarwinFlagDefinition final : public FTableRowBase
{
public:
	class FName                                   FlagName;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagNum;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DarwinFlagDefinition) == 0x000008, "Wrong alignment on FST_DarwinFlagDefinition");
static_assert(sizeof(FST_DarwinFlagDefinition) == 0x000018, "Wrong size on FST_DarwinFlagDefinition");
static_assert(offsetof(FST_DarwinFlagDefinition, FlagName) == 0x000008, "Member 'FST_DarwinFlagDefinition::FlagName' has a wrong offset!");
static_assert(offsetof(FST_DarwinFlagDefinition, FlagNum) == 0x000010, "Member 'FST_DarwinFlagDefinition::FlagNum' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EncountMonsterParam
// 0x0018 (0x0018 - 0x0000)
struct FST_EncountMonsterParam final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaceType;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EcologicalAiType;                                  // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Prob;                                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EncountMonsterParam) == 0x000004, "Wrong alignment on FST_EncountMonsterParam");
static_assert(sizeof(FST_EncountMonsterParam) == 0x000018, "Wrong size on FST_EncountMonsterParam");
static_assert(offsetof(FST_EncountMonsterParam, ID) == 0x000000, "Member 'FST_EncountMonsterParam::ID' has a wrong offset!");
static_assert(offsetof(FST_EncountMonsterParam, PlaceType) == 0x000008, "Member 'FST_EncountMonsterParam::PlaceType' has a wrong offset!");
static_assert(offsetof(FST_EncountMonsterParam, EcologicalAiType) == 0x00000C, "Member 'FST_EncountMonsterParam::EcologicalAiType' has a wrong offset!");
static_assert(offsetof(FST_EncountMonsterParam, Prob) == 0x000014, "Member 'FST_EncountMonsterParam::Prob' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EncountDataInfo
// 0x0068 (0x0070 - 0x0008)
struct FST_EncountDataInfo final : public FTableRowBase
{
public:
	class FName                                   GeneratorId;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagPriority;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagPopID;                                         // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagDefeatedID;                                    // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventFlagPopID;                                    // 0x0024(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventFlagDefeatedID;                               // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperLimit;                                        // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowerLimit;                                        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeID;                                            // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_EncountMonsterParam>        Monsters;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnemySpawnSetType                            SetType;                                           // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnemySpawnGeneratorType                      GenType;                                           // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChildGeneratorNum;                                 // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildGeneratorMonsterNum;                          // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChildGeneratorRadius;                              // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChildGeneratorMonsterDistance;                     // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRivalTeam;                                        // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighAltitude;                                     // 0x0065(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EncountDataInfo) == 0x000008, "Wrong alignment on FST_EncountDataInfo");
static_assert(sizeof(FST_EncountDataInfo) == 0x000070, "Wrong size on FST_EncountDataInfo");
static_assert(offsetof(FST_EncountDataInfo, GeneratorId) == 0x000008, "Member 'FST_EncountDataInfo::GeneratorId' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, FlagPriority) == 0x000010, "Member 'FST_EncountDataInfo::FlagPriority' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, FlagPopID) == 0x000014, "Member 'FST_EncountDataInfo::FlagPopID' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, FlagDefeatedID) == 0x00001C, "Member 'FST_EncountDataInfo::FlagDefeatedID' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, EventFlagPopID) == 0x000024, "Member 'FST_EncountDataInfo::EventFlagPopID' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, EventFlagDefeatedID) == 0x00002C, "Member 'FST_EncountDataInfo::EventFlagDefeatedID' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, UpperLimit) == 0x000034, "Member 'FST_EncountDataInfo::UpperLimit' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, LowerLimit) == 0x000038, "Member 'FST_EncountDataInfo::LowerLimit' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, TimeID) == 0x00003C, "Member 'FST_EncountDataInfo::TimeID' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, Monsters) == 0x000040, "Member 'FST_EncountDataInfo::Monsters' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, SetType) == 0x000050, "Member 'FST_EncountDataInfo::SetType' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, GenType) == 0x000051, "Member 'FST_EncountDataInfo::GenType' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, ChildGeneratorNum) == 0x000054, "Member 'FST_EncountDataInfo::ChildGeneratorNum' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, ChildGeneratorMonsterNum) == 0x000058, "Member 'FST_EncountDataInfo::ChildGeneratorMonsterNum' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, ChildGeneratorRadius) == 0x00005C, "Member 'FST_EncountDataInfo::ChildGeneratorRadius' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, ChildGeneratorMonsterDistance) == 0x000060, "Member 'FST_EncountDataInfo::ChildGeneratorMonsterDistance' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, bRivalTeam) == 0x000064, "Member 'FST_EncountDataInfo::bRivalTeam' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, bHighAltitude) == 0x000065, "Member 'FST_EncountDataInfo::bHighAltitude' has a wrong offset!");
static_assert(offsetof(FST_EncountDataInfo, Priority) == 0x000068, "Member 'FST_EncountDataInfo::Priority' has a wrong offset!");

// ScriptStruct DarwinGame.DarwinGameplayEffectContext
// 0x0090 (0x0100 - 0x0070)
struct FDarwinGameplayEffectContext final : public FGameplayEffectContext
{
public:
	uint8                                         Pad_70[0x90];                                      // 0x0070(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDarwinGameplayEffectContext) == 0x000008, "Wrong alignment on FDarwinGameplayEffectContext");
static_assert(sizeof(FDarwinGameplayEffectContext) == 0x000100, "Wrong size on FDarwinGameplayEffectContext");

// ScriptStruct DarwinGame.ST_UIBoardAutoMonster
// 0x0018 (0x0020 - 0x0008)
struct FST_UIBoardAutoMonster final : public FTableRowBase
{
public:
	int32                                         AreaID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RegionID;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KindId;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIBoardAutoMonster) == 0x000008, "Wrong alignment on FST_UIBoardAutoMonster");
static_assert(sizeof(FST_UIBoardAutoMonster) == 0x000020, "Wrong size on FST_UIBoardAutoMonster");
static_assert(offsetof(FST_UIBoardAutoMonster, AreaID) == 0x000008, "Member 'FST_UIBoardAutoMonster::AreaID' has a wrong offset!");
static_assert(offsetof(FST_UIBoardAutoMonster, RegionID) == 0x00000C, "Member 'FST_UIBoardAutoMonster::RegionID' has a wrong offset!");
static_assert(offsetof(FST_UIBoardAutoMonster, KindId) == 0x000014, "Member 'FST_UIBoardAutoMonster::KindId' has a wrong offset!");
static_assert(offsetof(FST_UIBoardAutoMonster, Probability) == 0x000018, "Member 'FST_UIBoardAutoMonster::Probability' has a wrong offset!");

// ScriptStruct DarwinGame.LevelSequencePlayRangeInfo
// 0x0008 (0x0008 - 0x0000)
struct FLevelSequencePlayRangeInfo final
{
public:
	int32                                         PlayStartFrame;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayEndFrame;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelSequencePlayRangeInfo) == 0x000004, "Wrong alignment on FLevelSequencePlayRangeInfo");
static_assert(sizeof(FLevelSequencePlayRangeInfo) == 0x000008, "Wrong size on FLevelSequencePlayRangeInfo");
static_assert(offsetof(FLevelSequencePlayRangeInfo, PlayStartFrame) == 0x000000, "Member 'FLevelSequencePlayRangeInfo::PlayStartFrame' has a wrong offset!");
static_assert(offsetof(FLevelSequencePlayRangeInfo, PlayEndFrame) == 0x000004, "Member 'FLevelSequencePlayRangeInfo::PlayEndFrame' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalMoveDetailInfo
// 0x0010 (0x0018 - 0x0008)
struct FST_EcologicalMoveDetailInfo final : public FTableRowBase
{
public:
	float                                         MinRadius;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRadius;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogFlg;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EcologicalMoveDetailInfo) == 0x000008, "Wrong alignment on FST_EcologicalMoveDetailInfo");
static_assert(sizeof(FST_EcologicalMoveDetailInfo) == 0x000018, "Wrong size on FST_EcologicalMoveDetailInfo");
static_assert(offsetof(FST_EcologicalMoveDetailInfo, MinRadius) == 0x000008, "Member 'FST_EcologicalMoveDetailInfo::MinRadius' has a wrong offset!");
static_assert(offsetof(FST_EcologicalMoveDetailInfo, MaxRadius) == 0x00000C, "Member 'FST_EcologicalMoveDetailInfo::MaxRadius' has a wrong offset!");
static_assert(offsetof(FST_EcologicalMoveDetailInfo, LogFlg) == 0x000010, "Member 'FST_EcologicalMoveDetailInfo::LogFlg' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SceneCapture2DLight
// 0x0038 (0x0038 - 0x0000)
struct FST_SceneCapture2DLight final
{
public:
	TSoftClassPtr<class UClass>                   DirectionalLight;                                  // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_SceneCapture2DLight) == 0x000008, "Wrong alignment on FST_SceneCapture2DLight");
static_assert(sizeof(FST_SceneCapture2DLight) == 0x000038, "Wrong size on FST_SceneCapture2DLight");
static_assert(offsetof(FST_SceneCapture2DLight, DirectionalLight) == 0x000000, "Member 'FST_SceneCapture2DLight::DirectionalLight' has a wrong offset!");
static_assert(offsetof(FST_SceneCapture2DLight, Rotation) == 0x000028, "Member 'FST_SceneCapture2DLight::Rotation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIStaffRollData
// 0x0020 (0x0028 - 0x0008)
struct FST_UIStaffRollData final : public FTableRowBase
{
public:
	TArray<class FString>                         StaffRollText;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnNum;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStaffRollTextColor                           ColorType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIStaffRollData) == 0x000008, "Wrong alignment on FST_UIStaffRollData");
static_assert(sizeof(FST_UIStaffRollData) == 0x000028, "Wrong size on FST_UIStaffRollData");
static_assert(offsetof(FST_UIStaffRollData, StaffRollText) == 0x000008, "Member 'FST_UIStaffRollData::StaffRollText' has a wrong offset!");
static_assert(offsetof(FST_UIStaffRollData, ColumnNum) == 0x000018, "Member 'FST_UIStaffRollData::ColumnNum' has a wrong offset!");
static_assert(offsetof(FST_UIStaffRollData, FontSize) == 0x00001C, "Member 'FST_UIStaffRollData::FontSize' has a wrong offset!");
static_assert(offsetof(FST_UIStaffRollData, ColorType) == 0x000020, "Member 'FST_UIStaffRollData::ColorType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PointDataTable
// 0x0028 (0x0030 - 0x0008)
struct FST_PointDataTable final : public FTableRowBase
{
public:
	struct FVector                                Postion;                                           // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_PointDataTable) == 0x000008, "Wrong alignment on FST_PointDataTable");
static_assert(sizeof(FST_PointDataTable) == 0x000030, "Wrong size on FST_PointDataTable");
static_assert(offsetof(FST_PointDataTable, Postion) == 0x000008, "Member 'FST_PointDataTable::Postion' has a wrong offset!");
static_assert(offsetof(FST_PointDataTable, Rotation) == 0x000014, "Member 'FST_PointDataTable::Rotation' has a wrong offset!");
static_assert(offsetof(FST_PointDataTable, Scale) == 0x000020, "Member 'FST_PointDataTable::Scale' has a wrong offset!");

// ScriptStruct DarwinGame.Equipment
// 0x0018 (0x0018 - 0x0000)
struct FEquipment final
{
public:
	class AActor*                                 Equipment;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   equipmentName;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       SocketName;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachAnotherSocket;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipment) == 0x000008, "Wrong alignment on FEquipment");
static_assert(sizeof(FEquipment) == 0x000018, "Wrong size on FEquipment");
static_assert(offsetof(FEquipment, Equipment) == 0x000000, "Member 'FEquipment::Equipment' has a wrong offset!");
static_assert(offsetof(FEquipment, equipmentName) == 0x000008, "Member 'FEquipment::equipmentName' has a wrong offset!");
static_assert(offsetof(FEquipment, SocketName) == 0x000010, "Member 'FEquipment::SocketName' has a wrong offset!");
static_assert(offsetof(FEquipment, bAttachAnotherSocket) == 0x000011, "Member 'FEquipment::bAttachAnotherSocket' has a wrong offset!");

// ScriptStruct DarwinGame.TableSound
// 0x0028 (0x0030 - 0x0008)
struct FTableSound final : public FTableRowBase
{
public:
	class FString                                 CueSheetName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueName;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttachedPlay;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundInsulationType                          SIType;                                            // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTableSound) == 0x000008, "Wrong alignment on FTableSound");
static_assert(sizeof(FTableSound) == 0x000030, "Wrong size on FTableSound");
static_assert(offsetof(FTableSound, CueSheetName) == 0x000008, "Member 'FTableSound::CueSheetName' has a wrong offset!");
static_assert(offsetof(FTableSound, CueName) == 0x000018, "Member 'FTableSound::CueName' has a wrong offset!");
static_assert(offsetof(FTableSound, IsAttachedPlay) == 0x000028, "Member 'FTableSound::IsAttachedPlay' has a wrong offset!");
static_assert(offsetof(FTableSound, SIType) == 0x000029, "Member 'FTableSound::SIType' has a wrong offset!");

// ScriptStruct DarwinGame.DebugParamValue
// 0x0018 (0x0018 - 0x0000)
struct FDebugParamValue final
{
public:
	struct FGameplayTag                           ParameterTag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugParamValue) == 0x000004, "Wrong alignment on FDebugParamValue");
static_assert(sizeof(FDebugParamValue) == 0x000018, "Wrong size on FDebugParamValue");
static_assert(offsetof(FDebugParamValue, ParameterTag) == 0x000000, "Member 'FDebugParamValue::ParameterTag' has a wrong offset!");
static_assert(offsetof(FDebugParamValue, Value) == 0x000008, "Member 'FDebugParamValue::Value' has a wrong offset!");
static_assert(offsetof(FDebugParamValue, DefaultValue) == 0x00000C, "Member 'FDebugParamValue::DefaultValue' has a wrong offset!");
static_assert(offsetof(FDebugParamValue, MinValue) == 0x000010, "Member 'FDebugParamValue::MinValue' has a wrong offset!");
static_assert(offsetof(FDebugParamValue, MaxValue) == 0x000014, "Member 'FDebugParamValue::MaxValue' has a wrong offset!");

// ScriptStruct DarwinGame.DebugParam
// 0x0050 (0x0050 - 0x0000)
struct FDebugParam final
{
public:
	TMap<class FName, struct FDebugParamValue>    Parameter;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugParam) == 0x000008, "Wrong alignment on FDebugParam");
static_assert(sizeof(FDebugParam) == 0x000050, "Wrong size on FDebugParam");
static_assert(offsetof(FDebugParam, Parameter) == 0x000000, "Member 'FDebugParam::Parameter' has a wrong offset!");

// ScriptStruct DarwinGame.DebugParamList
// 0x0050 (0x0058 - 0x0008)
struct FDebugParamList final : public FTableRowBase
{
public:
	TMap<class FName, struct FDebugParam>         list;                                              // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugParamList) == 0x000008, "Wrong alignment on FDebugParamList");
static_assert(sizeof(FDebugParamList) == 0x000058, "Wrong size on FDebugParamList");
static_assert(offsetof(FDebugParamList, list) == 0x000008, "Member 'FDebugParamList::list' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearItemCollection
// 0x0008 (0x0008 - 0x0000)
struct FST_QuestClearItemCollection final
{
public:
	EQuestClearCollectionMap                      Map;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearItemCollection) == 0x000004, "Wrong alignment on FST_QuestClearItemCollection");
static_assert(sizeof(FST_QuestClearItemCollection) == 0x000008, "Wrong size on FST_QuestClearItemCollection");
static_assert(offsetof(FST_QuestClearItemCollection, Map) == 0x000000, "Member 'FST_QuestClearItemCollection::Map' has a wrong offset!");
static_assert(offsetof(FST_QuestClearItemCollection, Num) == 0x000004, "Member 'FST_QuestClearItemCollection::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearMonsterCondition
// 0x0010 (0x0010 - 0x0000)
struct FST_QuestClearMonsterCondition final
{
public:
	EQuestClearMonsterConditionType               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestClearMonsterIsNightmare                 IsNightmare;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearMonsterCondition) == 0x000004, "Wrong alignment on FST_QuestClearMonsterCondition");
static_assert(sizeof(FST_QuestClearMonsterCondition) == 0x000010, "Wrong size on FST_QuestClearMonsterCondition");
static_assert(offsetof(FST_QuestClearMonsterCondition, Type) == 0x000000, "Member 'FST_QuestClearMonsterCondition::Type' has a wrong offset!");
static_assert(offsetof(FST_QuestClearMonsterCondition, ID) == 0x000004, "Member 'FST_QuestClearMonsterCondition::ID' has a wrong offset!");
static_assert(offsetof(FST_QuestClearMonsterCondition, IsNightmare) == 0x000008, "Member 'FST_QuestClearMonsterCondition::IsNightmare' has a wrong offset!");
static_assert(offsetof(FST_QuestClearMonsterCondition, Num) == 0x00000C, "Member 'FST_QuestClearMonsterCondition::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearGiveCondition
// 0x000C (0x000C - 0x0000)
struct FST_QuestClearGiveCondition final
{
public:
	int32                                         MonsterId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFavorite;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearGiveCondition) == 0x000004, "Wrong alignment on FST_QuestClearGiveCondition");
static_assert(sizeof(FST_QuestClearGiveCondition) == 0x00000C, "Wrong size on FST_QuestClearGiveCondition");
static_assert(offsetof(FST_QuestClearGiveCondition, MonsterId) == 0x000000, "Member 'FST_QuestClearGiveCondition::MonsterId' has a wrong offset!");
static_assert(offsetof(FST_QuestClearGiveCondition, IsFavorite) == 0x000004, "Member 'FST_QuestClearGiveCondition::IsFavorite' has a wrong offset!");
static_assert(offsetof(FST_QuestClearGiveCondition, Num) == 0x000008, "Member 'FST_QuestClearGiveCondition::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearItemContents
// 0x0014 (0x0014 - 0x0000)
struct FST_QuestClearItemContents final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestClearItemTarget                         ItemTarget;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetID;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearItemContents) == 0x000004, "Wrong alignment on FST_QuestClearItemContents");
static_assert(sizeof(FST_QuestClearItemContents) == 0x000014, "Wrong size on FST_QuestClearItemContents");
static_assert(offsetof(FST_QuestClearItemContents, ItemId) == 0x000000, "Member 'FST_QuestClearItemContents::ItemId' has a wrong offset!");
static_assert(offsetof(FST_QuestClearItemContents, ItemTarget) == 0x000008, "Member 'FST_QuestClearItemContents::ItemTarget' has a wrong offset!");
static_assert(offsetof(FST_QuestClearItemContents, TargetID) == 0x00000C, "Member 'FST_QuestClearItemContents::TargetID' has a wrong offset!");
static_assert(offsetof(FST_QuestClearItemContents, Num) == 0x000010, "Member 'FST_QuestClearItemContents::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearMonsterVision
// 0x0008 (0x0008 - 0x0000)
struct FST_QuestClearMonsterVision final
{
public:
	int32                                         Area;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearMonsterVision) == 0x000004, "Wrong alignment on FST_QuestClearMonsterVision");
static_assert(sizeof(FST_QuestClearMonsterVision) == 0x000008, "Wrong size on FST_QuestClearMonsterVision");
static_assert(offsetof(FST_QuestClearMonsterVision, Area) == 0x000000, "Member 'FST_QuestClearMonsterVision::Area' has a wrong offset!");
static_assert(offsetof(FST_QuestClearMonsterVision, Num) == 0x000004, "Member 'FST_QuestClearMonsterVision::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearTeamCommand
// 0x0008 (0x0008 - 0x0000)
struct FST_QuestClearTeamCommand final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearTeamCommand) == 0x000004, "Wrong alignment on FST_QuestClearTeamCommand");
static_assert(sizeof(FST_QuestClearTeamCommand) == 0x000008, "Wrong size on FST_QuestClearTeamCommand");
static_assert(offsetof(FST_QuestClearTeamCommand, Type) == 0x000000, "Member 'FST_QuestClearTeamCommand::Type' has a wrong offset!");
static_assert(offsetof(FST_QuestClearTeamCommand, Num) == 0x000004, "Member 'FST_QuestClearTeamCommand::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearKillMonster
// 0x000C (0x000C - 0x0000)
struct FST_QuestClearKillMonster final
{
public:
	class FName                                   MonsterParameterId;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearKillMonster) == 0x000004, "Wrong alignment on FST_QuestClearKillMonster");
static_assert(sizeof(FST_QuestClearKillMonster) == 0x00000C, "Wrong size on FST_QuestClearKillMonster");
static_assert(offsetof(FST_QuestClearKillMonster, MonsterParameterId) == 0x000000, "Member 'FST_QuestClearKillMonster::MonsterParameterId' has a wrong offset!");
static_assert(offsetof(FST_QuestClearKillMonster, Num) == 0x000008, "Member 'FST_QuestClearKillMonster::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestClearRivalTeam
// 0x000C (0x000C - 0x0000)
struct FST_QuestClearRivalTeam final
{
public:
	bool                                          IsHistory;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RivalTeam;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestClearRivalTeam) == 0x000004, "Wrong alignment on FST_QuestClearRivalTeam");
static_assert(sizeof(FST_QuestClearRivalTeam) == 0x00000C, "Wrong size on FST_QuestClearRivalTeam");
static_assert(offsetof(FST_QuestClearRivalTeam, IsHistory) == 0x000000, "Member 'FST_QuestClearRivalTeam::IsHistory' has a wrong offset!");
static_assert(offsetof(FST_QuestClearRivalTeam, RivalTeam) == 0x000004, "Member 'FST_QuestClearRivalTeam::RivalTeam' has a wrong offset!");
static_assert(offsetof(FST_QuestClearRivalTeam, Num) == 0x000008, "Member 'FST_QuestClearRivalTeam::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListClear
// 0x0148 (0x0150 - 0x0008)
struct FST_QuestListClear final : public FTableRowBase
{
public:
	EQuestConjunctionType                         Conjunction;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuideTextKey;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold_RandMax;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold_RandStep;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Gold_Gain;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_QuestClearMonsterCondition> MonsterConditions;                                 // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_QuestClearGiveCondition            GiveCondition;                                     // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_QuestClearItemCollection           ItemCollection;                                    // 0x0054(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EQuestClearItemConditionType                  ItemClearType;                                     // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_QuestClearItemContents>     ItemContents;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeedOpenQuestIDs;                                  // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeedOrderQuestIDs;                                 // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeedClearQuestIDs;                                 // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeedClearableQuestIDs;                             // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EventFlagIDs;                                      // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_QuestClearPlayerAction             PlayerAction;                                      // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TargetDestroyNum;                                  // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestClearArtifact                 Artifact;                                          // 0x00D0(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FST_QuestClearMonsterVision            MonsterVision;                                     // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   DestinationID;                                     // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_QuestClearFieldLink                FieldLink;                                         // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_QuestClearTeamCommand              TeamCommand;                                       // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_QuestClearKillMonster              KillMonster;                                       // 0x0130(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_QuestClearRivalTeam                RivalTeam;                                         // 0x013C(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CoinNum;                                           // 0x0148(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestListClear) == 0x000008, "Wrong alignment on FST_QuestListClear");
static_assert(sizeof(FST_QuestListClear) == 0x000150, "Wrong size on FST_QuestListClear");
static_assert(offsetof(FST_QuestListClear, Conjunction) == 0x000008, "Member 'FST_QuestListClear::Conjunction' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, GuideTextKey) == 0x000010, "Member 'FST_QuestListClear::GuideTextKey' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, Level) == 0x000020, "Member 'FST_QuestListClear::Level' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, Gold) == 0x000024, "Member 'FST_QuestListClear::Gold' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, Gold_RandMax) == 0x000028, "Member 'FST_QuestListClear::Gold_RandMax' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, Gold_RandStep) == 0x00002C, "Member 'FST_QuestListClear::Gold_RandStep' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, Gold_Gain) == 0x000030, "Member 'FST_QuestListClear::Gold_Gain' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, MonsterConditions) == 0x000038, "Member 'FST_QuestListClear::MonsterConditions' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, GiveCondition) == 0x000048, "Member 'FST_QuestListClear::GiveCondition' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, ItemCollection) == 0x000054, "Member 'FST_QuestListClear::ItemCollection' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, ItemClearType) == 0x00005C, "Member 'FST_QuestListClear::ItemClearType' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, ItemContents) == 0x000060, "Member 'FST_QuestListClear::ItemContents' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, NeedOpenQuestIDs) == 0x000070, "Member 'FST_QuestListClear::NeedOpenQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, NeedOrderQuestIDs) == 0x000080, "Member 'FST_QuestListClear::NeedOrderQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, NeedClearQuestIDs) == 0x000090, "Member 'FST_QuestListClear::NeedClearQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, NeedClearableQuestIDs) == 0x0000A0, "Member 'FST_QuestListClear::NeedClearableQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, EventFlagIDs) == 0x0000B0, "Member 'FST_QuestListClear::EventFlagIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, PlayerAction) == 0x0000C0, "Member 'FST_QuestListClear::PlayerAction' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, TargetDestroyNum) == 0x0000C8, "Member 'FST_QuestListClear::TargetDestroyNum' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, Artifact) == 0x0000D0, "Member 'FST_QuestListClear::Artifact' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, MonsterVision) == 0x000110, "Member 'FST_QuestListClear::MonsterVision' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, DestinationID) == 0x000118, "Member 'FST_QuestListClear::DestinationID' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, FieldLink) == 0x000120, "Member 'FST_QuestListClear::FieldLink' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, TeamCommand) == 0x000128, "Member 'FST_QuestListClear::TeamCommand' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, KillMonster) == 0x000130, "Member 'FST_QuestListClear::KillMonster' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, RivalTeam) == 0x00013C, "Member 'FST_QuestListClear::RivalTeam' has a wrong offset!");
static_assert(offsetof(FST_QuestListClear, CoinNum) == 0x000148, "Member 'FST_QuestListClear::CoinNum' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapSymbolResource
// 0x0080 (0x0088 - 0x0008)
struct FST_UIMapSymbolResource final : public FTableRowBase
{
public:
	EMapSymbolType                                SymbolType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SymbolTexture;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SymbolWidgetClass;                                 // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SymbolRangeWidgetClass;                            // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ScaleDrawFlags;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDrawIfEnterArea;                                 // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitCreateNum;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultZOrder;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIMapSymbolResource) == 0x000008, "Wrong alignment on FST_UIMapSymbolResource");
static_assert(sizeof(FST_UIMapSymbolResource) == 0x000088, "Wrong size on FST_UIMapSymbolResource");
static_assert(offsetof(FST_UIMapSymbolResource, SymbolType) == 0x000008, "Member 'FST_UIMapSymbolResource::SymbolType' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolResource, SymbolTexture) == 0x000010, "Member 'FST_UIMapSymbolResource::SymbolTexture' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolResource, SymbolWidgetClass) == 0x000018, "Member 'FST_UIMapSymbolResource::SymbolWidgetClass' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolResource, SymbolRangeWidgetClass) == 0x000040, "Member 'FST_UIMapSymbolResource::SymbolRangeWidgetClass' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolResource, ScaleDrawFlags) == 0x000068, "Member 'FST_UIMapSymbolResource::ScaleDrawFlags' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolResource, IsDrawIfEnterArea) == 0x000078, "Member 'FST_UIMapSymbolResource::IsDrawIfEnterArea' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolResource, InitCreateNum) == 0x00007C, "Member 'FST_UIMapSymbolResource::InitCreateNum' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolResource, DefaultZOrder) == 0x000080, "Member 'FST_UIMapSymbolResource::DefaultZOrder' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalActionRateRowInfo
// 0x0010 (0x0018 - 0x0008)
struct FST_EcologicalActionRateRowInfo final : public FTableRowBase
{
public:
	TArray<int32>                                 EcoActionAIInfos;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EcologicalActionRateRowInfo) == 0x000008, "Wrong alignment on FST_EcologicalActionRateRowInfo");
static_assert(sizeof(FST_EcologicalActionRateRowInfo) == 0x000018, "Wrong size on FST_EcologicalActionRateRowInfo");
static_assert(offsetof(FST_EcologicalActionRateRowInfo, EcoActionAIInfos) == 0x000008, "Member 'FST_EcologicalActionRateRowInfo::EcoActionAIInfos' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingLevelListEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_StreamingLevelListEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StreamingLevelListEditor) == 0x000001, "Wrong alignment on FST_StreamingLevelListEditor");
static_assert(sizeof(FST_StreamingLevelListEditor) == 0x000001, "Wrong size on FST_StreamingLevelListEditor");

// ScriptStruct DarwinGame.ST_UIMonsterDictHabitatInfo
// 0x0002 (0x0002 - 0x0000)
struct FST_UIMonsterDictHabitatInfo final
{
public:
	EAreaType                                     Place;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDictAppearanceTime                           Time;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMonsterDictHabitatInfo) == 0x000001, "Wrong alignment on FST_UIMonsterDictHabitatInfo");
static_assert(sizeof(FST_UIMonsterDictHabitatInfo) == 0x000002, "Wrong size on FST_UIMonsterDictHabitatInfo");
static_assert(offsetof(FST_UIMonsterDictHabitatInfo, Place) == 0x000000, "Member 'FST_UIMonsterDictHabitatInfo::Place' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterDictHabitatInfo, Time) == 0x000001, "Member 'FST_UIMonsterDictHabitatInfo::Time' has a wrong offset!");

// ScriptStruct DarwinGame.DebugParameter
// 0x001C (0x001C - 0x0000)
struct FDebugParameter final
{
public:
	struct FGameplayTag                           ParameterTag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugParameter) == 0x000004, "Wrong alignment on FDebugParameter");
static_assert(sizeof(FDebugParameter) == 0x00001C, "Wrong size on FDebugParameter");
static_assert(offsetof(FDebugParameter, ParameterTag) == 0x000000, "Member 'FDebugParameter::ParameterTag' has a wrong offset!");
static_assert(offsetof(FDebugParameter, ParamName) == 0x000008, "Member 'FDebugParameter::ParamName' has a wrong offset!");
static_assert(offsetof(FDebugParameter, Value) == 0x000010, "Member 'FDebugParameter::Value' has a wrong offset!");
static_assert(offsetof(FDebugParameter, MinValue) == 0x000014, "Member 'FDebugParameter::MinValue' has a wrong offset!");
static_assert(offsetof(FDebugParameter, MaxValue) == 0x000018, "Member 'FDebugParameter::MaxValue' has a wrong offset!");

// ScriptStruct DarwinGame.ParamList
// 0x0018 (0x0018 - 0x0000)
struct FParamList final
{
public:
	class FName                                   ListName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDebugParameter>                Parameters;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParamList) == 0x000008, "Wrong alignment on FParamList");
static_assert(sizeof(FParamList) == 0x000018, "Wrong size on FParamList");
static_assert(offsetof(FParamList, ListName) == 0x000000, "Member 'FParamList::ListName' has a wrong offset!");
static_assert(offsetof(FParamList, Parameters) == 0x000008, "Member 'FParamList::Parameters' has a wrong offset!");

// ScriptStruct DarwinGame.ObjectReactionDataList
// 0x0010 (0x0010 - 0x0000)
struct FObjectReactionDataList final
{
public:
	TArray<class UObjectReactionDataBase*>        list;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectReactionDataList) == 0x000008, "Wrong alignment on FObjectReactionDataList");
static_assert(sizeof(FObjectReactionDataList) == 0x000010, "Wrong size on FObjectReactionDataList");
static_assert(offsetof(FObjectReactionDataList, list) == 0x000000, "Member 'FObjectReactionDataList::list' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalMoveRateInfo
// 0x000C (0x000C - 0x0000)
struct FST_EcologicalMoveRateInfo final
{
public:
	class FName                                   MoveID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EcologicalMoveRateInfo) == 0x000004, "Wrong alignment on FST_EcologicalMoveRateInfo");
static_assert(sizeof(FST_EcologicalMoveRateInfo) == 0x00000C, "Wrong size on FST_EcologicalMoveRateInfo");
static_assert(offsetof(FST_EcologicalMoveRateInfo, MoveID) == 0x000000, "Member 'FST_EcologicalMoveRateInfo::MoveID' has a wrong offset!");
static_assert(offsetof(FST_EcologicalMoveRateInfo, Rate) == 0x000008, "Member 'FST_EcologicalMoveRateInfo::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalMoveRateRowInfo
// 0x0010 (0x0018 - 0x0008)
struct FST_EcologicalMoveRateRowInfo final : public FTableRowBase
{
public:
	TArray<struct FST_EcologicalMoveRateInfo>     EcoMoveInfos;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EcologicalMoveRateRowInfo) == 0x000008, "Wrong alignment on FST_EcologicalMoveRateRowInfo");
static_assert(sizeof(FST_EcologicalMoveRateRowInfo) == 0x000018, "Wrong size on FST_EcologicalMoveRateRowInfo");
static_assert(offsetof(FST_EcologicalMoveRateRowInfo, EcoMoveInfos) == 0x000008, "Member 'FST_EcologicalMoveRateRowInfo::EcoMoveInfos' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CharacterDefaultWeapon
// 0x0090 (0x0098 - 0x0008)
struct FST_CharacterDefaultWeapon final : public FTableRowBase
{
public:
	class FName                                   EquipmentType;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KindId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       SocketType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WeaponClass;                                       // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CharacterDefaultWeapon) == 0x000008, "Wrong alignment on FST_CharacterDefaultWeapon");
static_assert(sizeof(FST_CharacterDefaultWeapon) == 0x000098, "Wrong size on FST_CharacterDefaultWeapon");
static_assert(offsetof(FST_CharacterDefaultWeapon, EquipmentType) == 0x000008, "Member 'FST_CharacterDefaultWeapon::EquipmentType' has a wrong offset!");
static_assert(offsetof(FST_CharacterDefaultWeapon, KindId) == 0x000010, "Member 'FST_CharacterDefaultWeapon::KindId' has a wrong offset!");
static_assert(offsetof(FST_CharacterDefaultWeapon, SocketType) == 0x000018, "Member 'FST_CharacterDefaultWeapon::SocketType' has a wrong offset!");
static_assert(offsetof(FST_CharacterDefaultWeapon, SkeletalMesh) == 0x000020, "Member 'FST_CharacterDefaultWeapon::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FST_CharacterDefaultWeapon, StaticMesh) == 0x000048, "Member 'FST_CharacterDefaultWeapon::StaticMesh' has a wrong offset!");
static_assert(offsetof(FST_CharacterDefaultWeapon, WeaponClass) == 0x000070, "Member 'FST_CharacterDefaultWeapon::WeaponClass' has a wrong offset!");

// ScriptStruct DarwinGame.LensFlaresSetting
// 0x0028 (0x0028 - 0x0000)
struct FLensFlaresSetting final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BokehSize;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               BokehShape;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensFlaresSetting) == 0x000008, "Wrong alignment on FLensFlaresSetting");
static_assert(sizeof(FLensFlaresSetting) == 0x000028, "Wrong size on FLensFlaresSetting");
static_assert(offsetof(FLensFlaresSetting, Intensity) == 0x000000, "Member 'FLensFlaresSetting::Intensity' has a wrong offset!");
static_assert(offsetof(FLensFlaresSetting, Tint) == 0x000004, "Member 'FLensFlaresSetting::Tint' has a wrong offset!");
static_assert(offsetof(FLensFlaresSetting, BokehSize) == 0x000014, "Member 'FLensFlaresSetting::BokehSize' has a wrong offset!");
static_assert(offsetof(FLensFlaresSetting, Threshold) == 0x000018, "Member 'FLensFlaresSetting::Threshold' has a wrong offset!");
static_assert(offsetof(FLensFlaresSetting, BokehShape) == 0x000020, "Member 'FLensFlaresSetting::BokehShape' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DefenceBattleIdInfo
// 0x0028 (0x0030 - 0x0008)
struct FST_DefenceBattleIdInfo final : public FTableRowBase
{
public:
	class FName                                   EventID;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamForce                               Force;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamUpperLevel;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleIDs;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LotteryRate;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DefenceBattleIdInfo) == 0x000008, "Wrong alignment on FST_DefenceBattleIdInfo");
static_assert(sizeof(FST_DefenceBattleIdInfo) == 0x000030, "Wrong size on FST_DefenceBattleIdInfo");
static_assert(offsetof(FST_DefenceBattleIdInfo, EventID) == 0x000008, "Member 'FST_DefenceBattleIdInfo::EventID' has a wrong offset!");
static_assert(offsetof(FST_DefenceBattleIdInfo, Force) == 0x000010, "Member 'FST_DefenceBattleIdInfo::Force' has a wrong offset!");
static_assert(offsetof(FST_DefenceBattleIdInfo, TeamUpperLevel) == 0x000014, "Member 'FST_DefenceBattleIdInfo::TeamUpperLevel' has a wrong offset!");
static_assert(offsetof(FST_DefenceBattleIdInfo, BattleIDs) == 0x000018, "Member 'FST_DefenceBattleIdInfo::BattleIDs' has a wrong offset!");
static_assert(offsetof(FST_DefenceBattleIdInfo, LotteryRate) == 0x000028, "Member 'FST_DefenceBattleIdInfo::LotteryRate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Dialog
// 0x0040 (0x0048 - 0x0008)
struct FST_Dialog final : public FTableRowBase
{
public:
	TArray<class FText>                           AppearDialog;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           DeadDialog;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           StealDialog;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           BaseAreaBattleFightStartDialog;                    // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Dialog) == 0x000008, "Wrong alignment on FST_Dialog");
static_assert(sizeof(FST_Dialog) == 0x000048, "Wrong size on FST_Dialog");
static_assert(offsetof(FST_Dialog, AppearDialog) == 0x000008, "Member 'FST_Dialog::AppearDialog' has a wrong offset!");
static_assert(offsetof(FST_Dialog, DeadDialog) == 0x000018, "Member 'FST_Dialog::DeadDialog' has a wrong offset!");
static_assert(offsetof(FST_Dialog, StealDialog) == 0x000028, "Member 'FST_Dialog::StealDialog' has a wrong offset!");
static_assert(offsetof(FST_Dialog, BaseAreaBattleFightStartDialog) == 0x000038, "Member 'FST_Dialog::BaseAreaBattleFightStartDialog' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactQuality
// 0x0018 (0x0020 - 0x0008)
struct FST_ArtifactQuality final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtifactQuality) == 0x000008, "Wrong alignment on FST_ArtifactQuality");
static_assert(sizeof(FST_ArtifactQuality) == 0x000020, "Wrong size on FST_ArtifactQuality");
static_assert(offsetof(FST_ArtifactQuality, Name) == 0x000008, "Member 'FST_ArtifactQuality::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventCondition
// 0x0050 (0x0058 - 0x0008)
struct FST_EventCondition final : public FTableRowBase
{
public:
	class FName                                   EventID;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaEventCheckType                           CheckType;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEpisodeType                                  EpisodeType;                                       // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProgressNum;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagName;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAreaChangeEvent;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RegionID;                                          // 0x0024(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ZoneID;                                            // 0x0034(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionID;                                         // 0x003C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PointID;                                           // 0x0044(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemFirstAdd;                                      // 0x004C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EventCondition) == 0x000008, "Wrong alignment on FST_EventCondition");
static_assert(sizeof(FST_EventCondition) == 0x000058, "Wrong size on FST_EventCondition");
static_assert(offsetof(FST_EventCondition, EventID) == 0x000008, "Member 'FST_EventCondition::EventID' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, CheckType) == 0x000010, "Member 'FST_EventCondition::CheckType' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, EpisodeType) == 0x000011, "Member 'FST_EventCondition::EpisodeType' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, ProgressNum) == 0x000014, "Member 'FST_EventCondition::ProgressNum' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, FlagName) == 0x000018, "Member 'FST_EventCondition::FlagName' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, IsAreaChangeEvent) == 0x000020, "Member 'FST_EventCondition::IsAreaChangeEvent' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, AreaType) == 0x000021, "Member 'FST_EventCondition::AreaType' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, RegionID) == 0x000024, "Member 'FST_EventCondition::RegionID' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, AreaID) == 0x00002C, "Member 'FST_EventCondition::AreaID' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, ZoneID) == 0x000034, "Member 'FST_EventCondition::ZoneID' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, SectionID) == 0x00003C, "Member 'FST_EventCondition::SectionID' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, PointID) == 0x000044, "Member 'FST_EventCondition::PointID' has a wrong offset!");
static_assert(offsetof(FST_EventCondition, ItemFirstAdd) == 0x00004C, "Member 'FST_EventCondition::ItemFirstAdd' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIResourceText
// 0x0018 (0x0020 - 0x0008)
struct FST_UIResourceText final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIResourceText) == 0x000008, "Wrong alignment on FST_UIResourceText");
static_assert(sizeof(FST_UIResourceText) == 0x000020, "Wrong size on FST_UIResourceText");
static_assert(offsetof(FST_UIResourceText, Text) == 0x000008, "Member 'FST_UIResourceText::Text' has a wrong offset!");

// ScriptStruct DarwinGame.DirectionalLightSetting
// 0x0018 (0x0018 - 0x0000)
struct FDirectionalLightSetting final
{
public:
	class UCurveFloat*                            IntensityCurve;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      LightColorCurve;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomScale;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectionalLightSetting) == 0x000008, "Wrong alignment on FDirectionalLightSetting");
static_assert(sizeof(FDirectionalLightSetting) == 0x000018, "Wrong size on FDirectionalLightSetting");
static_assert(offsetof(FDirectionalLightSetting, IntensityCurve) == 0x000000, "Member 'FDirectionalLightSetting::IntensityCurve' has a wrong offset!");
static_assert(offsetof(FDirectionalLightSetting, LightColorCurve) == 0x000008, "Member 'FDirectionalLightSetting::LightColorCurve' has a wrong offset!");
static_assert(offsetof(FDirectionalLightSetting, BloomScale) == 0x000010, "Member 'FDirectionalLightSetting::BloomScale' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DiscoveryMetalBattleIdInfo
// 0x0018 (0x0020 - 0x0008)
struct FST_DiscoveryMetalBattleIdInfo final : public FTableRowBase
{
public:
	int32                                         PlayerUpperLevel;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_LotteryBattleID>            LotteryBattleIDs;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DiscoveryMetalBattleIdInfo) == 0x000008, "Wrong alignment on FST_DiscoveryMetalBattleIdInfo");
static_assert(sizeof(FST_DiscoveryMetalBattleIdInfo) == 0x000020, "Wrong size on FST_DiscoveryMetalBattleIdInfo");
static_assert(offsetof(FST_DiscoveryMetalBattleIdInfo, PlayerUpperLevel) == 0x000008, "Member 'FST_DiscoveryMetalBattleIdInfo::PlayerUpperLevel' has a wrong offset!");
static_assert(offsetof(FST_DiscoveryMetalBattleIdInfo, LotteryBattleIDs) == 0x000010, "Member 'FST_DiscoveryMetalBattleIdInfo::LotteryBattleIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EstimateBonusDataTable
// 0x0060 (0x0068 - 0x0008)
struct FST_EstimateBonusDataTable final : public FTableRowBase
{
public:
	TArray<EArtifactType>                         TypeList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            Bonus;                                             // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EstimateBonusDataTable) == 0x000008, "Wrong alignment on FST_EstimateBonusDataTable");
static_assert(sizeof(FST_EstimateBonusDataTable) == 0x000068, "Wrong size on FST_EstimateBonusDataTable");
static_assert(offsetof(FST_EstimateBonusDataTable, TypeList) == 0x000008, "Member 'FST_EstimateBonusDataTable::TypeList' has a wrong offset!");
static_assert(offsetof(FST_EstimateBonusDataTable, Bonus) == 0x000018, "Member 'FST_EstimateBonusDataTable::Bonus' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DiscoveryTreasureBattleIdInfo
// 0x0018 (0x0020 - 0x0008)
struct FST_DiscoveryTreasureBattleIdInfo final : public FTableRowBase
{
public:
	int32                                         PlayerUpperLevel;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_LotteryBattleID>            LotteryBattleIDs;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DiscoveryTreasureBattleIdInfo) == 0x000008, "Wrong alignment on FST_DiscoveryTreasureBattleIdInfo");
static_assert(sizeof(FST_DiscoveryTreasureBattleIdInfo) == 0x000020, "Wrong size on FST_DiscoveryTreasureBattleIdInfo");
static_assert(offsetof(FST_DiscoveryTreasureBattleIdInfo, PlayerUpperLevel) == 0x000008, "Member 'FST_DiscoveryTreasureBattleIdInfo::PlayerUpperLevel' has a wrong offset!");
static_assert(offsetof(FST_DiscoveryTreasureBattleIdInfo, LotteryBattleIDs) == 0x000010, "Member 'FST_DiscoveryTreasureBattleIdInfo::LotteryBattleIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StartLoopAnimationData
// 0x0020 (0x0020 - 0x0000)
struct FST_StartLoopAnimationData final
{
public:
	class FName                                   StartAnimationName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimationName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       StartAnimation;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       LoopAnimation;                                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StartLoopAnimationData) == 0x000008, "Wrong alignment on FST_StartLoopAnimationData");
static_assert(sizeof(FST_StartLoopAnimationData) == 0x000020, "Wrong size on FST_StartLoopAnimationData");
static_assert(offsetof(FST_StartLoopAnimationData, StartAnimationName) == 0x000000, "Member 'FST_StartLoopAnimationData::StartAnimationName' has a wrong offset!");
static_assert(offsetof(FST_StartLoopAnimationData, LoopAnimationName) == 0x000008, "Member 'FST_StartLoopAnimationData::LoopAnimationName' has a wrong offset!");
static_assert(offsetof(FST_StartLoopAnimationData, StartAnimation) == 0x000010, "Member 'FST_StartLoopAnimationData::StartAnimation' has a wrong offset!");
static_assert(offsetof(FST_StartLoopAnimationData, LoopAnimation) == 0x000018, "Member 'FST_StartLoopAnimationData::LoopAnimation' has a wrong offset!");

// ScriptStruct DarwinGame.PostProcessMaterial
// 0x0008 (0x0008 - 0x0000)
struct FPostProcessMaterial final
{
public:
	EPostProcessMaterialType                      Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPostProcessMaterial) == 0x000004, "Wrong alignment on FPostProcessMaterial");
static_assert(sizeof(FPostProcessMaterial) == 0x000008, "Wrong size on FPostProcessMaterial");
static_assert(offsetof(FPostProcessMaterial, Type) == 0x000000, "Member 'FPostProcessMaterial::Type' has a wrong offset!");
static_assert(offsetof(FPostProcessMaterial, Weight) == 0x000004, "Member 'FPostProcessMaterial::Weight' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchRarityLotteryData
// 0x0018 (0x0018 - 0x0000)
struct FDispatchRarityLotteryData final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PercentageList;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchRarityLotteryData) == 0x000008, "Wrong alignment on FDispatchRarityLotteryData");
static_assert(sizeof(FDispatchRarityLotteryData) == 0x000018, "Wrong size on FDispatchRarityLotteryData");
static_assert(offsetof(FDispatchRarityLotteryData, Difficulty) == 0x000000, "Member 'FDispatchRarityLotteryData::Difficulty' has a wrong offset!");
static_assert(offsetof(FDispatchRarityLotteryData, PercentageList) == 0x000008, "Member 'FDispatchRarityLotteryData::PercentageList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyConditionData
// 0x0028 (0x0028 - 0x0000)
struct FST_QuestDailyConditionData final
{
public:
	int32                                         teamLevel;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FirstTime;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ArtifactSpace;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnableGameFlags;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DisableGameFlags;                                  // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestDailyConditionData) == 0x000008, "Wrong alignment on FST_QuestDailyConditionData");
static_assert(sizeof(FST_QuestDailyConditionData) == 0x000028, "Wrong size on FST_QuestDailyConditionData");
static_assert(offsetof(FST_QuestDailyConditionData, teamLevel) == 0x000000, "Member 'FST_QuestDailyConditionData::teamLevel' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyConditionData, FirstTime) == 0x000004, "Member 'FST_QuestDailyConditionData::FirstTime' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyConditionData, ArtifactSpace) == 0x000005, "Member 'FST_QuestDailyConditionData::ArtifactSpace' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyConditionData, EnableGameFlags) == 0x000008, "Member 'FST_QuestDailyConditionData::EnableGameFlags' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyConditionData, DisableGameFlags) == 0x000018, "Member 'FST_QuestDailyConditionData::DisableGameFlags' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchDirectingData
// 0x0008 (0x0008 - 0x0000)
struct FDispatchDirectingData final
{
public:
	float                                         FadeOutTime;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchDirectingData) == 0x000004, "Wrong alignment on FDispatchDirectingData");
static_assert(sizeof(FDispatchDirectingData) == 0x000008, "Wrong size on FDispatchDirectingData");
static_assert(offsetof(FDispatchDirectingData, FadeOutTime) == 0x000000, "Member 'FDispatchDirectingData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FDispatchDirectingData, FadeInTime) == 0x000004, "Member 'FDispatchDirectingData::FadeInTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactAuthorityData
// 0x0028 (0x0030 - 0x0008)
struct FST_ArtifactAuthorityData final : public FTableRowBase
{
public:
	int32                                         AuthorityId;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ArtifactAuthorityData) == 0x000008, "Wrong alignment on FST_ArtifactAuthorityData");
static_assert(sizeof(FST_ArtifactAuthorityData) == 0x000030, "Wrong size on FST_ArtifactAuthorityData");
static_assert(offsetof(FST_ArtifactAuthorityData, AuthorityId) == 0x000008, "Member 'FST_ArtifactAuthorityData::AuthorityId' has a wrong offset!");
static_assert(offsetof(FST_ArtifactAuthorityData, Name) == 0x000010, "Member 'FST_ArtifactAuthorityData::Name' has a wrong offset!");
static_assert(offsetof(FST_ArtifactAuthorityData, Index) == 0x000028, "Member 'FST_ArtifactAuthorityData::Index' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventClear_RewardCheckInfo
// 0x0014 (0x0014 - 0x0000)
struct FST_EventClear_RewardCheckInfo final
{
public:
	EEventClearCheckType                          Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Target;                                            // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventClearCheckJudge                         Judge;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventClear_RewardCheckInfo) == 0x000004, "Wrong alignment on FST_EventClear_RewardCheckInfo");
static_assert(sizeof(FST_EventClear_RewardCheckInfo) == 0x000014, "Wrong size on FST_EventClear_RewardCheckInfo");
static_assert(offsetof(FST_EventClear_RewardCheckInfo, Type) == 0x000000, "Member 'FST_EventClear_RewardCheckInfo::Type' has a wrong offset!");
static_assert(offsetof(FST_EventClear_RewardCheckInfo, Target) == 0x000004, "Member 'FST_EventClear_RewardCheckInfo::Target' has a wrong offset!");
static_assert(offsetof(FST_EventClear_RewardCheckInfo, Judge) == 0x00000C, "Member 'FST_EventClear_RewardCheckInfo::Judge' has a wrong offset!");
static_assert(offsetof(FST_EventClear_RewardCheckInfo, Value) == 0x000010, "Member 'FST_EventClear_RewardCheckInfo::Value' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventClearTableInfo
// 0x01F8 (0x0200 - 0x0008)
struct FST_EventClearTableInfo final : public FTableRowBase
{
public:
	TMap<class FName, int32>                      RewardItemInfo;                                    // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      RewardMonsterInfo;                                 // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      RewardCandidateMonsterInfo;                        // 0x00A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuidID;                                            // 0x00FC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCloseGuid;                                       // 0x0104(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReleaseFlagNames;                                  // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BreakFlagNames;                                    // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NextReleaseEventIDs;                               // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpawnArtifactIDs;                                  // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DeleteArtifactIDs;                                 // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      UsedItemInfos;                                     // 0x0158(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           UsedUnidentifiedItemIDs;                           // 0x01A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           UsedArtifactIDs;                                   // 0x01B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RemoveFrinedMonsterKindIDs;                        // 0x01C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_EventClear_RewardCheckInfo         RewardCheck;                                       // 0x01D8(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsAutoSave;                                        // 0x01EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OpenTipsIDs;                                       // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventClearTableInfo) == 0x000008, "Wrong alignment on FST_EventClearTableInfo");
static_assert(sizeof(FST_EventClearTableInfo) == 0x000200, "Wrong size on FST_EventClearTableInfo");
static_assert(offsetof(FST_EventClearTableInfo, RewardItemInfo) == 0x000008, "Member 'FST_EventClearTableInfo::RewardItemInfo' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, RewardMonsterInfo) == 0x000058, "Member 'FST_EventClearTableInfo::RewardMonsterInfo' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, RewardCandidateMonsterInfo) == 0x0000A8, "Member 'FST_EventClearTableInfo::RewardCandidateMonsterInfo' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, Exp) == 0x0000F8, "Member 'FST_EventClearTableInfo::Exp' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, GuidID) == 0x0000FC, "Member 'FST_EventClearTableInfo::GuidID' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, IsCloseGuid) == 0x000104, "Member 'FST_EventClearTableInfo::IsCloseGuid' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, ReleaseFlagNames) == 0x000108, "Member 'FST_EventClearTableInfo::ReleaseFlagNames' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, BreakFlagNames) == 0x000118, "Member 'FST_EventClearTableInfo::BreakFlagNames' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, NextReleaseEventIDs) == 0x000128, "Member 'FST_EventClearTableInfo::NextReleaseEventIDs' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, SpawnArtifactIDs) == 0x000138, "Member 'FST_EventClearTableInfo::SpawnArtifactIDs' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, DeleteArtifactIDs) == 0x000148, "Member 'FST_EventClearTableInfo::DeleteArtifactIDs' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, UsedItemInfos) == 0x000158, "Member 'FST_EventClearTableInfo::UsedItemInfos' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, UsedUnidentifiedItemIDs) == 0x0001A8, "Member 'FST_EventClearTableInfo::UsedUnidentifiedItemIDs' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, UsedArtifactIDs) == 0x0001B8, "Member 'FST_EventClearTableInfo::UsedArtifactIDs' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, RemoveFrinedMonsterKindIDs) == 0x0001C8, "Member 'FST_EventClearTableInfo::RemoveFrinedMonsterKindIDs' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, RewardCheck) == 0x0001D8, "Member 'FST_EventClearTableInfo::RewardCheck' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, IsAutoSave) == 0x0001EC, "Member 'FST_EventClearTableInfo::IsAutoSave' has a wrong offset!");
static_assert(offsetof(FST_EventClearTableInfo, OpenTipsIDs) == 0x0001F0, "Member 'FST_EventClearTableInfo::OpenTipsIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ActiveFood
// 0x0014 (0x0014 - 0x0000)
struct FActiveFood final
{
public:
	class FName                                   FoodEffectId;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoodHandle;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTime;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHanded;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveFood) == 0x000004, "Wrong alignment on FActiveFood");
static_assert(sizeof(FActiveFood) == 0x000014, "Wrong size on FActiveFood");
static_assert(offsetof(FActiveFood, FoodEffectId) == 0x000000, "Member 'FActiveFood::FoodEffectId' has a wrong offset!");
static_assert(offsetof(FActiveFood, FoodHandle) == 0x000008, "Member 'FActiveFood::FoodHandle' has a wrong offset!");
static_assert(offsetof(FActiveFood, RemainingTime) == 0x00000C, "Member 'FActiveFood::RemainingTime' has a wrong offset!");
static_assert(offsetof(FActiveFood, bHanded) == 0x000010, "Member 'FActiveFood::bHanded' has a wrong offset!");

// ScriptStruct DarwinGame.ActiveFoodContainer
// 0x0018 (0x0018 - 0x0000)
struct FActiveFoodContainer final
{
public:
	int32                                         FoodHandleCounter;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveFood>                    ActiveFoods;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FActiveFoodContainer) == 0x000008, "Wrong alignment on FActiveFoodContainer");
static_assert(sizeof(FActiveFoodContainer) == 0x000018, "Wrong size on FActiveFoodContainer");
static_assert(offsetof(FActiveFoodContainer, FoodHandleCounter) == 0x000000, "Member 'FActiveFoodContainer::FoodHandleCounter' has a wrong offset!");
static_assert(offsetof(FActiveFoodContainer, ActiveFoods) == 0x000008, "Member 'FActiveFoodContainer::ActiveFoods' has a wrong offset!");

// ScriptStruct DarwinGame.StackStateChange
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FStackStateChange final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStackStateChange) == 0x000008, "Wrong alignment on FStackStateChange");
static_assert(sizeof(FStackStateChange) == 0x000010, "Wrong size on FStackStateChange");

// ScriptStruct DarwinGame.ActionInfo
// 0x0010 (0x0010 - 0x0000)
struct FActionInfo final
{
public:
	struct FST_CharacterExeActionInfo             Info;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EMonsterActionType                            Type;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionInfo) == 0x000004, "Wrong alignment on FActionInfo");
static_assert(sizeof(FActionInfo) == 0x000010, "Wrong size on FActionInfo");
static_assert(offsetof(FActionInfo, Info) == 0x000000, "Member 'FActionInfo::Info' has a wrong offset!");
static_assert(offsetof(FActionInfo, Type) == 0x00000C, "Member 'FActionInfo::Type' has a wrong offset!");
static_assert(offsetof(FActionInfo, bIsNew) == 0x00000D, "Member 'FActionInfo::bIsNew' has a wrong offset!");

// ScriptStruct DarwinGame.FeatureMapData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FFeatureMapData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeatureMapData) == 0x000008, "Wrong alignment on FFeatureMapData");
static_assert(sizeof(FFeatureMapData) == 0x000050, "Wrong size on FFeatureMapData");

// ScriptStruct DarwinGame.GameDataFriendMonster
// 0x01E0 (0x01E0 - 0x0000)
struct FGameDataFriendMonster final
{
public:
	int32                                         mUid;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         mKindId;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   mParameterId;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   mNickNameId;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   mNickName;                                         // 0x0018(0x0018)(NativeAccessSpecifierPrivate)
	EVoiceDataType                                mVoiceDataType;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EVoiceDataType                                mVoiceDataTypeEN;                                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         mLevel;                                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         mHp;                                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         mMp;                                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         mFriendShipPoint;                                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         mTotalExp;                                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FST_Status                             mBaseStatus;                                       // 0x0048(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FST_Status                             mIndividualStatus;                                 // 0x0060(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	TArray<struct FST_CoinData>                   mEquipmentCoins;                                   // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FActionInfo>                    mActionInfos;                                      // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFeaturePossessionInfo>         mFeatures;                                         // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, int32>                      mAttributeList;                                    // 0x00A8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FFeatureMapData>     mFeatureBuffList;                                  // 0x00F8(0x0050)(NativeAccessSpecifierPrivate)
	int32                                         mGutsStockCount;                                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsNew;                                             // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveFoodContainer                   FoodContainer;                                     // 0x0150(0x0018)(NativeAccessSpecifierPrivate)
	struct FStackStateChange                      StackStateChange;                                  // 0x0168(0x0010)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_178[0x10];                                     // 0x0178(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          mIsMotivationUp;                                   // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         mMotivationUpSeed;                                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCustomEquipmentType                   mCustomEquipments;                                 // 0x0190(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x1C];                                     // 0x01A0(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	ERivalTeamForce                               mRivalTeamForce;                                   // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsRivalTeamLeader;                                 // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1BE[0x1A];                                     // 0x01BE(0x001A)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsFarewellEnable;                                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsTravelRestrictions;                              // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DA[0x6];                                      // 0x01DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameDataFriendMonster) == 0x000008, "Wrong alignment on FGameDataFriendMonster");
static_assert(sizeof(FGameDataFriendMonster) == 0x0001E0, "Wrong size on FGameDataFriendMonster");
static_assert(offsetof(FGameDataFriendMonster, mUid) == 0x000000, "Member 'FGameDataFriendMonster::mUid' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mKindId) == 0x000004, "Member 'FGameDataFriendMonster::mKindId' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mParameterId) == 0x000008, "Member 'FGameDataFriendMonster::mParameterId' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mNickNameId) == 0x000010, "Member 'FGameDataFriendMonster::mNickNameId' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mNickName) == 0x000018, "Member 'FGameDataFriendMonster::mNickName' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mVoiceDataType) == 0x000030, "Member 'FGameDataFriendMonster::mVoiceDataType' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mVoiceDataTypeEN) == 0x000031, "Member 'FGameDataFriendMonster::mVoiceDataTypeEN' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mLevel) == 0x000034, "Member 'FGameDataFriendMonster::mLevel' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mHp) == 0x000038, "Member 'FGameDataFriendMonster::mHp' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mMp) == 0x00003C, "Member 'FGameDataFriendMonster::mMp' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mFriendShipPoint) == 0x000040, "Member 'FGameDataFriendMonster::mFriendShipPoint' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mTotalExp) == 0x000044, "Member 'FGameDataFriendMonster::mTotalExp' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mBaseStatus) == 0x000048, "Member 'FGameDataFriendMonster::mBaseStatus' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mIndividualStatus) == 0x000060, "Member 'FGameDataFriendMonster::mIndividualStatus' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mEquipmentCoins) == 0x000078, "Member 'FGameDataFriendMonster::mEquipmentCoins' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mActionInfos) == 0x000088, "Member 'FGameDataFriendMonster::mActionInfos' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mFeatures) == 0x000098, "Member 'FGameDataFriendMonster::mFeatures' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mAttributeList) == 0x0000A8, "Member 'FGameDataFriendMonster::mAttributeList' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mFeatureBuffList) == 0x0000F8, "Member 'FGameDataFriendMonster::mFeatureBuffList' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mGutsStockCount) == 0x000148, "Member 'FGameDataFriendMonster::mGutsStockCount' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, IsNew) == 0x00014C, "Member 'FGameDataFriendMonster::IsNew' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, FoodContainer) == 0x000150, "Member 'FGameDataFriendMonster::FoodContainer' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, StackStateChange) == 0x000168, "Member 'FGameDataFriendMonster::StackStateChange' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mIsMotivationUp) == 0x000188, "Member 'FGameDataFriendMonster::mIsMotivationUp' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mMotivationUpSeed) == 0x00018C, "Member 'FGameDataFriendMonster::mMotivationUpSeed' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mCustomEquipments) == 0x000190, "Member 'FGameDataFriendMonster::mCustomEquipments' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, mRivalTeamForce) == 0x0001BC, "Member 'FGameDataFriendMonster::mRivalTeamForce' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, IsRivalTeamLeader) == 0x0001BD, "Member 'FGameDataFriendMonster::IsRivalTeamLeader' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, IsFarewellEnable) == 0x0001D8, "Member 'FGameDataFriendMonster::IsFarewellEnable' has a wrong offset!");
static_assert(offsetof(FGameDataFriendMonster, IsTravelRestrictions) == 0x0001D9, "Member 'FGameDataFriendMonster::IsTravelRestrictions' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SaveLoadContentData
// 0x00C0 (0x00C0 - 0x0000)
struct FST_SaveLoadContentData final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CaptureTexture;                                    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x18];                                      // 0x0098(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameDataFriendMonster>         MonsterList;                                       // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SaveLoadContentData) == 0x000008, "Wrong alignment on FST_SaveLoadContentData");
static_assert(sizeof(FST_SaveLoadContentData) == 0x0000C0, "Wrong size on FST_SaveLoadContentData");
static_assert(offsetof(FST_SaveLoadContentData, CaptureTexture) == 0x000090, "Member 'FST_SaveLoadContentData::CaptureTexture' has a wrong offset!");
static_assert(offsetof(FST_SaveLoadContentData, MonsterList) == 0x0000B0, "Member 'FST_SaveLoadContentData::MonsterList' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchEmergencyLotteryData
// 0x0008 (0x0008 - 0x0000)
struct FDispatchEmergencyLotteryData final
{
public:
	int32                                         InArticactProbability;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotInArticactProbability;                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchEmergencyLotteryData) == 0x000004, "Wrong alignment on FDispatchEmergencyLotteryData");
static_assert(sizeof(FDispatchEmergencyLotteryData) == 0x000008, "Wrong size on FDispatchEmergencyLotteryData");
static_assert(offsetof(FDispatchEmergencyLotteryData, InArticactProbability) == 0x000000, "Member 'FDispatchEmergencyLotteryData::InArticactProbability' has a wrong offset!");
static_assert(offsetof(FDispatchEmergencyLotteryData, NotInArticactProbability) == 0x000004, "Member 'FDispatchEmergencyLotteryData::NotInArticactProbability' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchLotteryData
// 0x0060 (0x0060 - 0x0000)
struct FDispatchLotteryData final
{
public:
	int32                                         OverLevelSRTLimit_2;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverLevelSRTLimit_1;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HappenEmergencyParcentage;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDispatchEmergencyType, struct FDispatchEmergencyLotteryData> CheckEmergencyList;                                // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchLotteryData) == 0x000008, "Wrong alignment on FDispatchLotteryData");
static_assert(sizeof(FDispatchLotteryData) == 0x000060, "Wrong size on FDispatchLotteryData");
static_assert(offsetof(FDispatchLotteryData, OverLevelSRTLimit_2) == 0x000000, "Member 'FDispatchLotteryData::OverLevelSRTLimit_2' has a wrong offset!");
static_assert(offsetof(FDispatchLotteryData, OverLevelSRTLimit_1) == 0x000004, "Member 'FDispatchLotteryData::OverLevelSRTLimit_1' has a wrong offset!");
static_assert(offsetof(FDispatchLotteryData, HappenEmergencyParcentage) == 0x000008, "Member 'FDispatchLotteryData::HappenEmergencyParcentage' has a wrong offset!");
static_assert(offsetof(FDispatchLotteryData, CheckEmergencyList) == 0x000010, "Member 'FDispatchLotteryData::CheckEmergencyList' has a wrong offset!");

// ScriptStruct DarwinGame.LevelSequenceLoadAsset
// 0x0020 (0x0020 - 0x0000)
struct FLevelSequenceLoadAsset final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         CreateLevelSequenceObject;                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    CreateLevelSequenceActor;                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelSequenceLoadAsset) == 0x000008, "Wrong alignment on FLevelSequenceLoadAsset");
static_assert(sizeof(FLevelSequenceLoadAsset) == 0x000020, "Wrong size on FLevelSequenceLoadAsset");
static_assert(offsetof(FLevelSequenceLoadAsset, PrimaryAssetId) == 0x000000, "Member 'FLevelSequenceLoadAsset::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FLevelSequenceLoadAsset, CreateLevelSequenceObject) == 0x000010, "Member 'FLevelSequenceLoadAsset::CreateLevelSequenceObject' has a wrong offset!");
static_assert(offsetof(FLevelSequenceLoadAsset, CreateLevelSequenceActor) == 0x000018, "Member 'FLevelSequenceLoadAsset::CreateLevelSequenceActor' has a wrong offset!");

// ScriptStruct DarwinGame.EventLoadAsset
// 0x0120 (0x0120 - 0x0000)
struct FEventLoadAsset final
{
public:
	TMap<class FName, struct FLevelSequenceLoadAsset> LoadSequenceAssetList;                             // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             LoadUIIds;                                         // 0x00B0(0x0050)(NativeAccessSpecifierPublic)
	class FName                                   LoadEventLevelName;                                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadSEPackID;                                      // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoadVoicePackID;                                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventLoadAsset) == 0x000008, "Wrong alignment on FEventLoadAsset");
static_assert(sizeof(FEventLoadAsset) == 0x000120, "Wrong size on FEventLoadAsset");
static_assert(offsetof(FEventLoadAsset, LoadSequenceAssetList) == 0x000000, "Member 'FEventLoadAsset::LoadSequenceAssetList' has a wrong offset!");
static_assert(offsetof(FEventLoadAsset, LoadUIIds) == 0x0000B0, "Member 'FEventLoadAsset::LoadUIIds' has a wrong offset!");
static_assert(offsetof(FEventLoadAsset, LoadEventLevelName) == 0x000100, "Member 'FEventLoadAsset::LoadEventLevelName' has a wrong offset!");
static_assert(offsetof(FEventLoadAsset, LoadSEPackID) == 0x000108, "Member 'FEventLoadAsset::LoadSEPackID' has a wrong offset!");
static_assert(offsetof(FEventLoadAsset, LoadVoicePackID) == 0x000110, "Member 'FEventLoadAsset::LoadVoicePackID' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchTimeData
// 0x000C (0x000C - 0x0000)
struct FDispatchTimeData final
{
public:
	int32                                         EmergencyTimeMin;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmergencyTimeMax;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmergencyTimeLimit;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchTimeData) == 0x000004, "Wrong alignment on FDispatchTimeData");
static_assert(sizeof(FDispatchTimeData) == 0x00000C, "Wrong size on FDispatchTimeData");
static_assert(offsetof(FDispatchTimeData, EmergencyTimeMin) == 0x000000, "Member 'FDispatchTimeData::EmergencyTimeMin' has a wrong offset!");
static_assert(offsetof(FDispatchTimeData, EmergencyTimeMax) == 0x000004, "Member 'FDispatchTimeData::EmergencyTimeMax' has a wrong offset!");
static_assert(offsetof(FDispatchTimeData, EmergencyTimeLimit) == 0x000008, "Member 'FDispatchTimeData::EmergencyTimeLimit' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchMaterialLotteryData
// 0x0008 (0x0008 - 0x0000)
struct FDispatchMaterialLotteryData final
{
public:
	float                                         LotteryNumDiv;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailedDiv;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchMaterialLotteryData) == 0x000004, "Wrong alignment on FDispatchMaterialLotteryData");
static_assert(sizeof(FDispatchMaterialLotteryData) == 0x000008, "Wrong size on FDispatchMaterialLotteryData");
static_assert(offsetof(FDispatchMaterialLotteryData, LotteryNumDiv) == 0x000000, "Member 'FDispatchMaterialLotteryData::LotteryNumDiv' has a wrong offset!");
static_assert(offsetof(FDispatchMaterialLotteryData, FailedDiv) == 0x000004, "Member 'FDispatchMaterialLotteryData::FailedDiv' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventList
// 0x0088 (0x0090 - 0x0008)
struct FST_EventList final : public FTableRowBase
{
public:
	class FName                                   EventID;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEpisodeType                                  EpisodeType;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChangePlayerCharacterID;                           // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagName;                                          // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventType                                    EventType;                                         // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkFukidashiType                            FukidashiType;                                     // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkFukidashiColor                           FukidashiColor;                                    // 0x0026(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceOpenLocalizeIcon;                           // 0x0027(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestID;                                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ResetFlagNames;                                    // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSkipEvent;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUpdateGameProgressAll;                           // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUpdateGameScript;                                // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UpdateGameScriptID;                                // 0x0044(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayEventStartFade;                              // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EventStartFadeTime;                                // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayEventEndFade;                                // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EventEndFadeTime;                                  // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpawnMonsterEvent;                               // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScriptEventID;                                     // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventFinishFastTravelPointID;                      // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EForceMoveEventType                           ForceMoveType;                                     // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceMoveEventTime;                                // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForceMoveLocation;                                 // 0x0078(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ForceMoveRotation;                                 // 0x0084(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventList) == 0x000008, "Wrong alignment on FST_EventList");
static_assert(sizeof(FST_EventList) == 0x000090, "Wrong size on FST_EventList");
static_assert(offsetof(FST_EventList, EventID) == 0x000008, "Member 'FST_EventList::EventID' has a wrong offset!");
static_assert(offsetof(FST_EventList, EpisodeType) == 0x000010, "Member 'FST_EventList::EpisodeType' has a wrong offset!");
static_assert(offsetof(FST_EventList, ChangePlayerCharacterID) == 0x000014, "Member 'FST_EventList::ChangePlayerCharacterID' has a wrong offset!");
static_assert(offsetof(FST_EventList, FlagName) == 0x00001C, "Member 'FST_EventList::FlagName' has a wrong offset!");
static_assert(offsetof(FST_EventList, EventType) == 0x000024, "Member 'FST_EventList::EventType' has a wrong offset!");
static_assert(offsetof(FST_EventList, FukidashiType) == 0x000025, "Member 'FST_EventList::FukidashiType' has a wrong offset!");
static_assert(offsetof(FST_EventList, FukidashiColor) == 0x000026, "Member 'FST_EventList::FukidashiColor' has a wrong offset!");
static_assert(offsetof(FST_EventList, IsForceOpenLocalizeIcon) == 0x000027, "Member 'FST_EventList::IsForceOpenLocalizeIcon' has a wrong offset!");
static_assert(offsetof(FST_EventList, QuestID) == 0x000028, "Member 'FST_EventList::QuestID' has a wrong offset!");
static_assert(offsetof(FST_EventList, ResetFlagNames) == 0x000030, "Member 'FST_EventList::ResetFlagNames' has a wrong offset!");
static_assert(offsetof(FST_EventList, IsSkipEvent) == 0x000040, "Member 'FST_EventList::IsSkipEvent' has a wrong offset!");
static_assert(offsetof(FST_EventList, IsUpdateGameProgressAll) == 0x000041, "Member 'FST_EventList::IsUpdateGameProgressAll' has a wrong offset!");
static_assert(offsetof(FST_EventList, IsUpdateGameScript) == 0x000042, "Member 'FST_EventList::IsUpdateGameScript' has a wrong offset!");
static_assert(offsetof(FST_EventList, UpdateGameScriptID) == 0x000044, "Member 'FST_EventList::UpdateGameScriptID' has a wrong offset!");
static_assert(offsetof(FST_EventList, IsPlayEventStartFade) == 0x00004C, "Member 'FST_EventList::IsPlayEventStartFade' has a wrong offset!");
static_assert(offsetof(FST_EventList, EventStartFadeTime) == 0x000050, "Member 'FST_EventList::EventStartFadeTime' has a wrong offset!");
static_assert(offsetof(FST_EventList, IsPlayEventEndFade) == 0x000054, "Member 'FST_EventList::IsPlayEventEndFade' has a wrong offset!");
static_assert(offsetof(FST_EventList, EventEndFadeTime) == 0x000058, "Member 'FST_EventList::EventEndFadeTime' has a wrong offset!");
static_assert(offsetof(FST_EventList, IsSpawnMonsterEvent) == 0x00005C, "Member 'FST_EventList::IsSpawnMonsterEvent' has a wrong offset!");
static_assert(offsetof(FST_EventList, ScriptEventID) == 0x000060, "Member 'FST_EventList::ScriptEventID' has a wrong offset!");
static_assert(offsetof(FST_EventList, EventFinishFastTravelPointID) == 0x000068, "Member 'FST_EventList::EventFinishFastTravelPointID' has a wrong offset!");
static_assert(offsetof(FST_EventList, ForceMoveType) == 0x000070, "Member 'FST_EventList::ForceMoveType' has a wrong offset!");
static_assert(offsetof(FST_EventList, ForceMoveEventTime) == 0x000074, "Member 'FST_EventList::ForceMoveEventTime' has a wrong offset!");
static_assert(offsetof(FST_EventList, ForceMoveLocation) == 0x000078, "Member 'FST_EventList::ForceMoveLocation' has a wrong offset!");
static_assert(offsetof(FST_EventList, ForceMoveRotation) == 0x000084, "Member 'FST_EventList::ForceMoveRotation' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchCoinLotteryData
// 0x000C (0x000C - 0x0000)
struct FDispatchCoinLotteryData final
{
public:
	int32                                         Lottery;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchCoinLotteryData) == 0x000004, "Wrong alignment on FDispatchCoinLotteryData");
static_assert(sizeof(FDispatchCoinLotteryData) == 0x00000C, "Wrong size on FDispatchCoinLotteryData");
static_assert(offsetof(FDispatchCoinLotteryData, Lottery) == 0x000000, "Member 'FDispatchCoinLotteryData::Lottery' has a wrong offset!");
static_assert(offsetof(FDispatchCoinLotteryData, Min) == 0x000004, "Member 'FDispatchCoinLotteryData::Min' has a wrong offset!");
static_assert(offsetof(FDispatchCoinLotteryData, Max) == 0x000008, "Member 'FDispatchCoinLotteryData::Max' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIActionCmdStruct
// 0x0020 (0x0028 - 0x0008)
struct FST_UIActionCmdStruct final : public FTableRowBase
{
public:
	class FText                                   ActionText;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAxisMappingType                              Button;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIActionCmdStruct) == 0x000008, "Wrong alignment on FST_UIActionCmdStruct");
static_assert(sizeof(FST_UIActionCmdStruct) == 0x000028, "Wrong size on FST_UIActionCmdStruct");
static_assert(offsetof(FST_UIActionCmdStruct, ActionText) == 0x000008, "Member 'FST_UIActionCmdStruct::ActionText' has a wrong offset!");
static_assert(offsetof(FST_UIActionCmdStruct, Button) == 0x000020, "Member 'FST_UIActionCmdStruct::Button' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DispatchRewardItemInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_DispatchRewardItemInfo final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DispatchRewardItemInfo) == 0x000004, "Wrong alignment on FST_DispatchRewardItemInfo");
static_assert(sizeof(FST_DispatchRewardItemInfo) == 0x000010, "Wrong size on FST_DispatchRewardItemInfo");
static_assert(offsetof(FST_DispatchRewardItemInfo, ItemId) == 0x000000, "Member 'FST_DispatchRewardItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FST_DispatchRewardItemInfo, ItemNum) == 0x000008, "Member 'FST_DispatchRewardItemInfo::ItemNum' has a wrong offset!");
static_assert(offsetof(FST_DispatchRewardItemInfo, Probability) == 0x00000C, "Member 'FST_DispatchRewardItemInfo::Probability' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DispatchStationData
// 0x0020 (0x0028 - 0x0008)
struct FST_DispatchStationData final : public FTableRowBase
{
public:
	int32                                         Difficulty;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuitableLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScheduledTime;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_DispatchRewardItemInfo>     Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DispatchStationData) == 0x000008, "Wrong alignment on FST_DispatchStationData");
static_assert(sizeof(FST_DispatchStationData) == 0x000028, "Wrong size on FST_DispatchStationData");
static_assert(offsetof(FST_DispatchStationData, Difficulty) == 0x000008, "Member 'FST_DispatchStationData::Difficulty' has a wrong offset!");
static_assert(offsetof(FST_DispatchStationData, SuitableLevel) == 0x00000C, "Member 'FST_DispatchStationData::SuitableLevel' has a wrong offset!");
static_assert(offsetof(FST_DispatchStationData, ScheduledTime) == 0x000010, "Member 'FST_DispatchStationData::ScheduledTime' has a wrong offset!");
static_assert(offsetof(FST_DispatchStationData, Items) == 0x000018, "Member 'FST_DispatchStationData::Items' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventBattleAutoSavePoint
// 0x0020 (0x0028 - 0x0008)
struct FST_EventBattleAutoSavePoint final : public FTableRowBase
{
public:
	EPersistentLevelID                            PersistentLevelID;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EventBattleAutoSavePoint) == 0x000008, "Wrong alignment on FST_EventBattleAutoSavePoint");
static_assert(sizeof(FST_EventBattleAutoSavePoint) == 0x000028, "Wrong size on FST_EventBattleAutoSavePoint");
static_assert(offsetof(FST_EventBattleAutoSavePoint, PersistentLevelID) == 0x000008, "Member 'FST_EventBattleAutoSavePoint::PersistentLevelID' has a wrong offset!");
static_assert(offsetof(FST_EventBattleAutoSavePoint, Location) == 0x00000C, "Member 'FST_EventBattleAutoSavePoint::Location' has a wrong offset!");
static_assert(offsetof(FST_EventBattleAutoSavePoint, Rotation) == 0x000018, "Member 'FST_EventBattleAutoSavePoint::Rotation' has a wrong offset!");

// ScriptStruct DarwinGame.DitheringSyncParam
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FDitheringSyncParam final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDitheringSyncParam) == 0x000004, "Wrong alignment on FDitheringSyncParam");
static_assert(sizeof(FDitheringSyncParam) == 0x00000C, "Wrong size on FDitheringSyncParam");

// ScriptStruct DarwinGame.ST_EventItemConvertTreasure
// 0x0010 (0x0018 - 0x0008)
struct FST_EventItemConvertTreasure final : public FTableRowBase
{
public:
	int32                                         TreasureID;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EventItemConvertTreasure) == 0x000008, "Wrong alignment on FST_EventItemConvertTreasure");
static_assert(sizeof(FST_EventItemConvertTreasure) == 0x000018, "Wrong size on FST_EventItemConvertTreasure");
static_assert(offsetof(FST_EventItemConvertTreasure, TreasureID) == 0x000008, "Member 'FST_EventItemConvertTreasure::TreasureID' has a wrong offset!");
static_assert(offsetof(FST_EventItemConvertTreasure, AreaID) == 0x00000C, "Member 'FST_EventItemConvertTreasure::AreaID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DropItemInfo
// 0x000C (0x000C - 0x0000)
struct FST_DropItemInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DropItemInfo) == 0x000004, "Wrong alignment on FST_DropItemInfo");
static_assert(sizeof(FST_DropItemInfo) == 0x00000C, "Wrong size on FST_DropItemInfo");
static_assert(offsetof(FST_DropItemInfo, ID) == 0x000000, "Member 'FST_DropItemInfo::ID' has a wrong offset!");
static_assert(offsetof(FST_DropItemInfo, Rate) == 0x000008, "Member 'FST_DropItemInfo::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DropMoveParameter
// 0x0020 (0x0028 - 0x0008)
struct FST_DropMoveParameter final : public FTableRowBase
{
public:
	float                                         Strength;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Azimuth;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AzimuthRange;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Elevation;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElevationRange;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CorrectionLocation;                                // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DropMoveParameter) == 0x000008, "Wrong alignment on FST_DropMoveParameter");
static_assert(sizeof(FST_DropMoveParameter) == 0x000028, "Wrong size on FST_DropMoveParameter");
static_assert(offsetof(FST_DropMoveParameter, Strength) == 0x000008, "Member 'FST_DropMoveParameter::Strength' has a wrong offset!");
static_assert(offsetof(FST_DropMoveParameter, Azimuth) == 0x00000C, "Member 'FST_DropMoveParameter::Azimuth' has a wrong offset!");
static_assert(offsetof(FST_DropMoveParameter, AzimuthRange) == 0x000010, "Member 'FST_DropMoveParameter::AzimuthRange' has a wrong offset!");
static_assert(offsetof(FST_DropMoveParameter, Elevation) == 0x000014, "Member 'FST_DropMoveParameter::Elevation' has a wrong offset!");
static_assert(offsetof(FST_DropMoveParameter, ElevationRange) == 0x000018, "Member 'FST_DropMoveParameter::ElevationRange' has a wrong offset!");
static_assert(offsetof(FST_DropMoveParameter, CorrectionLocation) == 0x00001C, "Member 'FST_DropMoveParameter::CorrectionLocation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_Resistance_Data
// 0x0040 (0x0040 - 0x0000)
struct FST_PM_DetaileWin_Resistance_Data final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ResistanceName;                                    // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EUIKindResistanceLevel                        ResistanceLevel;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BodyText;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_Resistance_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_Resistance_Data");
static_assert(sizeof(FST_PM_DetaileWin_Resistance_Data) == 0x000040, "Wrong size on FST_PM_DetaileWin_Resistance_Data");
static_assert(offsetof(FST_PM_DetaileWin_Resistance_Data, Icon) == 0x000000, "Member 'FST_PM_DetaileWin_Resistance_Data::Icon' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Resistance_Data, ResistanceName) == 0x000008, "Member 'FST_PM_DetaileWin_Resistance_Data::ResistanceName' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Resistance_Data, ResistanceLevel) == 0x000020, "Member 'FST_PM_DetaileWin_Resistance_Data::ResistanceLevel' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Resistance_Data, BodyText) == 0x000028, "Member 'FST_PM_DetaileWin_Resistance_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventSpawnMonsterInfo
// 0x0028 (0x0030 - 0x0008)
struct FST_EventSpawnMonsterInfo final : public FTableRowBase
{
public:
	int32                                         MonsterId;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaceType;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EcologicalAiType;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventSpawnMonsterInfo) == 0x000008, "Wrong alignment on FST_EventSpawnMonsterInfo");
static_assert(sizeof(FST_EventSpawnMonsterInfo) == 0x000030, "Wrong size on FST_EventSpawnMonsterInfo");
static_assert(offsetof(FST_EventSpawnMonsterInfo, MonsterId) == 0x000008, "Member 'FST_EventSpawnMonsterInfo::MonsterId' has a wrong offset!");
static_assert(offsetof(FST_EventSpawnMonsterInfo, PlaceType) == 0x00000C, "Member 'FST_EventSpawnMonsterInfo::PlaceType' has a wrong offset!");
static_assert(offsetof(FST_EventSpawnMonsterInfo, EcologicalAiType) == 0x000010, "Member 'FST_EventSpawnMonsterInfo::EcologicalAiType' has a wrong offset!");
static_assert(offsetof(FST_EventSpawnMonsterInfo, Location) == 0x000018, "Member 'FST_EventSpawnMonsterInfo::Location' has a wrong offset!");
static_assert(offsetof(FST_EventSpawnMonsterInfo, Rotation) == 0x000024, "Member 'FST_EventSpawnMonsterInfo::Rotation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIAlertPlayAnimData
// 0x0010 (0x0010 - 0x0000)
struct FST_UIAlertPlayAnimData final
{
public:
	class UWidgetAnimation*                       AnimationData;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIAlertPlayAnimData) == 0x000008, "Wrong alignment on FST_UIAlertPlayAnimData");
static_assert(sizeof(FST_UIAlertPlayAnimData) == 0x000010, "Wrong size on FST_UIAlertPlayAnimData");
static_assert(offsetof(FST_UIAlertPlayAnimData, AnimationData) == 0x000000, "Member 'FST_UIAlertPlayAnimData::AnimationData' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonBigStarScarBossEventDataTable
// 0x0028 (0x0030 - 0x0008)
struct FST_DungeonBigStarScarBossEventDataTable final : public FTableRowBase
{
public:
	EMonsterBossType                              BigStarScarBossType;                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BossBattleStartEventFlag;                          // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleStartEventID;                            // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventFlag;                            // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventID;                              // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonBigStarScarBossEventDataTable) == 0x000008, "Wrong alignment on FST_DungeonBigStarScarBossEventDataTable");
static_assert(sizeof(FST_DungeonBigStarScarBossEventDataTable) == 0x000030, "Wrong size on FST_DungeonBigStarScarBossEventDataTable");
static_assert(offsetof(FST_DungeonBigStarScarBossEventDataTable, BigStarScarBossType) == 0x000008, "Member 'FST_DungeonBigStarScarBossEventDataTable::BigStarScarBossType' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossEventDataTable, BossBattleStartEventFlag) == 0x00000C, "Member 'FST_DungeonBigStarScarBossEventDataTable::BossBattleStartEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossEventDataTable, BossBattleStartEventID) == 0x000014, "Member 'FST_DungeonBigStarScarBossEventDataTable::BossBattleStartEventID' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossEventDataTable, BossBattleEndEventFlag) == 0x00001C, "Member 'FST_DungeonBigStarScarBossEventDataTable::BossBattleEndEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossEventDataTable, BossBattleEndEventID) == 0x000024, "Member 'FST_DungeonBigStarScarBossEventDataTable::BossBattleEndEventID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TreasureBoxToEventMatchData
// 0x0010 (0x0010 - 0x0000)
struct FST_TreasureBoxToEventMatchData final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoxType;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TreasureBoxToEventMatchData) == 0x000004, "Wrong alignment on FST_TreasureBoxToEventMatchData");
static_assert(sizeof(FST_TreasureBoxToEventMatchData) == 0x000010, "Wrong size on FST_TreasureBoxToEventMatchData");
static_assert(offsetof(FST_TreasureBoxToEventMatchData, EventID) == 0x000000, "Member 'FST_TreasureBoxToEventMatchData::EventID' has a wrong offset!");
static_assert(offsetof(FST_TreasureBoxToEventMatchData, AreaType) == 0x000008, "Member 'FST_TreasureBoxToEventMatchData::AreaType' has a wrong offset!");
static_assert(offsetof(FST_TreasureBoxToEventMatchData, BoxType) == 0x00000C, "Member 'FST_TreasureBoxToEventMatchData::BoxType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonBigStarScarBossWeightDataTable
// 0x0008 (0x0010 - 0x0008)
struct FST_DungeonBigStarScarBossWeightDataTable final : public FTableRowBase
{
public:
	EMonsterBossType                              BossType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weight;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonBigStarScarBossWeightDataTable) == 0x000008, "Wrong alignment on FST_DungeonBigStarScarBossWeightDataTable");
static_assert(sizeof(FST_DungeonBigStarScarBossWeightDataTable) == 0x000010, "Wrong size on FST_DungeonBigStarScarBossWeightDataTable");
static_assert(offsetof(FST_DungeonBigStarScarBossWeightDataTable, BossType) == 0x000008, "Member 'FST_DungeonBigStarScarBossWeightDataTable::BossType' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossWeightDataTable, Weight) == 0x00000C, "Member 'FST_DungeonBigStarScarBossWeightDataTable::Weight' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CoinStatusMenuType
// 0x0020 (0x0020 - 0x0000)
struct FST_CoinStatusMenuType final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CoinStatusMenuType) == 0x000008, "Wrong alignment on FST_CoinStatusMenuType");
static_assert(sizeof(FST_CoinStatusMenuType) == 0x000020, "Wrong size on FST_CoinStatusMenuType");
static_assert(offsetof(FST_CoinStatusMenuType, Icon) == 0x000000, "Member 'FST_CoinStatusMenuType::Icon' has a wrong offset!");
static_assert(offsetof(FST_CoinStatusMenuType, Name) == 0x000008, "Member 'FST_CoinStatusMenuType::Name' has a wrong offset!");

// ScriptStruct DarwinGame.EventLoadAssetData
// 0x0028 (0x0030 - 0x0008)
struct FEventLoadAssetData final : public FTableRowBase
{
public:
	class FString                                 EventID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventAssetNum;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventLoadAssetData) == 0x000008, "Wrong alignment on FEventLoadAssetData");
static_assert(sizeof(FEventLoadAssetData) == 0x000030, "Wrong size on FEventLoadAssetData");
static_assert(offsetof(FEventLoadAssetData, EventID) == 0x000008, "Member 'FEventLoadAssetData::EventID' has a wrong offset!");
static_assert(offsetof(FEventLoadAssetData, AssetName) == 0x000018, "Member 'FEventLoadAssetData::AssetName' has a wrong offset!");
static_assert(offsetof(FEventLoadAssetData, EventAssetNum) == 0x000028, "Member 'FEventLoadAssetData::EventAssetNum' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactCompReward
// 0x00F8 (0x0100 - 0x0008)
struct FST_ArtifactCompReward final : public FTableRowBase
{
public:
	int32                                         Exp;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Monsters;                                          // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Items;                                             // 0x0060(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Coins;                                             // 0x00B0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtifactCompReward) == 0x000008, "Wrong alignment on FST_ArtifactCompReward");
static_assert(sizeof(FST_ArtifactCompReward) == 0x000100, "Wrong size on FST_ArtifactCompReward");
static_assert(offsetof(FST_ArtifactCompReward, Exp) == 0x000008, "Member 'FST_ArtifactCompReward::Exp' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompReward, Gold) == 0x00000C, "Member 'FST_ArtifactCompReward::Gold' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompReward, Monsters) == 0x000010, "Member 'FST_ArtifactCompReward::Monsters' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompReward, Items) == 0x000060, "Member 'FST_ArtifactCompReward::Items' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCompReward, Coins) == 0x0000B0, "Member 'FST_ArtifactCompReward::Coins' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonBossRoomSettingDataTable
// 0x0008 (0x0010 - 0x0008)
struct FST_DungeonBossRoomSettingDataTable final : public FTableRowBase
{
public:
	int32                                         Hierarchy;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBossRoomBossType                             BossType;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonBossRoomSettingDataTable) == 0x000008, "Wrong alignment on FST_DungeonBossRoomSettingDataTable");
static_assert(sizeof(FST_DungeonBossRoomSettingDataTable) == 0x000010, "Wrong size on FST_DungeonBossRoomSettingDataTable");
static_assert(offsetof(FST_DungeonBossRoomSettingDataTable, Hierarchy) == 0x000008, "Member 'FST_DungeonBossRoomSettingDataTable::Hierarchy' has a wrong offset!");
static_assert(offsetof(FST_DungeonBossRoomSettingDataTable, BossType) == 0x00000C, "Member 'FST_DungeonBossRoomSettingDataTable::BossType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIResistanceResource
// 0x0020 (0x0028 - 0x0008)
struct FST_UIResistanceResource final : public FTableRowBase
{
public:
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIResistanceResource) == 0x000008, "Wrong alignment on FST_UIResistanceResource");
static_assert(sizeof(FST_UIResistanceResource) == 0x000028, "Wrong size on FST_UIResistanceResource");
static_assert(offsetof(FST_UIResistanceResource, Texture) == 0x000008, "Member 'FST_UIResistanceResource::Texture' has a wrong offset!");
static_assert(offsetof(FST_UIResistanceResource, Name) == 0x000010, "Member 'FST_UIResistanceResource::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonCampRoomNPCLotteryDataTable
// 0x0010 (0x0018 - 0x0008)
struct FST_DungeonCampRoomNPCLotteryDataTable final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lottery;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonCampRoomNPCLotteryDataTable) == 0x000008, "Wrong alignment on FST_DungeonCampRoomNPCLotteryDataTable");
static_assert(sizeof(FST_DungeonCampRoomNPCLotteryDataTable) == 0x000018, "Wrong size on FST_DungeonCampRoomNPCLotteryDataTable");
static_assert(offsetof(FST_DungeonCampRoomNPCLotteryDataTable, ID) == 0x000008, "Member 'FST_DungeonCampRoomNPCLotteryDataTable::ID' has a wrong offset!");
static_assert(offsetof(FST_DungeonCampRoomNPCLotteryDataTable, Lottery) == 0x000010, "Member 'FST_DungeonCampRoomNPCLotteryDataTable::Lottery' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventEndPartyPoint
// 0x0018 (0x0020 - 0x0008)
struct FST_EventEndPartyPoint final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventEndPartyPoint) == 0x000008, "Wrong alignment on FST_EventEndPartyPoint");
static_assert(sizeof(FST_EventEndPartyPoint) == 0x000020, "Wrong size on FST_EventEndPartyPoint");
static_assert(offsetof(FST_EventEndPartyPoint, Location) == 0x000008, "Member 'FST_EventEndPartyPoint::Location' has a wrong offset!");
static_assert(offsetof(FST_EventEndPartyPoint, Rotation) == 0x000014, "Member 'FST_EventEndPartyPoint::Rotation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestMapPoint
// 0x0020 (0x0020 - 0x0000)
struct FST_QuestMapPoint final
{
public:
	EMapQuestIconType                             MapQuestIconType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CircleSize;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachNpcID;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestMapPoint) == 0x000004, "Wrong alignment on FST_QuestMapPoint");
static_assert(sizeof(FST_QuestMapPoint) == 0x000020, "Wrong size on FST_QuestMapPoint");
static_assert(offsetof(FST_QuestMapPoint, MapQuestIconType) == 0x000000, "Member 'FST_QuestMapPoint::MapQuestIconType' has a wrong offset!");
static_assert(offsetof(FST_QuestMapPoint, CircleSize) == 0x000004, "Member 'FST_QuestMapPoint::CircleSize' has a wrong offset!");
static_assert(offsetof(FST_QuestMapPoint, Location) == 0x000008, "Member 'FST_QuestMapPoint::Location' has a wrong offset!");
static_assert(offsetof(FST_QuestMapPoint, AreaType) == 0x000014, "Member 'FST_QuestMapPoint::AreaType' has a wrong offset!");
static_assert(offsetof(FST_QuestMapPoint, AttachNpcID) == 0x000018, "Member 'FST_QuestMapPoint::AttachNpcID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonClearRewardData
// 0x0010 (0x0010 - 0x0000)
struct FST_DungeonClearRewardData final
{
public:
	int32                                         ClearTimeBorder;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinNum;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldBase;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonClearRewardData) == 0x000004, "Wrong alignment on FST_DungeonClearRewardData");
static_assert(sizeof(FST_DungeonClearRewardData) == 0x000010, "Wrong size on FST_DungeonClearRewardData");
static_assert(offsetof(FST_DungeonClearRewardData, ClearTimeBorder) == 0x000000, "Member 'FST_DungeonClearRewardData::ClearTimeBorder' has a wrong offset!");
static_assert(offsetof(FST_DungeonClearRewardData, CoinNum) == 0x000004, "Member 'FST_DungeonClearRewardData::CoinNum' has a wrong offset!");
static_assert(offsetof(FST_DungeonClearRewardData, Level) == 0x000008, "Member 'FST_DungeonClearRewardData::Level' has a wrong offset!");
static_assert(offsetof(FST_DungeonClearRewardData, GoldBase) == 0x00000C, "Member 'FST_DungeonClearRewardData::GoldBase' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonBigStarScarBossEvent
// 0x0020 (0x0020 - 0x0000)
struct FST_DungeonBigStarScarBossEvent final
{
public:
	class FName                                   BossBattleStartEventFlag;                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleStartEventID;                            // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventFlag;                            // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventID;                              // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonBigStarScarBossEvent) == 0x000004, "Wrong alignment on FST_DungeonBigStarScarBossEvent");
static_assert(sizeof(FST_DungeonBigStarScarBossEvent) == 0x000020, "Wrong size on FST_DungeonBigStarScarBossEvent");
static_assert(offsetof(FST_DungeonBigStarScarBossEvent, BossBattleStartEventFlag) == 0x000000, "Member 'FST_DungeonBigStarScarBossEvent::BossBattleStartEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossEvent, BossBattleStartEventID) == 0x000008, "Member 'FST_DungeonBigStarScarBossEvent::BossBattleStartEventID' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossEvent, BossBattleEndEventFlag) == 0x000010, "Member 'FST_DungeonBigStarScarBossEvent::BossBattleEndEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonBigStarScarBossEvent, BossBattleEndEventID) == 0x000018, "Member 'FST_DungeonBigStarScarBossEvent::BossBattleEndEventID' has a wrong offset!");

// ScriptStruct DarwinGame.Parkour
// 0x002C (0x002C - 0x0000)
struct FParkour final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value1;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value2;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeAngle;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDownhill;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CapsuleScale;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gradient;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParkour) == 0x000004, "Wrong alignment on FParkour");
static_assert(sizeof(FParkour) == 0x00002C, "Wrong size on FParkour");
static_assert(offsetof(FParkour, ID) == 0x000000, "Member 'FParkour::ID' has a wrong offset!");
static_assert(offsetof(FParkour, Value1) == 0x000008, "Member 'FParkour::Value1' has a wrong offset!");
static_assert(offsetof(FParkour, Value2) == 0x00000C, "Member 'FParkour::Value2' has a wrong offset!");
static_assert(offsetof(FParkour, SlopeAngle) == 0x000010, "Member 'FParkour::SlopeAngle' has a wrong offset!");
static_assert(offsetof(FParkour, bIsDownhill) == 0x000014, "Member 'FParkour::bIsDownhill' has a wrong offset!");
static_assert(offsetof(FParkour, CapsuleScale) == 0x000018, "Member 'FParkour::CapsuleScale' has a wrong offset!");
static_assert(offsetof(FParkour, Gradient) == 0x000020, "Member 'FParkour::Gradient' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonSettingData
// 0x0088 (0x0088 - 0x0000)
struct FST_DungeonSettingData final
{
public:
	EDungeonType                                  DungeonType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBossRoomBossType                             BossRoomBossType;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossType                              BigStarScarBossType;                               // 0x0002(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalRoomNum;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EDungeonClearRank, struct FST_DungeonClearRewardData> ClearRewardData;                                   // 0x0008(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FName                                   BossBattleStartEventFlag;                          // 0x0058(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleStartEventID;                            // 0x0060(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventFlag;                            // 0x0068(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventID;                              // 0x0070(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonNestType                              NestType;                                          // 0x0078(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SuitableLevel;                                     // 0x007C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnPointFastTravelID;                           // 0x0080(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonSettingData) == 0x000008, "Wrong alignment on FST_DungeonSettingData");
static_assert(sizeof(FST_DungeonSettingData) == 0x000088, "Wrong size on FST_DungeonSettingData");
static_assert(offsetof(FST_DungeonSettingData, DungeonType) == 0x000000, "Member 'FST_DungeonSettingData::DungeonType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, BossRoomBossType) == 0x000001, "Member 'FST_DungeonSettingData::BossRoomBossType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, BigStarScarBossType) == 0x000002, "Member 'FST_DungeonSettingData::BigStarScarBossType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, TotalRoomNum) == 0x000004, "Member 'FST_DungeonSettingData::TotalRoomNum' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, ClearRewardData) == 0x000008, "Member 'FST_DungeonSettingData::ClearRewardData' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, BossBattleStartEventFlag) == 0x000058, "Member 'FST_DungeonSettingData::BossBattleStartEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, BossBattleStartEventID) == 0x000060, "Member 'FST_DungeonSettingData::BossBattleStartEventID' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, BossBattleEndEventFlag) == 0x000068, "Member 'FST_DungeonSettingData::BossBattleEndEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, BossBattleEndEventID) == 0x000070, "Member 'FST_DungeonSettingData::BossBattleEndEventID' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, NestType) == 0x000078, "Member 'FST_DungeonSettingData::NestType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, SuitableLevel) == 0x00007C, "Member 'FST_DungeonSettingData::SuitableLevel' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingData, ReturnPointFastTravelID) == 0x000080, "Member 'FST_DungeonSettingData::ReturnPointFastTravelID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonFastTravelIDData
// 0x0050 (0x0050 - 0x0000)
struct FST_DungeonFastTravelIDData final
{
public:
	TMap<EDungeonRoomType, class FName>           FastTravelID;                                      // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonFastTravelIDData) == 0x000008, "Wrong alignment on FST_DungeonFastTravelIDData");
static_assert(sizeof(FST_DungeonFastTravelIDData) == 0x000050, "Wrong size on FST_DungeonFastTravelIDData");
static_assert(offsetof(FST_DungeonFastTravelIDData, FastTravelID) == 0x000000, "Member 'FST_DungeonFastTravelIDData::FastTravelID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIPanelIcon
// 0x0028 (0x0030 - 0x0008)
struct FST_UIPanelIcon final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIPanelIcon) == 0x000008, "Wrong alignment on FST_UIPanelIcon");
static_assert(sizeof(FST_UIPanelIcon) == 0x000030, "Wrong size on FST_UIPanelIcon");
static_assert(offsetof(FST_UIPanelIcon, IconTexture) == 0x000008, "Member 'FST_UIPanelIcon::IconTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonMazeBigStarScarBossDataTable
// 0x0008 (0x0010 - 0x0008)
struct FST_DungeonMazeBigStarScarBossDataTable final : public FTableRowBase
{
public:
	int32                                         Hierarchy;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossType                              BossType;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonMazeBigStarScarBossDataTable) == 0x000008, "Wrong alignment on FST_DungeonMazeBigStarScarBossDataTable");
static_assert(sizeof(FST_DungeonMazeBigStarScarBossDataTable) == 0x000010, "Wrong size on FST_DungeonMazeBigStarScarBossDataTable");
static_assert(offsetof(FST_DungeonMazeBigStarScarBossDataTable, Hierarchy) == 0x000008, "Member 'FST_DungeonMazeBigStarScarBossDataTable::Hierarchy' has a wrong offset!");
static_assert(offsetof(FST_DungeonMazeBigStarScarBossDataTable, BossType) == 0x00000C, "Member 'FST_DungeonMazeBigStarScarBossDataTable::BossType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonMonsterSpawnPoint
// 0x0010 (0x0018 - 0x0008)
struct FST_DungeonMonsterSpawnPoint final : public FTableRowBase
{
public:
	TArray<struct FST_MonsterSpawnPoint>          SpawnPointList;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonMonsterSpawnPoint) == 0x000008, "Wrong alignment on FST_DungeonMonsterSpawnPoint");
static_assert(sizeof(FST_DungeonMonsterSpawnPoint) == 0x000018, "Wrong size on FST_DungeonMonsterSpawnPoint");
static_assert(offsetof(FST_DungeonMonsterSpawnPoint, SpawnPointList) == 0x000008, "Member 'FST_DungeonMonsterSpawnPoint::SpawnPointList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonReleaseBigStarScarBossDataTable
// 0x0010 (0x0018 - 0x0008)
struct FST_DungeonReleaseBigStarScarBossDataTable final : public FTableRowBase
{
public:
	TArray<EMonsterBossType>                      BossTypes;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonReleaseBigStarScarBossDataTable) == 0x000008, "Wrong alignment on FST_DungeonReleaseBigStarScarBossDataTable");
static_assert(sizeof(FST_DungeonReleaseBigStarScarBossDataTable) == 0x000018, "Wrong size on FST_DungeonReleaseBigStarScarBossDataTable");
static_assert(offsetof(FST_DungeonReleaseBigStarScarBossDataTable, BossTypes) == 0x000008, "Member 'FST_DungeonReleaseBigStarScarBossDataTable::BossTypes' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Tips
// 0x0038 (0x0040 - 0x0008)
struct FST_Tips final : public FTableRowBase
{
public:
	class FText                                   TipsTitle;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TipsText;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             TipsImage;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Tips) == 0x000008, "Wrong alignment on FST_Tips");
static_assert(sizeof(FST_Tips) == 0x000040, "Wrong size on FST_Tips");
static_assert(offsetof(FST_Tips, TipsTitle) == 0x000008, "Member 'FST_Tips::TipsTitle' has a wrong offset!");
static_assert(offsetof(FST_Tips, TipsText) == 0x000020, "Member 'FST_Tips::TipsText' has a wrong offset!");
static_assert(offsetof(FST_Tips, TipsImage) == 0x000038, "Member 'FST_Tips::TipsImage' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonSettingDataTable
// 0x0088 (0x0090 - 0x0008)
struct FST_DungeonSettingDataTable final : public FTableRowBase
{
public:
	EDungeonType                                  DungeonType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBossRoomBossType                             BossRoomBossType;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossType                              BigStarScarBossType;                               // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalRoomNum;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EDungeonClearRank, struct FST_DungeonClearRewardData> ClearRewardData;                                   // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   BossBattleStartEventFlag;                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleStartEventID;                            // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventFlag;                            // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BossBattleEndEventID;                              // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonNestType                              NestType;                                          // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SuitableLevel;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnPointFastTravelID;                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonSettingDataTable) == 0x000008, "Wrong alignment on FST_DungeonSettingDataTable");
static_assert(sizeof(FST_DungeonSettingDataTable) == 0x000090, "Wrong size on FST_DungeonSettingDataTable");
static_assert(offsetof(FST_DungeonSettingDataTable, DungeonType) == 0x000008, "Member 'FST_DungeonSettingDataTable::DungeonType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, BossRoomBossType) == 0x000009, "Member 'FST_DungeonSettingDataTable::BossRoomBossType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, BigStarScarBossType) == 0x00000A, "Member 'FST_DungeonSettingDataTable::BigStarScarBossType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, TotalRoomNum) == 0x00000C, "Member 'FST_DungeonSettingDataTable::TotalRoomNum' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, ClearRewardData) == 0x000010, "Member 'FST_DungeonSettingDataTable::ClearRewardData' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, BossBattleStartEventFlag) == 0x000060, "Member 'FST_DungeonSettingDataTable::BossBattleStartEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, BossBattleStartEventID) == 0x000068, "Member 'FST_DungeonSettingDataTable::BossBattleStartEventID' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, BossBattleEndEventFlag) == 0x000070, "Member 'FST_DungeonSettingDataTable::BossBattleEndEventFlag' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, BossBattleEndEventID) == 0x000078, "Member 'FST_DungeonSettingDataTable::BossBattleEndEventID' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, NestType) == 0x000080, "Member 'FST_DungeonSettingDataTable::NestType' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, SuitableLevel) == 0x000084, "Member 'FST_DungeonSettingDataTable::SuitableLevel' has a wrong offset!");
static_assert(offsetof(FST_DungeonSettingDataTable, ReturnPointFastTravelID) == 0x000088, "Member 'FST_DungeonSettingDataTable::ReturnPointFastTravelID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonlLightingLevelList
// 0x0070 (0x0070 - 0x0000)
struct FST_DungeonlLightingLevelList final
{
public:
	TMap<EAreaType, class FName>                  Area;                                              // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           Strong;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Boss;                                              // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonlLightingLevelList) == 0x000008, "Wrong alignment on FST_DungeonlLightingLevelList");
static_assert(sizeof(FST_DungeonlLightingLevelList) == 0x000070, "Wrong size on FST_DungeonlLightingLevelList");
static_assert(offsetof(FST_DungeonlLightingLevelList, Area) == 0x000000, "Member 'FST_DungeonlLightingLevelList::Area' has a wrong offset!");
static_assert(offsetof(FST_DungeonlLightingLevelList, Strong) == 0x000050, "Member 'FST_DungeonlLightingLevelList::Strong' has a wrong offset!");
static_assert(offsetof(FST_DungeonlLightingLevelList, Boss) == 0x000060, "Member 'FST_DungeonlLightingLevelList::Boss' has a wrong offset!");

// ScriptStruct DarwinGame.ItemUseToMonster
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FItemUseToMonster final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemUseToMonster) == 0x000008, "Wrong alignment on FItemUseToMonster");
static_assert(sizeof(FItemUseToMonster) == 0x000050, "Wrong size on FItemUseToMonster");

// ScriptStruct DarwinGame.ItemCollection
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FItemCollection final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCollection) == 0x000008, "Wrong alignment on FItemCollection");
static_assert(sizeof(FItemCollection) == 0x000050, "Wrong size on FItemCollection");

// ScriptStruct DarwinGame.OrderQuestMonsterVisionData
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FOrderQuestMonsterVisionData final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrderQuestMonsterVisionData) == 0x000008, "Wrong alignment on FOrderQuestMonsterVisionData");
static_assert(sizeof(FOrderQuestMonsterVisionData) == 0x000058, "Wrong size on FOrderQuestMonsterVisionData");

// ScriptStruct DarwinGame.OrderQuestData
// 0x0518 (0x0518 - 0x0000)
struct FOrderQuestData final
{
public:
	TMap<class FName, int32>                      KillMonsters;                                      // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      KillMonstersOfNightmare;                           // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      ScoutMonsters;                                     // 0x00A0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      FriendJoinMonsters;                                // 0x00F0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      StealMonsters;                                     // 0x0140(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      PlayerActions;                                     // 0x0190(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      GetItems;                                          // 0x01E0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      UseItemsToMe;                                      // 0x0230(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FItemUseToMonster>   UseItemsToFriend;                                  // 0x0280(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FItemUseToMonster>   UseItemsToEnemy;                                   // 0x02D0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      BuyItems;                                          // 0x0320(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      SellItems;                                         // 0x0370(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      MakeItems;                                         // 0x03C0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FItemCollection>     CollectionItems;                                   // 0x0410(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FOrderQuestArtifactData                Artifact;                                          // 0x0460(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOrderQuestMonsterVisionData           MonsterVision;                                     // 0x0468(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ERivalTeamForce, int32>                  KillRivalTeams;                                    // 0x04C0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         CategoryOfDaily;                                   // 0x0510(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOrderQuestData) == 0x000008, "Wrong alignment on FOrderQuestData");
static_assert(sizeof(FOrderQuestData) == 0x000518, "Wrong size on FOrderQuestData");
static_assert(offsetof(FOrderQuestData, KillMonsters) == 0x000000, "Member 'FOrderQuestData::KillMonsters' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, KillMonstersOfNightmare) == 0x000050, "Member 'FOrderQuestData::KillMonstersOfNightmare' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, ScoutMonsters) == 0x0000A0, "Member 'FOrderQuestData::ScoutMonsters' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, FriendJoinMonsters) == 0x0000F0, "Member 'FOrderQuestData::FriendJoinMonsters' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, StealMonsters) == 0x000140, "Member 'FOrderQuestData::StealMonsters' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, PlayerActions) == 0x000190, "Member 'FOrderQuestData::PlayerActions' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, GetItems) == 0x0001E0, "Member 'FOrderQuestData::GetItems' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, UseItemsToMe) == 0x000230, "Member 'FOrderQuestData::UseItemsToMe' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, UseItemsToFriend) == 0x000280, "Member 'FOrderQuestData::UseItemsToFriend' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, UseItemsToEnemy) == 0x0002D0, "Member 'FOrderQuestData::UseItemsToEnemy' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, BuyItems) == 0x000320, "Member 'FOrderQuestData::BuyItems' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, SellItems) == 0x000370, "Member 'FOrderQuestData::SellItems' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, MakeItems) == 0x0003C0, "Member 'FOrderQuestData::MakeItems' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, CollectionItems) == 0x000410, "Member 'FOrderQuestData::CollectionItems' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, Artifact) == 0x000460, "Member 'FOrderQuestData::Artifact' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, MonsterVision) == 0x000468, "Member 'FOrderQuestData::MonsterVision' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, KillRivalTeams) == 0x0004C0, "Member 'FOrderQuestData::KillRivalTeams' has a wrong offset!");
static_assert(offsetof(FOrderQuestData, CategoryOfDaily) == 0x000510, "Member 'FOrderQuestData::CategoryOfDaily' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonRoomLevelListEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_DungeonRoomLevelListEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonRoomLevelListEditor) == 0x000001, "Wrong alignment on FST_DungeonRoomLevelListEditor");
static_assert(sizeof(FST_DungeonRoomLevelListEditor) == 0x000001, "Wrong size on FST_DungeonRoomLevelListEditor");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_ArtifactDrop_Data
// 0x0018 (0x0018 - 0x0000)
struct FST_PM_DetaileWin_ArtifactDrop_Data
{
public:
	class FText                                   BodyText;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_ArtifactDrop_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_ArtifactDrop_Data");
static_assert(sizeof(FST_PM_DetaileWin_ArtifactDrop_Data) == 0x000018, "Wrong size on FST_PM_DetaileWin_ArtifactDrop_Data");
static_assert(offsetof(FST_PM_DetaileWin_ArtifactDrop_Data, BodyText) == 0x000000, "Member 'FST_PM_DetaileWin_ArtifactDrop_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.VolumeScaleParamter
// 0x0018 (0x0020 - 0x0008)
struct FVolumeScaleParamter final : public FTableRowBase
{
public:
	float                                         BgmVolumeScale;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeVolumeScale;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolumeScale;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Reverb1BusSendScale;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Reverb2BusSendScale;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVolumeScaleParamter) == 0x000008, "Wrong alignment on FVolumeScaleParamter");
static_assert(sizeof(FVolumeScaleParamter) == 0x000020, "Wrong size on FVolumeScaleParamter");
static_assert(offsetof(FVolumeScaleParamter, BgmVolumeScale) == 0x000008, "Member 'FVolumeScaleParamter::BgmVolumeScale' has a wrong offset!");
static_assert(offsetof(FVolumeScaleParamter, SeVolumeScale) == 0x00000C, "Member 'FVolumeScaleParamter::SeVolumeScale' has a wrong offset!");
static_assert(offsetof(FVolumeScaleParamter, VoiceVolumeScale) == 0x000010, "Member 'FVolumeScaleParamter::VoiceVolumeScale' has a wrong offset!");
static_assert(offsetof(FVolumeScaleParamter, Reverb1BusSendScale) == 0x000014, "Member 'FVolumeScaleParamter::Reverb1BusSendScale' has a wrong offset!");
static_assert(offsetof(FVolumeScaleParamter, Reverb2BusSendScale) == 0x000018, "Member 'FVolumeScaleParamter::Reverb2BusSendScale' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalWaitRateRowInfo
// 0x0010 (0x0018 - 0x0008)
struct FST_EcologicalWaitRateRowInfo final : public FTableRowBase
{
public:
	TArray<struct FST_EcologicalWaitRateInfo>     EcoWaitInfos;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EcologicalWaitRateRowInfo) == 0x000008, "Wrong alignment on FST_EcologicalWaitRateRowInfo");
static_assert(sizeof(FST_EcologicalWaitRateRowInfo) == 0x000018, "Wrong size on FST_EcologicalWaitRateRowInfo");
static_assert(offsetof(FST_EcologicalWaitRateRowInfo, EcoWaitInfos) == 0x000008, "Member 'FST_EcologicalWaitRateRowInfo::EcoWaitInfos' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalWaitDetailInfo
// 0x0030 (0x0038 - 0x0008)
struct FST_EcologicalWaitDetailInfo final : public FTableRowBase
{
public:
	class FName                                   WaitKind;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSecond;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSecond;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopFlg;                                           // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChangeParameter;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeVal;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddAbnormal;                                       // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EcologicalWaitDetailInfo) == 0x000008, "Wrong alignment on FST_EcologicalWaitDetailInfo");
static_assert(sizeof(FST_EcologicalWaitDetailInfo) == 0x000038, "Wrong size on FST_EcologicalWaitDetailInfo");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, WaitKind) == 0x000008, "Member 'FST_EcologicalWaitDetailInfo::WaitKind' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, MinSecond) == 0x000010, "Member 'FST_EcologicalWaitDetailInfo::MinSecond' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, MaxSecond) == 0x000014, "Member 'FST_EcologicalWaitDetailInfo::MaxSecond' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, CoolTime) == 0x000018, "Member 'FST_EcologicalWaitDetailInfo::CoolTime' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, LoopFlg) == 0x00001C, "Member 'FST_EcologicalWaitDetailInfo::LoopFlg' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, ChangeParameter) == 0x000020, "Member 'FST_EcologicalWaitDetailInfo::ChangeParameter' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, ChangeVal) == 0x000028, "Member 'FST_EcologicalWaitDetailInfo::ChangeVal' has a wrong offset!");
static_assert(offsetof(FST_EcologicalWaitDetailInfo, AddAbnormal) == 0x00002C, "Member 'FST_EcologicalWaitDetailInfo::AddAbnormal' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EcologicalAIInfo
// 0x0020 (0x0028 - 0x0008)
struct FST_EcologicalAIInfo final : public FTableRowBase
{
public:
	class FName                                   ActionRateID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaitRateID;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MoveRateID;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EXActRateID;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EcologicalAIInfo) == 0x000008, "Wrong alignment on FST_EcologicalAIInfo");
static_assert(sizeof(FST_EcologicalAIInfo) == 0x000028, "Wrong size on FST_EcologicalAIInfo");
static_assert(offsetof(FST_EcologicalAIInfo, ActionRateID) == 0x000008, "Member 'FST_EcologicalAIInfo::ActionRateID' has a wrong offset!");
static_assert(offsetof(FST_EcologicalAIInfo, WaitRateID) == 0x000010, "Member 'FST_EcologicalAIInfo::WaitRateID' has a wrong offset!");
static_assert(offsetof(FST_EcologicalAIInfo, MoveRateID) == 0x000018, "Member 'FST_EcologicalAIInfo::MoveRateID' has a wrong offset!");
static_assert(offsetof(FST_EcologicalAIInfo, EXActRateID) == 0x000020, "Member 'FST_EcologicalAIInfo::EXActRateID' has a wrong offset!");

// ScriptStruct DarwinGame.ObjectReactionEventData
// 0x0008 (0x0008 - 0x0000)
struct FObjectReactionEventData final
{
public:
	class FName                                   mEventID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectReactionEventData) == 0x000004, "Wrong alignment on FObjectReactionEventData");
static_assert(sizeof(FObjectReactionEventData) == 0x000008, "Wrong size on FObjectReactionEventData");
static_assert(offsetof(FObjectReactionEventData, mEventID) == 0x000000, "Member 'FObjectReactionEventData::mEventID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StationPanelData
// 0x0020 (0x0020 - 0x0000)
struct FST_StationPanelData final
{
public:
	struct FLinearColor                           TextColor;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StationPanelData) == 0x000004, "Wrong alignment on FST_StationPanelData");
static_assert(sizeof(FST_StationPanelData) == 0x000020, "Wrong size on FST_StationPanelData");
static_assert(offsetof(FST_StationPanelData, TextColor) == 0x000000, "Member 'FST_StationPanelData::TextColor' has a wrong offset!");
static_assert(offsetof(FST_StationPanelData, OutlineColor) == 0x000010, "Member 'FST_StationPanelData::OutlineColor' has a wrong offset!");

// ScriptStruct DarwinGame.EffectComponentInfo
// 0x0010 (0x0010 - 0x0000)
struct FEffectComponentInfo final
{
public:
	EEffectPlayType                               PlayType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectProgress                               PlayablePhase;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEffectComponentInfo) == 0x000004, "Wrong alignment on FEffectComponentInfo");
static_assert(sizeof(FEffectComponentInfo) == 0x000010, "Wrong size on FEffectComponentInfo");
static_assert(offsetof(FEffectComponentInfo, PlayType) == 0x000000, "Member 'FEffectComponentInfo::PlayType' has a wrong offset!");
static_assert(offsetof(FEffectComponentInfo, PlayablePhase) == 0x000001, "Member 'FEffectComponentInfo::PlayablePhase' has a wrong offset!");
static_assert(offsetof(FEffectComponentInfo, DelayTime) == 0x000004, "Member 'FEffectComponentInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(FEffectComponentInfo, SoundID) == 0x000008, "Member 'FEffectComponentInfo::SoundID' has a wrong offset!");

// ScriptStruct DarwinGame.EmotionEffectData
// 0x0000 (0x0080 - 0x0080)
struct FEmotionEffectData final : public FSizeEffectData
{
};
static_assert(alignof(FEmotionEffectData) == 0x000008, "Wrong alignment on FEmotionEffectData");
static_assert(sizeof(FEmotionEffectData) == 0x000080, "Wrong size on FEmotionEffectData");

// ScriptStruct DarwinGame.ST_CompFontInfo
// 0x0018 (0x0018 - 0x0000)
struct FST_CompFontInfo final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArtifactCompCategoryType                     Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_CompFontInfo) == 0x000008, "Wrong alignment on FST_CompFontInfo");
static_assert(sizeof(FST_CompFontInfo) == 0x000018, "Wrong size on FST_CompFontInfo");
static_assert(offsetof(FST_CompFontInfo, Texture) == 0x000000, "Member 'FST_CompFontInfo::Texture' has a wrong offset!");
static_assert(offsetof(FST_CompFontInfo, Material) == 0x000008, "Member 'FST_CompFontInfo::Material' has a wrong offset!");
static_assert(offsetof(FST_CompFontInfo, Type) == 0x000010, "Member 'FST_CompFontInfo::Type' has a wrong offset!");

// ScriptStruct DarwinGame.BattleCommonEffectData
// 0x0000 (0x0080 - 0x0080)
struct FBattleCommonEffectData final : public FSizeEffectData
{
};
static_assert(alignof(FBattleCommonEffectData) == 0x000008, "Wrong alignment on FBattleCommonEffectData");
static_assert(sizeof(FBattleCommonEffectData) == 0x000080, "Wrong size on FBattleCommonEffectData");

// ScriptStruct DarwinGame.StatusEffectData
// 0x0000 (0x0080 - 0x0080)
struct FStatusEffectData final : public FSizeEffectData
{
};
static_assert(alignof(FStatusEffectData) == 0x000008, "Wrong alignment on FStatusEffectData");
static_assert(sizeof(FStatusEffectData) == 0x000080, "Wrong size on FStatusEffectData");

// ScriptStruct DarwinGame.ST_MyTeamLevelGrowData
// 0x0008 (0x0010 - 0x0008)
struct FST_MyTeamLevelGrowData final : public FTableRowBase
{
public:
	int32                                         teamLevel;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MyTeamLevelGrowData) == 0x000008, "Wrong alignment on FST_MyTeamLevelGrowData");
static_assert(sizeof(FST_MyTeamLevelGrowData) == 0x000010, "Wrong size on FST_MyTeamLevelGrowData");
static_assert(offsetof(FST_MyTeamLevelGrowData, teamLevel) == 0x000008, "Member 'FST_MyTeamLevelGrowData::teamLevel' has a wrong offset!");
static_assert(offsetof(FST_MyTeamLevelGrowData, Value) == 0x00000C, "Member 'FST_MyTeamLevelGrowData::Value' has a wrong offset!");

// ScriptStruct DarwinGame.ObjectBreakEffectData
// 0x0000 (0x0030 - 0x0030)
struct FObjectBreakEffectData final : public FCommonEffectData
{
};
static_assert(alignof(FObjectBreakEffectData) == 0x000008, "Wrong alignment on FObjectBreakEffectData");
static_assert(sizeof(FObjectBreakEffectData) == 0x000030, "Wrong size on FObjectBreakEffectData");

// ScriptStruct DarwinGame.ST_UIStatusResource
// 0x0018 (0x0020 - 0x0008)
struct FST_UIStatusResource final : public FTableRowBase
{
public:
	class UTexture2D*                             IconTexture;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LargeTexture;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconID;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIStatusResource) == 0x000008, "Wrong alignment on FST_UIStatusResource");
static_assert(sizeof(FST_UIStatusResource) == 0x000020, "Wrong size on FST_UIStatusResource");
static_assert(offsetof(FST_UIStatusResource, IconTexture) == 0x000008, "Member 'FST_UIStatusResource::IconTexture' has a wrong offset!");
static_assert(offsetof(FST_UIStatusResource, LargeTexture) == 0x000010, "Member 'FST_UIStatusResource::LargeTexture' has a wrong offset!");
static_assert(offsetof(FST_UIStatusResource, IconID) == 0x000018, "Member 'FST_UIStatusResource::IconID' has a wrong offset!");

// ScriptStruct DarwinGame.FootSmokeEffectData
// 0x00A0 (0x00A8 - 0x0008)
struct FFootSmokeEffectData final : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mWalk;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mRun;                                              // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mJump;                                             // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mLand;                                             // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootSmokeEffectData) == 0x000008, "Wrong alignment on FFootSmokeEffectData");
static_assert(sizeof(FFootSmokeEffectData) == 0x0000A8, "Wrong size on FFootSmokeEffectData");
static_assert(offsetof(FFootSmokeEffectData, mWalk) == 0x000008, "Member 'FFootSmokeEffectData::mWalk' has a wrong offset!");
static_assert(offsetof(FFootSmokeEffectData, mRun) == 0x000030, "Member 'FFootSmokeEffectData::mRun' has a wrong offset!");
static_assert(offsetof(FFootSmokeEffectData, mJump) == 0x000058, "Member 'FFootSmokeEffectData::mJump' has a wrong offset!");
static_assert(offsetof(FFootSmokeEffectData, mLand) == 0x000080, "Member 'FFootSmokeEffectData::mLand' has a wrong offset!");

// ScriptStruct DarwinGame.TimeZoneEnvParamter
// 0x0060 (0x0068 - 0x0008)
struct FTimeZoneEnvParamter final : public FTableRowBase
{
public:
	class FString                                 Faskull;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desert;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Volcano;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Snow;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Forest;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Base;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeZoneEnvParamter) == 0x000008, "Wrong alignment on FTimeZoneEnvParamter");
static_assert(sizeof(FTimeZoneEnvParamter) == 0x000068, "Wrong size on FTimeZoneEnvParamter");
static_assert(offsetof(FTimeZoneEnvParamter, Faskull) == 0x000008, "Member 'FTimeZoneEnvParamter::Faskull' has a wrong offset!");
static_assert(offsetof(FTimeZoneEnvParamter, Desert) == 0x000018, "Member 'FTimeZoneEnvParamter::Desert' has a wrong offset!");
static_assert(offsetof(FTimeZoneEnvParamter, Volcano) == 0x000028, "Member 'FTimeZoneEnvParamter::Volcano' has a wrong offset!");
static_assert(offsetof(FTimeZoneEnvParamter, Snow) == 0x000038, "Member 'FTimeZoneEnvParamter::Snow' has a wrong offset!");
static_assert(offsetof(FTimeZoneEnvParamter, Forest) == 0x000048, "Member 'FTimeZoneEnvParamter::Forest' has a wrong offset!");
static_assert(offsetof(FTimeZoneEnvParamter, Base) == 0x000058, "Member 'FTimeZoneEnvParamter::Base' has a wrong offset!");

// ScriptStruct DarwinGame.SlingshotEffectData
// 0x00A0 (0x00A8 - 0x0008)
struct FSlingshotEffectData final : public FEffectDataTableRawBase
{
public:
	TSoftClassPtr<class UClass>                   mLow;                                              // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mMiddle;                                           // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mHigh;                                             // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   mHighest;                                          // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlingshotEffectData) == 0x000008, "Wrong alignment on FSlingshotEffectData");
static_assert(sizeof(FSlingshotEffectData) == 0x0000A8, "Wrong size on FSlingshotEffectData");
static_assert(offsetof(FSlingshotEffectData, mLow) == 0x000008, "Member 'FSlingshotEffectData::mLow' has a wrong offset!");
static_assert(offsetof(FSlingshotEffectData, mMiddle) == 0x000030, "Member 'FSlingshotEffectData::mMiddle' has a wrong offset!");
static_assert(offsetof(FSlingshotEffectData, mHigh) == 0x000058, "Member 'FSlingshotEffectData::mHigh' has a wrong offset!");
static_assert(offsetof(FSlingshotEffectData, mHighest) == 0x000080, "Member 'FSlingshotEffectData::mHighest' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MyTeamIineRange
// 0x0010 (0x0018 - 0x0008)
struct FST_MyTeamIineRange final : public FTableRowBase
{
public:
	TArray<int32>                                 IineRange;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MyTeamIineRange) == 0x000008, "Wrong alignment on FST_MyTeamIineRange");
static_assert(sizeof(FST_MyTeamIineRange) == 0x000018, "Wrong size on FST_MyTeamIineRange");
static_assert(offsetof(FST_MyTeamIineRange, IineRange) == 0x000008, "Member 'FST_MyTeamIineRange::IineRange' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterParameterDataInfo
// 0x0118 (0x0120 - 0x0008)
struct FST_MonsterParameterDataInfo final : public FTableRowBase
{
public:
	class FName                                   KindId;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NickNameID;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             Status;                                            // 0x001C(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ExpGain;                                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleAI;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_CharacterExeActionInfo>     ActionInfos;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Features;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_DropItemInfo>               DropItemInfos;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterGetUpType                             MonsterGetUpType;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDespoil;                                          // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedIndividualStatus;                         // 0x0072(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Status                             FixedIndividualStatus;                             // 0x0074(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseFixedArtifactCategoryListForMonsterSense;      // 0x008C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FixedArtifactCategoryListForMonsterSense;          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLotteryGoldDropRate;                           // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LotteryGoldDropRate;                               // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDirectDropGoldCount;                           // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DirectDropGoldCount;                               // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCoinDropRate;                                  // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CoinDropRate;                                      // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActionCycleOverride;                               // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionCycleEnemy;                                  // 0x00BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomEquipmentType                   CustomEquipmentType;                               // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ERivalTeamForce                               RivalTeamForce;                                    // 0x00D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeader;                                         // 0x00D1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLotteryRivalEquipment;                            // 0x00D2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LotteryRivalEquipmentRate;                         // 0x00D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LotteryRivalLeaderRate;                            // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LotteryRivalForceRate;                             // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterType                                  MonsterType;                                       // 0x00F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EscapeProb;                                        // 0x00F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFarewellEnable;                                   // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTravelRestrictions;                               // 0x00F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CorrectionValueLevel;                              // 0x00FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperLimitLevel;                                   // 0x0100(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 JewelArtifact;                                     // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPrivilegeMonster;                                // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterParameterDataInfo) == 0x000008, "Wrong alignment on FST_MonsterParameterDataInfo");
static_assert(sizeof(FST_MonsterParameterDataInfo) == 0x000120, "Wrong size on FST_MonsterParameterDataInfo");
static_assert(offsetof(FST_MonsterParameterDataInfo, KindId) == 0x000008, "Member 'FST_MonsterParameterDataInfo::KindId' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, NickNameID) == 0x000010, "Member 'FST_MonsterParameterDataInfo::NickNameID' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, Level) == 0x000018, "Member 'FST_MonsterParameterDataInfo::Level' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, Status) == 0x00001C, "Member 'FST_MonsterParameterDataInfo::Status' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, ExpGain) == 0x000034, "Member 'FST_MonsterParameterDataInfo::ExpGain' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, BattleAI) == 0x000038, "Member 'FST_MonsterParameterDataInfo::BattleAI' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, ActionInfos) == 0x000040, "Member 'FST_MonsterParameterDataInfo::ActionInfos' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, Features) == 0x000050, "Member 'FST_MonsterParameterDataInfo::Features' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, DropItemInfos) == 0x000060, "Member 'FST_MonsterParameterDataInfo::DropItemInfos' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, MonsterGetUpType) == 0x000070, "Member 'FST_MonsterParameterDataInfo::MonsterGetUpType' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bDespoil) == 0x000071, "Member 'FST_MonsterParameterDataInfo::bDespoil' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bUseFixedIndividualStatus) == 0x000072, "Member 'FST_MonsterParameterDataInfo::bUseFixedIndividualStatus' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, FixedIndividualStatus) == 0x000074, "Member 'FST_MonsterParameterDataInfo::FixedIndividualStatus' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bUseFixedArtifactCategoryListForMonsterSense) == 0x00008C, "Member 'FST_MonsterParameterDataInfo::bUseFixedArtifactCategoryListForMonsterSense' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, FixedArtifactCategoryListForMonsterSense) == 0x000090, "Member 'FST_MonsterParameterDataInfo::FixedArtifactCategoryListForMonsterSense' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bUseLotteryGoldDropRate) == 0x0000A0, "Member 'FST_MonsterParameterDataInfo::bUseLotteryGoldDropRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, LotteryGoldDropRate) == 0x0000A4, "Member 'FST_MonsterParameterDataInfo::LotteryGoldDropRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bUseDirectDropGoldCount) == 0x0000A8, "Member 'FST_MonsterParameterDataInfo::bUseDirectDropGoldCount' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, DirectDropGoldCount) == 0x0000AC, "Member 'FST_MonsterParameterDataInfo::DirectDropGoldCount' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bUseCoinDropRate) == 0x0000B0, "Member 'FST_MonsterParameterDataInfo::bUseCoinDropRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, CoinDropRate) == 0x0000B4, "Member 'FST_MonsterParameterDataInfo::CoinDropRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, ActionCycleOverride) == 0x0000B8, "Member 'FST_MonsterParameterDataInfo::ActionCycleOverride' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, ActionCycleEnemy) == 0x0000BC, "Member 'FST_MonsterParameterDataInfo::ActionCycleEnemy' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, CustomEquipmentType) == 0x0000C0, "Member 'FST_MonsterParameterDataInfo::CustomEquipmentType' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, RivalTeamForce) == 0x0000D0, "Member 'FST_MonsterParameterDataInfo::RivalTeamForce' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bIsLeader) == 0x0000D1, "Member 'FST_MonsterParameterDataInfo::bIsLeader' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bLotteryRivalEquipment) == 0x0000D2, "Member 'FST_MonsterParameterDataInfo::bLotteryRivalEquipment' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, LotteryRivalEquipmentRate) == 0x0000D4, "Member 'FST_MonsterParameterDataInfo::LotteryRivalEquipmentRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, LotteryRivalLeaderRate) == 0x0000D8, "Member 'FST_MonsterParameterDataInfo::LotteryRivalLeaderRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, LotteryRivalForceRate) == 0x0000E0, "Member 'FST_MonsterParameterDataInfo::LotteryRivalForceRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, MonsterType) == 0x0000F0, "Member 'FST_MonsterParameterDataInfo::MonsterType' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, EscapeProb) == 0x0000F4, "Member 'FST_MonsterParameterDataInfo::EscapeProb' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bFarewellEnable) == 0x0000F8, "Member 'FST_MonsterParameterDataInfo::bFarewellEnable' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, bTravelRestrictions) == 0x0000F9, "Member 'FST_MonsterParameterDataInfo::bTravelRestrictions' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, CorrectionValueLevel) == 0x0000FC, "Member 'FST_MonsterParameterDataInfo::CorrectionValueLevel' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, UpperLimitLevel) == 0x000100, "Member 'FST_MonsterParameterDataInfo::UpperLimitLevel' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, JewelArtifact) == 0x000108, "Member 'FST_MonsterParameterDataInfo::JewelArtifact' has a wrong offset!");
static_assert(offsetof(FST_MonsterParameterDataInfo, IsPrivilegeMonster) == 0x000118, "Member 'FST_MonsterParameterDataInfo::IsPrivilegeMonster' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LeftMenu_3_UpDownDelta
// 0x0010 (0x0010 - 0x0000)
struct FST_LeftMenu_3_UpDownDelta final
{
public:
	class UUIStartLoopAnimation*                  Up;                                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIStartLoopAnimation*                  Down;                                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LeftMenu_3_UpDownDelta) == 0x000008, "Wrong alignment on FST_LeftMenu_3_UpDownDelta");
static_assert(sizeof(FST_LeftMenu_3_UpDownDelta) == 0x000010, "Wrong size on FST_LeftMenu_3_UpDownDelta");
static_assert(offsetof(FST_LeftMenu_3_UpDownDelta, Up) == 0x000000, "Member 'FST_LeftMenu_3_UpDownDelta::Up' has a wrong offset!");
static_assert(offsetof(FST_LeftMenu_3_UpDownDelta, Down) == 0x000008, "Member 'FST_LeftMenu_3_UpDownDelta::Down' has a wrong offset!");

// ScriptStruct DarwinGame.BossEffectData
// 0x0000 (0x00F8 - 0x00F8)
struct FBossEffectData final : public FKindEffectData
{
};
static_assert(alignof(FBossEffectData) == 0x000008, "Wrong alignment on FBossEffectData");
static_assert(sizeof(FBossEffectData) == 0x0000F8, "Wrong size on FBossEffectData");

// ScriptStruct DarwinGame.ST_MapAreaJudgeData
// 0x0010 (0x0018 - 0x0008)
struct FST_MapAreaJudgeData final : public FTableRowBase
{
public:
	int32                                         Color;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MapAreaJudgeData) == 0x000008, "Wrong alignment on FST_MapAreaJudgeData");
static_assert(sizeof(FST_MapAreaJudgeData) == 0x000018, "Wrong size on FST_MapAreaJudgeData");
static_assert(offsetof(FST_MapAreaJudgeData, Color) == 0x000008, "Member 'FST_MapAreaJudgeData::Color' has a wrong offset!");
static_assert(offsetof(FST_MapAreaJudgeData, AreaID) == 0x00000C, "Member 'FST_MapAreaJudgeData::AreaID' has a wrong offset!");

// ScriptStruct DarwinGame.EffectInfo
// 0x0028 (0x0030 - 0x0008)
struct FEffectInfo final : public FTableRowBase
{
public:
	class UParticleSystem*                        PSTemplate;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectType                                   EffectType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Attached;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstSocket;                                       // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocket;                                      // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               WidthScaleMode;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectInfo) == 0x000008, "Wrong alignment on FEffectInfo");
static_assert(sizeof(FEffectInfo) == 0x000030, "Wrong size on FEffectInfo");
static_assert(offsetof(FEffectInfo, PSTemplate) == 0x000008, "Member 'FEffectInfo::PSTemplate' has a wrong offset!");
static_assert(offsetof(FEffectInfo, EffectType) == 0x000010, "Member 'FEffectInfo::EffectType' has a wrong offset!");
static_assert(offsetof(FEffectInfo, Attached) == 0x000011, "Member 'FEffectInfo::Attached' has a wrong offset!");
static_assert(offsetof(FEffectInfo, SocketName) == 0x000014, "Member 'FEffectInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FEffectInfo, FirstSocket) == 0x00001C, "Member 'FEffectInfo::FirstSocket' has a wrong offset!");
static_assert(offsetof(FEffectInfo, SecondSocket) == 0x000024, "Member 'FEffectInfo::SecondSocket' has a wrong offset!");
static_assert(offsetof(FEffectInfo, WidthScaleMode) == 0x00002C, "Member 'FEffectInfo::WidthScaleMode' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EmojiIconData
// 0x0010 (0x0018 - 0x0008)
struct FST_EmojiIconData final : public FTableRowBase
{
public:
	EAxisMappingType                              AxisName;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmojiVariationType                           Variation;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AlternateResourceName;                             // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EmojiIconData) == 0x000008, "Wrong alignment on FST_EmojiIconData");
static_assert(sizeof(FST_EmojiIconData) == 0x000018, "Wrong size on FST_EmojiIconData");
static_assert(offsetof(FST_EmojiIconData, AxisName) == 0x000008, "Member 'FST_EmojiIconData::AxisName' has a wrong offset!");
static_assert(offsetof(FST_EmojiIconData, Variation) == 0x000009, "Member 'FST_EmojiIconData::Variation' has a wrong offset!");
static_assert(offsetof(FST_EmojiIconData, AlternateResourceName) == 0x00000C, "Member 'FST_EmojiIconData::AlternateResourceName' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteBlinkSetting
// 0x0008 (0x0008 - 0x0000)
struct FEmoteBlinkSetting final
{
public:
	EEmoteBlinkType                               BlinkType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteBlinkSetting) == 0x000004, "Wrong alignment on FEmoteBlinkSetting");
static_assert(sizeof(FEmoteBlinkSetting) == 0x000008, "Wrong size on FEmoteBlinkSetting");
static_assert(offsetof(FEmoteBlinkSetting, BlinkType) == 0x000000, "Member 'FEmoteBlinkSetting::BlinkType' has a wrong offset!");
static_assert(offsetof(FEmoteBlinkSetting, BlendTime) == 0x000004, "Member 'FEmoteBlinkSetting::BlendTime' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteFaceSetting
// 0x0004 (0x0004 - 0x0000)
struct FEmoteFaceSetting final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteFaceSetting) == 0x000004, "Wrong alignment on FEmoteFaceSetting");
static_assert(sizeof(FEmoteFaceSetting) == 0x000004, "Wrong size on FEmoteFaceSetting");
static_assert(offsetof(FEmoteFaceSetting, BlendTime) == 0x000000, "Member 'FEmoteFaceSetting::BlendTime' has a wrong offset!");

// ScriptStruct DarwinGame.RideEventStruct
// 0x0018 (0x0018 - 0x0000)
struct FRideEventStruct final : public FReactionEventBaseStruct
{
public:
	class AGPACharacter*                          Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RideAnimation;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnd;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRideEventStruct) == 0x000008, "Wrong alignment on FRideEventStruct");
static_assert(sizeof(FRideEventStruct) == 0x000018, "Wrong size on FRideEventStruct");
static_assert(offsetof(FRideEventStruct, Target) == 0x000000, "Member 'FRideEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FRideEventStruct, RideAnimation) == 0x000008, "Member 'FRideEventStruct::RideAnimation' has a wrong offset!");
static_assert(offsetof(FRideEventStruct, bIsEnd) == 0x000010, "Member 'FRideEventStruct::bIsEnd' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteFace
// 0x0004 (0x0004 - 0x0000)
struct FEmoteFace final
{
public:
	float                                         PoseFrameTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteFace) == 0x000004, "Wrong alignment on FEmoteFace");
static_assert(sizeof(FEmoteFace) == 0x000004, "Wrong size on FEmoteFace");
static_assert(offsetof(FEmoteFace, PoseFrameTime) == 0x000000, "Member 'FEmoteFace::PoseFrameTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EmoteFaceData
// 0x0008 (0x0010 - 0x0008)
struct FST_EmoteFaceData final : public FTableRowBase
{
public:
	struct FEmoteFace                             FaceData;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FEmoteFaceSetting                      FaceSetting;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EmoteFaceData) == 0x000008, "Wrong alignment on FST_EmoteFaceData");
static_assert(sizeof(FST_EmoteFaceData) == 0x000010, "Wrong size on FST_EmoteFaceData");
static_assert(offsetof(FST_EmoteFaceData, FaceData) == 0x000008, "Member 'FST_EmoteFaceData::FaceData' has a wrong offset!");
static_assert(offsetof(FST_EmoteFaceData, FaceSetting) == 0x00000C, "Member 'FST_EmoteFaceData::FaceSetting' has a wrong offset!");

// ScriptStruct DarwinGame.EmoteVocalizeAnimData
// 0x0000 (0x0010 - 0x0010)
struct FEmoteVocalizeAnimData final : public FEmoteBlendDataBase
{
};
static_assert(alignof(FEmoteVocalizeAnimData) == 0x000004, "Wrong alignment on FEmoteVocalizeAnimData");
static_assert(sizeof(FEmoteVocalizeAnimData) == 0x000010, "Wrong size on FEmoteVocalizeAnimData");

// ScriptStruct DarwinGame.EmoteFacialRequestData
// 0x000C (0x000C - 0x0000)
struct FEmoteFacialRequestData final
{
public:
	float                                         PoseFrameTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFacial;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteFacialRequestData) == 0x000004, "Wrong alignment on FEmoteFacialRequestData");
static_assert(sizeof(FEmoteFacialRequestData) == 0x00000C, "Wrong size on FEmoteFacialRequestData");
static_assert(offsetof(FEmoteFacialRequestData, PoseFrameTime) == 0x000000, "Member 'FEmoteFacialRequestData::PoseFrameTime' has a wrong offset!");
static_assert(offsetof(FEmoteFacialRequestData, bUseFacial) == 0x000004, "Member 'FEmoteFacialRequestData::bUseFacial' has a wrong offset!");
static_assert(offsetof(FEmoteFacialRequestData, BlendTime) == 0x000008, "Member 'FEmoteFacialRequestData::BlendTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_InputGuideCautionDataTable
// 0x0018 (0x0020 - 0x0008)
struct FST_InputGuideCautionDataTable final : public FTableRowBase
{
public:
	class FText                                   CautionText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_InputGuideCautionDataTable) == 0x000008, "Wrong alignment on FST_InputGuideCautionDataTable");
static_assert(sizeof(FST_InputGuideCautionDataTable) == 0x000020, "Wrong size on FST_InputGuideCautionDataTable");
static_assert(offsetof(FST_InputGuideCautionDataTable, CautionText) == 0x000008, "Member 'FST_InputGuideCautionDataTable::CautionText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EmoteSettingData
// 0x0050 (0x0058 - 0x0008)
struct FST_EmoteSettingData final : public FTableRowBase
{
public:
	EStampIconType                                StampType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteStampSetting                     StampSetting;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteBodyMotionAsset                  BodyMotion;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEmoteBodyMotionSetting                BodyMotionSetting;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EEmoteFaceType                                FaceType;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteBlinkSetting                     BlinkSetting;                                      // 0x0044(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEmoteVocalizeSetting                  VocalizeSetting;                                   // 0x004C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EmoteSettingData) == 0x000008, "Wrong alignment on FST_EmoteSettingData");
static_assert(sizeof(FST_EmoteSettingData) == 0x000058, "Wrong size on FST_EmoteSettingData");
static_assert(offsetof(FST_EmoteSettingData, StampType) == 0x000008, "Member 'FST_EmoteSettingData::StampType' has a wrong offset!");
static_assert(offsetof(FST_EmoteSettingData, StampSetting) == 0x00000C, "Member 'FST_EmoteSettingData::StampSetting' has a wrong offset!");
static_assert(offsetof(FST_EmoteSettingData, BodyMotion) == 0x000018, "Member 'FST_EmoteSettingData::BodyMotion' has a wrong offset!");
static_assert(offsetof(FST_EmoteSettingData, BodyMotionSetting) == 0x000030, "Member 'FST_EmoteSettingData::BodyMotionSetting' has a wrong offset!");
static_assert(offsetof(FST_EmoteSettingData, FaceType) == 0x000040, "Member 'FST_EmoteSettingData::FaceType' has a wrong offset!");
static_assert(offsetof(FST_EmoteSettingData, BlinkSetting) == 0x000044, "Member 'FST_EmoteSettingData::BlinkSetting' has a wrong offset!");
static_assert(offsetof(FST_EmoteSettingData, VocalizeSetting) == 0x00004C, "Member 'FST_EmoteSettingData::VocalizeSetting' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EnemyPlacementDataTable
// 0x0020 (0x0028 - 0x0008)
struct FST_EnemyPlacementDataTable final : public FTableRowBase
{
public:
	class FName                                   OneEnemyParamIDName;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIParamIDName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIThinkIDName;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIRootIDName;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EnemyPlacementDataTable) == 0x000008, "Wrong alignment on FST_EnemyPlacementDataTable");
static_assert(sizeof(FST_EnemyPlacementDataTable) == 0x000028, "Wrong size on FST_EnemyPlacementDataTable");
static_assert(offsetof(FST_EnemyPlacementDataTable, OneEnemyParamIDName) == 0x000008, "Member 'FST_EnemyPlacementDataTable::OneEnemyParamIDName' has a wrong offset!");
static_assert(offsetof(FST_EnemyPlacementDataTable, AIParamIDName) == 0x000010, "Member 'FST_EnemyPlacementDataTable::AIParamIDName' has a wrong offset!");
static_assert(offsetof(FST_EnemyPlacementDataTable, AIThinkIDName) == 0x000018, "Member 'FST_EnemyPlacementDataTable::AIThinkIDName' has a wrong offset!");
static_assert(offsetof(FST_EnemyPlacementDataTable, AIRootIDName) == 0x000020, "Member 'FST_EnemyPlacementDataTable::AIRootIDName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EnemySpawnCoGenerator
// 0x002C (0x002C - 0x0000)
struct FST_EnemySpawnCoGenerator final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEnemySpawnCoGenDistanceType                  DistanceType;                                      // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraAngle;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLength;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Activate;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EnemySpawnCoGenerator) == 0x000004, "Wrong alignment on FST_EnemySpawnCoGenerator");
static_assert(sizeof(FST_EnemySpawnCoGenerator) == 0x00002C, "Wrong size on FST_EnemySpawnCoGenerator");
static_assert(offsetof(FST_EnemySpawnCoGenerator, Index) == 0x000000, "Member 'FST_EnemySpawnCoGenerator::Index' has a wrong offset!");
static_assert(offsetof(FST_EnemySpawnCoGenerator, Location) == 0x000004, "Member 'FST_EnemySpawnCoGenerator::Location' has a wrong offset!");
static_assert(offsetof(FST_EnemySpawnCoGenerator, Rotator) == 0x000010, "Member 'FST_EnemySpawnCoGenerator::Rotator' has a wrong offset!");
static_assert(offsetof(FST_EnemySpawnCoGenerator, DistanceType) == 0x00001C, "Member 'FST_EnemySpawnCoGenerator::DistanceType' has a wrong offset!");
static_assert(offsetof(FST_EnemySpawnCoGenerator, CameraAngle) == 0x000020, "Member 'FST_EnemySpawnCoGenerator::CameraAngle' has a wrong offset!");
static_assert(offsetof(FST_EnemySpawnCoGenerator, CameraLength) == 0x000024, "Member 'FST_EnemySpawnCoGenerator::CameraLength' has a wrong offset!");
static_assert(offsetof(FST_EnemySpawnCoGenerator, Activate) == 0x000028, "Member 'FST_EnemySpawnCoGenerator::Activate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterBaseStatus
// 0x0018 (0x0018 - 0x0000)
struct FST_MonsterBaseStatus final
{
public:
	int32                                         HP;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Str;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Def;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dex;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mag;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterBaseStatus) == 0x000004, "Wrong alignment on FST_MonsterBaseStatus");
static_assert(sizeof(FST_MonsterBaseStatus) == 0x000018, "Wrong size on FST_MonsterBaseStatus");
static_assert(offsetof(FST_MonsterBaseStatus, HP) == 0x000000, "Member 'FST_MonsterBaseStatus::HP' has a wrong offset!");
static_assert(offsetof(FST_MonsterBaseStatus, MP) == 0x000004, "Member 'FST_MonsterBaseStatus::MP' has a wrong offset!");
static_assert(offsetof(FST_MonsterBaseStatus, Str) == 0x000008, "Member 'FST_MonsterBaseStatus::Str' has a wrong offset!");
static_assert(offsetof(FST_MonsterBaseStatus, Def) == 0x00000C, "Member 'FST_MonsterBaseStatus::Def' has a wrong offset!");
static_assert(offsetof(FST_MonsterBaseStatus, Dex) == 0x000010, "Member 'FST_MonsterBaseStatus::Dex' has a wrong offset!");
static_assert(offsetof(FST_MonsterBaseStatus, Mag) == 0x000014, "Member 'FST_MonsterBaseStatus::Mag' has a wrong offset!");

// ScriptStruct DarwinGame.ST_WorkMonsterParam
// 0x0010 (0x0010 - 0x0000)
struct FST_WorkMonsterParam final
{
public:
	class AMonsterBase*                           Monster;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_WorkMonsterParam) == 0x000008, "Wrong alignment on FST_WorkMonsterParam");
static_assert(sizeof(FST_WorkMonsterParam) == 0x000010, "Wrong size on FST_WorkMonsterParam");
static_assert(offsetof(FST_WorkMonsterParam, Monster) == 0x000000, "Member 'FST_WorkMonsterParam::Monster' has a wrong offset!");

// ScriptStruct DarwinGame.LensBloomSetting
// 0x000C (0x000C - 0x0000)
struct FLensBloomSetting final
{
public:
	EBloomMethod                                  Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensBloomSetting) == 0x000004, "Wrong alignment on FLensBloomSetting");
static_assert(sizeof(FLensBloomSetting) == 0x00000C, "Wrong size on FLensBloomSetting");
static_assert(offsetof(FLensBloomSetting, Method) == 0x000000, "Member 'FLensBloomSetting::Method' has a wrong offset!");
static_assert(offsetof(FLensBloomSetting, Intensity) == 0x000004, "Member 'FLensBloomSetting::Intensity' has a wrong offset!");
static_assert(offsetof(FLensBloomSetting, Threshold) == 0x000008, "Member 'FLensBloomSetting::Threshold' has a wrong offset!");

// ScriptStruct DarwinGame.LensSetting
// 0x0038 (0x0038 - 0x0000)
struct FLensSetting final
{
public:
	bool                                          IsEditBloom;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEditLensFlares;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEditDepthOfField;                                // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLensBloomSetting                      Bloom;                                             // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLensFlaresSetting                     LensFlares;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLensSetting) == 0x000008, "Wrong alignment on FLensSetting");
static_assert(sizeof(FLensSetting) == 0x000038, "Wrong size on FLensSetting");
static_assert(offsetof(FLensSetting, IsEditBloom) == 0x000000, "Member 'FLensSetting::IsEditBloom' has a wrong offset!");
static_assert(offsetof(FLensSetting, IsEditLensFlares) == 0x000001, "Member 'FLensSetting::IsEditLensFlares' has a wrong offset!");
static_assert(offsetof(FLensSetting, IsEditDepthOfField) == 0x000002, "Member 'FLensSetting::IsEditDepthOfField' has a wrong offset!");
static_assert(offsetof(FLensSetting, Bloom) == 0x000004, "Member 'FLensSetting::Bloom' has a wrong offset!");
static_assert(offsetof(FLensSetting, LensFlares) == 0x000010, "Member 'FLensSetting::LensFlares' has a wrong offset!");

// ScriptStruct DarwinGame.RenderingFeaturesSetting
// 0x0018 (0x0018 - 0x0000)
struct FRenderingFeaturesSetting final
{
public:
	TArray<struct FPostProcessMaterial>           PostProcessMaterials;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEditPostProcessMaterials;                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRenderingFeaturesSetting) == 0x000008, "Wrong alignment on FRenderingFeaturesSetting");
static_assert(sizeof(FRenderingFeaturesSetting) == 0x000018, "Wrong size on FRenderingFeaturesSetting");
static_assert(offsetof(FRenderingFeaturesSetting, PostProcessMaterials) == 0x000000, "Member 'FRenderingFeaturesSetting::PostProcessMaterials' has a wrong offset!");
static_assert(offsetof(FRenderingFeaturesSetting, IsEditPostProcessMaterials) == 0x000010, "Member 'FRenderingFeaturesSetting::IsEditPostProcessMaterials' has a wrong offset!");

// ScriptStruct DarwinGame.PostProcessSetting
// 0x0240 (0x0240 - 0x0000)
struct FPostProcessSetting final
{
public:
	bool                                          IsEditLens;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEditColorGrading;                                // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEditRenderingFeatures;                           // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLensSetting                           Lens;                                              // 0x0008(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FColorGradingSetting                   ColorGrading;                                      // 0x0040(0x01E0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRenderingFeaturesSetting              RenderingFeatures;                                 // 0x0220(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPostProcessSetting) == 0x000010, "Wrong alignment on FPostProcessSetting");
static_assert(sizeof(FPostProcessSetting) == 0x000240, "Wrong size on FPostProcessSetting");
static_assert(offsetof(FPostProcessSetting, IsEditLens) == 0x000000, "Member 'FPostProcessSetting::IsEditLens' has a wrong offset!");
static_assert(offsetof(FPostProcessSetting, IsEditColorGrading) == 0x000001, "Member 'FPostProcessSetting::IsEditColorGrading' has a wrong offset!");
static_assert(offsetof(FPostProcessSetting, IsEditRenderingFeatures) == 0x000002, "Member 'FPostProcessSetting::IsEditRenderingFeatures' has a wrong offset!");
static_assert(offsetof(FPostProcessSetting, Lens) == 0x000008, "Member 'FPostProcessSetting::Lens' has a wrong offset!");
static_assert(offsetof(FPostProcessSetting, ColorGrading) == 0x000040, "Member 'FPostProcessSetting::ColorGrading' has a wrong offset!");
static_assert(offsetof(FPostProcessSetting, RenderingFeatures) == 0x000220, "Member 'FPostProcessSetting::RenderingFeatures' has a wrong offset!");

// ScriptStruct DarwinGame.ExponentialHeightFogSetting
// 0x0030 (0x0030 - 0x0000)
struct FExponentialHeightFogSetting final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      FogInscatteringColorCurve;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      DirectionalInscatteringColorCurve;                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExponentialHeightFogSetting) == 0x000008, "Wrong alignment on FExponentialHeightFogSetting");
static_assert(sizeof(FExponentialHeightFogSetting) == 0x000030, "Wrong size on FExponentialHeightFogSetting");
static_assert(offsetof(FExponentialHeightFogSetting, FogDensity) == 0x000000, "Member 'FExponentialHeightFogSetting::FogDensity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, FogInscatteringColorCurve) == 0x000008, "Member 'FExponentialHeightFogSetting::FogInscatteringColorCurve' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, FogHeightFalloff) == 0x000010, "Member 'FExponentialHeightFogSetting::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, FogMaxOpacity) == 0x000014, "Member 'FExponentialHeightFogSetting::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, StartDistance) == 0x000018, "Member 'FExponentialHeightFogSetting::StartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, FogCutoffDistance) == 0x00001C, "Member 'FExponentialHeightFogSetting::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, DirectionalInscatteringExponent) == 0x000020, "Member 'FExponentialHeightFogSetting::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, DirectionalInscatteringStartDistance) == 0x000024, "Member 'FExponentialHeightFogSetting::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogSetting, DirectionalInscatteringColorCurve) == 0x000028, "Member 'FExponentialHeightFogSetting::DirectionalInscatteringColorCurve' has a wrong offset!");

// ScriptStruct DarwinGame.SkyMaterialSetting
// 0x004C (0x004C - 0x0000)
struct FSkyMaterialSetting final
{
public:
	float                                         CloudCover;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderAlpha;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderRadius;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderWeight;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderLifeTimeMax;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThunderLifeTimeMin;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ThunderDir;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cloudy;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudyLightColor;                                  // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ChannelSelect;                                     // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyMaterialSetting) == 0x000004, "Wrong alignment on FSkyMaterialSetting");
static_assert(sizeof(FSkyMaterialSetting) == 0x00004C, "Wrong size on FSkyMaterialSetting");
static_assert(offsetof(FSkyMaterialSetting, CloudCover) == 0x000000, "Member 'FSkyMaterialSetting::CloudCover' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, ThunderAlpha) == 0x000004, "Member 'FSkyMaterialSetting::ThunderAlpha' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, ThunderRadius) == 0x000008, "Member 'FSkyMaterialSetting::ThunderRadius' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, ThunderWeight) == 0x00000C, "Member 'FSkyMaterialSetting::ThunderWeight' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, ThunderLifeTimeMax) == 0x000010, "Member 'FSkyMaterialSetting::ThunderLifeTimeMax' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, ThunderLifeTimeMin) == 0x000014, "Member 'FSkyMaterialSetting::ThunderLifeTimeMin' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, ThunderDir) == 0x000018, "Member 'FSkyMaterialSetting::ThunderDir' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, Cloudy) == 0x000028, "Member 'FSkyMaterialSetting::Cloudy' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, CloudyLightColor) == 0x00002C, "Member 'FSkyMaterialSetting::CloudyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyMaterialSetting, ChannelSelect) == 0x00003C, "Member 'FSkyMaterialSetting::ChannelSelect' has a wrong offset!");

// ScriptStruct DarwinGame.SkyBaseSetting
// 0x00E8 (0x00E8 - 0x0000)
struct FSkyBaseSetting final
{
public:
	struct FDirectionalLightSetting               DirectionalLight;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditDirectioanlLight;                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExponentialHeightFogSetting           ExpenentialHeightFog;                              // 0x0020(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditExpenentialHeightFog;                        // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkyLightSetting                       SkyLight;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditSkyLight;                                    // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkyMaterialSetting                    SkyMaterial;                                       // 0x006C(0x004C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsEditSkyMaterial;                                 // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTextureCube>            Cubemap;                                           // 0x00C0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyBaseSetting) == 0x000008, "Wrong alignment on FSkyBaseSetting");
static_assert(sizeof(FSkyBaseSetting) == 0x0000E8, "Wrong size on FSkyBaseSetting");
static_assert(offsetof(FSkyBaseSetting, DirectionalLight) == 0x000000, "Member 'FSkyBaseSetting::DirectionalLight' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, IsEditDirectioanlLight) == 0x000018, "Member 'FSkyBaseSetting::IsEditDirectioanlLight' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, ExpenentialHeightFog) == 0x000020, "Member 'FSkyBaseSetting::ExpenentialHeightFog' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, IsEditExpenentialHeightFog) == 0x000050, "Member 'FSkyBaseSetting::IsEditExpenentialHeightFog' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, SkyLight) == 0x000058, "Member 'FSkyBaseSetting::SkyLight' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, IsEditSkyLight) == 0x000068, "Member 'FSkyBaseSetting::IsEditSkyLight' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, SkyMaterial) == 0x00006C, "Member 'FSkyBaseSetting::SkyMaterial' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, IsEditSkyMaterial) == 0x0000B8, "Member 'FSkyBaseSetting::IsEditSkyMaterial' has a wrong offset!");
static_assert(offsetof(FSkyBaseSetting, Cubemap) == 0x0000C0, "Member 'FSkyBaseSetting::Cubemap' has a wrong offset!");

// ScriptStruct DarwinGame.EnvironmentSettings
// 0x0348 (0x0350 - 0x0008)
struct FEnvironmentSettings final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSetting                    PostProcessSettings;                               // 0x0010(0x0240)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkyBaseSetting                        SkyBaseSettings;                                   // 0x0250(0x00E8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ProcessTime;                                       // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvironmentType                              EnvironmentType;                                   // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnvironmentEffectID;                               // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAreaEffect;                                  // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnvironmentSettings) == 0x000010, "Wrong alignment on FEnvironmentSettings");
static_assert(sizeof(FEnvironmentSettings) == 0x000350, "Wrong size on FEnvironmentSettings");
static_assert(offsetof(FEnvironmentSettings, PostProcessSettings) == 0x000010, "Member 'FEnvironmentSettings::PostProcessSettings' has a wrong offset!");
static_assert(offsetof(FEnvironmentSettings, SkyBaseSettings) == 0x000250, "Member 'FEnvironmentSettings::SkyBaseSettings' has a wrong offset!");
static_assert(offsetof(FEnvironmentSettings, ProcessTime) == 0x000338, "Member 'FEnvironmentSettings::ProcessTime' has a wrong offset!");
static_assert(offsetof(FEnvironmentSettings, EnvironmentType) == 0x00033C, "Member 'FEnvironmentSettings::EnvironmentType' has a wrong offset!");
static_assert(offsetof(FEnvironmentSettings, EnvironmentEffectID) == 0x000340, "Member 'FEnvironmentSettings::EnvironmentEffectID' has a wrong offset!");
static_assert(offsetof(FEnvironmentSettings, EnableAreaEffect) == 0x000348, "Member 'FEnvironmentSettings::EnableAreaEffect' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIBoardRequireScale
// 0x0010 (0x0018 - 0x0008)
struct FST_UIBoardRequireScale final : public FTableRowBase
{
public:
	int32                                         LevelMin;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnification;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIBoardRequireScale) == 0x000008, "Wrong alignment on FST_UIBoardRequireScale");
static_assert(sizeof(FST_UIBoardRequireScale) == 0x000018, "Wrong size on FST_UIBoardRequireScale");
static_assert(offsetof(FST_UIBoardRequireScale, LevelMin) == 0x000008, "Member 'FST_UIBoardRequireScale::LevelMin' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireScale, LevelMax) == 0x00000C, "Member 'FST_UIBoardRequireScale::LevelMax' has a wrong offset!");
static_assert(offsetof(FST_UIBoardRequireScale, Magnification) == 0x000010, "Member 'FST_UIBoardRequireScale::Magnification' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIStationCharaData
// 0x0010 (0x0018 - 0x0008)
struct FST_UIStationCharaData final : public FTableRowBase
{
public:
	class UTexture2D*                             KamyuCharaTexture;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MayaCharaTexture;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIStationCharaData) == 0x000008, "Wrong alignment on FST_UIStationCharaData");
static_assert(sizeof(FST_UIStationCharaData) == 0x000018, "Wrong size on FST_UIStationCharaData");
static_assert(offsetof(FST_UIStationCharaData, KamyuCharaTexture) == 0x000008, "Member 'FST_UIStationCharaData::KamyuCharaTexture' has a wrong offset!");
static_assert(offsetof(FST_UIStationCharaData, MayaCharaTexture) == 0x000010, "Member 'FST_UIStationCharaData::MayaCharaTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestNetworkData
// 0x0008 (0x0010 - 0x0008)
struct FST_QuestNetworkData final : public FTableRowBase
{
public:
	bool                                          Public;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestNetworkData) == 0x000008, "Wrong alignment on FST_QuestNetworkData");
static_assert(sizeof(FST_QuestNetworkData) == 0x000010, "Wrong size on FST_QuestNetworkData");
static_assert(offsetof(FST_QuestNetworkData, Public) == 0x000008, "Member 'FST_QuestNetworkData::Public' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventNPCStatePair
// 0x0010 (0x0010 - 0x0000)
struct FST_EventNPCStatePair final
{
public:
	struct FGameplayTag                           Anim;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           State;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventNPCStatePair) == 0x000004, "Wrong alignment on FST_EventNPCStatePair");
static_assert(sizeof(FST_EventNPCStatePair) == 0x000010, "Wrong size on FST_EventNPCStatePair");
static_assert(offsetof(FST_EventNPCStatePair, Anim) == 0x000000, "Member 'FST_EventNPCStatePair::Anim' has a wrong offset!");
static_assert(offsetof(FST_EventNPCStatePair, State) == 0x000008, "Member 'FST_EventNPCStatePair::State' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapSymbolData
// 0x0038 (0x0040 - 0x0008)
struct FST_UIMapSymbolData final : public FTableRowBase
{
public:
	EMapSymbolType                                SymbolType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIMapSymbolData) == 0x000008, "Wrong alignment on FST_UIMapSymbolData");
static_assert(sizeof(FST_UIMapSymbolData) == 0x000040, "Wrong size on FST_UIMapSymbolData");
static_assert(offsetof(FST_UIMapSymbolData, SymbolType) == 0x000008, "Member 'FST_UIMapSymbolData::SymbolType' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolData, Name) == 0x000010, "Member 'FST_UIMapSymbolData::Name' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolData, Location) == 0x000028, "Member 'FST_UIMapSymbolData::Location' has a wrong offset!");
static_assert(offsetof(FST_UIMapSymbolData, MapID) == 0x000034, "Member 'FST_UIMapSymbolData::MapID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMyTeamCoinWindowResource
// 0x0030 (0x0038 - 0x0008)
struct FST_UIMyTeamCoinWindowResource final : public FTableRowBase
{
public:
	class FName                                   PanelName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMyTeamCoinWindowResource) == 0x000008, "Wrong alignment on FST_UIMyTeamCoinWindowResource");
static_assert(sizeof(FST_UIMyTeamCoinWindowResource) == 0x000038, "Wrong size on FST_UIMyTeamCoinWindowResource");
static_assert(offsetof(FST_UIMyTeamCoinWindowResource, PanelName) == 0x000008, "Member 'FST_UIMyTeamCoinWindowResource::PanelName' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamCoinWindowResource, SoftTexture) == 0x000010, "Member 'FST_UIMyTeamCoinWindowResource::SoftTexture' has a wrong offset!");

// ScriptStruct DarwinGame.SoundComponentDebugData
// 0x0001 (0x0001 - 0x0000)
struct FSoundComponentDebugData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundComponentDebugData) == 0x000001, "Wrong alignment on FSoundComponentDebugData");
static_assert(sizeof(FSoundComponentDebugData) == 0x000001, "Wrong size on FSoundComponentDebugData");

// ScriptStruct DarwinGame.ST_EstimateSequenceData
// 0x0020 (0x0020 - 0x0000)
struct FST_EstimateSequenceData final
{
public:
	class FName                                   FlashTagName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlyTagName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEstimateTreasureObjectBase*            ArtifactObject;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstGet;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EstimateSequenceData) == 0x000008, "Wrong alignment on FST_EstimateSequenceData");
static_assert(sizeof(FST_EstimateSequenceData) == 0x000020, "Wrong size on FST_EstimateSequenceData");
static_assert(offsetof(FST_EstimateSequenceData, FlashTagName) == 0x000000, "Member 'FST_EstimateSequenceData::FlashTagName' has a wrong offset!");
static_assert(offsetof(FST_EstimateSequenceData, FlyTagName) == 0x000008, "Member 'FST_EstimateSequenceData::FlyTagName' has a wrong offset!");
static_assert(offsetof(FST_EstimateSequenceData, ArtifactObject) == 0x000010, "Member 'FST_EstimateSequenceData::ArtifactObject' has a wrong offset!");
static_assert(offsetof(FST_EstimateSequenceData, IsFirstGet) == 0x000018, "Member 'FST_EstimateSequenceData::IsFirstGet' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventBrancheDataList
// 0x0048 (0x0050 - 0x0008)
struct FST_EventBrancheDataList final : public FTableRowBase
{
public:
	class FName                                   NpcID;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEpisodeType                                  EpisodeType;                                       // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProgressNum;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamLevel;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OnFlags;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NewEventIDs;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NewFukidashiIDs;                                   // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventBrancheDataList) == 0x000008, "Wrong alignment on FST_EventBrancheDataList");
static_assert(sizeof(FST_EventBrancheDataList) == 0x000050, "Wrong size on FST_EventBrancheDataList");
static_assert(offsetof(FST_EventBrancheDataList, NpcID) == 0x000008, "Member 'FST_EventBrancheDataList::NpcID' has a wrong offset!");
static_assert(offsetof(FST_EventBrancheDataList, Priority) == 0x000010, "Member 'FST_EventBrancheDataList::Priority' has a wrong offset!");
static_assert(offsetof(FST_EventBrancheDataList, EpisodeType) == 0x000014, "Member 'FST_EventBrancheDataList::EpisodeType' has a wrong offset!");
static_assert(offsetof(FST_EventBrancheDataList, ProgressNum) == 0x000018, "Member 'FST_EventBrancheDataList::ProgressNum' has a wrong offset!");
static_assert(offsetof(FST_EventBrancheDataList, teamLevel) == 0x00001C, "Member 'FST_EventBrancheDataList::teamLevel' has a wrong offset!");
static_assert(offsetof(FST_EventBrancheDataList, OnFlags) == 0x000020, "Member 'FST_EventBrancheDataList::OnFlags' has a wrong offset!");
static_assert(offsetof(FST_EventBrancheDataList, NewEventIDs) == 0x000030, "Member 'FST_EventBrancheDataList::NewEventIDs' has a wrong offset!");
static_assert(offsetof(FST_EventBrancheDataList, NewFukidashiIDs) == 0x000040, "Member 'FST_EventBrancheDataList::NewFukidashiIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventData
// 0x0018 (0x0018 - 0x0000)
struct FST_EventData final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventType                                    EventType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEpisodeType                                  EpisodeType;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuestID;                                           // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestState                                   QuestState;                                        // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EventData) == 0x000004, "Wrong alignment on FST_EventData");
static_assert(sizeof(FST_EventData) == 0x000018, "Wrong size on FST_EventData");
static_assert(offsetof(FST_EventData, EventID) == 0x000000, "Member 'FST_EventData::EventID' has a wrong offset!");
static_assert(offsetof(FST_EventData, EventType) == 0x000008, "Member 'FST_EventData::EventType' has a wrong offset!");
static_assert(offsetof(FST_EventData, EpisodeType) == 0x000009, "Member 'FST_EventData::EpisodeType' has a wrong offset!");
static_assert(offsetof(FST_EventData, QuestID) == 0x00000C, "Member 'FST_EventData::QuestID' has a wrong offset!");
static_assert(offsetof(FST_EventData, QuestState) == 0x000014, "Member 'FST_EventData::QuestState' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventDataTable
// 0x0160 (0x0168 - 0x0008)
struct FST_EventDataTable final : public FTableRowBase
{
public:
	class FName                                   FlagName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerCharacterID;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapID;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Postion;                                           // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvironmentType                              weather;                                           // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ClearFlagNames;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RequiredClearedEventIDs;                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RequiredClearedQuestIDs;                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      RequiredItemInfo;                                  // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           RequiredCharacterIDs;                              // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      RewardItemInfo;                                    // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      RewardMonsterInfo;                                 // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventDataTable) == 0x000008, "Wrong alignment on FST_EventDataTable");
static_assert(sizeof(FST_EventDataTable) == 0x000168, "Wrong size on FST_EventDataTable");
static_assert(offsetof(FST_EventDataTable, FlagName) == 0x000008, "Member 'FST_EventDataTable::FlagName' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, PlayerCharacterID) == 0x000010, "Member 'FST_EventDataTable::PlayerCharacterID' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, MapID) == 0x000018, "Member 'FST_EventDataTable::MapID' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, Postion) == 0x000020, "Member 'FST_EventDataTable::Postion' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, Hour) == 0x00002C, "Member 'FST_EventDataTable::Hour' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, Minutes) == 0x000030, "Member 'FST_EventDataTable::Minutes' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, weather) == 0x000034, "Member 'FST_EventDataTable::weather' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, ClearFlagNames) == 0x000038, "Member 'FST_EventDataTable::ClearFlagNames' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, RequiredClearedEventIDs) == 0x000048, "Member 'FST_EventDataTable::RequiredClearedEventIDs' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, RequiredClearedQuestIDs) == 0x000058, "Member 'FST_EventDataTable::RequiredClearedQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, RequiredItemInfo) == 0x000068, "Member 'FST_EventDataTable::RequiredItemInfo' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, RequiredCharacterIDs) == 0x0000B8, "Member 'FST_EventDataTable::RequiredCharacterIDs' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, RewardItemInfo) == 0x0000C8, "Member 'FST_EventDataTable::RewardItemInfo' has a wrong offset!");
static_assert(offsetof(FST_EventDataTable, RewardMonsterInfo) == 0x000118, "Member 'FST_EventDataTable::RewardMonsterInfo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventFullScreenImageData
// 0x0028 (0x0030 - 0x0008)
struct FST_EventFullScreenImageData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              FullScreenImage;                                   // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventFullScreenImageData) == 0x000008, "Wrong alignment on FST_EventFullScreenImageData");
static_assert(sizeof(FST_EventFullScreenImageData) == 0x000030, "Wrong size on FST_EventFullScreenImageData");
static_assert(offsetof(FST_EventFullScreenImageData, FullScreenImage) == 0x000008, "Member 'FST_EventFullScreenImageData::FullScreenImage' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIAppraiseBonusPointsResource
// 0x0010 (0x0018 - 0x0008)
struct FST_UIAppraiseBonusPointsResource final : public FTableRowBase
{
public:
	class UTexture2D*                             NormalTexture;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FlashTexture;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIAppraiseBonusPointsResource) == 0x000008, "Wrong alignment on FST_UIAppraiseBonusPointsResource");
static_assert(sizeof(FST_UIAppraiseBonusPointsResource) == 0x000018, "Wrong size on FST_UIAppraiseBonusPointsResource");
static_assert(offsetof(FST_UIAppraiseBonusPointsResource, NormalTexture) == 0x000008, "Member 'FST_UIAppraiseBonusPointsResource::NormalTexture' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseBonusPointsResource, FlashTexture) == 0x000010, "Member 'FST_UIAppraiseBonusPointsResource::FlashTexture' has a wrong offset!");

// ScriptStruct DarwinGame.DrawTextInfo
// 0x0010 (0x0010 - 0x0000)
struct FDrawTextInfo final
{
public:
	TArray<class FName>                           TextID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrawTextInfo) == 0x000008, "Wrong alignment on FDrawTextInfo");
static_assert(sizeof(FDrawTextInfo) == 0x000010, "Wrong size on FDrawTextInfo");
static_assert(offsetof(FDrawTextInfo, TextID) == 0x000000, "Member 'FDrawTextInfo::TextID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDestinationRect
// 0x0038 (0x0040 - 0x0008)
struct FST_QuestDestinationRect final : public FTableRowBase
{
public:
	EQuestDestinationRectShapeType                ShapeType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandom;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestDestinationRect) == 0x000008, "Wrong alignment on FST_QuestDestinationRect");
static_assert(sizeof(FST_QuestDestinationRect) == 0x000040, "Wrong size on FST_QuestDestinationRect");
static_assert(offsetof(FST_QuestDestinationRect, ShapeType) == 0x000008, "Member 'FST_QuestDestinationRect::ShapeType' has a wrong offset!");
static_assert(offsetof(FST_QuestDestinationRect, Location) == 0x00000C, "Member 'FST_QuestDestinationRect::Location' has a wrong offset!");
static_assert(offsetof(FST_QuestDestinationRect, Rotation) == 0x000018, "Member 'FST_QuestDestinationRect::Rotation' has a wrong offset!");
static_assert(offsetof(FST_QuestDestinationRect, Size) == 0x000024, "Member 'FST_QuestDestinationRect::Size' has a wrong offset!");
static_assert(offsetof(FST_QuestDestinationRect, AreaID) == 0x000030, "Member 'FST_QuestDestinationRect::AreaID' has a wrong offset!");
static_assert(offsetof(FST_QuestDestinationRect, IsRandom) == 0x000038, "Member 'FST_QuestDestinationRect::IsRandom' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventPairReplaceText
// 0x0030 (0x0038 - 0x0008)
struct FST_EventPairReplaceText final : public FTableRowBase
{
public:
	class FText                                   ToKamyu;                                           // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ToMaya;                                            // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventPairReplaceText) == 0x000008, "Wrong alignment on FST_EventPairReplaceText");
static_assert(sizeof(FST_EventPairReplaceText) == 0x000038, "Wrong size on FST_EventPairReplaceText");
static_assert(offsetof(FST_EventPairReplaceText, ToKamyu) == 0x000008, "Member 'FST_EventPairReplaceText::ToKamyu' has a wrong offset!");
static_assert(offsetof(FST_EventPairReplaceText, ToMaya) == 0x000020, "Member 'FST_EventPairReplaceText::ToMaya' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PanelQuestColor
// 0x0020 (0x0020 - 0x0000)
struct FST_PanelQuestColor final
{
public:
	struct FLinearColor                           MainColor;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PanelQuestColor) == 0x000004, "Wrong alignment on FST_PanelQuestColor");
static_assert(sizeof(FST_PanelQuestColor) == 0x000020, "Wrong size on FST_PanelQuestColor");
static_assert(offsetof(FST_PanelQuestColor, MainColor) == 0x000000, "Member 'FST_PanelQuestColor::MainColor' has a wrong offset!");
static_assert(offsetof(FST_PanelQuestColor, OutlineColor) == 0x000010, "Member 'FST_PanelQuestColor::OutlineColor' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventSpawnMonsterTable
// 0x0010 (0x0018 - 0x0008)
struct FST_EventSpawnMonsterTable final : public FTableRowBase
{
public:
	TArray<struct FST_EventSpawnMonsterInfo>      SpawnMonsterList;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventSpawnMonsterTable) == 0x000008, "Wrong alignment on FST_EventSpawnMonsterTable");
static_assert(sizeof(FST_EventSpawnMonsterTable) == 0x000018, "Wrong size on FST_EventSpawnMonsterTable");
static_assert(offsetof(FST_EventSpawnMonsterTable, SpawnMonsterList) == 0x000008, "Member 'FST_EventSpawnMonsterTable::SpawnMonsterList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIShopItemDataStruct
// 0x0018 (0x0020 - 0x0008)
struct FST_UIShopItemDataStruct final : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_UIOneShopDataStruct>        ShopData;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIShopItemDataStruct) == 0x000008, "Wrong alignment on FST_UIShopItemDataStruct");
static_assert(sizeof(FST_UIShopItemDataStruct) == 0x000020, "Wrong size on FST_UIShopItemDataStruct");
static_assert(offsetof(FST_UIShopItemDataStruct, ItemId) == 0x000008, "Member 'FST_UIShopItemDataStruct::ItemId' has a wrong offset!");
static_assert(offsetof(FST_UIShopItemDataStruct, ShopData) == 0x000010, "Member 'FST_UIShopItemDataStruct::ShopData' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventEmoteParam
// 0x000C (0x000C - 0x0000)
struct FST_EventEmoteParam final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventEmoteParam) == 0x000004, "Wrong alignment on FST_EventEmoteParam");
static_assert(sizeof(FST_EventEmoteParam) == 0x00000C, "Wrong size on FST_EventEmoteParam");
static_assert(offsetof(FST_EventEmoteParam, ID) == 0x000000, "Member 'FST_EventEmoteParam::ID' has a wrong offset!");
static_assert(offsetof(FST_EventEmoteParam, EffectId) == 0x000008, "Member 'FST_EventEmoteParam::EffectId' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CameraSetting
// 0x0010 (0x0010 - 0x0000)
struct FST_CameraSetting final
{
public:
	class FName                                   mCameraTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mBlendTime;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mWaitTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CameraSetting) == 0x000004, "Wrong alignment on FST_CameraSetting");
static_assert(sizeof(FST_CameraSetting) == 0x000010, "Wrong size on FST_CameraSetting");
static_assert(offsetof(FST_CameraSetting, mCameraTag) == 0x000000, "Member 'FST_CameraSetting::mCameraTag' has a wrong offset!");
static_assert(offsetof(FST_CameraSetting, mBlendTime) == 0x000008, "Member 'FST_CameraSetting::mBlendTime' has a wrong offset!");
static_assert(offsetof(FST_CameraSetting, mWaitTime) == 0x00000C, "Member 'FST_CameraSetting::mWaitTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CameraWork
// 0x0010 (0x0018 - 0x0008)
struct FST_CameraWork final : public FTableRowBase
{
public:
	TArray<struct FST_CameraSetting>              mCameraSetting;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CameraWork) == 0x000008, "Wrong alignment on FST_CameraWork");
static_assert(sizeof(FST_CameraWork) == 0x000018, "Wrong size on FST_CameraWork");
static_assert(offsetof(FST_CameraWork, mCameraSetting) == 0x000008, "Member 'FST_CameraWork::mCameraSetting' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventTalkDataNew
// 0x0048 (0x0050 - 0x0008)
struct FST_EventTalkDataNew final : public FTableRowBase
{
public:
	class FString                                 TextID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventType                                    EventType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_EventTalktBranchData               TextBranchData;                                    // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FST_TextGoto>                   TextGotoData;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_EventTalkDataNew) == 0x000008, "Wrong alignment on FST_EventTalkDataNew");
static_assert(sizeof(FST_EventTalkDataNew) == 0x000050, "Wrong size on FST_EventTalkDataNew");
static_assert(offsetof(FST_EventTalkDataNew, TextID) == 0x000008, "Member 'FST_EventTalkDataNew::TextID' has a wrong offset!");
static_assert(offsetof(FST_EventTalkDataNew, EventType) == 0x000018, "Member 'FST_EventTalkDataNew::EventType' has a wrong offset!");
static_assert(offsetof(FST_EventTalkDataNew, TextBranchData) == 0x000020, "Member 'FST_EventTalkDataNew::TextBranchData' has a wrong offset!");
static_assert(offsetof(FST_EventTalkDataNew, TextGotoData) == 0x000040, "Member 'FST_EventTalkDataNew::TextGotoData' has a wrong offset!");

// ScriptStruct DarwinGame.TextInfoData
// 0x0040 (0x0048 - 0x0008)
struct FTextInfoData : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 TextDetail;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkerID;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNoTurn : 1;                                       // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNoTalkStartEvent : 1;                             // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bResetByMapJump : 1;                               // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bScenarioGuide : 1;                                // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bQuestGuide : 1;                                   // 0x0040(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextInfoData) == 0x000008, "Wrong alignment on FTextInfoData");
static_assert(sizeof(FTextInfoData) == 0x000048, "Wrong size on FTextInfoData");
static_assert(offsetof(FTextInfoData, Text) == 0x000008, "Member 'FTextInfoData::Text' has a wrong offset!");
static_assert(offsetof(FTextInfoData, TextDetail) == 0x000020, "Member 'FTextInfoData::TextDetail' has a wrong offset!");
static_assert(offsetof(FTextInfoData, Type) == 0x000030, "Member 'FTextInfoData::Type' has a wrong offset!");
static_assert(offsetof(FTextInfoData, TalkerID) == 0x000038, "Member 'FTextInfoData::TalkerID' has a wrong offset!");

// ScriptStruct DarwinGame.TextInfoWorkData
// 0x0008 (0x0050 - 0x0048)
struct FTextInfoWorkData final : public FTextInfoData
{
public:
	class FName                                   TextID;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextInfoWorkData) == 0x000008, "Wrong alignment on FTextInfoWorkData");
static_assert(sizeof(FTextInfoWorkData) == 0x000050, "Wrong size on FTextInfoWorkData");
static_assert(offsetof(FTextInfoWorkData, TextID) == 0x000048, "Member 'FTextInfoWorkData::TextID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventTriggerPoint
// 0x0028 (0x0030 - 0x0008)
struct FST_EventTriggerPoint final : public FTableRowBase
{
public:
	struct FVector                                Postion;                                           // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EventTriggerPoint) == 0x000008, "Wrong alignment on FST_EventTriggerPoint");
static_assert(sizeof(FST_EventTriggerPoint) == 0x000030, "Wrong size on FST_EventTriggerPoint");
static_assert(offsetof(FST_EventTriggerPoint, Postion) == 0x000008, "Member 'FST_EventTriggerPoint::Postion' has a wrong offset!");
static_assert(offsetof(FST_EventTriggerPoint, Rotation) == 0x000014, "Member 'FST_EventTriggerPoint::Rotation' has a wrong offset!");
static_assert(offsetof(FST_EventTriggerPoint, Size) == 0x000020, "Member 'FST_EventTriggerPoint::Size' has a wrong offset!");

// ScriptStruct DarwinGame.ST_EventTriggerTable
// 0x0010 (0x0018 - 0x0008)
struct FST_EventTriggerTable final : public FTableRowBase
{
public:
	class FName                                   EventID;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventTriggerCollisionType                    CollisionType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_EventTriggerTable) == 0x000008, "Wrong alignment on FST_EventTriggerTable");
static_assert(sizeof(FST_EventTriggerTable) == 0x000018, "Wrong size on FST_EventTriggerTable");
static_assert(offsetof(FST_EventTriggerTable, EventID) == 0x000008, "Member 'FST_EventTriggerTable::EventID' has a wrong offset!");
static_assert(offsetof(FST_EventTriggerTable, CollisionType) == 0x000010, "Member 'FST_EventTriggerTable::CollisionType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ExpData
// 0x0010 (0x0018 - 0x0008)
struct FST_ExpData final : public FTableRowBase
{
public:
	TArray<int32>                                 TotalExp;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ExpData) == 0x000008, "Wrong alignment on FST_ExpData");
static_assert(sizeof(FST_ExpData) == 0x000018, "Wrong size on FST_ExpData");
static_assert(offsetof(FST_ExpData, TotalExp) == 0x000008, "Member 'FST_ExpData::TotalExp' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FaskullStreamingLevelData
// 0x00A0 (0x0110 - 0x0070)
struct FST_FaskullStreamingLevelData final : public FST_StreamingLevelDataBase
{
public:
	TMap<class FName, EStreamingCheckType>        AtUpper;                                           // 0x0070(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, EStreamingCheckType>        AtLower;                                           // 0x00C0(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FaskullStreamingLevelData) == 0x000008, "Wrong alignment on FST_FaskullStreamingLevelData");
static_assert(sizeof(FST_FaskullStreamingLevelData) == 0x000110, "Wrong size on FST_FaskullStreamingLevelData");
static_assert(offsetof(FST_FaskullStreamingLevelData, AtUpper) == 0x000070, "Member 'FST_FaskullStreamingLevelData::AtUpper' has a wrong offset!");
static_assert(offsetof(FST_FaskullStreamingLevelData, AtLower) == 0x0000C0, "Member 'FST_FaskullStreamingLevelData::AtLower' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FaskullStreamingLevelDataEditor
// 0x0000 (0x0001 - 0x0001)
struct FST_FaskullStreamingLevelDataEditor final : public FST_StreamingLevelDataEditorBase
{
};
static_assert(alignof(FST_FaskullStreamingLevelDataEditor) == 0x000001, "Wrong alignment on FST_FaskullStreamingLevelDataEditor");
static_assert(sizeof(FST_FaskullStreamingLevelDataEditor) == 0x000001, "Wrong size on FST_FaskullStreamingLevelDataEditor");

// ScriptStruct DarwinGame.ST_UIOriginMonsterRivalPartsData
// 0x0050 (0x0050 - 0x0000)
struct FST_UIOriginMonsterRivalPartsData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Leader;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Normal;                                            // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIOriginMonsterRivalPartsData) == 0x000008, "Wrong alignment on FST_UIOriginMonsterRivalPartsData");
static_assert(sizeof(FST_UIOriginMonsterRivalPartsData) == 0x000050, "Wrong size on FST_UIOriginMonsterRivalPartsData");
static_assert(offsetof(FST_UIOriginMonsterRivalPartsData, Leader) == 0x000000, "Member 'FST_UIOriginMonsterRivalPartsData::Leader' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterRivalPartsData, Normal) == 0x000028, "Member 'FST_UIOriginMonsterRivalPartsData::Normal' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIOriginMonsterResource
// 0x0168 (0x0170 - 0x0008)
struct FST_UIOriginMonsterResource final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              FaceTexture_CustomParts1_Col1;                     // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceTexture_CustomParts1_Col2;                     // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceTexture_CustomParts1_Col3;                     // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceTexture_CustomParts2;                          // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_UIOriginMonsterRivalPartsData> FaceTexture_CustomPartsRival;                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM_CustomParts1_Col1;                           // 0x00B8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM_CustomParts1_Col2;                           // 0x00E0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM_CustomParts1_Col3;                           // 0x0108(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM_CustomParts2;                                // 0x0130(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_UIOriginMonsterRivalPartsData> IconM_CustomPartsRival;                            // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseDefaultPartsAtRival;                         // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIOriginMonsterResource) == 0x000008, "Wrong alignment on FST_UIOriginMonsterResource");
static_assert(sizeof(FST_UIOriginMonsterResource) == 0x000170, "Wrong size on FST_UIOriginMonsterResource");
static_assert(offsetof(FST_UIOriginMonsterResource, FaceTexture_CustomParts1_Col1) == 0x000008, "Member 'FST_UIOriginMonsterResource::FaceTexture_CustomParts1_Col1' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, FaceTexture_CustomParts1_Col2) == 0x000030, "Member 'FST_UIOriginMonsterResource::FaceTexture_CustomParts1_Col2' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, FaceTexture_CustomParts1_Col3) == 0x000058, "Member 'FST_UIOriginMonsterResource::FaceTexture_CustomParts1_Col3' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, FaceTexture_CustomParts2) == 0x000080, "Member 'FST_UIOriginMonsterResource::FaceTexture_CustomParts2' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, FaceTexture_CustomPartsRival) == 0x0000A8, "Member 'FST_UIOriginMonsterResource::FaceTexture_CustomPartsRival' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, IconM_CustomParts1_Col1) == 0x0000B8, "Member 'FST_UIOriginMonsterResource::IconM_CustomParts1_Col1' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, IconM_CustomParts1_Col2) == 0x0000E0, "Member 'FST_UIOriginMonsterResource::IconM_CustomParts1_Col2' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, IconM_CustomParts1_Col3) == 0x000108, "Member 'FST_UIOriginMonsterResource::IconM_CustomParts1_Col3' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, IconM_CustomParts2) == 0x000130, "Member 'FST_UIOriginMonsterResource::IconM_CustomParts2' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, IconM_CustomPartsRival) == 0x000158, "Member 'FST_UIOriginMonsterResource::IconM_CustomPartsRival' has a wrong offset!");
static_assert(offsetof(FST_UIOriginMonsterResource, bIsUseDefaultPartsAtRival) == 0x000168, "Member 'FST_UIOriginMonsterResource::bIsUseDefaultPartsAtRival' has a wrong offset!");

// ScriptStruct DarwinGame.FastTravelInfo
// 0x0038 (0x0040 - 0x0008)
struct FFastTravelInfo final : public FTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LabelName;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LabelName_En;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFastTravelCategory                           Category;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPersistentLevelID                            PersistentLevelID;                                 // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Direction;                                         // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   TrainStopStationID;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFastTravelInfo) == 0x000008, "Wrong alignment on FFastTravelInfo");
static_assert(sizeof(FFastTravelInfo) == 0x000040, "Wrong size on FFastTravelInfo");
static_assert(offsetof(FFastTravelInfo, ID) == 0x000008, "Member 'FFastTravelInfo::ID' has a wrong offset!");
static_assert(offsetof(FFastTravelInfo, LabelName) == 0x00000C, "Member 'FFastTravelInfo::LabelName' has a wrong offset!");
static_assert(offsetof(FFastTravelInfo, LabelName_En) == 0x000014, "Member 'FFastTravelInfo::LabelName_En' has a wrong offset!");
static_assert(offsetof(FFastTravelInfo, Category) == 0x00001C, "Member 'FFastTravelInfo::Category' has a wrong offset!");
static_assert(offsetof(FFastTravelInfo, PersistentLevelID) == 0x00001D, "Member 'FFastTravelInfo::PersistentLevelID' has a wrong offset!");
static_assert(offsetof(FFastTravelInfo, Location) == 0x000020, "Member 'FFastTravelInfo::Location' has a wrong offset!");
static_assert(offsetof(FFastTravelInfo, Direction) == 0x00002C, "Member 'FFastTravelInfo::Direction' has a wrong offset!");
static_assert(offsetof(FFastTravelInfo, TrainStopStationID) == 0x000038, "Member 'FFastTravelInfo::TrainStopStationID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMyTeamMenuFlagData
// 0x0030 (0x0038 - 0x0008)
struct FST_UIMyTeamMenuFlagData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             MenuFlagTexture;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ViewFlagTexture;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMyTeamMenuFlagData) == 0x000008, "Wrong alignment on FST_UIMyTeamMenuFlagData");
static_assert(sizeof(FST_UIMyTeamMenuFlagData) == 0x000038, "Wrong size on FST_UIMyTeamMenuFlagData");
static_assert(offsetof(FST_UIMyTeamMenuFlagData, Name) == 0x000008, "Member 'FST_UIMyTeamMenuFlagData::Name' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFlagData, MenuFlagTexture) == 0x000020, "Member 'FST_UIMyTeamMenuFlagData::MenuFlagTexture' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFlagData, ViewFlagTexture) == 0x000028, "Member 'FST_UIMyTeamMenuFlagData::ViewFlagTexture' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFlagData, ItemId) == 0x000030, "Member 'FST_UIMyTeamMenuFlagData::ItemId' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FeatureGameplayEffect
// 0x0018 (0x0020 - 0x0008)
struct FST_FeatureGameplayEffect final : public FTableRowBase
{
public:
	EInfluenceAttribute                           InfluenceType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusParamType                              StatusType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReleasedByBreak;                                  // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectDurationType                   DurationPolicy;                                    // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectInterval;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FeatureGameplayEffect) == 0x000008, "Wrong alignment on FST_FeatureGameplayEffect");
static_assert(sizeof(FST_FeatureGameplayEffect) == 0x000020, "Wrong size on FST_FeatureGameplayEffect");
static_assert(offsetof(FST_FeatureGameplayEffect, InfluenceType) == 0x000008, "Member 'FST_FeatureGameplayEffect::InfluenceType' has a wrong offset!");
static_assert(offsetof(FST_FeatureGameplayEffect, StatusType) == 0x000009, "Member 'FST_FeatureGameplayEffect::StatusType' has a wrong offset!");
static_assert(offsetof(FST_FeatureGameplayEffect, bReleasedByBreak) == 0x00000A, "Member 'FST_FeatureGameplayEffect::bReleasedByBreak' has a wrong offset!");
static_assert(offsetof(FST_FeatureGameplayEffect, DurationPolicy) == 0x00000B, "Member 'FST_FeatureGameplayEffect::DurationPolicy' has a wrong offset!");
static_assert(offsetof(FST_FeatureGameplayEffect, Duration) == 0x00000C, "Member 'FST_FeatureGameplayEffect::Duration' has a wrong offset!");
static_assert(offsetof(FST_FeatureGameplayEffect, EffectInterval) == 0x000010, "Member 'FST_FeatureGameplayEffect::EffectInterval' has a wrong offset!");
static_assert(offsetof(FST_FeatureGameplayEffect, GameplayEffectClass) == 0x000018, "Member 'FST_FeatureGameplayEffect::GameplayEffectClass' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Feature
// 0x0068 (0x0070 - 0x0008)
struct FST_Feature final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EFeatureType                                  Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDuplicated;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ConditionIDs;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Alphabet;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IconTypes;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsPlayEquipAnim;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_Feature) == 0x000008, "Wrong alignment on FST_Feature");
static_assert(sizeof(FST_Feature) == 0x000070, "Wrong size on FST_Feature");
static_assert(offsetof(FST_Feature, Name) == 0x000008, "Member 'FST_Feature::Name' has a wrong offset!");
static_assert(offsetof(FST_Feature, Type) == 0x000020, "Member 'FST_Feature::Type' has a wrong offset!");
static_assert(offsetof(FST_Feature, bDuplicated) == 0x000021, "Member 'FST_Feature::bDuplicated' has a wrong offset!");
static_assert(offsetof(FST_Feature, ConditionIDs) == 0x000028, "Member 'FST_Feature::ConditionIDs' has a wrong offset!");
static_assert(offsetof(FST_Feature, Alphabet) == 0x000038, "Member 'FST_Feature::Alphabet' has a wrong offset!");
static_assert(offsetof(FST_Feature, ID) == 0x00003C, "Member 'FST_Feature::ID' has a wrong offset!");
static_assert(offsetof(FST_Feature, IconTypes) == 0x000040, "Member 'FST_Feature::IconTypes' has a wrong offset!");
static_assert(offsetof(FST_Feature, Description) == 0x000050, "Member 'FST_Feature::Description' has a wrong offset!");
static_assert(offsetof(FST_Feature, bIsPlayEquipAnim) == 0x000068, "Member 'FST_Feature::bIsPlayEquipAnim' has a wrong offset!");

// ScriptStruct DarwinGame.ST_OutbreakQuestPointData
// 0x0028 (0x0030 - 0x0008)
struct FST_OutbreakQuestPointData final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_OutbreakQuestPointData) == 0x000008, "Wrong alignment on FST_OutbreakQuestPointData");
static_assert(sizeof(FST_OutbreakQuestPointData) == 0x000030, "Wrong size on FST_OutbreakQuestPointData");
static_assert(offsetof(FST_OutbreakQuestPointData, Location) == 0x000008, "Member 'FST_OutbreakQuestPointData::Location' has a wrong offset!");
static_assert(offsetof(FST_OutbreakQuestPointData, Rotator) == 0x000014, "Member 'FST_OutbreakQuestPointData::Rotator' has a wrong offset!");
static_assert(offsetof(FST_OutbreakQuestPointData, AreaID) == 0x000020, "Member 'FST_OutbreakQuestPointData::AreaID' has a wrong offset!");
static_assert(offsetof(FST_OutbreakQuestPointData, Difficulty) == 0x000028, "Member 'FST_OutbreakQuestPointData::Difficulty' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Condition
// 0x0028 (0x0030 - 0x0008)
struct FST_Condition final : public FTableRowBase
{
public:
	EFeatureCondtionType                          Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Left;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Inequality;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightOne;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightTwo;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightThree;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EffectIDs;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Condition) == 0x000008, "Wrong alignment on FST_Condition");
static_assert(sizeof(FST_Condition) == 0x000030, "Wrong size on FST_Condition");
static_assert(offsetof(FST_Condition, Type) == 0x000008, "Member 'FST_Condition::Type' has a wrong offset!");
static_assert(offsetof(FST_Condition, Left) == 0x00000C, "Member 'FST_Condition::Left' has a wrong offset!");
static_assert(offsetof(FST_Condition, Inequality) == 0x000010, "Member 'FST_Condition::Inequality' has a wrong offset!");
static_assert(offsetof(FST_Condition, RightOne) == 0x000014, "Member 'FST_Condition::RightOne' has a wrong offset!");
static_assert(offsetof(FST_Condition, RightTwo) == 0x000018, "Member 'FST_Condition::RightTwo' has a wrong offset!");
static_assert(offsetof(FST_Condition, RightThree) == 0x00001C, "Member 'FST_Condition::RightThree' has a wrong offset!");
static_assert(offsetof(FST_Condition, EffectIDs) == 0x000020, "Member 'FST_Condition::EffectIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FeatureEffect
// 0x0038 (0x0040 - 0x0008)
struct FST_FeatureEffect final : public FTableRowBase
{
public:
	EFeatureSystemType                            SystemType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFeatureEffectType                            EffectType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectDetailType;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExtendEffectID;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EffectValue;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEffectValue;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckUnifyLimit;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnifyEffectLimit;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUISignInversion;                                  // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StatusIconID;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FeatureEffect) == 0x000008, "Wrong alignment on FST_FeatureEffect");
static_assert(sizeof(FST_FeatureEffect) == 0x000040, "Wrong size on FST_FeatureEffect");
static_assert(offsetof(FST_FeatureEffect, SystemType) == 0x000008, "Member 'FST_FeatureEffect::SystemType' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, EffectType) == 0x000009, "Member 'FST_FeatureEffect::EffectType' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, EffectDetailType) == 0x00000C, "Member 'FST_FeatureEffect::EffectDetailType' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, ExtendEffectID) == 0x000010, "Member 'FST_FeatureEffect::ExtendEffectID' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, EffectValue) == 0x000018, "Member 'FST_FeatureEffect::EffectValue' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, MaxEffectValue) == 0x000028, "Member 'FST_FeatureEffect::MaxEffectValue' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, bCheckUnifyLimit) == 0x00002C, "Member 'FST_FeatureEffect::bCheckUnifyLimit' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, UnifyEffectLimit) == 0x000030, "Member 'FST_FeatureEffect::UnifyEffectLimit' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, bUISignInversion) == 0x000034, "Member 'FST_FeatureEffect::bUISignInversion' has a wrong offset!");
static_assert(offsetof(FST_FeatureEffect, StatusIconID) == 0x000038, "Member 'FST_FeatureEffect::StatusIconID' has a wrong offset!");

// ScriptStruct DarwinGame.FeatureEffectOnDamagedQue
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FFeatureEffectOnDamagedQue final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeatureEffectOnDamagedQue) == 0x000008, "Wrong alignment on FFeatureEffectOnDamagedQue");
static_assert(sizeof(FFeatureEffectOnDamagedQue) == 0x000058, "Wrong size on FFeatureEffectOnDamagedQue");

// ScriptStruct DarwinGame.ActiveFeatureGEBuff
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FActiveFeatureGEBuff final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveFeatureGEBuff) == 0x000008, "Wrong alignment on FActiveFeatureGEBuff");
static_assert(sizeof(FActiveFeatureGEBuff) == 0x000018, "Wrong size on FActiveFeatureGEBuff");
static_assert(offsetof(FActiveFeatureGEBuff, ActiveHandle) == 0x000010, "Member 'FActiveFeatureGEBuff::ActiveHandle' has a wrong offset!");

// ScriptStruct DarwinGame.FeatureEffectStatusResult
// 0x0000 (0x0038 - 0x0038)
struct FFeatureEffectStatusResult : public FST_StatusEffectBase
{
};
static_assert(alignof(FFeatureEffectStatusResult) == 0x000008, "Wrong alignment on FFeatureEffectStatusResult");
static_assert(sizeof(FFeatureEffectStatusResult) == 0x000038, "Wrong size on FFeatureEffectStatusResult");

// ScriptStruct DarwinGame.ST_NPCOption
// 0x0060 (0x0068 - 0x0008)
struct FST_NPCOption final : public FTableRowBase
{
public:
	class FName                                   KindId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       SocketType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowBothEquipRivalTeamParts;                      // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCOption) == 0x000008, "Wrong alignment on FST_NPCOption");
static_assert(sizeof(FST_NPCOption) == 0x000068, "Wrong size on FST_NPCOption");
static_assert(offsetof(FST_NPCOption, KindId) == 0x000008, "Member 'FST_NPCOption::KindId' has a wrong offset!");
static_assert(offsetof(FST_NPCOption, SocketType) == 0x000010, "Member 'FST_NPCOption::SocketType' has a wrong offset!");
static_assert(offsetof(FST_NPCOption, AllowBothEquipRivalTeamParts) == 0x000011, "Member 'FST_NPCOption::AllowBothEquipRivalTeamParts' has a wrong offset!");
static_assert(offsetof(FST_NPCOption, SkeletalMesh) == 0x000018, "Member 'FST_NPCOption::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FST_NPCOption, StaticMesh) == 0x000040, "Member 'FST_NPCOption::StaticMesh' has a wrong offset!");

// ScriptStruct DarwinGame.FeatureEffectLineageResult
// 0x0018 (0x0050 - 0x0038)
struct FFeatureEffectLineageResult final : public FFeatureEffectStatusResult
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeatureEffectLineageResult) == 0x000008, "Wrong alignment on FFeatureEffectLineageResult");
static_assert(sizeof(FFeatureEffectLineageResult) == 0x000050, "Wrong size on FFeatureEffectLineageResult");

// ScriptStruct DarwinGame.FeatureEffectResult
// 0x0000 (0x0010 - 0x0010)
struct FFeatureEffectResult final : public FBattleParameterEffectBase
{
};
static_assert(alignof(FFeatureEffectResult) == 0x000008, "Wrong alignment on FFeatureEffectResult");
static_assert(sizeof(FFeatureEffectResult) == 0x000010, "Wrong size on FFeatureEffectResult");

// ScriptStruct DarwinGame.ST_TextData
// 0x0020 (0x0028 - 0x0008)
struct FST_TextData final : public FTableRowBase
{
public:
	class FString                                 ja;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 us;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TextData) == 0x000008, "Wrong alignment on FST_TextData");
static_assert(sizeof(FST_TextData) == 0x000028, "Wrong size on FST_TextData");
static_assert(offsetof(FST_TextData, ja) == 0x000008, "Member 'FST_TextData::ja' has a wrong offset!");
static_assert(offsetof(FST_TextData, us) == 0x000018, "Member 'FST_TextData::us' has a wrong offset!");

// ScriptStruct DarwinGame.FeatureCause
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFeatureCause final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFeatureCause) == 0x000004, "Wrong alignment on FFeatureCause");
static_assert(sizeof(FFeatureCause) == 0x00000C, "Wrong size on FFeatureCause");

// ScriptStruct DarwinGame.ST_OriginParameterDataTable
// 0x0138 (0x0140 - 0x0008)
struct FST_OriginParameterDataTable final : public FTableRowBase
{
public:
	class FName                                   OriginName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DefaultState;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TransitionableMoveStateTags;                       // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSubclassOf<class UStateBase>> MoveStateList;                                     // 0x0038(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSubclassOf<class UActionStateBase>> ActionStateList;                                   // 0x0088(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSubclassOf<class UEventStateBase>> EventStateList;                                    // 0x00D8(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           AbilityList;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StampHeightOffsetInFieldLink;                      // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIHeightOffsetInStateDead;                         // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_OriginParameterDataTable) == 0x000008, "Wrong alignment on FST_OriginParameterDataTable");
static_assert(sizeof(FST_OriginParameterDataTable) == 0x000140, "Wrong size on FST_OriginParameterDataTable");
static_assert(offsetof(FST_OriginParameterDataTable, OriginName) == 0x000008, "Member 'FST_OriginParameterDataTable::OriginName' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, DefaultState) == 0x000010, "Member 'FST_OriginParameterDataTable::DefaultState' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, TransitionableMoveStateTags) == 0x000018, "Member 'FST_OriginParameterDataTable::TransitionableMoveStateTags' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, MoveStateList) == 0x000038, "Member 'FST_OriginParameterDataTable::MoveStateList' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, ActionStateList) == 0x000088, "Member 'FST_OriginParameterDataTable::ActionStateList' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, EventStateList) == 0x0000D8, "Member 'FST_OriginParameterDataTable::EventStateList' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, AbilityList) == 0x000128, "Member 'FST_OriginParameterDataTable::AbilityList' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, StampHeightOffsetInFieldLink) == 0x000138, "Member 'FST_OriginParameterDataTable::StampHeightOffsetInFieldLink' has a wrong offset!");
static_assert(offsetof(FST_OriginParameterDataTable, UIHeightOffsetInStateDead) == 0x00013C, "Member 'FST_OriginParameterDataTable::UIHeightOffsetInStateDead' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldAct
// 0x0020 (0x0028 - 0x0008)
struct FST_FieldAct final : public FTableRowBase
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CapsuleScale;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnds;                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootScale;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_FieldAct) == 0x000008, "Wrong alignment on FST_FieldAct");
static_assert(sizeof(FST_FieldAct) == 0x000028, "Wrong size on FST_FieldAct");
static_assert(offsetof(FST_FieldAct, MontageToPlay) == 0x000008, "Member 'FST_FieldAct::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FST_FieldAct, StartPosition) == 0x000010, "Member 'FST_FieldAct::StartPosition' has a wrong offset!");
static_assert(offsetof(FST_FieldAct, CapsuleScale) == 0x000014, "Member 'FST_FieldAct::CapsuleScale' has a wrong offset!");
static_assert(offsetof(FST_FieldAct, bStopWhenAbilityEnds) == 0x00001C, "Member 'FST_FieldAct::bStopWhenAbilityEnds' has a wrong offset!");
static_assert(offsetof(FST_FieldAct, RootScale) == 0x000020, "Member 'FST_FieldAct::RootScale' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMonsterDictHabitat
// 0x0010 (0x0018 - 0x0008)
struct FST_UIMonsterDictHabitat final : public FTableRowBase
{
public:
	TArray<struct FST_UIMonsterDictHabitatInfo>   HabitatList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMonsterDictHabitat) == 0x000008, "Wrong alignment on FST_UIMonsterDictHabitat");
static_assert(sizeof(FST_UIMonsterDictHabitat) == 0x000018, "Wrong size on FST_UIMonsterDictHabitat");
static_assert(offsetof(FST_UIMonsterDictHabitat, HabitatList) == 0x000008, "Member 'FST_UIMonsterDictHabitat::HabitatList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CommentColor
// 0x0014 (0x0014 - 0x0000)
struct FST_CommentColor final
{
public:
	struct FColor                                 TextColor;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CommentColor) == 0x000004, "Wrong alignment on FST_CommentColor");
static_assert(sizeof(FST_CommentColor) == 0x000014, "Wrong size on FST_CommentColor");
static_assert(offsetof(FST_CommentColor, TextColor) == 0x000000, "Member 'FST_CommentColor::TextColor' has a wrong offset!");
static_assert(offsetof(FST_CommentColor, BackgroundColor) == 0x000004, "Member 'FST_CommentColor::BackgroundColor' has a wrong offset!");

// ScriptStruct DarwinGame.FieldItemGetInfo
// 0x000C (0x000C - 0x0000)
struct FFieldItemGetInfo final
{
public:
	class FName                                   ItemIDName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFieldItemGetInfo) == 0x000004, "Wrong alignment on FFieldItemGetInfo");
static_assert(sizeof(FFieldItemGetInfo) == 0x00000C, "Wrong size on FFieldItemGetInfo");
static_assert(offsetof(FFieldItemGetInfo, ItemIDName) == 0x000000, "Member 'FFieldItemGetInfo::ItemIDName' has a wrong offset!");
static_assert(offsetof(FFieldItemGetInfo, ItemCount) == 0x000008, "Member 'FFieldItemGetInfo::ItemCount' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCPartVoiceData
// 0x0010 (0x0018 - 0x0008)
struct FST_NPCPartVoiceData final : public FTableRowBase
{
public:
	TArray<int32>                                 SoundCodes;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCPartVoiceData) == 0x000008, "Wrong alignment on FST_NPCPartVoiceData");
static_assert(sizeof(FST_NPCPartVoiceData) == 0x000018, "Wrong size on FST_NPCPartVoiceData");
static_assert(offsetof(FST_NPCPartVoiceData, SoundCodes) == 0x000008, "Member 'FST_NPCPartVoiceData::SoundCodes' has a wrong offset!");

// ScriptStruct DarwinGame.ActiveSwitchInfo
// 0x000C (0x000C - 0x0000)
struct FActiveSwitchInfo final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveChildren;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveSwitchInfo) == 0x000004, "Wrong alignment on FActiveSwitchInfo");
static_assert(sizeof(FActiveSwitchInfo) == 0x00000C, "Wrong size on FActiveSwitchInfo");
static_assert(offsetof(FActiveSwitchInfo, TagName) == 0x000000, "Member 'FActiveSwitchInfo::TagName' has a wrong offset!");
static_assert(offsetof(FActiveSwitchInfo, recursiveChildren) == 0x000008, "Member 'FActiveSwitchInfo::recursiveChildren' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldObject
// 0x0040 (0x0048 - 0x0008)
struct FST_FieldObject final : public FTableRowBase
{
public:
	class FName                                   AssortID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemLevelFlagID;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPick;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPick;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinTableID;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventID;                                           // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnlyDropOnce;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSaveBreakState;                                  // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BitFlagID;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrushType;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RespawnType;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RespawnCount;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_FieldObject) == 0x000008, "Wrong alignment on FST_FieldObject");
static_assert(sizeof(FST_FieldObject) == 0x000048, "Wrong size on FST_FieldObject");
static_assert(offsetof(FST_FieldObject, AssortID) == 0x000008, "Member 'FST_FieldObject::AssortID' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, AreaType) == 0x000010, "Member 'FST_FieldObject::AreaType' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, ItemLevelFlagID) == 0x000014, "Member 'FST_FieldObject::ItemLevelFlagID' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, MinPick) == 0x000018, "Member 'FST_FieldObject::MinPick' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, MaxPick) == 0x00001C, "Member 'FST_FieldObject::MaxPick' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, CoinTableID) == 0x000020, "Member 'FST_FieldObject::CoinTableID' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, EventID) == 0x000024, "Member 'FST_FieldObject::EventID' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, IsOnlyDropOnce) == 0x00002C, "Member 'FST_FieldObject::IsOnlyDropOnce' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, IsSaveBreakState) == 0x00002D, "Member 'FST_FieldObject::IsSaveBreakState' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, BitFlagID) == 0x000030, "Member 'FST_FieldObject::BitFlagID' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, CrushType) == 0x000034, "Member 'FST_FieldObject::CrushType' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, RespawnType) == 0x000038, "Member 'FST_FieldObject::RespawnType' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, RespawnCount) == 0x00003C, "Member 'FST_FieldObject::RespawnCount' has a wrong offset!");
static_assert(offsetof(FST_FieldObject, EventType) == 0x000040, "Member 'FST_FieldObject::EventType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCMovePoints
// 0x0010 (0x0018 - 0x0008)
struct FST_NPCMovePoints final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NPCMovePoints) == 0x000008, "Wrong alignment on FST_NPCMovePoints");
static_assert(sizeof(FST_NPCMovePoints) == 0x000018, "Wrong size on FST_NPCMovePoints");
static_assert(offsetof(FST_NPCMovePoints, Location) == 0x000008, "Member 'FST_NPCMovePoints::Location' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldObjectGetItemInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_FieldObjectGetItemInfo final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FieldObjectGetItemInfo) == 0x000004, "Wrong alignment on FST_FieldObjectGetItemInfo");
static_assert(sizeof(FST_FieldObjectGetItemInfo) == 0x000010, "Wrong size on FST_FieldObjectGetItemInfo");
static_assert(offsetof(FST_FieldObjectGetItemInfo, ItemId) == 0x000000, "Member 'FST_FieldObjectGetItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectGetItemInfo, ItemNum) == 0x000008, "Member 'FST_FieldObjectGetItemInfo::ItemNum' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectGetItemInfo, Probability) == 0x00000C, "Member 'FST_FieldObjectGetItemInfo::Probability' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldObjectGetItem
// 0x0020 (0x0028 - 0x0008)
struct FST_FieldObjectGetItem final : public FTableRowBase
{
public:
	class FName                                   AssortID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevelFlagID;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_FieldObjectGetItemInfo>     Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FieldObjectGetItem) == 0x000008, "Wrong alignment on FST_FieldObjectGetItem");
static_assert(sizeof(FST_FieldObjectGetItem) == 0x000028, "Wrong size on FST_FieldObjectGetItem");
static_assert(offsetof(FST_FieldObjectGetItem, AssortID) == 0x000008, "Member 'FST_FieldObjectGetItem::AssortID' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectGetItem, ItemLevelFlagID) == 0x000010, "Member 'FST_FieldObjectGetItem::ItemLevelFlagID' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectGetItem, Items) == 0x000018, "Member 'FST_FieldObjectGetItem::Items' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TerrainDamage
// 0x0010 (0x0010 - 0x0000)
struct FST_TerrainDamage final
{
public:
	EResistanceType                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldTerrainEffectType                       EffectType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Interval;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoolTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TerrainDamage) == 0x000004, "Wrong alignment on FST_TerrainDamage");
static_assert(sizeof(FST_TerrainDamage) == 0x000010, "Wrong size on FST_TerrainDamage");
static_assert(offsetof(FST_TerrainDamage, Type) == 0x000000, "Member 'FST_TerrainDamage::Type' has a wrong offset!");
static_assert(offsetof(FST_TerrainDamage, EffectType) == 0x000001, "Member 'FST_TerrainDamage::EffectType' has a wrong offset!");
static_assert(offsetof(FST_TerrainDamage, Interval) == 0x000004, "Member 'FST_TerrainDamage::Interval' has a wrong offset!");
static_assert(offsetof(FST_TerrainDamage, damageRate) == 0x000008, "Member 'FST_TerrainDamage::damageRate' has a wrong offset!");
static_assert(offsetof(FST_TerrainDamage, CoolTime) == 0x00000C, "Member 'FST_TerrainDamage::CoolTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldTerrainInfo
// 0x0028 (0x0028 - 0x0000)
struct FST_FieldTerrainInfo final
{
public:
	struct FVector                                ForceValue;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSinkValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SinkSpeed;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDamage;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_TerrainDamage                      DamageInfo;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FieldTerrainInfo) == 0x000004, "Wrong alignment on FST_FieldTerrainInfo");
static_assert(sizeof(FST_FieldTerrainInfo) == 0x000028, "Wrong size on FST_FieldTerrainInfo");
static_assert(offsetof(FST_FieldTerrainInfo, ForceValue) == 0x000000, "Member 'FST_FieldTerrainInfo::ForceValue' has a wrong offset!");
static_assert(offsetof(FST_FieldTerrainInfo, MaxSinkValue) == 0x00000C, "Member 'FST_FieldTerrainInfo::MaxSinkValue' has a wrong offset!");
static_assert(offsetof(FST_FieldTerrainInfo, SinkSpeed) == 0x000010, "Member 'FST_FieldTerrainInfo::SinkSpeed' has a wrong offset!");
static_assert(offsetof(FST_FieldTerrainInfo, bApplyDamage) == 0x000014, "Member 'FST_FieldTerrainInfo::bApplyDamage' has a wrong offset!");
static_assert(offsetof(FST_FieldTerrainInfo, DamageInfo) == 0x000018, "Member 'FST_FieldTerrainInfo::DamageInfo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingGameFlagLevelEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_StreamingGameFlagLevelEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StreamingGameFlagLevelEditor) == 0x000001, "Wrong alignment on FST_StreamingGameFlagLevelEditor");
static_assert(sizeof(FST_StreamingGameFlagLevelEditor) == 0x000001, "Wrong size on FST_StreamingGameFlagLevelEditor");

// ScriptStruct DarwinGame.FlagMaterialRefByTypeEditor
// 0x0001 (0x0001 - 0x0000)
struct FFlagMaterialRefByTypeEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlagMaterialRefByTypeEditor) == 0x000001, "Wrong alignment on FFlagMaterialRefByTypeEditor");
static_assert(sizeof(FFlagMaterialRefByTypeEditor) == 0x000001, "Wrong size on FFlagMaterialRefByTypeEditor");

// ScriptStruct DarwinGame.FlagMaterialRefByType
// 0x0050 (0x0050 - 0x0000)
struct FFlagMaterialRefByType final
{
public:
	TMap<EFlagShape, TSoftObjectPtr<class UMaterialInstance>> matRefMap;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlagMaterialRefByType) == 0x000008, "Wrong alignment on FFlagMaterialRefByType");
static_assert(sizeof(FFlagMaterialRefByType) == 0x000050, "Wrong size on FFlagMaterialRefByType");
static_assert(offsetof(FFlagMaterialRefByType, matRefMap) == 0x000000, "Member 'FFlagMaterialRefByType::matRefMap' has a wrong offset!");

// ScriptStruct DarwinGame.DoorUtil
// 0x0003 (0x0003 - 0x0000)
struct FDoorUtil final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDoorUtil) == 0x000001, "Wrong alignment on FDoorUtil");
static_assert(sizeof(FDoorUtil) == 0x000003, "Wrong size on FDoorUtil");

// ScriptStruct DarwinGame.ST_NPCAppearance
// 0x00C0 (0x00C8 - 0x0008)
struct FST_NPCAppearance final : public FTableRowBase
{
public:
	struct FVector2D                              CupsuleSize;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimInstances;                                     // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInstance>> MaterialInstances;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepOffset;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              EmoteDataTable;                                    // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           EmoteFacialAnim;                                   // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCAppearance) == 0x000008, "Wrong alignment on FST_NPCAppearance");
static_assert(sizeof(FST_NPCAppearance) == 0x0000C8, "Wrong size on FST_NPCAppearance");
static_assert(offsetof(FST_NPCAppearance, CupsuleSize) == 0x000008, "Member 'FST_NPCAppearance::CupsuleSize' has a wrong offset!");
static_assert(offsetof(FST_NPCAppearance, SkeletalMesh) == 0x000010, "Member 'FST_NPCAppearance::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FST_NPCAppearance, AnimInstances) == 0x000038, "Member 'FST_NPCAppearance::AnimInstances' has a wrong offset!");
static_assert(offsetof(FST_NPCAppearance, MaterialInstances) == 0x000060, "Member 'FST_NPCAppearance::MaterialInstances' has a wrong offset!");
static_assert(offsetof(FST_NPCAppearance, SleepOffset) == 0x000070, "Member 'FST_NPCAppearance::SleepOffset' has a wrong offset!");
static_assert(offsetof(FST_NPCAppearance, EmoteDataTable) == 0x000078, "Member 'FST_NPCAppearance::EmoteDataTable' has a wrong offset!");
static_assert(offsetof(FST_NPCAppearance, EmoteFacialAnim) == 0x0000A0, "Member 'FST_NPCAppearance::EmoteFacialAnim' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIStationListData
// 0x0028 (0x0030 - 0x0008)
struct FST_UIStationListData final : public FTableRowBase
{
public:
	class FName                                   StationID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FastTravelID;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotNewFlag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     Area;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PointName;                                         // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewDisplay;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIStationListData) == 0x000008, "Wrong alignment on FST_UIStationListData");
static_assert(sizeof(FST_UIStationListData) == 0x000030, "Wrong size on FST_UIStationListData");
static_assert(offsetof(FST_UIStationListData, StationID) == 0x000008, "Member 'FST_UIStationListData::StationID' has a wrong offset!");
static_assert(offsetof(FST_UIStationListData, FastTravelID) == 0x000010, "Member 'FST_UIStationListData::FastTravelID' has a wrong offset!");
static_assert(offsetof(FST_UIStationListData, NotNewFlag) == 0x000018, "Member 'FST_UIStationListData::NotNewFlag' has a wrong offset!");
static_assert(offsetof(FST_UIStationListData, Area) == 0x000020, "Member 'FST_UIStationListData::Area' has a wrong offset!");
static_assert(offsetof(FST_UIStationListData, PointName) == 0x000024, "Member 'FST_UIStationListData::PointName' has a wrong offset!");
static_assert(offsetof(FST_UIStationListData, IsNewDisplay) == 0x00002C, "Member 'FST_UIStationListData::IsNewDisplay' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FoodEffectUnit
// 0x0020 (0x0020 - 0x0000)
struct FST_FoodEffectUnit final
{
public:
	EFoodEffectType                               FoodEffectType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DetailType;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoodCalcType                                 CalcType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavoriteBonus;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SynergyBonus;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FoodEffectUnit) == 0x000004, "Wrong alignment on FST_FoodEffectUnit");
static_assert(sizeof(FST_FoodEffectUnit) == 0x000020, "Wrong size on FST_FoodEffectUnit");
static_assert(offsetof(FST_FoodEffectUnit, FoodEffectType) == 0x000000, "Member 'FST_FoodEffectUnit::FoodEffectType' has a wrong offset!");
static_assert(offsetof(FST_FoodEffectUnit, DetailType) == 0x000004, "Member 'FST_FoodEffectUnit::DetailType' has a wrong offset!");
static_assert(offsetof(FST_FoodEffectUnit, IconID) == 0x000008, "Member 'FST_FoodEffectUnit::IconID' has a wrong offset!");
static_assert(offsetof(FST_FoodEffectUnit, CalcType) == 0x000010, "Member 'FST_FoodEffectUnit::CalcType' has a wrong offset!");
static_assert(offsetof(FST_FoodEffectUnit, Value) == 0x000014, "Member 'FST_FoodEffectUnit::Value' has a wrong offset!");
static_assert(offsetof(FST_FoodEffectUnit, FavoriteBonus) == 0x000018, "Member 'FST_FoodEffectUnit::FavoriteBonus' has a wrong offset!");
static_assert(offsetof(FST_FoodEffectUnit, SynergyBonus) == 0x00001C, "Member 'FST_FoodEffectUnit::SynergyBonus' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FoodEffect
// 0x0030 (0x0038 - 0x0008)
struct FST_FoodEffect final : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDishCategory                                 OwnType;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDishCategory                                 Synergy;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KindFavorite;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_FoodEffectUnit>             Effects;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FoodEffect) == 0x000008, "Wrong alignment on FST_FoodEffect");
static_assert(sizeof(FST_FoodEffect) == 0x000038, "Wrong size on FST_FoodEffect");
static_assert(offsetof(FST_FoodEffect, ItemId) == 0x000008, "Member 'FST_FoodEffect::ItemId' has a wrong offset!");
static_assert(offsetof(FST_FoodEffect, Cost) == 0x000010, "Member 'FST_FoodEffect::Cost' has a wrong offset!");
static_assert(offsetof(FST_FoodEffect, Duration) == 0x000014, "Member 'FST_FoodEffect::Duration' has a wrong offset!");
static_assert(offsetof(FST_FoodEffect, OwnType) == 0x000018, "Member 'FST_FoodEffect::OwnType' has a wrong offset!");
static_assert(offsetof(FST_FoodEffect, Synergy) == 0x000019, "Member 'FST_FoodEffect::Synergy' has a wrong offset!");
static_assert(offsetof(FST_FoodEffect, KindFavorite) == 0x00001C, "Member 'FST_FoodEffect::KindFavorite' has a wrong offset!");
static_assert(offsetof(FST_FoodEffect, Effects) == 0x000028, "Member 'FST_FoodEffect::Effects' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapIDData
// 0x0010 (0x0018 - 0x0008)
struct FST_UIMapIDData final : public FTableRowBase
{
public:
	int32                                         MapNum;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FloorNum;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CursorJumpOrder;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIMapIDData) == 0x000008, "Wrong alignment on FST_UIMapIDData");
static_assert(sizeof(FST_UIMapIDData) == 0x000018, "Wrong size on FST_UIMapIDData");
static_assert(offsetof(FST_UIMapIDData, MapNum) == 0x000008, "Member 'FST_UIMapIDData::MapNum' has a wrong offset!");
static_assert(offsetof(FST_UIMapIDData, FloorNum) == 0x00000C, "Member 'FST_UIMapIDData::FloorNum' has a wrong offset!");
static_assert(offsetof(FST_UIMapIDData, CursorJumpOrder) == 0x000010, "Member 'FST_UIMapIDData::CursorJumpOrder' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIUnderButtonData
// 0x0138 (0x0140 - 0x0008)
struct FST_UIUnderButtonData final : public FTableRowBase
{
public:
	class FText                                   Minus;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Plus;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LS;                                                // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LSLeftRight;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LconLR;                                            // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ZRZL;                                              // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LR;                                                // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Y;                                                 // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   X;                                                 // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   B;                                                 // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   A;                                                 // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RSUpDown;                                          // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RSLeftRight;                                       // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIUnderButtonData) == 0x000008, "Wrong alignment on FST_UIUnderButtonData");
static_assert(sizeof(FST_UIUnderButtonData) == 0x000140, "Wrong size on FST_UIUnderButtonData");
static_assert(offsetof(FST_UIUnderButtonData, Minus) == 0x000008, "Member 'FST_UIUnderButtonData::Minus' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, Plus) == 0x000020, "Member 'FST_UIUnderButtonData::Plus' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, LS) == 0x000038, "Member 'FST_UIUnderButtonData::LS' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, LSLeftRight) == 0x000050, "Member 'FST_UIUnderButtonData::LSLeftRight' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, LconLR) == 0x000068, "Member 'FST_UIUnderButtonData::LconLR' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, ZRZL) == 0x000080, "Member 'FST_UIUnderButtonData::ZRZL' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, LR) == 0x000098, "Member 'FST_UIUnderButtonData::LR' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, Y) == 0x0000B0, "Member 'FST_UIUnderButtonData::Y' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, X) == 0x0000C8, "Member 'FST_UIUnderButtonData::X' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, B) == 0x0000E0, "Member 'FST_UIUnderButtonData::B' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, A) == 0x0000F8, "Member 'FST_UIUnderButtonData::A' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, RSUpDown) == 0x000110, "Member 'FST_UIUnderButtonData::RSUpDown' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonData, RSLeftRight) == 0x000128, "Member 'FST_UIUnderButtonData::RSLeftRight' has a wrong offset!");

// ScriptStruct DarwinGame.FoodTimeInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFoodTimeInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoodTimeInfo) == 0x000004, "Wrong alignment on FFoodTimeInfo");
static_assert(sizeof(FFoodTimeInfo) == 0x00000C, "Wrong size on FFoodTimeInfo");

// ScriptStruct DarwinGame.FoodEffectStatusResult
// 0x0000 (0x0038 - 0x0038)
struct FFoodEffectStatusResult final : public FST_StatusEffectBase
{
};
static_assert(alignof(FFoodEffectStatusResult) == 0x000008, "Wrong alignment on FFoodEffectStatusResult");
static_assert(sizeof(FFoodEffectStatusResult) == 0x000038, "Wrong size on FFoodEffectStatusResult");

// ScriptStruct DarwinGame.FoodEffectResult
// 0x0000 (0x0010 - 0x0010)
struct FFoodEffectResult final : public FBattleParameterEffectBase
{
};
static_assert(alignof(FFoodEffectResult) == 0x000008, "Wrong alignment on FFoodEffectResult");
static_assert(sizeof(FFoodEffectResult) == 0x000010, "Wrong size on FFoodEffectResult");

// ScriptStruct DarwinGame.ActiveFoodEffectQuery
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FActiveFoodEffectQuery final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveFoodEffectQuery) == 0x000008, "Wrong alignment on FActiveFoodEffectQuery");
static_assert(sizeof(FActiveFoodEffectQuery) == 0x000048, "Wrong size on FActiveFoodEffectQuery");

// ScriptStruct DarwinGame.FoodEffectQuery
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FFoodEffectQuery final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoodEffectQuery) == 0x000008, "Wrong alignment on FFoodEffectQuery");
static_assert(sizeof(FFoodEffectQuery) == 0x000058, "Wrong size on FFoodEffectQuery");

// ScriptStruct DarwinGame.FoodGameplayEffectData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFoodGameplayEffectData final
{
public:
	int32                                         FoodHandle;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveHandle;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x14];                                       // 0x000C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoodGameplayEffectData) == 0x000008, "Wrong alignment on FFoodGameplayEffectData");
static_assert(sizeof(FFoodGameplayEffectData) == 0x000020, "Wrong size on FFoodGameplayEffectData");
static_assert(offsetof(FFoodGameplayEffectData, FoodHandle) == 0x000000, "Member 'FFoodGameplayEffectData::FoodHandle' has a wrong offset!");
static_assert(offsetof(FFoodGameplayEffectData, ActiveHandle) == 0x000004, "Member 'FFoodGameplayEffectData::ActiveHandle' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterVariableLevelRate
// 0x0020 (0x0028 - 0x0008)
struct FST_MonsterVariableLevelRate final : public FTableRowBase
{
public:
	int32                                         MonsterLevel;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             Rate;                                              // 0x000C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterVariableLevelRate) == 0x000008, "Wrong alignment on FST_MonsterVariableLevelRate");
static_assert(sizeof(FST_MonsterVariableLevelRate) == 0x000028, "Wrong size on FST_MonsterVariableLevelRate");
static_assert(offsetof(FST_MonsterVariableLevelRate, MonsterLevel) == 0x000008, "Member 'FST_MonsterVariableLevelRate::MonsterLevel' has a wrong offset!");
static_assert(offsetof(FST_MonsterVariableLevelRate, Rate) == 0x00000C, "Member 'FST_MonsterVariableLevelRate::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.FootEffectRequest
// 0x0020 (0x0020 - 0x0000)
struct FFootEffectRequest final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EFootEffectActionType                         ActionType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       FootSocket;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseIgnoreList;                                     // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFootEffectCategory>                   IgnoreEffectCategoryList;                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootEffectRequest) == 0x000008, "Wrong alignment on FFootEffectRequest");
static_assert(sizeof(FFootEffectRequest) == 0x000020, "Wrong size on FFootEffectRequest");
static_assert(offsetof(FFootEffectRequest, ActionType) == 0x000008, "Member 'FFootEffectRequest::ActionType' has a wrong offset!");
static_assert(offsetof(FFootEffectRequest, FootSocket) == 0x000009, "Member 'FFootEffectRequest::FootSocket' has a wrong offset!");
static_assert(offsetof(FFootEffectRequest, UseIgnoreList) == 0x00000A, "Member 'FFootEffectRequest::UseIgnoreList' has a wrong offset!");
static_assert(offsetof(FFootEffectRequest, IgnoreEffectCategoryList) == 0x000010, "Member 'FFootEffectRequest::IgnoreEffectCategoryList' has a wrong offset!");

// ScriptStruct DarwinGame.MiddleWaterFootEffect
// 0x000C (0x000C - 0x0000)
struct FMiddleWaterFootEffect final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundID;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiddleWaterFootEffect) == 0x000004, "Wrong alignment on FMiddleWaterFootEffect");
static_assert(sizeof(FMiddleWaterFootEffect) == 0x00000C, "Wrong size on FMiddleWaterFootEffect");
static_assert(offsetof(FMiddleWaterFootEffect, EffectId) == 0x000000, "Member 'FMiddleWaterFootEffect::EffectId' has a wrong offset!");
static_assert(offsetof(FMiddleWaterFootEffect, SoundID) == 0x000008, "Member 'FMiddleWaterFootEffect::SoundID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCBaseAreaMonster
// 0x0018 (0x0018 - 0x0000)
struct FST_NPCBaseAreaMonster final
{
public:
	TArray<int32>                                 KindId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcID;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCBaseAreaMonster) == 0x000008, "Wrong alignment on FST_NPCBaseAreaMonster");
static_assert(sizeof(FST_NPCBaseAreaMonster) == 0x000018, "Wrong size on FST_NPCBaseAreaMonster");
static_assert(offsetof(FST_NPCBaseAreaMonster, KindId) == 0x000000, "Member 'FST_NPCBaseAreaMonster::KindId' has a wrong offset!");
static_assert(offsetof(FST_NPCBaseAreaMonster, NpcID) == 0x000010, "Member 'FST_NPCBaseAreaMonster::NpcID' has a wrong offset!");

// ScriptStruct DarwinGame.FootEffectFloor
// 0x008C (0x008C - 0x0000)
struct alignas(0x04) FFootEffectFloor final
{
public:
	uint8                                         Pad_0[0x8C];                                       // 0x0000(0x008C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootEffectFloor) == 0x000004, "Wrong alignment on FFootEffectFloor");
static_assert(sizeof(FFootEffectFloor) == 0x00008C, "Wrong size on FFootEffectFloor");

// ScriptStruct DarwinGame.ST_LeftMenuSetting
// 0x0028 (0x0028 - 0x0000)
struct FST_LeftMenuSetting final
{
public:
	class FName                                   Root;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Panels;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenAnim;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CloseAnim;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LeftMenuSetting) == 0x000008, "Wrong alignment on FST_LeftMenuSetting");
static_assert(sizeof(FST_LeftMenuSetting) == 0x000028, "Wrong size on FST_LeftMenuSetting");
static_assert(offsetof(FST_LeftMenuSetting, Root) == 0x000000, "Member 'FST_LeftMenuSetting::Root' has a wrong offset!");
static_assert(offsetof(FST_LeftMenuSetting, Panels) == 0x000008, "Member 'FST_LeftMenuSetting::Panels' has a wrong offset!");
static_assert(offsetof(FST_LeftMenuSetting, OpenAnim) == 0x000018, "Member 'FST_LeftMenuSetting::OpenAnim' has a wrong offset!");
static_assert(offsetof(FST_LeftMenuSetting, CloseAnim) == 0x000020, "Member 'FST_LeftMenuSetting::CloseAnim' has a wrong offset!");

// ScriptStruct DarwinGame.FootPrintResorce
// 0x0050 (0x0050 - 0x0000)
struct FFootPrintResorce final
{
public:
	TMap<ESocket, class UMaterialInterface*>      Materials;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootPrintResorce) == 0x000008, "Wrong alignment on FFootPrintResorce");
static_assert(sizeof(FFootPrintResorce) == 0x000050, "Wrong size on FFootPrintResorce");
static_assert(offsetof(FFootPrintResorce, Materials) == 0x000000, "Member 'FFootPrintResorce::Materials' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ForcedBattleAreaDataTable
// 0x0020 (0x0028 - 0x0008)
struct FST_ForcedBattleAreaDataTable final : public FTableRowBase
{
public:
	EForcedBattleAreaCollisionType                CollisionType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EForcedBattleAreaShapeType                    ShapeType;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AreaExtent;                                        // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ForcedBattleAreaDataTable) == 0x000008, "Wrong alignment on FST_ForcedBattleAreaDataTable");
static_assert(sizeof(FST_ForcedBattleAreaDataTable) == 0x000028, "Wrong size on FST_ForcedBattleAreaDataTable");
static_assert(offsetof(FST_ForcedBattleAreaDataTable, CollisionType) == 0x000008, "Member 'FST_ForcedBattleAreaDataTable::CollisionType' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleAreaDataTable, ShapeType) == 0x000009, "Member 'FST_ForcedBattleAreaDataTable::ShapeType' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleAreaDataTable, AreaExtent) == 0x00000C, "Member 'FST_ForcedBattleAreaDataTable::AreaExtent' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleAreaDataTable, Color) == 0x000018, "Member 'FST_ForcedBattleAreaDataTable::Color' has a wrong offset!");

// ScriptStruct DarwinGame.MaterialVisionParam
// 0x0010 (0x0010 - 0x0000)
struct FMaterialVisionParam final
{
public:
	TArray<TSoftObjectPtr<class UMaterialInstance>> Materials;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialVisionParam) == 0x000008, "Wrong alignment on FMaterialVisionParam");
static_assert(sizeof(FMaterialVisionParam) == 0x000010, "Wrong size on FMaterialVisionParam");
static_assert(offsetof(FMaterialVisionParam, Materials) == 0x000000, "Member 'FMaterialVisionParam::Materials' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ForcedBattleActorInfo
// 0x0018 (0x0020 - 0x0008)
struct FST_ForcedBattleActorInfo final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ForcedBattleActorInfo) == 0x000008, "Wrong alignment on FST_ForcedBattleActorInfo");
static_assert(sizeof(FST_ForcedBattleActorInfo) == 0x000020, "Wrong size on FST_ForcedBattleActorInfo");
static_assert(offsetof(FST_ForcedBattleActorInfo, Location) == 0x000008, "Member 'FST_ForcedBattleActorInfo::Location' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleActorInfo, Rotation) == 0x000014, "Member 'FST_ForcedBattleActorInfo::Rotation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ForcedBattleAreaInfo
// 0x0020 (0x0028 - 0x0008)
struct FST_ForcedBattleAreaInfo final : public FTableRowBase
{
public:
	class FName                                   AreaID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ForcedBattleAreaInfo) == 0x000008, "Wrong alignment on FST_ForcedBattleAreaInfo");
static_assert(sizeof(FST_ForcedBattleAreaInfo) == 0x000028, "Wrong size on FST_ForcedBattleAreaInfo");
static_assert(offsetof(FST_ForcedBattleAreaInfo, AreaID) == 0x000008, "Member 'FST_ForcedBattleAreaInfo::AreaID' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleAreaInfo, Location) == 0x000010, "Member 'FST_ForcedBattleAreaInfo::Location' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleAreaInfo, Rotation) == 0x00001C, "Member 'FST_ForcedBattleAreaInfo::Rotation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ForcedBattleBGM
// 0x0020 (0x0028 - 0x0008)
struct FST_ForcedBattleBGM final : public FTableRowBase
{
public:
	EAtomCompCategory                             Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ForcedBattleBGM) == 0x000008, "Wrong alignment on FST_ForcedBattleBGM");
static_assert(sizeof(FST_ForcedBattleBGM) == 0x000028, "Wrong size on FST_ForcedBattleBGM");
static_assert(offsetof(FST_ForcedBattleBGM, Category) == 0x000008, "Member 'FST_ForcedBattleBGM::Category' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleBGM, Name) == 0x000010, "Member 'FST_ForcedBattleBGM::Name' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleBGM, StartTime) == 0x000020, "Member 'FST_ForcedBattleBGM::StartTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ForcedBattleFade
// 0x0010 (0x0018 - 0x0008)
struct FST_ForcedBattleFade final : public FTableRowBase
{
public:
	float                                         FadeOutTimeOnStart;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTimeOnStart;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTimeOnEnd;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ForcedBattleFade) == 0x000008, "Wrong alignment on FST_ForcedBattleFade");
static_assert(sizeof(FST_ForcedBattleFade) == 0x000018, "Wrong size on FST_ForcedBattleFade");
static_assert(offsetof(FST_ForcedBattleFade, FadeOutTimeOnStart) == 0x000008, "Member 'FST_ForcedBattleFade::FadeOutTimeOnStart' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleFade, FadeInTimeOnStart) == 0x00000C, "Member 'FST_ForcedBattleFade::FadeInTimeOnStart' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleFade, FadeInTimeOnEnd) == 0x000010, "Member 'FST_ForcedBattleFade::FadeInTimeOnEnd' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ForcedBattleEndCondition
// 0x0018 (0x0020 - 0x0008)
struct FST_ForcedBattleEndCondition final : public FTableRowBase
{
public:
	EForcedBattleEndType                          Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Params;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ForcedBattleEndCondition) == 0x000008, "Wrong alignment on FST_ForcedBattleEndCondition");
static_assert(sizeof(FST_ForcedBattleEndCondition) == 0x000020, "Wrong size on FST_ForcedBattleEndCondition");
static_assert(offsetof(FST_ForcedBattleEndCondition, Type) == 0x000008, "Member 'FST_ForcedBattleEndCondition::Type' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEndCondition, Params) == 0x000010, "Member 'FST_ForcedBattleEndCondition::Params' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ForcedBattleEventTableInfo
// 0x00F8 (0x0100 - 0x0008)
struct FST_ForcedBattleEventTableInfo final : public FTableRowBase
{
public:
	bool                                          PreAutoSave;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ForcedBattleActorInfo              PlayerLocation;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FST_ForcedBattleActorInfo>      FriendLocations;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_ForcedBattleAreaInfo>       ForcedBattleAreas;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventSpawnMonsterID;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FriendIsBattle;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ForcedBattleBGM                    BGMInfo;                                           // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FST_ForcedBattleFade                   Fade;                                              // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 EndMessageId;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMessageWaitFrameCount;                          // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_ForcedBattleEndCondition>   EndConditions;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReleaseFlagNames;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BreakFlagNames;                                    // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TakeBreak;                                         // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NextEventIDs;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ForcedBattleEventTableInfo) == 0x000008, "Wrong alignment on FST_ForcedBattleEventTableInfo");
static_assert(sizeof(FST_ForcedBattleEventTableInfo) == 0x000100, "Wrong size on FST_ForcedBattleEventTableInfo");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, PreAutoSave) == 0x000008, "Member 'FST_ForcedBattleEventTableInfo::PreAutoSave' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, PlayerLocation) == 0x000010, "Member 'FST_ForcedBattleEventTableInfo::PlayerLocation' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, FriendLocations) == 0x000030, "Member 'FST_ForcedBattleEventTableInfo::FriendLocations' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, ForcedBattleAreas) == 0x000040, "Member 'FST_ForcedBattleEventTableInfo::ForcedBattleAreas' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, EventSpawnMonsterID) == 0x000050, "Member 'FST_ForcedBattleEventTableInfo::EventSpawnMonsterID' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, FriendIsBattle) == 0x000058, "Member 'FST_ForcedBattleEventTableInfo::FriendIsBattle' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, BGMInfo) == 0x000060, "Member 'FST_ForcedBattleEventTableInfo::BGMInfo' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, Fade) == 0x000088, "Member 'FST_ForcedBattleEventTableInfo::Fade' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, EndMessageId) == 0x0000A0, "Member 'FST_ForcedBattleEventTableInfo::EndMessageId' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, EndMessageWaitFrameCount) == 0x0000B0, "Member 'FST_ForcedBattleEventTableInfo::EndMessageWaitFrameCount' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, EndConditions) == 0x0000B8, "Member 'FST_ForcedBattleEventTableInfo::EndConditions' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, ReleaseFlagNames) == 0x0000C8, "Member 'FST_ForcedBattleEventTableInfo::ReleaseFlagNames' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, BreakFlagNames) == 0x0000D8, "Member 'FST_ForcedBattleEventTableInfo::BreakFlagNames' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, TakeBreak) == 0x0000E8, "Member 'FST_ForcedBattleEventTableInfo::TakeBreak' has a wrong offset!");
static_assert(offsetof(FST_ForcedBattleEventTableInfo, NextEventIDs) == 0x0000F0, "Member 'FST_ForcedBattleEventTableInfo::NextEventIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterVariableExpRate
// 0x0008 (0x0010 - 0x0008)
struct FST_MonsterVariableExpRate final : public FTableRowBase
{
public:
	int32                                         MonsterLevel;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterVariableExpRate) == 0x000008, "Wrong alignment on FST_MonsterVariableExpRate");
static_assert(sizeof(FST_MonsterVariableExpRate) == 0x000010, "Wrong size on FST_MonsterVariableExpRate");
static_assert(offsetof(FST_MonsterVariableExpRate, MonsterLevel) == 0x000008, "Member 'FST_MonsterVariableExpRate::MonsterLevel' has a wrong offset!");
static_assert(offsetof(FST_MonsterVariableExpRate, Rate) == 0x00000C, "Member 'FST_MonsterVariableExpRate::Rate' has a wrong offset!");

// ScriptStruct DarwinGame.VoiceCueSheetList
// 0x0038 (0x0040 - 0x0008)
struct FVoiceCueSheetList final : public FTableRowBase
{
public:
	bool                                          Resident;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCueSheet>      CueSheet;                                          // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCueSheet*                     Loaded;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceCueSheetList) == 0x000008, "Wrong alignment on FVoiceCueSheetList");
static_assert(sizeof(FVoiceCueSheetList) == 0x000040, "Wrong size on FVoiceCueSheetList");
static_assert(offsetof(FVoiceCueSheetList, Resident) == 0x000008, "Member 'FVoiceCueSheetList::Resident' has a wrong offset!");
static_assert(offsetof(FVoiceCueSheetList, CueSheet) == 0x000010, "Member 'FVoiceCueSheetList::CueSheet' has a wrong offset!");
static_assert(offsetof(FVoiceCueSheetList, Loaded) == 0x000038, "Member 'FVoiceCueSheetList::Loaded' has a wrong offset!");

// ScriptStruct DarwinGame.GameDataItem
// 0x000C (0x000C - 0x0000)
struct FGameDataItem final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetOrder;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameDataItem) == 0x000004, "Wrong alignment on FGameDataItem");
static_assert(sizeof(FGameDataItem) == 0x00000C, "Wrong size on FGameDataItem");
static_assert(offsetof(FGameDataItem, Count) == 0x000000, "Member 'FGameDataItem::Count' has a wrong offset!");
static_assert(offsetof(FGameDataItem, GetOrder) == 0x000004, "Member 'FGameDataItem::GetOrder' has a wrong offset!");
static_assert(offsetof(FGameDataItem, IsNew) == 0x000008, "Member 'FGameDataItem::IsNew' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AreaState
// 0x0002 (0x0002 - 0x0000)
struct FST_AreaState final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_AreaState) == 0x000001, "Wrong alignment on FST_AreaState");
static_assert(sizeof(FST_AreaState) == 0x000002, "Wrong size on FST_AreaState");

// ScriptStruct DarwinGame.ST_RideMotionData
// 0x0040 (0x0048 - 0x0008)
struct FST_RideMotionData final : public FTableRowBase
{
public:
	class UAnimMontage*                           Action;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnds;                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpaceBase*                        Idle;                                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      RideJumpStMotion;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      RideJumpRsMotion;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      RideJumpTpMotion;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      RideJumpFaMotion;                                  // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        RideJumpEdMotion;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_RideMotionData) == 0x000008, "Wrong alignment on FST_RideMotionData");
static_assert(sizeof(FST_RideMotionData) == 0x000048, "Wrong size on FST_RideMotionData");
static_assert(offsetof(FST_RideMotionData, Action) == 0x000008, "Member 'FST_RideMotionData::Action' has a wrong offset!");
static_assert(offsetof(FST_RideMotionData, bStopWhenAbilityEnds) == 0x000010, "Member 'FST_RideMotionData::bStopWhenAbilityEnds' has a wrong offset!");
static_assert(offsetof(FST_RideMotionData, Idle) == 0x000018, "Member 'FST_RideMotionData::Idle' has a wrong offset!");
static_assert(offsetof(FST_RideMotionData, RideJumpStMotion) == 0x000020, "Member 'FST_RideMotionData::RideJumpStMotion' has a wrong offset!");
static_assert(offsetof(FST_RideMotionData, RideJumpRsMotion) == 0x000028, "Member 'FST_RideMotionData::RideJumpRsMotion' has a wrong offset!");
static_assert(offsetof(FST_RideMotionData, RideJumpTpMotion) == 0x000030, "Member 'FST_RideMotionData::RideJumpTpMotion' has a wrong offset!");
static_assert(offsetof(FST_RideMotionData, RideJumpFaMotion) == 0x000038, "Member 'FST_RideMotionData::RideJumpFaMotion' has a wrong offset!");
static_assert(offsetof(FST_RideMotionData, RideJumpEdMotion) == 0x000040, "Member 'FST_RideMotionData::RideJumpEdMotion' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterRotateToTargetWithLocationOffset
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FST_MonsterRotateToTargetWithLocationOffset final
{
public:
	ELocationOffsetDir                            mDir;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         mDistance;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mDistanceFuzzy;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mRotateRate;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mHiddenTime;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mRadius;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mNaviCheckRange;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mGoalSection;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mTimeUpSection;                                    // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mFailSection;                                      // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x34];                                      // 0x0034(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterRotateToTargetWithLocationOffset) == 0x000008, "Wrong alignment on FST_MonsterRotateToTargetWithLocationOffset");
static_assert(sizeof(FST_MonsterRotateToTargetWithLocationOffset) == 0x000068, "Wrong size on FST_MonsterRotateToTargetWithLocationOffset");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mDir) == 0x000000, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mDir' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mDistance) == 0x000004, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mDistance' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mDistanceFuzzy) == 0x000008, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mDistanceFuzzy' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mRotateRate) == 0x00000C, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mRotateRate' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mHiddenTime) == 0x000010, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mHiddenTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mRadius) == 0x000014, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mRadius' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mNaviCheckRange) == 0x000018, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mNaviCheckRange' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mGoalSection) == 0x00001C, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mGoalSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mTimeUpSection) == 0x000024, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mTimeUpSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterRotateToTargetWithLocationOffset, mFailSection) == 0x00002C, "Member 'FST_MonsterRotateToTargetWithLocationOffset::mFailSection' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterKindIdBlackList
// 0x0008 (0x0010 - 0x0008)
struct FST_MonsterKindIdBlackList final : public FTableRowBase
{
public:
	class FName                                   KindId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterKindIdBlackList) == 0x000008, "Wrong alignment on FST_MonsterKindIdBlackList");
static_assert(sizeof(FST_MonsterKindIdBlackList) == 0x000010, "Wrong size on FST_MonsterKindIdBlackList");
static_assert(offsetof(FST_MonsterKindIdBlackList, KindId) == 0x000008, "Member 'FST_MonsterKindIdBlackList::KindId' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GameplayEffectTable
// 0x0008 (0x0010 - 0x0008)
struct FST_GameplayEffectTable final : public FTableRowBase
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_GameplayEffectTable) == 0x000008, "Wrong alignment on FST_GameplayEffectTable");
static_assert(sizeof(FST_GameplayEffectTable) == 0x000010, "Wrong size on FST_GameplayEffectTable");
static_assert(offsetof(FST_GameplayEffectTable, GameplayEffectClass) == 0x000008, "Member 'FST_GameplayEffectTable::GameplayEffectClass' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GameProgressTableInfo
// 0x0028 (0x0030 - 0x0008)
struct FST_GameProgressTableInfo final : public FTableRowBase
{
public:
	bool                                          IsPauseWorldTime;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hour;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAddProgressType                              AddProgressType;                                   // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddProgressClearNum;                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ProgressData;                                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_GameProgressTableInfo) == 0x000008, "Wrong alignment on FST_GameProgressTableInfo");
static_assert(sizeof(FST_GameProgressTableInfo) == 0x000030, "Wrong size on FST_GameProgressTableInfo");
static_assert(offsetof(FST_GameProgressTableInfo, IsPauseWorldTime) == 0x000008, "Member 'FST_GameProgressTableInfo::IsPauseWorldTime' has a wrong offset!");
static_assert(offsetof(FST_GameProgressTableInfo, Hour) == 0x00000C, "Member 'FST_GameProgressTableInfo::Hour' has a wrong offset!");
static_assert(offsetof(FST_GameProgressTableInfo, Minute) == 0x000010, "Member 'FST_GameProgressTableInfo::Minute' has a wrong offset!");
static_assert(offsetof(FST_GameProgressTableInfo, AddProgressType) == 0x000014, "Member 'FST_GameProgressTableInfo::AddProgressType' has a wrong offset!");
static_assert(offsetof(FST_GameProgressTableInfo, AddProgressClearNum) == 0x000018, "Member 'FST_GameProgressTableInfo::AddProgressClearNum' has a wrong offset!");
static_assert(offsetof(FST_GameProgressTableInfo, ProgressData) == 0x000020, "Member 'FST_GameProgressTableInfo::ProgressData' has a wrong offset!");

// ScriptStruct DarwinGame.UIOneShotWidgetClass
// 0x0030 (0x0030 - 0x0000)
struct FUIOneShotWidgetClass final
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIOneShotWidgetClass) == 0x000008, "Wrong alignment on FUIOneShotWidgetClass");
static_assert(sizeof(FUIOneShotWidgetClass) == 0x000030, "Wrong size on FUIOneShotWidgetClass");
static_assert(offsetof(FUIOneShotWidgetClass, Class) == 0x000000, "Member 'FUIOneShotWidgetClass::Class' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FlagSpawnInfo
// 0x0008 (0x0038 - 0x0030)
struct FST_FlagSpawnInfo final : public FST_GameScriptSpawnInfoBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_FlagSpawnInfo) == 0x000008, "Wrong alignment on FST_FlagSpawnInfo");
static_assert(sizeof(FST_FlagSpawnInfo) == 0x000038, "Wrong size on FST_FlagSpawnInfo");

// ScriptStruct DarwinGame.GameScriptTableList
// 0x0050 (0x0050 - 0x0000)
struct FGameScriptTableList final
{
public:
	TMap<class FString, struct FST_GameScriptTable> Map;                                               // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameScriptTableList) == 0x000008, "Wrong alignment on FGameScriptTableList");
static_assert(sizeof(FGameScriptTableList) == 0x000050, "Wrong size on FGameScriptTableList");
static_assert(offsetof(FGameScriptTableList, Map) == 0x000000, "Member 'FGameScriptTableList::Map' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DebugEventRectInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x04) FST_DebugEventRectInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DebugEventRectInfo) == 0x000004, "Wrong alignment on FST_DebugEventRectInfo");
static_assert(sizeof(FST_DebugEventRectInfo) == 0x000030, "Wrong size on FST_DebugEventRectInfo");

// ScriptStruct DarwinGame.EditGuestData
// 0x0050 (0x0050 - 0x0000)
struct FEditGuestData final
{
public:
	TMap<int32, struct FEditGuestMonsterData>     PreEditMonsterMap;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditGuestData) == 0x000008, "Wrong alignment on FEditGuestData");
static_assert(sizeof(FEditGuestData) == 0x000050, "Wrong size on FEditGuestData");
static_assert(offsetof(FEditGuestData, PreEditMonsterMap) == 0x000000, "Member 'FEditGuestData::PreEditMonsterMap' has a wrong offset!");

// ScriptStruct DarwinGame.GuestEditOption
// 0x0002 (0x0002 - 0x0000)
struct FGuestEditOption final
{
public:
	bool                                          bRequestSpawn;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepPercentageHPandMP;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuestEditOption) == 0x000001, "Wrong alignment on FGuestEditOption");
static_assert(sizeof(FGuestEditOption) == 0x000002, "Wrong size on FGuestEditOption");
static_assert(offsetof(FGuestEditOption, bRequestSpawn) == 0x000000, "Member 'FGuestEditOption::bRequestSpawn' has a wrong offset!");
static_assert(offsetof(FGuestEditOption, bKeepPercentageHPandMP) == 0x000001, "Member 'FGuestEditOption::bKeepPercentageHPandMP' has a wrong offset!");

// ScriptStruct DarwinGame.EventStruct
// 0x0020 (0x0020 - 0x0000)
struct FEventStruct final : public FReactionEventBaseStruct
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectEffectionEnum                          Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsProgress;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventStruct) == 0x000008, "Wrong alignment on FEventStruct");
static_assert(sizeof(FEventStruct) == 0x000020, "Wrong size on FEventStruct");
static_assert(offsetof(FEventStruct, Instigator) == 0x000000, "Member 'FEventStruct::Instigator' has a wrong offset!");
static_assert(offsetof(FEventStruct, EventID) == 0x000008, "Member 'FEventStruct::EventID' has a wrong offset!");
static_assert(offsetof(FEventStruct, Type) == 0x000018, "Member 'FEventStruct::Type' has a wrong offset!");
static_assert(offsetof(FEventStruct, IsProgress) == 0x000019, "Member 'FEventStruct::IsProgress' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Hate
// 0x0018 (0x0018 - 0x0000)
struct FST_Hate final
{
public:
	class AGPACharacter*                          Owner;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_Hate) == 0x000008, "Wrong alignment on FST_Hate");
static_assert(sizeof(FST_Hate) == 0x000018, "Wrong size on FST_Hate");
static_assert(offsetof(FST_Hate, Owner) == 0x000000, "Member 'FST_Hate::Owner' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIUtilityIconeResource
// 0x0008 (0x0010 - 0x0008)
struct FST_UIUtilityIconeResource final : public FTableRowBase
{
public:
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIUtilityIconeResource) == 0x000008, "Wrong alignment on FST_UIUtilityIconeResource");
static_assert(sizeof(FST_UIUtilityIconeResource) == 0x000010, "Wrong size on FST_UIUtilityIconeResource");
static_assert(offsetof(FST_UIUtilityIconeResource, Texture) == 0x000008, "Member 'FST_UIUtilityIconeResource::Texture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_IndoorData
// 0x000C (0x000C - 0x0000)
struct FST_IndoorData final
{
public:
	class FName                                   IndoorID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndoorHierarchyType                          IndoorHierarchyType;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndoorType                                   IndoorType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_IndoorData) == 0x000004, "Wrong alignment on FST_IndoorData");
static_assert(sizeof(FST_IndoorData) == 0x00000C, "Wrong size on FST_IndoorData");
static_assert(offsetof(FST_IndoorData, IndoorID) == 0x000000, "Member 'FST_IndoorData::IndoorID' has a wrong offset!");
static_assert(offsetof(FST_IndoorData, IndoorHierarchyType) == 0x000008, "Member 'FST_IndoorData::IndoorHierarchyType' has a wrong offset!");
static_assert(offsetof(FST_IndoorData, IndoorType) == 0x000009, "Member 'FST_IndoorData::IndoorType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_InteractionDataTable
// 0x0030 (0x0038 - 0x0008)
struct FST_InteractionDataTable final : public FTableRowBase
{
public:
	float                                         SearchRadius;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchAngle;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepDistance;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalAimDistance;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialAimDistance;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAngle;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAssistScreenRate;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractContactRadius;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractSearchRadius;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCSearchDistance;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCSearchAngle;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_InteractionDataTable) == 0x000008, "Wrong alignment on FST_InteractionDataTable");
static_assert(sizeof(FST_InteractionDataTable) == 0x000038, "Wrong size on FST_InteractionDataTable");
static_assert(offsetof(FST_InteractionDataTable, SearchRadius) == 0x000008, "Member 'FST_InteractionDataTable::SearchRadius' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, SearchAngle) == 0x00000C, "Member 'FST_InteractionDataTable::SearchAngle' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, KeepDistance) == 0x000010, "Member 'FST_InteractionDataTable::KeepDistance' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, NormalAimDistance) == 0x000014, "Member 'FST_InteractionDataTable::NormalAimDistance' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, SpecialAimDistance) == 0x000018, "Member 'FST_InteractionDataTable::SpecialAimDistance' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, AimAngle) == 0x00001C, "Member 'FST_InteractionDataTable::AimAngle' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, AimAssistScreenRate) == 0x000020, "Member 'FST_InteractionDataTable::AimAssistScreenRate' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, InteractContactRadius) == 0x000024, "Member 'FST_InteractionDataTable::InteractContactRadius' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, InteractSearchRadius) == 0x000028, "Member 'FST_InteractionDataTable::InteractSearchRadius' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, NPCSearchDistance) == 0x00002C, "Member 'FST_InteractionDataTable::NPCSearchDistance' has a wrong offset!");
static_assert(offsetof(FST_InteractionDataTable, NPCSearchAngle) == 0x000030, "Member 'FST_InteractionDataTable::NPCSearchAngle' has a wrong offset!");

// ScriptStruct DarwinGame.ST_KindParameterDataTable
// 0x0200 (0x0208 - 0x0008)
struct FST_KindParameterDataTable final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   OriginKindID;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKindEffectID                                 EffectKindID;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELineageCategory                              LineageCategory;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFlyType;                                        // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpGrowthType;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             InitialStatus;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             MaxStatus;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FST_Status                             GrowthType;                                        // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ActionDefaultID;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionDefaultExeRate;                              // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_CharacterExeActionInfo>     ActionAlwaysInfos;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_CharacterActionInfo>        ActionInfos;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeadlyActionID;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FeatureAlwaysID;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_CharacterFeatureInfo>       FeatureInfos;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Resistance;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlow;                                             // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHaveSuperArmor;                                   // 0x00D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxStun;                                           // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_DropItemInfo>               DropItemInfos;                                     // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CoinFeatureMonster;                                // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinDropRate;                                      // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Name50;                                            // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kind;                                              // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectSizeID                                 SizeID;                                            // 0x010C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalSight;                                       // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NightSight;                                        // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GazeTime;                                          // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoreHearing;                                       // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalHearing;                                     // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HearingRate;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingInterval;                                   // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurprisePopRange;                                  // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EcologicalAreaRange;                               // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleAreaRange;                                   // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionCycleEnemy;                                  // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionCycleFriend;                                 // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EscapeProbability;                                 // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EscapeCountMax;                                    // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FormationSize;                                     // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTakeDistance;                                   // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTakeDistance;                                   // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SideDistance;                                      // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearAwayDistance;                                  // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearStopDistance;                                  // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBackStepType                                 BackStepType;                                      // 0x0170(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_LinkData                           FieldLinkData;                                     // 0x0178(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EFieldTerrainType>                     DisabledTerrainTypes;                              // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArtifactCarryingCapacity;                          // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArtifactDropOffRate;                               // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MonsterSenseLotteryWeights;                        // 0x01C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropGoldCountBase;                                 // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ConfirmCustomPartsRate;                            // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalPartsRate;                               // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalMaterialRate;                            // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisionHeightType                             VisionHeightType;                                  // 0x01F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisionSightType                              VisionSightType;                                   // 0x01F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotRequireGround;                                 // 0x01FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisionColorType                              VisionColorType;                                   // 0x01FB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayMonsterDict;                               // 0x01FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MonsterDictSort;                                   // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfinitelyAppear;                                 // 0x0204(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_KindParameterDataTable) == 0x000008, "Wrong alignment on FST_KindParameterDataTable");
static_assert(sizeof(FST_KindParameterDataTable) == 0x000208, "Wrong size on FST_KindParameterDataTable");
static_assert(offsetof(FST_KindParameterDataTable, Name) == 0x000008, "Member 'FST_KindParameterDataTable::Name' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, OriginKindID) == 0x000020, "Member 'FST_KindParameterDataTable::OriginKindID' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, EffectKindID) == 0x000028, "Member 'FST_KindParameterDataTable::EffectKindID' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, LineageCategory) == 0x000029, "Member 'FST_KindParameterDataTable::LineageCategory' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, bIsFlyType) == 0x00002A, "Member 'FST_KindParameterDataTable::bIsFlyType' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ExpGrowthType) == 0x00002C, "Member 'FST_KindParameterDataTable::ExpGrowthType' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, InitialStatus) == 0x000030, "Member 'FST_KindParameterDataTable::InitialStatus' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, MaxStatus) == 0x000048, "Member 'FST_KindParameterDataTable::MaxStatus' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, GrowthType) == 0x000060, "Member 'FST_KindParameterDataTable::GrowthType' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ActionDefaultID) == 0x000078, "Member 'FST_KindParameterDataTable::ActionDefaultID' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ActionDefaultExeRate) == 0x000080, "Member 'FST_KindParameterDataTable::ActionDefaultExeRate' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ActionAlwaysInfos) == 0x000088, "Member 'FST_KindParameterDataTable::ActionAlwaysInfos' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ActionInfos) == 0x000098, "Member 'FST_KindParameterDataTable::ActionInfos' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, DeadlyActionID) == 0x0000A8, "Member 'FST_KindParameterDataTable::DeadlyActionID' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, FeatureAlwaysID) == 0x0000B0, "Member 'FST_KindParameterDataTable::FeatureAlwaysID' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, FeatureInfos) == 0x0000B8, "Member 'FST_KindParameterDataTable::FeatureInfos' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, Resistance) == 0x0000C8, "Member 'FST_KindParameterDataTable::Resistance' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, bBlow) == 0x0000D8, "Member 'FST_KindParameterDataTable::bBlow' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, bHaveSuperArmor) == 0x0000D9, "Member 'FST_KindParameterDataTable::bHaveSuperArmor' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, MaxStun) == 0x0000DC, "Member 'FST_KindParameterDataTable::MaxStun' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, DropItemInfos) == 0x0000E0, "Member 'FST_KindParameterDataTable::DropItemInfos' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, CoinFeatureMonster) == 0x0000F0, "Member 'FST_KindParameterDataTable::CoinFeatureMonster' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, CoinDropRate) == 0x000100, "Member 'FST_KindParameterDataTable::CoinDropRate' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, Name50) == 0x000104, "Member 'FST_KindParameterDataTable::Name50' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, Kind) == 0x000108, "Member 'FST_KindParameterDataTable::Kind' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, SizeID) == 0x00010C, "Member 'FST_KindParameterDataTable::SizeID' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, Weight) == 0x000110, "Member 'FST_KindParameterDataTable::Weight' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, NormalSight) == 0x000114, "Member 'FST_KindParameterDataTable::NormalSight' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, NightSight) == 0x000118, "Member 'FST_KindParameterDataTable::NightSight' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, GazeTime) == 0x00011C, "Member 'FST_KindParameterDataTable::GazeTime' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, CoreHearing) == 0x000120, "Member 'FST_KindParameterDataTable::CoreHearing' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, NormalHearing) == 0x000124, "Member 'FST_KindParameterDataTable::NormalHearing' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, HearingRate) == 0x000128, "Member 'FST_KindParameterDataTable::HearingRate' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, HearingInterval) == 0x00012C, "Member 'FST_KindParameterDataTable::HearingInterval' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, SurprisePopRange) == 0x000130, "Member 'FST_KindParameterDataTable::SurprisePopRange' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, EcologicalAreaRange) == 0x000134, "Member 'FST_KindParameterDataTable::EcologicalAreaRange' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, BattleAreaRange) == 0x000138, "Member 'FST_KindParameterDataTable::BattleAreaRange' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ActionCycleEnemy) == 0x00013C, "Member 'FST_KindParameterDataTable::ActionCycleEnemy' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ActionCycleFriend) == 0x000140, "Member 'FST_KindParameterDataTable::ActionCycleFriend' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, EscapeProbability) == 0x000144, "Member 'FST_KindParameterDataTable::EscapeProbability' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, EscapeCountMax) == 0x000148, "Member 'FST_KindParameterDataTable::EscapeCountMax' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, FormationSize) == 0x00014C, "Member 'FST_KindParameterDataTable::FormationSize' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, MinTakeDistance) == 0x000150, "Member 'FST_KindParameterDataTable::MinTakeDistance' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, MaxTakeDistance) == 0x000154, "Member 'FST_KindParameterDataTable::MaxTakeDistance' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, SideDistance) == 0x000158, "Member 'FST_KindParameterDataTable::SideDistance' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, NearAwayDistance) == 0x000168, "Member 'FST_KindParameterDataTable::NearAwayDistance' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, NearStopDistance) == 0x00016C, "Member 'FST_KindParameterDataTable::NearStopDistance' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, BackStepType) == 0x000170, "Member 'FST_KindParameterDataTable::BackStepType' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, FieldLinkData) == 0x000178, "Member 'FST_KindParameterDataTable::FieldLinkData' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, DisabledTerrainTypes) == 0x0001B0, "Member 'FST_KindParameterDataTable::DisabledTerrainTypes' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ArtifactCarryingCapacity) == 0x0001C0, "Member 'FST_KindParameterDataTable::ArtifactCarryingCapacity' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ArtifactDropOffRate) == 0x0001C4, "Member 'FST_KindParameterDataTable::ArtifactDropOffRate' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, MonsterSenseLotteryWeights) == 0x0001C8, "Member 'FST_KindParameterDataTable::MonsterSenseLotteryWeights' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, DropGoldCountBase) == 0x0001D8, "Member 'FST_KindParameterDataTable::DropGoldCountBase' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, ConfirmCustomPartsRate) == 0x0001E0, "Member 'FST_KindParameterDataTable::ConfirmCustomPartsRate' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, AdditionalPartsRate) == 0x0001F0, "Member 'FST_KindParameterDataTable::AdditionalPartsRate' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, AdditionalMaterialRate) == 0x0001F4, "Member 'FST_KindParameterDataTable::AdditionalMaterialRate' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, VisionHeightType) == 0x0001F8, "Member 'FST_KindParameterDataTable::VisionHeightType' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, VisionSightType) == 0x0001F9, "Member 'FST_KindParameterDataTable::VisionSightType' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, bNotRequireGround) == 0x0001FA, "Member 'FST_KindParameterDataTable::bNotRequireGround' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, VisionColorType) == 0x0001FB, "Member 'FST_KindParameterDataTable::VisionColorType' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, bDisplayMonsterDict) == 0x0001FC, "Member 'FST_KindParameterDataTable::bDisplayMonsterDict' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, MonsterDictSort) == 0x000200, "Member 'FST_KindParameterDataTable::MonsterDictSort' has a wrong offset!");
static_assert(offsetof(FST_KindParameterDataTable, bInfinitelyAppear) == 0x000204, "Member 'FST_KindParameterDataTable::bInfinitelyAppear' has a wrong offset!");

// ScriptStruct DarwinGame.CustomPartsLotteryRate
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCustomPartsLotteryRate final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomPartsLotteryRate) == 0x000008, "Wrong alignment on FCustomPartsLotteryRate");
static_assert(sizeof(FCustomPartsLotteryRate) == 0x000018, "Wrong size on FCustomPartsLotteryRate");

// ScriptStruct DarwinGame.AreaPointInfo
// 0x0008 (0x0010 - 0x0008)
struct FAreaPointInfo final : public FTableRowBase
{
public:
	int32                                         AreaPointNum;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELifeCycleTypeEnum                            LifeBehavior;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaPointInfo) == 0x000008, "Wrong alignment on FAreaPointInfo");
static_assert(sizeof(FAreaPointInfo) == 0x000010, "Wrong size on FAreaPointInfo");
static_assert(offsetof(FAreaPointInfo, AreaPointNum) == 0x000008, "Member 'FAreaPointInfo::AreaPointNum' has a wrong offset!");
static_assert(offsetof(FAreaPointInfo, LifeBehavior) == 0x00000C, "Member 'FAreaPointInfo::LifeBehavior' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GaugeData
// 0x0018 (0x0018 - 0x0000)
struct FST_GaugeData final
{
public:
	class UImage*                                 Gauge;                                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_GaugeData) == 0x000008, "Wrong alignment on FST_GaugeData");
static_assert(sizeof(FST_GaugeData) == 0x000018, "Wrong size on FST_GaugeData");
static_assert(offsetof(FST_GaugeData, Gauge) == 0x000000, "Member 'FST_GaugeData::Gauge' has a wrong offset!");
static_assert(offsetof(FST_GaugeData, Texture) == 0x000008, "Member 'FST_GaugeData::Texture' has a wrong offset!");
static_assert(offsetof(FST_GaugeData, Name) == 0x000010, "Member 'FST_GaugeData::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LogDataTable
// 0x0048 (0x0050 - 0x0008)
struct FST_LogDataTable final : public FTableRowBase
{
public:
	ELogDataType                                  LogType;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogDataNumberType                            NumberType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ColorTag;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogDataPanelColor                            PanelColor;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogDataSpecialWaitType                       SpecialWaitType;                                   // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             ActionTexture;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableSglList;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnableIndefSgl;                                  // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_LogDataTable) == 0x000008, "Wrong alignment on FST_LogDataTable");
static_assert(sizeof(FST_LogDataTable) == 0x000050, "Wrong size on FST_LogDataTable");
static_assert(offsetof(FST_LogDataTable, LogType) == 0x000008, "Member 'FST_LogDataTable::LogType' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, NumberType) == 0x000009, "Member 'FST_LogDataTable::NumberType' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, ColorTag) == 0x000010, "Member 'FST_LogDataTable::ColorTag' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, PanelColor) == 0x000020, "Member 'FST_LogDataTable::PanelColor' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, SpecialWaitType) == 0x000021, "Member 'FST_LogDataTable::SpecialWaitType' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, Message) == 0x000028, "Member 'FST_LogDataTable::Message' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, ActionTexture) == 0x000040, "Member 'FST_LogDataTable::ActionTexture' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, IsEnableSglList) == 0x000048, "Member 'FST_LogDataTable::IsEnableSglList' has a wrong offset!");
static_assert(offsetof(FST_LogDataTable, IsEnableIndefSgl) == 0x000049, "Member 'FST_LogDataTable::IsEnableIndefSgl' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ReceptionUnlockData
// 0x0050 (0x0050 - 0x0000)
struct FST_ReceptionUnlockData final
{
public:
	TMap<class FName, bool>                       FlagSet;                                           // 0x0000(0x0050)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ReceptionUnlockData) == 0x000008, "Wrong alignment on FST_ReceptionUnlockData");
static_assert(sizeof(FST_ReceptionUnlockData) == 0x000050, "Wrong size on FST_ReceptionUnlockData");
static_assert(offsetof(FST_ReceptionUnlockData, FlagSet) == 0x000000, "Member 'FST_ReceptionUnlockData::FlagSet' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LookAtParams
// 0x0018 (0x0018 - 0x0000)
struct FST_LookAtParams final
{
public:
	float                                         AnglearVelocity;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVertical;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampHorizontal;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentLocation;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LookAtParams) == 0x000004, "Wrong alignment on FST_LookAtParams");
static_assert(sizeof(FST_LookAtParams) == 0x000018, "Wrong size on FST_LookAtParams");
static_assert(offsetof(FST_LookAtParams, AnglearVelocity) == 0x000000, "Member 'FST_LookAtParams::AnglearVelocity' has a wrong offset!");
static_assert(offsetof(FST_LookAtParams, ClampVertical) == 0x000004, "Member 'FST_LookAtParams::ClampVertical' has a wrong offset!");
static_assert(offsetof(FST_LookAtParams, ClampHorizontal) == 0x000008, "Member 'FST_LookAtParams::ClampHorizontal' has a wrong offset!");
static_assert(offsetof(FST_LookAtParams, CurrentLocation) == 0x00000C, "Member 'FST_LookAtParams::CurrentLocation' has a wrong offset!");

// ScriptStruct DarwinGame.LotteryAttributeParam
// 0x0018 (0x0018 - 0x0000)
struct FLotteryAttributeParam final
{
public:
	class FName                                   ResistID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EResistanceType>                       Types;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLotteryAttributeParam) == 0x000008, "Wrong alignment on FLotteryAttributeParam");
static_assert(sizeof(FLotteryAttributeParam) == 0x000018, "Wrong size on FLotteryAttributeParam");
static_assert(offsetof(FLotteryAttributeParam, ResistID) == 0x000000, "Member 'FLotteryAttributeParam::ResistID' has a wrong offset!");
static_assert(offsetof(FLotteryAttributeParam, Types) == 0x000008, "Member 'FLotteryAttributeParam::Types' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonGroupBattleID
// 0x0020 (0x0028 - 0x0008)
struct FST_DungeonGroupBattleID final : public FTableRowBase
{
public:
	int32                                         LotteryRate;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BattleIDs;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DungeonDifficulty;                                 // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DungeonGroupBattleID) == 0x000008, "Wrong alignment on FST_DungeonGroupBattleID");
static_assert(sizeof(FST_DungeonGroupBattleID) == 0x000028, "Wrong size on FST_DungeonGroupBattleID");
static_assert(offsetof(FST_DungeonGroupBattleID, LotteryRate) == 0x000008, "Member 'FST_DungeonGroupBattleID::LotteryRate' has a wrong offset!");
static_assert(offsetof(FST_DungeonGroupBattleID, BattleIDs) == 0x000010, "Member 'FST_DungeonGroupBattleID::BattleIDs' has a wrong offset!");
static_assert(offsetof(FST_DungeonGroupBattleID, AreaType) == 0x000020, "Member 'FST_DungeonGroupBattleID::AreaType' has a wrong offset!");
static_assert(offsetof(FST_DungeonGroupBattleID, DungeonDifficulty) == 0x000024, "Member 'FST_DungeonGroupBattleID::DungeonDifficulty' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DungeonToughMonsterBattleID
// 0x0018 (0x0020 - 0x0008)
struct FST_DungeonToughMonsterBattleID final : public FTableRowBase
{
public:
	struct FST_LotteryBattleID                    BattleIdData;                                      // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DungeonDifficulty;                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_DungeonToughMonsterBattleID) == 0x000008, "Wrong alignment on FST_DungeonToughMonsterBattleID");
static_assert(sizeof(FST_DungeonToughMonsterBattleID) == 0x000020, "Wrong size on FST_DungeonToughMonsterBattleID");
static_assert(offsetof(FST_DungeonToughMonsterBattleID, BattleIdData) == 0x000008, "Member 'FST_DungeonToughMonsterBattleID::BattleIdData' has a wrong offset!");
static_assert(offsetof(FST_DungeonToughMonsterBattleID, AreaType) == 0x000014, "Member 'FST_DungeonToughMonsterBattleID::AreaType' has a wrong offset!");
static_assert(offsetof(FST_DungeonToughMonsterBattleID, DungeonDifficulty) == 0x000018, "Member 'FST_DungeonToughMonsterBattleID::DungeonDifficulty' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BranchParametor
// 0x0020 (0x0020 - 0x0000)
struct FST_BranchParametor final
{
public:
	int32                                         FlagNo;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchParametorType                          TargetType;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchParametorJudge                         Judge;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BranchParametor) == 0x000008, "Wrong alignment on FST_BranchParametor");
static_assert(sizeof(FST_BranchParametor) == 0x000020, "Wrong size on FST_BranchParametor");
static_assert(offsetof(FST_BranchParametor, FlagNo) == 0x000000, "Member 'FST_BranchParametor::FlagNo' has a wrong offset!");
static_assert(offsetof(FST_BranchParametor, TargetType) == 0x000004, "Member 'FST_BranchParametor::TargetType' has a wrong offset!");
static_assert(offsetof(FST_BranchParametor, TargetName) == 0x000008, "Member 'FST_BranchParametor::TargetName' has a wrong offset!");
static_assert(offsetof(FST_BranchParametor, Judge) == 0x000018, "Member 'FST_BranchParametor::Judge' has a wrong offset!");
static_assert(offsetof(FST_BranchParametor, Value) == 0x00001C, "Member 'FST_BranchParametor::Value' has a wrong offset!");

// ScriptStruct DarwinGame.MessageIdInfo
// 0x0048 (0x0048 - 0x0000)
struct FMessageIdInfo final
{
public:
	class FString                                 src_id;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextTimeType                                 time_type;                                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextSubcategoryType                          sub_category_type;                                 // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextPCType                                   pc_type;                                           // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextWeatherType                              weather_type;                                      // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 talk_num;                                          // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is_serifu;                                         // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         page_no;                                           // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 name_base;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextQuestType                                quest_state;                                       // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJoukenType                               jouken;                                            // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMessageIdInfo) == 0x000008, "Wrong alignment on FMessageIdInfo");
static_assert(sizeof(FMessageIdInfo) == 0x000048, "Wrong size on FMessageIdInfo");
static_assert(offsetof(FMessageIdInfo, src_id) == 0x000000, "Member 'FMessageIdInfo::src_id' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, time_type) == 0x000010, "Member 'FMessageIdInfo::time_type' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, sub_category_type) == 0x000011, "Member 'FMessageIdInfo::sub_category_type' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, pc_type) == 0x000012, "Member 'FMessageIdInfo::pc_type' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, weather_type) == 0x000013, "Member 'FMessageIdInfo::weather_type' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, talk_num) == 0x000018, "Member 'FMessageIdInfo::talk_num' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, is_serifu) == 0x000028, "Member 'FMessageIdInfo::is_serifu' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, page_no) == 0x00002C, "Member 'FMessageIdInfo::page_no' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, name_base) == 0x000030, "Member 'FMessageIdInfo::name_base' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, quest_state) == 0x000040, "Member 'FMessageIdInfo::quest_state' has a wrong offset!");
static_assert(offsetof(FMessageIdInfo, jouken) == 0x000041, "Member 'FMessageIdInfo::jouken' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterActionCycleData
// 0x0010 (0x0018 - 0x0008)
struct FST_MonsterActionCycleData final : public FTableRowBase
{
public:
	TArray<struct FST_MonsterCautionActionData>   CautionAction;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterActionCycleData) == 0x000008, "Wrong alignment on FST_MonsterActionCycleData");
static_assert(sizeof(FST_MonsterActionCycleData) == 0x000018, "Wrong size on FST_MonsterActionCycleData");
static_assert(offsetof(FST_MonsterActionCycleData, CautionAction) == 0x000008, "Member 'FST_MonsterActionCycleData::CautionAction' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMonsterResource
// 0x0140 (0x0148 - 0x0008)
struct FST_UIMonsterResource : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              IconS;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceTexture;                                       // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceTexture_DefaultParts;                          // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FaceTexture_CustomMaterial;                        // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM;                                             // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM_DefaultParts;                                // 0x00D0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM_CustomMaterial;                              // 0x00F8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CoinIcon;                                          // 0x0120(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMonsterResource) == 0x000008, "Wrong alignment on FST_UIMonsterResource");
static_assert(sizeof(FST_UIMonsterResource) == 0x000148, "Wrong size on FST_UIMonsterResource");
static_assert(offsetof(FST_UIMonsterResource, IconS) == 0x000008, "Member 'FST_UIMonsterResource::IconS' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterResource, FaceTexture) == 0x000030, "Member 'FST_UIMonsterResource::FaceTexture' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterResource, FaceTexture_DefaultParts) == 0x000058, "Member 'FST_UIMonsterResource::FaceTexture_DefaultParts' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterResource, FaceTexture_CustomMaterial) == 0x000080, "Member 'FST_UIMonsterResource::FaceTexture_CustomMaterial' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterResource, IconM) == 0x0000A8, "Member 'FST_UIMonsterResource::IconM' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterResource, IconM_DefaultParts) == 0x0000D0, "Member 'FST_UIMonsterResource::IconM_DefaultParts' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterResource, IconM_CustomMaterial) == 0x0000F8, "Member 'FST_UIMonsterResource::IconM_CustomMaterial' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterResource, CoinIcon) == 0x000120, "Member 'FST_UIMonsterResource::CoinIcon' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UISpecialMonsterResource
// 0x0050 (0x0198 - 0x0148)
struct FST_UISpecialMonsterResource final : public FST_UIMonsterResource
{
public:
	TSoftObjectPtr<class UTexture2D>              FaceTexture_CustomPartsSpecial;                    // 0x0148(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconM_CustomPartsSpecial;                          // 0x0170(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UISpecialMonsterResource) == 0x000008, "Wrong alignment on FST_UISpecialMonsterResource");
static_assert(sizeof(FST_UISpecialMonsterResource) == 0x000198, "Wrong size on FST_UISpecialMonsterResource");
static_assert(offsetof(FST_UISpecialMonsterResource, FaceTexture_CustomPartsSpecial) == 0x000148, "Member 'FST_UISpecialMonsterResource::FaceTexture_CustomPartsSpecial' has a wrong offset!");
static_assert(offsetof(FST_UISpecialMonsterResource, IconM_CustomPartsSpecial) == 0x000170, "Member 'FST_UISpecialMonsterResource::IconM_CustomPartsSpecial' has a wrong offset!");

// ScriptStruct DarwinGame.BehaviorContext
// 0x0003 (0x0003 - 0x0000)
struct FBehaviorContext final
{
public:
	EMonsterBehavior                              Behavior;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterService                               service;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterService                               DeactivationService;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBehaviorContext) == 0x000001, "Wrong alignment on FBehaviorContext");
static_assert(sizeof(FBehaviorContext) == 0x000003, "Wrong size on FBehaviorContext");
static_assert(offsetof(FBehaviorContext, Behavior) == 0x000000, "Member 'FBehaviorContext::Behavior' has a wrong offset!");
static_assert(offsetof(FBehaviorContext, service) == 0x000001, "Member 'FBehaviorContext::service' has a wrong offset!");
static_assert(offsetof(FBehaviorContext, DeactivationService) == 0x000002, "Member 'FBehaviorContext::DeactivationService' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossAvoidanceInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_BossAvoidanceInfo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossAvoidanceInfo) == 0x000004, "Wrong alignment on FST_BossAvoidanceInfo");
static_assert(sizeof(FST_BossAvoidanceInfo) == 0x000010, "Wrong size on FST_BossAvoidanceInfo");
static_assert(offsetof(FST_BossAvoidanceInfo, Location) == 0x000000, "Member 'FST_BossAvoidanceInfo::Location' has a wrong offset!");
static_assert(offsetof(FST_BossAvoidanceInfo, Radius) == 0x00000C, "Member 'FST_BossAvoidanceInfo::Radius' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterTraceLocationData
// 0x0010 (0x0018 - 0x0008)
struct FST_MonsterTraceLocationData final : public FTableRowBase
{
public:
	TArray<float>                                 Param;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterTraceLocationData) == 0x000008, "Wrong alignment on FST_MonsterTraceLocationData");
static_assert(sizeof(FST_MonsterTraceLocationData) == 0x000018, "Wrong size on FST_MonsterTraceLocationData");
static_assert(offsetof(FST_MonsterTraceLocationData, Param) == 0x000008, "Member 'FST_MonsterTraceLocationData::Param' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCEventAiMovePoints
// 0x0050 (0x0058 - 0x0008)
struct FST_NPCEventAiMovePoints final : public FTableRowBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRange;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlagName;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCAiMovedState                              MovedState;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndFlagName;                                       // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventTalkID;                                       // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewEmoteID;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventFukidashiID;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCEventAiMovePoints) == 0x000008, "Wrong alignment on FST_NPCEventAiMovePoints");
static_assert(sizeof(FST_NPCEventAiMovePoints) == 0x000058, "Wrong size on FST_NPCEventAiMovePoints");
static_assert(offsetof(FST_NPCEventAiMovePoints, Location) == 0x000008, "Member 'FST_NPCEventAiMovePoints::Location' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, Rotator) == 0x000014, "Member 'FST_NPCEventAiMovePoints::Rotator' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, Range) == 0x000020, "Member 'FST_NPCEventAiMovePoints::Range' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, OutRange) == 0x000024, "Member 'FST_NPCEventAiMovePoints::OutRange' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, StartFlagName) == 0x000028, "Member 'FST_NPCEventAiMovePoints::StartFlagName' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, Speed) == 0x000030, "Member 'FST_NPCEventAiMovePoints::Speed' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, Acceleration) == 0x000034, "Member 'FST_NPCEventAiMovePoints::Acceleration' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, MovedState) == 0x000038, "Member 'FST_NPCEventAiMovePoints::MovedState' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, EndFlagName) == 0x00003C, "Member 'FST_NPCEventAiMovePoints::EndFlagName' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, EventTalkID) == 0x000044, "Member 'FST_NPCEventAiMovePoints::EventTalkID' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, NewEmoteID) == 0x00004C, "Member 'FST_NPCEventAiMovePoints::NewEmoteID' has a wrong offset!");
static_assert(offsetof(FST_NPCEventAiMovePoints, EventFukidashiID) == 0x000050, "Member 'FST_NPCEventAiMovePoints::EventFukidashiID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterCommonData
// 0x00B0 (0x00B8 - 0x0008)
struct FST_MonsterCommonData final : public FTableRowBase
{
public:
	float                                         RelocationDistInTrace;                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelocationDistInBattle;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelocationDistInBattleToBoss;                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JoinMoveByRelocationTimer;                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelocationAngle;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelocationHeight;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RejectRelocationDist;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelocationDist;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceNotToDropArtifacts;                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommandUIPopTime;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeripheralVisionAngle;                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseSightSeconds;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelDifference;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAwayDistance;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LookAwayProbAlly;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LookAwayProbEnemy;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LookAwayProbDead;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceWaitingGestureMax;                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceWaitingGestureTime;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceWaitingGestureStopInBlendOutTime;             // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidanceStaminaMax;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvoidanceStaminaRecorveryValue;                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidanceStaminaRecorveryTime;                     // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseAvoidanceStaminaValue_AactionCycleRetreat;      // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterLandingWarpDelayTime;                         // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingDamageRange;                                // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalEscapeTime;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallingEnemyRange;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RivalTeamTerritoryRadius;                          // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HyenaSpawnRadius;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RivalTeamEscapeTime;                               // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAttentionRateByDropArtifact;                    // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAttentionPoint;                                 // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAlertRateByPlayerThousandArtifact;              // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAlertRateByPlayerMilionArtifact;                // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAlertRateByDropArtifact;                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAlertRateCoefficient;                           // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAlertPoint;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAlertLevel;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeMonsterFightingAreaRange;                   // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevengeBattleAddHatePoint;                         // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TryReviveAddHatePoint;                             // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeepHatePointOnlyStalker;                          // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterCommonData) == 0x000008, "Wrong alignment on FST_MonsterCommonData");
static_assert(sizeof(FST_MonsterCommonData) == 0x0000B8, "Wrong size on FST_MonsterCommonData");
static_assert(offsetof(FST_MonsterCommonData, RelocationDistInTrace) == 0x000008, "Member 'FST_MonsterCommonData::RelocationDistInTrace' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RelocationDistInBattle) == 0x00000C, "Member 'FST_MonsterCommonData::RelocationDistInBattle' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RelocationDistInBattleToBoss) == 0x000010, "Member 'FST_MonsterCommonData::RelocationDistInBattleToBoss' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, JoinMoveByRelocationTimer) == 0x000014, "Member 'FST_MonsterCommonData::JoinMoveByRelocationTimer' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RelocationAngle) == 0x000018, "Member 'FST_MonsterCommonData::RelocationAngle' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RelocationHeight) == 0x00001C, "Member 'FST_MonsterCommonData::RelocationHeight' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RejectRelocationDist) == 0x000020, "Member 'FST_MonsterCommonData::RejectRelocationDist' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RelocationDist) == 0x000024, "Member 'FST_MonsterCommonData::RelocationDist' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, DistanceNotToDropArtifacts) == 0x000028, "Member 'FST_MonsterCommonData::DistanceNotToDropArtifacts' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, CommandUIPopTime) == 0x00002C, "Member 'FST_MonsterCommonData::CommandUIPopTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, PeripheralVisionAngle) == 0x000030, "Member 'FST_MonsterCommonData::PeripheralVisionAngle' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, LoseSightSeconds) == 0x000034, "Member 'FST_MonsterCommonData::LoseSightSeconds' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, LevelDifference) == 0x000038, "Member 'FST_MonsterCommonData::LevelDifference' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, LookAwayDistance) == 0x00003C, "Member 'FST_MonsterCommonData::LookAwayDistance' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, LookAwayProbAlly) == 0x000040, "Member 'FST_MonsterCommonData::LookAwayProbAlly' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, LookAwayProbEnemy) == 0x000044, "Member 'FST_MonsterCommonData::LookAwayProbEnemy' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, LookAwayProbDead) == 0x000048, "Member 'FST_MonsterCommonData::LookAwayProbDead' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, TraceWaitingGestureMax) == 0x00004C, "Member 'FST_MonsterCommonData::TraceWaitingGestureMax' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, TraceWaitingGestureTime) == 0x000050, "Member 'FST_MonsterCommonData::TraceWaitingGestureTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, TraceWaitingGestureStopInBlendOutTime) == 0x000054, "Member 'FST_MonsterCommonData::TraceWaitingGestureStopInBlendOutTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AvoidanceStaminaMax) == 0x000058, "Member 'FST_MonsterCommonData::AvoidanceStaminaMax' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AvoidanceStaminaRecorveryValue) == 0x00005C, "Member 'FST_MonsterCommonData::AvoidanceStaminaRecorveryValue' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AvoidanceStaminaRecorveryTime) == 0x000060, "Member 'FST_MonsterCommonData::AvoidanceStaminaRecorveryTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, UseAvoidanceStaminaValue_AactionCycleRetreat) == 0x000064, "Member 'FST_MonsterCommonData::UseAvoidanceStaminaValue_AactionCycleRetreat' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, WaterLandingWarpDelayTime) == 0x000068, "Member 'FST_MonsterCommonData::WaterLandingWarpDelayTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, HearingDamageRange) == 0x00006C, "Member 'FST_MonsterCommonData::HearingDamageRange' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, NormalEscapeTime) == 0x000070, "Member 'FST_MonsterCommonData::NormalEscapeTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, CallingEnemyRange) == 0x000074, "Member 'FST_MonsterCommonData::CallingEnemyRange' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RivalTeamTerritoryRadius) == 0x000078, "Member 'FST_MonsterCommonData::RivalTeamTerritoryRadius' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, HyenaSpawnRadius) == 0x00007C, "Member 'FST_MonsterCommonData::HyenaSpawnRadius' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RivalTeamEscapeTime) == 0x000080, "Member 'FST_MonsterCommonData::RivalTeamEscapeTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AddAttentionRateByDropArtifact) == 0x000084, "Member 'FST_MonsterCommonData::AddAttentionRateByDropArtifact' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, MaxAttentionPoint) == 0x000088, "Member 'FST_MonsterCommonData::MaxAttentionPoint' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AddAlertRateByPlayerThousandArtifact) == 0x00008C, "Member 'FST_MonsterCommonData::AddAlertRateByPlayerThousandArtifact' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AddAlertRateByPlayerMilionArtifact) == 0x000090, "Member 'FST_MonsterCommonData::AddAlertRateByPlayerMilionArtifact' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AddAlertRateByDropArtifact) == 0x000094, "Member 'FST_MonsterCommonData::AddAlertRateByDropArtifact' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, AddAlertRateCoefficient) == 0x000098, "Member 'FST_MonsterCommonData::AddAlertRateCoefficient' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, MaxAlertPoint) == 0x00009C, "Member 'FST_MonsterCommonData::MaxAlertPoint' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, MaxAlertLevel) == 0x0000A0, "Member 'FST_MonsterCommonData::MaxAlertLevel' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RevengeMonsterFightingAreaRange) == 0x0000A4, "Member 'FST_MonsterCommonData::RevengeMonsterFightingAreaRange' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, RevengeBattleAddHatePoint) == 0x0000A8, "Member 'FST_MonsterCommonData::RevengeBattleAddHatePoint' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, TryReviveAddHatePoint) == 0x0000AC, "Member 'FST_MonsterCommonData::TryReviveAddHatePoint' has a wrong offset!");
static_assert(offsetof(FST_MonsterCommonData, KeepHatePointOnlyStalker) == 0x0000B0, "Member 'FST_MonsterCommonData::KeepHatePointOnlyStalker' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterCustomEquipmentData
// 0x0020 (0x0028 - 0x0008)
struct FST_MonsterCustomEquipmentData final : public FTableRowBase
{
public:
	class FName                                   KindId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomEquipmentKind                          CustomEquipmentType;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_MonsterCustomEquipment>     Equipment;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterCustomEquipmentData) == 0x000008, "Wrong alignment on FST_MonsterCustomEquipmentData");
static_assert(sizeof(FST_MonsterCustomEquipmentData) == 0x000028, "Wrong size on FST_MonsterCustomEquipmentData");
static_assert(offsetof(FST_MonsterCustomEquipmentData, KindId) == 0x000008, "Member 'FST_MonsterCustomEquipmentData::KindId' has a wrong offset!");
static_assert(offsetof(FST_MonsterCustomEquipmentData, CustomEquipmentType) == 0x000010, "Member 'FST_MonsterCustomEquipmentData::CustomEquipmentType' has a wrong offset!");
static_assert(offsetof(FST_MonsterCustomEquipmentData, Equipment) == 0x000018, "Member 'FST_MonsterCustomEquipmentData::Equipment' has a wrong offset!");

// ScriptStruct DarwinGame.ST_CustomMonsterMaterial
// 0x00A8 (0x00B0 - 0x0008)
struct FST_CustomMonsterMaterial final : public FTableRowBase
{
public:
	class FName                                   KindId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Element0;                                          // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Element1;                                          // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Element2;                                          // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       Element3;                                          // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CustomMonsterMaterial) == 0x000008, "Wrong alignment on FST_CustomMonsterMaterial");
static_assert(sizeof(FST_CustomMonsterMaterial) == 0x0000B0, "Wrong size on FST_CustomMonsterMaterial");
static_assert(offsetof(FST_CustomMonsterMaterial, KindId) == 0x000008, "Member 'FST_CustomMonsterMaterial::KindId' has a wrong offset!");
static_assert(offsetof(FST_CustomMonsterMaterial, Element0) == 0x000010, "Member 'FST_CustomMonsterMaterial::Element0' has a wrong offset!");
static_assert(offsetof(FST_CustomMonsterMaterial, Element1) == 0x000038, "Member 'FST_CustomMonsterMaterial::Element1' has a wrong offset!");
static_assert(offsetof(FST_CustomMonsterMaterial, Element2) == 0x000060, "Member 'FST_CustomMonsterMaterial::Element2' has a wrong offset!");
static_assert(offsetof(FST_CustomMonsterMaterial, Element3) == 0x000088, "Member 'FST_CustomMonsterMaterial::Element3' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterDamageCollisionInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_MonsterDamageCollisionInfo final
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterDamageCollisionInfo) == 0x000008, "Wrong alignment on FST_MonsterDamageCollisionInfo");
static_assert(sizeof(FST_MonsterDamageCollisionInfo) == 0x000010, "Wrong size on FST_MonsterDamageCollisionInfo");
static_assert(offsetof(FST_MonsterDamageCollisionInfo, Capsule) == 0x000000, "Member 'FST_MonsterDamageCollisionInfo::Capsule' has a wrong offset!");
static_assert(offsetof(FST_MonsterDamageCollisionInfo, Radius) == 0x000008, "Member 'FST_MonsterDamageCollisionInfo::Radius' has a wrong offset!");
static_assert(offsetof(FST_MonsterDamageCollisionInfo, HalfHeight) == 0x00000C, "Member 'FST_MonsterDamageCollisionInfo::HalfHeight' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIBoardNickName
// 0x0040 (0x0048 - 0x0008)
struct FST_UIBoardNickName final : public FTableRowBase
{
public:
	class FName                                   KindId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixedNickName;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NickName;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<bool>                                  VoiceDataTypeInfo;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceDataType                                SpecialVoiceType;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIBoardNickName) == 0x000008, "Wrong alignment on FST_UIBoardNickName");
static_assert(sizeof(FST_UIBoardNickName) == 0x000048, "Wrong size on FST_UIBoardNickName");
static_assert(offsetof(FST_UIBoardNickName, KindId) == 0x000008, "Member 'FST_UIBoardNickName::KindId' has a wrong offset!");
static_assert(offsetof(FST_UIBoardNickName, IsFixedNickName) == 0x000010, "Member 'FST_UIBoardNickName::IsFixedNickName' has a wrong offset!");
static_assert(offsetof(FST_UIBoardNickName, NickName) == 0x000018, "Member 'FST_UIBoardNickName::NickName' has a wrong offset!");
static_assert(offsetof(FST_UIBoardNickName, VoiceDataTypeInfo) == 0x000030, "Member 'FST_UIBoardNickName::VoiceDataTypeInfo' has a wrong offset!");
static_assert(offsetof(FST_UIBoardNickName, SpecialVoiceType) == 0x000040, "Member 'FST_UIBoardNickName::SpecialVoiceType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TimeCheckMultipleAttack
// 0x003C (0x003C - 0x0000)
struct FST_TimeCheckMultipleAttack final
{
public:
	float                                         mDurationTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mFailSection;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSuccessSection;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mTimeOutLeftSection;                               // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mTimeOutRightSection;                              // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mContLeftSection;                                  // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mContRightSection;                                 // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         mContCnt;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mElapsedTime;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TimeCheckMultipleAttack) == 0x000004, "Wrong alignment on FST_TimeCheckMultipleAttack");
static_assert(sizeof(FST_TimeCheckMultipleAttack) == 0x00003C, "Wrong size on FST_TimeCheckMultipleAttack");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mDurationTime) == 0x000000, "Member 'FST_TimeCheckMultipleAttack::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mFailSection) == 0x000004, "Member 'FST_TimeCheckMultipleAttack::mFailSection' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mSuccessSection) == 0x00000C, "Member 'FST_TimeCheckMultipleAttack::mSuccessSection' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mTimeOutLeftSection) == 0x000014, "Member 'FST_TimeCheckMultipleAttack::mTimeOutLeftSection' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mTimeOutRightSection) == 0x00001C, "Member 'FST_TimeCheckMultipleAttack::mTimeOutRightSection' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mContLeftSection) == 0x000024, "Member 'FST_TimeCheckMultipleAttack::mContLeftSection' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mContRightSection) == 0x00002C, "Member 'FST_TimeCheckMultipleAttack::mContRightSection' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mContCnt) == 0x000034, "Member 'FST_TimeCheckMultipleAttack::mContCnt' has a wrong offset!");
static_assert(offsetof(FST_TimeCheckMultipleAttack, mElapsedTime) == 0x000038, "Member 'FST_TimeCheckMultipleAttack::mElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIQuestTypeDataTable
// 0x0048 (0x0050 - 0x0008)
struct FST_UIQuestTypeDataTable final : public FTableRowBase
{
public:
	EQuestType                                    Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIQuestTypeDataTable) == 0x000008, "Wrong alignment on FST_UIQuestTypeDataTable");
static_assert(sizeof(FST_UIQuestTypeDataTable) == 0x000050, "Wrong size on FST_UIQuestTypeDataTable");
static_assert(offsetof(FST_UIQuestTypeDataTable, Type) == 0x000008, "Member 'FST_UIQuestTypeDataTable::Type' has a wrong offset!");
static_assert(offsetof(FST_UIQuestTypeDataTable, Name) == 0x000010, "Member 'FST_UIQuestTypeDataTable::Name' has a wrong offset!");
static_assert(offsetof(FST_UIQuestTypeDataTable, IconTexture) == 0x000028, "Member 'FST_UIQuestTypeDataTable::IconTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossTargetInRange
// 0x0048 (0x0048 - 0x0000)
struct FST_BossTargetInRange final
{
public:
	EMonsterBossJudgementLocationType             mTarget1;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         mRange;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossJudgementRangeType                mJudgementType1;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossJudgementLocationType             mTarget2;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossJudgementConditionType            mConditionType;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         mRange2;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonsterBossJudgementRangeType                mJudgementType2;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         mDurationTime;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSuccessSection;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSuccessSection2;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mLeftRight;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   mLeftSuccessSection;                               // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mRightSuccessSection;                              // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mTimeOutSection;                                   // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mElapsedTime;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossTargetInRange) == 0x000004, "Wrong alignment on FST_BossTargetInRange");
static_assert(sizeof(FST_BossTargetInRange) == 0x000048, "Wrong size on FST_BossTargetInRange");
static_assert(offsetof(FST_BossTargetInRange, mTarget1) == 0x000000, "Member 'FST_BossTargetInRange::mTarget1' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mRange) == 0x000004, "Member 'FST_BossTargetInRange::mRange' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mJudgementType1) == 0x000008, "Member 'FST_BossTargetInRange::mJudgementType1' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mTarget2) == 0x000009, "Member 'FST_BossTargetInRange::mTarget2' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mConditionType) == 0x00000A, "Member 'FST_BossTargetInRange::mConditionType' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mRange2) == 0x00000C, "Member 'FST_BossTargetInRange::mRange2' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mJudgementType2) == 0x000010, "Member 'FST_BossTargetInRange::mJudgementType2' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mDurationTime) == 0x000014, "Member 'FST_BossTargetInRange::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mSuccessSection) == 0x000018, "Member 'FST_BossTargetInRange::mSuccessSection' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mSuccessSection2) == 0x000020, "Member 'FST_BossTargetInRange::mSuccessSection2' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mLeftRight) == 0x000028, "Member 'FST_BossTargetInRange::mLeftRight' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mLeftSuccessSection) == 0x00002C, "Member 'FST_BossTargetInRange::mLeftSuccessSection' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mRightSuccessSection) == 0x000034, "Member 'FST_BossTargetInRange::mRightSuccessSection' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mTimeOutSection) == 0x00003C, "Member 'FST_BossTargetInRange::mTimeOutSection' has a wrong offset!");
static_assert(offsetof(FST_BossTargetInRange, mElapsedTime) == 0x000044, "Member 'FST_BossTargetInRange::mElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossBoostingCheck
// 0x000C (0x000C - 0x0000)
struct FST_BossBoostingCheck final
{
public:
	float                                         mRadiusStep;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mRadiusMax;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mRadiusMin;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossBoostingCheck) == 0x000004, "Wrong alignment on FST_BossBoostingCheck");
static_assert(sizeof(FST_BossBoostingCheck) == 0x00000C, "Wrong size on FST_BossBoostingCheck");
static_assert(offsetof(FST_BossBoostingCheck, mRadiusStep) == 0x000000, "Member 'FST_BossBoostingCheck::mRadiusStep' has a wrong offset!");
static_assert(offsetof(FST_BossBoostingCheck, mRadiusMax) == 0x000004, "Member 'FST_BossBoostingCheck::mRadiusMax' has a wrong offset!");
static_assert(offsetof(FST_BossBoostingCheck, mRadiusMin) == 0x000008, "Member 'FST_BossBoostingCheck::mRadiusMin' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossExposeWeaknesses
// 0x0001 (0x0001 - 0x0000)
struct FST_BossExposeWeaknesses final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_BossExposeWeaknesses) == 0x000001, "Wrong alignment on FST_BossExposeWeaknesses");
static_assert(sizeof(FST_BossExposeWeaknesses) == 0x000001, "Wrong size on FST_BossExposeWeaknesses");

// ScriptStruct DarwinGame.ST_BossGetUp
// 0x0008 (0x0008 - 0x0000)
struct FST_BossGetUp final
{
public:
	float                                         mDurationTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mElapsedTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossGetUp) == 0x000004, "Wrong alignment on FST_BossGetUp");
static_assert(sizeof(FST_BossGetUp) == 0x000008, "Wrong size on FST_BossGetUp");
static_assert(offsetof(FST_BossGetUp, mDurationTime) == 0x000000, "Member 'FST_BossGetUp::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_BossGetUp, mElapsedTime) == 0x000004, "Member 'FST_BossGetUp::mElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossStatueDeadWait
// 0x0014 (0x0014 - 0x0000)
struct FST_BossStatueDeadWait final
{
public:
	class FName                                   mSectionNoneStatue;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSectionStatueDead;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mPhaseChange;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_BossStatueDeadWait) == 0x000004, "Wrong alignment on FST_BossStatueDeadWait");
static_assert(sizeof(FST_BossStatueDeadWait) == 0x000014, "Wrong size on FST_BossStatueDeadWait");
static_assert(offsetof(FST_BossStatueDeadWait, mSectionNoneStatue) == 0x000000, "Member 'FST_BossStatueDeadWait::mSectionNoneStatue' has a wrong offset!");
static_assert(offsetof(FST_BossStatueDeadWait, mSectionStatueDead) == 0x000008, "Member 'FST_BossStatueDeadWait::mSectionStatueDead' has a wrong offset!");
static_assert(offsetof(FST_BossStatueDeadWait, mPhaseChange) == 0x000010, "Member 'FST_BossStatueDeadWait::mPhaseChange' has a wrong offset!");

// ScriptStruct DarwinGame.FixTreasureBoxItemInfo
// 0x0010 (0x0018 - 0x0008)
struct FFixTreasureBoxItemInfo final : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFixTreasureBoxItemInfo) == 0x000008, "Wrong alignment on FFixTreasureBoxItemInfo");
static_assert(sizeof(FFixTreasureBoxItemInfo) == 0x000018, "Wrong size on FFixTreasureBoxItemInfo");
static_assert(offsetof(FFixTreasureBoxItemInfo, ItemId) == 0x000008, "Member 'FFixTreasureBoxItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxItemInfo, ItemNum) == 0x000010, "Member 'FFixTreasureBoxItemInfo::ItemNum' has a wrong offset!");

// ScriptStruct DarwinGame.FixTreasureBoxData
// 0x0038 (0x0040 - 0x0008)
struct FFixTreasureBoxData final : public FTableRowBase
{
public:
	int32                                         CoinTableID;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFixTreasureBoxItemInfo>        Items;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BitFlagID;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RespawnType;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RespawnCount;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNum;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TreasureBoxType;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAreaType                                     AreaType;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFixTreasureBoxData) == 0x000008, "Wrong alignment on FFixTreasureBoxData");
static_assert(sizeof(FFixTreasureBoxData) == 0x000040, "Wrong size on FFixTreasureBoxData");
static_assert(offsetof(FFixTreasureBoxData, CoinTableID) == 0x000008, "Member 'FFixTreasureBoxData::CoinTableID' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, Items) == 0x000010, "Member 'FFixTreasureBoxData::Items' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, BitFlagID) == 0x000020, "Member 'FFixTreasureBoxData::BitFlagID' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, RespawnType) == 0x000024, "Member 'FFixTreasureBoxData::RespawnType' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, RespawnCount) == 0x000028, "Member 'FFixTreasureBoxData::RespawnCount' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, EventType) == 0x00002C, "Member 'FFixTreasureBoxData::EventType' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, EventNum) == 0x000030, "Member 'FFixTreasureBoxData::EventNum' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, TreasureBoxType) == 0x000034, "Member 'FFixTreasureBoxData::TreasureBoxType' has a wrong offset!");
static_assert(offsetof(FFixTreasureBoxData, AreaType) == 0x000038, "Member 'FFixTreasureBoxData::AreaType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BossPossessFlying
// 0x001C (0x001C - 0x0000)
struct FST_BossPossessFlying final
{
public:
	float                                         mRange;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mExitUi;                                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         mFlyingTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mMaxSpeed;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mMinSpeed;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSectionName;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BossPossessFlying) == 0x000004, "Wrong alignment on FST_BossPossessFlying");
static_assert(sizeof(FST_BossPossessFlying) == 0x00001C, "Wrong size on FST_BossPossessFlying");
static_assert(offsetof(FST_BossPossessFlying, mRange) == 0x000000, "Member 'FST_BossPossessFlying::mRange' has a wrong offset!");
static_assert(offsetof(FST_BossPossessFlying, mExitUi) == 0x000004, "Member 'FST_BossPossessFlying::mExitUi' has a wrong offset!");
static_assert(offsetof(FST_BossPossessFlying, mFlyingTime) == 0x000008, "Member 'FST_BossPossessFlying::mFlyingTime' has a wrong offset!");
static_assert(offsetof(FST_BossPossessFlying, mMaxSpeed) == 0x00000C, "Member 'FST_BossPossessFlying::mMaxSpeed' has a wrong offset!");
static_assert(offsetof(FST_BossPossessFlying, mMinSpeed) == 0x000010, "Member 'FST_BossPossessFlying::mMinSpeed' has a wrong offset!");
static_assert(offsetof(FST_BossPossessFlying, mSectionName) == 0x000014, "Member 'FST_BossPossessFlying::mSectionName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterCheckFloorChangeSection
// 0x002C (0x002C - 0x0000)
struct FST_MonsterCheckFloorChangeSection final
{
public:
	ECheckFloorDirection                          mDirection;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                mHalfSize;                                         // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mStartDistance;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mDistance;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mForwardOffset;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mHeightOffset;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSection;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          mIsDebugDraw;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterCheckFloorChangeSection) == 0x000004, "Wrong alignment on FST_MonsterCheckFloorChangeSection");
static_assert(sizeof(FST_MonsterCheckFloorChangeSection) == 0x00002C, "Wrong size on FST_MonsterCheckFloorChangeSection");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mDirection) == 0x000000, "Member 'FST_MonsterCheckFloorChangeSection::mDirection' has a wrong offset!");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mHalfSize) == 0x000004, "Member 'FST_MonsterCheckFloorChangeSection::mHalfSize' has a wrong offset!");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mStartDistance) == 0x000010, "Member 'FST_MonsterCheckFloorChangeSection::mStartDistance' has a wrong offset!");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mDistance) == 0x000014, "Member 'FST_MonsterCheckFloorChangeSection::mDistance' has a wrong offset!");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mForwardOffset) == 0x000018, "Member 'FST_MonsterCheckFloorChangeSection::mForwardOffset' has a wrong offset!");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mHeightOffset) == 0x00001C, "Member 'FST_MonsterCheckFloorChangeSection::mHeightOffset' has a wrong offset!");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mSection) == 0x000020, "Member 'FST_MonsterCheckFloorChangeSection::mSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterCheckFloorChangeSection, mIsDebugDraw) == 0x000028, "Member 'FST_MonsterCheckFloorChangeSection::mIsDebugDraw' has a wrong offset!");

// ScriptStruct DarwinGame.DailyQuestConfig
// 0x0020 (0x0020 - 0x0000)
struct FDailyQuestConfig final
{
public:
	TArray<class FName>                           EnableFlags;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OrderTime;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOrder;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOrderMax;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDailyQuestConfig) == 0x000008, "Wrong alignment on FDailyQuestConfig");
static_assert(sizeof(FDailyQuestConfig) == 0x000020, "Wrong size on FDailyQuestConfig");
static_assert(offsetof(FDailyQuestConfig, EnableFlags) == 0x000000, "Member 'FDailyQuestConfig::EnableFlags' has a wrong offset!");
static_assert(offsetof(FDailyQuestConfig, OrderTime) == 0x000010, "Member 'FDailyQuestConfig::OrderTime' has a wrong offset!");
static_assert(offsetof(FDailyQuestConfig, NumOrder) == 0x000018, "Member 'FDailyQuestConfig::NumOrder' has a wrong offset!");
static_assert(offsetof(FDailyQuestConfig, NumOrderMax) == 0x00001C, "Member 'FDailyQuestConfig::NumOrderMax' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterTimeWait
// 0x0010 (0x0010 - 0x0000)
struct FST_MonsterTimeWait final
{
public:
	float                                         mDurationTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSection;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mElapsedTime;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterTimeWait) == 0x000004, "Wrong alignment on FST_MonsterTimeWait");
static_assert(sizeof(FST_MonsterTimeWait) == 0x000010, "Wrong size on FST_MonsterTimeWait");
static_assert(offsetof(FST_MonsterTimeWait, mDurationTime) == 0x000000, "Member 'FST_MonsterTimeWait::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeWait, mSection) == 0x000004, "Member 'FST_MonsterTimeWait::mSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeWait, mElapsedTime) == 0x00000C, "Member 'FST_MonsterTimeWait::mElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterCollisionSectionName
// 0x0010 (0x0010 - 0x0000)
struct FST_MonsterCollisionSectionName final
{
public:
	class FName                                   mCollisionName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSectionName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterCollisionSectionName) == 0x000004, "Wrong alignment on FST_MonsterCollisionSectionName");
static_assert(sizeof(FST_MonsterCollisionSectionName) == 0x000010, "Wrong size on FST_MonsterCollisionSectionName");
static_assert(offsetof(FST_MonsterCollisionSectionName, mCollisionName) == 0x000000, "Member 'FST_MonsterCollisionSectionName::mCollisionName' has a wrong offset!");
static_assert(offsetof(FST_MonsterCollisionSectionName, mSectionName) == 0x000008, "Member 'FST_MonsterCollisionSectionName::mSectionName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterTimeCheckAttack
// 0x0038 (0x0038 - 0x0000)
struct FST_MonsterTimeCheckAttack final
{
public:
	float                                         mDurationTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_MonsterCollisionSectionName> mCollisionSet;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mWeightRatio;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mFailSection;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mSuccessSection;                                   // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   mTimeOutSection;                                   // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mElapsedTime;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterTimeCheckAttack) == 0x000008, "Wrong alignment on FST_MonsterTimeCheckAttack");
static_assert(sizeof(FST_MonsterTimeCheckAttack) == 0x000038, "Wrong size on FST_MonsterTimeCheckAttack");
static_assert(offsetof(FST_MonsterTimeCheckAttack, mDurationTime) == 0x000000, "Member 'FST_MonsterTimeCheckAttack::mDurationTime' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeCheckAttack, mCollisionSet) == 0x000008, "Member 'FST_MonsterTimeCheckAttack::mCollisionSet' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeCheckAttack, mWeightRatio) == 0x000018, "Member 'FST_MonsterTimeCheckAttack::mWeightRatio' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeCheckAttack, mFailSection) == 0x00001C, "Member 'FST_MonsterTimeCheckAttack::mFailSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeCheckAttack, mSuccessSection) == 0x000024, "Member 'FST_MonsterTimeCheckAttack::mSuccessSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeCheckAttack, mTimeOutSection) == 0x00002C, "Member 'FST_MonsterTimeCheckAttack::mTimeOutSection' has a wrong offset!");
static_assert(offsetof(FST_MonsterTimeCheckAttack, mElapsedTime) == 0x000034, "Member 'FST_MonsterTimeCheckAttack::mElapsedTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterEquipmentWhiteList
// 0x0028 (0x0030 - 0x0008)
struct FST_MonsterEquipmentWhiteList final : public FTableRowBase
{
public:
	class FName                                   KindId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NickNameID;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIndex;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalParts;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalMaterials;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RivalTeamIndex;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RivalTeamLeaderIndex;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterEquipmentWhiteList) == 0x000008, "Wrong alignment on FST_MonsterEquipmentWhiteList");
static_assert(sizeof(FST_MonsterEquipmentWhiteList) == 0x000030, "Wrong size on FST_MonsterEquipmentWhiteList");
static_assert(offsetof(FST_MonsterEquipmentWhiteList, KindId) == 0x000008, "Member 'FST_MonsterEquipmentWhiteList::KindId' has a wrong offset!");
static_assert(offsetof(FST_MonsterEquipmentWhiteList, NickNameID) == 0x000010, "Member 'FST_MonsterEquipmentWhiteList::NickNameID' has a wrong offset!");
static_assert(offsetof(FST_MonsterEquipmentWhiteList, CustomIndex) == 0x000018, "Member 'FST_MonsterEquipmentWhiteList::CustomIndex' has a wrong offset!");
static_assert(offsetof(FST_MonsterEquipmentWhiteList, AdditionalParts) == 0x00001C, "Member 'FST_MonsterEquipmentWhiteList::AdditionalParts' has a wrong offset!");
static_assert(offsetof(FST_MonsterEquipmentWhiteList, AdditionalMaterials) == 0x000020, "Member 'FST_MonsterEquipmentWhiteList::AdditionalMaterials' has a wrong offset!");
static_assert(offsetof(FST_MonsterEquipmentWhiteList, RivalTeamIndex) == 0x000024, "Member 'FST_MonsterEquipmentWhiteList::RivalTeamIndex' has a wrong offset!");
static_assert(offsetof(FST_MonsterEquipmentWhiteList, RivalTeamLeaderIndex) == 0x000028, "Member 'FST_MonsterEquipmentWhiteList::RivalTeamLeaderIndex' has a wrong offset!");

// ScriptStruct DarwinGame.RequesetGetbackQuestData
// 0x0008 (0x0008 - 0x0000)
struct FRequesetGetbackQuestData final
{
public:
	int32                                         ArtifactID;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERivalTeamForce                               Force;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequesetGetbackQuestData) == 0x000004, "Wrong alignment on FRequesetGetbackQuestData");
static_assert(sizeof(FRequesetGetbackQuestData) == 0x000008, "Wrong size on FRequesetGetbackQuestData");
static_assert(offsetof(FRequesetGetbackQuestData, ArtifactID) == 0x000000, "Member 'FRequesetGetbackQuestData::ArtifactID' has a wrong offset!");
static_assert(offsetof(FRequesetGetbackQuestData, Force) == 0x000004, "Member 'FRequesetGetbackQuestData::Force' has a wrong offset!");

// ScriptStruct DarwinGame.MembersData
// 0x0018 (0x0018 - 0x0000)
struct FMembersData final
{
public:
	TArray<class AMonsterBase*>                   Members;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMembersData) == 0x000008, "Wrong alignment on FMembersData");
static_assert(sizeof(FMembersData) == 0x000018, "Wrong size on FMembersData");
static_assert(offsetof(FMembersData, Members) == 0x000000, "Member 'FMembersData::Members' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterNickNameBlackList
// 0x0008 (0x0010 - 0x0008)
struct FST_MonsterNickNameBlackList final : public FTableRowBase
{
public:
	class FName                                   NickNameID;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterNickNameBlackList) == 0x000008, "Wrong alignment on FST_MonsterNickNameBlackList");
static_assert(sizeof(FST_MonsterNickNameBlackList) == 0x000010, "Wrong size on FST_MonsterNickNameBlackList");
static_assert(offsetof(FST_MonsterNickNameBlackList, NickNameID) == 0x000008, "Member 'FST_MonsterNickNameBlackList::NickNameID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterRingDataTable
// 0x0038 (0x0040 - 0x0008)
struct FST_MonsterRingDataTable final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   mMonsterRingClass;                                 // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mScale_S;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mScale_M;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         mScale_L;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MonsterRingDataTable) == 0x000008, "Wrong alignment on FST_MonsterRingDataTable");
static_assert(sizeof(FST_MonsterRingDataTable) == 0x000040, "Wrong size on FST_MonsterRingDataTable");
static_assert(offsetof(FST_MonsterRingDataTable, mMonsterRingClass) == 0x000008, "Member 'FST_MonsterRingDataTable::mMonsterRingClass' has a wrong offset!");
static_assert(offsetof(FST_MonsterRingDataTable, mScale_S) == 0x000030, "Member 'FST_MonsterRingDataTable::mScale_S' has a wrong offset!");
static_assert(offsetof(FST_MonsterRingDataTable, mScale_M) == 0x000034, "Member 'FST_MonsterRingDataTable::mScale_M' has a wrong offset!");
static_assert(offsetof(FST_MonsterRingDataTable, mScale_L) == 0x000038, "Member 'FST_MonsterRingDataTable::mScale_L' has a wrong offset!");

// ScriptStruct DarwinGame.TextureMaskVisionParam
// 0x0010 (0x0010 - 0x0000)
struct FTextureMaskVisionParam final
{
public:
	TArray<TSoftObjectPtr<class UTexture2D>>      Textures;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextureMaskVisionParam) == 0x000008, "Wrong alignment on FTextureMaskVisionParam");
static_assert(sizeof(FTextureMaskVisionParam) == 0x000010, "Wrong size on FTextureMaskVisionParam");
static_assert(offsetof(FTextureMaskVisionParam, Textures) == 0x000000, "Member 'FTextureMaskVisionParam::Textures' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NetworkManagementTravelTime
// 0x0008 (0x0010 - 0x0008)
struct FST_NetworkManagementTravelTime final : public FTableRowBase
{
public:
	int32                                         TravelTime;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NetworkManagementTravelTime) == 0x000008, "Wrong alignment on FST_NetworkManagementTravelTime");
static_assert(sizeof(FST_NetworkManagementTravelTime) == 0x000010, "Wrong size on FST_NetworkManagementTravelTime");
static_assert(offsetof(FST_NetworkManagementTravelTime, TravelTime) == 0x000008, "Member 'FST_NetworkManagementTravelTime::TravelTime' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCBaseAreaMonsterCondition
// 0x0018 (0x0018 - 0x0000)
struct FST_NPCBaseAreaMonsterCondition final
{
public:
	TArray<int32>                                 KindId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NPCBaseAreaMonsterCondition) == 0x000008, "Wrong alignment on FST_NPCBaseAreaMonsterCondition");
static_assert(sizeof(FST_NPCBaseAreaMonsterCondition) == 0x000018, "Wrong size on FST_NPCBaseAreaMonsterCondition");
static_assert(offsetof(FST_NPCBaseAreaMonsterCondition, KindId) == 0x000000, "Member 'FST_NPCBaseAreaMonsterCondition::KindId' has a wrong offset!");
static_assert(offsetof(FST_NPCBaseAreaMonsterCondition, Num) == 0x000010, "Member 'FST_NPCBaseAreaMonsterCondition::Num' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCBaseArea
// 0x0048 (0x0050 - 0x0008)
struct FST_NPCBaseArea final : public FTableRowBase
{
public:
	ENPCBaseAreaType                              Category;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_NPCBaseAreaMonster>         Monsters;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_NPCBaseAreaMonsterCondition> MonsterCondtion;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnableGameFlags;                                   // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DisableGameFlags;                                  // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCBaseArea) == 0x000008, "Wrong alignment on FST_NPCBaseArea");
static_assert(sizeof(FST_NPCBaseArea) == 0x000050, "Wrong size on FST_NPCBaseArea");
static_assert(offsetof(FST_NPCBaseArea, Category) == 0x000008, "Member 'FST_NPCBaseArea::Category' has a wrong offset!");
static_assert(offsetof(FST_NPCBaseArea, Monsters) == 0x000010, "Member 'FST_NPCBaseArea::Monsters' has a wrong offset!");
static_assert(offsetof(FST_NPCBaseArea, MonsterCondtion) == 0x000020, "Member 'FST_NPCBaseArea::MonsterCondtion' has a wrong offset!");
static_assert(offsetof(FST_NPCBaseArea, EnableGameFlags) == 0x000030, "Member 'FST_NPCBaseArea::EnableGameFlags' has a wrong offset!");
static_assert(offsetof(FST_NPCBaseArea, DisableGameFlags) == 0x000040, "Member 'FST_NPCBaseArea::DisableGameFlags' has a wrong offset!");

// ScriptStruct DarwinGame.ST_NPCDataAIWork
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FST_NPCDataAIWork final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_NPCDataAIWork) == 0x000004, "Wrong alignment on FST_NPCDataAIWork");
static_assert(sizeof(FST_NPCDataAIWork) == 0x000020, "Wrong size on FST_NPCDataAIWork");

// ScriptStruct DarwinGame.ST_NPCParticleEffectData
// 0x0058 (0x0060 - 0x0008)
struct FST_NPCParticleEffectData final : public FTableRowBase
{
public:
	class FName                                   AppearanceID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ParticleData;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocket                                       socket;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_NPCParticleEffectData) == 0x000008, "Wrong alignment on FST_NPCParticleEffectData");
static_assert(sizeof(FST_NPCParticleEffectData) == 0x000060, "Wrong size on FST_NPCParticleEffectData");
static_assert(offsetof(FST_NPCParticleEffectData, AppearanceID) == 0x000008, "Member 'FST_NPCParticleEffectData::AppearanceID' has a wrong offset!");
static_assert(offsetof(FST_NPCParticleEffectData, ParticleData) == 0x000010, "Member 'FST_NPCParticleEffectData::ParticleData' has a wrong offset!");
static_assert(offsetof(FST_NPCParticleEffectData, socket) == 0x000038, "Member 'FST_NPCParticleEffectData::socket' has a wrong offset!");
static_assert(offsetof(FST_NPCParticleEffectData, Offset) == 0x00003C, "Member 'FST_NPCParticleEffectData::Offset' has a wrong offset!");
static_assert(offsetof(FST_NPCParticleEffectData, Rotator) == 0x000048, "Member 'FST_NPCParticleEffectData::Rotator' has a wrong offset!");
static_assert(offsetof(FST_NPCParticleEffectData, Scale) == 0x000054, "Member 'FST_NPCParticleEffectData::Scale' has a wrong offset!");

// ScriptStruct DarwinGame.QuestProgressData
// 0x0008 (0x0008 - 0x0000)
struct FQuestProgressData final
{
public:
	int32                                         Denominator;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Numerator;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestProgressData) == 0x000004, "Wrong alignment on FQuestProgressData");
static_assert(sizeof(FQuestProgressData) == 0x000008, "Wrong size on FQuestProgressData");
static_assert(offsetof(FQuestProgressData, Denominator) == 0x000000, "Member 'FQuestProgressData::Denominator' has a wrong offset!");
static_assert(offsetof(FQuestProgressData, Numerator) == 0x000004, "Member 'FQuestProgressData::Numerator' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ParkourMotion
// 0x0018 (0x0020 - 0x0008)
struct FST_ParkourMotion final : public FTableRowBase
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CapsuleScale;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ParkourMotion) == 0x000008, "Wrong alignment on FST_ParkourMotion");
static_assert(sizeof(FST_ParkourMotion) == 0x000020, "Wrong size on FST_ParkourMotion");
static_assert(offsetof(FST_ParkourMotion, MontageToPlay) == 0x000008, "Member 'FST_ParkourMotion::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FST_ParkourMotion, StartPosition) == 0x000010, "Member 'FST_ParkourMotion::StartPosition' has a wrong offset!");
static_assert(offsetof(FST_ParkourMotion, CapsuleScale) == 0x000014, "Member 'FST_ParkourMotion::CapsuleScale' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PartyJoin
// 0x0010 (0x0018 - 0x0008)
struct FST_PartyJoin final : public FTableRowBase
{
public:
	int32                                         MinLevel;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstJoinRate;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherJoinRate;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PartyJoin) == 0x000008, "Wrong alignment on FST_PartyJoin");
static_assert(sizeof(FST_PartyJoin) == 0x000018, "Wrong size on FST_PartyJoin");
static_assert(offsetof(FST_PartyJoin, MinLevel) == 0x000008, "Member 'FST_PartyJoin::MinLevel' has a wrong offset!");
static_assert(offsetof(FST_PartyJoin, MaxLevel) == 0x00000C, "Member 'FST_PartyJoin::MaxLevel' has a wrong offset!");
static_assert(offsetof(FST_PartyJoin, FirstJoinRate) == 0x000010, "Member 'FST_PartyJoin::FirstJoinRate' has a wrong offset!");
static_assert(offsetof(FST_PartyJoin, OtherJoinRate) == 0x000014, "Member 'FST_PartyJoin::OtherJoinRate' has a wrong offset!");

// ScriptStruct DarwinGame.EditMonsterData
// 0x0024 (0x0024 - 0x0000)
struct FEditMonsterData final
{
public:
	int32                                         Uid;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_Status                             LastStatus;                                        // 0x000C(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditMonsterData) == 0x000004, "Wrong alignment on FEditMonsterData");
static_assert(sizeof(FEditMonsterData) == 0x000024, "Wrong size on FEditMonsterData");
static_assert(offsetof(FEditMonsterData, Uid) == 0x000000, "Member 'FEditMonsterData::Uid' has a wrong offset!");
static_assert(offsetof(FEditMonsterData, HP) == 0x000004, "Member 'FEditMonsterData::HP' has a wrong offset!");
static_assert(offsetof(FEditMonsterData, MP) == 0x000008, "Member 'FEditMonsterData::MP' has a wrong offset!");
static_assert(offsetof(FEditMonsterData, LastStatus) == 0x00000C, "Member 'FEditMonsterData::LastStatus' has a wrong offset!");

// ScriptStruct DarwinGame.EditPartyData
// 0x0050 (0x0050 - 0x0000)
struct FEditPartyData final
{
public:
	TMap<int32, struct FEditMonsterData>          PreEditMonsterMap;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditPartyData) == 0x000008, "Wrong alignment on FEditPartyData");
static_assert(sizeof(FEditPartyData) == 0x000050, "Wrong size on FEditPartyData");
static_assert(offsetof(FEditPartyData, PreEditMonsterMap) == 0x000000, "Member 'FEditPartyData::PreEditMonsterMap' has a wrong offset!");

// ScriptStruct DarwinGame.PartyEditOption
// 0x0002 (0x0002 - 0x0000)
struct FPartyEditOption final
{
public:
	bool                                          bRequestSpawn;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepPercentageHPandMP;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyEditOption) == 0x000001, "Wrong alignment on FPartyEditOption");
static_assert(sizeof(FPartyEditOption) == 0x000002, "Wrong size on FPartyEditOption");
static_assert(offsetof(FPartyEditOption, bRequestSpawn) == 0x000000, "Member 'FPartyEditOption::bRequestSpawn' has a wrong offset!");
static_assert(offsetof(FPartyEditOption, bKeepPercentageHPandMP) == 0x000001, "Member 'FPartyEditOption::bKeepPercentageHPandMP' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PCChangeTalkData
// 0x0030 (0x0038 - 0x0008)
struct FST_PCChangeTalkData final : public FTableRowBase
{
public:
	class FName                                   ToKamyu;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToMaya;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OnFlags;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OffFlags;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PCChangeTalkData) == 0x000008, "Wrong alignment on FST_PCChangeTalkData");
static_assert(sizeof(FST_PCChangeTalkData) == 0x000038, "Wrong size on FST_PCChangeTalkData");
static_assert(offsetof(FST_PCChangeTalkData, ToKamyu) == 0x000008, "Member 'FST_PCChangeTalkData::ToKamyu' has a wrong offset!");
static_assert(offsetof(FST_PCChangeTalkData, ToMaya) == 0x000010, "Member 'FST_PCChangeTalkData::ToMaya' has a wrong offset!");
static_assert(offsetof(FST_PCChangeTalkData, OnFlags) == 0x000018, "Member 'FST_PCChangeTalkData::OnFlags' has a wrong offset!");
static_assert(offsetof(FST_PCChangeTalkData, OffFlags) == 0x000028, "Member 'FST_PCChangeTalkData::OffFlags' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PlayerDefaultWeapon
// 0x00A8 (0x00B0 - 0x0008)
struct FST_PlayerDefaultWeapon final : public FTableRowBase
{
public:
	struct FST_CharacterDefaultWeapon             weapon;                                            // 0x0008(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                           FlagName;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PlayerDefaultWeapon) == 0x000008, "Wrong alignment on FST_PlayerDefaultWeapon");
static_assert(sizeof(FST_PlayerDefaultWeapon) == 0x0000B0, "Wrong size on FST_PlayerDefaultWeapon");
static_assert(offsetof(FST_PlayerDefaultWeapon, weapon) == 0x000008, "Member 'FST_PlayerDefaultWeapon::weapon' has a wrong offset!");
static_assert(offsetof(FST_PlayerDefaultWeapon, FlagName) == 0x0000A0, "Member 'FST_PlayerDefaultWeapon::FlagName' has a wrong offset!");

// ScriptStruct DarwinGame.TimesEnvironmentSoundData
// 0x0020 (0x0020 - 0x0000)
struct FTimesEnvironmentSoundData final
{
public:
	class USoundAtomCue*                          Morning;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Noon;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Evening;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Night;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimesEnvironmentSoundData) == 0x000008, "Wrong alignment on FTimesEnvironmentSoundData");
static_assert(sizeof(FTimesEnvironmentSoundData) == 0x000020, "Wrong size on FTimesEnvironmentSoundData");
static_assert(offsetof(FTimesEnvironmentSoundData, Morning) == 0x000000, "Member 'FTimesEnvironmentSoundData::Morning' has a wrong offset!");
static_assert(offsetof(FTimesEnvironmentSoundData, Noon) == 0x000008, "Member 'FTimesEnvironmentSoundData::Noon' has a wrong offset!");
static_assert(offsetof(FTimesEnvironmentSoundData, Evening) == 0x000010, "Member 'FTimesEnvironmentSoundData::Evening' has a wrong offset!");
static_assert(offsetof(FTimesEnvironmentSoundData, Night) == 0x000018, "Member 'FTimesEnvironmentSoundData::Night' has a wrong offset!");

// ScriptStruct DarwinGame.PredictProjectilePathParamByProfile
// 0x0050 (0x0050 - 0x0000)
struct FPredictProjectilePathParamByProfile final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileRadius;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimTime;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfileName;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimFrequency;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravityZ;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTime;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPredictProjectilePathParamByProfile) == 0x000008, "Wrong alignment on FPredictProjectilePathParamByProfile");
static_assert(sizeof(FPredictProjectilePathParamByProfile) == 0x000050, "Wrong size on FPredictProjectilePathParamByProfile");
static_assert(offsetof(FPredictProjectilePathParamByProfile, StartLocation) == 0x000000, "Member 'FPredictProjectilePathParamByProfile::StartLocation' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, LaunchVelocity) == 0x00000C, "Member 'FPredictProjectilePathParamByProfile::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, ProjectileRadius) == 0x000018, "Member 'FPredictProjectilePathParamByProfile::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, MaxSimTime) == 0x00001C, "Member 'FPredictProjectilePathParamByProfile::MaxSimTime' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, CollisionProfileName) == 0x000020, "Member 'FPredictProjectilePathParamByProfile::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, ActorsToIgnore) == 0x000028, "Member 'FPredictProjectilePathParamByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, SimFrequency) == 0x000038, "Member 'FPredictProjectilePathParamByProfile::SimFrequency' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, OverrideGravityZ) == 0x00003C, "Member 'FPredictProjectilePathParamByProfile::OverrideGravityZ' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, DrawDebugType) == 0x000040, "Member 'FPredictProjectilePathParamByProfile::DrawDebugType' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, DrawDebugTime) == 0x000044, "Member 'FPredictProjectilePathParamByProfile::DrawDebugTime' has a wrong offset!");
static_assert(offsetof(FPredictProjectilePathParamByProfile, bTraceComplex) == 0x000048, "Member 'FPredictProjectilePathParamByProfile::bTraceComplex' has a wrong offset!");

// ScriptStruct DarwinGame.QuestClearProgress
// 0x0030 (0x0030 - 0x0000)
struct FQuestClearProgress final
{
public:
	EQuestClearJudgeType                          ClearJudgeType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   GuideText;                                         // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FQuestProgressData                     Progress;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestClearProgress) == 0x000008, "Wrong alignment on FQuestClearProgress");
static_assert(sizeof(FQuestClearProgress) == 0x000030, "Wrong size on FQuestClearProgress");
static_assert(offsetof(FQuestClearProgress, ClearJudgeType) == 0x000000, "Member 'FQuestClearProgress::ClearJudgeType' has a wrong offset!");
static_assert(offsetof(FQuestClearProgress, ID) == 0x000004, "Member 'FQuestClearProgress::ID' has a wrong offset!");
static_assert(offsetof(FQuestClearProgress, GuideText) == 0x000010, "Member 'FQuestClearProgress::GuideText' has a wrong offset!");
static_assert(offsetof(FQuestClearProgress, Progress) == 0x000028, "Member 'FQuestClearProgress::Progress' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyRewardNumData
// 0x000C (0x000C - 0x0000)
struct FST_QuestDailyRewardNumData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSelect;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestDailyRewardNumData) == 0x000004, "Wrong alignment on FST_QuestDailyRewardNumData");
static_assert(sizeof(FST_QuestDailyRewardNumData) == 0x00000C, "Wrong size on FST_QuestDailyRewardNumData");
static_assert(offsetof(FST_QuestDailyRewardNumData, ID) == 0x000000, "Member 'FST_QuestDailyRewardNumData::ID' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyRewardNumData, NumSelect) == 0x000008, "Member 'FST_QuestDailyRewardNumData::NumSelect' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyData
// 0x0040 (0x0048 - 0x0008)
struct FST_QuestDailyData final : public FTableRowBase
{
public:
	int32                                         Category;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_QuestDailyConditionData            Condition;                                         // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FST_QuestDailyRewardNumData>    Rewards;                                           // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestDailyData) == 0x000008, "Wrong alignment on FST_QuestDailyData");
static_assert(sizeof(FST_QuestDailyData) == 0x000048, "Wrong size on FST_QuestDailyData");
static_assert(offsetof(FST_QuestDailyData, Category) == 0x000008, "Member 'FST_QuestDailyData::Category' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyData, Condition) == 0x000010, "Member 'FST_QuestDailyData::Condition' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyData, Rewards) == 0x000038, "Member 'FST_QuestDailyData::Rewards' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyDataForCategory
// 0x0050 (0x0050 - 0x0000)
struct FST_QuestDailyDataForCategory final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FST_QuestDailyData                     QuestDailyData;                                    // 0x0008(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestDailyDataForCategory) == 0x000008, "Wrong alignment on FST_QuestDailyDataForCategory");
static_assert(sizeof(FST_QuestDailyDataForCategory) == 0x000050, "Wrong size on FST_QuestDailyDataForCategory");
static_assert(offsetof(FST_QuestDailyDataForCategory, QuestID) == 0x000000, "Member 'FST_QuestDailyDataForCategory::QuestID' has a wrong offset!");
static_assert(offsetof(FST_QuestDailyDataForCategory, QuestDailyData) == 0x000008, "Member 'FST_QuestDailyDataForCategory::QuestDailyData' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyWeightInCategory
// 0x0008 (0x0010 - 0x0008)
struct FST_QuestDailyWeightInCategory final : public FTableRowBase
{
public:
	int32                                         Weight;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestDailyWeightInCategory) == 0x000008, "Wrong alignment on FST_QuestDailyWeightInCategory");
static_assert(sizeof(FST_QuestDailyWeightInCategory) == 0x000010, "Wrong size on FST_QuestDailyWeightInCategory");
static_assert(offsetof(FST_QuestDailyWeightInCategory, Weight) == 0x000008, "Member 'FST_QuestDailyWeightInCategory::Weight' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestDailyCategory
// 0x0008 (0x0010 - 0x0008)
struct FST_QuestDailyCategory final : public FTableRowBase
{
public:
	int32                                         Weight;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestDailyCategory) == 0x000008, "Wrong alignment on FST_QuestDailyCategory");
static_assert(sizeof(FST_QuestDailyCategory) == 0x000010, "Wrong size on FST_QuestDailyCategory");
static_assert(offsetof(FST_QuestDailyCategory, Weight) == 0x000008, "Member 'FST_QuestDailyCategory::Weight' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestGetBackData
// 0x0010 (0x0018 - 0x0008)
struct FST_QuestGetBackData final : public FTableRowBase
{
public:
	class FString                                 Dummy;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestGetBackData) == 0x000008, "Wrong alignment on FST_QuestGetBackData");
static_assert(sizeof(FST_QuestGetBackData) == 0x000018, "Wrong size on FST_QuestGetBackData");
static_assert(offsetof(FST_QuestGetBackData, Dummy) == 0x000008, "Member 'FST_QuestGetBackData::Dummy' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListClearRandomTable
// 0x0018 (0x0020 - 0x0008)
struct FST_QuestListClearRandomTable final : public FTableRowBase
{
public:
	EQuestClearRandamTableCategory                Category;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IdList;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestListClearRandomTable) == 0x000008, "Wrong alignment on FST_QuestListClearRandomTable");
static_assert(sizeof(FST_QuestListClearRandomTable) == 0x000020, "Wrong size on FST_QuestListClearRandomTable");
static_assert(offsetof(FST_QuestListClearRandomTable, Category) == 0x000008, "Member 'FST_QuestListClearRandomTable::Category' has a wrong offset!");
static_assert(offsetof(FST_QuestListClearRandomTable, IdList) == 0x000010, "Member 'FST_QuestListClearRandomTable::IdList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListDataInfo
// 0x00D8 (0x00E0 - 0x0008)
struct FST_QuestListDataInfo final : public FTableRowBase
{
public:
	class FName                                   ParentID;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ChildQuestIDs;                                     // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestOrderTimingOrderChildQuestIDs;                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestOrderTimingOpenQuestIDs;                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestClearTimingOrderQuestIDs;                     // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestClearTimingOpenQuestIDs;                      // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestOpenTimingOpenQuestIDs;                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestClearTimingEventID;                           // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OrderFlags;                                        // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OrderBreakFlags;                                   // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ClearFlags;                                        // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWindowVisible;                                    // 0x00A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrderSystemLogVisible;                            // 0x00AA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoClear;                                      // 0x00AB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestCategory                                QuestCategory;                                     // 0x00AC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestType                                    QuestType;                                         // 0x00AD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestRank                                    QuestRank;                                         // 0x00AE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF[0x1];                                       // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuestLevel;                                        // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_QuestListPointData>         OwnerPoints;                                       // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_QuestListPointData>         TargetPlacePoints;                                 // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderNumber;                                       // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestListDataInfo) == 0x000008, "Wrong alignment on FST_QuestListDataInfo");
static_assert(sizeof(FST_QuestListDataInfo) == 0x0000E0, "Wrong size on FST_QuestListDataInfo");
static_assert(offsetof(FST_QuestListDataInfo, ParentID) == 0x000008, "Member 'FST_QuestListDataInfo::ParentID' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, ChildQuestIDs) == 0x000010, "Member 'FST_QuestListDataInfo::ChildQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestOrderTimingOrderChildQuestIDs) == 0x000020, "Member 'FST_QuestListDataInfo::QuestOrderTimingOrderChildQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestOrderTimingOpenQuestIDs) == 0x000030, "Member 'FST_QuestListDataInfo::QuestOrderTimingOpenQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestClearTimingOrderQuestIDs) == 0x000040, "Member 'FST_QuestListDataInfo::QuestClearTimingOrderQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestClearTimingOpenQuestIDs) == 0x000050, "Member 'FST_QuestListDataInfo::QuestClearTimingOpenQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestOpenTimingOpenQuestIDs) == 0x000060, "Member 'FST_QuestListDataInfo::QuestOpenTimingOpenQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestClearTimingEventID) == 0x000070, "Member 'FST_QuestListDataInfo::QuestClearTimingEventID' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, OrderFlags) == 0x000078, "Member 'FST_QuestListDataInfo::OrderFlags' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, OrderBreakFlags) == 0x000088, "Member 'FST_QuestListDataInfo::OrderBreakFlags' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, ClearFlags) == 0x000098, "Member 'FST_QuestListDataInfo::ClearFlags' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, bVisible) == 0x0000A8, "Member 'FST_QuestListDataInfo::bVisible' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, bWindowVisible) == 0x0000A9, "Member 'FST_QuestListDataInfo::bWindowVisible' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, bOrderSystemLogVisible) == 0x0000AA, "Member 'FST_QuestListDataInfo::bOrderSystemLogVisible' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, bIsAutoClear) == 0x0000AB, "Member 'FST_QuestListDataInfo::bIsAutoClear' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestCategory) == 0x0000AC, "Member 'FST_QuestListDataInfo::QuestCategory' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestType) == 0x0000AD, "Member 'FST_QuestListDataInfo::QuestType' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestRank) == 0x0000AE, "Member 'FST_QuestListDataInfo::QuestRank' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, QuestLevel) == 0x0000B0, "Member 'FST_QuestListDataInfo::QuestLevel' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, OwnerPoints) == 0x0000B8, "Member 'FST_QuestListDataInfo::OwnerPoints' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, TargetPlacePoints) == 0x0000C8, "Member 'FST_QuestListDataInfo::TargetPlacePoints' has a wrong offset!");
static_assert(offsetof(FST_QuestListDataInfo, OrderNumber) == 0x0000D8, "Member 'FST_QuestListDataInfo::OrderNumber' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListOpen
// 0x00F8 (0x0100 - 0x0008)
struct FST_QuestListOpen final : public FTableRowBase
{
public:
	EQuestConjunctionType                         Conjunction;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamRank;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendMonsterNum;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      StockMonsters;                                     // 0x0020(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Items;                                             // 0x0070(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                           EventFlagIDs;                                      // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeedOpenQuestIDs;                                  // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeedOrderQuestIDs;                                 // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NeedQuestClearIDs;                                 // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestListOpen) == 0x000008, "Wrong alignment on FST_QuestListOpen");
static_assert(sizeof(FST_QuestListOpen) == 0x000100, "Wrong size on FST_QuestListOpen");
static_assert(offsetof(FST_QuestListOpen, Conjunction) == 0x000008, "Member 'FST_QuestListOpen::Conjunction' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, Level) == 0x00000C, "Member 'FST_QuestListOpen::Level' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, Gold) == 0x000010, "Member 'FST_QuestListOpen::Gold' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, TeamRank) == 0x000014, "Member 'FST_QuestListOpen::TeamRank' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, FriendMonsterNum) == 0x000018, "Member 'FST_QuestListOpen::FriendMonsterNum' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, StockMonsters) == 0x000020, "Member 'FST_QuestListOpen::StockMonsters' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, Items) == 0x000070, "Member 'FST_QuestListOpen::Items' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, EventFlagIDs) == 0x0000C0, "Member 'FST_QuestListOpen::EventFlagIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, NeedOpenQuestIDs) == 0x0000D0, "Member 'FST_QuestListOpen::NeedOpenQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, NeedOrderQuestIDs) == 0x0000E0, "Member 'FST_QuestListOpen::NeedOrderQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_QuestListOpen, NeedQuestClearIDs) == 0x0000F0, "Member 'FST_QuestListOpen::NeedQuestClearIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListOrder
// 0x0018 (0x0020 - 0x0008)
struct FST_QuestListOrder final : public FTableRowBase
{
public:
	EQuestConjunctionType                         Conjunction;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamRank;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EventFlagIDs;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestListOrder) == 0x000008, "Wrong alignment on FST_QuestListOrder");
static_assert(sizeof(FST_QuestListOrder) == 0x000020, "Wrong size on FST_QuestListOrder");
static_assert(offsetof(FST_QuestListOrder, Conjunction) == 0x000008, "Member 'FST_QuestListOrder::Conjunction' has a wrong offset!");
static_assert(offsetof(FST_QuestListOrder, TeamRank) == 0x00000C, "Member 'FST_QuestListOrder::TeamRank' has a wrong offset!");
static_assert(offsetof(FST_QuestListOrder, EventFlagIDs) == 0x000010, "Member 'FST_QuestListOrder::EventFlagIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestListProgress
// 0x0010 (0x0018 - 0x0008)
struct FST_QuestListProgress final : public FTableRowBase
{
public:
	TArray<class FName>                           CoQuestIDs;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_QuestListProgress) == 0x000008, "Wrong alignment on FST_QuestListProgress");
static_assert(sizeof(FST_QuestListProgress) == 0x000018, "Wrong size on FST_QuestListProgress");
static_assert(offsetof(FST_QuestListProgress, CoQuestIDs) == 0x000008, "Member 'FST_QuestListProgress::CoQuestIDs' has a wrong offset!");

// ScriptStruct DarwinGame.NetworkQuestConfig
// 0x0004 (0x0004 - 0x0000)
struct FNetworkQuestConfig final
{
public:
	int32                                         TimeLimit;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetworkQuestConfig) == 0x000004, "Wrong alignment on FNetworkQuestConfig");
static_assert(sizeof(FNetworkQuestConfig) == 0x000004, "Wrong size on FNetworkQuestConfig");
static_assert(offsetof(FNetworkQuestConfig, TimeLimit) == 0x000000, "Member 'FNetworkQuestConfig::TimeLimit' has a wrong offset!");

// ScriptStruct DarwinGame.AfterSearchEventStruct
// 0x0010 (0x0010 - 0x0000)
struct FAfterSearchEventStruct final : public FReactionEventBaseStruct
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectReactionType                           ReactionType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAfterSearchEventStruct) == 0x000008, "Wrong alignment on FAfterSearchEventStruct");
static_assert(sizeof(FAfterSearchEventStruct) == 0x000010, "Wrong size on FAfterSearchEventStruct");
static_assert(offsetof(FAfterSearchEventStruct, Target) == 0x000000, "Member 'FAfterSearchEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FAfterSearchEventStruct, ReactionType) == 0x000008, "Member 'FAfterSearchEventStruct::ReactionType' has a wrong offset!");

// ScriptStruct DarwinGame.FieldActionEventStruct
// 0x0018 (0x0018 - 0x0000)
struct FFieldActionEventStruct final : public FReactionEventBaseStruct
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldActionEnum                              Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Value;                                             // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldActionEventStruct) == 0x000008, "Wrong alignment on FFieldActionEventStruct");
static_assert(sizeof(FFieldActionEventStruct) == 0x000018, "Wrong size on FFieldActionEventStruct");
static_assert(offsetof(FFieldActionEventStruct, Target) == 0x000000, "Member 'FFieldActionEventStruct::Target' has a wrong offset!");
static_assert(offsetof(FFieldActionEventStruct, Type) == 0x000008, "Member 'FFieldActionEventStruct::Type' has a wrong offset!");
static_assert(offsetof(FFieldActionEventStruct, Value) == 0x00000C, "Member 'FFieldActionEventStruct::Value' has a wrong offset!");

// ScriptStruct DarwinGame.GetArtifactEventStruct
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGetArtifactEventStruct final : public FReactionEventBaseStruct
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetArtifactEventStruct) == 0x000008, "Wrong alignment on FGetArtifactEventStruct");
static_assert(sizeof(FGetArtifactEventStruct) == 0x000020, "Wrong size on FGetArtifactEventStruct");

// ScriptStruct DarwinGame.ST_ReplicaDifficultyDataTable
// 0x0030 (0x0038 - 0x0008)
struct FST_ReplicaDifficultyDataTable final : public FTableRowBase
{
public:
	EDifficulty                                   Difficulty;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Min;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankNameKey;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTextureA;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTextureB;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ReplicaDifficultyDataTable) == 0x000008, "Wrong alignment on FST_ReplicaDifficultyDataTable");
static_assert(sizeof(FST_ReplicaDifficultyDataTable) == 0x000038, "Wrong size on FST_ReplicaDifficultyDataTable");
static_assert(offsetof(FST_ReplicaDifficultyDataTable, Difficulty) == 0x000008, "Member 'FST_ReplicaDifficultyDataTable::Difficulty' has a wrong offset!");
static_assert(offsetof(FST_ReplicaDifficultyDataTable, Min) == 0x00000C, "Member 'FST_ReplicaDifficultyDataTable::Min' has a wrong offset!");
static_assert(offsetof(FST_ReplicaDifficultyDataTable, Max) == 0x000010, "Member 'FST_ReplicaDifficultyDataTable::Max' has a wrong offset!");
static_assert(offsetof(FST_ReplicaDifficultyDataTable, RankNameKey) == 0x000018, "Member 'FST_ReplicaDifficultyDataTable::RankNameKey' has a wrong offset!");
static_assert(offsetof(FST_ReplicaDifficultyDataTable, IconTextureA) == 0x000028, "Member 'FST_ReplicaDifficultyDataTable::IconTextureA' has a wrong offset!");
static_assert(offsetof(FST_ReplicaDifficultyDataTable, IconTextureB) == 0x000030, "Member 'FST_ReplicaDifficultyDataTable::IconTextureB' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ResidentMaterialInstanceDataTable
// 0x0008 (0x0010 - 0x0008)
struct FST_ResidentMaterialInstanceDataTable final : public FTableRowBase
{
public:
	class UMaterialInstance*                      MaterialInstancePath;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ResidentMaterialInstanceDataTable) == 0x000008, "Wrong alignment on FST_ResidentMaterialInstanceDataTable");
static_assert(sizeof(FST_ResidentMaterialInstanceDataTable) == 0x000010, "Wrong size on FST_ResidentMaterialInstanceDataTable");
static_assert(offsetof(FST_ResidentMaterialInstanceDataTable, MaterialInstancePath) == 0x000008, "Member 'FST_ResidentMaterialInstanceDataTable::MaterialInstancePath' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ResidentMaterialDataTable
// 0x0008 (0x0010 - 0x0008)
struct FST_ResidentMaterialDataTable final : public FTableRowBase
{
public:
	class UMaterial*                              MaterialPath;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ResidentMaterialDataTable) == 0x000008, "Wrong alignment on FST_ResidentMaterialDataTable");
static_assert(sizeof(FST_ResidentMaterialDataTable) == 0x000010, "Wrong size on FST_ResidentMaterialDataTable");
static_assert(offsetof(FST_ResidentMaterialDataTable, MaterialPath) == 0x000008, "Member 'FST_ResidentMaterialDataTable::MaterialPath' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ResidentTextureDataTable
// 0x0008 (0x0010 - 0x0008)
struct FST_ResidentTextureDataTable final : public FTableRowBase
{
public:
	class UTexture2D*                             TexturePath;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ResidentTextureDataTable) == 0x000008, "Wrong alignment on FST_ResidentTextureDataTable");
static_assert(sizeof(FST_ResidentTextureDataTable) == 0x000010, "Wrong size on FST_ResidentTextureDataTable");
static_assert(offsetof(FST_ResidentTextureDataTable, TexturePath) == 0x000008, "Member 'FST_ResidentTextureDataTable::TexturePath' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ResistData
// 0x0020 (0x0028 - 0x0008)
struct FST_ResistData final : public FTableRowBase
{
public:
	EResistJudgeType                              JudgeType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Description;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ResistValue;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ResistData) == 0x000008, "Wrong alignment on FST_ResistData");
static_assert(sizeof(FST_ResistData) == 0x000028, "Wrong size on FST_ResistData");
static_assert(offsetof(FST_ResistData, JudgeType) == 0x000008, "Member 'FST_ResistData::JudgeType' has a wrong offset!");
static_assert(offsetof(FST_ResistData, Description) == 0x00000C, "Member 'FST_ResistData::Description' has a wrong offset!");
static_assert(offsetof(FST_ResistData, ResistValue) == 0x000018, "Member 'FST_ResistData::ResistValue' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ScriptEventList
// 0x0030 (0x0038 - 0x0008)
struct FST_ScriptEventList final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   ScriptEvent;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPreserveEventEnd;                                // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ScriptEventList) == 0x000008, "Wrong alignment on FST_ScriptEventList");
static_assert(sizeof(FST_ScriptEventList) == 0x000038, "Wrong size on FST_ScriptEventList");
static_assert(offsetof(FST_ScriptEventList, ScriptEvent) == 0x000008, "Member 'FST_ScriptEventList::ScriptEvent' has a wrong offset!");
static_assert(offsetof(FST_ScriptEventList, IsPreserveEventEnd) == 0x000030, "Member 'FST_ScriptEventList::IsPreserveEventEnd' has a wrong offset!");

// ScriptStruct DarwinGame.SectorAreaOfEffectMaterialData
// 0x0028 (0x0030 - 0x0008)
struct FSectorAreaOfEffectMaterialData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInterface>      DecalMaterial;                                     // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSectorAreaOfEffectMaterialData) == 0x000008, "Wrong alignment on FSectorAreaOfEffectMaterialData");
static_assert(sizeof(FSectorAreaOfEffectMaterialData) == 0x000030, "Wrong size on FSectorAreaOfEffectMaterialData");
static_assert(offsetof(FSectorAreaOfEffectMaterialData, DecalMaterial) == 0x000008, "Member 'FSectorAreaOfEffectMaterialData::DecalMaterial' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SequencerRebindOrder
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FST_SequencerRebindOrder final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_SequencerRebindOrder) == 0x000008, "Wrong alignment on FST_SequencerRebindOrder");
static_assert(sizeof(FST_SequencerRebindOrder) == 0x000008, "Wrong size on FST_SequencerRebindOrder");

// ScriptStruct DarwinGame.BgmParameter
// 0x0010 (0x0018 - 0x0008)
struct FBgmParameter final : public FTableRowBase
{
public:
	float                                         IntroTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopVolumeChange;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomCompCategory                             Category;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBgmParameter) == 0x000008, "Wrong alignment on FBgmParameter");
static_assert(sizeof(FBgmParameter) == 0x000018, "Wrong size on FBgmParameter");
static_assert(offsetof(FBgmParameter, IntroTime) == 0x000008, "Member 'FBgmParameter::IntroTime' has a wrong offset!");
static_assert(offsetof(FBgmParameter, LoopTime) == 0x00000C, "Member 'FBgmParameter::LoopTime' has a wrong offset!");
static_assert(offsetof(FBgmParameter, LoopVolumeChange) == 0x000010, "Member 'FBgmParameter::LoopVolumeChange' has a wrong offset!");
static_assert(offsetof(FBgmParameter, Category) == 0x000011, "Member 'FBgmParameter::Category' has a wrong offset!");

// ScriptStruct DarwinGame.MeParameter
// 0x0030 (0x0038 - 0x0008)
struct FMeParameter final : public FTableRowBase
{
public:
	class FString                                 CueName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FadeOutGroupID;                                    // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlankBeforeTime;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlankAfterTime;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FadeInGroupID;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeParameter) == 0x000008, "Wrong alignment on FMeParameter");
static_assert(sizeof(FMeParameter) == 0x000038, "Wrong size on FMeParameter");
static_assert(offsetof(FMeParameter, CueName) == 0x000008, "Member 'FMeParameter::CueName' has a wrong offset!");
static_assert(offsetof(FMeParameter, Volume) == 0x000018, "Member 'FMeParameter::Volume' has a wrong offset!");
static_assert(offsetof(FMeParameter, FadeOutGroupID) == 0x00001C, "Member 'FMeParameter::FadeOutGroupID' has a wrong offset!");
static_assert(offsetof(FMeParameter, BlankBeforeTime) == 0x000024, "Member 'FMeParameter::BlankBeforeTime' has a wrong offset!");
static_assert(offsetof(FMeParameter, PlayTime) == 0x000028, "Member 'FMeParameter::PlayTime' has a wrong offset!");
static_assert(offsetof(FMeParameter, BlankAfterTime) == 0x00002C, "Member 'FMeParameter::BlankAfterTime' has a wrong offset!");
static_assert(offsetof(FMeParameter, FadeInGroupID) == 0x000030, "Member 'FMeParameter::FadeInGroupID' has a wrong offset!");

// ScriptStruct DarwinGame.CueSheetNameParameter
// 0x0010 (0x0018 - 0x0008)
struct FCueSheetNameParameter final : public FTableRowBase
{
public:
	TArray<class FName>                           NameList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCueSheetNameParameter) == 0x000008, "Wrong alignment on FCueSheetNameParameter");
static_assert(sizeof(FCueSheetNameParameter) == 0x000018, "Wrong size on FCueSheetNameParameter");
static_assert(offsetof(FCueSheetNameParameter, NameList) == 0x000008, "Member 'FCueSheetNameParameter::NameList' has a wrong offset!");

// ScriptStruct DarwinGame.NPCVoiceParameter
// 0x0008 (0x0010 - 0x0008)
struct FNPCVoiceParameter final : public FTableRowBase
{
public:
	class FName                                   SheetName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCVoiceParameter) == 0x000008, "Wrong alignment on FNPCVoiceParameter");
static_assert(sizeof(FNPCVoiceParameter) == 0x000010, "Wrong size on FNPCVoiceParameter");
static_assert(offsetof(FNPCVoiceParameter, SheetName) == 0x000008, "Member 'FNPCVoiceParameter::SheetName' has a wrong offset!");

// ScriptStruct DarwinGame.VoiceCueListInfo
// 0x0008 (0x0010 - 0x0008)
struct FVoiceCueListInfo final : public FTableRowBase
{
public:
	class UDataTable*                             Table;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceCueListInfo) == 0x000008, "Wrong alignment on FVoiceCueListInfo");
static_assert(sizeof(FVoiceCueListInfo) == 0x000010, "Wrong size on FVoiceCueListInfo");
static_assert(offsetof(FVoiceCueListInfo, Table) == 0x000008, "Member 'FVoiceCueListInfo::Table' has a wrong offset!");

// ScriptStruct DarwinGame.VoiceTimingCueIDParameter
// 0x0008 (0x0010 - 0x0008)
struct FVoiceTimingCueIDParameter final : public FTableRowBase
{
public:
	int32                                         CueId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceTimingCueIDParameter) == 0x000008, "Wrong alignment on FVoiceTimingCueIDParameter");
static_assert(sizeof(FVoiceTimingCueIDParameter) == 0x000010, "Wrong size on FVoiceTimingCueIDParameter");
static_assert(offsetof(FVoiceTimingCueIDParameter, CueId) == 0x000008, "Member 'FVoiceTimingCueIDParameter::CueId' has a wrong offset!");

// ScriptStruct DarwinGame.TitleVoiceCueIDParameter
// 0x0018 (0x0020 - 0x0008)
struct FTitleVoiceCueIDParameter final : public FTableRowBase
{
public:
	int32                                         CueId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAddOnContent;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReceivedAddOnContent;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NickNameID;                                        // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTitleVoiceCueIDParameter) == 0x000008, "Wrong alignment on FTitleVoiceCueIDParameter");
static_assert(sizeof(FTitleVoiceCueIDParameter) == 0x000020, "Wrong size on FTitleVoiceCueIDParameter");
static_assert(offsetof(FTitleVoiceCueIDParameter, CueId) == 0x000008, "Member 'FTitleVoiceCueIDParameter::CueId' has a wrong offset!");
static_assert(offsetof(FTitleVoiceCueIDParameter, IsAddOnContent) == 0x00000C, "Member 'FTitleVoiceCueIDParameter::IsAddOnContent' has a wrong offset!");
static_assert(offsetof(FTitleVoiceCueIDParameter, ReceivedAddOnContent) == 0x000010, "Member 'FTitleVoiceCueIDParameter::ReceivedAddOnContent' has a wrong offset!");
static_assert(offsetof(FTitleVoiceCueIDParameter, NickNameID) == 0x000014, "Member 'FTitleVoiceCueIDParameter::NickNameID' has a wrong offset!");

// ScriptStruct DarwinGame.TextSoundListParameter
// 0x0040 (0x0048 - 0x0008)
struct FTextSoundListParameter final : public FTableRowBase
{
public:
	class FName                                   SheetName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID_Me;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID_Se;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWait;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextSoundListParameter) == 0x000008, "Wrong alignment on FTextSoundListParameter");
static_assert(sizeof(FTextSoundListParameter) == 0x000048, "Wrong size on FTextSoundListParameter");
static_assert(offsetof(FTextSoundListParameter, SheetName) == 0x000008, "Member 'FTextSoundListParameter::SheetName' has a wrong offset!");
static_assert(offsetof(FTextSoundListParameter, ID) == 0x000010, "Member 'FTextSoundListParameter::ID' has a wrong offset!");
static_assert(offsetof(FTextSoundListParameter, ID_Me) == 0x000020, "Member 'FTextSoundListParameter::ID_Me' has a wrong offset!");
static_assert(offsetof(FTextSoundListParameter, ID_Se) == 0x000030, "Member 'FTextSoundListParameter::ID_Se' has a wrong offset!");
static_assert(offsetof(FTextSoundListParameter, IsWait) == 0x000040, "Member 'FTextSoundListParameter::IsWait' has a wrong offset!");

// ScriptStruct DarwinGame.CategorySoundGroupSetting
// 0x0030 (0x0038 - 0x0008)
struct FCategorySoundGroupSetting final : public FTableRowBase
{
public:
	bool                                          IsMeResume;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CategoryGroup;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundFadeType                                FadeType;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolume;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCategorySoundGroupSetting) == 0x000008, "Wrong alignment on FCategorySoundGroupSetting");
static_assert(sizeof(FCategorySoundGroupSetting) == 0x000038, "Wrong size on FCategorySoundGroupSetting");
static_assert(offsetof(FCategorySoundGroupSetting, IsMeResume) == 0x000008, "Member 'FCategorySoundGroupSetting::IsMeResume' has a wrong offset!");
static_assert(offsetof(FCategorySoundGroupSetting, CategoryGroup) == 0x000010, "Member 'FCategorySoundGroupSetting::CategoryGroup' has a wrong offset!");
static_assert(offsetof(FCategorySoundGroupSetting, FadeType) == 0x000020, "Member 'FCategorySoundGroupSetting::FadeType' has a wrong offset!");
static_assert(offsetof(FCategorySoundGroupSetting, FadeTime) == 0x000024, "Member 'FCategorySoundGroupSetting::FadeTime' has a wrong offset!");
static_assert(offsetof(FCategorySoundGroupSetting, FadeVolume) == 0x000028, "Member 'FCategorySoundGroupSetting::FadeVolume' has a wrong offset!");
static_assert(offsetof(FCategorySoundGroupSetting, Comment) == 0x00002C, "Member 'FCategorySoundGroupSetting::Comment' has a wrong offset!");

// ScriptStruct DarwinGame.AtomCueSheetList
// 0x0038 (0x0040 - 0x0008)
struct FAtomCueSheetList final : public FTableRowBase
{
public:
	bool                                          Resident;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundAtomCueSheet>      CueSheet;                                          // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCueSheet*                     Loaded;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueSheetList) == 0x000008, "Wrong alignment on FAtomCueSheetList");
static_assert(sizeof(FAtomCueSheetList) == 0x000040, "Wrong size on FAtomCueSheetList");
static_assert(offsetof(FAtomCueSheetList, Resident) == 0x000008, "Member 'FAtomCueSheetList::Resident' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetList, CueSheet) == 0x000010, "Member 'FAtomCueSheetList::CueSheet' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetList, Loaded) == 0x000038, "Member 'FAtomCueSheetList::Loaded' has a wrong offset!");

// ScriptStruct DarwinGame.GenSoundLoadParameter
// 0x0020 (0x0028 - 0x0008)
struct FGenSoundLoadParameter final : public FTableRowBase
{
public:
	TArray<TSoftClassPtr<class UClass>>           LoadList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGenSoundBaseComponent*>         LoadedList;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenSoundLoadParameter) == 0x000008, "Wrong alignment on FGenSoundLoadParameter");
static_assert(sizeof(FGenSoundLoadParameter) == 0x000028, "Wrong size on FGenSoundLoadParameter");
static_assert(offsetof(FGenSoundLoadParameter, LoadList) == 0x000008, "Member 'FGenSoundLoadParameter::LoadList' has a wrong offset!");
static_assert(offsetof(FGenSoundLoadParameter, LoadedList) == 0x000018, "Member 'FGenSoundLoadParameter::LoadedList' has a wrong offset!");

// ScriptStruct DarwinGame.ObjectSound
// 0x0018 (0x0020 - 0x0008)
struct FObjectSound final : public FTableRowBase
{
public:
	class FString                                 CueName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectSound) == 0x000008, "Wrong alignment on FObjectSound");
static_assert(sizeof(FObjectSound) == 0x000020, "Wrong size on FObjectSound");
static_assert(offsetof(FObjectSound, CueName) == 0x000008, "Member 'FObjectSound::CueName' has a wrong offset!");
static_assert(offsetof(FObjectSound, Comment) == 0x000018, "Member 'FObjectSound::Comment' has a wrong offset!");

// ScriptStruct DarwinGame.AreaSoundInfo
// 0x0020 (0x0028 - 0x0008)
struct FAreaSoundInfo final : public FTableRowBase
{
public:
	class FName                                   BaseEnvListID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCueID;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Reverb1;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Reverb2;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAreaSoundInfo) == 0x000008, "Wrong alignment on FAreaSoundInfo");
static_assert(sizeof(FAreaSoundInfo) == 0x000028, "Wrong size on FAreaSoundInfo");
static_assert(offsetof(FAreaSoundInfo, BaseEnvListID) == 0x000008, "Member 'FAreaSoundInfo::BaseEnvListID' has a wrong offset!");
static_assert(offsetof(FAreaSoundInfo, PlayCueID) == 0x000010, "Member 'FAreaSoundInfo::PlayCueID' has a wrong offset!");
static_assert(offsetof(FAreaSoundInfo, Reverb1) == 0x000014, "Member 'FAreaSoundInfo::Reverb1' has a wrong offset!");
static_assert(offsetof(FAreaSoundInfo, Reverb2) == 0x000018, "Member 'FAreaSoundInfo::Reverb2' has a wrong offset!");
static_assert(offsetof(FAreaSoundInfo, Comment) == 0x00001C, "Member 'FAreaSoundInfo::Comment' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SpawnFieldObjectDataTable
// 0x0028 (0x0030 - 0x0008)
struct FST_SpawnFieldObjectDataTable final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   actorClass;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SpawnFieldObjectDataTable) == 0x000008, "Wrong alignment on FST_SpawnFieldObjectDataTable");
static_assert(sizeof(FST_SpawnFieldObjectDataTable) == 0x000030, "Wrong size on FST_SpawnFieldObjectDataTable");
static_assert(offsetof(FST_SpawnFieldObjectDataTable, actorClass) == 0x000008, "Member 'FST_SpawnFieldObjectDataTable::actorClass' has a wrong offset!");

// ScriptStruct DarwinGame.StateChangeIconData
// 0x0018 (0x0018 - 0x0000)
struct FStateChangeIconData final
{
public:
	EStateChangeCause                             Cause;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FoodEffectId;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeID;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateChangeIconData) == 0x000004, "Wrong alignment on FStateChangeIconData");
static_assert(sizeof(FStateChangeIconData) == 0x000018, "Wrong size on FStateChangeIconData");
static_assert(offsetof(FStateChangeIconData, Cause) == 0x000000, "Member 'FStateChangeIconData::Cause' has a wrong offset!");
static_assert(offsetof(FStateChangeIconData, FoodEffectId) == 0x000004, "Member 'FStateChangeIconData::FoodEffectId' has a wrong offset!");
static_assert(offsetof(FStateChangeIconData, AttributeID) == 0x00000C, "Member 'FStateChangeIconData::AttributeID' has a wrong offset!");
static_assert(offsetof(FStateChangeIconData, Level) == 0x000014, "Member 'FStateChangeIconData::Level' has a wrong offset!");

// ScriptStruct DarwinGame.ST_AlertLevelParam
// 0x0008 (0x0008 - 0x0000)
struct FST_AlertLevelParam final
{
public:
	class FName                                   BattleID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_AlertLevelParam) == 0x000004, "Wrong alignment on FST_AlertLevelParam");
static_assert(sizeof(FST_AlertLevelParam) == 0x000008, "Wrong size on FST_AlertLevelParam");
static_assert(offsetof(FST_AlertLevelParam, BattleID) == 0x000000, "Member 'FST_AlertLevelParam::BattleID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StalkerBattleIdInfo
// 0x0018 (0x0020 - 0x0008)
struct FST_StalkerBattleIdInfo final : public FTableRowBase
{
public:
	ERivalTeamForce                               RivalTeamForce;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerUpperLevel;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_AlertLevelParam>            AlertLevel;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StalkerBattleIdInfo) == 0x000008, "Wrong alignment on FST_StalkerBattleIdInfo");
static_assert(sizeof(FST_StalkerBattleIdInfo) == 0x000020, "Wrong size on FST_StalkerBattleIdInfo");
static_assert(offsetof(FST_StalkerBattleIdInfo, RivalTeamForce) == 0x000008, "Member 'FST_StalkerBattleIdInfo::RivalTeamForce' has a wrong offset!");
static_assert(offsetof(FST_StalkerBattleIdInfo, PlayerUpperLevel) == 0x00000C, "Member 'FST_StalkerBattleIdInfo::PlayerUpperLevel' has a wrong offset!");
static_assert(offsetof(FST_StalkerBattleIdInfo, AlertLevel) == 0x000010, "Member 'FST_StalkerBattleIdInfo::AlertLevel' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StartProgressPresetInfo
// 0x01D8 (0x01E0 - 0x0008)
struct FST_StartProgressPresetInfo final : public FTableRowBase
{
public:
	class FName                                   ProgressName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressName_En;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FastTravelID;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugPlayType                                DebugPlayType;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPersistentLevelID                            PersistentLevelID;                                 // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLv;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         teamLevel;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerCharacterID;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PartyMonsterIDs;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StockMonsterIDs;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpawnArtifactIDs;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenFlagNames;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BreakFlagNames;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Item;                                              // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          HasAllArtifact;                                    // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ArtifactIDs;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasAllFixedCoin;                                   // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      Coin;                                              // 0x00F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   CurrentQuestID;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OrderQuestIDs;                                     // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenQuestIDs;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ClearQuestIDs;                                     // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EEpisodeType, int32>                     ScenarioProgress;                                  // 0x0180(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenTipsIDs;                                       // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StartProgressPresetInfo) == 0x000008, "Wrong alignment on FST_StartProgressPresetInfo");
static_assert(sizeof(FST_StartProgressPresetInfo) == 0x0001E0, "Wrong size on FST_StartProgressPresetInfo");
static_assert(offsetof(FST_StartProgressPresetInfo, ProgressName) == 0x000008, "Member 'FST_StartProgressPresetInfo::ProgressName' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, ProgressName_En) == 0x000010, "Member 'FST_StartProgressPresetInfo::ProgressName_En' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, FastTravelID) == 0x000018, "Member 'FST_StartProgressPresetInfo::FastTravelID' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, DebugPlayType) == 0x000020, "Member 'FST_StartProgressPresetInfo::DebugPlayType' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, PersistentLevelID) == 0x000021, "Member 'FST_StartProgressPresetInfo::PersistentLevelID' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, PlayerLv) == 0x000024, "Member 'FST_StartProgressPresetInfo::PlayerLv' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, Gold) == 0x000028, "Member 'FST_StartProgressPresetInfo::Gold' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, teamLevel) == 0x00002C, "Member 'FST_StartProgressPresetInfo::teamLevel' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, PlayerCharacterID) == 0x000030, "Member 'FST_StartProgressPresetInfo::PlayerCharacterID' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, PartyMonsterIDs) == 0x000038, "Member 'FST_StartProgressPresetInfo::PartyMonsterIDs' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, StockMonsterIDs) == 0x000048, "Member 'FST_StartProgressPresetInfo::StockMonsterIDs' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, SpawnArtifactIDs) == 0x000058, "Member 'FST_StartProgressPresetInfo::SpawnArtifactIDs' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, OpenFlagNames) == 0x000068, "Member 'FST_StartProgressPresetInfo::OpenFlagNames' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, BreakFlagNames) == 0x000078, "Member 'FST_StartProgressPresetInfo::BreakFlagNames' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, Item) == 0x000088, "Member 'FST_StartProgressPresetInfo::Item' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, HasAllArtifact) == 0x0000D8, "Member 'FST_StartProgressPresetInfo::HasAllArtifact' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, ArtifactIDs) == 0x0000E0, "Member 'FST_StartProgressPresetInfo::ArtifactIDs' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, HasAllFixedCoin) == 0x0000F0, "Member 'FST_StartProgressPresetInfo::HasAllFixedCoin' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, Coin) == 0x0000F8, "Member 'FST_StartProgressPresetInfo::Coin' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, CurrentQuestID) == 0x000148, "Member 'FST_StartProgressPresetInfo::CurrentQuestID' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, OrderQuestIDs) == 0x000150, "Member 'FST_StartProgressPresetInfo::OrderQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, OpenQuestIDs) == 0x000160, "Member 'FST_StartProgressPresetInfo::OpenQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, ClearQuestIDs) == 0x000170, "Member 'FST_StartProgressPresetInfo::ClearQuestIDs' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, ScenarioProgress) == 0x000180, "Member 'FST_StartProgressPresetInfo::ScenarioProgress' has a wrong offset!");
static_assert(offsetof(FST_StartProgressPresetInfo, OpenTipsIDs) == 0x0001D0, "Member 'FST_StartProgressPresetInfo::OpenTipsIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Station
// 0x00B0 (0x00B8 - 0x0008)
struct FST_Station final : public FTableRowBase
{
public:
	class FName                                   AreaID;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaNameAreaID;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StationName;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   AroundStationName;                                 // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   EventFlag;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBig;                                             // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NextIDList;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ETrainStepID, bool>                      StepSetting;                                       // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Station) == 0x000008, "Wrong alignment on FST_Station");
static_assert(sizeof(FST_Station) == 0x0000B8, "Wrong size on FST_Station");
static_assert(offsetof(FST_Station, AreaID) == 0x000008, "Member 'FST_Station::AreaID' has a wrong offset!");
static_assert(offsetof(FST_Station, AreaNameAreaID) == 0x000010, "Member 'FST_Station::AreaNameAreaID' has a wrong offset!");
static_assert(offsetof(FST_Station, StationName) == 0x000018, "Member 'FST_Station::StationName' has a wrong offset!");
static_assert(offsetof(FST_Station, AroundStationName) == 0x000030, "Member 'FST_Station::AroundStationName' has a wrong offset!");
static_assert(offsetof(FST_Station, EventFlag) == 0x000048, "Member 'FST_Station::EventFlag' has a wrong offset!");
static_assert(offsetof(FST_Station, IsBig) == 0x000050, "Member 'FST_Station::IsBig' has a wrong offset!");
static_assert(offsetof(FST_Station, NextIDList) == 0x000058, "Member 'FST_Station::NextIDList' has a wrong offset!");
static_assert(offsetof(FST_Station, StepSetting) == 0x000068, "Member 'FST_Station::StepSetting' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StreamingGameFlagExclusiveLevelEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_StreamingGameFlagExclusiveLevelEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StreamingGameFlagExclusiveLevelEditor) == 0x000001, "Wrong alignment on FST_StreamingGameFlagExclusiveLevelEditor");
static_assert(sizeof(FST_StreamingGameFlagExclusiveLevelEditor) == 0x000001, "Wrong size on FST_StreamingGameFlagExclusiveLevelEditor");

// ScriptStruct DarwinGame.ST_StreamingGameFlagExclusiveLevelDataEditor
// 0x0001 (0x0001 - 0x0000)
struct FST_StreamingGameFlagExclusiveLevelDataEditor final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StreamingGameFlagExclusiveLevelDataEditor) == 0x000001, "Wrong alignment on FST_StreamingGameFlagExclusiveLevelDataEditor");
static_assert(sizeof(FST_StreamingGameFlagExclusiveLevelDataEditor) == 0x000001, "Wrong size on FST_StreamingGameFlagExclusiveLevelDataEditor");

// ScriptStruct DarwinGame.ST_StampTagTableItem
// 0x0008 (0x0010 - 0x0008)
struct FST_StampTagTableItem final : public FTableRowBase
{
public:
	int32                                         tagId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_StampTagTableItem) == 0x000008, "Wrong alignment on FST_StampTagTableItem");
static_assert(sizeof(FST_StampTagTableItem) == 0x000010, "Wrong size on FST_StampTagTableItem");
static_assert(offsetof(FST_StampTagTableItem, tagId) == 0x000008, "Member 'FST_StampTagTableItem::tagId' has a wrong offset!");

// ScriptStruct DarwinGame.ParkourCalculationData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x04) FParkourCalculationData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParkourCalculationData) == 0x000004, "Wrong alignment on FParkourCalculationData");
static_assert(sizeof(FParkourCalculationData) == 0x000028, "Wrong size on FParkourCalculationData");

// ScriptStruct DarwinGame.FindWaterResult
// 0x008C (0x008C - 0x0000)
struct FFindWaterResult final
{
public:
	bool                                          bSwimmableWater;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFindWaterResult) == 0x000004, "Wrong alignment on FFindWaterResult");
static_assert(sizeof(FFindWaterResult) == 0x00008C, "Wrong size on FFindWaterResult");
static_assert(offsetof(FFindWaterResult, bSwimmableWater) == 0x000000, "Member 'FFindWaterResult::bSwimmableWater' has a wrong offset!");
static_assert(offsetof(FFindWaterResult, HitResult) == 0x000004, "Member 'FFindWaterResult::HitResult' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TagTextRubyData
// 0x0020 (0x0028 - 0x0008)
struct FST_TagTextRubyData final : public FTableRowBase
{
public:
	class FString                                 word;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ruby;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TagTextRubyData) == 0x000008, "Wrong alignment on FST_TagTextRubyData");
static_assert(sizeof(FST_TagTextRubyData) == 0x000028, "Wrong size on FST_TagTextRubyData");
static_assert(offsetof(FST_TagTextRubyData, word) == 0x000008, "Member 'FST_TagTextRubyData::word' has a wrong offset!");
static_assert(offsetof(FST_TagTextRubyData, ruby) == 0x000018, "Member 'FST_TagTextRubyData::ruby' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TargetObjectData
// 0x0020 (0x0028 - 0x0008)
struct FST_TargetObjectData final : public FTableRowBase
{
public:
	EAreaType                                     AreaType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetObjectType                             Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCheckFlag;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventID;                                           // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCount;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_TargetObjectData) == 0x000008, "Wrong alignment on FST_TargetObjectData");
static_assert(sizeof(FST_TargetObjectData) == 0x000028, "Wrong size on FST_TargetObjectData");
static_assert(offsetof(FST_TargetObjectData, AreaType) == 0x000008, "Member 'FST_TargetObjectData::AreaType' has a wrong offset!");
static_assert(offsetof(FST_TargetObjectData, Location) == 0x00000C, "Member 'FST_TargetObjectData::Location' has a wrong offset!");
static_assert(offsetof(FST_TargetObjectData, Type) == 0x000018, "Member 'FST_TargetObjectData::Type' has a wrong offset!");
static_assert(offsetof(FST_TargetObjectData, isCheckFlag) == 0x000019, "Member 'FST_TargetObjectData::isCheckFlag' has a wrong offset!");
static_assert(offsetof(FST_TargetObjectData, EventID) == 0x00001C, "Member 'FST_TargetObjectData::EventID' has a wrong offset!");
static_assert(offsetof(FST_TargetObjectData, isCount) == 0x000024, "Member 'FST_TargetObjectData::isCount' has a wrong offset!");

// ScriptStruct DarwinGame.TextFontData
// 0x0078 (0x0078 - 0x0000)
struct FTextFontData final
{
public:
	struct FSlateFontInfo                         SlateFontInfo;                                     // 0x0000(0x0050)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FontColor;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextFontData) == 0x000008, "Wrong alignment on FTextFontData");
static_assert(sizeof(FTextFontData) == 0x000078, "Wrong size on FTextFontData");
static_assert(offsetof(FTextFontData, SlateFontInfo) == 0x000000, "Member 'FTextFontData::SlateFontInfo' has a wrong offset!");
static_assert(offsetof(FTextFontData, FontColor) == 0x000050, "Member 'FTextFontData::FontColor' has a wrong offset!");
static_assert(offsetof(FTextFontData, ShadowOffset) == 0x000060, "Member 'FTextFontData::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FTextFontData, ShadowColor) == 0x000068, "Member 'FTextFontData::ShadowColor' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldObjectHiddenCondition
// 0x001C (0x001C - 0x0000)
struct FST_FieldObjectHiddenCondition final
{
public:
	EVisibilityConditionType                      ConditionType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ValueA;                                            // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityOperatorType                       OperatorType;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ValueB;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNot;                                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_FieldObjectHiddenCondition) == 0x000004, "Wrong alignment on FST_FieldObjectHiddenCondition");
static_assert(sizeof(FST_FieldObjectHiddenCondition) == 0x00001C, "Wrong size on FST_FieldObjectHiddenCondition");
static_assert(offsetof(FST_FieldObjectHiddenCondition, ConditionType) == 0x000000, "Member 'FST_FieldObjectHiddenCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectHiddenCondition, ValueA) == 0x000004, "Member 'FST_FieldObjectHiddenCondition::ValueA' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectHiddenCondition, OperatorType) == 0x00000C, "Member 'FST_FieldObjectHiddenCondition::OperatorType' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectHiddenCondition, ValueB) == 0x000010, "Member 'FST_FieldObjectHiddenCondition::ValueB' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectHiddenCondition, IsNot) == 0x000018, "Member 'FST_FieldObjectHiddenCondition::IsNot' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldObjectHiddenSubInfo
// 0x0018 (0x0018 - 0x0000)
struct FST_FieldObjectHiddenSubInfo final
{
public:
	TArray<struct FST_FieldObjectHiddenCondition> Conditions;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNot;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_FieldObjectHiddenSubInfo) == 0x000008, "Wrong alignment on FST_FieldObjectHiddenSubInfo");
static_assert(sizeof(FST_FieldObjectHiddenSubInfo) == 0x000018, "Wrong size on FST_FieldObjectHiddenSubInfo");
static_assert(offsetof(FST_FieldObjectHiddenSubInfo, Conditions) == 0x000000, "Member 'FST_FieldObjectHiddenSubInfo::Conditions' has a wrong offset!");
static_assert(offsetof(FST_FieldObjectHiddenSubInfo, IsNot) == 0x000010, "Member 'FST_FieldObjectHiddenSubInfo::IsNot' has a wrong offset!");

// ScriptStruct DarwinGame.ST_FieldObjectHiddenInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_FieldObjectHiddenInfo final
{
public:
	TArray<struct FST_FieldObjectHiddenSubInfo>   Conditions;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_FieldObjectHiddenInfo) == 0x000008, "Wrong alignment on FST_FieldObjectHiddenInfo");
static_assert(sizeof(FST_FieldObjectHiddenInfo) == 0x000010, "Wrong size on FST_FieldObjectHiddenInfo");
static_assert(offsetof(FST_FieldObjectHiddenInfo, Conditions) == 0x000000, "Member 'FST_FieldObjectHiddenInfo::Conditions' has a wrong offset!");

// ScriptStruct DarwinGame.TreasureFigureData
// 0x0040 (0x0040 - 0x0000)
struct FTreasureFigureData final
{
public:
	TSoftClassPtr<class UClass>                   Treasure;                                          // 0x0000(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTreasureFigureData) == 0x000008, "Wrong alignment on FTreasureFigureData");
static_assert(sizeof(FTreasureFigureData) == 0x000040, "Wrong size on FTreasureFigureData");
static_assert(offsetof(FTreasureFigureData, Treasure) == 0x000000, "Member 'FTreasureFigureData::Treasure' has a wrong offset!");
static_assert(offsetof(FTreasureFigureData, Location) == 0x000028, "Member 'FTreasureFigureData::Location' has a wrong offset!");
static_assert(offsetof(FTreasureFigureData, Scale) == 0x000034, "Member 'FTreasureFigureData::Scale' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UI3DCharacterResource
// 0x0080 (0x0088 - 0x0008)
struct FST_UI3DCharacterResource final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           IdleAnimationPath;                                 // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimationAsset>> ActionAnimationPath;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PartyScale;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PartyLocation;                                     // 0x005C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopScale;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TopLocation;                                       // 0x006C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DictScale;                                         // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DictLocation;                                      // 0x007C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UI3DCharacterResource) == 0x000008, "Wrong alignment on FST_UI3DCharacterResource");
static_assert(sizeof(FST_UI3DCharacterResource) == 0x000088, "Wrong size on FST_UI3DCharacterResource");
static_assert(offsetof(FST_UI3DCharacterResource, ObjectPath) == 0x000008, "Member 'FST_UI3DCharacterResource::ObjectPath' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, IdleAnimationPath) == 0x000020, "Member 'FST_UI3DCharacterResource::IdleAnimationPath' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, ActionAnimationPath) == 0x000048, "Member 'FST_UI3DCharacterResource::ActionAnimationPath' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, PartyScale) == 0x000058, "Member 'FST_UI3DCharacterResource::PartyScale' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, PartyLocation) == 0x00005C, "Member 'FST_UI3DCharacterResource::PartyLocation' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, TopScale) == 0x000068, "Member 'FST_UI3DCharacterResource::TopScale' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, TopLocation) == 0x00006C, "Member 'FST_UI3DCharacterResource::TopLocation' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, DictScale) == 0x000078, "Member 'FST_UI3DCharacterResource::DictScale' has a wrong offset!");
static_assert(offsetof(FST_UI3DCharacterResource, DictLocation) == 0x00007C, "Member 'FST_UI3DCharacterResource::DictLocation' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIAppraiseTypeLegendResource
// 0x0018 (0x0020 - 0x0008)
struct FST_UIAppraiseTypeLegendResource final : public FTableRowBase
{
public:
	class UTexture2D*                             Base;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Mask;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Flash;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIAppraiseTypeLegendResource) == 0x000008, "Wrong alignment on FST_UIAppraiseTypeLegendResource");
static_assert(sizeof(FST_UIAppraiseTypeLegendResource) == 0x000020, "Wrong size on FST_UIAppraiseTypeLegendResource");
static_assert(offsetof(FST_UIAppraiseTypeLegendResource, Base) == 0x000008, "Member 'FST_UIAppraiseTypeLegendResource::Base' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseTypeLegendResource, Mask) == 0x000010, "Member 'FST_UIAppraiseTypeLegendResource::Mask' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseTypeLegendResource, Flash) == 0x000018, "Member 'FST_UIAppraiseTypeLegendResource::Flash' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIAppraiseValueUpEffectResource
// 0x0010 (0x0018 - 0x0008)
struct FST_UIAppraiseValueUpEffectResource final : public FTableRowBase
{
public:
	class UTexture2D*                             RankEffect;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OtherEffect;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIAppraiseValueUpEffectResource) == 0x000008, "Wrong alignment on FST_UIAppraiseValueUpEffectResource");
static_assert(sizeof(FST_UIAppraiseValueUpEffectResource) == 0x000018, "Wrong size on FST_UIAppraiseValueUpEffectResource");
static_assert(offsetof(FST_UIAppraiseValueUpEffectResource, RankEffect) == 0x000008, "Member 'FST_UIAppraiseValueUpEffectResource::RankEffect' has a wrong offset!");
static_assert(offsetof(FST_UIAppraiseValueUpEffectResource, OtherEffect) == 0x000010, "Member 'FST_UIAppraiseValueUpEffectResource::OtherEffect' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StationAreaIcon
// 0x0010 (0x0010 - 0x0000)
struct FST_StationAreaIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Shadow;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StationAreaIcon) == 0x000008, "Wrong alignment on FST_StationAreaIcon");
static_assert(sizeof(FST_StationAreaIcon) == 0x000010, "Wrong size on FST_StationAreaIcon");
static_assert(offsetof(FST_StationAreaIcon, Icon) == 0x000000, "Member 'FST_StationAreaIcon::Icon' has a wrong offset!");
static_assert(offsetof(FST_StationAreaIcon, Shadow) == 0x000008, "Member 'FST_StationAreaIcon::Shadow' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StolenRivalTeamInfo
// 0x0058 (0x0058 - 0x0000)
struct FST_StolenRivalTeamInfo final
{
public:
	ERivalTeamForce                               Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              FlagIcon;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HalfFlagIcon;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StolenRivalTeamInfo) == 0x000008, "Wrong alignment on FST_StolenRivalTeamInfo");
static_assert(sizeof(FST_StolenRivalTeamInfo) == 0x000058, "Wrong size on FST_StolenRivalTeamInfo");
static_assert(offsetof(FST_StolenRivalTeamInfo, Team) == 0x000000, "Member 'FST_StolenRivalTeamInfo::Team' has a wrong offset!");
static_assert(offsetof(FST_StolenRivalTeamInfo, FlagIcon) == 0x000008, "Member 'FST_StolenRivalTeamInfo::FlagIcon' has a wrong offset!");
static_assert(offsetof(FST_StolenRivalTeamInfo, HalfFlagIcon) == 0x000030, "Member 'FST_StolenRivalTeamInfo::HalfFlagIcon' has a wrong offset!");

// ScriptStruct DarwinGame.ST_WarehouseBackGroundData
// 0x0030 (0x0030 - 0x0000)
struct FST_WarehouseBackGroundData final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              BackGround;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_WarehouseBackGroundData) == 0x000008, "Wrong alignment on FST_WarehouseBackGroundData");
static_assert(sizeof(FST_WarehouseBackGroundData) == 0x000030, "Wrong size on FST_WarehouseBackGroundData");
static_assert(offsetof(FST_WarehouseBackGroundData, Level) == 0x000000, "Member 'FST_WarehouseBackGroundData::Level' has a wrong offset!");
static_assert(offsetof(FST_WarehouseBackGroundData, BackGround) == 0x000008, "Member 'FST_WarehouseBackGroundData::BackGround' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIArtifactCategory
// 0x0030 (0x0038 - 0x0008)
struct FST_UIArtifactCategory final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FlashIconTexture;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CategoryMenuIconTexture;                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIArtifactCategory) == 0x000008, "Wrong alignment on FST_UIArtifactCategory");
static_assert(sizeof(FST_UIArtifactCategory) == 0x000038, "Wrong size on FST_UIArtifactCategory");
static_assert(offsetof(FST_UIArtifactCategory, Name) == 0x000008, "Member 'FST_UIArtifactCategory::Name' has a wrong offset!");
static_assert(offsetof(FST_UIArtifactCategory, IconTexture) == 0x000020, "Member 'FST_UIArtifactCategory::IconTexture' has a wrong offset!");
static_assert(offsetof(FST_UIArtifactCategory, FlashIconTexture) == 0x000028, "Member 'FST_UIArtifactCategory::FlashIconTexture' has a wrong offset!");
static_assert(offsetof(FST_UIArtifactCategory, CategoryMenuIconTexture) == 0x000030, "Member 'FST_UIArtifactCategory::CategoryMenuIconTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactClassificationData
// 0x0018 (0x0020 - 0x0008)
struct FST_ArtifactClassificationData final : public FTableRowBase
{
public:
	int32                                         ArtifactType;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubClassId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimName;                                          // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ArtifactClassificationData) == 0x000008, "Wrong alignment on FST_ArtifactClassificationData");
static_assert(sizeof(FST_ArtifactClassificationData) == 0x000020, "Wrong size on FST_ArtifactClassificationData");
static_assert(offsetof(FST_ArtifactClassificationData, ArtifactType) == 0x000008, "Member 'FST_ArtifactClassificationData::ArtifactType' has a wrong offset!");
static_assert(offsetof(FST_ArtifactClassificationData, ClassId) == 0x00000C, "Member 'FST_ArtifactClassificationData::ClassId' has a wrong offset!");
static_assert(offsetof(FST_ArtifactClassificationData, SubClassId) == 0x000010, "Member 'FST_ArtifactClassificationData::SubClassId' has a wrong offset!");
static_assert(offsetof(FST_ArtifactClassificationData, AnimName) == 0x000014, "Member 'FST_ArtifactClassificationData::AnimName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIArtifactSmallCategory
// 0x0020 (0x0028 - 0x0008)
struct FST_UIArtifactSmallCategory final : public FTableRowBase
{
public:
	int32                                         ClassTypeID;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIArtifactSmallCategory) == 0x000008, "Wrong alignment on FST_UIArtifactSmallCategory");
static_assert(sizeof(FST_UIArtifactSmallCategory) == 0x000028, "Wrong size on FST_UIArtifactSmallCategory");
static_assert(offsetof(FST_UIArtifactSmallCategory, ClassTypeID) == 0x000008, "Member 'FST_UIArtifactSmallCategory::ClassTypeID' has a wrong offset!");
static_assert(offsetof(FST_UIArtifactSmallCategory, Name) == 0x000010, "Member 'FST_UIArtifactSmallCategory::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIBalloonIconResource
// 0x0010 (0x0018 - 0x0008)
struct FST_UIBalloonIconResource final : public FTableRowBase
{
public:
	class UTexture2D*                             TalkIcon;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ARIcon;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIBalloonIconResource) == 0x000008, "Wrong alignment on FST_UIBalloonIconResource");
static_assert(sizeof(FST_UIBalloonIconResource) == 0x000018, "Wrong size on FST_UIBalloonIconResource");
static_assert(offsetof(FST_UIBalloonIconResource, TalkIcon) == 0x000008, "Member 'FST_UIBalloonIconResource::TalkIcon' has a wrong offset!");
static_assert(offsetof(FST_UIBalloonIconResource, ARIcon) == 0x000010, "Member 'FST_UIBalloonIconResource::ARIcon' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIBaseBattleFlagData
// 0x0008 (0x0010 - 0x0008)
struct FST_UIBaseBattleFlagData final : public FTableRowBase
{
public:
	class UTexture2D*                             FlagTexture;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIBaseBattleFlagData) == 0x000008, "Wrong alignment on FST_UIBaseBattleFlagData");
static_assert(sizeof(FST_UIBaseBattleFlagData) == 0x000010, "Wrong size on FST_UIBaseBattleFlagData");
static_assert(offsetof(FST_UIBaseBattleFlagData, FlagTexture) == 0x000008, "Member 'FST_UIBaseBattleFlagData::FlagTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIBoardAutoLevel
// 0x0010 (0x0018 - 0x0008)
struct FST_UIBoardAutoLevel final : public FTableRowBase
{
public:
	int32                                         PlayerLevelMin;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerLevelMax;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterLevelMin;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MonsterLevelMax;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIBoardAutoLevel) == 0x000008, "Wrong alignment on FST_UIBoardAutoLevel");
static_assert(sizeof(FST_UIBoardAutoLevel) == 0x000018, "Wrong size on FST_UIBoardAutoLevel");
static_assert(offsetof(FST_UIBoardAutoLevel, PlayerLevelMin) == 0x000008, "Member 'FST_UIBoardAutoLevel::PlayerLevelMin' has a wrong offset!");
static_assert(offsetof(FST_UIBoardAutoLevel, PlayerLevelMax) == 0x00000C, "Member 'FST_UIBoardAutoLevel::PlayerLevelMax' has a wrong offset!");
static_assert(offsetof(FST_UIBoardAutoLevel, MonsterLevelMin) == 0x000010, "Member 'FST_UIBoardAutoLevel::MonsterLevelMin' has a wrong offset!");
static_assert(offsetof(FST_UIBoardAutoLevel, MonsterLevelMax) == 0x000014, "Member 'FST_UIBoardAutoLevel::MonsterLevelMax' has a wrong offset!");

// ScriptStruct DarwinGame.ST_HaveCoin
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FST_HaveCoin final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_HaveCoin) == 0x000004, "Wrong alignment on FST_HaveCoin");
static_assert(sizeof(FST_HaveCoin) == 0x000008, "Wrong size on FST_HaveCoin");

// ScriptStruct DarwinGame.ST_CursorPartyMoveAnimation
// 0x0010 (0x0010 - 0x0000)
struct FST_CursorPartyMoveAnimation final
{
public:
	class UWidgetAnimation*                       ForwardAnim;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BackwardAnim;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_CursorPartyMoveAnimation) == 0x000008, "Wrong alignment on FST_CursorPartyMoveAnimation");
static_assert(sizeof(FST_CursorPartyMoveAnimation) == 0x000010, "Wrong size on FST_CursorPartyMoveAnimation");
static_assert(offsetof(FST_CursorPartyMoveAnimation, ForwardAnim) == 0x000000, "Member 'FST_CursorPartyMoveAnimation::ForwardAnim' has a wrong offset!");
static_assert(offsetof(FST_CursorPartyMoveAnimation, BackwardAnim) == 0x000008, "Member 'FST_CursorPartyMoveAnimation::BackwardAnim' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIDamageIconData
// 0x0008 (0x0010 - 0x0008)
struct FST_UIDamageIconData final : public FTableRowBase
{
public:
	TSubclassOf<class UUISign_IconDamageBase>     WidgetClass;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIDamageIconData) == 0x000008, "Wrong alignment on FST_UIDamageIconData");
static_assert(sizeof(FST_UIDamageIconData) == 0x000010, "Wrong size on FST_UIDamageIconData");
static_assert(offsetof(FST_UIDamageIconData, WidgetClass) == 0x000008, "Member 'FST_UIDamageIconData::WidgetClass' has a wrong offset!");

// ScriptStruct DarwinGame.ST_DictMenu
// 0x0020 (0x0020 - 0x0000)
struct FST_DictMenu final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_DictMenu) == 0x000008, "Wrong alignment on FST_DictMenu");
static_assert(sizeof(FST_DictMenu) == 0x000020, "Wrong size on FST_DictMenu");
static_assert(offsetof(FST_DictMenu, Icon) == 0x000000, "Member 'FST_DictMenu::Icon' has a wrong offset!");
static_assert(offsetof(FST_DictMenu, Name) == 0x000008, "Member 'FST_DictMenu::Name' has a wrong offset!");

// ScriptStruct DarwinGame.DispatchDirectingEffectInfo
// 0x0010 (0x0010 - 0x0000)
struct FDispatchDirectingEffectInfo final
{
public:
	TArray<TSubclassOf<class AEffectBase>>        list;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDispatchDirectingEffectInfo) == 0x000008, "Wrong alignment on FDispatchDirectingEffectInfo");
static_assert(sizeof(FDispatchDirectingEffectInfo) == 0x000010, "Wrong size on FDispatchDirectingEffectInfo");
static_assert(offsetof(FDispatchDirectingEffectInfo, list) == 0x000000, "Member 'FDispatchDirectingEffectInfo::list' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIEventRequireItem
// 0x0018 (0x0020 - 0x0008)
struct FST_UIEventRequireItem final : public FTableRowBase
{
public:
	class FName                                   ParameterId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_RequirementInfo>            ConfirmRequirement;                                // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIEventRequireItem) == 0x000008, "Wrong alignment on FST_UIEventRequireItem");
static_assert(sizeof(FST_UIEventRequireItem) == 0x000020, "Wrong size on FST_UIEventRequireItem");
static_assert(offsetof(FST_UIEventRequireItem, ParameterId) == 0x000008, "Member 'FST_UIEventRequireItem::ParameterId' has a wrong offset!");
static_assert(offsetof(FST_UIEventRequireItem, ConfirmRequirement) == 0x000010, "Member 'FST_UIEventRequireItem::ConfirmRequirement' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFacilityBulletItem
// 0x0018 (0x0020 - 0x0008)
struct FST_UIFacilityBulletItem : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_SynthesisMaterialInfo>      Material;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIFacilityBulletItem) == 0x000008, "Wrong alignment on FST_UIFacilityBulletItem");
static_assert(sizeof(FST_UIFacilityBulletItem) == 0x000020, "Wrong size on FST_UIFacilityBulletItem");
static_assert(offsetof(FST_UIFacilityBulletItem, ItemId) == 0x000008, "Member 'FST_UIFacilityBulletItem::ItemId' has a wrong offset!");
static_assert(offsetof(FST_UIFacilityBulletItem, Material) == 0x000010, "Member 'FST_UIFacilityBulletItem::Material' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFacilityBulletData
// 0x0008 (0x0028 - 0x0020)
struct FST_UIFacilityBulletData final : public FST_UIFacilityBulletItem
{
public:
	EBulletItemCategory                           Category;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIFacilityBulletData) == 0x000008, "Wrong alignment on FST_UIFacilityBulletData");
static_assert(sizeof(FST_UIFacilityBulletData) == 0x000028, "Wrong size on FST_UIFacilityBulletData");
static_assert(offsetof(FST_UIFacilityBulletData, Category) == 0x000020, "Member 'FST_UIFacilityBulletData::Category' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFeatureData
// 0x0060 (0x0060 - 0x0000)
struct FST_UIFeatureData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EUIFeatureType                                Type;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rarity;                                            // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fixed;                                             // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         idOrder;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IconTypes;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayEquipAnim;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIFeatureData) == 0x000008, "Wrong alignment on FST_UIFeatureData");
static_assert(sizeof(FST_UIFeatureData) == 0x000060, "Wrong size on FST_UIFeatureData");
static_assert(offsetof(FST_UIFeatureData, Name) == 0x000008, "Member 'FST_UIFeatureData::Name' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, Description) == 0x000020, "Member 'FST_UIFeatureData::Description' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, Type) == 0x000038, "Member 'FST_UIFeatureData::Type' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, Rarity) == 0x000039, "Member 'FST_UIFeatureData::Rarity' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, Value) == 0x00003C, "Member 'FST_UIFeatureData::Value' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, fixed) == 0x000040, "Member 'FST_UIFeatureData::fixed' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, idOrder) == 0x000044, "Member 'FST_UIFeatureData::idOrder' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, IconTypes) == 0x000048, "Member 'FST_UIFeatureData::IconTypes' has a wrong offset!");
static_assert(offsetof(FST_UIFeatureData, bIsPlayEquipAnim) == 0x000058, "Member 'FST_UIFeatureData::bIsPlayEquipAnim' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ActionGaugeInfo
// 0x0050 (0x0050 - 0x0000)
struct FST_ActionGaugeInfo final
{
public:
	EInputGuideType                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Gauge;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             GaugeAdd;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             GaugeFlash;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectAnimName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GaugeSound;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GaugeSuccessSound;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceTimingPC                                GaugeSuccessVoice;                                 // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ActionGaugeInfo) == 0x000008, "Wrong alignment on FST_ActionGaugeInfo");
static_assert(sizeof(FST_ActionGaugeInfo) == 0x000050, "Wrong size on FST_ActionGaugeInfo");
static_assert(offsetof(FST_ActionGaugeInfo, Type) == 0x000000, "Member 'FST_ActionGaugeInfo::Type' has a wrong offset!");
static_assert(offsetof(FST_ActionGaugeInfo, Gauge) == 0x000008, "Member 'FST_ActionGaugeInfo::Gauge' has a wrong offset!");
static_assert(offsetof(FST_ActionGaugeInfo, GaugeAdd) == 0x000010, "Member 'FST_ActionGaugeInfo::GaugeAdd' has a wrong offset!");
static_assert(offsetof(FST_ActionGaugeInfo, GaugeFlash) == 0x000018, "Member 'FST_ActionGaugeInfo::GaugeFlash' has a wrong offset!");
static_assert(offsetof(FST_ActionGaugeInfo, EffectAnimName) == 0x000020, "Member 'FST_ActionGaugeInfo::EffectAnimName' has a wrong offset!");
static_assert(offsetof(FST_ActionGaugeInfo, GaugeSound) == 0x000028, "Member 'FST_ActionGaugeInfo::GaugeSound' has a wrong offset!");
static_assert(offsetof(FST_ActionGaugeInfo, GaugeSuccessSound) == 0x000038, "Member 'FST_ActionGaugeInfo::GaugeSuccessSound' has a wrong offset!");
static_assert(offsetof(FST_ActionGaugeInfo, GaugeSuccessVoice) == 0x000048, "Member 'FST_ActionGaugeInfo::GaugeSuccessVoice' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFieldWinMessage
// 0x0040 (0x0048 - 0x0008)
struct FST_UIFieldWinMessage final : public FTableRowBase
{
public:
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNumber;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIFieldWinMessage) == 0x000008, "Wrong alignment on FST_UIFieldWinMessage");
static_assert(sizeof(FST_UIFieldWinMessage) == 0x000048, "Wrong size on FST_UIFieldWinMessage");
static_assert(offsetof(FST_UIFieldWinMessage, GroupName) == 0x000008, "Member 'FST_UIFieldWinMessage::GroupName' has a wrong offset!");
static_assert(offsetof(FST_UIFieldWinMessage, PageNumber) == 0x000010, "Member 'FST_UIFieldWinMessage::PageNumber' has a wrong offset!");
static_assert(offsetof(FST_UIFieldWinMessage, Title) == 0x000018, "Member 'FST_UIFieldWinMessage::Title' has a wrong offset!");
static_assert(offsetof(FST_UIFieldWinMessage, Desc) == 0x000030, "Member 'FST_UIFieldWinMessage::Desc' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIFoodEffect
// 0x0060 (0x0068 - 0x0008)
struct FST_UIFoodEffect final : public FTableRowBase
{
public:
	EFoodEffectType                               FoodEffectType;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DetailType;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIFoodEffect) == 0x000008, "Wrong alignment on FST_UIFoodEffect");
static_assert(sizeof(FST_UIFoodEffect) == 0x000068, "Wrong size on FST_UIFoodEffect");
static_assert(offsetof(FST_UIFoodEffect, FoodEffectType) == 0x000008, "Member 'FST_UIFoodEffect::FoodEffectType' has a wrong offset!");
static_assert(offsetof(FST_UIFoodEffect, DetailType) == 0x00000C, "Member 'FST_UIFoodEffect::DetailType' has a wrong offset!");
static_assert(offsetof(FST_UIFoodEffect, Name) == 0x000010, "Member 'FST_UIFoodEffect::Name' has a wrong offset!");
static_assert(offsetof(FST_UIFoodEffect, Description) == 0x000028, "Member 'FST_UIFoodEffect::Description' has a wrong offset!");
static_assert(offsetof(FST_UIFoodEffect, IconTexture) == 0x000040, "Member 'FST_UIFoodEffect::IconTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GoodIconInfo
// 0x0010 (0x0010 - 0x0000)
struct FST_GoodIconInfo final
{
public:
	int32                                         MinGoodCount;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGoodCount;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodIconIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoodStateEffectType                          EffectType;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_GoodIconInfo) == 0x000004, "Wrong alignment on FST_GoodIconInfo");
static_assert(sizeof(FST_GoodIconInfo) == 0x000010, "Wrong size on FST_GoodIconInfo");
static_assert(offsetof(FST_GoodIconInfo, MinGoodCount) == 0x000000, "Member 'FST_GoodIconInfo::MinGoodCount' has a wrong offset!");
static_assert(offsetof(FST_GoodIconInfo, MaxGoodCount) == 0x000004, "Member 'FST_GoodIconInfo::MaxGoodCount' has a wrong offset!");
static_assert(offsetof(FST_GoodIconInfo, GoodIconIndex) == 0x000008, "Member 'FST_GoodIconInfo::GoodIconIndex' has a wrong offset!");
static_assert(offsetof(FST_GoodIconInfo, EffectType) == 0x00000C, "Member 'FST_GoodIconInfo::EffectType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_GoodHeartInfo
// 0x000C (0x000C - 0x0000)
struct FST_GoodHeartInfo final
{
public:
	int32                                         MinGoodCount;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGoodCount;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoodHeartType                                Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_GoodHeartInfo) == 0x000004, "Wrong alignment on FST_GoodHeartInfo");
static_assert(sizeof(FST_GoodHeartInfo) == 0x00000C, "Wrong size on FST_GoodHeartInfo");
static_assert(offsetof(FST_GoodHeartInfo, MinGoodCount) == 0x000000, "Member 'FST_GoodHeartInfo::MinGoodCount' has a wrong offset!");
static_assert(offsetof(FST_GoodHeartInfo, MaxGoodCount) == 0x000004, "Member 'FST_GoodHeartInfo::MaxGoodCount' has a wrong offset!");
static_assert(offsetof(FST_GoodHeartInfo, Type) == 0x000008, "Member 'FST_GoodHeartInfo::Type' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SynthesisShopBackGroundTexture
// 0x0050 (0x0050 - 0x0000)
struct FST_SynthesisShopBackGroundTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              SynthesisShopBullet;                               // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SynthesisShopFood;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SynthesisShopBackGroundTexture) == 0x000008, "Wrong alignment on FST_SynthesisShopBackGroundTexture");
static_assert(sizeof(FST_SynthesisShopBackGroundTexture) == 0x000050, "Wrong size on FST_SynthesisShopBackGroundTexture");
static_assert(offsetof(FST_SynthesisShopBackGroundTexture, SynthesisShopBullet) == 0x000000, "Member 'FST_SynthesisShopBackGroundTexture::SynthesisShopBullet' has a wrong offset!");
static_assert(offsetof(FST_SynthesisShopBackGroundTexture, SynthesisShopFood) == 0x000028, "Member 'FST_SynthesisShopBackGroundTexture::SynthesisShopFood' has a wrong offset!");

// ScriptStruct DarwinGame.ST_RecipeCategory
// 0x0028 (0x0028 - 0x0000)
struct FST_RecipeCategory final
{
public:
	int32                                         ItemCategory;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_RecipeCategory) == 0x000008, "Wrong alignment on FST_RecipeCategory");
static_assert(sizeof(FST_RecipeCategory) == 0x000028, "Wrong size on FST_RecipeCategory");
static_assert(offsetof(FST_RecipeCategory, ItemCategory) == 0x000000, "Member 'FST_RecipeCategory::ItemCategory' has a wrong offset!");
static_assert(offsetof(FST_RecipeCategory, Icon) == 0x000008, "Member 'FST_RecipeCategory::Icon' has a wrong offset!");
static_assert(offsetof(FST_RecipeCategory, Name) == 0x000010, "Member 'FST_RecipeCategory::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BulletFoodFacilityBackGround
// 0x0050 (0x0050 - 0x0000)
struct FST_BulletFoodFacilityBackGround final
{
public:
	TSoftObjectPtr<class UTexture2D>              SynthesisShopBullet;                               // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SynthesisShopFood;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BulletFoodFacilityBackGround) == 0x000008, "Wrong alignment on FST_BulletFoodFacilityBackGround");
static_assert(sizeof(FST_BulletFoodFacilityBackGround) == 0x000050, "Wrong size on FST_BulletFoodFacilityBackGround");
static_assert(offsetof(FST_BulletFoodFacilityBackGround, SynthesisShopBullet) == 0x000000, "Member 'FST_BulletFoodFacilityBackGround::SynthesisShopBullet' has a wrong offset!");
static_assert(offsetof(FST_BulletFoodFacilityBackGround, SynthesisShopFood) == 0x000028, "Member 'FST_BulletFoodFacilityBackGround::SynthesisShopFood' has a wrong offset!");

// ScriptStruct DarwinGame.ST_BulletFoodFacilityMenu
// 0x0020 (0x0020 - 0x0000)
struct FST_BulletFoodFacilityMenu final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_BulletFoodFacilityMenu) == 0x000008, "Wrong alignment on FST_BulletFoodFacilityMenu");
static_assert(sizeof(FST_BulletFoodFacilityMenu) == 0x000020, "Wrong size on FST_BulletFoodFacilityMenu");
static_assert(offsetof(FST_BulletFoodFacilityMenu, Icon) == 0x000000, "Member 'FST_BulletFoodFacilityMenu::Icon' has a wrong offset!");
static_assert(offsetof(FST_BulletFoodFacilityMenu, Name) == 0x000008, "Member 'FST_BulletFoodFacilityMenu::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ShopMenu
// 0x0028 (0x0028 - 0x0000)
struct FST_ShopMenu final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ShopMenu) == 0x000008, "Wrong alignment on FST_ShopMenu");
static_assert(sizeof(FST_ShopMenu) == 0x000028, "Wrong size on FST_ShopMenu");
static_assert(offsetof(FST_ShopMenu, Icon) == 0x000000, "Member 'FST_ShopMenu::Icon' has a wrong offset!");
static_assert(offsetof(FST_ShopMenu, Name) == 0x000008, "Member 'FST_ShopMenu::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIKnowledeData
// 0x00B8 (0x00C0 - 0x0008)
struct FST_UIKnowledeData final : public FTableRowBase
{
public:
	EKnowledgeCategoryType                        KnowledgeCategory;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KnowledgeName;                                     // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CategoryText;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   TipsName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TipsID;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EventFlag;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KnowledgeTitle;                                    // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   KnowledgeTopbar;                                   // 0x0068(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   KnowledgeText;                                     // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              KnowledgeImage;                                    // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIKnowledeData) == 0x000008, "Wrong alignment on FST_UIKnowledeData");
static_assert(sizeof(FST_UIKnowledeData) == 0x0000C0, "Wrong size on FST_UIKnowledeData");
static_assert(offsetof(FST_UIKnowledeData, KnowledgeCategory) == 0x000008, "Member 'FST_UIKnowledeData::KnowledgeCategory' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, KnowledgeName) == 0x00000C, "Member 'FST_UIKnowledeData::KnowledgeName' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, CategoryText) == 0x000018, "Member 'FST_UIKnowledeData::CategoryText' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, TipsName) == 0x000030, "Member 'FST_UIKnowledeData::TipsName' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, TipsID) == 0x000038, "Member 'FST_UIKnowledeData::TipsID' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, EventFlag) == 0x000040, "Member 'FST_UIKnowledeData::EventFlag' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, KnowledgeTitle) == 0x000050, "Member 'FST_UIKnowledeData::KnowledgeTitle' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, KnowledgeTopbar) == 0x000068, "Member 'FST_UIKnowledeData::KnowledgeTopbar' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, KnowledgeText) == 0x000080, "Member 'FST_UIKnowledeData::KnowledgeText' has a wrong offset!");
static_assert(offsetof(FST_UIKnowledeData, KnowledgeImage) == 0x000098, "Member 'FST_UIKnowledeData::KnowledgeImage' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LeftMenu_7_UpDownDelta
// 0x0010 (0x0010 - 0x0000)
struct FST_LeftMenu_7_UpDownDelta final
{
public:
	class UUIStartLoopAnimation*                  Up;                                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIStartLoopAnimation*                  Down;                                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LeftMenu_7_UpDownDelta) == 0x000008, "Wrong alignment on FST_LeftMenu_7_UpDownDelta");
static_assert(sizeof(FST_LeftMenu_7_UpDownDelta) == 0x000010, "Wrong size on FST_LeftMenu_7_UpDownDelta");
static_assert(offsetof(FST_LeftMenu_7_UpDownDelta, Up) == 0x000000, "Member 'FST_LeftMenu_7_UpDownDelta::Up' has a wrong offset!");
static_assert(offsetof(FST_LeftMenu_7_UpDownDelta, Down) == 0x000008, "Member 'FST_LeftMenu_7_UpDownDelta::Down' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LeftMenu_8_UpDownDelta
// 0x0010 (0x0010 - 0x0000)
struct FST_LeftMenu_8_UpDownDelta final
{
public:
	class UUIStartLoopAnimation*                  Up;                                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIStartLoopAnimation*                  Down;                                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LeftMenu_8_UpDownDelta) == 0x000008, "Wrong alignment on FST_LeftMenu_8_UpDownDelta");
static_assert(sizeof(FST_LeftMenu_8_UpDownDelta) == 0x000010, "Wrong size on FST_LeftMenu_8_UpDownDelta");
static_assert(offsetof(FST_LeftMenu_8_UpDownDelta, Up) == 0x000000, "Member 'FST_LeftMenu_8_UpDownDelta::Up' has a wrong offset!");
static_assert(offsetof(FST_LeftMenu_8_UpDownDelta, Down) == 0x000008, "Member 'FST_LeftMenu_8_UpDownDelta::Down' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LeftMenuListData
// 0x0018 (0x0018 - 0x0000)
struct FST_LeftMenuListData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUICursor_PartymenuBase*                Panel;                                             // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_LeftMenuListData) == 0x000008, "Wrong alignment on FST_LeftMenuListData");
static_assert(sizeof(FST_LeftMenuListData) == 0x000018, "Wrong size on FST_LeftMenuListData");
static_assert(offsetof(FST_LeftMenuListData, Panel) == 0x000008, "Member 'FST_LeftMenuListData::Panel' has a wrong offset!");

// ScriptStruct DarwinGame.ST_LeftMenuTypePartsData
// 0x0028 (0x0028 - 0x0000)
struct FST_LeftMenuTypePartsData final
{
public:
	class UCanvasPanel*                           Root;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FST_LeftMenuListData>           Panels;                                            // 0x0008(0x0010)(ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       OpenAnim;                                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       CloseAnim;                                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_LeftMenuTypePartsData) == 0x000008, "Wrong alignment on FST_LeftMenuTypePartsData");
static_assert(sizeof(FST_LeftMenuTypePartsData) == 0x000028, "Wrong size on FST_LeftMenuTypePartsData");
static_assert(offsetof(FST_LeftMenuTypePartsData, Root) == 0x000000, "Member 'FST_LeftMenuTypePartsData::Root' has a wrong offset!");
static_assert(offsetof(FST_LeftMenuTypePartsData, Panels) == 0x000008, "Member 'FST_LeftMenuTypePartsData::Panels' has a wrong offset!");
static_assert(offsetof(FST_LeftMenuTypePartsData, OpenAnim) == 0x000018, "Member 'FST_LeftMenuTypePartsData::OpenAnim' has a wrong offset!");
static_assert(offsetof(FST_LeftMenuTypePartsData, CloseAnim) == 0x000020, "Member 'FST_LeftMenuTypePartsData::CloseAnim' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMainMenuHome
// 0x0028 (0x0030 - 0x0008)
struct FST_UIMainMenuHome final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   FastTravelID;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventFlag;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMainMenuHome) == 0x000008, "Wrong alignment on FST_UIMainMenuHome");
static_assert(sizeof(FST_UIMainMenuHome) == 0x000030, "Wrong size on FST_UIMainMenuHome");
static_assert(offsetof(FST_UIMainMenuHome, Name) == 0x000008, "Member 'FST_UIMainMenuHome::Name' has a wrong offset!");
static_assert(offsetof(FST_UIMainMenuHome, FastTravelID) == 0x000020, "Member 'FST_UIMainMenuHome::FastTravelID' has a wrong offset!");
static_assert(offsetof(FST_UIMainMenuHome, EventFlag) == 0x000028, "Member 'FST_UIMainMenuHome::EventFlag' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIManagedWidget
// 0x0038 (0x0040 - 0x0008)
struct FST_UIManagedWidget final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GroupFlag1;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GroupFlag2;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitCreateNum;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonCreateTest;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamicCreate;                                   // 0x003D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIManagedWidget) == 0x000008, "Wrong alignment on FST_UIManagedWidget");
static_assert(sizeof(FST_UIManagedWidget) == 0x000040, "Wrong size on FST_UIManagedWidget");
static_assert(offsetof(FST_UIManagedWidget, Class) == 0x000008, "Member 'FST_UIManagedWidget::Class' has a wrong offset!");
static_assert(offsetof(FST_UIManagedWidget, GroupFlag1) == 0x000030, "Member 'FST_UIManagedWidget::GroupFlag1' has a wrong offset!");
static_assert(offsetof(FST_UIManagedWidget, GroupFlag2) == 0x000034, "Member 'FST_UIManagedWidget::GroupFlag2' has a wrong offset!");
static_assert(offsetof(FST_UIManagedWidget, InitCreateNum) == 0x000038, "Member 'FST_UIManagedWidget::InitCreateNum' has a wrong offset!");
static_assert(offsetof(FST_UIManagedWidget, NonCreateTest) == 0x00003C, "Member 'FST_UIManagedWidget::NonCreateTest' has a wrong offset!");
static_assert(offsetof(FST_UIManagedWidget, IsDynamicCreate) == 0x00003D, "Member 'FST_UIManagedWidget::IsDynamicCreate' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ReserveDestroyWidget
// 0x0010 (0x0010 - 0x0000)
struct FST_ReserveDestroyWidget final
{
public:
	class UDarwinUserWidget*                      Widget;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ReserveDestroyWidget) == 0x000008, "Wrong alignment on FST_ReserveDestroyWidget");
static_assert(sizeof(FST_ReserveDestroyWidget) == 0x000010, "Wrong size on FST_ReserveDestroyWidget");
static_assert(offsetof(FST_ReserveDestroyWidget, Widget) == 0x000000, "Member 'FST_ReserveDestroyWidget::Widget' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MapIconDefaultSettingData
// 0x0020 (0x0020 - 0x0000)
struct FST_MapIconDefaultSettingData final
{
public:
	class UDataTable*                             SymbolData;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SymbolResourceData;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             MapIDData;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWorldMap;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MapIconDefaultSettingData) == 0x000008, "Wrong alignment on FST_MapIconDefaultSettingData");
static_assert(sizeof(FST_MapIconDefaultSettingData) == 0x000020, "Wrong size on FST_MapIconDefaultSettingData");
static_assert(offsetof(FST_MapIconDefaultSettingData, SymbolData) == 0x000000, "Member 'FST_MapIconDefaultSettingData::SymbolData' has a wrong offset!");
static_assert(offsetof(FST_MapIconDefaultSettingData, SymbolResourceData) == 0x000008, "Member 'FST_MapIconDefaultSettingData::SymbolResourceData' has a wrong offset!");
static_assert(offsetof(FST_MapIconDefaultSettingData, MapIDData) == 0x000010, "Member 'FST_MapIconDefaultSettingData::MapIDData' has a wrong offset!");
static_assert(offsetof(FST_MapIconDefaultSettingData, IsWorldMap) == 0x000018, "Member 'FST_MapIconDefaultSettingData::IsWorldMap' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapCursorJumpPoint
// 0x0008 (0x0010 - 0x0008)
struct FST_UIMapCursorJumpPoint final : public FTableRowBase
{
public:
	class FName                                   StationID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMapCursorJumpPoint) == 0x000008, "Wrong alignment on FST_UIMapCursorJumpPoint");
static_assert(sizeof(FST_UIMapCursorJumpPoint) == 0x000010, "Wrong size on FST_UIMapCursorJumpPoint");
static_assert(offsetof(FST_UIMapCursorJumpPoint, StationID) == 0x000008, "Member 'FST_UIMapCursorJumpPoint::StationID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapKindData
// 0x0078 (0x0080 - 0x0008)
struct FST_UIMapKindData final : public FTableRowBase
{
public:
	struct FVector                                FieldOriginLocation;                               // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FieldCMSize;                                       // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixedWindow;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MapCenterPosition;                                 // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapMoveRangeLeftUp;                                // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapMoveRangeRightDown;                             // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapFullSize;                                       // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MapScaleList;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 MapImageScaleList;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultScaleIndex;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScaleIndexRangeMin;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScaleIndexRangeMax;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanZoom;                                           // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCursorJump;                                     // 0x0075(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanMoveCursor;                                     // 0x0076(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanFloorChange;                                    // 0x0077(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanPlaceIcon;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanHideCategory;                                   // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDrawSymbol;                                      // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDrawSkyOnly;                                     // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnderButtonID;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMapKindData) == 0x000008, "Wrong alignment on FST_UIMapKindData");
static_assert(sizeof(FST_UIMapKindData) == 0x000080, "Wrong size on FST_UIMapKindData");
static_assert(offsetof(FST_UIMapKindData, FieldOriginLocation) == 0x000008, "Member 'FST_UIMapKindData::FieldOriginLocation' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, FieldCMSize) == 0x000014, "Member 'FST_UIMapKindData::FieldCMSize' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, IsFixedWindow) == 0x000020, "Member 'FST_UIMapKindData::IsFixedWindow' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, MapCenterPosition) == 0x000024, "Member 'FST_UIMapKindData::MapCenterPosition' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, MapMoveRangeLeftUp) == 0x00002C, "Member 'FST_UIMapKindData::MapMoveRangeLeftUp' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, MapMoveRangeRightDown) == 0x000034, "Member 'FST_UIMapKindData::MapMoveRangeRightDown' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, MapFullSize) == 0x00003C, "Member 'FST_UIMapKindData::MapFullSize' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, MapScaleList) == 0x000048, "Member 'FST_UIMapKindData::MapScaleList' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, MapImageScaleList) == 0x000058, "Member 'FST_UIMapKindData::MapImageScaleList' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, DefaultScaleIndex) == 0x000068, "Member 'FST_UIMapKindData::DefaultScaleIndex' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, ScaleIndexRangeMin) == 0x00006C, "Member 'FST_UIMapKindData::ScaleIndexRangeMin' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, ScaleIndexRangeMax) == 0x000070, "Member 'FST_UIMapKindData::ScaleIndexRangeMax' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, CanZoom) == 0x000074, "Member 'FST_UIMapKindData::CanZoom' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, CanCursorJump) == 0x000075, "Member 'FST_UIMapKindData::CanCursorJump' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, CanMoveCursor) == 0x000076, "Member 'FST_UIMapKindData::CanMoveCursor' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, CanFloorChange) == 0x000077, "Member 'FST_UIMapKindData::CanFloorChange' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, CanPlaceIcon) == 0x000078, "Member 'FST_UIMapKindData::CanPlaceIcon' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, CanHideCategory) == 0x000079, "Member 'FST_UIMapKindData::CanHideCategory' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, IsDrawSymbol) == 0x00007A, "Member 'FST_UIMapKindData::IsDrawSymbol' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, IsDrawSkyOnly) == 0x00007B, "Member 'FST_UIMapKindData::IsDrawSkyOnly' has a wrong offset!");
static_assert(offsetof(FST_UIMapKindData, UnderButtonID) == 0x00007C, "Member 'FST_UIMapKindData::UnderButtonID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MapAreaHitData
// 0x0010 (0x0018 - 0x0008)
struct FST_MapAreaHitData final : public FTableRowBase
{
public:
	int32                                         Color;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaID;                                            // 0x000C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_MapAreaHitData) == 0x000008, "Wrong alignment on FST_MapAreaHitData");
static_assert(sizeof(FST_MapAreaHitData) == 0x000018, "Wrong size on FST_MapAreaHitData");
static_assert(offsetof(FST_MapAreaHitData, Color) == 0x000008, "Member 'FST_MapAreaHitData::Color' has a wrong offset!");
static_assert(offsetof(FST_MapAreaHitData, AreaID) == 0x00000C, "Member 'FST_MapAreaHitData::AreaID' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactCategoryDrawPoint
// 0x0020 (0x0020 - 0x0000)
struct FST_ArtifactCategoryDrawPoint final
{
public:
	class FName                                   AreaID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPanelName;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawPoint;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_ArtifactCategoryDrawPoint) == 0x000004, "Wrong alignment on FST_ArtifactCategoryDrawPoint");
static_assert(sizeof(FST_ArtifactCategoryDrawPoint) == 0x000020, "Wrong size on FST_ArtifactCategoryDrawPoint");
static_assert(offsetof(FST_ArtifactCategoryDrawPoint, AreaID) == 0x000000, "Member 'FST_ArtifactCategoryDrawPoint::AreaID' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCategoryDrawPoint, WidgetName) == 0x000008, "Member 'FST_ArtifactCategoryDrawPoint::WidgetName' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCategoryDrawPoint, TargetPanelName) == 0x000010, "Member 'FST_ArtifactCategoryDrawPoint::TargetPanelName' has a wrong offset!");
static_assert(offsetof(FST_ArtifactCategoryDrawPoint, DrawPoint) == 0x000018, "Member 'FST_ArtifactCategoryDrawPoint::DrawPoint' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMapPlaceResource
// 0x0018 (0x0020 - 0x0008)
struct FST_UIMapPlaceResource final : public FTableRowBase
{
public:
	TSubclassOf<class UDarwinUserWidget>          MapPlaceWidgetClass;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ScaleDrawFlags;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMapPlaceResource) == 0x000008, "Wrong alignment on FST_UIMapPlaceResource");
static_assert(sizeof(FST_UIMapPlaceResource) == 0x000020, "Wrong size on FST_UIMapPlaceResource");
static_assert(offsetof(FST_UIMapPlaceResource, MapPlaceWidgetClass) == 0x000008, "Member 'FST_UIMapPlaceResource::MapPlaceWidgetClass' has a wrong offset!");
static_assert(offsetof(FST_UIMapPlaceResource, ScaleDrawFlags) == 0x000010, "Member 'FST_UIMapPlaceResource::ScaleDrawFlags' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SettingMenuCategory
// 0x0028 (0x0028 - 0x0000)
struct FST_SettingMenuCategory final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESettingCategory                              Category;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_SettingMenuCategory) == 0x000008, "Wrong alignment on FST_SettingMenuCategory");
static_assert(sizeof(FST_SettingMenuCategory) == 0x000028, "Wrong size on FST_SettingMenuCategory");
static_assert(offsetof(FST_SettingMenuCategory, Icon) == 0x000000, "Member 'FST_SettingMenuCategory::Icon' has a wrong offset!");
static_assert(offsetof(FST_SettingMenuCategory, Name) == 0x000008, "Member 'FST_SettingMenuCategory::Name' has a wrong offset!");
static_assert(offsetof(FST_SettingMenuCategory, Category) == 0x000020, "Member 'FST_SettingMenuCategory::Category' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SettingMenuCategoryList
// 0x0010 (0x0010 - 0x0000)
struct FST_SettingMenuCategoryList final
{
public:
	TArray<struct FST_SettingMenuCategory>        CategoryList;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_SettingMenuCategoryList) == 0x000008, "Wrong alignment on FST_SettingMenuCategoryList");
static_assert(sizeof(FST_SettingMenuCategoryList) == 0x000010, "Wrong size on FST_SettingMenuCategoryList");
static_assert(offsetof(FST_SettingMenuCategoryList, CategoryList) == 0x000000, "Member 'FST_SettingMenuCategoryList::CategoryList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMenuNavigationItem
// 0x0010 (0x0010 - 0x0000)
struct FST_UIMenuNavigationItem final
{
public:
	class UUIMenuItemBase*                        Itembase;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKeyRepeatFocus;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsKeyEdge;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIMenuNavigationItem) == 0x000008, "Wrong alignment on FST_UIMenuNavigationItem");
static_assert(sizeof(FST_UIMenuNavigationItem) == 0x000010, "Wrong size on FST_UIMenuNavigationItem");
static_assert(offsetof(FST_UIMenuNavigationItem, Itembase) == 0x000000, "Member 'FST_UIMenuNavigationItem::Itembase' has a wrong offset!");
static_assert(offsetof(FST_UIMenuNavigationItem, IsKeyRepeatFocus) == 0x000008, "Member 'FST_UIMenuNavigationItem::IsKeyRepeatFocus' has a wrong offset!");
static_assert(offsetof(FST_UIMenuNavigationItem, bIsKeyEdge) == 0x000009, "Member 'FST_UIMenuNavigationItem::bIsKeyEdge' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MenuStack
// 0x0008 (0x0008 - 0x0000)
struct FST_MenuStack final
{
public:
	class UDarwinUserWidget*                      Widget;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MenuStack) == 0x000008, "Wrong alignment on FST_MenuStack");
static_assert(sizeof(FST_MenuStack) == 0x000008, "Wrong size on FST_MenuStack");
static_assert(offsetof(FST_MenuStack, Widget) == 0x000000, "Member 'FST_MenuStack::Widget' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMonsterDictTriviaInfo
// 0x0020 (0x0020 - 0x0000)
struct FST_UIMonsterDictTriviaInfo final
{
public:
	int32                                         KillNum;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Trivia;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMonsterDictTriviaInfo) == 0x000008, "Wrong alignment on FST_UIMonsterDictTriviaInfo");
static_assert(sizeof(FST_UIMonsterDictTriviaInfo) == 0x000020, "Wrong size on FST_UIMonsterDictTriviaInfo");
static_assert(offsetof(FST_UIMonsterDictTriviaInfo, KillNum) == 0x000000, "Member 'FST_UIMonsterDictTriviaInfo::KillNum' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterDictTriviaInfo, Trivia) == 0x000008, "Member 'FST_UIMonsterDictTriviaInfo::Trivia' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMonsterDictInfo
// 0x0020 (0x0028 - 0x0008)
struct FST_UIMonsterDictInfo final : public FTableRowBase
{
public:
	TArray<struct FST_UIMonsterDictTriviaInfo>    TriviaList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendOnly;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomExists;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventFlagToReleaseInfo;                            // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIMonsterDictInfo) == 0x000008, "Wrong alignment on FST_UIMonsterDictInfo");
static_assert(sizeof(FST_UIMonsterDictInfo) == 0x000028, "Wrong size on FST_UIMonsterDictInfo");
static_assert(offsetof(FST_UIMonsterDictInfo, TriviaList) == 0x000008, "Member 'FST_UIMonsterDictInfo::TriviaList' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterDictInfo, bIsFriendOnly) == 0x000018, "Member 'FST_UIMonsterDictInfo::bIsFriendOnly' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterDictInfo, bCustomExists) == 0x000019, "Member 'FST_UIMonsterDictInfo::bCustomExists' has a wrong offset!");
static_assert(offsetof(FST_UIMonsterDictInfo, EventFlagToReleaseInfo) == 0x00001C, "Member 'FST_UIMonsterDictInfo::EventFlagToReleaseInfo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_MonsterIconParts
// 0x0050 (0x0050 - 0x0000)
struct FST_MonsterIconParts final
{
public:
	EMonsterIconType                              Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 IconImage;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                 BaseMaterialParamInfo;                             // 0x0010(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                 Parts1MaterialParamInfo;                           // 0x0020(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                 Parts2MaterialParamInfo;                           // 0x0030(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                 Parts3MaterialParamInfo;                           // 0x0040(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_MonsterIconParts) == 0x000008, "Wrong alignment on FST_MonsterIconParts");
static_assert(sizeof(FST_MonsterIconParts) == 0x000050, "Wrong size on FST_MonsterIconParts");
static_assert(offsetof(FST_MonsterIconParts, Type) == 0x000000, "Member 'FST_MonsterIconParts::Type' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconParts, IconImage) == 0x000008, "Member 'FST_MonsterIconParts::IconImage' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconParts, BaseMaterialParamInfo) == 0x000010, "Member 'FST_MonsterIconParts::BaseMaterialParamInfo' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconParts, Parts1MaterialParamInfo) == 0x000020, "Member 'FST_MonsterIconParts::Parts1MaterialParamInfo' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconParts, Parts2MaterialParamInfo) == 0x000030, "Member 'FST_MonsterIconParts::Parts2MaterialParamInfo' has a wrong offset!");
static_assert(offsetof(FST_MonsterIconParts, Parts3MaterialParamInfo) == 0x000040, "Member 'FST_MonsterIconParts::Parts3MaterialParamInfo' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMonsterSpecialAbilityName
// 0x0028 (0x0030 - 0x0008)
struct FST_UIMonsterSpecialAbilityName final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMonsterSpecialAbilityName) == 0x000008, "Wrong alignment on FST_UIMonsterSpecialAbilityName");
static_assert(sizeof(FST_UIMonsterSpecialAbilityName) == 0x000030, "Wrong size on FST_UIMonsterSpecialAbilityName");
static_assert(offsetof(FST_UIMonsterSpecialAbilityName, WidgetClass) == 0x000008, "Member 'FST_UIMonsterSpecialAbilityName::WidgetClass' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMyTeamThomassonResource
// 0x0030 (0x0038 - 0x0008)
struct FST_UIMyTeamThomassonResource final : public FTableRowBase
{
public:
	class FName                                   PanelName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMyTeamThomassonResource) == 0x000008, "Wrong alignment on FST_UIMyTeamThomassonResource");
static_assert(sizeof(FST_UIMyTeamThomassonResource) == 0x000038, "Wrong size on FST_UIMyTeamThomassonResource");
static_assert(offsetof(FST_UIMyTeamThomassonResource, PanelName) == 0x000008, "Member 'FST_UIMyTeamThomassonResource::PanelName' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamThomassonResource, SoftTexture) == 0x000010, "Member 'FST_UIMyTeamThomassonResource::SoftTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMyTeamMenuFukidashiData
// 0x0028 (0x0030 - 0x0008)
struct FST_UIMyTeamMenuFukidashiData final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LowPercent;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HignPercent;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowRank;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighRank;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMyTeamMenuFukidashiData) == 0x000008, "Wrong alignment on FST_UIMyTeamMenuFukidashiData");
static_assert(sizeof(FST_UIMyTeamMenuFukidashiData) == 0x000030, "Wrong size on FST_UIMyTeamMenuFukidashiData");
static_assert(offsetof(FST_UIMyTeamMenuFukidashiData, Text) == 0x000008, "Member 'FST_UIMyTeamMenuFukidashiData::Text' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFukidashiData, LowPercent) == 0x000020, "Member 'FST_UIMyTeamMenuFukidashiData::LowPercent' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFukidashiData, HignPercent) == 0x000024, "Member 'FST_UIMyTeamMenuFukidashiData::HignPercent' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFukidashiData, LowRank) == 0x000028, "Member 'FST_UIMyTeamMenuFukidashiData::LowRank' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFukidashiData, HighRank) == 0x00002C, "Member 'FST_UIMyTeamMenuFukidashiData::HighRank' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIMyTeamMenuFacilityData
// 0x0040 (0x0048 - 0x0008)
struct FST_UIMyTeamMenuFacilityData final : public FTableRowBase
{
public:
	class FName                                   EventFlagID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventFlagID_Sub;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PanelName;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIMyTeamMenuFacilityData) == 0x000008, "Wrong alignment on FST_UIMyTeamMenuFacilityData");
static_assert(sizeof(FST_UIMyTeamMenuFacilityData) == 0x000048, "Wrong size on FST_UIMyTeamMenuFacilityData");
static_assert(offsetof(FST_UIMyTeamMenuFacilityData, EventFlagID) == 0x000008, "Member 'FST_UIMyTeamMenuFacilityData::EventFlagID' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFacilityData, EventFlagID_Sub) == 0x000010, "Member 'FST_UIMyTeamMenuFacilityData::EventFlagID_Sub' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFacilityData, PanelName) == 0x000018, "Member 'FST_UIMyTeamMenuFacilityData::PanelName' has a wrong offset!");
static_assert(offsetof(FST_UIMyTeamMenuFacilityData, Texture) == 0x000020, "Member 'FST_UIMyTeamMenuFacilityData::Texture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UINameBoxData
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FST_UINameBoxData final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UINameBoxData) == 0x000008, "Wrong alignment on FST_UINameBoxData");
static_assert(sizeof(FST_UINameBoxData) == 0x000068, "Wrong size on FST_UINameBoxData");

// ScriptStruct DarwinGame.ST_UINpcData
// 0x0040 (0x0048 - 0x0008)
struct FST_UINpcData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QuestOrderTitle;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UINpcData) == 0x000008, "Wrong alignment on FST_UINpcData");
static_assert(sizeof(FST_UINpcData) == 0x000048, "Wrong size on FST_UINpcData");
static_assert(offsetof(FST_UINpcData, IconTexture) == 0x000008, "Member 'FST_UINpcData::IconTexture' has a wrong offset!");
static_assert(offsetof(FST_UINpcData, QuestOrderTitle) == 0x000030, "Member 'FST_UINpcData::QuestOrderTitle' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_Category_Data
// 0x0020 (0x0038 - 0x0018)
struct FST_PM_DetaileWin_Category_Data final : public FST_PM_DetaileWin_ArtifactDrop_Data
{
public:
	class UTexture2D*                             Icon;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Category;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_Category_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_Category_Data");
static_assert(sizeof(FST_PM_DetaileWin_Category_Data) == 0x000038, "Wrong size on FST_PM_DetaileWin_Category_Data");
static_assert(offsetof(FST_PM_DetaileWin_Category_Data, Icon) == 0x000018, "Member 'FST_PM_DetaileWin_Category_Data::Icon' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Category_Data, Category) == 0x000020, "Member 'FST_PM_DetaileWin_Category_Data::Category' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_ArtifactHave_Data
// 0x0020 (0x0020 - 0x0000)
struct FST_PM_DetaileWin_ArtifactHave_Data final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BodyText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_ArtifactHave_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_ArtifactHave_Data");
static_assert(sizeof(FST_PM_DetaileWin_ArtifactHave_Data) == 0x000020, "Wrong size on FST_PM_DetaileWin_ArtifactHave_Data");
static_assert(offsetof(FST_PM_DetaileWin_ArtifactHave_Data, Value) == 0x000000, "Member 'FST_PM_DetaileWin_ArtifactHave_Data::Value' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_ArtifactHave_Data, BodyText) == 0x000008, "Member 'FST_PM_DetaileWin_ArtifactHave_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_ItemB_Data
// 0x0040 (0x0040 - 0x0000)
struct FST_PM_DetaileWin_ItemB_Data
{
public:
	class UTexture2D*                             IconItem;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SatisfactGauge;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BodyText;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_ItemB_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_ItemB_Data");
static_assert(sizeof(FST_PM_DetaileWin_ItemB_Data) == 0x000040, "Wrong size on FST_PM_DetaileWin_ItemB_Data");
static_assert(offsetof(FST_PM_DetaileWin_ItemB_Data, IconItem) == 0x000000, "Member 'FST_PM_DetaileWin_ItemB_Data::IconItem' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_ItemB_Data, ItemName) == 0x000008, "Member 'FST_PM_DetaileWin_ItemB_Data::ItemName' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_ItemB_Data, SatisfactGauge) == 0x000020, "Member 'FST_PM_DetaileWin_ItemB_Data::SatisfactGauge' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_ItemB_Data, BodyText) == 0x000028, "Member 'FST_PM_DetaileWin_ItemB_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_ItemA_Data
// 0x0008 (0x0048 - 0x0040)
struct FST_PM_DetaileWin_ItemA_Data final : public FST_PM_DetaileWin_ItemB_Data
{
public:
	int32                                         Rank;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKira;                                            // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_PM_DetaileWin_ItemA_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_ItemA_Data");
static_assert(sizeof(FST_PM_DetaileWin_ItemA_Data) == 0x000048, "Wrong size on FST_PM_DetaileWin_ItemA_Data");
static_assert(offsetof(FST_PM_DetaileWin_ItemA_Data, Rank) == 0x000040, "Member 'FST_PM_DetaileWin_ItemA_Data::Rank' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_ItemA_Data, IsKira) == 0x000044, "Member 'FST_PM_DetaileWin_ItemA_Data::IsKira' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_Attribute_Data
// 0x0038 (0x0038 - 0x0000)
struct FST_PM_DetaileWin_Attribute_Data final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AttributeName;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BodyText;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_Attribute_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_Attribute_Data");
static_assert(sizeof(FST_PM_DetaileWin_Attribute_Data) == 0x000038, "Wrong size on FST_PM_DetaileWin_Attribute_Data");
static_assert(offsetof(FST_PM_DetaileWin_Attribute_Data, Icon) == 0x000000, "Member 'FST_PM_DetaileWin_Attribute_Data::Icon' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Attribute_Data, AttributeName) == 0x000008, "Member 'FST_PM_DetaileWin_Attribute_Data::AttributeName' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Attribute_Data, BodyText) == 0x000020, "Member 'FST_PM_DetaileWin_Attribute_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_PM_DetaileWin_Skill_Data
// 0x0048 (0x0048 - 0x0000)
struct FST_PM_DetaileWin_Skill_Data final
{
public:
	TArray<class UTexture2D*>                     IconS;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ActionName;                                        // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EActionTargetType                             ActionTargetType;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredMP;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BodyText;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_PM_DetaileWin_Skill_Data) == 0x000008, "Wrong alignment on FST_PM_DetaileWin_Skill_Data");
static_assert(sizeof(FST_PM_DetaileWin_Skill_Data) == 0x000048, "Wrong size on FST_PM_DetaileWin_Skill_Data");
static_assert(offsetof(FST_PM_DetaileWin_Skill_Data, IconS) == 0x000000, "Member 'FST_PM_DetaileWin_Skill_Data::IconS' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Skill_Data, ActionName) == 0x000010, "Member 'FST_PM_DetaileWin_Skill_Data::ActionName' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Skill_Data, ActionTargetType) == 0x000028, "Member 'FST_PM_DetaileWin_Skill_Data::ActionTargetType' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Skill_Data, RequiredMP) == 0x00002C, "Member 'FST_PM_DetaileWin_Skill_Data::RequiredMP' has a wrong offset!");
static_assert(offsetof(FST_PM_DetaileWin_Skill_Data, BodyText) == 0x000030, "Member 'FST_PM_DetaileWin_Skill_Data::BodyText' has a wrong offset!");

// ScriptStruct DarwinGame.ST_StatusMenuType
// 0x0020 (0x0020 - 0x0000)
struct FST_StatusMenuType final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_StatusMenuType) == 0x000008, "Wrong alignment on FST_StatusMenuType");
static_assert(sizeof(FST_StatusMenuType) == 0x000020, "Wrong size on FST_StatusMenuType");
static_assert(offsetof(FST_StatusMenuType, Icon) == 0x000000, "Member 'FST_StatusMenuType::Icon' has a wrong offset!");
static_assert(offsetof(FST_StatusMenuType, Name) == 0x000008, "Member 'FST_StatusMenuType::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIQuestDataTextInfo
// 0x0018 (0x0018 - 0x0000)
struct FST_UIQuestDataTextInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             TextBlock;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USideScrollTextBlock*                   ScrollBlock;                                       // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIQuestDataTextInfo) == 0x000008, "Wrong alignment on FST_UIQuestDataTextInfo");
static_assert(sizeof(FST_UIQuestDataTextInfo) == 0x000018, "Wrong size on FST_UIQuestDataTextInfo");
static_assert(offsetof(FST_UIQuestDataTextInfo, TextBlock) == 0x000008, "Member 'FST_UIQuestDataTextInfo::TextBlock' has a wrong offset!");
static_assert(offsetof(FST_UIQuestDataTextInfo, ScrollBlock) == 0x000010, "Member 'FST_UIQuestDataTextInfo::ScrollBlock' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIQuestCategoryData
// 0x0018 (0x0020 - 0x0008)
struct FST_UIQuestCategoryData final : public FTableRowBase
{
public:
	class FText                                   CategoryName;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIQuestCategoryData) == 0x000008, "Wrong alignment on FST_UIQuestCategoryData");
static_assert(sizeof(FST_UIQuestCategoryData) == 0x000020, "Wrong size on FST_UIQuestCategoryData");
static_assert(offsetof(FST_UIQuestCategoryData, CategoryName) == 0x000008, "Member 'FST_UIQuestCategoryData::CategoryName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_QuestMenuCategory
// 0x0030 (0x0030 - 0x0000)
struct FST_QuestMenuCategory final
{
public:
	EQuestCategory                                Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          HasSubCategory;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_QuestMenuCategory) == 0x000008, "Wrong alignment on FST_QuestMenuCategory");
static_assert(sizeof(FST_QuestMenuCategory) == 0x000030, "Wrong size on FST_QuestMenuCategory");
static_assert(offsetof(FST_QuestMenuCategory, Category) == 0x000000, "Member 'FST_QuestMenuCategory::Category' has a wrong offset!");
static_assert(offsetof(FST_QuestMenuCategory, Icon) == 0x000008, "Member 'FST_QuestMenuCategory::Icon' has a wrong offset!");
static_assert(offsetof(FST_QuestMenuCategory, Name) == 0x000010, "Member 'FST_QuestMenuCategory::Name' has a wrong offset!");
static_assert(offsetof(FST_QuestMenuCategory, HasSubCategory) == 0x000028, "Member 'FST_QuestMenuCategory::HasSubCategory' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIQuestOverviewDictData
// 0x0028 (0x0030 - 0x0008)
struct FST_UIQuestOverviewDictData final : public FTableRowBase
{
public:
	class FText                                   TitleText;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestIDs;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIQuestOverviewDictData) == 0x000008, "Wrong alignment on FST_UIQuestOverviewDictData");
static_assert(sizeof(FST_UIQuestOverviewDictData) == 0x000030, "Wrong size on FST_UIQuestOverviewDictData");
static_assert(offsetof(FST_UIQuestOverviewDictData, TitleText) == 0x000008, "Member 'FST_UIQuestOverviewDictData::TitleText' has a wrong offset!");
static_assert(offsetof(FST_UIQuestOverviewDictData, QuestIDs) == 0x000020, "Member 'FST_UIQuestOverviewDictData::QuestIDs' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIResourceStatusIcon
// 0x0020 (0x0028 - 0x0008)
struct FST_UIResourceStatusIcon final : public FTableRowBase
{
public:
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIResourceStatusIcon) == 0x000008, "Wrong alignment on FST_UIResourceStatusIcon");
static_assert(sizeof(FST_UIResourceStatusIcon) == 0x000028, "Wrong size on FST_UIResourceStatusIcon");
static_assert(offsetof(FST_UIResourceStatusIcon, Texture) == 0x000008, "Member 'FST_UIResourceStatusIcon::Texture' has a wrong offset!");
static_assert(offsetof(FST_UIResourceStatusIcon, Name) == 0x000010, "Member 'FST_UIResourceStatusIcon::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIResource
// 0x0008 (0x0010 - 0x0008)
struct FST_UIResource final : public FTableRowBase
{
public:
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIResource) == 0x000008, "Wrong alignment on FST_UIResource");
static_assert(sizeof(FST_UIResource) == 0x000010, "Wrong size on FST_UIResource");
static_assert(offsetof(FST_UIResource, Texture) == 0x000008, "Member 'FST_UIResource::Texture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIRivalTeamFlag
// 0x0030 (0x0038 - 0x0008)
struct FST_UIRivalTeamFlag final : public FTableRowBase
{
public:
	ERivalTeamForce                               RivalTeam;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              FlagTexture;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIRivalTeamFlag) == 0x000008, "Wrong alignment on FST_UIRivalTeamFlag");
static_assert(sizeof(FST_UIRivalTeamFlag) == 0x000038, "Wrong size on FST_UIRivalTeamFlag");
static_assert(offsetof(FST_UIRivalTeamFlag, RivalTeam) == 0x000008, "Member 'FST_UIRivalTeamFlag::RivalTeam' has a wrong offset!");
static_assert(offsetof(FST_UIRivalTeamFlag, FlagTexture) == 0x000010, "Member 'FST_UIRivalTeamFlag::FlagTexture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_Reticle
// 0x0030 (0x0038 - 0x0008)
struct FST_Reticle final : public FTableRowBase
{
public:
	class UTexture2D*                             Circle;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Point;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Top;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Bottom;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Left;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Right;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_Reticle) == 0x000008, "Wrong alignment on FST_Reticle");
static_assert(sizeof(FST_Reticle) == 0x000038, "Wrong size on FST_Reticle");
static_assert(offsetof(FST_Reticle, Circle) == 0x000008, "Member 'FST_Reticle::Circle' has a wrong offset!");
static_assert(offsetof(FST_Reticle, Point) == 0x000010, "Member 'FST_Reticle::Point' has a wrong offset!");
static_assert(offsetof(FST_Reticle, Top) == 0x000018, "Member 'FST_Reticle::Top' has a wrong offset!");
static_assert(offsetof(FST_Reticle, Bottom) == 0x000020, "Member 'FST_Reticle::Bottom' has a wrong offset!");
static_assert(offsetof(FST_Reticle, Left) == 0x000028, "Member 'FST_Reticle::Left' has a wrong offset!");
static_assert(offsetof(FST_Reticle, Right) == 0x000030, "Member 'FST_Reticle::Right' has a wrong offset!");

// ScriptStruct DarwinGame.ST_SlingShotCategory
// 0x0020 (0x0020 - 0x0000)
struct FST_SlingShotCategory final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GroupArray;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletDisplayType                            CategoryType;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_SlingShotCategory) == 0x000008, "Wrong alignment on FST_SlingShotCategory");
static_assert(sizeof(FST_SlingShotCategory) == 0x000020, "Wrong size on FST_SlingShotCategory");
static_assert(offsetof(FST_SlingShotCategory, Index) == 0x000000, "Member 'FST_SlingShotCategory::Index' has a wrong offset!");
static_assert(offsetof(FST_SlingShotCategory, GroupArray) == 0x000008, "Member 'FST_SlingShotCategory::GroupArray' has a wrong offset!");
static_assert(offsetof(FST_SlingShotCategory, CategoryType) == 0x000018, "Member 'FST_SlingShotCategory::CategoryType' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIStaffRollMemoryResource
// 0x0008 (0x0010 - 0x0008)
struct FST_UIStaffRollMemoryResource final : public FTableRowBase
{
public:
	class UTexture2D*                             Picture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIStaffRollMemoryResource) == 0x000008, "Wrong alignment on FST_UIStaffRollMemoryResource");
static_assert(sizeof(FST_UIStaffRollMemoryResource) == 0x000010, "Wrong size on FST_UIStaffRollMemoryResource");
static_assert(offsetof(FST_UIStaffRollMemoryResource, Picture) == 0x000008, "Member 'FST_UIStaffRollMemoryResource::Picture' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIStampData
// 0x0018 (0x0020 - 0x0008)
struct FST_UIStampData final : public FTableRowBase
{
public:
	TSubclassOf<class UDarwinUserWidget>          WidgetClass;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDarwinUserWidget>          FrameRightClass;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDarwinUserWidget>          FrameLeftClass;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIStampData) == 0x000008, "Wrong alignment on FST_UIStampData");
static_assert(sizeof(FST_UIStampData) == 0x000020, "Wrong size on FST_UIStampData");
static_assert(offsetof(FST_UIStampData, WidgetClass) == 0x000008, "Member 'FST_UIStampData::WidgetClass' has a wrong offset!");
static_assert(offsetof(FST_UIStampData, FrameRightClass) == 0x000010, "Member 'FST_UIStampData::FrameRightClass' has a wrong offset!");
static_assert(offsetof(FST_UIStampData, FrameLeftClass) == 0x000018, "Member 'FST_UIStampData::FrameLeftClass' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIStationMessengerData
// 0x0038 (0x0040 - 0x0008)
struct FST_UIStationMessengerData final : public FTableRowBase
{
public:
	class FName                                   FlagName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerID;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStationMenuOpenState                         OpenState;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Classification;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LargeCategory;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextMessage;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIStationMessengerData) == 0x000008, "Wrong alignment on FST_UIStationMessengerData");
static_assert(sizeof(FST_UIStationMessengerData) == 0x000040, "Wrong size on FST_UIStationMessengerData");
static_assert(offsetof(FST_UIStationMessengerData, FlagName) == 0x000008, "Member 'FST_UIStationMessengerData::FlagName' has a wrong offset!");
static_assert(offsetof(FST_UIStationMessengerData, PlayerID) == 0x000010, "Member 'FST_UIStationMessengerData::PlayerID' has a wrong offset!");
static_assert(offsetof(FST_UIStationMessengerData, OpenState) == 0x000018, "Member 'FST_UIStationMessengerData::OpenState' has a wrong offset!");
static_assert(offsetof(FST_UIStationMessengerData, Classification) == 0x00001C, "Member 'FST_UIStationMessengerData::Classification' has a wrong offset!");
static_assert(offsetof(FST_UIStationMessengerData, LargeCategory) == 0x000020, "Member 'FST_UIStationMessengerData::LargeCategory' has a wrong offset!");
static_assert(offsetof(FST_UIStationMessengerData, TextMessage) == 0x000028, "Member 'FST_UIStationMessengerData::TextMessage' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIStatusBaseDataTable
// 0x0028 (0x0030 - 0x0008)
struct FST_UIStatusBaseDataTable final : public FTableRowBase
{
public:
	int32                                         TypeNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIStatusBaseDataTable) == 0x000008, "Wrong alignment on FST_UIStatusBaseDataTable");
static_assert(sizeof(FST_UIStatusBaseDataTable) == 0x000030, "Wrong size on FST_UIStatusBaseDataTable");
static_assert(offsetof(FST_UIStatusBaseDataTable, TypeNum) == 0x000008, "Member 'FST_UIStatusBaseDataTable::TypeNum' has a wrong offset!");
static_assert(offsetof(FST_UIStatusBaseDataTable, Icon) == 0x000010, "Member 'FST_UIStatusBaseDataTable::Icon' has a wrong offset!");
static_assert(offsetof(FST_UIStatusBaseDataTable, Name) == 0x000018, "Member 'FST_UIStatusBaseDataTable::Name' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UITeamMenuItemStruct
// 0x0028 (0x0028 - 0x0000)
struct FST_UITeamMenuItemStruct final
{
public:
	EUITeamMenuItemType                           Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class FName                                   AnimName;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UITeamMenuItemStruct) == 0x000008, "Wrong alignment on FST_UITeamMenuItemStruct");
static_assert(sizeof(FST_UITeamMenuItemStruct) == 0x000028, "Wrong size on FST_UITeamMenuItemStruct");
static_assert(offsetof(FST_UITeamMenuItemStruct, Type) == 0x000000, "Member 'FST_UITeamMenuItemStruct::Type' has a wrong offset!");
static_assert(offsetof(FST_UITeamMenuItemStruct, Name) == 0x000008, "Member 'FST_UITeamMenuItemStruct::Name' has a wrong offset!");
static_assert(offsetof(FST_UITeamMenuItemStruct, AnimName) == 0x000020, "Member 'FST_UITeamMenuItemStruct::AnimName' has a wrong offset!");

// ScriptStruct DarwinGame.ST_TextColorInfo
// 0x0010 (0x0018 - 0x0008)
struct FST_TextColorInfo final : public FTableRowBase
{
public:
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_TextColorInfo) == 0x000008, "Wrong alignment on FST_TextColorInfo");
static_assert(sizeof(FST_TextColorInfo) == 0x000018, "Wrong size on FST_TextColorInfo");
static_assert(offsetof(FST_TextColorInfo, Color) == 0x000008, "Member 'FST_TextColorInfo::Color' has a wrong offset!");

// ScriptStruct DarwinGame.ST_ArtifactCompInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FST_ArtifactCompInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_ArtifactCompInfo) == 0x000004, "Wrong alignment on FST_ArtifactCompInfo");
static_assert(sizeof(FST_ArtifactCompInfo) == 0x00000C, "Wrong size on FST_ArtifactCompInfo");

// ScriptStruct DarwinGame.ST_UITutorialGuideData
// 0x0018 (0x0020 - 0x0008)
struct FST_UITutorialGuideData final : public FTableRowBase
{
public:
	bool                                          IsDrawBattle;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETutorialGuideType>                    GuideList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UITutorialGuideData) == 0x000008, "Wrong alignment on FST_UITutorialGuideData");
static_assert(sizeof(FST_UITutorialGuideData) == 0x000020, "Wrong size on FST_UITutorialGuideData");
static_assert(offsetof(FST_UITutorialGuideData, IsDrawBattle) == 0x000008, "Member 'FST_UITutorialGuideData::IsDrawBattle' has a wrong offset!");
static_assert(offsetof(FST_UITutorialGuideData, GuideList) == 0x000010, "Member 'FST_UITutorialGuideData::GuideList' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UITutorialVision
// 0x0010 (0x0018 - 0x0008)
struct FST_UITutorialVision final : public FTableRowBase
{
public:
	TArray<struct FST_UITutorialVisionData>       VisionDatas;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UITutorialVision) == 0x000008, "Wrong alignment on FST_UITutorialVision");
static_assert(sizeof(FST_UITutorialVision) == 0x000018, "Wrong size on FST_UITutorialVision");
static_assert(offsetof(FST_UITutorialVision, VisionDatas) == 0x000008, "Member 'FST_UITutorialVision::VisionDatas' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIUnderButtonIcon
// 0x0010 (0x0018 - 0x0008)
struct FST_UIUnderButtonIcon final : public FTableRowBase
{
public:
	class UTexture2D*                             ButtonTexture;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_UIUnderButtonIcon) == 0x000008, "Wrong alignment on FST_UIUnderButtonIcon");
static_assert(sizeof(FST_UIUnderButtonIcon) == 0x000018, "Wrong size on FST_UIUnderButtonIcon");
static_assert(offsetof(FST_UIUnderButtonIcon, ButtonTexture) == 0x000008, "Member 'FST_UIUnderButtonIcon::ButtonTexture' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonIcon, Width) == 0x000010, "Member 'FST_UIUnderButtonIcon::Width' has a wrong offset!");
static_assert(offsetof(FST_UIUnderButtonIcon, Height) == 0x000014, "Member 'FST_UIUnderButtonIcon::Height' has a wrong offset!");

// ScriptStruct DarwinGame.UnknownArtifactEffectResources
// 0x0010 (0x0010 - 0x0000)
struct FUnknownArtifactEffectResources final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnknownArtifactEffectResources) == 0x000008, "Wrong alignment on FUnknownArtifactEffectResources");
static_assert(sizeof(FUnknownArtifactEffectResources) == 0x000010, "Wrong size on FUnknownArtifactEffectResources");
static_assert(offsetof(FUnknownArtifactEffectResources, Texture) == 0x000000, "Member 'FUnknownArtifactEffectResources::Texture' has a wrong offset!");
static_assert(offsetof(FUnknownArtifactEffectResources, Material) == 0x000008, "Member 'FUnknownArtifactEffectResources::Material' has a wrong offset!");

// ScriptStruct DarwinGame.ST_VisionPanelFrame
// 0x0010 (0x0010 - 0x0000)
struct FST_VisionPanelFrame final
{
public:
	class UTexture2D*                             BaseFrame;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             EffFrame;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FST_VisionPanelFrame) == 0x000008, "Wrong alignment on FST_VisionPanelFrame");
static_assert(sizeof(FST_VisionPanelFrame) == 0x000010, "Wrong size on FST_VisionPanelFrame");
static_assert(offsetof(FST_VisionPanelFrame, BaseFrame) == 0x000000, "Member 'FST_VisionPanelFrame::BaseFrame' has a wrong offset!");
static_assert(offsetof(FST_VisionPanelFrame, EffFrame) == 0x000008, "Member 'FST_VisionPanelFrame::EffFrame' has a wrong offset!");

// ScriptStruct DarwinGame.ST_UIWinMenu_SH_02_NameData
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FST_UIWinMenu_SH_02_NameData final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FST_UIWinMenu_SH_02_NameData) == 0x000008, "Wrong alignment on FST_UIWinMenu_SH_02_NameData");
static_assert(sizeof(FST_UIWinMenu_SH_02_NameData) == 0x0000B8, "Wrong size on FST_UIWinMenu_SH_02_NameData");

}

