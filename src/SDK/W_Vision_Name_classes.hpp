#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Vision_Name

#include "Basic.hpp"

#include "DarwinGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Vision_Name.W_Vision_Name_C
// 0x0030 (0x04C0 - 0x0490)
class UW_Vision_Name_C final : public UUIVision_Name
{
public:
	class UWidgetAnimation*                       Pos_Right;                                         // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Pos_Center;                                        // 0x0498(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Pos_Left;                                          // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_C;                                           // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_L;                                           // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_R;                                           // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Vision_Name_C">();
	}
	static class UW_Vision_Name_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Vision_Name_C>();
	}
};
static_assert(alignof(UW_Vision_Name_C) == 0x000008, "Wrong alignment on UW_Vision_Name_C");
static_assert(sizeof(UW_Vision_Name_C) == 0x0004C0, "Wrong size on UW_Vision_Name_C");
static_assert(offsetof(UW_Vision_Name_C, Pos_Right) == 0x000490, "Member 'UW_Vision_Name_C::Pos_Right' has a wrong offset!");
static_assert(offsetof(UW_Vision_Name_C, Pos_Center) == 0x000498, "Member 'UW_Vision_Name_C::Pos_Center' has a wrong offset!");
static_assert(offsetof(UW_Vision_Name_C, Pos_Left) == 0x0004A0, "Member 'UW_Vision_Name_C::Pos_Left' has a wrong offset!");
static_assert(offsetof(UW_Vision_Name_C, Image_C) == 0x0004A8, "Member 'UW_Vision_Name_C::Image_C' has a wrong offset!");
static_assert(offsetof(UW_Vision_Name_C, Image_L) == 0x0004B0, "Member 'UW_Vision_Name_C::Image_L' has a wrong offset!");
static_assert(offsetof(UW_Vision_Name_C, Image_R) == 0x0004B8, "Member 'UW_Vision_Name_C::Image_R' has a wrong offset!");

}

