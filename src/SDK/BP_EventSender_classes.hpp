#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventSender

#include "Basic.hpp"

#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventSender.BP_EventSender_C
// 0x0030 (0x00F8 - 0x00C8)
class UBP_EventSender_C final : public UEventSender
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EInputGuideType                               ActionType;                                        // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpenedIcon;                                      // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOnceOpenIcon;                                    // 0x00D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LIFT_NOT_RELEASE_000;                              // 0x00D4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LIFT_MOVE_000;                                     // 0x00DC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveTime;                                          // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForceMovePostion;                                  // 0x00E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EventSender(int32 EntryPoint);
	void CallPlayEvent(const class FString& EventID_0, EEventType EventType, class FName QuestID, EQuestState QuestState, const struct FST_EventTalktBranchData& TextBranchData, const TArray<struct FST_TextGoto>& TextGotoData, class AActor* Sender);
	void SendEvent(class FName EventID_0, class UActorComponent* Sender, bool DebugMode);
	void SetEventSendNpc(class ABP_NPC_C* SendActor);
	void SendLiftEvent(class UBP_EventSender_C* EventSender, int32 LiftId, class FName StarScarId);
	void ReceiveBeginPlay();
	void CallForceMoveEvent(const class FName& CallEventID, const struct FVector& MovePostion, const float& MoveTime_0);
	void CallLiftEvent(int32 LiftId, class FName StarScarId);
	void CallSendEvent();
	void CallEndOverlapEvent();
	void EndOverlapEventTrigger();
	void EndPlayEvent(bool IsEventCancel);
	void OpenFieldIconAction(EInputGuideType ActionType_0);
	void CloseFieldIconAction();
	void CanSendEvent(bool* return_0);
	void GetEventPlayFlag(bool* IsPlay);
	void SetEventPlayFlag(bool IsPlay);

	bool Can_Forced_Battle_Event() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventSender_C">();
	}
	static class UBP_EventSender_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_EventSender_C>();
	}
};
static_assert(alignof(UBP_EventSender_C) == 0x000008, "Wrong alignment on UBP_EventSender_C");
static_assert(sizeof(UBP_EventSender_C) == 0x0000F8, "Wrong size on UBP_EventSender_C");
static_assert(offsetof(UBP_EventSender_C, UberGraphFrame) == 0x0000C8, "Member 'UBP_EventSender_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_EventSender_C, ActionType) == 0x0000D0, "Member 'UBP_EventSender_C::ActionType' has a wrong offset!");
static_assert(offsetof(UBP_EventSender_C, IsOpenedIcon) == 0x0000D1, "Member 'UBP_EventSender_C::IsOpenedIcon' has a wrong offset!");
static_assert(offsetof(UBP_EventSender_C, IsOnceOpenIcon) == 0x0000D2, "Member 'UBP_EventSender_C::IsOnceOpenIcon' has a wrong offset!");
static_assert(offsetof(UBP_EventSender_C, LIFT_NOT_RELEASE_000) == 0x0000D4, "Member 'UBP_EventSender_C::LIFT_NOT_RELEASE_000' has a wrong offset!");
static_assert(offsetof(UBP_EventSender_C, LIFT_MOVE_000) == 0x0000DC, "Member 'UBP_EventSender_C::LIFT_MOVE_000' has a wrong offset!");
static_assert(offsetof(UBP_EventSender_C, MoveTime) == 0x0000E4, "Member 'UBP_EventSender_C::MoveTime' has a wrong offset!");
static_assert(offsetof(UBP_EventSender_C, ForceMovePostion) == 0x0000E8, "Member 'UBP_EventSender_C::ForceMovePostion' has a wrong offset!");

}

