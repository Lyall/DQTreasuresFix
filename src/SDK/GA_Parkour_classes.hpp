#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Parkour

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DarwinGame_structs.hpp"
#include "DarwinGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Parkour.GA_Parkour_C
// 0x0068 (0x04F8 - 0x0490)
class UGA_Parkour_C final : public UParkourAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0490(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                BasePos;                                           // 0x0498(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         upValue;                                           // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardValue;                                      // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FParkour                               Parkour;                                           // 0x04AC(0x002C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         PlayRate;                                          // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevPos;                                           // 0x04DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CapsuleSize;                                       // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevValue;                                         // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFalling;                                          // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Parkour(int32 EntryPoint);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnCompleted_F6D99E3E4B00D6B616AA3BB892C64D8D(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnBlendOut_F6D99E3E4B00D6B616AA3BB892C64D8D(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnInterrupted_F6D99E3E4B00D6B616AA3BB892C64D8D(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnCancelled_F6D99E3E4B00D6B616AA3BB892C64D8D(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void EventReceived_F6D99E3E4B00D6B616AA3BB892C64D8D(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Parkour_C">();
	}
	static class UGA_Parkour_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Parkour_C>();
	}
};
static_assert(alignof(UGA_Parkour_C) == 0x000008, "Wrong alignment on UGA_Parkour_C");
static_assert(sizeof(UGA_Parkour_C) == 0x0004F8, "Wrong size on UGA_Parkour_C");
static_assert(offsetof(UGA_Parkour_C, UberGraphFrame) == 0x000490, "Member 'UGA_Parkour_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, BasePos) == 0x000498, "Member 'UGA_Parkour_C::BasePos' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, upValue) == 0x0004A4, "Member 'UGA_Parkour_C::upValue' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, ForwardValue) == 0x0004A8, "Member 'UGA_Parkour_C::ForwardValue' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, Parkour) == 0x0004AC, "Member 'UGA_Parkour_C::Parkour' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, PlayRate) == 0x0004D8, "Member 'UGA_Parkour_C::PlayRate' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, PrevPos) == 0x0004DC, "Member 'UGA_Parkour_C::PrevPos' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, CapsuleSize) == 0x0004E8, "Member 'UGA_Parkour_C::CapsuleSize' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, PrevValue) == 0x0004F0, "Member 'UGA_Parkour_C::PrevValue' has a wrong offset!");
static_assert(offsetof(UGA_Parkour_C, bFalling) == 0x0004F4, "Member 'UGA_Parkour_C::bFalling' has a wrong offset!");

}

