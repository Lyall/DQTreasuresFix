#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DarwinLevelSequenceDirector

#include "Basic.hpp"

#include "BP_DarwinLevelSequenceDirector_classes.hpp"
#include "BP_DarwinLevelSequenceDirector_parameters.hpp"


namespace SDK
{

// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ExecuteUbergraph_BP_DarwinLevelSequenceDirector
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::ExecuteUbergraph_BP_DarwinLevelSequenceDirector(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "ExecuteUbergraph_BP_DarwinLevelSequenceDirector");

	Params::BP_DarwinLevelSequenceDirector_C_ExecuteUbergraph_BP_DarwinLevelSequenceDirector Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLoopingAndLimitTIme
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLevelSequencePlayRangeInfo      LoopRange                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LimitFrame                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FirstLoopStartFrameOffset                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayRangeLoopingAndLimitTIme(const struct FLevelSequencePlayRangeInfo& LoopRange, int32 LimitFrame, int32 FirstLoopStartFrameOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayRangeLoopingAndLimitTIme");

	Params::BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingAndLimitTIme Parms{};

	Parms.LoopRange = std::move(LoopRange);
	Parms.LimitFrame = LimitFrame;
	Parms.FirstLoopStartFrameOffset = FirstLoopStartFrameOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DelayAndPauseEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DelayAndBlendFrame                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DelayAndPauseEvent(float DelayAndBlendFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DelayAndPauseEvent");

	Params::BP_DarwinLevelSequenceDirector_C_DelayAndPauseEvent Parms{};

	Parms.DelayAndBlendFrame = DelayAndBlendFrame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Pause
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Pause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetBindings
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::ResetBindings(class ALevelSequenceActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "ResetBindings");

	Params::BP_DarwinLevelSequenceDirector_C_ResetBindings Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindow_Old
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MessageStartIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DrawTalkWindow_Old(int32 MessageStartIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DrawTalkWindow_Old");

	Params::BP_DarwinLevelSequenceDirector_C_DrawTalkWindow_Old Parms{};

	Parms.MessageStartIndex = MessageStartIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingPlayerCharacter
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMovieSceneObjectBindingID       Binding                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::BindingPlayerCharacter(class ALevelSequenceActor* Target, const struct FMovieSceneObjectBindingID& Binding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "BindingPlayerCharacter");

	Params::BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacter Parms{};

	Parms.Target = Target;
	Parms.Binding = std::move(Binding);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Stop
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::Stop(class ALevelSequenceActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Stop");

	Params::BP_DarwinLevelSequenceDirector_C_Stop Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayRange_old
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequencePlayer*             Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayRangeIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequencePlayer*             SequencePlayer                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::SetPlayRange_old(class ULevelSequencePlayer* Target, int32 PlayRangeIndex, class ULevelSequencePlayer** SequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetPlayRange_old");

	Params::BP_DarwinLevelSequenceDirector_C_SetPlayRange_old Parms{};

	Parms.Target = Target;
	Parms.PlayRangeIndex = PlayRangeIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (SequencePlayer != nullptr)
		*SequencePlayer = Parms.SequencePlayer;
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLooping_Old
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayRangeIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayRangeLooping_Old(class ALevelSequenceActor* Target, int32 PlayRangeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayRangeLooping_Old");

	Params::BP_DarwinLevelSequenceDirector_C_PlayRangeLooping_Old Parms{};

	Parms.Target = Target;
	Parms.PlayRangeIndex = PlayRangeIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeNormal_Old
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayRangeIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayRangeNormal_Old(class ALevelSequenceActor* Target, int32 PlayRangeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayRangeNormal_Old");

	Params::BP_DarwinLevelSequenceDirector_C_PlayRangeNormal_Old Parms{};

	Parms.Target = Target;
	Parms.PlayRangeIndex = PlayRangeIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Change Player Camera to Event Camera
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACineCameraActor*                 EventCamera                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLockOutgoing                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::Change_Player_Camera_to_Event_Camera(class ACineCameraActor* EventCamera, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Change Player Camera to Event Camera");

	Params::BP_DarwinLevelSequenceDirector_C_Change_Player_Camera_to_Event_Camera Parms{};

	Parms.EventCamera = EventCamera;
	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PauseMain
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::PauseMain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PauseMain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayMain
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::PlayMain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayMain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Play
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::Play(class ALevelSequenceActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Play");

	Params::BP_DarwinLevelSequenceDirector_C_Play Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.InitMain
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGravity_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNewActorEnableCollision                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsDrawCSBlackLine                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllNpcVisibility                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::InitMain(bool IsGravity_0, bool bNewActorEnableCollision, bool bIsDrawCSBlackLine, bool AllNpcVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "InitMain");

	Params::BP_DarwinLevelSequenceDirector_C_InitMain Parms{};

	Parms.IsGravity_0 = IsGravity_0;
	Parms.bNewActorEnableCollision = bNewActorEnableCollision;
	Parms.bIsDrawCSBlackLine = bIsDrawCSBlackLine;
	Parms.AllNpcVisibility = AllNpcVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FinMain
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLockOutgoing                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CameraKeep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NPCHiddenKeep                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsResetPlayerCamera                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    StopAllLookAt                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RemovePlayerCollision                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::FinMain(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, bool CameraKeep, bool NPCHiddenKeep, bool IsResetPlayerCamera, bool StopAllLookAt, bool RemovePlayerCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FinMain");

	Params::BP_DarwinLevelSequenceDirector_C_FinMain Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;
	Parms.CameraKeep = CameraKeep;
	Parms.NPCHiddenKeep = NPCHiddenKeep;
	Parms.IsResetPlayerCamera = IsResetPlayerCamera;
	Parms.StopAllLookAt = StopAllLookAt;
	Parms.RemovePlayerCollision = RemovePlayerCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ChangeEventCameraToPlayerCamera
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLockOutgoing                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::ChangeEventCameraToPlayerCamera(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "ChangeEventCameraToPlayerCamera");

	Params::BP_DarwinLevelSequenceDirector_C_ChangeEventCameraToPlayerCamera Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.InitSub
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::InitSub()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "InitSub");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FinSub
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::FinSub()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FinSub");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.CallPlaySubSequence
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              SubLevelSequence                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::CallPlaySubSequence(class ALevelSequenceActor* SubLevelSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "CallPlaySubSequence");

	Params::BP_DarwinLevelSequenceDirector_C_CallPlaySubSequence Parms{};

	Parms.SubLevelSequence = SubLevelSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLoopingSelf_Old
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayRangeIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayRangeLoopingSelf_Old(int32 PlayRangeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayRangeLoopingSelf_Old");

	Params::BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf_Old Parms{};

	Parms.PlayRangeIndex = PlayRangeIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayerHidden
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::SetPlayerHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetPlayerHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayerVisible
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::SetPlayerVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetPlayerVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayBSComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAtomCompCategory                       CompCategory                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SheetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CueName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayBSComponent(EAtomCompCategory CompCategory, class FName SheetName, const class FString& CueName, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayBSComponent");

	Params::BP_DarwinLevelSequenceDirector_C_PlayBSComponent Parms{};

	Parms.CompCategory = CompCategory;
	Parms.SheetName = SheetName;
	Parms.CueName = std::move(CueName);
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.StopBSComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAtomCompCategory                       CompCategory                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::StopBSComponent(EAtomCompCategory CompCategory, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "StopBSComponent");

	Params::BP_DarwinLevelSequenceDirector_C_StopBSComponent Parms{};

	Parms.CompCategory = CompCategory;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeByBSComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAtomCompCategory                       CompCategory                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESoundFadeType                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESFadeOutEndState                       FOState                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::FadeByBSComponent(EAtomCompCategory CompCategory, ESoundFadeType Type, float FadeTime, float FadeVolume, ESFadeOutEndState FOState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FadeByBSComponent");

	Params::BP_DarwinLevelSequenceDirector_C_FadeByBSComponent Parms{};

	Parms.CompCategory = CompCategory;
	Parms.Type = Type;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;
	Parms.FOState = FOState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySe
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SheetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CueName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlaySe(class FName SheetName, const class FString& CueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlaySe");

	Params::BP_DarwinLevelSequenceDirector_C_PlaySe Parms{};

	Parms.SheetName = SheetName;
	Parms.CueName = std::move(CueName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySeByPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SheetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CueName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlaySeByPlayer(class FName SheetName, const class FString& CueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlaySeByPlayer");

	Params::BP_DarwinLevelSequenceDirector_C_PlaySeByPlayer Parms{};

	Parms.SheetName = SheetName;
	Parms.CueName = std::move(CueName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayVoice
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SheetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CueName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayVoice(class FName SheetName, const class FString& CueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayVoice");

	Params::BP_DarwinLevelSequenceDirector_C_PlayVoice Parms{};

	Parms.SheetName = SheetName;
	Parms.CueName = std::move(CueName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayBaseEnvComp
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::PlayBaseEnvComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayBaseEnvComp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.StopBgmComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAtomCompCategory                       Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::StopBgmComponent(EAtomCompCategory Category, float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "StopBgmComponent");

	Params::BP_DarwinLevelSequenceDirector_C_StopBgmComponent Parms{};

	Parms.Category = Category;
	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeInByCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundVolumeCategory                    VolumeCategory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::FadeInByCategory(ESoundVolumeCategory VolumeCategory, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FadeInByCategory");

	Params::BP_DarwinLevelSequenceDirector_C_FadeInByCategory Parms{};

	Parms.VolumeCategory = VolumeCategory;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeOutByCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundVolumeCategory                    VolumeCategory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::FadeOutByCategory(ESoundVolumeCategory VolumeCategory, float FadeTime, float FadeVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FadeOutByCategory");

	Params::BP_DarwinLevelSequenceDirector_C_FadeOutByCategory Parms{};

	Parms.VolumeCategory = VolumeCategory;
	Parms.FadeTime = FadeTime;
	Parms.FadeVolume = FadeVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SyncEventCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::SyncEventCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SyncEventCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetPlayerCamera
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::ResetPlayerCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "ResetPlayerCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayLoopAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Meth                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    PlayAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayLoopAnimation(class USkeletalMeshComponent* Meth, class UAnimSequence* PlayAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayLoopAnimation");

	Params::BP_DarwinLevelSequenceDirector_C_PlayLoopAnimation Parms{};

	Parms.Meth = Meth;
	Parms.PlayAnimation = PlayAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.CalcSequenceLength
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::CalcSequenceLength(int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "CalcSequenceLength");

	Params::BP_DarwinLevelSequenceDirector_C_CalcSequenceLength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayRangeLoopingSelf
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLevelSequencePlayRangeInfo      NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::PlayRangeLoopingSelf(const struct FLevelSequencePlayRangeInfo& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayRangeLoopingSelf");

	Params::BP_DarwinLevelSequenceDirector_C_PlayRangeLoopingSelf Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayRange
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequencePlayer*             Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLevelSequencePlayRangeInfo      LevelSequencePlayRangeInfo                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::SetPlayRange(class ULevelSequencePlayer* Target, const struct FLevelSequencePlayRangeInfo& LevelSequencePlayRangeInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetPlayRange");

	Params::BP_DarwinLevelSequenceDirector_C_SetPlayRange Parms{};

	Parms.Target = Target;
	Parms.LevelSequencePlayRangeInfo = std::move(LevelSequencePlayRangeInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           TextID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DrawTalkWindow(const class FString& TextID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DrawTalkWindow");

	Params::BP_DarwinLevelSequenceDirector_C_DrawTalkWindow Parms{};

	Parms.TextID = std::move(TextID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindowForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DrawTalkWindowForce(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DrawTalkWindowForce");

	Params::BP_DarwinLevelSequenceDirector_C_DrawTalkWindowForce Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawSubTitle
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TextID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DrawSubTitle(class FName TextID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DrawSubTitle");

	Params::BP_DarwinLevelSequenceDirector_C_DrawSubTitle Parms{};

	Parms.TextID = TextID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.CloseSubTitle
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::CloseSubTitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "CloseSubTitle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawSubTitleForce
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DrawSubTitleForce(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DrawSubTitleForce");

	Params::BP_DarwinLevelSequenceDirector_C_DrawSubTitleForce Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingPlayerCharacterbyTag
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              LevelSequenceActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::BindingPlayerCharacterbyTag(class ALevelSequenceActor* LevelSequenceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "BindingPlayerCharacterbyTag");

	Params::BP_DarwinLevelSequenceDirector_C_BindingPlayerCharacterbyTag Parms{};

	Parms.LevelSequenceActor = LevelSequenceActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayerCharacterVisible
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::SetPlayerCharacterVisible(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetPlayerCharacterVisible");

	Params::BP_DarwinLevelSequenceDirector_C_SetPlayerCharacterVisible Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySubTitleMaskIn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimationSeconds                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlaySubTitleMaskIn(float AnimationSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlaySubTitleMaskIn");

	Params::BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskIn Parms{};

	Parms.AnimationSeconds = AnimationSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlaySubTitleMaskOut
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimationSeconds                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlaySubTitleMaskOut(float AnimationSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlaySubTitleMaskOut");

	Params::BP_DarwinLevelSequenceDirector_C_PlaySubTitleMaskOut Parms{};

	Parms.AnimationSeconds = AnimationSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.CallSet Star Emissive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        BP_EnviromentLighting                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BigStarEmissive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallStarEmissive                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::CallSet_Star_Emissive(class ABP_EnvironmentLighting_C* BP_EnviromentLighting, float BigStarEmissive, float SmallStarEmissive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "CallSet Star Emissive");

	Params::BP_DarwinLevelSequenceDirector_C_CallSet_Star_Emissive Parms{};

	Parms.BP_EnviromentLighting = BP_EnviromentLighting;
	Parms.BigStarEmissive = BigStarEmissive;
	Parms.SmallStarEmissive = SmallStarEmissive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Call Reset StarEmissive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        BP_EnviromentLighting                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::Call_Reset_StarEmissive(class ABP_EnvironmentLighting_C* BP_EnviromentLighting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Call Reset StarEmissive");

	Params::BP_DarwinLevelSequenceDirector_C_Call_Reset_StarEmissive Parms{};

	Parms.BP_EnviromentLighting = BP_EnviromentLighting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Init Sky with Editor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        BP_EnvironmentLighthing                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::Init_Sky_with_Editor(class ABP_EnvironmentLighting_C* BP_EnvironmentLighthing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Init Sky with Editor");

	Params::BP_DarwinLevelSequenceDirector_C_Init_Sky_with_Editor Parms{};

	Parms.BP_EnvironmentLighthing = BP_EnvironmentLighthing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetStarEmissiveWithEditor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        BP_EnvironmentLighthing                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BigStarEmissive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallStarEmissive                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::SetStarEmissiveWithEditor(class ABP_EnvironmentLighting_C* BP_EnvironmentLighthing, float BigStarEmissive, float SmallStarEmissive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetStarEmissiveWithEditor");

	Params::BP_DarwinLevelSequenceDirector_C_SetStarEmissiveWithEditor Parms{};

	Parms.BP_EnvironmentLighthing = BP_EnvironmentLighthing;
	Parms.BigStarEmissive = BigStarEmissive;
	Parms.SmallStarEmissive = SmallStarEmissive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetStarEmissivePalamWithEditor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EnvironmentLighting_C*        BP_EnvironmentLighthing                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::ResetStarEmissivePalamWithEditor(class ABP_EnvironmentLighting_C* BP_EnvironmentLighthing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "ResetStarEmissivePalamWithEditor");

	Params::BP_DarwinLevelSequenceDirector_C_ResetStarEmissivePalamWithEditor Parms{};

	Parms.BP_EnvironmentLighthing = BP_EnvironmentLighthing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetCollisionAndGravity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGameCharacter*                   GameCharacter                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CollisionEnable                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    GravityEnable                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::SetCollisionAndGravity(class AGameCharacter* GameCharacter, bool CollisionEnable, bool GravityEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetCollisionAndGravity");

	Params::BP_DarwinLevelSequenceDirector_C_SetCollisionAndGravity Parms{};

	Parms.GameCharacter = GameCharacter;
	Parms.CollisionEnable = CollisionEnable;
	Parms.GravityEnable = GravityEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayLoopAnimationBlend
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           CharacterMesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InBlendFrame                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayLoopAnimationBlend(class USkeletalMeshComponent* CharacterMesh, class UAnimSequence* Anim, int32 InBlendFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayLoopAnimationBlend");

	Params::BP_DarwinLevelSequenceDirector_C_PlayLoopAnimationBlend Parms{};

	Parms.CharacterMesh = CharacterMesh;
	Parms.Anim = Anim;
	Parms.InBlendFrame = InBlendFrame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Stop Loop Animation Blend
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           CharacterMesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Blend_Frame                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::Stop_Loop_Animation_Blend(class USkeletalMeshComponent* CharacterMesh, int32 Blend_Frame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Stop Loop Animation Blend");

	Params::BP_DarwinLevelSequenceDirector_C_Stop_Loop_Animation_Blend Parms{};

	Parms.CharacterMesh = CharacterMesh;
	Parms.Blend_Frame = Blend_Frame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Set Select NPCVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             NPCDataID                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::Set_Select_NPCVisibility(bool Visibility, const class FName NPCDataID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Set Select NPCVisibility");

	Params::BP_DarwinLevelSequenceDirector_C_Set_Select_NPCVisibility Parms{};

	Parms.Visibility = Visibility;
	Parms.NPCDataID = NPCDataID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingNPC
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              LevelSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NpcID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BindingTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::BindingNPC(class ALevelSequenceActor* LevelSequence, class FName NpcID, class FName BindingTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "BindingNPC");

	Params::BP_DarwinLevelSequenceDirector_C_BindingNPC Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.NpcID = NpcID;
	Parms.BindingTag = BindingTag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetBindingNPC
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              LevelSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NpcID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::ResetBindingNPC(class ALevelSequenceActor* LevelSequence, class FName NpcID, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "ResetBindingNPC");

	Params::BP_DarwinLevelSequenceDirector_C_ResetBindingNPC Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.NpcID = NpcID;
	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Set Look at Actor or Flg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetLookAtActor                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLookStart                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::Set_Look_at_Actor_or_Flg(class USkeletalMeshComponent* SkeletalMesh, const class AActor* TargetLookAtActor, const bool IsLookStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Set Look at Actor or Flg");

	Params::BP_DarwinLevelSequenceDirector_C_Set_Look_at_Actor_or_Flg Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.TargetLookAtActor = TargetLookAtActor;
	Parms.IsLookStart = IsLookStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.StartLookAt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HeadLookAtVelocity                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        HeadLookAtClamp                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SpineLookAtVeocity                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        SpineLookAtClamp                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::StartLookAt(class USkeletalMeshComponent* Mesh, class AActor* TargetActor, float HeadLookAtVelocity, const struct FVector2D& HeadLookAtClamp, float SpineLookAtVeocity, const struct FVector2D& SpineLookAtClamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "StartLookAt");

	Params::BP_DarwinLevelSequenceDirector_C_StartLookAt Parms{};

	Parms.Mesh = Mesh;
	Parms.TargetActor = TargetActor;
	Parms.HeadLookAtVelocity = HeadLookAtVelocity;
	Parms.HeadLookAtClamp = std::move(HeadLookAtClamp);
	Parms.SpineLookAtVeocity = SpineLookAtVeocity;
	Parms.SpineLookAtClamp = std::move(SpineLookAtClamp);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FinLookAt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::FinLookAt(class USkeletalMeshComponent* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FinLookAt");

	Params::BP_DarwinLevelSequenceDirector_C_FinLookAt Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FinLookAtDirect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComopnent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::FinLookAtDirect(class USkeletalMeshComponent* SkeletalMeshComopnent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FinLookAtDirect");

	Params::BP_DarwinLevelSequenceDirector_C_FinLookAtDirect Parms{};

	Parms.SkeletalMeshComopnent = SkeletalMeshComopnent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetLookAtParamHead
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AnglearVelocity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ClampVertical                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ClampHorizontal                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::SetLookAtParamHead(class USkeletalMeshComponent* SkeletalMesh, float AnglearVelocity, float ClampVertical, float ClampHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetLookAtParamHead");

	Params::BP_DarwinLevelSequenceDirector_C_SetLookAtParamHead Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.AnglearVelocity = AnglearVelocity;
	Parms.ClampVertical = ClampVertical;
	Parms.ClampHorizontal = ClampHorizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetLookAtParamSpine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AnglearVelocity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ClampVertical                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ClampHorizontal                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::SetLookAtParamSpine(class USkeletalMeshComponent* SkeletalMesh, float AnglearVelocity, float ClampVertical, float ClampHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetLookAtParamSpine");

	Params::BP_DarwinLevelSequenceDirector_C_SetLookAtParamSpine Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.AnglearVelocity = AnglearVelocity;
	Parms.ClampVertical = ClampVertical;
	Parms.ClampHorizontal = ClampHorizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.OpenTips
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OpenTipsID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::OpenTips(class FName OpenTipsID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "OpenTips");

	Params::BP_DarwinLevelSequenceDirector_C_OpenTips Parms{};

	Parms.OpenTipsID = OpenTipsID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.OpenNewItemUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::OpenNewItemUI(class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "OpenNewItemUI");

	Params::BP_DarwinLevelSequenceDirector_C_OpenNewItemUI Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DelayAndPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DelayFrame                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DelayAndPause(float DelayFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DelayAndPause");

	Params::BP_DarwinLevelSequenceDirector_C_DelayAndPause Parms{};

	Parms.DelayFrame = DelayFrame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.PlayCustomLoopAnimationStartAt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    PlayAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoopAnimStartFrame                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SlotNodeName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::PlayCustomLoopAnimationStartAt(class USkeletalMeshComponent* Mesh, class UAnimSequence* PlayAnimation, int32 LoopAnimStartFrame, int32 BlendTime, class FName SlotNodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "PlayCustomLoopAnimationStartAt");

	Params::BP_DarwinLevelSequenceDirector_C_PlayCustomLoopAnimationStartAt Parms{};

	Parms.Mesh = Mesh;
	Parms.PlayAnimation = PlayAnimation;
	Parms.LoopAnimStartFrame = LoopAnimStartFrame;
	Parms.BlendTime = BlendTime;
	Parms.SlotNodeName = SlotNodeName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.BindingMonstersByTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              rootActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::BindingMonstersByTag(class ALevelSequenceActor* rootActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "BindingMonstersByTag");

	Params::BP_DarwinLevelSequenceDirector_C_BindingMonstersByTag Parms{};

	Parms.rootActor = rootActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.DrawTalkWindowSwitch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           IsPlayer_kamyu_TextID                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           IsPlayer_maya_TextID                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::DrawTalkWindowSwitch(const class FString& IsPlayer_kamyu_TextID, const class FString& IsPlayer_maya_TextID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "DrawTalkWindowSwitch");

	Params::BP_DarwinLevelSequenceDirector_C_DrawTalkWindowSwitch Parms{};

	Parms.IsPlayer_kamyu_TextID = std::move(IsPlayer_kamyu_TextID);
	Parms.IsPlayer_maya_TextID = std::move(IsPlayer_maya_TextID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.Set Vocalize Sync Draw Text Compare By Tag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AGameCharacter*                   Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::Set_Vocalize_Sync_Draw_Text_Compare_By_Tag(class AGameCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "Set Vocalize Sync Draw Text Compare By Tag");

	Params::BP_DarwinLevelSequenceDirector_C_Set_Vocalize_Sync_Draw_Text_Compare_By_Tag Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetWorldTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Hour                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Minute                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::SetWorldTime(int32 Hour, int32 Minute, bool SkipEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetWorldTime");

	Params::BP_DarwinLevelSequenceDirector_C_SetWorldTime Parms{};

	Parms.Hour = Hour;
	Parms.Minute = Minute;
	Parms.SkipEvent = SkipEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.ResetWorldTimePause
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DarwinLevelSequenceDirector_C::ResetWorldTimePause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "ResetWorldTimePause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.InputProc_CS_Skip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bGamePaused                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FKeyInput                        InKeyInput                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FKeyInput                        OutKeyInput                                            (Parm, OutParm)
// struct FEventReply                      Output                                                 (Parm, OutParm)

void UBP_DarwinLevelSequenceDirector_C::InputProc_CS_Skip(float DeltaTime, bool bGamePaused, const struct FKeyInput& InKeyInput, struct FKeyInput* OutKeyInput, struct FEventReply* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "InputProc_CS_Skip");

	Params::BP_DarwinLevelSequenceDirector_C_InputProc_CS_Skip Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bGamePaused = bGamePaused;
	Parms.InKeyInput = std::move(InKeyInput);

	UObject::ProcessEvent(Func, &Parms);

	if (OutKeyInput != nullptr)
		*OutKeyInput = std::move(Parms.OutKeyInput);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.GetSecondPerFrame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   second                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::GetSecondPerFrame(float* second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "GetSecondPerFrame");

	Params::BP_DarwinLevelSequenceDirector_C_GetSecondPerFrame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (second != nullptr)
		*second = Parms.second;
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.SetPlayerCollisionEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       Player_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewCollisionEnable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_DarwinLevelSequenceDirector_C::SetPlayerCollisionEnable(class ACharacter* Player_0, bool NewCollisionEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "SetPlayerCollisionEnable");

	Params::BP_DarwinLevelSequenceDirector_C_SetPlayerCollisionEnable Parms{};

	Parms.Player_0 = Player_0;
	Parms.NewCollisionEnable = NewCollisionEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.IsSkipDurationd
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USequencerController*             m______________                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_DarwinLevelSequenceDirector_C::IsSkipDurationd(class USequencerController* m______________)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "IsSkipDurationd");

	Params::BP_DarwinLevelSequenceDirector_C_IsSkipDurationd Parms{};

	Parms.m______________ = m______________;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_DarwinLevelSequenceDirector.BP_DarwinLevelSequenceDirector_C.FadeOutIfNotYet
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     DestColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Float                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFadeZOrderType                         ZorderType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DarwinLevelSequenceDirector_C::FadeOutIfNotYet(const struct FLinearColor& DestColor, float Float, EFadeZOrderType ZorderType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DarwinLevelSequenceDirector_C", "FadeOutIfNotYet");

	Params::BP_DarwinLevelSequenceDirector_C_FadeOutIfNotYet Parms{};

	Parms.DestColor = std::move(DestColor);
	Parms.Float = Float;
	Parms.ZorderType = ZorderType;

	UObject::ProcessEvent(Func, &Parms);
}

}

