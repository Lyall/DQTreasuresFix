#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelSequenceController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DarwinGame_structs.hpp"


namespace SDK::Params
{

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.ExecuteUbergraph_BP_LevelSequenceController
// 0x00F0 (0x00F0 - 0x0000)
struct BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_SequenceLength;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    K2Node_CustomEvent_SubLevelSequence;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_MassageStartIndex;              // 0x0038(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPathName_ReturnValue_1;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue_2;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDrawTextInfo                          K2Node_CustomEvent_DrawTextInfo;                   // 0x0088(0x0010)(ConstParm)
	struct FST_EventTalktBranchData               K2Node_CustomEvent_TextBranch;                     // 0x0098(0x0020)(ConstParm)
	float                                         K2Node_CustomEvent_BlendTime;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      K2Node_CustomEvent_BlendFunc;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_BlendExp;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bLockOutgoing;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bCameraKeep;                    // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_TextID;                         // 0x00D8(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	class UMonsterManager*                        CallFunc_GetInstance_ReturnValue;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController");
static_assert(sizeof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController) == 0x0000F0, "Wrong size on BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, EntryPoint) == 0x000000, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_SequenceLength) == 0x000004, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_SequenceLength' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_SubLevelSequence) == 0x000008, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_SubLevelSequence' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_GetPathName_ReturnValue) == 0x000010, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_MassageStartIndex) == 0x000038, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_MassageStartIndex' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_IsValid_ReturnValue_1) == 0x00003C, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_GetPathName_ReturnValue_1) == 0x000040, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_GetPathName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_GetPathName_ReturnValue_2) == 0x000060, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_GetPathName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000070, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_IsValid_ReturnValue_2) == 0x000080, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_DrawTextInfo) == 0x000088, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_DrawTextInfo' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_TextBranch) == 0x000098, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_TextBranch' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_BlendTime) == 0x0000B8, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_BlendTime' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_BlendFunc) == 0x0000BC, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_BlendFunc' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_BlendExp) == 0x0000C0, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_BlendExp' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_bLockOutgoing) == 0x0000C4, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_bLockOutgoing' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_bCameraKeep) == 0x0000C5, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_bCameraKeep' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_IsValid_ReturnValue_3) == 0x0000C6, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_GetSequencePlayer_ReturnValue) == 0x0000C8, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_IsValid_ReturnValue_4) == 0x0000D0, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x0000D1, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_IsValid_ReturnValue_5) == 0x0000D2, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, K2Node_CustomEvent_TextID) == 0x0000D8, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::K2Node_CustomEvent_TextID' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController, CallFunc_GetInstance_ReturnValue) == 0x0000E8, "Member 'BP_LevelSequenceController_C_ExecuteUbergraph_BP_LevelSequenceController::CallFunc_GetInstance_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallOpenDrawTalkWindow
// 0x0010 (0x0010 - 0x0000)
struct BP_LevelSequenceController_C_CallOpenDrawTalkWindow final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_CallOpenDrawTalkWindow) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_CallOpenDrawTalkWindow");
static_assert(sizeof(BP_LevelSequenceController_C_CallOpenDrawTalkWindow) == 0x000010, "Wrong size on BP_LevelSequenceController_C_CallOpenDrawTalkWindow");
static_assert(offsetof(BP_LevelSequenceController_C_CallOpenDrawTalkWindow, TextID) == 0x000000, "Member 'BP_LevelSequenceController_C_CallOpenDrawTalkWindow::TextID' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.SetLooping
// 0x0004 (0x0004 - 0x0000)
struct BP_LevelSequenceController_C_SetLooping final
{
public:
	int32                                         SequenceLength;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_SetLooping) == 0x000004, "Wrong alignment on BP_LevelSequenceController_C_SetLooping");
static_assert(sizeof(BP_LevelSequenceController_C_SetLooping) == 0x000004, "Wrong size on BP_LevelSequenceController_C_SetLooping");
static_assert(offsetof(BP_LevelSequenceController_C_SetLooping, SequenceLength) == 0x000000, "Member 'BP_LevelSequenceController_C_SetLooping::SequenceLength' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PlaySubSequence
// 0x0008 (0x0008 - 0x0000)
struct BP_LevelSequenceController_C_PlaySubSequence final
{
public:
	class ALevelSequenceActor*                    SubLevelSequence;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_PlaySubSequence) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_PlaySubSequence");
static_assert(sizeof(BP_LevelSequenceController_C_PlaySubSequence) == 0x000008, "Wrong size on BP_LevelSequenceController_C_PlaySubSequence");
static_assert(offsetof(BP_LevelSequenceController_C_PlaySubSequence, SubLevelSequence) == 0x000000, "Member 'BP_LevelSequenceController_C_PlaySubSequence::SubLevelSequence' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallDrawTalkWindow_Old
// 0x0004 (0x0004 - 0x0000)
struct BP_LevelSequenceController_C_CallDrawTalkWindow_Old final
{
public:
	int32                                         MassageStartIndex;                                 // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_CallDrawTalkWindow_Old) == 0x000004, "Wrong alignment on BP_LevelSequenceController_C_CallDrawTalkWindow_Old");
static_assert(sizeof(BP_LevelSequenceController_C_CallDrawTalkWindow_Old) == 0x000004, "Wrong size on BP_LevelSequenceController_C_CallDrawTalkWindow_Old");
static_assert(offsetof(BP_LevelSequenceController_C_CallDrawTalkWindow_Old, MassageStartIndex) == 0x000000, "Member 'BP_LevelSequenceController_C_CallDrawTalkWindow_Old::MassageStartIndex' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallSetDrawTextInfo
// 0x0030 (0x0030 - 0x0000)
struct BP_LevelSequenceController_C_CallSetDrawTextInfo final
{
public:
	struct FDrawTextInfo                          DrawTextInfo;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	struct FST_EventTalktBranchData               TextBranch;                                        // 0x0010(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_LevelSequenceController_C_CallSetDrawTextInfo) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_CallSetDrawTextInfo");
static_assert(sizeof(BP_LevelSequenceController_C_CallSetDrawTextInfo) == 0x000030, "Wrong size on BP_LevelSequenceController_C_CallSetDrawTextInfo");
static_assert(offsetof(BP_LevelSequenceController_C_CallSetDrawTextInfo, DrawTextInfo) == 0x000000, "Member 'BP_LevelSequenceController_C_CallSetDrawTextInfo::DrawTextInfo' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CallSetDrawTextInfo, TextBranch) == 0x000010, "Member 'BP_LevelSequenceController_C_CallSetDrawTextInfo::TextBranch' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CallEndLevelSequence
// 0x0010 (0x0010 - 0x0000)
struct BP_LevelSequenceController_C_CallEndLevelSequence final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCameraKeep;                                       // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_CallEndLevelSequence) == 0x000004, "Wrong alignment on BP_LevelSequenceController_C_CallEndLevelSequence");
static_assert(sizeof(BP_LevelSequenceController_C_CallEndLevelSequence) == 0x000010, "Wrong size on BP_LevelSequenceController_C_CallEndLevelSequence");
static_assert(offsetof(BP_LevelSequenceController_C_CallEndLevelSequence, BlendTime) == 0x000000, "Member 'BP_LevelSequenceController_C_CallEndLevelSequence::BlendTime' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CallEndLevelSequence, BlendFunc) == 0x000004, "Member 'BP_LevelSequenceController_C_CallEndLevelSequence::BlendFunc' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CallEndLevelSequence, BlendExp) == 0x000008, "Member 'BP_LevelSequenceController_C_CallEndLevelSequence::BlendExp' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CallEndLevelSequence, bLockOutgoing) == 0x00000C, "Member 'BP_LevelSequenceController_C_CallEndLevelSequence::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CallEndLevelSequence, bCameraKeep) == 0x00000D, "Member 'BP_LevelSequenceController_C_CallEndLevelSequence::bCameraKeep' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.Init
// 0x0008 (0x0008 - 0x0000)
struct BP_LevelSequenceController_C_Init final
{
public:
	class UBP_EventExecter_C*                     BP_EventExector;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_Init) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_Init");
static_assert(sizeof(BP_LevelSequenceController_C_Init) == 0x000008, "Wrong size on BP_LevelSequenceController_C_Init");
static_assert(offsetof(BP_LevelSequenceController_C_Init, BP_EventExector) == 0x000000, "Member 'BP_LevelSequenceController_C_Init::BP_EventExector' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.StopPlayingSequence
// 0x0002 (0x0002 - 0x0000)
struct BP_LevelSequenceController_C_StopPlayingSequence final
{
public:
	bool                                          CallFunc_CanStopSequencePlayer_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_StopPlayingSequence) == 0x000001, "Wrong alignment on BP_LevelSequenceController_C_StopPlayingSequence");
static_assert(sizeof(BP_LevelSequenceController_C_StopPlayingSequence) == 0x000002, "Wrong size on BP_LevelSequenceController_C_StopPlayingSequence");
static_assert(offsetof(BP_LevelSequenceController_C_StopPlayingSequence, CallFunc_CanStopSequencePlayer_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceController_C_StopPlayingSequence::CallFunc_CanStopSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_StopPlayingSequence, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_LevelSequenceController_C_StopPlayingSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PlaySub
// 0x0024 (0x0024 - 0x0000)
struct BP_LevelSequenceController_C_PlaySub final
{
public:
	struct FQualifiedFrameTime                    CallFunc_GetCurrentTime_ReturnValue;               // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FFrameNumber                           CallFunc_BreakQualifiedFrameTime_Frame;            // 0x0010(0x0004)(NoDestructor, HasGetValueTypeHash)
	struct FFrameRate                             CallFunc_BreakQualifiedFrameTime_FrameRate;        // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakQualifiedFrameTime_SubFrame;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_PlaySub) == 0x000004, "Wrong alignment on BP_LevelSequenceController_C_PlaySub");
static_assert(sizeof(BP_LevelSequenceController_C_PlaySub) == 0x000024, "Wrong size on BP_LevelSequenceController_C_PlaySub");
static_assert(offsetof(BP_LevelSequenceController_C_PlaySub, CallFunc_GetCurrentTime_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceController_C_PlaySub::CallFunc_GetCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PlaySub, CallFunc_BreakQualifiedFrameTime_Frame) == 0x000010, "Member 'BP_LevelSequenceController_C_PlaySub::CallFunc_BreakQualifiedFrameTime_Frame' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PlaySub, CallFunc_BreakQualifiedFrameTime_FrameRate) == 0x000014, "Member 'BP_LevelSequenceController_C_PlaySub::CallFunc_BreakQualifiedFrameTime_FrameRate' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PlaySub, CallFunc_BreakQualifiedFrameTime_SubFrame) == 0x00001C, "Member 'BP_LevelSequenceController_C_PlaySub::CallFunc_BreakQualifiedFrameTime_SubFrame' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PlaySub, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_LevelSequenceController_C_PlaySub::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.SkipPlayingSequence
// 0x0002 (0x0002 - 0x0000)
struct BP_LevelSequenceController_C_SkipPlayingSequence final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_SkipPlayingSequence) == 0x000001, "Wrong alignment on BP_LevelSequenceController_C_SkipPlayingSequence");
static_assert(sizeof(BP_LevelSequenceController_C_SkipPlayingSequence) == 0x000002, "Wrong size on BP_LevelSequenceController_C_SkipPlayingSequence");
static_assert(offsetof(BP_LevelSequenceController_C_SkipPlayingSequence, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceController_C_SkipPlayingSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_SkipPlayingSequence, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_LevelSequenceController_C_SkipPlayingSequence::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.SkipLevelSequence
// 0x0030 (0x0030 - 0x0000)
struct BP_LevelSequenceController_C_SkipLevelSequence final
{
public:
	class ULevelSequencePlayer*                   SkipLevelSequence_0;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQualifiedFrameTime                    CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0010)(NoDestructor, HasGetValueTypeHash)
	struct FFrameNumber                           CallFunc_BreakQualifiedFrameTime_Frame;            // 0x0018(0x0004)(NoDestructor, HasGetValueTypeHash)
	struct FFrameRate                             CallFunc_BreakQualifiedFrameTime_FrameRate;        // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakQualifiedFrameTime_SubFrame;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_SkipLevelSequence) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_SkipLevelSequence");
static_assert(sizeof(BP_LevelSequenceController_C_SkipLevelSequence) == 0x000030, "Wrong size on BP_LevelSequenceController_C_SkipLevelSequence");
static_assert(offsetof(BP_LevelSequenceController_C_SkipLevelSequence, SkipLevelSequence_0) == 0x000000, "Member 'BP_LevelSequenceController_C_SkipLevelSequence::SkipLevelSequence_0' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_SkipLevelSequence, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'BP_LevelSequenceController_C_SkipLevelSequence::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_SkipLevelSequence, CallFunc_BreakQualifiedFrameTime_Frame) == 0x000018, "Member 'BP_LevelSequenceController_C_SkipLevelSequence::CallFunc_BreakQualifiedFrameTime_Frame' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_SkipLevelSequence, CallFunc_BreakQualifiedFrameTime_FrameRate) == 0x00001C, "Member 'BP_LevelSequenceController_C_SkipLevelSequence::CallFunc_BreakQualifiedFrameTime_FrameRate' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_SkipLevelSequence, CallFunc_BreakQualifiedFrameTime_SubFrame) == 0x000024, "Member 'BP_LevelSequenceController_C_SkipLevelSequence::CallFunc_BreakQualifiedFrameTime_SubFrame' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_SkipLevelSequence, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'BP_LevelSequenceController_C_SkipLevelSequence::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PrintCurrentCamera
// 0x0020 (0x0020 - 0x0000)
struct BP_LevelSequenceController_C_PrintCurrentCamera final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_PrintCurrentCamera) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_PrintCurrentCamera");
static_assert(sizeof(BP_LevelSequenceController_C_PrintCurrentCamera) == 0x000020, "Wrong size on BP_LevelSequenceController_C_PrintCurrentCamera");
static_assert(offsetof(BP_LevelSequenceController_C_PrintCurrentCamera, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceController_C_PrintCurrentCamera::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PrintCurrentCamera, CallFunc_GetViewTarget_ReturnValue) == 0x000008, "Member 'BP_LevelSequenceController_C_PrintCurrentCamera::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PrintCurrentCamera, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'BP_LevelSequenceController_C_PrintCurrentCamera::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.StopPlayedSequence
// 0x0002 (0x0002 - 0x0000)
struct BP_LevelSequenceController_C_StopPlayedSequence final
{
public:
	bool                                          CallFunc_CanStopSequencePlayer_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_StopPlayedSequence) == 0x000001, "Wrong alignment on BP_LevelSequenceController_C_StopPlayedSequence");
static_assert(sizeof(BP_LevelSequenceController_C_StopPlayedSequence) == 0x000002, "Wrong size on BP_LevelSequenceController_C_StopPlayedSequence");
static_assert(offsetof(BP_LevelSequenceController_C_StopPlayedSequence, CallFunc_CanStopSequencePlayer_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceController_C_StopPlayedSequence::CallFunc_CanStopSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_StopPlayedSequence, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_LevelSequenceController_C_StopPlayedSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.StopMainSequence
// 0x0002 (0x0002 - 0x0000)
struct BP_LevelSequenceController_C_StopMainSequence final
{
public:
	bool                                          CallFunc_CanStopSequencePlayer_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_StopMainSequence) == 0x000001, "Wrong alignment on BP_LevelSequenceController_C_StopMainSequence");
static_assert(sizeof(BP_LevelSequenceController_C_StopMainSequence) == 0x000002, "Wrong size on BP_LevelSequenceController_C_StopMainSequence");
static_assert(offsetof(BP_LevelSequenceController_C_StopMainSequence, CallFunc_CanStopSequencePlayer_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceController_C_StopMainSequence::CallFunc_CanStopSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_StopMainSequence, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_LevelSequenceController_C_StopMainSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.PrintStopLog
// 0x0028 (0x0028 - 0x0000)
struct BP_LevelSequenceController_C_PrintStopLog final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_PrintStopLog) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_PrintStopLog");
static_assert(sizeof(BP_LevelSequenceController_C_PrintStopLog) == 0x000028, "Wrong size on BP_LevelSequenceController_C_PrintStopLog");
static_assert(offsetof(BP_LevelSequenceController_C_PrintStopLog, Object) == 0x000000, "Member 'BP_LevelSequenceController_C_PrintStopLog::Object' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PrintStopLog, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'BP_LevelSequenceController_C_PrintStopLog::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_PrintStopLog, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BP_LevelSequenceController_C_PrintStopLog::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.CanStopSequencePlayer
// 0x0010 (0x0010 - 0x0000)
struct BP_LevelSequenceController_C_CanStopSequencePlayer final
{
public:
	class UMovieSceneSequencePlayer*              StopTargetPlayer;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPaused_ReturnValue;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_CanStopSequencePlayer) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_CanStopSequencePlayer");
static_assert(sizeof(BP_LevelSequenceController_C_CanStopSequencePlayer) == 0x000010, "Wrong size on BP_LevelSequenceController_C_CanStopSequencePlayer");
static_assert(offsetof(BP_LevelSequenceController_C_CanStopSequencePlayer, StopTargetPlayer) == 0x000000, "Member 'BP_LevelSequenceController_C_CanStopSequencePlayer::StopTargetPlayer' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CanStopSequencePlayer, ReturnValue) == 0x000008, "Member 'BP_LevelSequenceController_C_CanStopSequencePlayer::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CanStopSequencePlayer, CallFunc_IsPaused_ReturnValue) == 0x000009, "Member 'BP_LevelSequenceController_C_CanStopSequencePlayer::CallFunc_IsPaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CanStopSequencePlayer, CallFunc_IsPlaying_ReturnValue) == 0x00000A, "Member 'BP_LevelSequenceController_C_CanStopSequencePlayer::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_CanStopSequencePlayer, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'BP_LevelSequenceController_C_CanStopSequencePlayer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.ResetStarEmissive
// 0x0008 (0x0008 - 0x0000)
struct BP_LevelSequenceController_C_ResetStarEmissive final
{
public:
	class ABP_EnvironmentLighting_C*              BP_EnviromentLighting;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_ResetStarEmissive) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_ResetStarEmissive");
static_assert(sizeof(BP_LevelSequenceController_C_ResetStarEmissive) == 0x000008, "Wrong size on BP_LevelSequenceController_C_ResetStarEmissive");
static_assert(offsetof(BP_LevelSequenceController_C_ResetStarEmissive, BP_EnviromentLighting) == 0x000000, "Member 'BP_LevelSequenceController_C_ResetStarEmissive::BP_EnviromentLighting' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.Set Star Emissive
// 0x0020 (0x0020 - 0x0000)
struct BP_LevelSequenceController_C_Set_Star_Emissive final
{
public:
	class ABP_EnvironmentLighting_C*              BP_EnviromentLighting;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BigStarEmissive;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallStarEmissive;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_Set_Star_Emissive) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_Set_Star_Emissive");
static_assert(sizeof(BP_LevelSequenceController_C_Set_Star_Emissive) == 0x000020, "Wrong size on BP_LevelSequenceController_C_Set_Star_Emissive");
static_assert(offsetof(BP_LevelSequenceController_C_Set_Star_Emissive, BP_EnviromentLighting) == 0x000000, "Member 'BP_LevelSequenceController_C_Set_Star_Emissive::BP_EnviromentLighting' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_Set_Star_Emissive, BigStarEmissive) == 0x000008, "Member 'BP_LevelSequenceController_C_Set_Star_Emissive::BigStarEmissive' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_Set_Star_Emissive, SmallStarEmissive) == 0x00000C, "Member 'BP_LevelSequenceController_C_Set_Star_Emissive::SmallStarEmissive' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_Set_Star_Emissive, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_LevelSequenceController_C_Set_Star_Emissive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_Set_Star_Emissive, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_LevelSequenceController_C_Set_Star_Emissive::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_Set_Star_Emissive, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_LevelSequenceController_C_Set_Star_Emissive::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.InitSky
// 0x0018 (0x0018 - 0x0000)
struct BP_LevelSequenceController_C_InitSky final
{
public:
	class ABP_EnvironmentLighting_C*              ChangeEnvironmentLighting_0;                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmallStarEmissive_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmallStarReduce_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBigStarEmissive_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LevelSequenceController_C_InitSky) == 0x000008, "Wrong alignment on BP_LevelSequenceController_C_InitSky");
static_assert(sizeof(BP_LevelSequenceController_C_InitSky) == 0x000018, "Wrong size on BP_LevelSequenceController_C_InitSky");
static_assert(offsetof(BP_LevelSequenceController_C_InitSky, ChangeEnvironmentLighting_0) == 0x000000, "Member 'BP_LevelSequenceController_C_InitSky::ChangeEnvironmentLighting_0' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_InitSky, CallFunc_GetSmallStarEmissive_ReturnValue) == 0x000008, "Member 'BP_LevelSequenceController_C_InitSky::CallFunc_GetSmallStarEmissive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_InitSky, CallFunc_GetSmallStarReduce_ReturnValue) == 0x00000C, "Member 'BP_LevelSequenceController_C_InitSky::CallFunc_GetSmallStarReduce_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LevelSequenceController_C_InitSky, CallFunc_GetBigStarEmissive_ReturnValue) == 0x000010, "Member 'BP_LevelSequenceController_C_InitSky::CallFunc_GetBigStarEmissive_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.ResetSkyPalam
// 0x0001 (0x0001 - 0x0000)
struct BP_LevelSequenceController_C_ResetSkyPalam final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_ResetSkyPalam) == 0x000001, "Wrong alignment on BP_LevelSequenceController_C_ResetSkyPalam");
static_assert(sizeof(BP_LevelSequenceController_C_ResetSkyPalam) == 0x000001, "Wrong size on BP_LevelSequenceController_C_ResetSkyPalam");
static_assert(offsetof(BP_LevelSequenceController_C_ResetSkyPalam, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_LevelSequenceController_C_ResetSkyPalam::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_LevelSequenceController.BP_LevelSequenceController_C.IsPlayingLevelSequence
// 0x0001 (0x0001 - 0x0000)
struct BP_LevelSequenceController_C_IsPlayingLevelSequence final
{
public:
	bool                                          return_0;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LevelSequenceController_C_IsPlayingLevelSequence) == 0x000001, "Wrong alignment on BP_LevelSequenceController_C_IsPlayingLevelSequence");
static_assert(sizeof(BP_LevelSequenceController_C_IsPlayingLevelSequence) == 0x000001, "Wrong size on BP_LevelSequenceController_C_IsPlayingLevelSequence");
static_assert(offsetof(BP_LevelSequenceController_C_IsPlayingLevelSequence, return_0) == 0x000000, "Member 'BP_LevelSequenceController_C_IsPlayingLevelSequence::return_0' has a wrong offset!");

}

